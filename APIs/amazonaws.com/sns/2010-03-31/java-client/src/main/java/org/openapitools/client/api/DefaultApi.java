/*
 * Amazon Simple Notification Service
 * <fullname>Amazon Simple Notification Service</fullname> <p>Amazon Simple Notification Service (Amazon SNS) is a web service that enables you to build distributed web-enabled applications. Applications can use Amazon SNS to easily push real-time notification messages to interested subscribers over multiple delivery protocols. For more information about this product see the <a href=\"http://aws.amazon.com/sns/\">Amazon SNS product page</a>. For detailed information about Amazon SNS features and their associated API calls, see the <a href=\"https://docs.aws.amazon.com/sns/latest/dg/\">Amazon SNS Developer Guide</a>. </p> <p>For information on the permissions you need to use this API, see <a href=\"https://docs.aws.amazon.com/sns/latest/dg/sns-authentication-and-access-control.html\">Identity and access management in Amazon SNS</a> in the <i>Amazon SNS Developer Guide.</i> </p> <p>We also provide SDKs that enable you to access Amazon SNS from your preferred programming language. The SDKs contain functionality that automatically takes care of tasks such as: cryptographically signing your service requests, retrying requests, and handling error responses. For a list of available SDKs, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>. </p>
 *
 * The version of the OpenAPI document: 2010-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddPermissionInput;
import org.openapitools.client.model.CheckIfPhoneNumberIsOptedOutInput;
import org.openapitools.client.model.CheckIfPhoneNumberIsOptedOutResponse;
import org.openapitools.client.model.ConfirmSubscriptionInput;
import org.openapitools.client.model.ConfirmSubscriptionResponse;
import org.openapitools.client.model.CreateEndpointResponse;
import org.openapitools.client.model.CreatePlatformApplicationInput;
import org.openapitools.client.model.CreatePlatformApplicationResponse;
import org.openapitools.client.model.CreatePlatformEndpointInput;
import org.openapitools.client.model.CreateSMSSandboxPhoneNumberInput;
import org.openapitools.client.model.CreateTopicInput;
import org.openapitools.client.model.CreateTopicResponse;
import org.openapitools.client.model.DeleteEndpointInput;
import org.openapitools.client.model.DeletePlatformApplicationInput;
import org.openapitools.client.model.DeleteSMSSandboxPhoneNumberInput;
import org.openapitools.client.model.DeleteTopicInput;
import org.openapitools.client.model.GetDataProtectionPolicyInput;
import org.openapitools.client.model.GetDataProtectionPolicyResponse;
import org.openapitools.client.model.GetEndpointAttributesInput;
import org.openapitools.client.model.GetEndpointAttributesResponse;
import org.openapitools.client.model.GetPlatformApplicationAttributesInput;
import org.openapitools.client.model.GetPlatformApplicationAttributesResponse;
import org.openapitools.client.model.GetSMSAttributesInput;
import org.openapitools.client.model.GetSMSAttributesResponse;
import org.openapitools.client.model.GetSMSSandboxAccountStatusResult;
import org.openapitools.client.model.GetSubscriptionAttributesInput;
import org.openapitools.client.model.GetSubscriptionAttributesResponse;
import org.openapitools.client.model.GetTopicAttributesInput;
import org.openapitools.client.model.GetTopicAttributesResponse;
import org.openapitools.client.model.ListEndpointsByPlatformApplicationInput;
import org.openapitools.client.model.ListEndpointsByPlatformApplicationResponse;
import org.openapitools.client.model.ListOriginationNumbersRequest;
import org.openapitools.client.model.ListOriginationNumbersResult;
import org.openapitools.client.model.ListPhoneNumbersOptedOutInput;
import org.openapitools.client.model.ListPhoneNumbersOptedOutResponse;
import org.openapitools.client.model.ListPlatformApplicationsInput;
import org.openapitools.client.model.ListPlatformApplicationsResponse;
import org.openapitools.client.model.ListSMSSandboxPhoneNumbersInput;
import org.openapitools.client.model.ListSMSSandboxPhoneNumbersResult;
import org.openapitools.client.model.ListSubscriptionsByTopicInput;
import org.openapitools.client.model.ListSubscriptionsByTopicResponse;
import org.openapitools.client.model.ListSubscriptionsInput;
import org.openapitools.client.model.ListSubscriptionsResponse;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ListTopicsInput;
import org.openapitools.client.model.ListTopicsResponse;
import org.openapitools.client.model.MessageAttributeValue;
import org.openapitools.client.model.OptInPhoneNumberInput;
import org.openapitools.client.model.PublishBatchInput;
import org.openapitools.client.model.PublishBatchRequestEntry;
import org.openapitools.client.model.PublishBatchResponse;
import org.openapitools.client.model.PublishInput;
import org.openapitools.client.model.PublishResponse;
import org.openapitools.client.model.PutDataProtectionPolicyInput;
import org.openapitools.client.model.RemovePermissionInput;
import org.openapitools.client.model.SetEndpointAttributesInput;
import org.openapitools.client.model.SetPlatformApplicationAttributesInput;
import org.openapitools.client.model.SetSMSAttributesInput;
import org.openapitools.client.model.SetSubscriptionAttributesInput;
import org.openapitools.client.model.SetTopicAttributesInput;
import org.openapitools.client.model.SubscribeInput;
import org.openapitools.client.model.SubscribeResponse;
import org.openapitools.client.model.Tag;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UnsubscribeInput;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.VerifySMSSandboxPhoneNumberInput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for gETAddPermission
     * @param topicArn The ARN of the topic whose access control policy you wish to modify. (required)
     * @param label A unique identifier for the new policy statement. (required)
     * @param awSAccountId The Amazon Web Services account IDs of the users (principals) who will be given access to the specified actions. The users must have Amazon Web Services account, but do not need to be signed up for this service. (required)
     * @param actionName &lt;p&gt;The action you want to allow for the specified principal(s).&lt;/p&gt; &lt;p&gt;Valid values: Any Amazon SNS action name, for example &lt;code&gt;Publish&lt;/code&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAddPermissionCall(String topicArn, String label, List<String> awSAccountId, List<String> actionName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=AddPermission";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (topicArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TopicArn", topicArn));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Label", label));
        }

        if (awSAccountId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "AWSAccountId", awSAccountId));
        }

        if (actionName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ActionName", actionName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETAddPermissionValidateBeforeCall(String topicArn, String label, List<String> awSAccountId, List<String> actionName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'topicArn' is set
        if (topicArn == null) {
            throw new ApiException("Missing the required parameter 'topicArn' when calling gETAddPermission(Async)");
        }

        // verify the required parameter 'label' is set
        if (label == null) {
            throw new ApiException("Missing the required parameter 'label' when calling gETAddPermission(Async)");
        }

        // verify the required parameter 'awSAccountId' is set
        if (awSAccountId == null) {
            throw new ApiException("Missing the required parameter 'awSAccountId' when calling gETAddPermission(Async)");
        }

        // verify the required parameter 'actionName' is set
        if (actionName == null) {
            throw new ApiException("Missing the required parameter 'actionName' when calling gETAddPermission(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETAddPermission(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETAddPermission(Async)");
        }

        return gETAddPermissionCall(topicArn, label, awSAccountId, actionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds a statement to a topic&#39;s access control policy, granting access for the specified Amazon Web Services accounts to the specified actions.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To remove the ability to change topic permissions, you must deny permissions to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetTopicAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/note&gt;
     * @param topicArn The ARN of the topic whose access control policy you wish to modify. (required)
     * @param label A unique identifier for the new policy statement. (required)
     * @param awSAccountId The Amazon Web Services account IDs of the users (principals) who will be given access to the specified actions. The users must have Amazon Web Services account, but do not need to be signed up for this service. (required)
     * @param actionName &lt;p&gt;The action you want to allow for the specified principal(s).&lt;/p&gt; &lt;p&gt;Valid values: Any Amazon SNS action name, for example &lt;code&gt;Publish&lt;/code&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public void gETAddPermission(String topicArn, String label, List<String> awSAccountId, List<String> actionName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETAddPermissionWithHttpInfo(topicArn, label, awSAccountId, actionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Adds a statement to a topic&#39;s access control policy, granting access for the specified Amazon Web Services accounts to the specified actions.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To remove the ability to change topic permissions, you must deny permissions to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetTopicAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/note&gt;
     * @param topicArn The ARN of the topic whose access control policy you wish to modify. (required)
     * @param label A unique identifier for the new policy statement. (required)
     * @param awSAccountId The Amazon Web Services account IDs of the users (principals) who will be given access to the specified actions. The users must have Amazon Web Services account, but do not need to be signed up for this service. (required)
     * @param actionName &lt;p&gt;The action you want to allow for the specified principal(s).&lt;/p&gt; &lt;p&gt;Valid values: Any Amazon SNS action name, for example &lt;code&gt;Publish&lt;/code&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETAddPermissionWithHttpInfo(String topicArn, String label, List<String> awSAccountId, List<String> actionName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETAddPermissionValidateBeforeCall(topicArn, label, awSAccountId, actionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds a statement to a topic&#39;s access control policy, granting access for the specified Amazon Web Services accounts to the specified actions.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To remove the ability to change topic permissions, you must deny permissions to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetTopicAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/note&gt;
     * @param topicArn The ARN of the topic whose access control policy you wish to modify. (required)
     * @param label A unique identifier for the new policy statement. (required)
     * @param awSAccountId The Amazon Web Services account IDs of the users (principals) who will be given access to the specified actions. The users must have Amazon Web Services account, but do not need to be signed up for this service. (required)
     * @param actionName &lt;p&gt;The action you want to allow for the specified principal(s).&lt;/p&gt; &lt;p&gt;Valid values: Any Amazon SNS action name, for example &lt;code&gt;Publish&lt;/code&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAddPermissionAsync(String topicArn, String label, List<String> awSAccountId, List<String> actionName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETAddPermissionValidateBeforeCall(topicArn, label, awSAccountId, actionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCheckIfPhoneNumberIsOptedOut
     * @param phoneNumber The phone number for which you want to check the opt out status. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCheckIfPhoneNumberIsOptedOutCall(String phoneNumber, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CheckIfPhoneNumberIsOptedOut";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (phoneNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phoneNumber", phoneNumber));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCheckIfPhoneNumberIsOptedOutValidateBeforeCall(String phoneNumber, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneNumber' is set
        if (phoneNumber == null) {
            throw new ApiException("Missing the required parameter 'phoneNumber' when calling gETCheckIfPhoneNumberIsOptedOut(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCheckIfPhoneNumberIsOptedOut(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCheckIfPhoneNumberIsOptedOut(Async)");
        }

        return gETCheckIfPhoneNumberIsOptedOutCall(phoneNumber, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Accepts a phone number and indicates whether the phone holder has opted out of receiving SMS messages from your Amazon Web Services account. You cannot send SMS messages to a number that is opted out.&lt;/p&gt; &lt;p&gt;To resume sending messages, you can opt in the number by using the &lt;code&gt;OptInPhoneNumber&lt;/code&gt; action.&lt;/p&gt;
     * @param phoneNumber The phone number for which you want to check the opt out status. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CheckIfPhoneNumberIsOptedOutResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public CheckIfPhoneNumberIsOptedOutResponse gETCheckIfPhoneNumberIsOptedOut(String phoneNumber, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CheckIfPhoneNumberIsOptedOutResponse> localVarResp = gETCheckIfPhoneNumberIsOptedOutWithHttpInfo(phoneNumber, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Accepts a phone number and indicates whether the phone holder has opted out of receiving SMS messages from your Amazon Web Services account. You cannot send SMS messages to a number that is opted out.&lt;/p&gt; &lt;p&gt;To resume sending messages, you can opt in the number by using the &lt;code&gt;OptInPhoneNumber&lt;/code&gt; action.&lt;/p&gt;
     * @param phoneNumber The phone number for which you want to check the opt out status. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CheckIfPhoneNumberIsOptedOutResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckIfPhoneNumberIsOptedOutResponse> gETCheckIfPhoneNumberIsOptedOutWithHttpInfo(String phoneNumber, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETCheckIfPhoneNumberIsOptedOutValidateBeforeCall(phoneNumber, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CheckIfPhoneNumberIsOptedOutResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Accepts a phone number and indicates whether the phone holder has opted out of receiving SMS messages from your Amazon Web Services account. You cannot send SMS messages to a number that is opted out.&lt;/p&gt; &lt;p&gt;To resume sending messages, you can opt in the number by using the &lt;code&gt;OptInPhoneNumber&lt;/code&gt; action.&lt;/p&gt;
     * @param phoneNumber The phone number for which you want to check the opt out status. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCheckIfPhoneNumberIsOptedOutAsync(String phoneNumber, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CheckIfPhoneNumberIsOptedOutResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCheckIfPhoneNumberIsOptedOutValidateBeforeCall(phoneNumber, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CheckIfPhoneNumberIsOptedOutResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETConfirmSubscription
     * @param topicArn The ARN of the topic for which you wish to confirm a subscription. (required)
     * @param token Short-lived token sent to an endpoint during the &lt;code&gt;Subscribe&lt;/code&gt; action. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param authenticateOnUnsubscribe Disallows unauthenticated unsubscribes of the subscription. If the value of this parameter is &lt;code&gt;true&lt;/code&gt; and the request has an Amazon Web Services signature, then only the topic owner and the subscription owner can unsubscribe the endpoint. The unsubscribe action requires Amazon Web Services authentication.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> FilterPolicyLimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETConfirmSubscriptionCall(String topicArn, String token, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String authenticateOnUnsubscribe, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ConfirmSubscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (topicArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TopicArn", topicArn));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Token", token));
        }

        if (authenticateOnUnsubscribe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AuthenticateOnUnsubscribe", authenticateOnUnsubscribe));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETConfirmSubscriptionValidateBeforeCall(String topicArn, String token, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String authenticateOnUnsubscribe, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'topicArn' is set
        if (topicArn == null) {
            throw new ApiException("Missing the required parameter 'topicArn' when calling gETConfirmSubscription(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling gETConfirmSubscription(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETConfirmSubscription(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETConfirmSubscription(Async)");
        }

        return gETConfirmSubscriptionCall(topicArn, token, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, authenticateOnUnsubscribe, _callback);

    }

    /**
     * 
     * Verifies an endpoint owner&#39;s intent to receive messages by validating the token sent to the endpoint by an earlier &lt;code&gt;Subscribe&lt;/code&gt; action. If the token is valid, the action creates a new subscription and returns its Amazon Resource Name (ARN). This call requires an AWS signature only when the &lt;code&gt;AuthenticateOnUnsubscribe&lt;/code&gt; flag is set to \&quot;true\&quot;.
     * @param topicArn The ARN of the topic for which you wish to confirm a subscription. (required)
     * @param token Short-lived token sent to an endpoint during the &lt;code&gt;Subscribe&lt;/code&gt; action. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param authenticateOnUnsubscribe Disallows unauthenticated unsubscribes of the subscription. If the value of this parameter is &lt;code&gt;true&lt;/code&gt; and the request has an Amazon Web Services signature, then only the topic owner and the subscription owner can unsubscribe the endpoint. The unsubscribe action requires Amazon Web Services authentication.  (optional)
     * @return ConfirmSubscriptionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> FilterPolicyLimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ConfirmSubscriptionResponse gETConfirmSubscription(String topicArn, String token, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String authenticateOnUnsubscribe) throws ApiException {
        ApiResponse<ConfirmSubscriptionResponse> localVarResp = gETConfirmSubscriptionWithHttpInfo(topicArn, token, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, authenticateOnUnsubscribe);
        return localVarResp.getData();
    }

    /**
     * 
     * Verifies an endpoint owner&#39;s intent to receive messages by validating the token sent to the endpoint by an earlier &lt;code&gt;Subscribe&lt;/code&gt; action. If the token is valid, the action creates a new subscription and returns its Amazon Resource Name (ARN). This call requires an AWS signature only when the &lt;code&gt;AuthenticateOnUnsubscribe&lt;/code&gt; flag is set to \&quot;true\&quot;.
     * @param topicArn The ARN of the topic for which you wish to confirm a subscription. (required)
     * @param token Short-lived token sent to an endpoint during the &lt;code&gt;Subscribe&lt;/code&gt; action. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param authenticateOnUnsubscribe Disallows unauthenticated unsubscribes of the subscription. If the value of this parameter is &lt;code&gt;true&lt;/code&gt; and the request has an Amazon Web Services signature, then only the topic owner and the subscription owner can unsubscribe the endpoint. The unsubscribe action requires Amazon Web Services authentication.  (optional)
     * @return ApiResponse&lt;ConfirmSubscriptionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> FilterPolicyLimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfirmSubscriptionResponse> gETConfirmSubscriptionWithHttpInfo(String topicArn, String token, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String authenticateOnUnsubscribe) throws ApiException {
        okhttp3.Call localVarCall = gETConfirmSubscriptionValidateBeforeCall(topicArn, token, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, authenticateOnUnsubscribe, null);
        Type localVarReturnType = new TypeToken<ConfirmSubscriptionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Verifies an endpoint owner&#39;s intent to receive messages by validating the token sent to the endpoint by an earlier &lt;code&gt;Subscribe&lt;/code&gt; action. If the token is valid, the action creates a new subscription and returns its Amazon Resource Name (ARN). This call requires an AWS signature only when the &lt;code&gt;AuthenticateOnUnsubscribe&lt;/code&gt; flag is set to \&quot;true\&quot;.
     * @param topicArn The ARN of the topic for which you wish to confirm a subscription. (required)
     * @param token Short-lived token sent to an endpoint during the &lt;code&gt;Subscribe&lt;/code&gt; action. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param authenticateOnUnsubscribe Disallows unauthenticated unsubscribes of the subscription. If the value of this parameter is &lt;code&gt;true&lt;/code&gt; and the request has an Amazon Web Services signature, then only the topic owner and the subscription owner can unsubscribe the endpoint. The unsubscribe action requires Amazon Web Services authentication.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> FilterPolicyLimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETConfirmSubscriptionAsync(String topicArn, String token, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String authenticateOnUnsubscribe, final ApiCallback<ConfirmSubscriptionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETConfirmSubscriptionValidateBeforeCall(topicArn, token, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, authenticateOnUnsubscribe, _callback);
        Type localVarReturnType = new TypeToken<ConfirmSubscriptionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreatePlatformApplication
     * @param name Application names must be made up of only uppercase and lowercase ASCII letters, numbers, underscores, hyphens, and periods, and must be between 1 and 256 characters long. (required)
     * @param platform The following platforms are supported: ADM (Amazon Device Messaging), APNS (Apple Push Notification Service), APNS_SANDBOX, and GCM (Firebase Cloud Messaging). (required)
     * @param attributes For a list of attributes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/api/API_SetPlatformApplicationAttributes.html\&quot;&gt;SetPlatformApplicationAttributes&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreatePlatformApplicationCall(String name, String platform, Map<String, String> attributes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreatePlatformApplication";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Name", name));
        }

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Platform", platform));
        }

        if (attributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Attributes", attributes));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreatePlatformApplicationValidateBeforeCall(String name, String platform, Map<String, String> attributes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling gETCreatePlatformApplication(Async)");
        }

        // verify the required parameter 'platform' is set
        if (platform == null) {
            throw new ApiException("Missing the required parameter 'platform' when calling gETCreatePlatformApplication(Async)");
        }

        // verify the required parameter 'attributes' is set
        if (attributes == null) {
            throw new ApiException("Missing the required parameter 'attributes' when calling gETCreatePlatformApplication(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreatePlatformApplication(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreatePlatformApplication(Async)");
        }

        return gETCreatePlatformApplicationCall(name, platform, attributes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a platform application object for one of the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging), to which devices and mobile apps may register. You must specify &lt;code&gt;PlatformPrincipal&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; attributes when using the &lt;code&gt;CreatePlatformApplication&lt;/code&gt; action.&lt;/p&gt; &lt;p&gt; &lt;code&gt;PlatformPrincipal&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; are received from the notification service.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;ADM&lt;/code&gt;, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;client id&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;client secret&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;Baidu&lt;/code&gt;, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;API key&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;secret key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;APNS&lt;/code&gt; and &lt;code&gt;APNS_SANDBOX&lt;/code&gt; using certificate credentials, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;SSL certificate&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;private key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;APNS&lt;/code&gt; and &lt;code&gt;APNS_SANDBOX&lt;/code&gt; using token credentials, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;signing key ID&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;signing key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;GCM&lt;/code&gt; (Firebase Cloud Messaging), there is no &lt;code&gt;PlatformPrincipal&lt;/code&gt; and the &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;API key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;MPNS&lt;/code&gt;, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;TLS certificate&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;private key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;WNS&lt;/code&gt;, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;Package Security Identifier&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;secret key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can use the returned &lt;code&gt;PlatformApplicationArn&lt;/code&gt; as an attribute for the &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; action.&lt;/p&gt;
     * @param name Application names must be made up of only uppercase and lowercase ASCII letters, numbers, underscores, hyphens, and periods, and must be between 1 and 256 characters long. (required)
     * @param platform The following platforms are supported: ADM (Amazon Device Messaging), APNS (Apple Push Notification Service), APNS_SANDBOX, and GCM (Firebase Cloud Messaging). (required)
     * @param attributes For a list of attributes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/api/API_SetPlatformApplicationAttributes.html\&quot;&gt;SetPlatformApplicationAttributes&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreatePlatformApplicationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public CreatePlatformApplicationResponse gETCreatePlatformApplication(String name, String platform, Map<String, String> attributes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreatePlatformApplicationResponse> localVarResp = gETCreatePlatformApplicationWithHttpInfo(name, platform, attributes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a platform application object for one of the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging), to which devices and mobile apps may register. You must specify &lt;code&gt;PlatformPrincipal&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; attributes when using the &lt;code&gt;CreatePlatformApplication&lt;/code&gt; action.&lt;/p&gt; &lt;p&gt; &lt;code&gt;PlatformPrincipal&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; are received from the notification service.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;ADM&lt;/code&gt;, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;client id&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;client secret&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;Baidu&lt;/code&gt;, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;API key&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;secret key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;APNS&lt;/code&gt; and &lt;code&gt;APNS_SANDBOX&lt;/code&gt; using certificate credentials, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;SSL certificate&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;private key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;APNS&lt;/code&gt; and &lt;code&gt;APNS_SANDBOX&lt;/code&gt; using token credentials, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;signing key ID&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;signing key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;GCM&lt;/code&gt; (Firebase Cloud Messaging), there is no &lt;code&gt;PlatformPrincipal&lt;/code&gt; and the &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;API key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;MPNS&lt;/code&gt;, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;TLS certificate&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;private key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;WNS&lt;/code&gt;, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;Package Security Identifier&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;secret key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can use the returned &lt;code&gt;PlatformApplicationArn&lt;/code&gt; as an attribute for the &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; action.&lt;/p&gt;
     * @param name Application names must be made up of only uppercase and lowercase ASCII letters, numbers, underscores, hyphens, and periods, and must be between 1 and 256 characters long. (required)
     * @param platform The following platforms are supported: ADM (Amazon Device Messaging), APNS (Apple Push Notification Service), APNS_SANDBOX, and GCM (Firebase Cloud Messaging). (required)
     * @param attributes For a list of attributes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/api/API_SetPlatformApplicationAttributes.html\&quot;&gt;SetPlatformApplicationAttributes&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreatePlatformApplicationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreatePlatformApplicationResponse> gETCreatePlatformApplicationWithHttpInfo(String name, String platform, Map<String, String> attributes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETCreatePlatformApplicationValidateBeforeCall(name, platform, attributes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreatePlatformApplicationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a platform application object for one of the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging), to which devices and mobile apps may register. You must specify &lt;code&gt;PlatformPrincipal&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; attributes when using the &lt;code&gt;CreatePlatformApplication&lt;/code&gt; action.&lt;/p&gt; &lt;p&gt; &lt;code&gt;PlatformPrincipal&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; are received from the notification service.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;ADM&lt;/code&gt;, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;client id&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;client secret&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;Baidu&lt;/code&gt;, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;API key&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;secret key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;APNS&lt;/code&gt; and &lt;code&gt;APNS_SANDBOX&lt;/code&gt; using certificate credentials, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;SSL certificate&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;private key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;APNS&lt;/code&gt; and &lt;code&gt;APNS_SANDBOX&lt;/code&gt; using token credentials, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;signing key ID&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;signing key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;GCM&lt;/code&gt; (Firebase Cloud Messaging), there is no &lt;code&gt;PlatformPrincipal&lt;/code&gt; and the &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;API key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;MPNS&lt;/code&gt;, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;TLS certificate&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;private key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;WNS&lt;/code&gt;, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;Package Security Identifier&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;secret key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can use the returned &lt;code&gt;PlatformApplicationArn&lt;/code&gt; as an attribute for the &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; action.&lt;/p&gt;
     * @param name Application names must be made up of only uppercase and lowercase ASCII letters, numbers, underscores, hyphens, and periods, and must be between 1 and 256 characters long. (required)
     * @param platform The following platforms are supported: ADM (Amazon Device Messaging), APNS (Apple Push Notification Service), APNS_SANDBOX, and GCM (Firebase Cloud Messaging). (required)
     * @param attributes For a list of attributes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/api/API_SetPlatformApplicationAttributes.html\&quot;&gt;SetPlatformApplicationAttributes&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreatePlatformApplicationAsync(String name, String platform, Map<String, String> attributes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreatePlatformApplicationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreatePlatformApplicationValidateBeforeCall(name, platform, attributes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreatePlatformApplicationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreatePlatformEndpoint
     * @param platformApplicationArn PlatformApplicationArn returned from CreatePlatformApplication is used to create a an endpoint. (required)
     * @param token Unique identifier created by the notification service for an app on a device. The specific name for Token will vary, depending on which notification service is being used. For example, when using APNS as the notification service, you need the device token. Alternatively, when using GCM (Firebase Cloud Messaging) or ADM, the device token equivalent is called the registration ID. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param customUserData Arbitrary user data to associate with the endpoint. Amazon SNS does not use this data. The data must be in UTF-8 format and less than 2KB. (optional)
     * @param attributes For a list of attributes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/api/API_SetEndpointAttributes.html\&quot;&gt;SetEndpointAttributes&lt;/a&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreatePlatformEndpointCall(String platformApplicationArn, String token, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String customUserData, Map<String, String> attributes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreatePlatformEndpoint";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platformApplicationArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlatformApplicationArn", platformApplicationArn));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Token", token));
        }

        if (customUserData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CustomUserData", customUserData));
        }

        if (attributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Attributes", attributes));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreatePlatformEndpointValidateBeforeCall(String platformApplicationArn, String token, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String customUserData, Map<String, String> attributes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'platformApplicationArn' is set
        if (platformApplicationArn == null) {
            throw new ApiException("Missing the required parameter 'platformApplicationArn' when calling gETCreatePlatformEndpoint(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling gETCreatePlatformEndpoint(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreatePlatformEndpoint(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreatePlatformEndpoint(Async)");
        }

        return gETCreatePlatformEndpointCall(platformApplicationArn, token, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, customUserData, attributes, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates an endpoint for a device and mobile app on one of the supported push notification services, such as GCM (Firebase Cloud Messaging) and APNS. &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; requires the &lt;code&gt;PlatformApplicationArn&lt;/code&gt; that is returned from &lt;code&gt;CreatePlatformApplication&lt;/code&gt;. You can use the returned &lt;code&gt;EndpointArn&lt;/code&gt; to send a message to a mobile app or by the &lt;code&gt;Subscribe&lt;/code&gt; action for subscription to a topic. The &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; action is idempotent, so if the requester already owns an endpoint with the same device token and attributes, that endpoint&#39;s ARN is returned without creating a new endpoint. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;When using &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; with Baidu, two attributes must be provided: ChannelId and UserId. The token field must also contain the ChannelId. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePushBaiduEndpoint.html\&quot;&gt;Creating an Amazon SNS Endpoint for Baidu&lt;/a&gt;. &lt;/p&gt;
     * @param platformApplicationArn PlatformApplicationArn returned from CreatePlatformApplication is used to create a an endpoint. (required)
     * @param token Unique identifier created by the notification service for an app on a device. The specific name for Token will vary, depending on which notification service is being used. For example, when using APNS as the notification service, you need the device token. Alternatively, when using GCM (Firebase Cloud Messaging) or ADM, the device token equivalent is called the registration ID. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param customUserData Arbitrary user data to associate with the endpoint. Amazon SNS does not use this data. The data must be in UTF-8 format and less than 2KB. (optional)
     * @param attributes For a list of attributes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/api/API_SetEndpointAttributes.html\&quot;&gt;SetEndpointAttributes&lt;/a&gt;. (optional)
     * @return CreateEndpointResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public CreateEndpointResponse gETCreatePlatformEndpoint(String platformApplicationArn, String token, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String customUserData, Map<String, String> attributes) throws ApiException {
        ApiResponse<CreateEndpointResponse> localVarResp = gETCreatePlatformEndpointWithHttpInfo(platformApplicationArn, token, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, customUserData, attributes);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates an endpoint for a device and mobile app on one of the supported push notification services, such as GCM (Firebase Cloud Messaging) and APNS. &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; requires the &lt;code&gt;PlatformApplicationArn&lt;/code&gt; that is returned from &lt;code&gt;CreatePlatformApplication&lt;/code&gt;. You can use the returned &lt;code&gt;EndpointArn&lt;/code&gt; to send a message to a mobile app or by the &lt;code&gt;Subscribe&lt;/code&gt; action for subscription to a topic. The &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; action is idempotent, so if the requester already owns an endpoint with the same device token and attributes, that endpoint&#39;s ARN is returned without creating a new endpoint. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;When using &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; with Baidu, two attributes must be provided: ChannelId and UserId. The token field must also contain the ChannelId. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePushBaiduEndpoint.html\&quot;&gt;Creating an Amazon SNS Endpoint for Baidu&lt;/a&gt;. &lt;/p&gt;
     * @param platformApplicationArn PlatformApplicationArn returned from CreatePlatformApplication is used to create a an endpoint. (required)
     * @param token Unique identifier created by the notification service for an app on a device. The specific name for Token will vary, depending on which notification service is being used. For example, when using APNS as the notification service, you need the device token. Alternatively, when using GCM (Firebase Cloud Messaging) or ADM, the device token equivalent is called the registration ID. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param customUserData Arbitrary user data to associate with the endpoint. Amazon SNS does not use this data. The data must be in UTF-8 format and less than 2KB. (optional)
     * @param attributes For a list of attributes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/api/API_SetEndpointAttributes.html\&quot;&gt;SetEndpointAttributes&lt;/a&gt;. (optional)
     * @return ApiResponse&lt;CreateEndpointResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateEndpointResponse> gETCreatePlatformEndpointWithHttpInfo(String platformApplicationArn, String token, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String customUserData, Map<String, String> attributes) throws ApiException {
        okhttp3.Call localVarCall = gETCreatePlatformEndpointValidateBeforeCall(platformApplicationArn, token, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, customUserData, attributes, null);
        Type localVarReturnType = new TypeToken<CreateEndpointResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates an endpoint for a device and mobile app on one of the supported push notification services, such as GCM (Firebase Cloud Messaging) and APNS. &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; requires the &lt;code&gt;PlatformApplicationArn&lt;/code&gt; that is returned from &lt;code&gt;CreatePlatformApplication&lt;/code&gt;. You can use the returned &lt;code&gt;EndpointArn&lt;/code&gt; to send a message to a mobile app or by the &lt;code&gt;Subscribe&lt;/code&gt; action for subscription to a topic. The &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; action is idempotent, so if the requester already owns an endpoint with the same device token and attributes, that endpoint&#39;s ARN is returned without creating a new endpoint. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;When using &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; with Baidu, two attributes must be provided: ChannelId and UserId. The token field must also contain the ChannelId. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePushBaiduEndpoint.html\&quot;&gt;Creating an Amazon SNS Endpoint for Baidu&lt;/a&gt;. &lt;/p&gt;
     * @param platformApplicationArn PlatformApplicationArn returned from CreatePlatformApplication is used to create a an endpoint. (required)
     * @param token Unique identifier created by the notification service for an app on a device. The specific name for Token will vary, depending on which notification service is being used. For example, when using APNS as the notification service, you need the device token. Alternatively, when using GCM (Firebase Cloud Messaging) or ADM, the device token equivalent is called the registration ID. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param customUserData Arbitrary user data to associate with the endpoint. Amazon SNS does not use this data. The data must be in UTF-8 format and less than 2KB. (optional)
     * @param attributes For a list of attributes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/api/API_SetEndpointAttributes.html\&quot;&gt;SetEndpointAttributes&lt;/a&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreatePlatformEndpointAsync(String platformApplicationArn, String token, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String customUserData, Map<String, String> attributes, final ApiCallback<CreateEndpointResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreatePlatformEndpointValidateBeforeCall(platformApplicationArn, token, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, customUserData, attributes, _callback);
        Type localVarReturnType = new TypeToken<CreateEndpointResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateSMSSandboxPhoneNumber
     * @param phoneNumber The destination phone number to verify. On verification, Amazon SNS adds this phone number to the list of verified phone numbers that you can send SMS messages to. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param languageCode The language to use for sending the OTP. The default value is &lt;code&gt;en-US&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OptedOutException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateSMSSandboxPhoneNumberCall(String phoneNumber, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String languageCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateSMSSandboxPhoneNumber";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (phoneNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PhoneNumber", phoneNumber));
        }

        if (languageCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LanguageCode", languageCode));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateSMSSandboxPhoneNumberValidateBeforeCall(String phoneNumber, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String languageCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneNumber' is set
        if (phoneNumber == null) {
            throw new ApiException("Missing the required parameter 'phoneNumber' when calling gETCreateSMSSandboxPhoneNumber(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateSMSSandboxPhoneNumber(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateSMSSandboxPhoneNumber(Async)");
        }

        return gETCreateSMSSandboxPhoneNumberCall(phoneNumber, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, languageCode, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds a destination phone number to an Amazon Web Services account in the SMS sandbox and sends a one-time password (OTP) to that phone number.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param phoneNumber The destination phone number to verify. On verification, Amazon SNS adds this phone number to the list of verified phone numbers that you can send SMS messages to. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param languageCode The language to use for sending the OTP. The default value is &lt;code&gt;en-US&lt;/code&gt;. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OptedOutException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETCreateSMSSandboxPhoneNumber(String phoneNumber, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String languageCode) throws ApiException {
        ApiResponse<Object> localVarResp = gETCreateSMSSandboxPhoneNumberWithHttpInfo(phoneNumber, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, languageCode);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Adds a destination phone number to an Amazon Web Services account in the SMS sandbox and sends a one-time password (OTP) to that phone number.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param phoneNumber The destination phone number to verify. On verification, Amazon SNS adds this phone number to the list of verified phone numbers that you can send SMS messages to. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param languageCode The language to use for sending the OTP. The default value is &lt;code&gt;en-US&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OptedOutException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETCreateSMSSandboxPhoneNumberWithHttpInfo(String phoneNumber, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String languageCode) throws ApiException {
        okhttp3.Call localVarCall = gETCreateSMSSandboxPhoneNumberValidateBeforeCall(phoneNumber, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, languageCode, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds a destination phone number to an Amazon Web Services account in the SMS sandbox and sends a one-time password (OTP) to that phone number.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param phoneNumber The destination phone number to verify. On verification, Amazon SNS adds this phone number to the list of verified phone numbers that you can send SMS messages to. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param languageCode The language to use for sending the OTP. The default value is &lt;code&gt;en-US&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OptedOutException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateSMSSandboxPhoneNumberAsync(String phoneNumber, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String languageCode, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateSMSSandboxPhoneNumberValidateBeforeCall(phoneNumber, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, languageCode, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateTopic
     * @param name &lt;p&gt;The name of the topic you want to create.&lt;/p&gt; &lt;p&gt;Constraints: Topic names must be made up of only uppercase and lowercase ASCII letters, numbers, underscores, and hyphens, and must be between 1 and 256 characters long.&lt;/p&gt; &lt;p&gt;For a FIFO (first-in-first-out) topic, the name must end with the &lt;code&gt;.fifo&lt;/code&gt; suffix. &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attributes &lt;p&gt;A map of attributes with their corresponding values.&lt;/p&gt; &lt;p&gt;The following lists the names, descriptions, and values of the special request parameters that the &lt;code&gt;CreateTopic&lt;/code&gt; action uses:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DeliveryPolicy&lt;/code&gt; – The policy that defines how Amazon SNS retries failed deliveries to HTTP/S endpoints.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DisplayName&lt;/code&gt; – The display name to use for a topic with SMS subscriptions.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FifoTopic&lt;/code&gt; – Set to true to create a FIFO topic.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Policy&lt;/code&gt; – The policy that defines who can access your topic. By default, only the topic owner can publish or subscribe to the topic.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SignatureVersion&lt;/code&gt; – The signature version corresponds to the hashing algorithm used while creating the signature of the notifications, subscription confirmations, or unsubscribe confirmation messages sent by Amazon SNS. By default, &lt;code&gt;SignatureVersion&lt;/code&gt; is set to &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TracingConfig&lt;/code&gt; – Tracing mode of an Amazon SNS topic. By default &lt;code&gt;TracingConfig&lt;/code&gt; is set to &lt;code&gt;PassThrough&lt;/code&gt;, and the topic passes through the tracing header it receives from an Amazon SNS publisher to its subscriptions. If set to &lt;code&gt;Active&lt;/code&gt;, Amazon SNS will vend X-Ray segment data to topic owner account if the sampled flag in the tracing header is true. This is only supported on standard topics.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attribute applies only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html\&quot;&gt;server-side encryption&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KmsMasterKeyId&lt;/code&gt; – The ID of an Amazon Web Services managed customer master key (CMK) for Amazon SNS or a custom CMK. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html#sse-key-terms\&quot;&gt;Key Terms&lt;/a&gt;. For more examples, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters\&quot;&gt;KeyId&lt;/a&gt; in the &lt;i&gt;Key Management Service API Reference&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-fifo-topics.html\&quot;&gt;FIFO topics&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FifoTopic&lt;/code&gt; – When this is set to &lt;code&gt;true&lt;/code&gt;, a FIFO topic is created.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; – Enables content-based deduplication for FIFO topics.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;By default, &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;. If you create a FIFO topic and this attribute is &lt;code&gt;false&lt;/code&gt;, you must specify a value for the &lt;code&gt;MessageDeduplicationId&lt;/code&gt; parameter for the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/api/API_Publish.html\&quot;&gt;Publish&lt;/a&gt; action. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When you set &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, Amazon SNS uses a SHA-256 hash to generate the &lt;code&gt;MessageDeduplicationId&lt;/code&gt; using the body of the message (but not the attributes of the message).&lt;/p&gt; &lt;p&gt;(Optional) To override the generated value, you can specify a value for the &lt;code&gt;MessageDeduplicationId&lt;/code&gt; parameter for the &lt;code&gt;Publish&lt;/code&gt; action.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param tags &lt;p&gt;The list of tags to add to a new topic.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To be able to tag a topic on creation, you must have the &lt;code&gt;sns:CreateTopic&lt;/code&gt; and &lt;code&gt;sns:TagResource&lt;/code&gt; permissions.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param dataProtectionPolicy &lt;p&gt;The body of the policy document you want to use for this topic.&lt;/p&gt; &lt;p&gt;You can only add one policy per topic.&lt;/p&gt; &lt;p&gt;The policy must be in JSON string format.&lt;/p&gt; &lt;p&gt;Length Constraints: Maximum length of 30,720.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TopicLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TagLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> StaleTagException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateTopicCall(String name, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Map<String, String> attributes, List<Tag> tags, String dataProtectionPolicy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateTopic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Name", name));
        }

        if (attributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Attributes", attributes));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (dataProtectionPolicy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DataProtectionPolicy", dataProtectionPolicy));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateTopicValidateBeforeCall(String name, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Map<String, String> attributes, List<Tag> tags, String dataProtectionPolicy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling gETCreateTopic(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateTopic(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateTopic(Async)");
        }

        return gETCreateTopicCall(name, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attributes, tags, dataProtectionPolicy, _callback);

    }

    /**
     * 
     * Creates a topic to which notifications can be published. Users can create at most 100,000 standard topics (at most 1,000 FIFO topics). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-create-topic.html\&quot;&gt;Creating an Amazon SNS topic&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;. This action is idempotent, so if the requester already owns a topic with the specified name, that topic&#39;s ARN is returned without creating a new topic.
     * @param name &lt;p&gt;The name of the topic you want to create.&lt;/p&gt; &lt;p&gt;Constraints: Topic names must be made up of only uppercase and lowercase ASCII letters, numbers, underscores, and hyphens, and must be between 1 and 256 characters long.&lt;/p&gt; &lt;p&gt;For a FIFO (first-in-first-out) topic, the name must end with the &lt;code&gt;.fifo&lt;/code&gt; suffix. &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attributes &lt;p&gt;A map of attributes with their corresponding values.&lt;/p&gt; &lt;p&gt;The following lists the names, descriptions, and values of the special request parameters that the &lt;code&gt;CreateTopic&lt;/code&gt; action uses:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DeliveryPolicy&lt;/code&gt; – The policy that defines how Amazon SNS retries failed deliveries to HTTP/S endpoints.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DisplayName&lt;/code&gt; – The display name to use for a topic with SMS subscriptions.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FifoTopic&lt;/code&gt; – Set to true to create a FIFO topic.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Policy&lt;/code&gt; – The policy that defines who can access your topic. By default, only the topic owner can publish or subscribe to the topic.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SignatureVersion&lt;/code&gt; – The signature version corresponds to the hashing algorithm used while creating the signature of the notifications, subscription confirmations, or unsubscribe confirmation messages sent by Amazon SNS. By default, &lt;code&gt;SignatureVersion&lt;/code&gt; is set to &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TracingConfig&lt;/code&gt; – Tracing mode of an Amazon SNS topic. By default &lt;code&gt;TracingConfig&lt;/code&gt; is set to &lt;code&gt;PassThrough&lt;/code&gt;, and the topic passes through the tracing header it receives from an Amazon SNS publisher to its subscriptions. If set to &lt;code&gt;Active&lt;/code&gt;, Amazon SNS will vend X-Ray segment data to topic owner account if the sampled flag in the tracing header is true. This is only supported on standard topics.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attribute applies only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html\&quot;&gt;server-side encryption&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KmsMasterKeyId&lt;/code&gt; – The ID of an Amazon Web Services managed customer master key (CMK) for Amazon SNS or a custom CMK. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html#sse-key-terms\&quot;&gt;Key Terms&lt;/a&gt;. For more examples, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters\&quot;&gt;KeyId&lt;/a&gt; in the &lt;i&gt;Key Management Service API Reference&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-fifo-topics.html\&quot;&gt;FIFO topics&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FifoTopic&lt;/code&gt; – When this is set to &lt;code&gt;true&lt;/code&gt;, a FIFO topic is created.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; – Enables content-based deduplication for FIFO topics.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;By default, &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;. If you create a FIFO topic and this attribute is &lt;code&gt;false&lt;/code&gt;, you must specify a value for the &lt;code&gt;MessageDeduplicationId&lt;/code&gt; parameter for the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/api/API_Publish.html\&quot;&gt;Publish&lt;/a&gt; action. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When you set &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, Amazon SNS uses a SHA-256 hash to generate the &lt;code&gt;MessageDeduplicationId&lt;/code&gt; using the body of the message (but not the attributes of the message).&lt;/p&gt; &lt;p&gt;(Optional) To override the generated value, you can specify a value for the &lt;code&gt;MessageDeduplicationId&lt;/code&gt; parameter for the &lt;code&gt;Publish&lt;/code&gt; action.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param tags &lt;p&gt;The list of tags to add to a new topic.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To be able to tag a topic on creation, you must have the &lt;code&gt;sns:CreateTopic&lt;/code&gt; and &lt;code&gt;sns:TagResource&lt;/code&gt; permissions.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param dataProtectionPolicy &lt;p&gt;The body of the policy document you want to use for this topic.&lt;/p&gt; &lt;p&gt;You can only add one policy per topic.&lt;/p&gt; &lt;p&gt;The policy must be in JSON string format.&lt;/p&gt; &lt;p&gt;Length Constraints: Maximum length of 30,720.&lt;/p&gt; (optional)
     * @return CreateTopicResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TopicLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TagLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> StaleTagException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public CreateTopicResponse gETCreateTopic(String name, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Map<String, String> attributes, List<Tag> tags, String dataProtectionPolicy) throws ApiException {
        ApiResponse<CreateTopicResponse> localVarResp = gETCreateTopicWithHttpInfo(name, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attributes, tags, dataProtectionPolicy);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a topic to which notifications can be published. Users can create at most 100,000 standard topics (at most 1,000 FIFO topics). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-create-topic.html\&quot;&gt;Creating an Amazon SNS topic&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;. This action is idempotent, so if the requester already owns a topic with the specified name, that topic&#39;s ARN is returned without creating a new topic.
     * @param name &lt;p&gt;The name of the topic you want to create.&lt;/p&gt; &lt;p&gt;Constraints: Topic names must be made up of only uppercase and lowercase ASCII letters, numbers, underscores, and hyphens, and must be between 1 and 256 characters long.&lt;/p&gt; &lt;p&gt;For a FIFO (first-in-first-out) topic, the name must end with the &lt;code&gt;.fifo&lt;/code&gt; suffix. &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attributes &lt;p&gt;A map of attributes with their corresponding values.&lt;/p&gt; &lt;p&gt;The following lists the names, descriptions, and values of the special request parameters that the &lt;code&gt;CreateTopic&lt;/code&gt; action uses:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DeliveryPolicy&lt;/code&gt; – The policy that defines how Amazon SNS retries failed deliveries to HTTP/S endpoints.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DisplayName&lt;/code&gt; – The display name to use for a topic with SMS subscriptions.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FifoTopic&lt;/code&gt; – Set to true to create a FIFO topic.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Policy&lt;/code&gt; – The policy that defines who can access your topic. By default, only the topic owner can publish or subscribe to the topic.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SignatureVersion&lt;/code&gt; – The signature version corresponds to the hashing algorithm used while creating the signature of the notifications, subscription confirmations, or unsubscribe confirmation messages sent by Amazon SNS. By default, &lt;code&gt;SignatureVersion&lt;/code&gt; is set to &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TracingConfig&lt;/code&gt; – Tracing mode of an Amazon SNS topic. By default &lt;code&gt;TracingConfig&lt;/code&gt; is set to &lt;code&gt;PassThrough&lt;/code&gt;, and the topic passes through the tracing header it receives from an Amazon SNS publisher to its subscriptions. If set to &lt;code&gt;Active&lt;/code&gt;, Amazon SNS will vend X-Ray segment data to topic owner account if the sampled flag in the tracing header is true. This is only supported on standard topics.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attribute applies only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html\&quot;&gt;server-side encryption&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KmsMasterKeyId&lt;/code&gt; – The ID of an Amazon Web Services managed customer master key (CMK) for Amazon SNS or a custom CMK. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html#sse-key-terms\&quot;&gt;Key Terms&lt;/a&gt;. For more examples, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters\&quot;&gt;KeyId&lt;/a&gt; in the &lt;i&gt;Key Management Service API Reference&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-fifo-topics.html\&quot;&gt;FIFO topics&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FifoTopic&lt;/code&gt; – When this is set to &lt;code&gt;true&lt;/code&gt;, a FIFO topic is created.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; – Enables content-based deduplication for FIFO topics.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;By default, &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;. If you create a FIFO topic and this attribute is &lt;code&gt;false&lt;/code&gt;, you must specify a value for the &lt;code&gt;MessageDeduplicationId&lt;/code&gt; parameter for the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/api/API_Publish.html\&quot;&gt;Publish&lt;/a&gt; action. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When you set &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, Amazon SNS uses a SHA-256 hash to generate the &lt;code&gt;MessageDeduplicationId&lt;/code&gt; using the body of the message (but not the attributes of the message).&lt;/p&gt; &lt;p&gt;(Optional) To override the generated value, you can specify a value for the &lt;code&gt;MessageDeduplicationId&lt;/code&gt; parameter for the &lt;code&gt;Publish&lt;/code&gt; action.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param tags &lt;p&gt;The list of tags to add to a new topic.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To be able to tag a topic on creation, you must have the &lt;code&gt;sns:CreateTopic&lt;/code&gt; and &lt;code&gt;sns:TagResource&lt;/code&gt; permissions.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param dataProtectionPolicy &lt;p&gt;The body of the policy document you want to use for this topic.&lt;/p&gt; &lt;p&gt;You can only add one policy per topic.&lt;/p&gt; &lt;p&gt;The policy must be in JSON string format.&lt;/p&gt; &lt;p&gt;Length Constraints: Maximum length of 30,720.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;CreateTopicResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TopicLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TagLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> StaleTagException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTopicResponse> gETCreateTopicWithHttpInfo(String name, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Map<String, String> attributes, List<Tag> tags, String dataProtectionPolicy) throws ApiException {
        okhttp3.Call localVarCall = gETCreateTopicValidateBeforeCall(name, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attributes, tags, dataProtectionPolicy, null);
        Type localVarReturnType = new TypeToken<CreateTopicResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a topic to which notifications can be published. Users can create at most 100,000 standard topics (at most 1,000 FIFO topics). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-create-topic.html\&quot;&gt;Creating an Amazon SNS topic&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;. This action is idempotent, so if the requester already owns a topic with the specified name, that topic&#39;s ARN is returned without creating a new topic.
     * @param name &lt;p&gt;The name of the topic you want to create.&lt;/p&gt; &lt;p&gt;Constraints: Topic names must be made up of only uppercase and lowercase ASCII letters, numbers, underscores, and hyphens, and must be between 1 and 256 characters long.&lt;/p&gt; &lt;p&gt;For a FIFO (first-in-first-out) topic, the name must end with the &lt;code&gt;.fifo&lt;/code&gt; suffix. &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attributes &lt;p&gt;A map of attributes with their corresponding values.&lt;/p&gt; &lt;p&gt;The following lists the names, descriptions, and values of the special request parameters that the &lt;code&gt;CreateTopic&lt;/code&gt; action uses:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DeliveryPolicy&lt;/code&gt; – The policy that defines how Amazon SNS retries failed deliveries to HTTP/S endpoints.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DisplayName&lt;/code&gt; – The display name to use for a topic with SMS subscriptions.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FifoTopic&lt;/code&gt; – Set to true to create a FIFO topic.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Policy&lt;/code&gt; – The policy that defines who can access your topic. By default, only the topic owner can publish or subscribe to the topic.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SignatureVersion&lt;/code&gt; – The signature version corresponds to the hashing algorithm used while creating the signature of the notifications, subscription confirmations, or unsubscribe confirmation messages sent by Amazon SNS. By default, &lt;code&gt;SignatureVersion&lt;/code&gt; is set to &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TracingConfig&lt;/code&gt; – Tracing mode of an Amazon SNS topic. By default &lt;code&gt;TracingConfig&lt;/code&gt; is set to &lt;code&gt;PassThrough&lt;/code&gt;, and the topic passes through the tracing header it receives from an Amazon SNS publisher to its subscriptions. If set to &lt;code&gt;Active&lt;/code&gt;, Amazon SNS will vend X-Ray segment data to topic owner account if the sampled flag in the tracing header is true. This is only supported on standard topics.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attribute applies only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html\&quot;&gt;server-side encryption&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KmsMasterKeyId&lt;/code&gt; – The ID of an Amazon Web Services managed customer master key (CMK) for Amazon SNS or a custom CMK. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html#sse-key-terms\&quot;&gt;Key Terms&lt;/a&gt;. For more examples, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters\&quot;&gt;KeyId&lt;/a&gt; in the &lt;i&gt;Key Management Service API Reference&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-fifo-topics.html\&quot;&gt;FIFO topics&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FifoTopic&lt;/code&gt; – When this is set to &lt;code&gt;true&lt;/code&gt;, a FIFO topic is created.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; – Enables content-based deduplication for FIFO topics.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;By default, &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;. If you create a FIFO topic and this attribute is &lt;code&gt;false&lt;/code&gt;, you must specify a value for the &lt;code&gt;MessageDeduplicationId&lt;/code&gt; parameter for the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/api/API_Publish.html\&quot;&gt;Publish&lt;/a&gt; action. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When you set &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, Amazon SNS uses a SHA-256 hash to generate the &lt;code&gt;MessageDeduplicationId&lt;/code&gt; using the body of the message (but not the attributes of the message).&lt;/p&gt; &lt;p&gt;(Optional) To override the generated value, you can specify a value for the &lt;code&gt;MessageDeduplicationId&lt;/code&gt; parameter for the &lt;code&gt;Publish&lt;/code&gt; action.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param tags &lt;p&gt;The list of tags to add to a new topic.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To be able to tag a topic on creation, you must have the &lt;code&gt;sns:CreateTopic&lt;/code&gt; and &lt;code&gt;sns:TagResource&lt;/code&gt; permissions.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param dataProtectionPolicy &lt;p&gt;The body of the policy document you want to use for this topic.&lt;/p&gt; &lt;p&gt;You can only add one policy per topic.&lt;/p&gt; &lt;p&gt;The policy must be in JSON string format.&lt;/p&gt; &lt;p&gt;Length Constraints: Maximum length of 30,720.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TopicLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TagLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> StaleTagException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateTopicAsync(String name, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Map<String, String> attributes, List<Tag> tags, String dataProtectionPolicy, final ApiCallback<CreateTopicResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateTopicValidateBeforeCall(name, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attributes, tags, dataProtectionPolicy, _callback);
        Type localVarReturnType = new TypeToken<CreateTopicResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteEndpoint
     * @param endpointArn EndpointArn of endpoint to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteEndpointCall(String endpointArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteEndpoint";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (endpointArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndpointArn", endpointArn));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteEndpointValidateBeforeCall(String endpointArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'endpointArn' is set
        if (endpointArn == null) {
            throw new ApiException("Missing the required parameter 'endpointArn' when calling gETDeleteEndpoint(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteEndpoint(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteEndpoint(Async)");
        }

        return gETDeleteEndpointCall(endpointArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the endpoint for a device and mobile app from Amazon SNS. This action is idempotent. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;When you delete an endpoint that is also subscribed to a topic, then you must also unsubscribe the endpoint from the topic.&lt;/p&gt;
     * @param endpointArn EndpointArn of endpoint to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public void gETDeleteEndpoint(String endpointArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETDeleteEndpointWithHttpInfo(endpointArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes the endpoint for a device and mobile app from Amazon SNS. This action is idempotent. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;When you delete an endpoint that is also subscribed to a topic, then you must also unsubscribe the endpoint from the topic.&lt;/p&gt;
     * @param endpointArn EndpointArn of endpoint to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETDeleteEndpointWithHttpInfo(String endpointArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteEndpointValidateBeforeCall(endpointArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the endpoint for a device and mobile app from Amazon SNS. This action is idempotent. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;When you delete an endpoint that is also subscribed to a topic, then you must also unsubscribe the endpoint from the topic.&lt;/p&gt;
     * @param endpointArn EndpointArn of endpoint to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteEndpointAsync(String endpointArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteEndpointValidateBeforeCall(endpointArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeletePlatformApplication
     * @param platformApplicationArn PlatformApplicationArn of platform application object to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeletePlatformApplicationCall(String platformApplicationArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeletePlatformApplication";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platformApplicationArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlatformApplicationArn", platformApplicationArn));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeletePlatformApplicationValidateBeforeCall(String platformApplicationArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'platformApplicationArn' is set
        if (platformApplicationArn == null) {
            throw new ApiException("Missing the required parameter 'platformApplicationArn' when calling gETDeletePlatformApplication(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeletePlatformApplication(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeletePlatformApplication(Async)");
        }

        return gETDeletePlatformApplicationCall(platformApplicationArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes a platform application object for one of the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. 
     * @param platformApplicationArn PlatformApplicationArn of platform application object to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public void gETDeletePlatformApplication(String platformApplicationArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETDeletePlatformApplicationWithHttpInfo(platformApplicationArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Deletes a platform application object for one of the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. 
     * @param platformApplicationArn PlatformApplicationArn of platform application object to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETDeletePlatformApplicationWithHttpInfo(String platformApplicationArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeletePlatformApplicationValidateBeforeCall(platformApplicationArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a platform application object for one of the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. 
     * @param platformApplicationArn PlatformApplicationArn of platform application object to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeletePlatformApplicationAsync(String platformApplicationArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeletePlatformApplicationValidateBeforeCall(platformApplicationArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteSMSSandboxPhoneNumber
     * @param phoneNumber The destination phone number to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteSMSSandboxPhoneNumberCall(String phoneNumber, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteSMSSandboxPhoneNumber";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (phoneNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PhoneNumber", phoneNumber));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteSMSSandboxPhoneNumberValidateBeforeCall(String phoneNumber, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneNumber' is set
        if (phoneNumber == null) {
            throw new ApiException("Missing the required parameter 'phoneNumber' when calling gETDeleteSMSSandboxPhoneNumber(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteSMSSandboxPhoneNumber(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteSMSSandboxPhoneNumber(Async)");
        }

        return gETDeleteSMSSandboxPhoneNumberCall(phoneNumber, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes an Amazon Web Services account&#39;s verified or pending phone number from the SMS sandbox.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param phoneNumber The destination phone number to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETDeleteSMSSandboxPhoneNumber(String phoneNumber, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETDeleteSMSSandboxPhoneNumberWithHttpInfo(phoneNumber, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes an Amazon Web Services account&#39;s verified or pending phone number from the SMS sandbox.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param phoneNumber The destination phone number to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETDeleteSMSSandboxPhoneNumberWithHttpInfo(String phoneNumber, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteSMSSandboxPhoneNumberValidateBeforeCall(phoneNumber, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes an Amazon Web Services account&#39;s verified or pending phone number from the SMS sandbox.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param phoneNumber The destination phone number to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteSMSSandboxPhoneNumberAsync(String phoneNumber, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteSMSSandboxPhoneNumberValidateBeforeCall(phoneNumber, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteTopic
     * @param topicArn The ARN of the topic you want to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> StaleTagException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteTopicCall(String topicArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteTopic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (topicArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TopicArn", topicArn));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteTopicValidateBeforeCall(String topicArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'topicArn' is set
        if (topicArn == null) {
            throw new ApiException("Missing the required parameter 'topicArn' when calling gETDeleteTopic(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteTopic(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteTopic(Async)");
        }

        return gETDeleteTopicCall(topicArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes a topic and all its subscriptions. Deleting a topic might prevent some messages previously sent to the topic from being delivered to subscribers. This action is idempotent, so deleting a topic that does not exist does not result in an error.
     * @param topicArn The ARN of the topic you want to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> StaleTagException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public void gETDeleteTopic(String topicArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETDeleteTopicWithHttpInfo(topicArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Deletes a topic and all its subscriptions. Deleting a topic might prevent some messages previously sent to the topic from being delivered to subscribers. This action is idempotent, so deleting a topic that does not exist does not result in an error.
     * @param topicArn The ARN of the topic you want to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> StaleTagException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETDeleteTopicWithHttpInfo(String topicArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteTopicValidateBeforeCall(topicArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a topic and all its subscriptions. Deleting a topic might prevent some messages previously sent to the topic from being delivered to subscribers. This action is idempotent, so deleting a topic that does not exist does not result in an error.
     * @param topicArn The ARN of the topic you want to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> StaleTagException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteTopicAsync(String topicArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteTopicValidateBeforeCall(topicArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETGetDataProtectionPolicy
     * @param resourceArn &lt;p&gt;The ARN of the topic whose &lt;code&gt;DataProtectionPolicy&lt;/code&gt; you want to get.&lt;/p&gt; &lt;p&gt;For more information about ARNs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs)&lt;/a&gt; in the Amazon Web Services General Reference.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetDataProtectionPolicyCall(String resourceArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=GetDataProtectionPolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resourceArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ResourceArn", resourceArn));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETGetDataProtectionPolicyValidateBeforeCall(String resourceArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceArn' is set
        if (resourceArn == null) {
            throw new ApiException("Missing the required parameter 'resourceArn' when calling gETGetDataProtectionPolicy(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETGetDataProtectionPolicy(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETGetDataProtectionPolicy(Async)");
        }

        return gETGetDataProtectionPolicyCall(resourceArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Retrieves the specified inline &lt;code&gt;DataProtectionPolicy&lt;/code&gt; document that is stored in the specified Amazon SNS topic. 
     * @param resourceArn &lt;p&gt;The ARN of the topic whose &lt;code&gt;DataProtectionPolicy&lt;/code&gt; you want to get.&lt;/p&gt; &lt;p&gt;For more information about ARNs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs)&lt;/a&gt; in the Amazon Web Services General Reference.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetDataProtectionPolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public GetDataProtectionPolicyResponse gETGetDataProtectionPolicy(String resourceArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetDataProtectionPolicyResponse> localVarResp = gETGetDataProtectionPolicyWithHttpInfo(resourceArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the specified inline &lt;code&gt;DataProtectionPolicy&lt;/code&gt; document that is stored in the specified Amazon SNS topic. 
     * @param resourceArn &lt;p&gt;The ARN of the topic whose &lt;code&gt;DataProtectionPolicy&lt;/code&gt; you want to get.&lt;/p&gt; &lt;p&gt;For more information about ARNs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs)&lt;/a&gt; in the Amazon Web Services General Reference.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetDataProtectionPolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDataProtectionPolicyResponse> gETGetDataProtectionPolicyWithHttpInfo(String resourceArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETGetDataProtectionPolicyValidateBeforeCall(resourceArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetDataProtectionPolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the specified inline &lt;code&gt;DataProtectionPolicy&lt;/code&gt; document that is stored in the specified Amazon SNS topic. 
     * @param resourceArn &lt;p&gt;The ARN of the topic whose &lt;code&gt;DataProtectionPolicy&lt;/code&gt; you want to get.&lt;/p&gt; &lt;p&gt;For more information about ARNs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs)&lt;/a&gt; in the Amazon Web Services General Reference.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetDataProtectionPolicyAsync(String resourceArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetDataProtectionPolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETGetDataProtectionPolicyValidateBeforeCall(resourceArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetDataProtectionPolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETGetEndpointAttributes
     * @param endpointArn EndpointArn for GetEndpointAttributes input. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetEndpointAttributesCall(String endpointArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=GetEndpointAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (endpointArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndpointArn", endpointArn));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETGetEndpointAttributesValidateBeforeCall(String endpointArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'endpointArn' is set
        if (endpointArn == null) {
            throw new ApiException("Missing the required parameter 'endpointArn' when calling gETGetEndpointAttributes(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETGetEndpointAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETGetEndpointAttributes(Async)");
        }

        return gETGetEndpointAttributesCall(endpointArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Retrieves the endpoint attributes for a device on one of the supported push notification services, such as GCM (Firebase Cloud Messaging) and APNS. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. 
     * @param endpointArn EndpointArn for GetEndpointAttributes input. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetEndpointAttributesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public GetEndpointAttributesResponse gETGetEndpointAttributes(String endpointArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetEndpointAttributesResponse> localVarResp = gETGetEndpointAttributesWithHttpInfo(endpointArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the endpoint attributes for a device on one of the supported push notification services, such as GCM (Firebase Cloud Messaging) and APNS. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. 
     * @param endpointArn EndpointArn for GetEndpointAttributes input. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetEndpointAttributesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetEndpointAttributesResponse> gETGetEndpointAttributesWithHttpInfo(String endpointArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETGetEndpointAttributesValidateBeforeCall(endpointArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetEndpointAttributesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the endpoint attributes for a device on one of the supported push notification services, such as GCM (Firebase Cloud Messaging) and APNS. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. 
     * @param endpointArn EndpointArn for GetEndpointAttributes input. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetEndpointAttributesAsync(String endpointArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetEndpointAttributesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETGetEndpointAttributesValidateBeforeCall(endpointArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetEndpointAttributesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETGetPlatformApplicationAttributes
     * @param platformApplicationArn PlatformApplicationArn for GetPlatformApplicationAttributesInput. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetPlatformApplicationAttributesCall(String platformApplicationArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=GetPlatformApplicationAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platformApplicationArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlatformApplicationArn", platformApplicationArn));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETGetPlatformApplicationAttributesValidateBeforeCall(String platformApplicationArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'platformApplicationArn' is set
        if (platformApplicationArn == null) {
            throw new ApiException("Missing the required parameter 'platformApplicationArn' when calling gETGetPlatformApplicationAttributes(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETGetPlatformApplicationAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETGetPlatformApplicationAttributes(Async)");
        }

        return gETGetPlatformApplicationAttributesCall(platformApplicationArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Retrieves the attributes of the platform application object for the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. 
     * @param platformApplicationArn PlatformApplicationArn for GetPlatformApplicationAttributesInput. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetPlatformApplicationAttributesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public GetPlatformApplicationAttributesResponse gETGetPlatformApplicationAttributes(String platformApplicationArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetPlatformApplicationAttributesResponse> localVarResp = gETGetPlatformApplicationAttributesWithHttpInfo(platformApplicationArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the attributes of the platform application object for the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. 
     * @param platformApplicationArn PlatformApplicationArn for GetPlatformApplicationAttributesInput. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetPlatformApplicationAttributesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPlatformApplicationAttributesResponse> gETGetPlatformApplicationAttributesWithHttpInfo(String platformApplicationArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETGetPlatformApplicationAttributesValidateBeforeCall(platformApplicationArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetPlatformApplicationAttributesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the attributes of the platform application object for the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. 
     * @param platformApplicationArn PlatformApplicationArn for GetPlatformApplicationAttributesInput. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetPlatformApplicationAttributesAsync(String platformApplicationArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetPlatformApplicationAttributesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETGetPlatformApplicationAttributesValidateBeforeCall(platformApplicationArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetPlatformApplicationAttributesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETGetSMSAttributes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attributes &lt;p&gt;A list of the individual attribute names, such as &lt;code&gt;MonthlySpendLimit&lt;/code&gt;, for which you want values.&lt;/p&gt; &lt;p&gt;For all attribute names, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/api/API_SetSMSAttributes.html\&quot;&gt;SetSMSAttributes&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you don&#39;t use this parameter, Amazon SNS returns all SMS attributes.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetSMSAttributesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> attributes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=GetSMSAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attributes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "attributes", attributes));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETGetSMSAttributesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> attributes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETGetSMSAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETGetSMSAttributes(Async)");
        }

        return gETGetSMSAttributesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attributes, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the settings for sending SMS messages from your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;These settings are set with the &lt;code&gt;SetSMSAttributes&lt;/code&gt; action.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attributes &lt;p&gt;A list of the individual attribute names, such as &lt;code&gt;MonthlySpendLimit&lt;/code&gt;, for which you want values.&lt;/p&gt; &lt;p&gt;For all attribute names, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/api/API_SetSMSAttributes.html\&quot;&gt;SetSMSAttributes&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you don&#39;t use this parameter, Amazon SNS returns all SMS attributes.&lt;/p&gt; (optional)
     * @return GetSMSAttributesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public GetSMSAttributesResponse gETGetSMSAttributes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> attributes) throws ApiException {
        ApiResponse<GetSMSAttributesResponse> localVarResp = gETGetSMSAttributesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attributes);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the settings for sending SMS messages from your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;These settings are set with the &lt;code&gt;SetSMSAttributes&lt;/code&gt; action.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attributes &lt;p&gt;A list of the individual attribute names, such as &lt;code&gt;MonthlySpendLimit&lt;/code&gt;, for which you want values.&lt;/p&gt; &lt;p&gt;For all attribute names, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/api/API_SetSMSAttributes.html\&quot;&gt;SetSMSAttributes&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you don&#39;t use this parameter, Amazon SNS returns all SMS attributes.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;GetSMSAttributesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSMSAttributesResponse> gETGetSMSAttributesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> attributes) throws ApiException {
        okhttp3.Call localVarCall = gETGetSMSAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attributes, null);
        Type localVarReturnType = new TypeToken<GetSMSAttributesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the settings for sending SMS messages from your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;These settings are set with the &lt;code&gt;SetSMSAttributes&lt;/code&gt; action.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attributes &lt;p&gt;A list of the individual attribute names, such as &lt;code&gt;MonthlySpendLimit&lt;/code&gt;, for which you want values.&lt;/p&gt; &lt;p&gt;For all attribute names, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/api/API_SetSMSAttributes.html\&quot;&gt;SetSMSAttributes&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you don&#39;t use this parameter, Amazon SNS returns all SMS attributes.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetSMSAttributesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> attributes, final ApiCallback<GetSMSAttributesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETGetSMSAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attributes, _callback);
        Type localVarReturnType = new TypeToken<GetSMSAttributesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETGetSMSSandboxAccountStatus
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetSMSSandboxAccountStatusCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=GetSMSSandboxAccountStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETGetSMSSandboxAccountStatusValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETGetSMSSandboxAccountStatus(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETGetSMSSandboxAccountStatus(Async)");
        }

        return gETGetSMSSandboxAccountStatusCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Retrieves the SMS sandbox status for the calling Amazon Web Services account in the target Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetSMSSandboxAccountStatusResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public GetSMSSandboxAccountStatusResult gETGetSMSSandboxAccountStatus(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetSMSSandboxAccountStatusResult> localVarResp = gETGetSMSSandboxAccountStatusWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Retrieves the SMS sandbox status for the calling Amazon Web Services account in the target Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetSMSSandboxAccountStatusResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSMSSandboxAccountStatusResult> gETGetSMSSandboxAccountStatusWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETGetSMSSandboxAccountStatusValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetSMSSandboxAccountStatusResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Retrieves the SMS sandbox status for the calling Amazon Web Services account in the target Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetSMSSandboxAccountStatusAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetSMSSandboxAccountStatusResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETGetSMSSandboxAccountStatusValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetSMSSandboxAccountStatusResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETGetSubscriptionAttributes
     * @param subscriptionArn The ARN of the subscription whose properties you want to get. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetSubscriptionAttributesCall(String subscriptionArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=GetSubscriptionAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subscriptionArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SubscriptionArn", subscriptionArn));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETGetSubscriptionAttributesValidateBeforeCall(String subscriptionArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionArn' is set
        if (subscriptionArn == null) {
            throw new ApiException("Missing the required parameter 'subscriptionArn' when calling gETGetSubscriptionAttributes(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETGetSubscriptionAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETGetSubscriptionAttributes(Async)");
        }

        return gETGetSubscriptionAttributesCall(subscriptionArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Returns all of the properties of a subscription.
     * @param subscriptionArn The ARN of the subscription whose properties you want to get. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetSubscriptionAttributesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public GetSubscriptionAttributesResponse gETGetSubscriptionAttributes(String subscriptionArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetSubscriptionAttributesResponse> localVarResp = gETGetSubscriptionAttributesWithHttpInfo(subscriptionArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all of the properties of a subscription.
     * @param subscriptionArn The ARN of the subscription whose properties you want to get. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetSubscriptionAttributesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSubscriptionAttributesResponse> gETGetSubscriptionAttributesWithHttpInfo(String subscriptionArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETGetSubscriptionAttributesValidateBeforeCall(subscriptionArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetSubscriptionAttributesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all of the properties of a subscription.
     * @param subscriptionArn The ARN of the subscription whose properties you want to get. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetSubscriptionAttributesAsync(String subscriptionArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetSubscriptionAttributesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETGetSubscriptionAttributesValidateBeforeCall(subscriptionArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetSubscriptionAttributesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETGetTopicAttributes
     * @param topicArn The ARN of the topic whose properties you want to get. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetTopicAttributesCall(String topicArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=GetTopicAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (topicArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TopicArn", topicArn));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETGetTopicAttributesValidateBeforeCall(String topicArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'topicArn' is set
        if (topicArn == null) {
            throw new ApiException("Missing the required parameter 'topicArn' when calling gETGetTopicAttributes(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETGetTopicAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETGetTopicAttributes(Async)");
        }

        return gETGetTopicAttributesCall(topicArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Returns all of the properties of a topic. Topic properties returned might differ based on the authorization of the user.
     * @param topicArn The ARN of the topic whose properties you want to get. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetTopicAttributesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public GetTopicAttributesResponse gETGetTopicAttributes(String topicArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetTopicAttributesResponse> localVarResp = gETGetTopicAttributesWithHttpInfo(topicArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all of the properties of a topic. Topic properties returned might differ based on the authorization of the user.
     * @param topicArn The ARN of the topic whose properties you want to get. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetTopicAttributesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTopicAttributesResponse> gETGetTopicAttributesWithHttpInfo(String topicArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETGetTopicAttributesValidateBeforeCall(topicArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetTopicAttributesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all of the properties of a topic. Topic properties returned might differ based on the authorization of the user.
     * @param topicArn The ARN of the topic whose properties you want to get. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetTopicAttributesAsync(String topicArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetTopicAttributesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETGetTopicAttributesValidateBeforeCall(topicArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetTopicAttributesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListEndpointsByPlatformApplication
     * @param platformApplicationArn PlatformApplicationArn for ListEndpointsByPlatformApplicationInput action. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken NextToken string is used when calling ListEndpointsByPlatformApplication action to retrieve additional records that are available after the first page results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListEndpointsByPlatformApplicationCall(String platformApplicationArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListEndpointsByPlatformApplication";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platformApplicationArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlatformApplicationArn", platformApplicationArn));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListEndpointsByPlatformApplicationValidateBeforeCall(String platformApplicationArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'platformApplicationArn' is set
        if (platformApplicationArn == null) {
            throw new ApiException("Missing the required parameter 'platformApplicationArn' when calling gETListEndpointsByPlatformApplication(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListEndpointsByPlatformApplication(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListEndpointsByPlatformApplication(Async)");
        }

        return gETListEndpointsByPlatformApplicationCall(platformApplicationArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the endpoints and endpoint attributes for devices in a supported push notification service, such as GCM (Firebase Cloud Messaging) and APNS. The results for &lt;code&gt;ListEndpointsByPlatformApplication&lt;/code&gt; are paginated and return a limited list of endpoints, up to 100. If additional records are available after the first page results, then a NextToken string will be returned. To receive the next page, you call &lt;code&gt;ListEndpointsByPlatformApplication&lt;/code&gt; again using the NextToken string received from the previous call. When there are no more records to return, NextToken will be null. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;This action is throttled at 30 transactions per second (TPS).&lt;/p&gt;
     * @param platformApplicationArn PlatformApplicationArn for ListEndpointsByPlatformApplicationInput action. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken NextToken string is used when calling ListEndpointsByPlatformApplication action to retrieve additional records that are available after the first page results. (optional)
     * @return ListEndpointsByPlatformApplicationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ListEndpointsByPlatformApplicationResponse gETListEndpointsByPlatformApplication(String platformApplicationArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken) throws ApiException {
        ApiResponse<ListEndpointsByPlatformApplicationResponse> localVarResp = gETListEndpointsByPlatformApplicationWithHttpInfo(platformApplicationArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the endpoints and endpoint attributes for devices in a supported push notification service, such as GCM (Firebase Cloud Messaging) and APNS. The results for &lt;code&gt;ListEndpointsByPlatformApplication&lt;/code&gt; are paginated and return a limited list of endpoints, up to 100. If additional records are available after the first page results, then a NextToken string will be returned. To receive the next page, you call &lt;code&gt;ListEndpointsByPlatformApplication&lt;/code&gt; again using the NextToken string received from the previous call. When there are no more records to return, NextToken will be null. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;This action is throttled at 30 transactions per second (TPS).&lt;/p&gt;
     * @param platformApplicationArn PlatformApplicationArn for ListEndpointsByPlatformApplicationInput action. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken NextToken string is used when calling ListEndpointsByPlatformApplication action to retrieve additional records that are available after the first page results. (optional)
     * @return ApiResponse&lt;ListEndpointsByPlatformApplicationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListEndpointsByPlatformApplicationResponse> gETListEndpointsByPlatformApplicationWithHttpInfo(String platformApplicationArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = gETListEndpointsByPlatformApplicationValidateBeforeCall(platformApplicationArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, null);
        Type localVarReturnType = new TypeToken<ListEndpointsByPlatformApplicationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the endpoints and endpoint attributes for devices in a supported push notification service, such as GCM (Firebase Cloud Messaging) and APNS. The results for &lt;code&gt;ListEndpointsByPlatformApplication&lt;/code&gt; are paginated and return a limited list of endpoints, up to 100. If additional records are available after the first page results, then a NextToken string will be returned. To receive the next page, you call &lt;code&gt;ListEndpointsByPlatformApplication&lt;/code&gt; again using the NextToken string received from the previous call. When there are no more records to return, NextToken will be null. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;This action is throttled at 30 transactions per second (TPS).&lt;/p&gt;
     * @param platformApplicationArn PlatformApplicationArn for ListEndpointsByPlatformApplicationInput action. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken NextToken string is used when calling ListEndpointsByPlatformApplication action to retrieve additional records that are available after the first page results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListEndpointsByPlatformApplicationAsync(String platformApplicationArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback<ListEndpointsByPlatformApplicationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListEndpointsByPlatformApplicationValidateBeforeCall(platformApplicationArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListEndpointsByPlatformApplicationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListOriginationNumbers
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Token that the previous &lt;code&gt;ListOriginationNumbers&lt;/code&gt; request returns. (optional)
     * @param maxResults The maximum number of origination numbers to return. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListOriginationNumbersCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListOriginationNumbers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListOriginationNumbersValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListOriginationNumbers(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListOriginationNumbers(Async)");
        }

        return gETListOriginationNumbersCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, _callback);

    }

    /**
     * 
     * Lists the calling Amazon Web Services account&#39;s dedicated origination numbers and their metadata. For more information about origination numbers, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/channels-sms-originating-identities-origination-numbers.html\&quot;&gt;Origination numbers&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Token that the previous &lt;code&gt;ListOriginationNumbers&lt;/code&gt; request returns. (optional)
     * @param maxResults The maximum number of origination numbers to return. (optional)
     * @return ListOriginationNumbersResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public ListOriginationNumbersResult gETListOriginationNumbers(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults) throws ApiException {
        ApiResponse<ListOriginationNumbersResult> localVarResp = gETListOriginationNumbersWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the calling Amazon Web Services account&#39;s dedicated origination numbers and their metadata. For more information about origination numbers, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/channels-sms-originating-identities-origination-numbers.html\&quot;&gt;Origination numbers&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Token that the previous &lt;code&gt;ListOriginationNumbers&lt;/code&gt; request returns. (optional)
     * @param maxResults The maximum number of origination numbers to return. (optional)
     * @return ApiResponse&lt;ListOriginationNumbersResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListOriginationNumbersResult> gETListOriginationNumbersWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = gETListOriginationNumbersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, null);
        Type localVarReturnType = new TypeToken<ListOriginationNumbersResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the calling Amazon Web Services account&#39;s dedicated origination numbers and their metadata. For more information about origination numbers, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/channels-sms-originating-identities-origination-numbers.html\&quot;&gt;Origination numbers&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Token that the previous &lt;code&gt;ListOriginationNumbers&lt;/code&gt; request returns. (optional)
     * @param maxResults The maximum number of origination numbers to return. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListOriginationNumbersAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, final ApiCallback<ListOriginationNumbersResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListOriginationNumbersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, _callback);
        Type localVarReturnType = new TypeToken<ListOriginationNumbersResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListPhoneNumbersOptedOut
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken A &lt;code&gt;NextToken&lt;/code&gt; string is used when you call the &lt;code&gt;ListPhoneNumbersOptedOut&lt;/code&gt; action to retrieve additional records that are available after the first page of results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListPhoneNumbersOptedOutCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListPhoneNumbersOptedOut";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListPhoneNumbersOptedOutValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListPhoneNumbersOptedOut(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListPhoneNumbersOptedOut(Async)");
        }

        return gETListPhoneNumbersOptedOutCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns a list of phone numbers that are opted out, meaning you cannot send SMS messages to them.&lt;/p&gt; &lt;p&gt;The results for &lt;code&gt;ListPhoneNumbersOptedOut&lt;/code&gt; are paginated, and each page returns up to 100 phone numbers. If additional phone numbers are available after the first page of results, then a &lt;code&gt;NextToken&lt;/code&gt; string will be returned. To receive the next page, you call &lt;code&gt;ListPhoneNumbersOptedOut&lt;/code&gt; again using the &lt;code&gt;NextToken&lt;/code&gt; string received from the previous call. When there are no more records to return, &lt;code&gt;NextToken&lt;/code&gt; will be null.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken A &lt;code&gt;NextToken&lt;/code&gt; string is used when you call the &lt;code&gt;ListPhoneNumbersOptedOut&lt;/code&gt; action to retrieve additional records that are available after the first page of results. (optional)
     * @return ListPhoneNumbersOptedOutResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ListPhoneNumbersOptedOutResponse gETListPhoneNumbersOptedOut(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken) throws ApiException {
        ApiResponse<ListPhoneNumbersOptedOutResponse> localVarResp = gETListPhoneNumbersOptedOutWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns a list of phone numbers that are opted out, meaning you cannot send SMS messages to them.&lt;/p&gt; &lt;p&gt;The results for &lt;code&gt;ListPhoneNumbersOptedOut&lt;/code&gt; are paginated, and each page returns up to 100 phone numbers. If additional phone numbers are available after the first page of results, then a &lt;code&gt;NextToken&lt;/code&gt; string will be returned. To receive the next page, you call &lt;code&gt;ListPhoneNumbersOptedOut&lt;/code&gt; again using the &lt;code&gt;NextToken&lt;/code&gt; string received from the previous call. When there are no more records to return, &lt;code&gt;NextToken&lt;/code&gt; will be null.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken A &lt;code&gt;NextToken&lt;/code&gt; string is used when you call the &lt;code&gt;ListPhoneNumbersOptedOut&lt;/code&gt; action to retrieve additional records that are available after the first page of results. (optional)
     * @return ApiResponse&lt;ListPhoneNumbersOptedOutResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListPhoneNumbersOptedOutResponse> gETListPhoneNumbersOptedOutWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = gETListPhoneNumbersOptedOutValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, null);
        Type localVarReturnType = new TypeToken<ListPhoneNumbersOptedOutResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns a list of phone numbers that are opted out, meaning you cannot send SMS messages to them.&lt;/p&gt; &lt;p&gt;The results for &lt;code&gt;ListPhoneNumbersOptedOut&lt;/code&gt; are paginated, and each page returns up to 100 phone numbers. If additional phone numbers are available after the first page of results, then a &lt;code&gt;NextToken&lt;/code&gt; string will be returned. To receive the next page, you call &lt;code&gt;ListPhoneNumbersOptedOut&lt;/code&gt; again using the &lt;code&gt;NextToken&lt;/code&gt; string received from the previous call. When there are no more records to return, &lt;code&gt;NextToken&lt;/code&gt; will be null.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken A &lt;code&gt;NextToken&lt;/code&gt; string is used when you call the &lt;code&gt;ListPhoneNumbersOptedOut&lt;/code&gt; action to retrieve additional records that are available after the first page of results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListPhoneNumbersOptedOutAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback<ListPhoneNumbersOptedOutResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListPhoneNumbersOptedOutValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListPhoneNumbersOptedOutResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListPlatformApplications
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken NextToken string is used when calling ListPlatformApplications action to retrieve additional records that are available after the first page results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListPlatformApplicationsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListPlatformApplications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListPlatformApplicationsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListPlatformApplications(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListPlatformApplications(Async)");
        }

        return gETListPlatformApplicationsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the platform application objects for the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). The results for &lt;code&gt;ListPlatformApplications&lt;/code&gt; are paginated and return a limited list of applications, up to 100. If additional records are available after the first page results, then a NextToken string will be returned. To receive the next page, you call &lt;code&gt;ListPlatformApplications&lt;/code&gt; using the NextToken string received from the previous call. When there are no more records to return, &lt;code&gt;NextToken&lt;/code&gt; will be null. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;This action is throttled at 15 transactions per second (TPS).&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken NextToken string is used when calling ListPlatformApplications action to retrieve additional records that are available after the first page results. (optional)
     * @return ListPlatformApplicationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ListPlatformApplicationsResponse gETListPlatformApplications(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken) throws ApiException {
        ApiResponse<ListPlatformApplicationsResponse> localVarResp = gETListPlatformApplicationsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the platform application objects for the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). The results for &lt;code&gt;ListPlatformApplications&lt;/code&gt; are paginated and return a limited list of applications, up to 100. If additional records are available after the first page results, then a NextToken string will be returned. To receive the next page, you call &lt;code&gt;ListPlatformApplications&lt;/code&gt; using the NextToken string received from the previous call. When there are no more records to return, &lt;code&gt;NextToken&lt;/code&gt; will be null. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;This action is throttled at 15 transactions per second (TPS).&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken NextToken string is used when calling ListPlatformApplications action to retrieve additional records that are available after the first page results. (optional)
     * @return ApiResponse&lt;ListPlatformApplicationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListPlatformApplicationsResponse> gETListPlatformApplicationsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = gETListPlatformApplicationsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, null);
        Type localVarReturnType = new TypeToken<ListPlatformApplicationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the platform application objects for the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). The results for &lt;code&gt;ListPlatformApplications&lt;/code&gt; are paginated and return a limited list of applications, up to 100. If additional records are available after the first page results, then a NextToken string will be returned. To receive the next page, you call &lt;code&gt;ListPlatformApplications&lt;/code&gt; using the NextToken string received from the previous call. When there are no more records to return, &lt;code&gt;NextToken&lt;/code&gt; will be null. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;This action is throttled at 15 transactions per second (TPS).&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken NextToken string is used when calling ListPlatformApplications action to retrieve additional records that are available after the first page results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListPlatformApplicationsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback<ListPlatformApplicationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListPlatformApplicationsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListPlatformApplicationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListSMSSandboxPhoneNumbers
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Token that the previous &lt;code&gt;ListSMSSandboxPhoneNumbersInput&lt;/code&gt; request returns. (optional)
     * @param maxResults The maximum number of phone numbers to return. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListSMSSandboxPhoneNumbersCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListSMSSandboxPhoneNumbers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListSMSSandboxPhoneNumbersValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListSMSSandboxPhoneNumbers(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListSMSSandboxPhoneNumbers(Async)");
        }

        return gETListSMSSandboxPhoneNumbersCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the calling Amazon Web Services account&#39;s current verified and pending destination phone numbers in the SMS sandbox.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Token that the previous &lt;code&gt;ListSMSSandboxPhoneNumbersInput&lt;/code&gt; request returns. (optional)
     * @param maxResults The maximum number of phone numbers to return. (optional)
     * @return ListSMSSandboxPhoneNumbersResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public ListSMSSandboxPhoneNumbersResult gETListSMSSandboxPhoneNumbers(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults) throws ApiException {
        ApiResponse<ListSMSSandboxPhoneNumbersResult> localVarResp = gETListSMSSandboxPhoneNumbersWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the calling Amazon Web Services account&#39;s current verified and pending destination phone numbers in the SMS sandbox.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Token that the previous &lt;code&gt;ListSMSSandboxPhoneNumbersInput&lt;/code&gt; request returns. (optional)
     * @param maxResults The maximum number of phone numbers to return. (optional)
     * @return ApiResponse&lt;ListSMSSandboxPhoneNumbersResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSMSSandboxPhoneNumbersResult> gETListSMSSandboxPhoneNumbersWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = gETListSMSSandboxPhoneNumbersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, null);
        Type localVarReturnType = new TypeToken<ListSMSSandboxPhoneNumbersResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the calling Amazon Web Services account&#39;s current verified and pending destination phone numbers in the SMS sandbox.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Token that the previous &lt;code&gt;ListSMSSandboxPhoneNumbersInput&lt;/code&gt; request returns. (optional)
     * @param maxResults The maximum number of phone numbers to return. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListSMSSandboxPhoneNumbersAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, final ApiCallback<ListSMSSandboxPhoneNumbersResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListSMSSandboxPhoneNumbersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, _callback);
        Type localVarReturnType = new TypeToken<ListSMSSandboxPhoneNumbersResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListSubscriptions
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Token returned by the previous &lt;code&gt;ListSubscriptions&lt;/code&gt; request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListSubscriptionsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListSubscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListSubscriptionsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListSubscriptions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListSubscriptions(Async)");
        }

        return gETListSubscriptionsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns a list of the requester&#39;s subscriptions. Each call returns a limited list of subscriptions, up to 100. If there are more subscriptions, a &lt;code&gt;NextToken&lt;/code&gt; is also returned. Use the &lt;code&gt;NextToken&lt;/code&gt; parameter in a new &lt;code&gt;ListSubscriptions&lt;/code&gt; call to get further results.&lt;/p&gt; &lt;p&gt;This action is throttled at 30 transactions per second (TPS).&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Token returned by the previous &lt;code&gt;ListSubscriptions&lt;/code&gt; request. (optional)
     * @return ListSubscriptionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ListSubscriptionsResponse gETListSubscriptions(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken) throws ApiException {
        ApiResponse<ListSubscriptionsResponse> localVarResp = gETListSubscriptionsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns a list of the requester&#39;s subscriptions. Each call returns a limited list of subscriptions, up to 100. If there are more subscriptions, a &lt;code&gt;NextToken&lt;/code&gt; is also returned. Use the &lt;code&gt;NextToken&lt;/code&gt; parameter in a new &lt;code&gt;ListSubscriptions&lt;/code&gt; call to get further results.&lt;/p&gt; &lt;p&gt;This action is throttled at 30 transactions per second (TPS).&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Token returned by the previous &lt;code&gt;ListSubscriptions&lt;/code&gt; request. (optional)
     * @return ApiResponse&lt;ListSubscriptionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSubscriptionsResponse> gETListSubscriptionsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = gETListSubscriptionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, null);
        Type localVarReturnType = new TypeToken<ListSubscriptionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns a list of the requester&#39;s subscriptions. Each call returns a limited list of subscriptions, up to 100. If there are more subscriptions, a &lt;code&gt;NextToken&lt;/code&gt; is also returned. Use the &lt;code&gt;NextToken&lt;/code&gt; parameter in a new &lt;code&gt;ListSubscriptions&lt;/code&gt; call to get further results.&lt;/p&gt; &lt;p&gt;This action is throttled at 30 transactions per second (TPS).&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Token returned by the previous &lt;code&gt;ListSubscriptions&lt;/code&gt; request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListSubscriptionsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback<ListSubscriptionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListSubscriptionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListSubscriptionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListSubscriptionsByTopic
     * @param topicArn The ARN of the topic for which you wish to find subscriptions. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Token returned by the previous &lt;code&gt;ListSubscriptionsByTopic&lt;/code&gt; request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListSubscriptionsByTopicCall(String topicArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListSubscriptionsByTopic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (topicArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TopicArn", topicArn));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListSubscriptionsByTopicValidateBeforeCall(String topicArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'topicArn' is set
        if (topicArn == null) {
            throw new ApiException("Missing the required parameter 'topicArn' when calling gETListSubscriptionsByTopic(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListSubscriptionsByTopic(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListSubscriptionsByTopic(Async)");
        }

        return gETListSubscriptionsByTopicCall(topicArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns a list of the subscriptions to a specific topic. Each call returns a limited list of subscriptions, up to 100. If there are more subscriptions, a &lt;code&gt;NextToken&lt;/code&gt; is also returned. Use the &lt;code&gt;NextToken&lt;/code&gt; parameter in a new &lt;code&gt;ListSubscriptionsByTopic&lt;/code&gt; call to get further results.&lt;/p&gt; &lt;p&gt;This action is throttled at 30 transactions per second (TPS).&lt;/p&gt;
     * @param topicArn The ARN of the topic for which you wish to find subscriptions. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Token returned by the previous &lt;code&gt;ListSubscriptionsByTopic&lt;/code&gt; request. (optional)
     * @return ListSubscriptionsByTopicResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ListSubscriptionsByTopicResponse gETListSubscriptionsByTopic(String topicArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken) throws ApiException {
        ApiResponse<ListSubscriptionsByTopicResponse> localVarResp = gETListSubscriptionsByTopicWithHttpInfo(topicArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns a list of the subscriptions to a specific topic. Each call returns a limited list of subscriptions, up to 100. If there are more subscriptions, a &lt;code&gt;NextToken&lt;/code&gt; is also returned. Use the &lt;code&gt;NextToken&lt;/code&gt; parameter in a new &lt;code&gt;ListSubscriptionsByTopic&lt;/code&gt; call to get further results.&lt;/p&gt; &lt;p&gt;This action is throttled at 30 transactions per second (TPS).&lt;/p&gt;
     * @param topicArn The ARN of the topic for which you wish to find subscriptions. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Token returned by the previous &lt;code&gt;ListSubscriptionsByTopic&lt;/code&gt; request. (optional)
     * @return ApiResponse&lt;ListSubscriptionsByTopicResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSubscriptionsByTopicResponse> gETListSubscriptionsByTopicWithHttpInfo(String topicArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = gETListSubscriptionsByTopicValidateBeforeCall(topicArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, null);
        Type localVarReturnType = new TypeToken<ListSubscriptionsByTopicResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns a list of the subscriptions to a specific topic. Each call returns a limited list of subscriptions, up to 100. If there are more subscriptions, a &lt;code&gt;NextToken&lt;/code&gt; is also returned. Use the &lt;code&gt;NextToken&lt;/code&gt; parameter in a new &lt;code&gt;ListSubscriptionsByTopic&lt;/code&gt; call to get further results.&lt;/p&gt; &lt;p&gt;This action is throttled at 30 transactions per second (TPS).&lt;/p&gt;
     * @param topicArn The ARN of the topic for which you wish to find subscriptions. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Token returned by the previous &lt;code&gt;ListSubscriptionsByTopic&lt;/code&gt; request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListSubscriptionsByTopicAsync(String topicArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback<ListSubscriptionsByTopicResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListSubscriptionsByTopicValidateBeforeCall(topicArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListSubscriptionsByTopicResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListTagsForResource
     * @param resourceArn The ARN of the topic for which to list tags. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListTagsForResourceCall(String resourceArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListTagsForResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resourceArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ResourceArn", resourceArn));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListTagsForResourceValidateBeforeCall(String resourceArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceArn' is set
        if (resourceArn == null) {
            throw new ApiException("Missing the required parameter 'resourceArn' when calling gETListTagsForResource(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListTagsForResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListTagsForResource(Async)");
        }

        return gETListTagsForResourceCall(resourceArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * List all tags added to the specified Amazon SNS topic. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html\&quot;&gt;Amazon SNS Tags&lt;/a&gt; in the &lt;i&gt;Amazon Simple Notification Service Developer Guide&lt;/i&gt;.
     * @param resourceArn The ARN of the topic for which to list tags. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListTagsForResourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public ListTagsForResourceResponse gETListTagsForResource(String resourceArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListTagsForResourceResponse> localVarResp = gETListTagsForResourceWithHttpInfo(resourceArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * List all tags added to the specified Amazon SNS topic. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html\&quot;&gt;Amazon SNS Tags&lt;/a&gt; in the &lt;i&gt;Amazon Simple Notification Service Developer Guide&lt;/i&gt;.
     * @param resourceArn The ARN of the topic for which to list tags. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListTagsForResourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTagsForResourceResponse> gETListTagsForResourceWithHttpInfo(String resourceArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETListTagsForResourceValidateBeforeCall(resourceArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListTagsForResourceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all tags added to the specified Amazon SNS topic. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html\&quot;&gt;Amazon SNS Tags&lt;/a&gt; in the &lt;i&gt;Amazon Simple Notification Service Developer Guide&lt;/i&gt;.
     * @param resourceArn The ARN of the topic for which to list tags. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListTagsForResourceAsync(String resourceArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListTagsForResourceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListTagsForResourceValidateBeforeCall(resourceArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListTagsForResourceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListTopics
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Token returned by the previous &lt;code&gt;ListTopics&lt;/code&gt; request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListTopicsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListTopics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListTopicsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListTopics(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListTopics(Async)");
        }

        return gETListTopicsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns a list of the requester&#39;s topics. Each call returns a limited list of topics, up to 100. If there are more topics, a &lt;code&gt;NextToken&lt;/code&gt; is also returned. Use the &lt;code&gt;NextToken&lt;/code&gt; parameter in a new &lt;code&gt;ListTopics&lt;/code&gt; call to get further results.&lt;/p&gt; &lt;p&gt;This action is throttled at 30 transactions per second (TPS).&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Token returned by the previous &lt;code&gt;ListTopics&lt;/code&gt; request. (optional)
     * @return ListTopicsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ListTopicsResponse gETListTopics(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken) throws ApiException {
        ApiResponse<ListTopicsResponse> localVarResp = gETListTopicsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns a list of the requester&#39;s topics. Each call returns a limited list of topics, up to 100. If there are more topics, a &lt;code&gt;NextToken&lt;/code&gt; is also returned. Use the &lt;code&gt;NextToken&lt;/code&gt; parameter in a new &lt;code&gt;ListTopics&lt;/code&gt; call to get further results.&lt;/p&gt; &lt;p&gt;This action is throttled at 30 transactions per second (TPS).&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Token returned by the previous &lt;code&gt;ListTopics&lt;/code&gt; request. (optional)
     * @return ApiResponse&lt;ListTopicsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTopicsResponse> gETListTopicsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = gETListTopicsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, null);
        Type localVarReturnType = new TypeToken<ListTopicsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns a list of the requester&#39;s topics. Each call returns a limited list of topics, up to 100. If there are more topics, a &lt;code&gt;NextToken&lt;/code&gt; is also returned. Use the &lt;code&gt;NextToken&lt;/code&gt; parameter in a new &lt;code&gt;ListTopics&lt;/code&gt; call to get further results.&lt;/p&gt; &lt;p&gt;This action is throttled at 30 transactions per second (TPS).&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Token returned by the previous &lt;code&gt;ListTopics&lt;/code&gt; request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListTopicsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback<ListTopicsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListTopicsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListTopicsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETOptInPhoneNumber
     * @param phoneNumber The phone number to opt in. Use E.164 format. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETOptInPhoneNumberCall(String phoneNumber, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=OptInPhoneNumber";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (phoneNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phoneNumber", phoneNumber));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETOptInPhoneNumberValidateBeforeCall(String phoneNumber, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneNumber' is set
        if (phoneNumber == null) {
            throw new ApiException("Missing the required parameter 'phoneNumber' when calling gETOptInPhoneNumber(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETOptInPhoneNumber(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETOptInPhoneNumber(Async)");
        }

        return gETOptInPhoneNumberCall(phoneNumber, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Use this request to opt in a phone number that is opted out, which enables you to resume sending SMS messages to the number.&lt;/p&gt; &lt;p&gt;You can opt in a phone number only once every 30 days.&lt;/p&gt;
     * @param phoneNumber The phone number to opt in. Use E.164 format. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETOptInPhoneNumber(String phoneNumber, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETOptInPhoneNumberWithHttpInfo(phoneNumber, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Use this request to opt in a phone number that is opted out, which enables you to resume sending SMS messages to the number.&lt;/p&gt; &lt;p&gt;You can opt in a phone number only once every 30 days.&lt;/p&gt;
     * @param phoneNumber The phone number to opt in. Use E.164 format. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETOptInPhoneNumberWithHttpInfo(String phoneNumber, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETOptInPhoneNumberValidateBeforeCall(phoneNumber, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Use this request to opt in a phone number that is opted out, which enables you to resume sending SMS messages to the number.&lt;/p&gt; &lt;p&gt;You can opt in a phone number only once every 30 days.&lt;/p&gt;
     * @param phoneNumber The phone number to opt in. Use E.164 format. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETOptInPhoneNumberAsync(String phoneNumber, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETOptInPhoneNumberValidateBeforeCall(phoneNumber, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETPublish
     * @param message &lt;p&gt;The message you want to send.&lt;/p&gt; &lt;p&gt;If you are publishing to a topic and you want to send the same message to all transport protocols, include the text of the message as a String value. If you want to send different messages for each transport protocol, set the value of the &lt;code&gt;MessageStructure&lt;/code&gt; parameter to &lt;code&gt;json&lt;/code&gt; and use a JSON object for the &lt;code&gt;Message&lt;/code&gt; parameter. &lt;/p&gt; &lt;p/&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;With the exception of SMS, messages must be UTF-8 encoded strings and at most 256 KB in size (262,144 bytes, not 262,144 characters).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For SMS, each message can contain up to 140 characters. This character limit depends on the encoding schema. For example, an SMS message can contain 160 GSM characters, 140 ASCII characters, or 70 UCS-2 characters.&lt;/p&gt; &lt;p&gt;If you publish a message that exceeds this size limit, Amazon SNS sends the message as multiple messages, each fitting within the size limit. Messages aren&#39;t truncated mid-word but are cut off at whole-word boundaries.&lt;/p&gt; &lt;p&gt;The total size limit for a single SMS &lt;code&gt;Publish&lt;/code&gt; action is 1,600 characters.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;JSON-specific constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Keys in the JSON object that correspond to supported transport protocols must have simple JSON string values.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The values will be parsed (unescaped) before they are used in outgoing messages.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Outbound notifications are JSON encoded (meaning that the characters will be reescaped for sending).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Values have a minimum length of 0 (the empty string, \&quot;\&quot;, is allowed).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Values have a maximum length bounded by the overall message size (so, including multiple protocols may limit message sizes).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Non-string values will cause the key to be ignored.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Keys that do not correspond to supported transport protocols are ignored.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Duplicate keys are not allowed.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Failure to parse or validate any key or value in the message will cause the &lt;code&gt;Publish&lt;/code&gt; call to return an error (no partial delivery).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param topicArn &lt;p&gt;The topic you want to publish to.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a value for the &lt;code&gt;TopicArn&lt;/code&gt; parameter, you must specify a value for the &lt;code&gt;PhoneNumber&lt;/code&gt; or &lt;code&gt;TargetArn&lt;/code&gt; parameters.&lt;/p&gt; (optional)
     * @param targetArn If you don&#39;t specify a value for the &lt;code&gt;TargetArn&lt;/code&gt; parameter, you must specify a value for the &lt;code&gt;PhoneNumber&lt;/code&gt; or &lt;code&gt;TopicArn&lt;/code&gt; parameters. (optional)
     * @param phoneNumber &lt;p&gt;The phone number to which you want to deliver an SMS message. Use E.164 format.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a value for the &lt;code&gt;PhoneNumber&lt;/code&gt; parameter, you must specify a value for the &lt;code&gt;TargetArn&lt;/code&gt; or &lt;code&gt;TopicArn&lt;/code&gt; parameters.&lt;/p&gt; (optional)
     * @param subject &lt;p&gt;Optional parameter to be used as the \&quot;Subject\&quot; line when the message is delivered to email endpoints. This field will also be included, if present, in the standard JSON messages delivered to other endpoints.&lt;/p&gt; &lt;p&gt;Constraints: Subjects must be ASCII text that begins with a letter, number, or punctuation mark; must not include line breaks or control characters; and must be less than 100 characters long.&lt;/p&gt; (optional)
     * @param messageStructure &lt;p&gt;Set &lt;code&gt;MessageStructure&lt;/code&gt; to &lt;code&gt;json&lt;/code&gt; if you want to send a different message for each protocol. For example, using one publish action, you can send a short message to your SMS subscribers and a longer message to your email subscribers. If you set &lt;code&gt;MessageStructure&lt;/code&gt; to &lt;code&gt;json&lt;/code&gt;, the value of the &lt;code&gt;Message&lt;/code&gt; parameter must: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;be a syntactically valid JSON object; and&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;contain at least a top-level JSON key of \&quot;default\&quot; with a value that is a string.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can define other top-level keys that define the message you want to send to a specific transport protocol (e.g., \&quot;http\&quot;).&lt;/p&gt; &lt;p&gt;Valid value: &lt;code&gt;json&lt;/code&gt; &lt;/p&gt; (optional)
     * @param messageAttributes Message attributes for Publish action. (optional)
     * @param messageDeduplicationId &lt;p&gt;This parameter applies only to FIFO (first-in-first-out) topics. The &lt;code&gt;MessageDeduplicationId&lt;/code&gt; can contain up to 128 alphanumeric characters &lt;code&gt;(a-z, A-Z, 0-9)&lt;/code&gt; and punctuation &lt;code&gt;(!\&quot;#$%&amp;amp;&#39;()*+,-./:;&amp;lt;&#x3D;&amp;gt;?@[\\]^_&#x60;{|}~)&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Every message must have a unique &lt;code&gt;MessageDeduplicationId&lt;/code&gt;, which is a token used for deduplication of sent messages. If a message with a particular &lt;code&gt;MessageDeduplicationId&lt;/code&gt; is sent successfully, any message sent with the same &lt;code&gt;MessageDeduplicationId&lt;/code&gt; during the 5-minute deduplication interval is treated as a duplicate. &lt;/p&gt; &lt;p&gt;If the topic has &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; set, the system generates a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; based on the contents of the message. Your &lt;code&gt;MessageDeduplicationId&lt;/code&gt; overrides the generated one.&lt;/p&gt; (optional)
     * @param messageGroupId &lt;p&gt;This parameter applies only to FIFO (first-in-first-out) topics. The &lt;code&gt;MessageGroupId&lt;/code&gt; can contain up to 128 alphanumeric characters &lt;code&gt;(a-z, A-Z, 0-9)&lt;/code&gt; and punctuation &lt;code&gt;(!\&quot;#$%&amp;amp;&#39;()*+,-./:;&amp;lt;&#x3D;&amp;gt;?@[\\]^_&#x60;{|}~)&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;MessageGroupId&lt;/code&gt; is a tag that specifies that a message belongs to a specific message group. Messages that belong to the same message group are processed in a FIFO manner (however, messages in different message groups might be processed out of order). Every message must include a &lt;code&gt;MessageGroupId&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EndpointDisabledException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PlatformApplicationDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> KMSDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> KMSInvalidStateException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> KMSNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> KMSOptInRequired </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> KMSThrottlingException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> KMSAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPublishCall(String message, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String topicArn, String targetArn, String phoneNumber, String subject, String messageStructure, Map<String, MessageAttributeValue> messageAttributes, String messageDeduplicationId, String messageGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=Publish";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (topicArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TopicArn", topicArn));
        }

        if (targetArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TargetArn", targetArn));
        }

        if (phoneNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PhoneNumber", phoneNumber));
        }

        if (message != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Message", message));
        }

        if (subject != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Subject", subject));
        }

        if (messageStructure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MessageStructure", messageStructure));
        }

        if (messageAttributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MessageAttributes", messageAttributes));
        }

        if (messageDeduplicationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MessageDeduplicationId", messageDeduplicationId));
        }

        if (messageGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MessageGroupId", messageGroupId));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETPublishValidateBeforeCall(String message, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String topicArn, String targetArn, String phoneNumber, String subject, String messageStructure, Map<String, MessageAttributeValue> messageAttributes, String messageDeduplicationId, String messageGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'message' is set
        if (message == null) {
            throw new ApiException("Missing the required parameter 'message' when calling gETPublish(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETPublish(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETPublish(Async)");
        }

        return gETPublishCall(message, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, topicArn, targetArn, phoneNumber, subject, messageStructure, messageAttributes, messageDeduplicationId, messageGroupId, _callback);

    }

    /**
     * 
     * &lt;p&gt;Sends a message to an Amazon SNS topic, a text message (SMS message) directly to a phone number, or a message to a mobile platform endpoint (when you specify the &lt;code&gt;TargetArn&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;If you send a message to a topic, Amazon SNS delivers the message to each endpoint that is subscribed to the topic. The format of the message depends on the notification protocol for each subscribed endpoint.&lt;/p&gt; &lt;p&gt;When a &lt;code&gt;messageId&lt;/code&gt; is returned, the message is saved and Amazon SNS immediately delivers it to subscribers.&lt;/p&gt; &lt;p&gt;To use the &lt;code&gt;Publish&lt;/code&gt; action for publishing a message to a mobile endpoint, such as an app on a Kindle device or mobile phone, you must specify the EndpointArn for the TargetArn parameter. The EndpointArn is returned when making a call with the &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; action. &lt;/p&gt; &lt;p&gt;For more information about formatting messages, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/mobile-push-send-custommessage.html\&quot;&gt;Send Custom Platform-Specific Payloads in Messages to Mobile Devices&lt;/a&gt;. &lt;/p&gt; &lt;important&gt; &lt;p&gt;You can publish messages only to topics and endpoints in the same Amazon Web Services Region.&lt;/p&gt; &lt;/important&gt;
     * @param message &lt;p&gt;The message you want to send.&lt;/p&gt; &lt;p&gt;If you are publishing to a topic and you want to send the same message to all transport protocols, include the text of the message as a String value. If you want to send different messages for each transport protocol, set the value of the &lt;code&gt;MessageStructure&lt;/code&gt; parameter to &lt;code&gt;json&lt;/code&gt; and use a JSON object for the &lt;code&gt;Message&lt;/code&gt; parameter. &lt;/p&gt; &lt;p/&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;With the exception of SMS, messages must be UTF-8 encoded strings and at most 256 KB in size (262,144 bytes, not 262,144 characters).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For SMS, each message can contain up to 140 characters. This character limit depends on the encoding schema. For example, an SMS message can contain 160 GSM characters, 140 ASCII characters, or 70 UCS-2 characters.&lt;/p&gt; &lt;p&gt;If you publish a message that exceeds this size limit, Amazon SNS sends the message as multiple messages, each fitting within the size limit. Messages aren&#39;t truncated mid-word but are cut off at whole-word boundaries.&lt;/p&gt; &lt;p&gt;The total size limit for a single SMS &lt;code&gt;Publish&lt;/code&gt; action is 1,600 characters.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;JSON-specific constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Keys in the JSON object that correspond to supported transport protocols must have simple JSON string values.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The values will be parsed (unescaped) before they are used in outgoing messages.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Outbound notifications are JSON encoded (meaning that the characters will be reescaped for sending).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Values have a minimum length of 0 (the empty string, \&quot;\&quot;, is allowed).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Values have a maximum length bounded by the overall message size (so, including multiple protocols may limit message sizes).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Non-string values will cause the key to be ignored.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Keys that do not correspond to supported transport protocols are ignored.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Duplicate keys are not allowed.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Failure to parse or validate any key or value in the message will cause the &lt;code&gt;Publish&lt;/code&gt; call to return an error (no partial delivery).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param topicArn &lt;p&gt;The topic you want to publish to.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a value for the &lt;code&gt;TopicArn&lt;/code&gt; parameter, you must specify a value for the &lt;code&gt;PhoneNumber&lt;/code&gt; or &lt;code&gt;TargetArn&lt;/code&gt; parameters.&lt;/p&gt; (optional)
     * @param targetArn If you don&#39;t specify a value for the &lt;code&gt;TargetArn&lt;/code&gt; parameter, you must specify a value for the &lt;code&gt;PhoneNumber&lt;/code&gt; or &lt;code&gt;TopicArn&lt;/code&gt; parameters. (optional)
     * @param phoneNumber &lt;p&gt;The phone number to which you want to deliver an SMS message. Use E.164 format.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a value for the &lt;code&gt;PhoneNumber&lt;/code&gt; parameter, you must specify a value for the &lt;code&gt;TargetArn&lt;/code&gt; or &lt;code&gt;TopicArn&lt;/code&gt; parameters.&lt;/p&gt; (optional)
     * @param subject &lt;p&gt;Optional parameter to be used as the \&quot;Subject\&quot; line when the message is delivered to email endpoints. This field will also be included, if present, in the standard JSON messages delivered to other endpoints.&lt;/p&gt; &lt;p&gt;Constraints: Subjects must be ASCII text that begins with a letter, number, or punctuation mark; must not include line breaks or control characters; and must be less than 100 characters long.&lt;/p&gt; (optional)
     * @param messageStructure &lt;p&gt;Set &lt;code&gt;MessageStructure&lt;/code&gt; to &lt;code&gt;json&lt;/code&gt; if you want to send a different message for each protocol. For example, using one publish action, you can send a short message to your SMS subscribers and a longer message to your email subscribers. If you set &lt;code&gt;MessageStructure&lt;/code&gt; to &lt;code&gt;json&lt;/code&gt;, the value of the &lt;code&gt;Message&lt;/code&gt; parameter must: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;be a syntactically valid JSON object; and&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;contain at least a top-level JSON key of \&quot;default\&quot; with a value that is a string.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can define other top-level keys that define the message you want to send to a specific transport protocol (e.g., \&quot;http\&quot;).&lt;/p&gt; &lt;p&gt;Valid value: &lt;code&gt;json&lt;/code&gt; &lt;/p&gt; (optional)
     * @param messageAttributes Message attributes for Publish action. (optional)
     * @param messageDeduplicationId &lt;p&gt;This parameter applies only to FIFO (first-in-first-out) topics. The &lt;code&gt;MessageDeduplicationId&lt;/code&gt; can contain up to 128 alphanumeric characters &lt;code&gt;(a-z, A-Z, 0-9)&lt;/code&gt; and punctuation &lt;code&gt;(!\&quot;#$%&amp;amp;&#39;()*+,-./:;&amp;lt;&#x3D;&amp;gt;?@[\\]^_&#x60;{|}~)&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Every message must have a unique &lt;code&gt;MessageDeduplicationId&lt;/code&gt;, which is a token used for deduplication of sent messages. If a message with a particular &lt;code&gt;MessageDeduplicationId&lt;/code&gt; is sent successfully, any message sent with the same &lt;code&gt;MessageDeduplicationId&lt;/code&gt; during the 5-minute deduplication interval is treated as a duplicate. &lt;/p&gt; &lt;p&gt;If the topic has &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; set, the system generates a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; based on the contents of the message. Your &lt;code&gt;MessageDeduplicationId&lt;/code&gt; overrides the generated one.&lt;/p&gt; (optional)
     * @param messageGroupId &lt;p&gt;This parameter applies only to FIFO (first-in-first-out) topics. The &lt;code&gt;MessageGroupId&lt;/code&gt; can contain up to 128 alphanumeric characters &lt;code&gt;(a-z, A-Z, 0-9)&lt;/code&gt; and punctuation &lt;code&gt;(!\&quot;#$%&amp;amp;&#39;()*+,-./:;&amp;lt;&#x3D;&amp;gt;?@[\\]^_&#x60;{|}~)&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;MessageGroupId&lt;/code&gt; is a tag that specifies that a message belongs to a specific message group. Messages that belong to the same message group are processed in a FIFO manner (however, messages in different message groups might be processed out of order). Every message must include a &lt;code&gt;MessageGroupId&lt;/code&gt;.&lt;/p&gt; (optional)
     * @return PublishResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EndpointDisabledException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PlatformApplicationDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> KMSDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> KMSInvalidStateException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> KMSNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> KMSOptInRequired </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> KMSThrottlingException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> KMSAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public PublishResponse gETPublish(String message, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String topicArn, String targetArn, String phoneNumber, String subject, String messageStructure, Map<String, MessageAttributeValue> messageAttributes, String messageDeduplicationId, String messageGroupId) throws ApiException {
        ApiResponse<PublishResponse> localVarResp = gETPublishWithHttpInfo(message, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, topicArn, targetArn, phoneNumber, subject, messageStructure, messageAttributes, messageDeduplicationId, messageGroupId);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Sends a message to an Amazon SNS topic, a text message (SMS message) directly to a phone number, or a message to a mobile platform endpoint (when you specify the &lt;code&gt;TargetArn&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;If you send a message to a topic, Amazon SNS delivers the message to each endpoint that is subscribed to the topic. The format of the message depends on the notification protocol for each subscribed endpoint.&lt;/p&gt; &lt;p&gt;When a &lt;code&gt;messageId&lt;/code&gt; is returned, the message is saved and Amazon SNS immediately delivers it to subscribers.&lt;/p&gt; &lt;p&gt;To use the &lt;code&gt;Publish&lt;/code&gt; action for publishing a message to a mobile endpoint, such as an app on a Kindle device or mobile phone, you must specify the EndpointArn for the TargetArn parameter. The EndpointArn is returned when making a call with the &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; action. &lt;/p&gt; &lt;p&gt;For more information about formatting messages, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/mobile-push-send-custommessage.html\&quot;&gt;Send Custom Platform-Specific Payloads in Messages to Mobile Devices&lt;/a&gt;. &lt;/p&gt; &lt;important&gt; &lt;p&gt;You can publish messages only to topics and endpoints in the same Amazon Web Services Region.&lt;/p&gt; &lt;/important&gt;
     * @param message &lt;p&gt;The message you want to send.&lt;/p&gt; &lt;p&gt;If you are publishing to a topic and you want to send the same message to all transport protocols, include the text of the message as a String value. If you want to send different messages for each transport protocol, set the value of the &lt;code&gt;MessageStructure&lt;/code&gt; parameter to &lt;code&gt;json&lt;/code&gt; and use a JSON object for the &lt;code&gt;Message&lt;/code&gt; parameter. &lt;/p&gt; &lt;p/&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;With the exception of SMS, messages must be UTF-8 encoded strings and at most 256 KB in size (262,144 bytes, not 262,144 characters).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For SMS, each message can contain up to 140 characters. This character limit depends on the encoding schema. For example, an SMS message can contain 160 GSM characters, 140 ASCII characters, or 70 UCS-2 characters.&lt;/p&gt; &lt;p&gt;If you publish a message that exceeds this size limit, Amazon SNS sends the message as multiple messages, each fitting within the size limit. Messages aren&#39;t truncated mid-word but are cut off at whole-word boundaries.&lt;/p&gt; &lt;p&gt;The total size limit for a single SMS &lt;code&gt;Publish&lt;/code&gt; action is 1,600 characters.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;JSON-specific constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Keys in the JSON object that correspond to supported transport protocols must have simple JSON string values.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The values will be parsed (unescaped) before they are used in outgoing messages.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Outbound notifications are JSON encoded (meaning that the characters will be reescaped for sending).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Values have a minimum length of 0 (the empty string, \&quot;\&quot;, is allowed).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Values have a maximum length bounded by the overall message size (so, including multiple protocols may limit message sizes).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Non-string values will cause the key to be ignored.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Keys that do not correspond to supported transport protocols are ignored.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Duplicate keys are not allowed.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Failure to parse or validate any key or value in the message will cause the &lt;code&gt;Publish&lt;/code&gt; call to return an error (no partial delivery).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param topicArn &lt;p&gt;The topic you want to publish to.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a value for the &lt;code&gt;TopicArn&lt;/code&gt; parameter, you must specify a value for the &lt;code&gt;PhoneNumber&lt;/code&gt; or &lt;code&gt;TargetArn&lt;/code&gt; parameters.&lt;/p&gt; (optional)
     * @param targetArn If you don&#39;t specify a value for the &lt;code&gt;TargetArn&lt;/code&gt; parameter, you must specify a value for the &lt;code&gt;PhoneNumber&lt;/code&gt; or &lt;code&gt;TopicArn&lt;/code&gt; parameters. (optional)
     * @param phoneNumber &lt;p&gt;The phone number to which you want to deliver an SMS message. Use E.164 format.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a value for the &lt;code&gt;PhoneNumber&lt;/code&gt; parameter, you must specify a value for the &lt;code&gt;TargetArn&lt;/code&gt; or &lt;code&gt;TopicArn&lt;/code&gt; parameters.&lt;/p&gt; (optional)
     * @param subject &lt;p&gt;Optional parameter to be used as the \&quot;Subject\&quot; line when the message is delivered to email endpoints. This field will also be included, if present, in the standard JSON messages delivered to other endpoints.&lt;/p&gt; &lt;p&gt;Constraints: Subjects must be ASCII text that begins with a letter, number, or punctuation mark; must not include line breaks or control characters; and must be less than 100 characters long.&lt;/p&gt; (optional)
     * @param messageStructure &lt;p&gt;Set &lt;code&gt;MessageStructure&lt;/code&gt; to &lt;code&gt;json&lt;/code&gt; if you want to send a different message for each protocol. For example, using one publish action, you can send a short message to your SMS subscribers and a longer message to your email subscribers. If you set &lt;code&gt;MessageStructure&lt;/code&gt; to &lt;code&gt;json&lt;/code&gt;, the value of the &lt;code&gt;Message&lt;/code&gt; parameter must: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;be a syntactically valid JSON object; and&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;contain at least a top-level JSON key of \&quot;default\&quot; with a value that is a string.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can define other top-level keys that define the message you want to send to a specific transport protocol (e.g., \&quot;http\&quot;).&lt;/p&gt; &lt;p&gt;Valid value: &lt;code&gt;json&lt;/code&gt; &lt;/p&gt; (optional)
     * @param messageAttributes Message attributes for Publish action. (optional)
     * @param messageDeduplicationId &lt;p&gt;This parameter applies only to FIFO (first-in-first-out) topics. The &lt;code&gt;MessageDeduplicationId&lt;/code&gt; can contain up to 128 alphanumeric characters &lt;code&gt;(a-z, A-Z, 0-9)&lt;/code&gt; and punctuation &lt;code&gt;(!\&quot;#$%&amp;amp;&#39;()*+,-./:;&amp;lt;&#x3D;&amp;gt;?@[\\]^_&#x60;{|}~)&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Every message must have a unique &lt;code&gt;MessageDeduplicationId&lt;/code&gt;, which is a token used for deduplication of sent messages. If a message with a particular &lt;code&gt;MessageDeduplicationId&lt;/code&gt; is sent successfully, any message sent with the same &lt;code&gt;MessageDeduplicationId&lt;/code&gt; during the 5-minute deduplication interval is treated as a duplicate. &lt;/p&gt; &lt;p&gt;If the topic has &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; set, the system generates a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; based on the contents of the message. Your &lt;code&gt;MessageDeduplicationId&lt;/code&gt; overrides the generated one.&lt;/p&gt; (optional)
     * @param messageGroupId &lt;p&gt;This parameter applies only to FIFO (first-in-first-out) topics. The &lt;code&gt;MessageGroupId&lt;/code&gt; can contain up to 128 alphanumeric characters &lt;code&gt;(a-z, A-Z, 0-9)&lt;/code&gt; and punctuation &lt;code&gt;(!\&quot;#$%&amp;amp;&#39;()*+,-./:;&amp;lt;&#x3D;&amp;gt;?@[\\]^_&#x60;{|}~)&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;MessageGroupId&lt;/code&gt; is a tag that specifies that a message belongs to a specific message group. Messages that belong to the same message group are processed in a FIFO manner (however, messages in different message groups might be processed out of order). Every message must include a &lt;code&gt;MessageGroupId&lt;/code&gt;.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;PublishResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EndpointDisabledException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PlatformApplicationDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> KMSDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> KMSInvalidStateException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> KMSNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> KMSOptInRequired </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> KMSThrottlingException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> KMSAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublishResponse> gETPublishWithHttpInfo(String message, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String topicArn, String targetArn, String phoneNumber, String subject, String messageStructure, Map<String, MessageAttributeValue> messageAttributes, String messageDeduplicationId, String messageGroupId) throws ApiException {
        okhttp3.Call localVarCall = gETPublishValidateBeforeCall(message, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, topicArn, targetArn, phoneNumber, subject, messageStructure, messageAttributes, messageDeduplicationId, messageGroupId, null);
        Type localVarReturnType = new TypeToken<PublishResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Sends a message to an Amazon SNS topic, a text message (SMS message) directly to a phone number, or a message to a mobile platform endpoint (when you specify the &lt;code&gt;TargetArn&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;If you send a message to a topic, Amazon SNS delivers the message to each endpoint that is subscribed to the topic. The format of the message depends on the notification protocol for each subscribed endpoint.&lt;/p&gt; &lt;p&gt;When a &lt;code&gt;messageId&lt;/code&gt; is returned, the message is saved and Amazon SNS immediately delivers it to subscribers.&lt;/p&gt; &lt;p&gt;To use the &lt;code&gt;Publish&lt;/code&gt; action for publishing a message to a mobile endpoint, such as an app on a Kindle device or mobile phone, you must specify the EndpointArn for the TargetArn parameter. The EndpointArn is returned when making a call with the &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; action. &lt;/p&gt; &lt;p&gt;For more information about formatting messages, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/mobile-push-send-custommessage.html\&quot;&gt;Send Custom Platform-Specific Payloads in Messages to Mobile Devices&lt;/a&gt;. &lt;/p&gt; &lt;important&gt; &lt;p&gt;You can publish messages only to topics and endpoints in the same Amazon Web Services Region.&lt;/p&gt; &lt;/important&gt;
     * @param message &lt;p&gt;The message you want to send.&lt;/p&gt; &lt;p&gt;If you are publishing to a topic and you want to send the same message to all transport protocols, include the text of the message as a String value. If you want to send different messages for each transport protocol, set the value of the &lt;code&gt;MessageStructure&lt;/code&gt; parameter to &lt;code&gt;json&lt;/code&gt; and use a JSON object for the &lt;code&gt;Message&lt;/code&gt; parameter. &lt;/p&gt; &lt;p/&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;With the exception of SMS, messages must be UTF-8 encoded strings and at most 256 KB in size (262,144 bytes, not 262,144 characters).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For SMS, each message can contain up to 140 characters. This character limit depends on the encoding schema. For example, an SMS message can contain 160 GSM characters, 140 ASCII characters, or 70 UCS-2 characters.&lt;/p&gt; &lt;p&gt;If you publish a message that exceeds this size limit, Amazon SNS sends the message as multiple messages, each fitting within the size limit. Messages aren&#39;t truncated mid-word but are cut off at whole-word boundaries.&lt;/p&gt; &lt;p&gt;The total size limit for a single SMS &lt;code&gt;Publish&lt;/code&gt; action is 1,600 characters.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;JSON-specific constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Keys in the JSON object that correspond to supported transport protocols must have simple JSON string values.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The values will be parsed (unescaped) before they are used in outgoing messages.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Outbound notifications are JSON encoded (meaning that the characters will be reescaped for sending).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Values have a minimum length of 0 (the empty string, \&quot;\&quot;, is allowed).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Values have a maximum length bounded by the overall message size (so, including multiple protocols may limit message sizes).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Non-string values will cause the key to be ignored.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Keys that do not correspond to supported transport protocols are ignored.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Duplicate keys are not allowed.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Failure to parse or validate any key or value in the message will cause the &lt;code&gt;Publish&lt;/code&gt; call to return an error (no partial delivery).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param topicArn &lt;p&gt;The topic you want to publish to.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a value for the &lt;code&gt;TopicArn&lt;/code&gt; parameter, you must specify a value for the &lt;code&gt;PhoneNumber&lt;/code&gt; or &lt;code&gt;TargetArn&lt;/code&gt; parameters.&lt;/p&gt; (optional)
     * @param targetArn If you don&#39;t specify a value for the &lt;code&gt;TargetArn&lt;/code&gt; parameter, you must specify a value for the &lt;code&gt;PhoneNumber&lt;/code&gt; or &lt;code&gt;TopicArn&lt;/code&gt; parameters. (optional)
     * @param phoneNumber &lt;p&gt;The phone number to which you want to deliver an SMS message. Use E.164 format.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a value for the &lt;code&gt;PhoneNumber&lt;/code&gt; parameter, you must specify a value for the &lt;code&gt;TargetArn&lt;/code&gt; or &lt;code&gt;TopicArn&lt;/code&gt; parameters.&lt;/p&gt; (optional)
     * @param subject &lt;p&gt;Optional parameter to be used as the \&quot;Subject\&quot; line when the message is delivered to email endpoints. This field will also be included, if present, in the standard JSON messages delivered to other endpoints.&lt;/p&gt; &lt;p&gt;Constraints: Subjects must be ASCII text that begins with a letter, number, or punctuation mark; must not include line breaks or control characters; and must be less than 100 characters long.&lt;/p&gt; (optional)
     * @param messageStructure &lt;p&gt;Set &lt;code&gt;MessageStructure&lt;/code&gt; to &lt;code&gt;json&lt;/code&gt; if you want to send a different message for each protocol. For example, using one publish action, you can send a short message to your SMS subscribers and a longer message to your email subscribers. If you set &lt;code&gt;MessageStructure&lt;/code&gt; to &lt;code&gt;json&lt;/code&gt;, the value of the &lt;code&gt;Message&lt;/code&gt; parameter must: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;be a syntactically valid JSON object; and&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;contain at least a top-level JSON key of \&quot;default\&quot; with a value that is a string.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can define other top-level keys that define the message you want to send to a specific transport protocol (e.g., \&quot;http\&quot;).&lt;/p&gt; &lt;p&gt;Valid value: &lt;code&gt;json&lt;/code&gt; &lt;/p&gt; (optional)
     * @param messageAttributes Message attributes for Publish action. (optional)
     * @param messageDeduplicationId &lt;p&gt;This parameter applies only to FIFO (first-in-first-out) topics. The &lt;code&gt;MessageDeduplicationId&lt;/code&gt; can contain up to 128 alphanumeric characters &lt;code&gt;(a-z, A-Z, 0-9)&lt;/code&gt; and punctuation &lt;code&gt;(!\&quot;#$%&amp;amp;&#39;()*+,-./:;&amp;lt;&#x3D;&amp;gt;?@[\\]^_&#x60;{|}~)&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Every message must have a unique &lt;code&gt;MessageDeduplicationId&lt;/code&gt;, which is a token used for deduplication of sent messages. If a message with a particular &lt;code&gt;MessageDeduplicationId&lt;/code&gt; is sent successfully, any message sent with the same &lt;code&gt;MessageDeduplicationId&lt;/code&gt; during the 5-minute deduplication interval is treated as a duplicate. &lt;/p&gt; &lt;p&gt;If the topic has &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; set, the system generates a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; based on the contents of the message. Your &lt;code&gt;MessageDeduplicationId&lt;/code&gt; overrides the generated one.&lt;/p&gt; (optional)
     * @param messageGroupId &lt;p&gt;This parameter applies only to FIFO (first-in-first-out) topics. The &lt;code&gt;MessageGroupId&lt;/code&gt; can contain up to 128 alphanumeric characters &lt;code&gt;(a-z, A-Z, 0-9)&lt;/code&gt; and punctuation &lt;code&gt;(!\&quot;#$%&amp;amp;&#39;()*+,-./:;&amp;lt;&#x3D;&amp;gt;?@[\\]^_&#x60;{|}~)&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;MessageGroupId&lt;/code&gt; is a tag that specifies that a message belongs to a specific message group. Messages that belong to the same message group are processed in a FIFO manner (however, messages in different message groups might be processed out of order). Every message must include a &lt;code&gt;MessageGroupId&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EndpointDisabledException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PlatformApplicationDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> KMSDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> KMSInvalidStateException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> KMSNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> KMSOptInRequired </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> KMSThrottlingException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> KMSAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPublishAsync(String message, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String topicArn, String targetArn, String phoneNumber, String subject, String messageStructure, Map<String, MessageAttributeValue> messageAttributes, String messageDeduplicationId, String messageGroupId, final ApiCallback<PublishResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETPublishValidateBeforeCall(message, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, topicArn, targetArn, phoneNumber, subject, messageStructure, messageAttributes, messageDeduplicationId, messageGroupId, _callback);
        Type localVarReturnType = new TypeToken<PublishResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETPublishBatch
     * @param topicArn The Amazon resource name (ARN) of the topic you want to batch publish to. (required)
     * @param publishBatchRequestEntries A list of &lt;code&gt;PublishBatch&lt;/code&gt; request entries to be sent to the SNS topic. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EndpointDisabledException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PlatformApplicationDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> BatchEntryIdsNotDistinctException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> BatchRequestTooLongException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EmptyBatchRequestException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidBatchEntryIdException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyEntriesInBatchRequestException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> KMSDisabledException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> KMSInvalidStateException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> KMSNotFoundException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> KMSOptInRequired </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> KMSThrottlingException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> KMSAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPublishBatchCall(String topicArn, List<PublishBatchRequestEntry> publishBatchRequestEntries, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=PublishBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (topicArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TopicArn", topicArn));
        }

        if (publishBatchRequestEntries != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "PublishBatchRequestEntries", publishBatchRequestEntries));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETPublishBatchValidateBeforeCall(String topicArn, List<PublishBatchRequestEntry> publishBatchRequestEntries, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'topicArn' is set
        if (topicArn == null) {
            throw new ApiException("Missing the required parameter 'topicArn' when calling gETPublishBatch(Async)");
        }

        // verify the required parameter 'publishBatchRequestEntries' is set
        if (publishBatchRequestEntries == null) {
            throw new ApiException("Missing the required parameter 'publishBatchRequestEntries' when calling gETPublishBatch(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETPublishBatch(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETPublishBatch(Async)");
        }

        return gETPublishBatchCall(topicArn, publishBatchRequestEntries, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Publishes up to ten messages to the specified topic. This is a batch version of &lt;code&gt;Publish&lt;/code&gt;. For FIFO topics, multiple messages within a single batch are published in the order they are sent, and messages are deduplicated within the batch and across batches for 5 minutes.&lt;/p&gt; &lt;p&gt;The result of publishing each message is reported individually in the response. Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of &lt;code&gt;200&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The maximum allowed individual message size and the maximum total payload size (the sum of the individual lengths of all of the batched messages) are both 256 KB (262,144 bytes). &lt;/p&gt; &lt;p&gt;Some actions take lists of parameters. These lists are specified using the &lt;code&gt;param.n&lt;/code&gt; notation. Values of &lt;code&gt;n&lt;/code&gt; are integers starting from 1. For example, a parameter list with two elements looks like this: &lt;/p&gt; &lt;p&gt;&amp;amp;AttributeName.1&#x3D;first&lt;/p&gt; &lt;p&gt;&amp;amp;AttributeName.2&#x3D;second&lt;/p&gt; &lt;p&gt;If you send a batch message to a topic, Amazon SNS publishes the batch message to each endpoint that is subscribed to the topic. The format of the batch message depends on the notification protocol for each subscribed endpoint.&lt;/p&gt; &lt;p&gt;When a &lt;code&gt;messageId&lt;/code&gt; is returned, the batch message is saved and Amazon SNS immediately delivers the message to subscribers.&lt;/p&gt;
     * @param topicArn The Amazon resource name (ARN) of the topic you want to batch publish to. (required)
     * @param publishBatchRequestEntries A list of &lt;code&gt;PublishBatch&lt;/code&gt; request entries to be sent to the SNS topic. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PublishBatchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EndpointDisabledException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PlatformApplicationDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> BatchEntryIdsNotDistinctException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> BatchRequestTooLongException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EmptyBatchRequestException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidBatchEntryIdException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyEntriesInBatchRequestException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> KMSDisabledException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> KMSInvalidStateException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> KMSNotFoundException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> KMSOptInRequired </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> KMSThrottlingException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> KMSAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public PublishBatchResponse gETPublishBatch(String topicArn, List<PublishBatchRequestEntry> publishBatchRequestEntries, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PublishBatchResponse> localVarResp = gETPublishBatchWithHttpInfo(topicArn, publishBatchRequestEntries, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Publishes up to ten messages to the specified topic. This is a batch version of &lt;code&gt;Publish&lt;/code&gt;. For FIFO topics, multiple messages within a single batch are published in the order they are sent, and messages are deduplicated within the batch and across batches for 5 minutes.&lt;/p&gt; &lt;p&gt;The result of publishing each message is reported individually in the response. Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of &lt;code&gt;200&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The maximum allowed individual message size and the maximum total payload size (the sum of the individual lengths of all of the batched messages) are both 256 KB (262,144 bytes). &lt;/p&gt; &lt;p&gt;Some actions take lists of parameters. These lists are specified using the &lt;code&gt;param.n&lt;/code&gt; notation. Values of &lt;code&gt;n&lt;/code&gt; are integers starting from 1. For example, a parameter list with two elements looks like this: &lt;/p&gt; &lt;p&gt;&amp;amp;AttributeName.1&#x3D;first&lt;/p&gt; &lt;p&gt;&amp;amp;AttributeName.2&#x3D;second&lt;/p&gt; &lt;p&gt;If you send a batch message to a topic, Amazon SNS publishes the batch message to each endpoint that is subscribed to the topic. The format of the batch message depends on the notification protocol for each subscribed endpoint.&lt;/p&gt; &lt;p&gt;When a &lt;code&gt;messageId&lt;/code&gt; is returned, the batch message is saved and Amazon SNS immediately delivers the message to subscribers.&lt;/p&gt;
     * @param topicArn The Amazon resource name (ARN) of the topic you want to batch publish to. (required)
     * @param publishBatchRequestEntries A list of &lt;code&gt;PublishBatch&lt;/code&gt; request entries to be sent to the SNS topic. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PublishBatchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EndpointDisabledException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PlatformApplicationDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> BatchEntryIdsNotDistinctException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> BatchRequestTooLongException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EmptyBatchRequestException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidBatchEntryIdException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyEntriesInBatchRequestException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> KMSDisabledException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> KMSInvalidStateException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> KMSNotFoundException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> KMSOptInRequired </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> KMSThrottlingException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> KMSAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublishBatchResponse> gETPublishBatchWithHttpInfo(String topicArn, List<PublishBatchRequestEntry> publishBatchRequestEntries, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETPublishBatchValidateBeforeCall(topicArn, publishBatchRequestEntries, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PublishBatchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Publishes up to ten messages to the specified topic. This is a batch version of &lt;code&gt;Publish&lt;/code&gt;. For FIFO topics, multiple messages within a single batch are published in the order they are sent, and messages are deduplicated within the batch and across batches for 5 minutes.&lt;/p&gt; &lt;p&gt;The result of publishing each message is reported individually in the response. Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of &lt;code&gt;200&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The maximum allowed individual message size and the maximum total payload size (the sum of the individual lengths of all of the batched messages) are both 256 KB (262,144 bytes). &lt;/p&gt; &lt;p&gt;Some actions take lists of parameters. These lists are specified using the &lt;code&gt;param.n&lt;/code&gt; notation. Values of &lt;code&gt;n&lt;/code&gt; are integers starting from 1. For example, a parameter list with two elements looks like this: &lt;/p&gt; &lt;p&gt;&amp;amp;AttributeName.1&#x3D;first&lt;/p&gt; &lt;p&gt;&amp;amp;AttributeName.2&#x3D;second&lt;/p&gt; &lt;p&gt;If you send a batch message to a topic, Amazon SNS publishes the batch message to each endpoint that is subscribed to the topic. The format of the batch message depends on the notification protocol for each subscribed endpoint.&lt;/p&gt; &lt;p&gt;When a &lt;code&gt;messageId&lt;/code&gt; is returned, the batch message is saved and Amazon SNS immediately delivers the message to subscribers.&lt;/p&gt;
     * @param topicArn The Amazon resource name (ARN) of the topic you want to batch publish to. (required)
     * @param publishBatchRequestEntries A list of &lt;code&gt;PublishBatch&lt;/code&gt; request entries to be sent to the SNS topic. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EndpointDisabledException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PlatformApplicationDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> BatchEntryIdsNotDistinctException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> BatchRequestTooLongException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EmptyBatchRequestException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidBatchEntryIdException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyEntriesInBatchRequestException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> KMSDisabledException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> KMSInvalidStateException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> KMSNotFoundException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> KMSOptInRequired </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> KMSThrottlingException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> KMSAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPublishBatchAsync(String topicArn, List<PublishBatchRequestEntry> publishBatchRequestEntries, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PublishBatchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETPublishBatchValidateBeforeCall(topicArn, publishBatchRequestEntries, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PublishBatchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETPutDataProtectionPolicy
     * @param resourceArn &lt;p&gt;The ARN of the topic whose &lt;code&gt;DataProtectionPolicy&lt;/code&gt; you want to add or update.&lt;/p&gt; &lt;p&gt;For more information about ARNs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs)&lt;/a&gt; in the Amazon Web Services General Reference.&lt;/p&gt; (required)
     * @param dataProtectionPolicy &lt;p&gt;The JSON serialization of the topic&#39;s &lt;code&gt;DataProtectionPolicy&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;DataProtectionPolicy&lt;/code&gt; must be in JSON string format.&lt;/p&gt; &lt;p&gt;Length Constraints: Maximum length of 30,720.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPutDataProtectionPolicyCall(String resourceArn, String dataProtectionPolicy, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=PutDataProtectionPolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resourceArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ResourceArn", resourceArn));
        }

        if (dataProtectionPolicy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DataProtectionPolicy", dataProtectionPolicy));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETPutDataProtectionPolicyValidateBeforeCall(String resourceArn, String dataProtectionPolicy, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceArn' is set
        if (resourceArn == null) {
            throw new ApiException("Missing the required parameter 'resourceArn' when calling gETPutDataProtectionPolicy(Async)");
        }

        // verify the required parameter 'dataProtectionPolicy' is set
        if (dataProtectionPolicy == null) {
            throw new ApiException("Missing the required parameter 'dataProtectionPolicy' when calling gETPutDataProtectionPolicy(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETPutDataProtectionPolicy(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETPutDataProtectionPolicy(Async)");
        }

        return gETPutDataProtectionPolicyCall(resourceArn, dataProtectionPolicy, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Adds or updates an inline policy document that is stored in the specified Amazon SNS topic.
     * @param resourceArn &lt;p&gt;The ARN of the topic whose &lt;code&gt;DataProtectionPolicy&lt;/code&gt; you want to add or update.&lt;/p&gt; &lt;p&gt;For more information about ARNs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs)&lt;/a&gt; in the Amazon Web Services General Reference.&lt;/p&gt; (required)
     * @param dataProtectionPolicy &lt;p&gt;The JSON serialization of the topic&#39;s &lt;code&gt;DataProtectionPolicy&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;DataProtectionPolicy&lt;/code&gt; must be in JSON string format.&lt;/p&gt; &lt;p&gt;Length Constraints: Maximum length of 30,720.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public void gETPutDataProtectionPolicy(String resourceArn, String dataProtectionPolicy, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETPutDataProtectionPolicyWithHttpInfo(resourceArn, dataProtectionPolicy, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Adds or updates an inline policy document that is stored in the specified Amazon SNS topic.
     * @param resourceArn &lt;p&gt;The ARN of the topic whose &lt;code&gt;DataProtectionPolicy&lt;/code&gt; you want to add or update.&lt;/p&gt; &lt;p&gt;For more information about ARNs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs)&lt;/a&gt; in the Amazon Web Services General Reference.&lt;/p&gt; (required)
     * @param dataProtectionPolicy &lt;p&gt;The JSON serialization of the topic&#39;s &lt;code&gt;DataProtectionPolicy&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;DataProtectionPolicy&lt;/code&gt; must be in JSON string format.&lt;/p&gt; &lt;p&gt;Length Constraints: Maximum length of 30,720.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETPutDataProtectionPolicyWithHttpInfo(String resourceArn, String dataProtectionPolicy, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETPutDataProtectionPolicyValidateBeforeCall(resourceArn, dataProtectionPolicy, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Adds or updates an inline policy document that is stored in the specified Amazon SNS topic.
     * @param resourceArn &lt;p&gt;The ARN of the topic whose &lt;code&gt;DataProtectionPolicy&lt;/code&gt; you want to add or update.&lt;/p&gt; &lt;p&gt;For more information about ARNs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs)&lt;/a&gt; in the Amazon Web Services General Reference.&lt;/p&gt; (required)
     * @param dataProtectionPolicy &lt;p&gt;The JSON serialization of the topic&#39;s &lt;code&gt;DataProtectionPolicy&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;DataProtectionPolicy&lt;/code&gt; must be in JSON string format.&lt;/p&gt; &lt;p&gt;Length Constraints: Maximum length of 30,720.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPutDataProtectionPolicyAsync(String resourceArn, String dataProtectionPolicy, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETPutDataProtectionPolicyValidateBeforeCall(resourceArn, dataProtectionPolicy, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETRemovePermission
     * @param topicArn The ARN of the topic whose access control policy you wish to modify. (required)
     * @param label The unique label of the statement you want to remove. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRemovePermissionCall(String topicArn, String label, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=RemovePermission";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (topicArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TopicArn", topicArn));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Label", label));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETRemovePermissionValidateBeforeCall(String topicArn, String label, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'topicArn' is set
        if (topicArn == null) {
            throw new ApiException("Missing the required parameter 'topicArn' when calling gETRemovePermission(Async)");
        }

        // verify the required parameter 'label' is set
        if (label == null) {
            throw new ApiException("Missing the required parameter 'label' when calling gETRemovePermission(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETRemovePermission(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETRemovePermission(Async)");
        }

        return gETRemovePermissionCall(topicArn, label, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Removes a statement from a topic&#39;s access control policy.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To remove the ability to change topic permissions, you must deny permissions to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetTopicAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/note&gt;
     * @param topicArn The ARN of the topic whose access control policy you wish to modify. (required)
     * @param label The unique label of the statement you want to remove. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public void gETRemovePermission(String topicArn, String label, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETRemovePermissionWithHttpInfo(topicArn, label, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Removes a statement from a topic&#39;s access control policy.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To remove the ability to change topic permissions, you must deny permissions to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetTopicAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/note&gt;
     * @param topicArn The ARN of the topic whose access control policy you wish to modify. (required)
     * @param label The unique label of the statement you want to remove. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETRemovePermissionWithHttpInfo(String topicArn, String label, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETRemovePermissionValidateBeforeCall(topicArn, label, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Removes a statement from a topic&#39;s access control policy.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To remove the ability to change topic permissions, you must deny permissions to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetTopicAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/note&gt;
     * @param topicArn The ARN of the topic whose access control policy you wish to modify. (required)
     * @param label The unique label of the statement you want to remove. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRemovePermissionAsync(String topicArn, String label, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETRemovePermissionValidateBeforeCall(topicArn, label, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETSetEndpointAttributes
     * @param endpointArn EndpointArn used for SetEndpointAttributes action. (required)
     * @param attributes &lt;p&gt;A map of the endpoint attributes. Attributes in this map include the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CustomUserData&lt;/code&gt; – arbitrary user data to associate with the endpoint. Amazon SNS does not use this data. The data must be in UTF-8 format and less than 2KB.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Enabled&lt;/code&gt; – flag that enables/disables delivery to the endpoint. Amazon SNS will set this to false when a notification service indicates to Amazon SNS that the endpoint is invalid. Users can set it back to true, typically after updating Token.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Token&lt;/code&gt; – device token, also referred to as a registration id, for an app and mobile device. This is returned from the notification service when an app and mobile device are registered with the notification service.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetEndpointAttributesCall(String endpointArn, Map<String, String> attributes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=SetEndpointAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (endpointArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndpointArn", endpointArn));
        }

        if (attributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Attributes", attributes));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETSetEndpointAttributesValidateBeforeCall(String endpointArn, Map<String, String> attributes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'endpointArn' is set
        if (endpointArn == null) {
            throw new ApiException("Missing the required parameter 'endpointArn' when calling gETSetEndpointAttributes(Async)");
        }

        // verify the required parameter 'attributes' is set
        if (attributes == null) {
            throw new ApiException("Missing the required parameter 'attributes' when calling gETSetEndpointAttributes(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETSetEndpointAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETSetEndpointAttributes(Async)");
        }

        return gETSetEndpointAttributesCall(endpointArn, attributes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Sets the attributes for an endpoint for a device on one of the supported push notification services, such as GCM (Firebase Cloud Messaging) and APNS. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. 
     * @param endpointArn EndpointArn used for SetEndpointAttributes action. (required)
     * @param attributes &lt;p&gt;A map of the endpoint attributes. Attributes in this map include the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CustomUserData&lt;/code&gt; – arbitrary user data to associate with the endpoint. Amazon SNS does not use this data. The data must be in UTF-8 format and less than 2KB.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Enabled&lt;/code&gt; – flag that enables/disables delivery to the endpoint. Amazon SNS will set this to false when a notification service indicates to Amazon SNS that the endpoint is invalid. Users can set it back to true, typically after updating Token.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Token&lt;/code&gt; – device token, also referred to as a registration id, for an app and mobile device. This is returned from the notification service when an app and mobile device are registered with the notification service.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public void gETSetEndpointAttributes(String endpointArn, Map<String, String> attributes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETSetEndpointAttributesWithHttpInfo(endpointArn, attributes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Sets the attributes for an endpoint for a device on one of the supported push notification services, such as GCM (Firebase Cloud Messaging) and APNS. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. 
     * @param endpointArn EndpointArn used for SetEndpointAttributes action. (required)
     * @param attributes &lt;p&gt;A map of the endpoint attributes. Attributes in this map include the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CustomUserData&lt;/code&gt; – arbitrary user data to associate with the endpoint. Amazon SNS does not use this data. The data must be in UTF-8 format and less than 2KB.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Enabled&lt;/code&gt; – flag that enables/disables delivery to the endpoint. Amazon SNS will set this to false when a notification service indicates to Amazon SNS that the endpoint is invalid. Users can set it back to true, typically after updating Token.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Token&lt;/code&gt; – device token, also referred to as a registration id, for an app and mobile device. This is returned from the notification service when an app and mobile device are registered with the notification service.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETSetEndpointAttributesWithHttpInfo(String endpointArn, Map<String, String> attributes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETSetEndpointAttributesValidateBeforeCall(endpointArn, attributes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Sets the attributes for an endpoint for a device on one of the supported push notification services, such as GCM (Firebase Cloud Messaging) and APNS. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. 
     * @param endpointArn EndpointArn used for SetEndpointAttributes action. (required)
     * @param attributes &lt;p&gt;A map of the endpoint attributes. Attributes in this map include the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CustomUserData&lt;/code&gt; – arbitrary user data to associate with the endpoint. Amazon SNS does not use this data. The data must be in UTF-8 format and less than 2KB.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Enabled&lt;/code&gt; – flag that enables/disables delivery to the endpoint. Amazon SNS will set this to false when a notification service indicates to Amazon SNS that the endpoint is invalid. Users can set it back to true, typically after updating Token.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Token&lt;/code&gt; – device token, also referred to as a registration id, for an app and mobile device. This is returned from the notification service when an app and mobile device are registered with the notification service.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetEndpointAttributesAsync(String endpointArn, Map<String, String> attributes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETSetEndpointAttributesValidateBeforeCall(endpointArn, attributes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETSetPlatformApplicationAttributes
     * @param platformApplicationArn PlatformApplicationArn for SetPlatformApplicationAttributes action. (required)
     * @param attributes &lt;p&gt;A map of the platform application attributes. Attributes in this map include the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PlatformCredential&lt;/code&gt; – The credential received from the notification service.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For ADM, &lt;code&gt;PlatformCredential&lt;/code&gt;is client secret.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For Apple Services using certificate credentials, &lt;code&gt;PlatformCredential&lt;/code&gt; is private key.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For Apple Services using token credentials, &lt;code&gt;PlatformCredential&lt;/code&gt; is signing key.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For GCM (Firebase Cloud Messaging), &lt;code&gt;PlatformCredential&lt;/code&gt; is API key. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PlatformPrincipal&lt;/code&gt; – The principal received from the notification service.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For ADM, &lt;code&gt;PlatformPrincipal&lt;/code&gt;is client id.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For Apple Services using certificate credentials, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is SSL certificate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For Apple Services using token credentials, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is signing key ID.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For GCM (Firebase Cloud Messaging), there is no &lt;code&gt;PlatformPrincipal&lt;/code&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;EventEndpointCreated&lt;/code&gt; – Topic ARN to which &lt;code&gt;EndpointCreated&lt;/code&gt; event notifications are sent.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;EventEndpointDeleted&lt;/code&gt; – Topic ARN to which &lt;code&gt;EndpointDeleted&lt;/code&gt; event notifications are sent.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;EventEndpointUpdated&lt;/code&gt; – Topic ARN to which &lt;code&gt;EndpointUpdate&lt;/code&gt; event notifications are sent.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;EventDeliveryFailure&lt;/code&gt; – Topic ARN to which &lt;code&gt;DeliveryFailure&lt;/code&gt; event notifications are sent upon Direct Publish delivery failure (permanent) to one of the application&#39;s endpoints.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SuccessFeedbackRoleArn&lt;/code&gt; – IAM role ARN used to give Amazon SNS write access to use CloudWatch Logs on your behalf.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FailureFeedbackRoleArn&lt;/code&gt; – IAM role ARN used to give Amazon SNS write access to use CloudWatch Logs on your behalf.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SuccessFeedbackSampleRate&lt;/code&gt; – Sample rate percentage (0-100) of successfully delivered messages.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes only apply to &lt;code&gt;APNs&lt;/code&gt; token-based authentication:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApplePlatformTeamID&lt;/code&gt; – The identifier that&#39;s assigned to your Apple developer account team.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApplePlatformBundleID&lt;/code&gt; – The bundle identifier that&#39;s assigned to your iOS app.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetPlatformApplicationAttributesCall(String platformApplicationArn, Map<String, String> attributes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=SetPlatformApplicationAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platformApplicationArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlatformApplicationArn", platformApplicationArn));
        }

        if (attributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Attributes", attributes));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETSetPlatformApplicationAttributesValidateBeforeCall(String platformApplicationArn, Map<String, String> attributes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'platformApplicationArn' is set
        if (platformApplicationArn == null) {
            throw new ApiException("Missing the required parameter 'platformApplicationArn' when calling gETSetPlatformApplicationAttributes(Async)");
        }

        // verify the required parameter 'attributes' is set
        if (attributes == null) {
            throw new ApiException("Missing the required parameter 'attributes' when calling gETSetPlatformApplicationAttributes(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETSetPlatformApplicationAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETSetPlatformApplicationAttributes(Async)");
        }

        return gETSetPlatformApplicationAttributesCall(platformApplicationArn, attributes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Sets the attributes of the platform application object for the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. For information on configuring attributes for message delivery status, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-msg-status.html\&quot;&gt;Using Amazon SNS Application Attributes for Message Delivery Status&lt;/a&gt;. 
     * @param platformApplicationArn PlatformApplicationArn for SetPlatformApplicationAttributes action. (required)
     * @param attributes &lt;p&gt;A map of the platform application attributes. Attributes in this map include the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PlatformCredential&lt;/code&gt; – The credential received from the notification service.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For ADM, &lt;code&gt;PlatformCredential&lt;/code&gt;is client secret.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For Apple Services using certificate credentials, &lt;code&gt;PlatformCredential&lt;/code&gt; is private key.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For Apple Services using token credentials, &lt;code&gt;PlatformCredential&lt;/code&gt; is signing key.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For GCM (Firebase Cloud Messaging), &lt;code&gt;PlatformCredential&lt;/code&gt; is API key. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PlatformPrincipal&lt;/code&gt; – The principal received from the notification service.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For ADM, &lt;code&gt;PlatformPrincipal&lt;/code&gt;is client id.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For Apple Services using certificate credentials, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is SSL certificate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For Apple Services using token credentials, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is signing key ID.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For GCM (Firebase Cloud Messaging), there is no &lt;code&gt;PlatformPrincipal&lt;/code&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;EventEndpointCreated&lt;/code&gt; – Topic ARN to which &lt;code&gt;EndpointCreated&lt;/code&gt; event notifications are sent.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;EventEndpointDeleted&lt;/code&gt; – Topic ARN to which &lt;code&gt;EndpointDeleted&lt;/code&gt; event notifications are sent.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;EventEndpointUpdated&lt;/code&gt; – Topic ARN to which &lt;code&gt;EndpointUpdate&lt;/code&gt; event notifications are sent.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;EventDeliveryFailure&lt;/code&gt; – Topic ARN to which &lt;code&gt;DeliveryFailure&lt;/code&gt; event notifications are sent upon Direct Publish delivery failure (permanent) to one of the application&#39;s endpoints.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SuccessFeedbackRoleArn&lt;/code&gt; – IAM role ARN used to give Amazon SNS write access to use CloudWatch Logs on your behalf.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FailureFeedbackRoleArn&lt;/code&gt; – IAM role ARN used to give Amazon SNS write access to use CloudWatch Logs on your behalf.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SuccessFeedbackSampleRate&lt;/code&gt; – Sample rate percentage (0-100) of successfully delivered messages.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes only apply to &lt;code&gt;APNs&lt;/code&gt; token-based authentication:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApplePlatformTeamID&lt;/code&gt; – The identifier that&#39;s assigned to your Apple developer account team.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApplePlatformBundleID&lt;/code&gt; – The bundle identifier that&#39;s assigned to your iOS app.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public void gETSetPlatformApplicationAttributes(String platformApplicationArn, Map<String, String> attributes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETSetPlatformApplicationAttributesWithHttpInfo(platformApplicationArn, attributes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Sets the attributes of the platform application object for the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. For information on configuring attributes for message delivery status, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-msg-status.html\&quot;&gt;Using Amazon SNS Application Attributes for Message Delivery Status&lt;/a&gt;. 
     * @param platformApplicationArn PlatformApplicationArn for SetPlatformApplicationAttributes action. (required)
     * @param attributes &lt;p&gt;A map of the platform application attributes. Attributes in this map include the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PlatformCredential&lt;/code&gt; – The credential received from the notification service.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For ADM, &lt;code&gt;PlatformCredential&lt;/code&gt;is client secret.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For Apple Services using certificate credentials, &lt;code&gt;PlatformCredential&lt;/code&gt; is private key.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For Apple Services using token credentials, &lt;code&gt;PlatformCredential&lt;/code&gt; is signing key.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For GCM (Firebase Cloud Messaging), &lt;code&gt;PlatformCredential&lt;/code&gt; is API key. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PlatformPrincipal&lt;/code&gt; – The principal received from the notification service.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For ADM, &lt;code&gt;PlatformPrincipal&lt;/code&gt;is client id.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For Apple Services using certificate credentials, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is SSL certificate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For Apple Services using token credentials, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is signing key ID.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For GCM (Firebase Cloud Messaging), there is no &lt;code&gt;PlatformPrincipal&lt;/code&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;EventEndpointCreated&lt;/code&gt; – Topic ARN to which &lt;code&gt;EndpointCreated&lt;/code&gt; event notifications are sent.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;EventEndpointDeleted&lt;/code&gt; – Topic ARN to which &lt;code&gt;EndpointDeleted&lt;/code&gt; event notifications are sent.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;EventEndpointUpdated&lt;/code&gt; – Topic ARN to which &lt;code&gt;EndpointUpdate&lt;/code&gt; event notifications are sent.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;EventDeliveryFailure&lt;/code&gt; – Topic ARN to which &lt;code&gt;DeliveryFailure&lt;/code&gt; event notifications are sent upon Direct Publish delivery failure (permanent) to one of the application&#39;s endpoints.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SuccessFeedbackRoleArn&lt;/code&gt; – IAM role ARN used to give Amazon SNS write access to use CloudWatch Logs on your behalf.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FailureFeedbackRoleArn&lt;/code&gt; – IAM role ARN used to give Amazon SNS write access to use CloudWatch Logs on your behalf.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SuccessFeedbackSampleRate&lt;/code&gt; – Sample rate percentage (0-100) of successfully delivered messages.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes only apply to &lt;code&gt;APNs&lt;/code&gt; token-based authentication:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApplePlatformTeamID&lt;/code&gt; – The identifier that&#39;s assigned to your Apple developer account team.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApplePlatformBundleID&lt;/code&gt; – The bundle identifier that&#39;s assigned to your iOS app.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETSetPlatformApplicationAttributesWithHttpInfo(String platformApplicationArn, Map<String, String> attributes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETSetPlatformApplicationAttributesValidateBeforeCall(platformApplicationArn, attributes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Sets the attributes of the platform application object for the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. For information on configuring attributes for message delivery status, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-msg-status.html\&quot;&gt;Using Amazon SNS Application Attributes for Message Delivery Status&lt;/a&gt;. 
     * @param platformApplicationArn PlatformApplicationArn for SetPlatformApplicationAttributes action. (required)
     * @param attributes &lt;p&gt;A map of the platform application attributes. Attributes in this map include the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PlatformCredential&lt;/code&gt; – The credential received from the notification service.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For ADM, &lt;code&gt;PlatformCredential&lt;/code&gt;is client secret.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For Apple Services using certificate credentials, &lt;code&gt;PlatformCredential&lt;/code&gt; is private key.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For Apple Services using token credentials, &lt;code&gt;PlatformCredential&lt;/code&gt; is signing key.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For GCM (Firebase Cloud Messaging), &lt;code&gt;PlatformCredential&lt;/code&gt; is API key. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PlatformPrincipal&lt;/code&gt; – The principal received from the notification service.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For ADM, &lt;code&gt;PlatformPrincipal&lt;/code&gt;is client id.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For Apple Services using certificate credentials, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is SSL certificate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For Apple Services using token credentials, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is signing key ID.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For GCM (Firebase Cloud Messaging), there is no &lt;code&gt;PlatformPrincipal&lt;/code&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;EventEndpointCreated&lt;/code&gt; – Topic ARN to which &lt;code&gt;EndpointCreated&lt;/code&gt; event notifications are sent.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;EventEndpointDeleted&lt;/code&gt; – Topic ARN to which &lt;code&gt;EndpointDeleted&lt;/code&gt; event notifications are sent.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;EventEndpointUpdated&lt;/code&gt; – Topic ARN to which &lt;code&gt;EndpointUpdate&lt;/code&gt; event notifications are sent.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;EventDeliveryFailure&lt;/code&gt; – Topic ARN to which &lt;code&gt;DeliveryFailure&lt;/code&gt; event notifications are sent upon Direct Publish delivery failure (permanent) to one of the application&#39;s endpoints.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SuccessFeedbackRoleArn&lt;/code&gt; – IAM role ARN used to give Amazon SNS write access to use CloudWatch Logs on your behalf.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FailureFeedbackRoleArn&lt;/code&gt; – IAM role ARN used to give Amazon SNS write access to use CloudWatch Logs on your behalf.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SuccessFeedbackSampleRate&lt;/code&gt; – Sample rate percentage (0-100) of successfully delivered messages.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes only apply to &lt;code&gt;APNs&lt;/code&gt; token-based authentication:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApplePlatformTeamID&lt;/code&gt; – The identifier that&#39;s assigned to your Apple developer account team.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApplePlatformBundleID&lt;/code&gt; – The bundle identifier that&#39;s assigned to your iOS app.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetPlatformApplicationAttributesAsync(String platformApplicationArn, Map<String, String> attributes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETSetPlatformApplicationAttributesValidateBeforeCall(platformApplicationArn, attributes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETSetSMSAttributes
     * @param attributes &lt;p&gt;The default settings for sending SMS messages from your Amazon Web Services account. You can set values for the following attribute names:&lt;/p&gt; &lt;p&gt; &lt;code&gt;MonthlySpendLimit&lt;/code&gt; – The maximum amount in USD that you are willing to spend each month to send SMS messages. When Amazon SNS determines that sending an SMS message would incur a cost that exceeds this limit, it stops sending SMS messages within minutes.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Amazon SNS stops sending SMS messages within minutes of the limit being crossed. During that interval, if you continue to send SMS messages, you will incur costs that exceed your limit.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;By default, the spend limit is set to the maximum allowed by Amazon SNS. If you want to raise the limit, submit an &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/case/create?issueType&#x3D;service-limit-increase&amp;amp;limitType&#x3D;service-code-sns\&quot;&gt;SNS Limit Increase case&lt;/a&gt;. For &lt;b&gt;New limit value&lt;/b&gt;, enter your desired monthly spend limit. In the &lt;b&gt;Use Case Description&lt;/b&gt; field, explain that you are requesting an SMS monthly spend limit increase.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DeliveryStatusIAMRole&lt;/code&gt; – The ARN of the IAM role that allows Amazon SNS to write logs about SMS deliveries in CloudWatch Logs. For each SMS message that you send, Amazon SNS writes a log that includes the message price, the success or failure status, the reason for failure (if the message failed), the message dwell time, and other information.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DeliveryStatusSuccessSamplingRate&lt;/code&gt; – The percentage of successful SMS deliveries for which Amazon SNS will write logs in CloudWatch Logs. The value can be an integer from 0 - 100. For example, to write logs only for failed deliveries, set this value to &lt;code&gt;0&lt;/code&gt;. To write logs for 10% of your successful deliveries, set it to &lt;code&gt;10&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DefaultSenderID&lt;/code&gt; – A string, such as your business brand, that is displayed as the sender on the receiving device. Support for sender IDs varies by country. The sender ID can be 1 - 11 alphanumeric characters, and it must contain at least one letter.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DefaultSMSType&lt;/code&gt; – The type of SMS message that you will send by default. You can assign the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Promotional&lt;/code&gt; – (Default) Noncritical messages, such as marketing messages. Amazon SNS optimizes the message delivery to incur the lowest cost.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Transactional&lt;/code&gt; – Critical messages that support customer transactions, such as one-time passcodes for multi-factor authentication. Amazon SNS optimizes the message delivery to achieve the highest reliability.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;code&gt;UsageReportS3Bucket&lt;/code&gt; – The name of the Amazon S3 bucket to receive daily SMS usage reports from Amazon SNS. Each day, Amazon SNS will deliver a usage report as a CSV file to the bucket. The report includes the following information for each SMS message that was successfully delivered by your Amazon Web Services account:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Time that the message was published (in UTC)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Message ID&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Destination phone number&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Message type&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Delivery status&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Message price (in USD)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Part number (a message is split into multiple parts if it is too long for a single message)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Total number of parts&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To receive the report, the bucket must have a policy that allows the Amazon SNS service principal to perform the &lt;code&gt;s3:PutObject&lt;/code&gt; and &lt;code&gt;s3:GetBucketLocation&lt;/code&gt; actions.&lt;/p&gt; &lt;p&gt;For an example bucket policy and usage report, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sms_stats.html\&quot;&gt;Monitoring SMS Activity&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetSMSAttributesCall(Map<String, String> attributes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=SetSMSAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attributes", attributes));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETSetSMSAttributesValidateBeforeCall(Map<String, String> attributes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attributes' is set
        if (attributes == null) {
            throw new ApiException("Missing the required parameter 'attributes' when calling gETSetSMSAttributes(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETSetSMSAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETSetSMSAttributes(Async)");
        }

        return gETSetSMSAttributesCall(attributes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Use this request to set the default settings for sending SMS messages and receiving daily SMS usage reports.&lt;/p&gt; &lt;p&gt;You can override some of these settings for a single message when you use the &lt;code&gt;Publish&lt;/code&gt; action with the &lt;code&gt;MessageAttributes.entry.N&lt;/code&gt; parameter. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sms_publish-to-phone.html\&quot;&gt;Publishing to a mobile phone&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To use this operation, you must grant the Amazon SNS service principal (&lt;code&gt;sns.amazonaws.com&lt;/code&gt;) permission to perform the &lt;code&gt;s3:ListBucket&lt;/code&gt; action. &lt;/p&gt; &lt;/note&gt;
     * @param attributes &lt;p&gt;The default settings for sending SMS messages from your Amazon Web Services account. You can set values for the following attribute names:&lt;/p&gt; &lt;p&gt; &lt;code&gt;MonthlySpendLimit&lt;/code&gt; – The maximum amount in USD that you are willing to spend each month to send SMS messages. When Amazon SNS determines that sending an SMS message would incur a cost that exceeds this limit, it stops sending SMS messages within minutes.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Amazon SNS stops sending SMS messages within minutes of the limit being crossed. During that interval, if you continue to send SMS messages, you will incur costs that exceed your limit.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;By default, the spend limit is set to the maximum allowed by Amazon SNS. If you want to raise the limit, submit an &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/case/create?issueType&#x3D;service-limit-increase&amp;amp;limitType&#x3D;service-code-sns\&quot;&gt;SNS Limit Increase case&lt;/a&gt;. For &lt;b&gt;New limit value&lt;/b&gt;, enter your desired monthly spend limit. In the &lt;b&gt;Use Case Description&lt;/b&gt; field, explain that you are requesting an SMS monthly spend limit increase.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DeliveryStatusIAMRole&lt;/code&gt; – The ARN of the IAM role that allows Amazon SNS to write logs about SMS deliveries in CloudWatch Logs. For each SMS message that you send, Amazon SNS writes a log that includes the message price, the success or failure status, the reason for failure (if the message failed), the message dwell time, and other information.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DeliveryStatusSuccessSamplingRate&lt;/code&gt; – The percentage of successful SMS deliveries for which Amazon SNS will write logs in CloudWatch Logs. The value can be an integer from 0 - 100. For example, to write logs only for failed deliveries, set this value to &lt;code&gt;0&lt;/code&gt;. To write logs for 10% of your successful deliveries, set it to &lt;code&gt;10&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DefaultSenderID&lt;/code&gt; – A string, such as your business brand, that is displayed as the sender on the receiving device. Support for sender IDs varies by country. The sender ID can be 1 - 11 alphanumeric characters, and it must contain at least one letter.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DefaultSMSType&lt;/code&gt; – The type of SMS message that you will send by default. You can assign the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Promotional&lt;/code&gt; – (Default) Noncritical messages, such as marketing messages. Amazon SNS optimizes the message delivery to incur the lowest cost.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Transactional&lt;/code&gt; – Critical messages that support customer transactions, such as one-time passcodes for multi-factor authentication. Amazon SNS optimizes the message delivery to achieve the highest reliability.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;code&gt;UsageReportS3Bucket&lt;/code&gt; – The name of the Amazon S3 bucket to receive daily SMS usage reports from Amazon SNS. Each day, Amazon SNS will deliver a usage report as a CSV file to the bucket. The report includes the following information for each SMS message that was successfully delivered by your Amazon Web Services account:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Time that the message was published (in UTC)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Message ID&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Destination phone number&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Message type&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Delivery status&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Message price (in USD)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Part number (a message is split into multiple parts if it is too long for a single message)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Total number of parts&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To receive the report, the bucket must have a policy that allows the Amazon SNS service principal to perform the &lt;code&gt;s3:PutObject&lt;/code&gt; and &lt;code&gt;s3:GetBucketLocation&lt;/code&gt; actions.&lt;/p&gt; &lt;p&gt;For an example bucket policy and usage report, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sms_stats.html\&quot;&gt;Monitoring SMS Activity&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETSetSMSAttributes(Map<String, String> attributes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETSetSMSAttributesWithHttpInfo(attributes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Use this request to set the default settings for sending SMS messages and receiving daily SMS usage reports.&lt;/p&gt; &lt;p&gt;You can override some of these settings for a single message when you use the &lt;code&gt;Publish&lt;/code&gt; action with the &lt;code&gt;MessageAttributes.entry.N&lt;/code&gt; parameter. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sms_publish-to-phone.html\&quot;&gt;Publishing to a mobile phone&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To use this operation, you must grant the Amazon SNS service principal (&lt;code&gt;sns.amazonaws.com&lt;/code&gt;) permission to perform the &lt;code&gt;s3:ListBucket&lt;/code&gt; action. &lt;/p&gt; &lt;/note&gt;
     * @param attributes &lt;p&gt;The default settings for sending SMS messages from your Amazon Web Services account. You can set values for the following attribute names:&lt;/p&gt; &lt;p&gt; &lt;code&gt;MonthlySpendLimit&lt;/code&gt; – The maximum amount in USD that you are willing to spend each month to send SMS messages. When Amazon SNS determines that sending an SMS message would incur a cost that exceeds this limit, it stops sending SMS messages within minutes.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Amazon SNS stops sending SMS messages within minutes of the limit being crossed. During that interval, if you continue to send SMS messages, you will incur costs that exceed your limit.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;By default, the spend limit is set to the maximum allowed by Amazon SNS. If you want to raise the limit, submit an &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/case/create?issueType&#x3D;service-limit-increase&amp;amp;limitType&#x3D;service-code-sns\&quot;&gt;SNS Limit Increase case&lt;/a&gt;. For &lt;b&gt;New limit value&lt;/b&gt;, enter your desired monthly spend limit. In the &lt;b&gt;Use Case Description&lt;/b&gt; field, explain that you are requesting an SMS monthly spend limit increase.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DeliveryStatusIAMRole&lt;/code&gt; – The ARN of the IAM role that allows Amazon SNS to write logs about SMS deliveries in CloudWatch Logs. For each SMS message that you send, Amazon SNS writes a log that includes the message price, the success or failure status, the reason for failure (if the message failed), the message dwell time, and other information.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DeliveryStatusSuccessSamplingRate&lt;/code&gt; – The percentage of successful SMS deliveries for which Amazon SNS will write logs in CloudWatch Logs. The value can be an integer from 0 - 100. For example, to write logs only for failed deliveries, set this value to &lt;code&gt;0&lt;/code&gt;. To write logs for 10% of your successful deliveries, set it to &lt;code&gt;10&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DefaultSenderID&lt;/code&gt; – A string, such as your business brand, that is displayed as the sender on the receiving device. Support for sender IDs varies by country. The sender ID can be 1 - 11 alphanumeric characters, and it must contain at least one letter.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DefaultSMSType&lt;/code&gt; – The type of SMS message that you will send by default. You can assign the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Promotional&lt;/code&gt; – (Default) Noncritical messages, such as marketing messages. Amazon SNS optimizes the message delivery to incur the lowest cost.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Transactional&lt;/code&gt; – Critical messages that support customer transactions, such as one-time passcodes for multi-factor authentication. Amazon SNS optimizes the message delivery to achieve the highest reliability.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;code&gt;UsageReportS3Bucket&lt;/code&gt; – The name of the Amazon S3 bucket to receive daily SMS usage reports from Amazon SNS. Each day, Amazon SNS will deliver a usage report as a CSV file to the bucket. The report includes the following information for each SMS message that was successfully delivered by your Amazon Web Services account:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Time that the message was published (in UTC)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Message ID&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Destination phone number&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Message type&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Delivery status&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Message price (in USD)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Part number (a message is split into multiple parts if it is too long for a single message)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Total number of parts&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To receive the report, the bucket must have a policy that allows the Amazon SNS service principal to perform the &lt;code&gt;s3:PutObject&lt;/code&gt; and &lt;code&gt;s3:GetBucketLocation&lt;/code&gt; actions.&lt;/p&gt; &lt;p&gt;For an example bucket policy and usage report, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sms_stats.html\&quot;&gt;Monitoring SMS Activity&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETSetSMSAttributesWithHttpInfo(Map<String, String> attributes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETSetSMSAttributesValidateBeforeCall(attributes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Use this request to set the default settings for sending SMS messages and receiving daily SMS usage reports.&lt;/p&gt; &lt;p&gt;You can override some of these settings for a single message when you use the &lt;code&gt;Publish&lt;/code&gt; action with the &lt;code&gt;MessageAttributes.entry.N&lt;/code&gt; parameter. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sms_publish-to-phone.html\&quot;&gt;Publishing to a mobile phone&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To use this operation, you must grant the Amazon SNS service principal (&lt;code&gt;sns.amazonaws.com&lt;/code&gt;) permission to perform the &lt;code&gt;s3:ListBucket&lt;/code&gt; action. &lt;/p&gt; &lt;/note&gt;
     * @param attributes &lt;p&gt;The default settings for sending SMS messages from your Amazon Web Services account. You can set values for the following attribute names:&lt;/p&gt; &lt;p&gt; &lt;code&gt;MonthlySpendLimit&lt;/code&gt; – The maximum amount in USD that you are willing to spend each month to send SMS messages. When Amazon SNS determines that sending an SMS message would incur a cost that exceeds this limit, it stops sending SMS messages within minutes.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Amazon SNS stops sending SMS messages within minutes of the limit being crossed. During that interval, if you continue to send SMS messages, you will incur costs that exceed your limit.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;By default, the spend limit is set to the maximum allowed by Amazon SNS. If you want to raise the limit, submit an &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/case/create?issueType&#x3D;service-limit-increase&amp;amp;limitType&#x3D;service-code-sns\&quot;&gt;SNS Limit Increase case&lt;/a&gt;. For &lt;b&gt;New limit value&lt;/b&gt;, enter your desired monthly spend limit. In the &lt;b&gt;Use Case Description&lt;/b&gt; field, explain that you are requesting an SMS monthly spend limit increase.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DeliveryStatusIAMRole&lt;/code&gt; – The ARN of the IAM role that allows Amazon SNS to write logs about SMS deliveries in CloudWatch Logs. For each SMS message that you send, Amazon SNS writes a log that includes the message price, the success or failure status, the reason for failure (if the message failed), the message dwell time, and other information.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DeliveryStatusSuccessSamplingRate&lt;/code&gt; – The percentage of successful SMS deliveries for which Amazon SNS will write logs in CloudWatch Logs. The value can be an integer from 0 - 100. For example, to write logs only for failed deliveries, set this value to &lt;code&gt;0&lt;/code&gt;. To write logs for 10% of your successful deliveries, set it to &lt;code&gt;10&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DefaultSenderID&lt;/code&gt; – A string, such as your business brand, that is displayed as the sender on the receiving device. Support for sender IDs varies by country. The sender ID can be 1 - 11 alphanumeric characters, and it must contain at least one letter.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DefaultSMSType&lt;/code&gt; – The type of SMS message that you will send by default. You can assign the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Promotional&lt;/code&gt; – (Default) Noncritical messages, such as marketing messages. Amazon SNS optimizes the message delivery to incur the lowest cost.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Transactional&lt;/code&gt; – Critical messages that support customer transactions, such as one-time passcodes for multi-factor authentication. Amazon SNS optimizes the message delivery to achieve the highest reliability.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;code&gt;UsageReportS3Bucket&lt;/code&gt; – The name of the Amazon S3 bucket to receive daily SMS usage reports from Amazon SNS. Each day, Amazon SNS will deliver a usage report as a CSV file to the bucket. The report includes the following information for each SMS message that was successfully delivered by your Amazon Web Services account:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Time that the message was published (in UTC)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Message ID&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Destination phone number&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Message type&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Delivery status&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Message price (in USD)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Part number (a message is split into multiple parts if it is too long for a single message)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Total number of parts&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To receive the report, the bucket must have a policy that allows the Amazon SNS service principal to perform the &lt;code&gt;s3:PutObject&lt;/code&gt; and &lt;code&gt;s3:GetBucketLocation&lt;/code&gt; actions.&lt;/p&gt; &lt;p&gt;For an example bucket policy and usage report, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sms_stats.html\&quot;&gt;Monitoring SMS Activity&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetSMSAttributesAsync(Map<String, String> attributes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETSetSMSAttributesValidateBeforeCall(attributes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETSetSubscriptionAttributes
     * @param subscriptionArn The ARN of the subscription to modify. (required)
     * @param attributeName &lt;p&gt;A map of attributes with their corresponding values.&lt;/p&gt; &lt;p&gt;The following lists the names, descriptions, and values of the special request parameters that this action uses:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DeliveryPolicy&lt;/code&gt; – The policy that defines how Amazon SNS retries failed deliveries to HTTP/S endpoints.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FilterPolicy&lt;/code&gt; – The simple JSON object that lets your subscriber receive only a subset of messages, rather than receiving every message published to the topic.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FilterPolicyScope&lt;/code&gt; – This attribute lets you choose the filtering scope by using one of the following string value types:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MessageAttributes&lt;/code&gt; (default) – The filter is applied on the message attributes.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MessageBody&lt;/code&gt; – The filter is applied on the message body.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RawMessageDelivery&lt;/code&gt; – When set to &lt;code&gt;true&lt;/code&gt;, enables raw message delivery to Amazon SQS or HTTP/S endpoints. This eliminates the need for the endpoints to process JSON formatting, which is otherwise created for Amazon SNS metadata.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RedrivePolicy&lt;/code&gt; – When specified, sends undeliverable messages to the specified Amazon SQS dead-letter queue. Messages that can&#39;t be delivered due to client errors (for example, when the subscribed endpoint is unreachable) or server errors (for example, when the service that powers the subscribed endpoint becomes unavailable) are held in the dead-letter queue for further analysis or reprocessing.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attribute applies only to Amazon Kinesis Data Firehose delivery stream subscriptions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SubscriptionRoleArn&lt;/code&gt; – The ARN of the IAM role that has the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Permission to write to the Kinesis Data Firehose delivery stream&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon SNS listed as a trusted entity&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Specifying a valid ARN for this attribute is required for Kinesis Data Firehose delivery stream subscriptions. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-firehose-as-subscriber.html\&quot;&gt;Fanout to Kinesis Data Firehose delivery streams&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attributeValue The new value for the attribute in JSON format. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FilterPolicyLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetSubscriptionAttributesCall(String subscriptionArn, String attributeName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String attributeValue, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=SetSubscriptionAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subscriptionArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SubscriptionArn", subscriptionArn));
        }

        if (attributeName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AttributeName", attributeName));
        }

        if (attributeValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AttributeValue", attributeValue));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETSetSubscriptionAttributesValidateBeforeCall(String subscriptionArn, String attributeName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String attributeValue, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionArn' is set
        if (subscriptionArn == null) {
            throw new ApiException("Missing the required parameter 'subscriptionArn' when calling gETSetSubscriptionAttributes(Async)");
        }

        // verify the required parameter 'attributeName' is set
        if (attributeName == null) {
            throw new ApiException("Missing the required parameter 'attributeName' when calling gETSetSubscriptionAttributes(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETSetSubscriptionAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETSetSubscriptionAttributes(Async)");
        }

        return gETSetSubscriptionAttributesCall(subscriptionArn, attributeName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attributeValue, _callback);

    }

    /**
     * 
     * Allows a subscription owner to set an attribute of the subscription to a new value.
     * @param subscriptionArn The ARN of the subscription to modify. (required)
     * @param attributeName &lt;p&gt;A map of attributes with their corresponding values.&lt;/p&gt; &lt;p&gt;The following lists the names, descriptions, and values of the special request parameters that this action uses:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DeliveryPolicy&lt;/code&gt; – The policy that defines how Amazon SNS retries failed deliveries to HTTP/S endpoints.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FilterPolicy&lt;/code&gt; – The simple JSON object that lets your subscriber receive only a subset of messages, rather than receiving every message published to the topic.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FilterPolicyScope&lt;/code&gt; – This attribute lets you choose the filtering scope by using one of the following string value types:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MessageAttributes&lt;/code&gt; (default) – The filter is applied on the message attributes.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MessageBody&lt;/code&gt; – The filter is applied on the message body.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RawMessageDelivery&lt;/code&gt; – When set to &lt;code&gt;true&lt;/code&gt;, enables raw message delivery to Amazon SQS or HTTP/S endpoints. This eliminates the need for the endpoints to process JSON formatting, which is otherwise created for Amazon SNS metadata.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RedrivePolicy&lt;/code&gt; – When specified, sends undeliverable messages to the specified Amazon SQS dead-letter queue. Messages that can&#39;t be delivered due to client errors (for example, when the subscribed endpoint is unreachable) or server errors (for example, when the service that powers the subscribed endpoint becomes unavailable) are held in the dead-letter queue for further analysis or reprocessing.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attribute applies only to Amazon Kinesis Data Firehose delivery stream subscriptions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SubscriptionRoleArn&lt;/code&gt; – The ARN of the IAM role that has the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Permission to write to the Kinesis Data Firehose delivery stream&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon SNS listed as a trusted entity&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Specifying a valid ARN for this attribute is required for Kinesis Data Firehose delivery stream subscriptions. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-firehose-as-subscriber.html\&quot;&gt;Fanout to Kinesis Data Firehose delivery streams&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attributeValue The new value for the attribute in JSON format. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FilterPolicyLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public void gETSetSubscriptionAttributes(String subscriptionArn, String attributeName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String attributeValue) throws ApiException {
        gETSetSubscriptionAttributesWithHttpInfo(subscriptionArn, attributeName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attributeValue);
    }

    /**
     * 
     * Allows a subscription owner to set an attribute of the subscription to a new value.
     * @param subscriptionArn The ARN of the subscription to modify. (required)
     * @param attributeName &lt;p&gt;A map of attributes with their corresponding values.&lt;/p&gt; &lt;p&gt;The following lists the names, descriptions, and values of the special request parameters that this action uses:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DeliveryPolicy&lt;/code&gt; – The policy that defines how Amazon SNS retries failed deliveries to HTTP/S endpoints.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FilterPolicy&lt;/code&gt; – The simple JSON object that lets your subscriber receive only a subset of messages, rather than receiving every message published to the topic.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FilterPolicyScope&lt;/code&gt; – This attribute lets you choose the filtering scope by using one of the following string value types:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MessageAttributes&lt;/code&gt; (default) – The filter is applied on the message attributes.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MessageBody&lt;/code&gt; – The filter is applied on the message body.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RawMessageDelivery&lt;/code&gt; – When set to &lt;code&gt;true&lt;/code&gt;, enables raw message delivery to Amazon SQS or HTTP/S endpoints. This eliminates the need for the endpoints to process JSON formatting, which is otherwise created for Amazon SNS metadata.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RedrivePolicy&lt;/code&gt; – When specified, sends undeliverable messages to the specified Amazon SQS dead-letter queue. Messages that can&#39;t be delivered due to client errors (for example, when the subscribed endpoint is unreachable) or server errors (for example, when the service that powers the subscribed endpoint becomes unavailable) are held in the dead-letter queue for further analysis or reprocessing.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attribute applies only to Amazon Kinesis Data Firehose delivery stream subscriptions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SubscriptionRoleArn&lt;/code&gt; – The ARN of the IAM role that has the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Permission to write to the Kinesis Data Firehose delivery stream&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon SNS listed as a trusted entity&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Specifying a valid ARN for this attribute is required for Kinesis Data Firehose delivery stream subscriptions. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-firehose-as-subscriber.html\&quot;&gt;Fanout to Kinesis Data Firehose delivery streams&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attributeValue The new value for the attribute in JSON format. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FilterPolicyLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETSetSubscriptionAttributesWithHttpInfo(String subscriptionArn, String attributeName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String attributeValue) throws ApiException {
        okhttp3.Call localVarCall = gETSetSubscriptionAttributesValidateBeforeCall(subscriptionArn, attributeName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attributeValue, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Allows a subscription owner to set an attribute of the subscription to a new value.
     * @param subscriptionArn The ARN of the subscription to modify. (required)
     * @param attributeName &lt;p&gt;A map of attributes with their corresponding values.&lt;/p&gt; &lt;p&gt;The following lists the names, descriptions, and values of the special request parameters that this action uses:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DeliveryPolicy&lt;/code&gt; – The policy that defines how Amazon SNS retries failed deliveries to HTTP/S endpoints.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FilterPolicy&lt;/code&gt; – The simple JSON object that lets your subscriber receive only a subset of messages, rather than receiving every message published to the topic.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FilterPolicyScope&lt;/code&gt; – This attribute lets you choose the filtering scope by using one of the following string value types:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MessageAttributes&lt;/code&gt; (default) – The filter is applied on the message attributes.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MessageBody&lt;/code&gt; – The filter is applied on the message body.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RawMessageDelivery&lt;/code&gt; – When set to &lt;code&gt;true&lt;/code&gt;, enables raw message delivery to Amazon SQS or HTTP/S endpoints. This eliminates the need for the endpoints to process JSON formatting, which is otherwise created for Amazon SNS metadata.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RedrivePolicy&lt;/code&gt; – When specified, sends undeliverable messages to the specified Amazon SQS dead-letter queue. Messages that can&#39;t be delivered due to client errors (for example, when the subscribed endpoint is unreachable) or server errors (for example, when the service that powers the subscribed endpoint becomes unavailable) are held in the dead-letter queue for further analysis or reprocessing.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attribute applies only to Amazon Kinesis Data Firehose delivery stream subscriptions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SubscriptionRoleArn&lt;/code&gt; – The ARN of the IAM role that has the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Permission to write to the Kinesis Data Firehose delivery stream&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon SNS listed as a trusted entity&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Specifying a valid ARN for this attribute is required for Kinesis Data Firehose delivery stream subscriptions. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-firehose-as-subscriber.html\&quot;&gt;Fanout to Kinesis Data Firehose delivery streams&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attributeValue The new value for the attribute in JSON format. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FilterPolicyLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetSubscriptionAttributesAsync(String subscriptionArn, String attributeName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String attributeValue, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETSetSubscriptionAttributesValidateBeforeCall(subscriptionArn, attributeName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attributeValue, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETSetTopicAttributes
     * @param topicArn The ARN of the topic to modify. (required)
     * @param attributeName &lt;p&gt;A map of attributes with their corresponding values.&lt;/p&gt; &lt;p&gt;The following lists the names, descriptions, and values of the special request parameters that the &lt;code&gt;SetTopicAttributes&lt;/code&gt; action uses:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApplicationSuccessFeedbackRoleArn&lt;/code&gt; – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to a platform application endpoint.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DeliveryPolicy&lt;/code&gt; – The policy that defines how Amazon SNS retries failed deliveries to HTTP/S endpoints.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DisplayName&lt;/code&gt; – The display name to use for a topic with SMS subscriptions.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Policy&lt;/code&gt; – The policy that defines who can access your topic. By default, only the topic owner can publish or subscribe to the topic.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TracingConfig&lt;/code&gt; – Tracing mode of an Amazon SNS topic. By default &lt;code&gt;TracingConfig&lt;/code&gt; is set to &lt;code&gt;PassThrough&lt;/code&gt;, and the topic passes through the tracing header it receives from an Amazon SNS publisher to its subscriptions. If set to &lt;code&gt;Active&lt;/code&gt;, Amazon SNS will vend X-Ray segment data to topic owner account if the sampled flag in the tracing header is true. This is only supported on standard topics.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;HTTP&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTPSuccessFeedbackRoleArn&lt;/code&gt; – Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an HTTP endpoint. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTPSuccessFeedbackSampleRate&lt;/code&gt; – Indicates percentage of successful messages to sample for an Amazon SNS topic that is subscribed to an HTTP endpoint.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTPFailureFeedbackRoleArn&lt;/code&gt; – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an HTTP endpoint.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon Kinesis Data Firehose&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FirehoseSuccessFeedbackRoleArn&lt;/code&gt; – Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an Amazon Kinesis Data Firehose endpoint.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FirehoseSuccessFeedbackSampleRate&lt;/code&gt; – Indicates percentage of successful messages to sample for an Amazon SNS topic that is subscribed to an Amazon Kinesis Data Firehose endpoint.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FirehoseFailureFeedbackRoleArn&lt;/code&gt; – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an Amazon Kinesis Data Firehose endpoint. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Lambda&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LambdaSuccessFeedbackRoleArn&lt;/code&gt; – Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an Lambda endpoint.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LambdaSuccessFeedbackSampleRate&lt;/code&gt; – Indicates percentage of successful messages to sample for an Amazon SNS topic that is subscribed to an Lambda endpoint.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LambdaFailureFeedbackRoleArn&lt;/code&gt; – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an Lambda endpoint. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Platform application endpoint&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApplicationSuccessFeedbackRoleArn&lt;/code&gt; – Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an Amazon Web Services application endpoint.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApplicationSuccessFeedbackSampleRate&lt;/code&gt; – Indicates percentage of successful messages to sample for an Amazon SNS topic that is subscribed to an Amazon Web Services application endpoint.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApplicationFailureFeedbackRoleArn&lt;/code&gt; – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an Amazon Web Services application endpoint.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;In addition to being able to configure topic attributes for message delivery status of notification messages sent to Amazon SNS application endpoints, you can also configure application attributes for the delivery status of push notification messages sent to push notification services.&lt;/p&gt; &lt;p&gt;For example, For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-msg-status.html\&quot;&gt;Using Amazon SNS Application Attributes for Message Delivery Status&lt;/a&gt;. &lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon SQS&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SQSSuccessFeedbackRoleArn&lt;/code&gt; – Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an Amazon SQS endpoint. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SQSSuccessFeedbackSampleRate&lt;/code&gt; – Indicates percentage of successful messages to sample for an Amazon SNS topic that is subscribed to an Amazon SQS endpoint. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SQSFailureFeedbackRoleArn&lt;/code&gt; – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an Amazon SQS endpoint. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The &amp;lt;ENDPOINT&amp;gt;SuccessFeedbackRoleArn and &amp;lt;ENDPOINT&amp;gt;FailureFeedbackRoleArn attributes are used to give Amazon SNS write access to use CloudWatch Logs on your behalf. The &amp;lt;ENDPOINT&amp;gt;SuccessFeedbackSampleRate attribute is for specifying the sample rate percentage (0-100) of successfully delivered messages. After you configure the &amp;lt;ENDPOINT&amp;gt;FailureFeedbackRoleArn attribute, then all failed message deliveries generate CloudWatch Logs. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;The following attribute applies only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html\&quot;&gt;server-side-encryption&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KmsMasterKeyId&lt;/code&gt; – The ID of an Amazon Web Services managed customer master key (CMK) for Amazon SNS or a custom CMK. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html#sse-key-terms\&quot;&gt;Key Terms&lt;/a&gt;. For more examples, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters\&quot;&gt;KeyId&lt;/a&gt; in the &lt;i&gt;Key Management Service API Reference&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SignatureVersion&lt;/code&gt; – The signature version corresponds to the hashing algorithm used while creating the signature of the notifications, subscription confirmations, or unsubscribe confirmation messages sent by Amazon SNS. By default, &lt;code&gt;SignatureVersion&lt;/code&gt; is set to &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attribute applies only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-fifo-topics.html\&quot;&gt;FIFO topics&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; – Enables content-based deduplication for FIFO topics.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;By default, &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;. If you create a FIFO topic and this attribute is &lt;code&gt;false&lt;/code&gt;, you must specify a value for the &lt;code&gt;MessageDeduplicationId&lt;/code&gt; parameter for the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/api/API_Publish.html\&quot;&gt;Publish&lt;/a&gt; action. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When you set &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, Amazon SNS uses a SHA-256 hash to generate the &lt;code&gt;MessageDeduplicationId&lt;/code&gt; using the body of the message (but not the attributes of the message).&lt;/p&gt; &lt;p&gt;(Optional) To override the generated value, you can specify a value for the &lt;code&gt;MessageDeduplicationId&lt;/code&gt; parameter for the &lt;code&gt;Publish&lt;/code&gt; action.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attributeValue The new value for the attribute. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetTopicAttributesCall(String topicArn, String attributeName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String attributeValue, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=SetTopicAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (topicArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TopicArn", topicArn));
        }

        if (attributeName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AttributeName", attributeName));
        }

        if (attributeValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AttributeValue", attributeValue));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETSetTopicAttributesValidateBeforeCall(String topicArn, String attributeName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String attributeValue, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'topicArn' is set
        if (topicArn == null) {
            throw new ApiException("Missing the required parameter 'topicArn' when calling gETSetTopicAttributes(Async)");
        }

        // verify the required parameter 'attributeName' is set
        if (attributeName == null) {
            throw new ApiException("Missing the required parameter 'attributeName' when calling gETSetTopicAttributes(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETSetTopicAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETSetTopicAttributes(Async)");
        }

        return gETSetTopicAttributesCall(topicArn, attributeName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attributeValue, _callback);

    }

    /**
     * 
     * &lt;p&gt;Allows a topic owner to set an attribute of the topic to a new value.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To remove the ability to change topic permissions, you must deny permissions to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetTopicAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/note&gt;
     * @param topicArn The ARN of the topic to modify. (required)
     * @param attributeName &lt;p&gt;A map of attributes with their corresponding values.&lt;/p&gt; &lt;p&gt;The following lists the names, descriptions, and values of the special request parameters that the &lt;code&gt;SetTopicAttributes&lt;/code&gt; action uses:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApplicationSuccessFeedbackRoleArn&lt;/code&gt; – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to a platform application endpoint.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DeliveryPolicy&lt;/code&gt; – The policy that defines how Amazon SNS retries failed deliveries to HTTP/S endpoints.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DisplayName&lt;/code&gt; – The display name to use for a topic with SMS subscriptions.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Policy&lt;/code&gt; – The policy that defines who can access your topic. By default, only the topic owner can publish or subscribe to the topic.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TracingConfig&lt;/code&gt; – Tracing mode of an Amazon SNS topic. By default &lt;code&gt;TracingConfig&lt;/code&gt; is set to &lt;code&gt;PassThrough&lt;/code&gt;, and the topic passes through the tracing header it receives from an Amazon SNS publisher to its subscriptions. If set to &lt;code&gt;Active&lt;/code&gt;, Amazon SNS will vend X-Ray segment data to topic owner account if the sampled flag in the tracing header is true. This is only supported on standard topics.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;HTTP&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTPSuccessFeedbackRoleArn&lt;/code&gt; – Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an HTTP endpoint. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTPSuccessFeedbackSampleRate&lt;/code&gt; – Indicates percentage of successful messages to sample for an Amazon SNS topic that is subscribed to an HTTP endpoint.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTPFailureFeedbackRoleArn&lt;/code&gt; – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an HTTP endpoint.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon Kinesis Data Firehose&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FirehoseSuccessFeedbackRoleArn&lt;/code&gt; – Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an Amazon Kinesis Data Firehose endpoint.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FirehoseSuccessFeedbackSampleRate&lt;/code&gt; – Indicates percentage of successful messages to sample for an Amazon SNS topic that is subscribed to an Amazon Kinesis Data Firehose endpoint.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FirehoseFailureFeedbackRoleArn&lt;/code&gt; – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an Amazon Kinesis Data Firehose endpoint. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Lambda&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LambdaSuccessFeedbackRoleArn&lt;/code&gt; – Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an Lambda endpoint.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LambdaSuccessFeedbackSampleRate&lt;/code&gt; – Indicates percentage of successful messages to sample for an Amazon SNS topic that is subscribed to an Lambda endpoint.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LambdaFailureFeedbackRoleArn&lt;/code&gt; – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an Lambda endpoint. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Platform application endpoint&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApplicationSuccessFeedbackRoleArn&lt;/code&gt; – Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an Amazon Web Services application endpoint.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApplicationSuccessFeedbackSampleRate&lt;/code&gt; – Indicates percentage of successful messages to sample for an Amazon SNS topic that is subscribed to an Amazon Web Services application endpoint.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApplicationFailureFeedbackRoleArn&lt;/code&gt; – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an Amazon Web Services application endpoint.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;In addition to being able to configure topic attributes for message delivery status of notification messages sent to Amazon SNS application endpoints, you can also configure application attributes for the delivery status of push notification messages sent to push notification services.&lt;/p&gt; &lt;p&gt;For example, For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-msg-status.html\&quot;&gt;Using Amazon SNS Application Attributes for Message Delivery Status&lt;/a&gt;. &lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon SQS&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SQSSuccessFeedbackRoleArn&lt;/code&gt; – Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an Amazon SQS endpoint. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SQSSuccessFeedbackSampleRate&lt;/code&gt; – Indicates percentage of successful messages to sample for an Amazon SNS topic that is subscribed to an Amazon SQS endpoint. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SQSFailureFeedbackRoleArn&lt;/code&gt; – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an Amazon SQS endpoint. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The &amp;lt;ENDPOINT&amp;gt;SuccessFeedbackRoleArn and &amp;lt;ENDPOINT&amp;gt;FailureFeedbackRoleArn attributes are used to give Amazon SNS write access to use CloudWatch Logs on your behalf. The &amp;lt;ENDPOINT&amp;gt;SuccessFeedbackSampleRate attribute is for specifying the sample rate percentage (0-100) of successfully delivered messages. After you configure the &amp;lt;ENDPOINT&amp;gt;FailureFeedbackRoleArn attribute, then all failed message deliveries generate CloudWatch Logs. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;The following attribute applies only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html\&quot;&gt;server-side-encryption&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KmsMasterKeyId&lt;/code&gt; – The ID of an Amazon Web Services managed customer master key (CMK) for Amazon SNS or a custom CMK. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html#sse-key-terms\&quot;&gt;Key Terms&lt;/a&gt;. For more examples, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters\&quot;&gt;KeyId&lt;/a&gt; in the &lt;i&gt;Key Management Service API Reference&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SignatureVersion&lt;/code&gt; – The signature version corresponds to the hashing algorithm used while creating the signature of the notifications, subscription confirmations, or unsubscribe confirmation messages sent by Amazon SNS. By default, &lt;code&gt;SignatureVersion&lt;/code&gt; is set to &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attribute applies only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-fifo-topics.html\&quot;&gt;FIFO topics&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; – Enables content-based deduplication for FIFO topics.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;By default, &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;. If you create a FIFO topic and this attribute is &lt;code&gt;false&lt;/code&gt;, you must specify a value for the &lt;code&gt;MessageDeduplicationId&lt;/code&gt; parameter for the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/api/API_Publish.html\&quot;&gt;Publish&lt;/a&gt; action. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When you set &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, Amazon SNS uses a SHA-256 hash to generate the &lt;code&gt;MessageDeduplicationId&lt;/code&gt; using the body of the message (but not the attributes of the message).&lt;/p&gt; &lt;p&gt;(Optional) To override the generated value, you can specify a value for the &lt;code&gt;MessageDeduplicationId&lt;/code&gt; parameter for the &lt;code&gt;Publish&lt;/code&gt; action.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attributeValue The new value for the attribute. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public void gETSetTopicAttributes(String topicArn, String attributeName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String attributeValue) throws ApiException {
        gETSetTopicAttributesWithHttpInfo(topicArn, attributeName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attributeValue);
    }

    /**
     * 
     * &lt;p&gt;Allows a topic owner to set an attribute of the topic to a new value.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To remove the ability to change topic permissions, you must deny permissions to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetTopicAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/note&gt;
     * @param topicArn The ARN of the topic to modify. (required)
     * @param attributeName &lt;p&gt;A map of attributes with their corresponding values.&lt;/p&gt; &lt;p&gt;The following lists the names, descriptions, and values of the special request parameters that the &lt;code&gt;SetTopicAttributes&lt;/code&gt; action uses:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApplicationSuccessFeedbackRoleArn&lt;/code&gt; – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to a platform application endpoint.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DeliveryPolicy&lt;/code&gt; – The policy that defines how Amazon SNS retries failed deliveries to HTTP/S endpoints.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DisplayName&lt;/code&gt; – The display name to use for a topic with SMS subscriptions.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Policy&lt;/code&gt; – The policy that defines who can access your topic. By default, only the topic owner can publish or subscribe to the topic.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TracingConfig&lt;/code&gt; – Tracing mode of an Amazon SNS topic. By default &lt;code&gt;TracingConfig&lt;/code&gt; is set to &lt;code&gt;PassThrough&lt;/code&gt;, and the topic passes through the tracing header it receives from an Amazon SNS publisher to its subscriptions. If set to &lt;code&gt;Active&lt;/code&gt;, Amazon SNS will vend X-Ray segment data to topic owner account if the sampled flag in the tracing header is true. This is only supported on standard topics.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;HTTP&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTPSuccessFeedbackRoleArn&lt;/code&gt; – Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an HTTP endpoint. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTPSuccessFeedbackSampleRate&lt;/code&gt; – Indicates percentage of successful messages to sample for an Amazon SNS topic that is subscribed to an HTTP endpoint.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTPFailureFeedbackRoleArn&lt;/code&gt; – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an HTTP endpoint.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon Kinesis Data Firehose&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FirehoseSuccessFeedbackRoleArn&lt;/code&gt; – Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an Amazon Kinesis Data Firehose endpoint.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FirehoseSuccessFeedbackSampleRate&lt;/code&gt; – Indicates percentage of successful messages to sample for an Amazon SNS topic that is subscribed to an Amazon Kinesis Data Firehose endpoint.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FirehoseFailureFeedbackRoleArn&lt;/code&gt; – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an Amazon Kinesis Data Firehose endpoint. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Lambda&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LambdaSuccessFeedbackRoleArn&lt;/code&gt; – Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an Lambda endpoint.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LambdaSuccessFeedbackSampleRate&lt;/code&gt; – Indicates percentage of successful messages to sample for an Amazon SNS topic that is subscribed to an Lambda endpoint.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LambdaFailureFeedbackRoleArn&lt;/code&gt; – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an Lambda endpoint. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Platform application endpoint&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApplicationSuccessFeedbackRoleArn&lt;/code&gt; – Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an Amazon Web Services application endpoint.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApplicationSuccessFeedbackSampleRate&lt;/code&gt; – Indicates percentage of successful messages to sample for an Amazon SNS topic that is subscribed to an Amazon Web Services application endpoint.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApplicationFailureFeedbackRoleArn&lt;/code&gt; – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an Amazon Web Services application endpoint.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;In addition to being able to configure topic attributes for message delivery status of notification messages sent to Amazon SNS application endpoints, you can also configure application attributes for the delivery status of push notification messages sent to push notification services.&lt;/p&gt; &lt;p&gt;For example, For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-msg-status.html\&quot;&gt;Using Amazon SNS Application Attributes for Message Delivery Status&lt;/a&gt;. &lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon SQS&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SQSSuccessFeedbackRoleArn&lt;/code&gt; – Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an Amazon SQS endpoint. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SQSSuccessFeedbackSampleRate&lt;/code&gt; – Indicates percentage of successful messages to sample for an Amazon SNS topic that is subscribed to an Amazon SQS endpoint. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SQSFailureFeedbackRoleArn&lt;/code&gt; – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an Amazon SQS endpoint. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The &amp;lt;ENDPOINT&amp;gt;SuccessFeedbackRoleArn and &amp;lt;ENDPOINT&amp;gt;FailureFeedbackRoleArn attributes are used to give Amazon SNS write access to use CloudWatch Logs on your behalf. The &amp;lt;ENDPOINT&amp;gt;SuccessFeedbackSampleRate attribute is for specifying the sample rate percentage (0-100) of successfully delivered messages. After you configure the &amp;lt;ENDPOINT&amp;gt;FailureFeedbackRoleArn attribute, then all failed message deliveries generate CloudWatch Logs. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;The following attribute applies only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html\&quot;&gt;server-side-encryption&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KmsMasterKeyId&lt;/code&gt; – The ID of an Amazon Web Services managed customer master key (CMK) for Amazon SNS or a custom CMK. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html#sse-key-terms\&quot;&gt;Key Terms&lt;/a&gt;. For more examples, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters\&quot;&gt;KeyId&lt;/a&gt; in the &lt;i&gt;Key Management Service API Reference&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SignatureVersion&lt;/code&gt; – The signature version corresponds to the hashing algorithm used while creating the signature of the notifications, subscription confirmations, or unsubscribe confirmation messages sent by Amazon SNS. By default, &lt;code&gt;SignatureVersion&lt;/code&gt; is set to &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attribute applies only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-fifo-topics.html\&quot;&gt;FIFO topics&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; – Enables content-based deduplication for FIFO topics.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;By default, &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;. If you create a FIFO topic and this attribute is &lt;code&gt;false&lt;/code&gt;, you must specify a value for the &lt;code&gt;MessageDeduplicationId&lt;/code&gt; parameter for the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/api/API_Publish.html\&quot;&gt;Publish&lt;/a&gt; action. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When you set &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, Amazon SNS uses a SHA-256 hash to generate the &lt;code&gt;MessageDeduplicationId&lt;/code&gt; using the body of the message (but not the attributes of the message).&lt;/p&gt; &lt;p&gt;(Optional) To override the generated value, you can specify a value for the &lt;code&gt;MessageDeduplicationId&lt;/code&gt; parameter for the &lt;code&gt;Publish&lt;/code&gt; action.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attributeValue The new value for the attribute. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETSetTopicAttributesWithHttpInfo(String topicArn, String attributeName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String attributeValue) throws ApiException {
        okhttp3.Call localVarCall = gETSetTopicAttributesValidateBeforeCall(topicArn, attributeName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attributeValue, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Allows a topic owner to set an attribute of the topic to a new value.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To remove the ability to change topic permissions, you must deny permissions to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetTopicAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/note&gt;
     * @param topicArn The ARN of the topic to modify. (required)
     * @param attributeName &lt;p&gt;A map of attributes with their corresponding values.&lt;/p&gt; &lt;p&gt;The following lists the names, descriptions, and values of the special request parameters that the &lt;code&gt;SetTopicAttributes&lt;/code&gt; action uses:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApplicationSuccessFeedbackRoleArn&lt;/code&gt; – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to a platform application endpoint.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DeliveryPolicy&lt;/code&gt; – The policy that defines how Amazon SNS retries failed deliveries to HTTP/S endpoints.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DisplayName&lt;/code&gt; – The display name to use for a topic with SMS subscriptions.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Policy&lt;/code&gt; – The policy that defines who can access your topic. By default, only the topic owner can publish or subscribe to the topic.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TracingConfig&lt;/code&gt; – Tracing mode of an Amazon SNS topic. By default &lt;code&gt;TracingConfig&lt;/code&gt; is set to &lt;code&gt;PassThrough&lt;/code&gt;, and the topic passes through the tracing header it receives from an Amazon SNS publisher to its subscriptions. If set to &lt;code&gt;Active&lt;/code&gt;, Amazon SNS will vend X-Ray segment data to topic owner account if the sampled flag in the tracing header is true. This is only supported on standard topics.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;HTTP&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTPSuccessFeedbackRoleArn&lt;/code&gt; – Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an HTTP endpoint. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTPSuccessFeedbackSampleRate&lt;/code&gt; – Indicates percentage of successful messages to sample for an Amazon SNS topic that is subscribed to an HTTP endpoint.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HTTPFailureFeedbackRoleArn&lt;/code&gt; – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an HTTP endpoint.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon Kinesis Data Firehose&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FirehoseSuccessFeedbackRoleArn&lt;/code&gt; – Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an Amazon Kinesis Data Firehose endpoint.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FirehoseSuccessFeedbackSampleRate&lt;/code&gt; – Indicates percentage of successful messages to sample for an Amazon SNS topic that is subscribed to an Amazon Kinesis Data Firehose endpoint.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FirehoseFailureFeedbackRoleArn&lt;/code&gt; – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an Amazon Kinesis Data Firehose endpoint. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Lambda&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LambdaSuccessFeedbackRoleArn&lt;/code&gt; – Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an Lambda endpoint.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LambdaSuccessFeedbackSampleRate&lt;/code&gt; – Indicates percentage of successful messages to sample for an Amazon SNS topic that is subscribed to an Lambda endpoint.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LambdaFailureFeedbackRoleArn&lt;/code&gt; – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an Lambda endpoint. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Platform application endpoint&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApplicationSuccessFeedbackRoleArn&lt;/code&gt; – Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an Amazon Web Services application endpoint.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApplicationSuccessFeedbackSampleRate&lt;/code&gt; – Indicates percentage of successful messages to sample for an Amazon SNS topic that is subscribed to an Amazon Web Services application endpoint.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApplicationFailureFeedbackRoleArn&lt;/code&gt; – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an Amazon Web Services application endpoint.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;In addition to being able to configure topic attributes for message delivery status of notification messages sent to Amazon SNS application endpoints, you can also configure application attributes for the delivery status of push notification messages sent to push notification services.&lt;/p&gt; &lt;p&gt;For example, For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-msg-status.html\&quot;&gt;Using Amazon SNS Application Attributes for Message Delivery Status&lt;/a&gt;. &lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon SQS&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SQSSuccessFeedbackRoleArn&lt;/code&gt; – Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an Amazon SQS endpoint. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SQSSuccessFeedbackSampleRate&lt;/code&gt; – Indicates percentage of successful messages to sample for an Amazon SNS topic that is subscribed to an Amazon SQS endpoint. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SQSFailureFeedbackRoleArn&lt;/code&gt; – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an Amazon SQS endpoint. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The &amp;lt;ENDPOINT&amp;gt;SuccessFeedbackRoleArn and &amp;lt;ENDPOINT&amp;gt;FailureFeedbackRoleArn attributes are used to give Amazon SNS write access to use CloudWatch Logs on your behalf. The &amp;lt;ENDPOINT&amp;gt;SuccessFeedbackSampleRate attribute is for specifying the sample rate percentage (0-100) of successfully delivered messages. After you configure the &amp;lt;ENDPOINT&amp;gt;FailureFeedbackRoleArn attribute, then all failed message deliveries generate CloudWatch Logs. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;The following attribute applies only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html\&quot;&gt;server-side-encryption&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KmsMasterKeyId&lt;/code&gt; – The ID of an Amazon Web Services managed customer master key (CMK) for Amazon SNS or a custom CMK. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html#sse-key-terms\&quot;&gt;Key Terms&lt;/a&gt;. For more examples, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters\&quot;&gt;KeyId&lt;/a&gt; in the &lt;i&gt;Key Management Service API Reference&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SignatureVersion&lt;/code&gt; – The signature version corresponds to the hashing algorithm used while creating the signature of the notifications, subscription confirmations, or unsubscribe confirmation messages sent by Amazon SNS. By default, &lt;code&gt;SignatureVersion&lt;/code&gt; is set to &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attribute applies only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-fifo-topics.html\&quot;&gt;FIFO topics&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; – Enables content-based deduplication for FIFO topics.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;By default, &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;. If you create a FIFO topic and this attribute is &lt;code&gt;false&lt;/code&gt;, you must specify a value for the &lt;code&gt;MessageDeduplicationId&lt;/code&gt; parameter for the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/api/API_Publish.html\&quot;&gt;Publish&lt;/a&gt; action. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When you set &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, Amazon SNS uses a SHA-256 hash to generate the &lt;code&gt;MessageDeduplicationId&lt;/code&gt; using the body of the message (but not the attributes of the message).&lt;/p&gt; &lt;p&gt;(Optional) To override the generated value, you can specify a value for the &lt;code&gt;MessageDeduplicationId&lt;/code&gt; parameter for the &lt;code&gt;Publish&lt;/code&gt; action.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attributeValue The new value for the attribute. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetTopicAttributesAsync(String topicArn, String attributeName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String attributeValue, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETSetTopicAttributesValidateBeforeCall(topicArn, attributeName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attributeValue, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETSubscribe
     * @param topicArn The ARN of the topic you want to subscribe to. (required)
     * @param protocol &lt;p&gt;The protocol that you want to use. Supported protocols include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;http&lt;/code&gt; – delivery of JSON-encoded message via HTTP POST&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;https&lt;/code&gt; – delivery of JSON-encoded message via HTTPS POST&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;email&lt;/code&gt; – delivery of message via SMTP&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;email-json&lt;/code&gt; – delivery of JSON-encoded message via SMTP&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sms&lt;/code&gt; – delivery of message via SMS&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sqs&lt;/code&gt; – delivery of JSON-encoded message to an Amazon SQS queue&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;application&lt;/code&gt; – delivery of JSON-encoded message to an EndpointArn for a mobile app and device&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;lambda&lt;/code&gt; – delivery of JSON-encoded message to an Lambda function&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;firehose&lt;/code&gt; – delivery of JSON-encoded message to an Amazon Kinesis Data Firehose delivery stream.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param endpoint &lt;p&gt;The endpoint that you want to receive notifications. Endpoints vary by protocol:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For the &lt;code&gt;http&lt;/code&gt; protocol, the (public) endpoint is a URL beginning with &lt;code&gt;http://&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For the &lt;code&gt;https&lt;/code&gt; protocol, the (public) endpoint is a URL beginning with &lt;code&gt;https://&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For the &lt;code&gt;email&lt;/code&gt; protocol, the endpoint is an email address.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For the &lt;code&gt;email-json&lt;/code&gt; protocol, the endpoint is an email address.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For the &lt;code&gt;sms&lt;/code&gt; protocol, the endpoint is a phone number of an SMS-enabled device.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For the &lt;code&gt;sqs&lt;/code&gt; protocol, the endpoint is the ARN of an Amazon SQS queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For the &lt;code&gt;application&lt;/code&gt; protocol, the endpoint is the EndpointArn of a mobile app and device.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For the &lt;code&gt;lambda&lt;/code&gt; protocol, the endpoint is the ARN of an Lambda function.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For the &lt;code&gt;firehose&lt;/code&gt; protocol, the endpoint is the ARN of an Amazon Kinesis Data Firehose delivery stream.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param attributes &lt;p&gt;A map of attributes with their corresponding values.&lt;/p&gt; &lt;p&gt;The following lists the names, descriptions, and values of the special request parameters that the &lt;code&gt;Subscribe&lt;/code&gt; action uses:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DeliveryPolicy&lt;/code&gt; – The policy that defines how Amazon SNS retries failed deliveries to HTTP/S endpoints.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FilterPolicy&lt;/code&gt; – The simple JSON object that lets your subscriber receive only a subset of messages, rather than receiving every message published to the topic.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FilterPolicyScope&lt;/code&gt; – This attribute lets you choose the filtering scope by using one of the following string value types:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MessageAttributes&lt;/code&gt; (default) – The filter is applied on the message attributes.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MessageBody&lt;/code&gt; – The filter is applied on the message body.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RawMessageDelivery&lt;/code&gt; – When set to &lt;code&gt;true&lt;/code&gt;, enables raw message delivery to Amazon SQS or HTTP/S endpoints. This eliminates the need for the endpoints to process JSON formatting, which is otherwise created for Amazon SNS metadata.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RedrivePolicy&lt;/code&gt; – When specified, sends undeliverable messages to the specified Amazon SQS dead-letter queue. Messages that can&#39;t be delivered due to client errors (for example, when the subscribed endpoint is unreachable) or server errors (for example, when the service that powers the subscribed endpoint becomes unavailable) are held in the dead-letter queue for further analysis or reprocessing.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attribute applies only to Amazon Kinesis Data Firehose delivery stream subscriptions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SubscriptionRoleArn&lt;/code&gt; – The ARN of the IAM role that has the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Permission to write to the Kinesis Data Firehose delivery stream&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon SNS listed as a trusted entity&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Specifying a valid ARN for this attribute is required for Kinesis Data Firehose delivery stream subscriptions. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-firehose-as-subscriber.html\&quot;&gt;Fanout to Kinesis Data Firehose delivery streams&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param returnSubscriptionArn &lt;p&gt;Sets whether the response from the &lt;code&gt;Subscribe&lt;/code&gt; request includes the subscription ARN, even if the subscription is not yet confirmed.&lt;/p&gt; &lt;p&gt;If you set this parameter to &lt;code&gt;true&lt;/code&gt;, the response includes the ARN in all cases, even if the subscription is not yet confirmed. In addition to the ARN for confirmed subscriptions, the response also includes the &lt;code&gt;pending subscription&lt;/code&gt; ARN value for subscriptions that aren&#39;t yet confirmed. A subscription becomes confirmed when the subscriber calls the &lt;code&gt;ConfirmSubscription&lt;/code&gt; action with a confirmation token.&lt;/p&gt; &lt;p/&gt; &lt;p&gt;The default value is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FilterPolicyLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSubscribeCall(String topicArn, String protocol, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String endpoint, Map<String, String> attributes, Boolean returnSubscriptionArn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=Subscribe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (topicArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TopicArn", topicArn));
        }

        if (protocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Protocol", protocol));
        }

        if (endpoint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Endpoint", endpoint));
        }

        if (attributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Attributes", attributes));
        }

        if (returnSubscriptionArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ReturnSubscriptionArn", returnSubscriptionArn));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETSubscribeValidateBeforeCall(String topicArn, String protocol, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String endpoint, Map<String, String> attributes, Boolean returnSubscriptionArn, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'topicArn' is set
        if (topicArn == null) {
            throw new ApiException("Missing the required parameter 'topicArn' when calling gETSubscribe(Async)");
        }

        // verify the required parameter 'protocol' is set
        if (protocol == null) {
            throw new ApiException("Missing the required parameter 'protocol' when calling gETSubscribe(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETSubscribe(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETSubscribe(Async)");
        }

        return gETSubscribeCall(topicArn, protocol, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, endpoint, attributes, returnSubscriptionArn, _callback);

    }

    /**
     * 
     * &lt;p&gt;Subscribes an endpoint to an Amazon SNS topic. If the endpoint type is HTTP/S or email, or if the endpoint and the topic are not in the same Amazon Web Services account, the endpoint owner must run the &lt;code&gt;ConfirmSubscription&lt;/code&gt; action to confirm the subscription.&lt;/p&gt; &lt;p&gt;You call the &lt;code&gt;ConfirmSubscription&lt;/code&gt; action with the token from the subscription response. Confirmation tokens are valid for three days.&lt;/p&gt; &lt;p&gt;This action is throttled at 100 transactions per second (TPS).&lt;/p&gt;
     * @param topicArn The ARN of the topic you want to subscribe to. (required)
     * @param protocol &lt;p&gt;The protocol that you want to use. Supported protocols include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;http&lt;/code&gt; – delivery of JSON-encoded message via HTTP POST&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;https&lt;/code&gt; – delivery of JSON-encoded message via HTTPS POST&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;email&lt;/code&gt; – delivery of message via SMTP&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;email-json&lt;/code&gt; – delivery of JSON-encoded message via SMTP&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sms&lt;/code&gt; – delivery of message via SMS&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sqs&lt;/code&gt; – delivery of JSON-encoded message to an Amazon SQS queue&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;application&lt;/code&gt; – delivery of JSON-encoded message to an EndpointArn for a mobile app and device&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;lambda&lt;/code&gt; – delivery of JSON-encoded message to an Lambda function&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;firehose&lt;/code&gt; – delivery of JSON-encoded message to an Amazon Kinesis Data Firehose delivery stream.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param endpoint &lt;p&gt;The endpoint that you want to receive notifications. Endpoints vary by protocol:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For the &lt;code&gt;http&lt;/code&gt; protocol, the (public) endpoint is a URL beginning with &lt;code&gt;http://&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For the &lt;code&gt;https&lt;/code&gt; protocol, the (public) endpoint is a URL beginning with &lt;code&gt;https://&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For the &lt;code&gt;email&lt;/code&gt; protocol, the endpoint is an email address.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For the &lt;code&gt;email-json&lt;/code&gt; protocol, the endpoint is an email address.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For the &lt;code&gt;sms&lt;/code&gt; protocol, the endpoint is a phone number of an SMS-enabled device.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For the &lt;code&gt;sqs&lt;/code&gt; protocol, the endpoint is the ARN of an Amazon SQS queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For the &lt;code&gt;application&lt;/code&gt; protocol, the endpoint is the EndpointArn of a mobile app and device.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For the &lt;code&gt;lambda&lt;/code&gt; protocol, the endpoint is the ARN of an Lambda function.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For the &lt;code&gt;firehose&lt;/code&gt; protocol, the endpoint is the ARN of an Amazon Kinesis Data Firehose delivery stream.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param attributes &lt;p&gt;A map of attributes with their corresponding values.&lt;/p&gt; &lt;p&gt;The following lists the names, descriptions, and values of the special request parameters that the &lt;code&gt;Subscribe&lt;/code&gt; action uses:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DeliveryPolicy&lt;/code&gt; – The policy that defines how Amazon SNS retries failed deliveries to HTTP/S endpoints.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FilterPolicy&lt;/code&gt; – The simple JSON object that lets your subscriber receive only a subset of messages, rather than receiving every message published to the topic.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FilterPolicyScope&lt;/code&gt; – This attribute lets you choose the filtering scope by using one of the following string value types:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MessageAttributes&lt;/code&gt; (default) – The filter is applied on the message attributes.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MessageBody&lt;/code&gt; – The filter is applied on the message body.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RawMessageDelivery&lt;/code&gt; – When set to &lt;code&gt;true&lt;/code&gt;, enables raw message delivery to Amazon SQS or HTTP/S endpoints. This eliminates the need for the endpoints to process JSON formatting, which is otherwise created for Amazon SNS metadata.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RedrivePolicy&lt;/code&gt; – When specified, sends undeliverable messages to the specified Amazon SQS dead-letter queue. Messages that can&#39;t be delivered due to client errors (for example, when the subscribed endpoint is unreachable) or server errors (for example, when the service that powers the subscribed endpoint becomes unavailable) are held in the dead-letter queue for further analysis or reprocessing.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attribute applies only to Amazon Kinesis Data Firehose delivery stream subscriptions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SubscriptionRoleArn&lt;/code&gt; – The ARN of the IAM role that has the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Permission to write to the Kinesis Data Firehose delivery stream&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon SNS listed as a trusted entity&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Specifying a valid ARN for this attribute is required for Kinesis Data Firehose delivery stream subscriptions. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-firehose-as-subscriber.html\&quot;&gt;Fanout to Kinesis Data Firehose delivery streams&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param returnSubscriptionArn &lt;p&gt;Sets whether the response from the &lt;code&gt;Subscribe&lt;/code&gt; request includes the subscription ARN, even if the subscription is not yet confirmed.&lt;/p&gt; &lt;p&gt;If you set this parameter to &lt;code&gt;true&lt;/code&gt;, the response includes the ARN in all cases, even if the subscription is not yet confirmed. In addition to the ARN for confirmed subscriptions, the response also includes the &lt;code&gt;pending subscription&lt;/code&gt; ARN value for subscriptions that aren&#39;t yet confirmed. A subscription becomes confirmed when the subscriber calls the &lt;code&gt;ConfirmSubscription&lt;/code&gt; action with a confirmation token.&lt;/p&gt; &lt;p/&gt; &lt;p&gt;The default value is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; (optional)
     * @return SubscribeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FilterPolicyLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public SubscribeResponse gETSubscribe(String topicArn, String protocol, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String endpoint, Map<String, String> attributes, Boolean returnSubscriptionArn) throws ApiException {
        ApiResponse<SubscribeResponse> localVarResp = gETSubscribeWithHttpInfo(topicArn, protocol, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, endpoint, attributes, returnSubscriptionArn);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Subscribes an endpoint to an Amazon SNS topic. If the endpoint type is HTTP/S or email, or if the endpoint and the topic are not in the same Amazon Web Services account, the endpoint owner must run the &lt;code&gt;ConfirmSubscription&lt;/code&gt; action to confirm the subscription.&lt;/p&gt; &lt;p&gt;You call the &lt;code&gt;ConfirmSubscription&lt;/code&gt; action with the token from the subscription response. Confirmation tokens are valid for three days.&lt;/p&gt; &lt;p&gt;This action is throttled at 100 transactions per second (TPS).&lt;/p&gt;
     * @param topicArn The ARN of the topic you want to subscribe to. (required)
     * @param protocol &lt;p&gt;The protocol that you want to use. Supported protocols include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;http&lt;/code&gt; – delivery of JSON-encoded message via HTTP POST&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;https&lt;/code&gt; – delivery of JSON-encoded message via HTTPS POST&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;email&lt;/code&gt; – delivery of message via SMTP&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;email-json&lt;/code&gt; – delivery of JSON-encoded message via SMTP&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sms&lt;/code&gt; – delivery of message via SMS&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sqs&lt;/code&gt; – delivery of JSON-encoded message to an Amazon SQS queue&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;application&lt;/code&gt; – delivery of JSON-encoded message to an EndpointArn for a mobile app and device&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;lambda&lt;/code&gt; – delivery of JSON-encoded message to an Lambda function&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;firehose&lt;/code&gt; – delivery of JSON-encoded message to an Amazon Kinesis Data Firehose delivery stream.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param endpoint &lt;p&gt;The endpoint that you want to receive notifications. Endpoints vary by protocol:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For the &lt;code&gt;http&lt;/code&gt; protocol, the (public) endpoint is a URL beginning with &lt;code&gt;http://&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For the &lt;code&gt;https&lt;/code&gt; protocol, the (public) endpoint is a URL beginning with &lt;code&gt;https://&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For the &lt;code&gt;email&lt;/code&gt; protocol, the endpoint is an email address.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For the &lt;code&gt;email-json&lt;/code&gt; protocol, the endpoint is an email address.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For the &lt;code&gt;sms&lt;/code&gt; protocol, the endpoint is a phone number of an SMS-enabled device.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For the &lt;code&gt;sqs&lt;/code&gt; protocol, the endpoint is the ARN of an Amazon SQS queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For the &lt;code&gt;application&lt;/code&gt; protocol, the endpoint is the EndpointArn of a mobile app and device.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For the &lt;code&gt;lambda&lt;/code&gt; protocol, the endpoint is the ARN of an Lambda function.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For the &lt;code&gt;firehose&lt;/code&gt; protocol, the endpoint is the ARN of an Amazon Kinesis Data Firehose delivery stream.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param attributes &lt;p&gt;A map of attributes with their corresponding values.&lt;/p&gt; &lt;p&gt;The following lists the names, descriptions, and values of the special request parameters that the &lt;code&gt;Subscribe&lt;/code&gt; action uses:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DeliveryPolicy&lt;/code&gt; – The policy that defines how Amazon SNS retries failed deliveries to HTTP/S endpoints.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FilterPolicy&lt;/code&gt; – The simple JSON object that lets your subscriber receive only a subset of messages, rather than receiving every message published to the topic.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FilterPolicyScope&lt;/code&gt; – This attribute lets you choose the filtering scope by using one of the following string value types:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MessageAttributes&lt;/code&gt; (default) – The filter is applied on the message attributes.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MessageBody&lt;/code&gt; – The filter is applied on the message body.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RawMessageDelivery&lt;/code&gt; – When set to &lt;code&gt;true&lt;/code&gt;, enables raw message delivery to Amazon SQS or HTTP/S endpoints. This eliminates the need for the endpoints to process JSON formatting, which is otherwise created for Amazon SNS metadata.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RedrivePolicy&lt;/code&gt; – When specified, sends undeliverable messages to the specified Amazon SQS dead-letter queue. Messages that can&#39;t be delivered due to client errors (for example, when the subscribed endpoint is unreachable) or server errors (for example, when the service that powers the subscribed endpoint becomes unavailable) are held in the dead-letter queue for further analysis or reprocessing.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attribute applies only to Amazon Kinesis Data Firehose delivery stream subscriptions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SubscriptionRoleArn&lt;/code&gt; – The ARN of the IAM role that has the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Permission to write to the Kinesis Data Firehose delivery stream&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon SNS listed as a trusted entity&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Specifying a valid ARN for this attribute is required for Kinesis Data Firehose delivery stream subscriptions. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-firehose-as-subscriber.html\&quot;&gt;Fanout to Kinesis Data Firehose delivery streams&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param returnSubscriptionArn &lt;p&gt;Sets whether the response from the &lt;code&gt;Subscribe&lt;/code&gt; request includes the subscription ARN, even if the subscription is not yet confirmed.&lt;/p&gt; &lt;p&gt;If you set this parameter to &lt;code&gt;true&lt;/code&gt;, the response includes the ARN in all cases, even if the subscription is not yet confirmed. In addition to the ARN for confirmed subscriptions, the response also includes the &lt;code&gt;pending subscription&lt;/code&gt; ARN value for subscriptions that aren&#39;t yet confirmed. A subscription becomes confirmed when the subscriber calls the &lt;code&gt;ConfirmSubscription&lt;/code&gt; action with a confirmation token.&lt;/p&gt; &lt;p/&gt; &lt;p&gt;The default value is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;SubscribeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FilterPolicyLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscribeResponse> gETSubscribeWithHttpInfo(String topicArn, String protocol, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String endpoint, Map<String, String> attributes, Boolean returnSubscriptionArn) throws ApiException {
        okhttp3.Call localVarCall = gETSubscribeValidateBeforeCall(topicArn, protocol, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, endpoint, attributes, returnSubscriptionArn, null);
        Type localVarReturnType = new TypeToken<SubscribeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Subscribes an endpoint to an Amazon SNS topic. If the endpoint type is HTTP/S or email, or if the endpoint and the topic are not in the same Amazon Web Services account, the endpoint owner must run the &lt;code&gt;ConfirmSubscription&lt;/code&gt; action to confirm the subscription.&lt;/p&gt; &lt;p&gt;You call the &lt;code&gt;ConfirmSubscription&lt;/code&gt; action with the token from the subscription response. Confirmation tokens are valid for three days.&lt;/p&gt; &lt;p&gt;This action is throttled at 100 transactions per second (TPS).&lt;/p&gt;
     * @param topicArn The ARN of the topic you want to subscribe to. (required)
     * @param protocol &lt;p&gt;The protocol that you want to use. Supported protocols include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;http&lt;/code&gt; – delivery of JSON-encoded message via HTTP POST&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;https&lt;/code&gt; – delivery of JSON-encoded message via HTTPS POST&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;email&lt;/code&gt; – delivery of message via SMTP&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;email-json&lt;/code&gt; – delivery of JSON-encoded message via SMTP&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sms&lt;/code&gt; – delivery of message via SMS&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sqs&lt;/code&gt; – delivery of JSON-encoded message to an Amazon SQS queue&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;application&lt;/code&gt; – delivery of JSON-encoded message to an EndpointArn for a mobile app and device&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;lambda&lt;/code&gt; – delivery of JSON-encoded message to an Lambda function&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;firehose&lt;/code&gt; – delivery of JSON-encoded message to an Amazon Kinesis Data Firehose delivery stream.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param endpoint &lt;p&gt;The endpoint that you want to receive notifications. Endpoints vary by protocol:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For the &lt;code&gt;http&lt;/code&gt; protocol, the (public) endpoint is a URL beginning with &lt;code&gt;http://&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For the &lt;code&gt;https&lt;/code&gt; protocol, the (public) endpoint is a URL beginning with &lt;code&gt;https://&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For the &lt;code&gt;email&lt;/code&gt; protocol, the endpoint is an email address.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For the &lt;code&gt;email-json&lt;/code&gt; protocol, the endpoint is an email address.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For the &lt;code&gt;sms&lt;/code&gt; protocol, the endpoint is a phone number of an SMS-enabled device.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For the &lt;code&gt;sqs&lt;/code&gt; protocol, the endpoint is the ARN of an Amazon SQS queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For the &lt;code&gt;application&lt;/code&gt; protocol, the endpoint is the EndpointArn of a mobile app and device.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For the &lt;code&gt;lambda&lt;/code&gt; protocol, the endpoint is the ARN of an Lambda function.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For the &lt;code&gt;firehose&lt;/code&gt; protocol, the endpoint is the ARN of an Amazon Kinesis Data Firehose delivery stream.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param attributes &lt;p&gt;A map of attributes with their corresponding values.&lt;/p&gt; &lt;p&gt;The following lists the names, descriptions, and values of the special request parameters that the &lt;code&gt;Subscribe&lt;/code&gt; action uses:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DeliveryPolicy&lt;/code&gt; – The policy that defines how Amazon SNS retries failed deliveries to HTTP/S endpoints.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FilterPolicy&lt;/code&gt; – The simple JSON object that lets your subscriber receive only a subset of messages, rather than receiving every message published to the topic.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FilterPolicyScope&lt;/code&gt; – This attribute lets you choose the filtering scope by using one of the following string value types:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MessageAttributes&lt;/code&gt; (default) – The filter is applied on the message attributes.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MessageBody&lt;/code&gt; – The filter is applied on the message body.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RawMessageDelivery&lt;/code&gt; – When set to &lt;code&gt;true&lt;/code&gt;, enables raw message delivery to Amazon SQS or HTTP/S endpoints. This eliminates the need for the endpoints to process JSON formatting, which is otherwise created for Amazon SNS metadata.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RedrivePolicy&lt;/code&gt; – When specified, sends undeliverable messages to the specified Amazon SQS dead-letter queue. Messages that can&#39;t be delivered due to client errors (for example, when the subscribed endpoint is unreachable) or server errors (for example, when the service that powers the subscribed endpoint becomes unavailable) are held in the dead-letter queue for further analysis or reprocessing.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attribute applies only to Amazon Kinesis Data Firehose delivery stream subscriptions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SubscriptionRoleArn&lt;/code&gt; – The ARN of the IAM role that has the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Permission to write to the Kinesis Data Firehose delivery stream&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon SNS listed as a trusted entity&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Specifying a valid ARN for this attribute is required for Kinesis Data Firehose delivery stream subscriptions. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-firehose-as-subscriber.html\&quot;&gt;Fanout to Kinesis Data Firehose delivery streams&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param returnSubscriptionArn &lt;p&gt;Sets whether the response from the &lt;code&gt;Subscribe&lt;/code&gt; request includes the subscription ARN, even if the subscription is not yet confirmed.&lt;/p&gt; &lt;p&gt;If you set this parameter to &lt;code&gt;true&lt;/code&gt;, the response includes the ARN in all cases, even if the subscription is not yet confirmed. In addition to the ARN for confirmed subscriptions, the response also includes the &lt;code&gt;pending subscription&lt;/code&gt; ARN value for subscriptions that aren&#39;t yet confirmed. A subscription becomes confirmed when the subscriber calls the &lt;code&gt;ConfirmSubscription&lt;/code&gt; action with a confirmation token.&lt;/p&gt; &lt;p/&gt; &lt;p&gt;The default value is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FilterPolicyLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSubscribeAsync(String topicArn, String protocol, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String endpoint, Map<String, String> attributes, Boolean returnSubscriptionArn, final ApiCallback<SubscribeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETSubscribeValidateBeforeCall(topicArn, protocol, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, endpoint, attributes, returnSubscriptionArn, _callback);
        Type localVarReturnType = new TypeToken<SubscribeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETTagResource
     * @param resourceArn The ARN of the topic to which to add tags. (required)
     * @param tags The tags to be added to the specified topic. A tag consists of a required key and an optional value. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TagLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StaleTagException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETTagResourceCall(String resourceArn, List<Tag> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=TagResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resourceArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ResourceArn", resourceArn));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETTagResourceValidateBeforeCall(String resourceArn, List<Tag> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceArn' is set
        if (resourceArn == null) {
            throw new ApiException("Missing the required parameter 'resourceArn' when calling gETTagResource(Async)");
        }

        // verify the required parameter 'tags' is set
        if (tags == null) {
            throw new ApiException("Missing the required parameter 'tags' when calling gETTagResource(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETTagResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETTagResource(Async)");
        }

        return gETTagResourceCall(resourceArn, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Add tags to the specified Amazon SNS topic. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html\&quot;&gt;Amazon SNS Tags&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you use topic tags, keep the following guidelines in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Adding more than 50 tags to a topic isn&#39;t recommended.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags don&#39;t have any semantic meaning. Amazon SNS interprets tags as character strings.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags are case-sensitive.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A new tag with a key identical to that of an existing tag overwrites the existing tag.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tagging actions are limited to 10 TPS per Amazon Web Services account, per Amazon Web Services Region. If your application requires a higher throughput, file a &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/case/create?issueType&#x3D;technical\&quot;&gt;technical support request&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param resourceArn The ARN of the topic to which to add tags. (required)
     * @param tags The tags to be added to the specified topic. A tag consists of a required key and an optional value. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TagLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StaleTagException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETTagResource(String resourceArn, List<Tag> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETTagResourceWithHttpInfo(resourceArn, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Add tags to the specified Amazon SNS topic. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html\&quot;&gt;Amazon SNS Tags&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you use topic tags, keep the following guidelines in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Adding more than 50 tags to a topic isn&#39;t recommended.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags don&#39;t have any semantic meaning. Amazon SNS interprets tags as character strings.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags are case-sensitive.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A new tag with a key identical to that of an existing tag overwrites the existing tag.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tagging actions are limited to 10 TPS per Amazon Web Services account, per Amazon Web Services Region. If your application requires a higher throughput, file a &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/case/create?issueType&#x3D;technical\&quot;&gt;technical support request&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param resourceArn The ARN of the topic to which to add tags. (required)
     * @param tags The tags to be added to the specified topic. A tag consists of a required key and an optional value. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TagLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StaleTagException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETTagResourceWithHttpInfo(String resourceArn, List<Tag> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETTagResourceValidateBeforeCall(resourceArn, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Add tags to the specified Amazon SNS topic. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html\&quot;&gt;Amazon SNS Tags&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you use topic tags, keep the following guidelines in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Adding more than 50 tags to a topic isn&#39;t recommended.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags don&#39;t have any semantic meaning. Amazon SNS interprets tags as character strings.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags are case-sensitive.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A new tag with a key identical to that of an existing tag overwrites the existing tag.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tagging actions are limited to 10 TPS per Amazon Web Services account, per Amazon Web Services Region. If your application requires a higher throughput, file a &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/case/create?issueType&#x3D;technical\&quot;&gt;technical support request&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param resourceArn The ARN of the topic to which to add tags. (required)
     * @param tags The tags to be added to the specified topic. A tag consists of a required key and an optional value. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TagLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StaleTagException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETTagResourceAsync(String resourceArn, List<Tag> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETTagResourceValidateBeforeCall(resourceArn, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETUnsubscribe
     * @param subscriptionArn The ARN of the subscription to be deleted. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETUnsubscribeCall(String subscriptionArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=Unsubscribe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subscriptionArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SubscriptionArn", subscriptionArn));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETUnsubscribeValidateBeforeCall(String subscriptionArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionArn' is set
        if (subscriptionArn == null) {
            throw new ApiException("Missing the required parameter 'subscriptionArn' when calling gETUnsubscribe(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETUnsubscribe(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETUnsubscribe(Async)");
        }

        return gETUnsubscribeCall(subscriptionArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a subscription. If the subscription requires authentication for deletion, only the owner of the subscription or the topic&#39;s owner can unsubscribe, and an Amazon Web Services signature is required. If the &lt;code&gt;Unsubscribe&lt;/code&gt; call does not require authentication and the requester is not the subscription owner, a final cancellation message is delivered to the endpoint, so that the endpoint owner can easily resubscribe to the topic if the &lt;code&gt;Unsubscribe&lt;/code&gt; request was unintended.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon SQS queue subscriptions require authentication for deletion. Only the owner of the subscription, or the owner of the topic can unsubscribe using the required Amazon Web Services signature.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This action is throttled at 100 transactions per second (TPS).&lt;/p&gt;
     * @param subscriptionArn The ARN of the subscription to be deleted. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public void gETUnsubscribe(String subscriptionArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETUnsubscribeWithHttpInfo(subscriptionArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes a subscription. If the subscription requires authentication for deletion, only the owner of the subscription or the topic&#39;s owner can unsubscribe, and an Amazon Web Services signature is required. If the &lt;code&gt;Unsubscribe&lt;/code&gt; call does not require authentication and the requester is not the subscription owner, a final cancellation message is delivered to the endpoint, so that the endpoint owner can easily resubscribe to the topic if the &lt;code&gt;Unsubscribe&lt;/code&gt; request was unintended.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon SQS queue subscriptions require authentication for deletion. Only the owner of the subscription, or the owner of the topic can unsubscribe using the required Amazon Web Services signature.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This action is throttled at 100 transactions per second (TPS).&lt;/p&gt;
     * @param subscriptionArn The ARN of the subscription to be deleted. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETUnsubscribeWithHttpInfo(String subscriptionArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETUnsubscribeValidateBeforeCall(subscriptionArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a subscription. If the subscription requires authentication for deletion, only the owner of the subscription or the topic&#39;s owner can unsubscribe, and an Amazon Web Services signature is required. If the &lt;code&gt;Unsubscribe&lt;/code&gt; call does not require authentication and the requester is not the subscription owner, a final cancellation message is delivered to the endpoint, so that the endpoint owner can easily resubscribe to the topic if the &lt;code&gt;Unsubscribe&lt;/code&gt; request was unintended.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon SQS queue subscriptions require authentication for deletion. Only the owner of the subscription, or the owner of the topic can unsubscribe using the required Amazon Web Services signature.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This action is throttled at 100 transactions per second (TPS).&lt;/p&gt;
     * @param subscriptionArn The ARN of the subscription to be deleted. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETUnsubscribeAsync(String subscriptionArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETUnsubscribeValidateBeforeCall(subscriptionArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETUntagResource
     * @param resourceArn The ARN of the topic from which to remove tags. (required)
     * @param tagKeys The list of tag keys to remove from the specified topic. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TagLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StaleTagException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETUntagResourceCall(String resourceArn, List<String> tagKeys, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=UntagResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resourceArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ResourceArn", resourceArn));
        }

        if (tagKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "TagKeys", tagKeys));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETUntagResourceValidateBeforeCall(String resourceArn, List<String> tagKeys, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceArn' is set
        if (resourceArn == null) {
            throw new ApiException("Missing the required parameter 'resourceArn' when calling gETUntagResource(Async)");
        }

        // verify the required parameter 'tagKeys' is set
        if (tagKeys == null) {
            throw new ApiException("Missing the required parameter 'tagKeys' when calling gETUntagResource(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETUntagResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETUntagResource(Async)");
        }

        return gETUntagResourceCall(resourceArn, tagKeys, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Remove tags from the specified Amazon SNS topic. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html\&quot;&gt;Amazon SNS Tags&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.
     * @param resourceArn The ARN of the topic from which to remove tags. (required)
     * @param tagKeys The list of tag keys to remove from the specified topic. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TagLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StaleTagException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETUntagResource(String resourceArn, List<String> tagKeys, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETUntagResourceWithHttpInfo(resourceArn, tagKeys, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Remove tags from the specified Amazon SNS topic. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html\&quot;&gt;Amazon SNS Tags&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.
     * @param resourceArn The ARN of the topic from which to remove tags. (required)
     * @param tagKeys The list of tag keys to remove from the specified topic. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TagLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StaleTagException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETUntagResourceWithHttpInfo(String resourceArn, List<String> tagKeys, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETUntagResourceValidateBeforeCall(resourceArn, tagKeys, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove tags from the specified Amazon SNS topic. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html\&quot;&gt;Amazon SNS Tags&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.
     * @param resourceArn The ARN of the topic from which to remove tags. (required)
     * @param tagKeys The list of tag keys to remove from the specified topic. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TagLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StaleTagException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETUntagResourceAsync(String resourceArn, List<String> tagKeys, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETUntagResourceValidateBeforeCall(resourceArn, tagKeys, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETVerifySMSSandboxPhoneNumber
     * @param phoneNumber The destination phone number to verify. (required)
     * @param oneTimePassword The OTP sent to the destination number from the &lt;code&gt;CreateSMSSandBoxPhoneNumber&lt;/code&gt; call. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> VerificationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETVerifySMSSandboxPhoneNumberCall(String phoneNumber, String oneTimePassword, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=VerifySMSSandboxPhoneNumber";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (phoneNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PhoneNumber", phoneNumber));
        }

        if (oneTimePassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OneTimePassword", oneTimePassword));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETVerifySMSSandboxPhoneNumberValidateBeforeCall(String phoneNumber, String oneTimePassword, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneNumber' is set
        if (phoneNumber == null) {
            throw new ApiException("Missing the required parameter 'phoneNumber' when calling gETVerifySMSSandboxPhoneNumber(Async)");
        }

        // verify the required parameter 'oneTimePassword' is set
        if (oneTimePassword == null) {
            throw new ApiException("Missing the required parameter 'oneTimePassword' when calling gETVerifySMSSandboxPhoneNumber(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETVerifySMSSandboxPhoneNumber(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETVerifySMSSandboxPhoneNumber(Async)");
        }

        return gETVerifySMSSandboxPhoneNumberCall(phoneNumber, oneTimePassword, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Verifies a destination phone number with a one-time password (OTP) for the calling Amazon Web Services account.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param phoneNumber The destination phone number to verify. (required)
     * @param oneTimePassword The OTP sent to the destination number from the &lt;code&gt;CreateSMSSandBoxPhoneNumber&lt;/code&gt; call. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> VerificationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETVerifySMSSandboxPhoneNumber(String phoneNumber, String oneTimePassword, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETVerifySMSSandboxPhoneNumberWithHttpInfo(phoneNumber, oneTimePassword, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Verifies a destination phone number with a one-time password (OTP) for the calling Amazon Web Services account.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param phoneNumber The destination phone number to verify. (required)
     * @param oneTimePassword The OTP sent to the destination number from the &lt;code&gt;CreateSMSSandBoxPhoneNumber&lt;/code&gt; call. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> VerificationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETVerifySMSSandboxPhoneNumberWithHttpInfo(String phoneNumber, String oneTimePassword, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETVerifySMSSandboxPhoneNumberValidateBeforeCall(phoneNumber, oneTimePassword, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Verifies a destination phone number with a one-time password (OTP) for the calling Amazon Web Services account.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param phoneNumber The destination phone number to verify. (required)
     * @param oneTimePassword The OTP sent to the destination number from the &lt;code&gt;CreateSMSSandBoxPhoneNumber&lt;/code&gt; call. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> VerificationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETVerifySMSSandboxPhoneNumberAsync(String phoneNumber, String oneTimePassword, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETVerifySMSSandboxPhoneNumberValidateBeforeCall(phoneNumber, oneTimePassword, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTAddPermission
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addPermissionInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAddPermissionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddPermissionInput addPermissionInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addPermissionInput;

        // create path and map variables
        String localVarPath = "/#Action=AddPermission";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTAddPermissionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddPermissionInput addPermissionInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTAddPermission(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTAddPermission(Async)");
        }

        return pOSTAddPermissionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addPermissionInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds a statement to a topic&#39;s access control policy, granting access for the specified Amazon Web Services accounts to the specified actions.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To remove the ability to change topic permissions, you must deny permissions to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetTopicAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addPermissionInput  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTAddPermission(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddPermissionInput addPermissionInput) throws ApiException {
        pOSTAddPermissionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addPermissionInput);
    }

    /**
     * 
     * &lt;p&gt;Adds a statement to a topic&#39;s access control policy, granting access for the specified Amazon Web Services accounts to the specified actions.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To remove the ability to change topic permissions, you must deny permissions to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetTopicAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addPermissionInput  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTAddPermissionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddPermissionInput addPermissionInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTAddPermissionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addPermissionInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds a statement to a topic&#39;s access control policy, granting access for the specified Amazon Web Services accounts to the specified actions.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To remove the ability to change topic permissions, you must deny permissions to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetTopicAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addPermissionInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAddPermissionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddPermissionInput addPermissionInput, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTAddPermissionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addPermissionInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCheckIfPhoneNumberIsOptedOut
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param checkIfPhoneNumberIsOptedOutInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCheckIfPhoneNumberIsOptedOutCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CheckIfPhoneNumberIsOptedOutInput checkIfPhoneNumberIsOptedOutInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checkIfPhoneNumberIsOptedOutInput;

        // create path and map variables
        String localVarPath = "/#Action=CheckIfPhoneNumberIsOptedOut";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCheckIfPhoneNumberIsOptedOutValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CheckIfPhoneNumberIsOptedOutInput checkIfPhoneNumberIsOptedOutInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCheckIfPhoneNumberIsOptedOut(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCheckIfPhoneNumberIsOptedOut(Async)");
        }

        return pOSTCheckIfPhoneNumberIsOptedOutCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, checkIfPhoneNumberIsOptedOutInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Accepts a phone number and indicates whether the phone holder has opted out of receiving SMS messages from your Amazon Web Services account. You cannot send SMS messages to a number that is opted out.&lt;/p&gt; &lt;p&gt;To resume sending messages, you can opt in the number by using the &lt;code&gt;OptInPhoneNumber&lt;/code&gt; action.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param checkIfPhoneNumberIsOptedOutInput  (optional)
     * @return CheckIfPhoneNumberIsOptedOutResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public CheckIfPhoneNumberIsOptedOutResponse pOSTCheckIfPhoneNumberIsOptedOut(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CheckIfPhoneNumberIsOptedOutInput checkIfPhoneNumberIsOptedOutInput) throws ApiException {
        ApiResponse<CheckIfPhoneNumberIsOptedOutResponse> localVarResp = pOSTCheckIfPhoneNumberIsOptedOutWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, checkIfPhoneNumberIsOptedOutInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Accepts a phone number and indicates whether the phone holder has opted out of receiving SMS messages from your Amazon Web Services account. You cannot send SMS messages to a number that is opted out.&lt;/p&gt; &lt;p&gt;To resume sending messages, you can opt in the number by using the &lt;code&gt;OptInPhoneNumber&lt;/code&gt; action.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param checkIfPhoneNumberIsOptedOutInput  (optional)
     * @return ApiResponse&lt;CheckIfPhoneNumberIsOptedOutResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckIfPhoneNumberIsOptedOutResponse> pOSTCheckIfPhoneNumberIsOptedOutWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CheckIfPhoneNumberIsOptedOutInput checkIfPhoneNumberIsOptedOutInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTCheckIfPhoneNumberIsOptedOutValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, checkIfPhoneNumberIsOptedOutInput, null);
        Type localVarReturnType = new TypeToken<CheckIfPhoneNumberIsOptedOutResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Accepts a phone number and indicates whether the phone holder has opted out of receiving SMS messages from your Amazon Web Services account. You cannot send SMS messages to a number that is opted out.&lt;/p&gt; &lt;p&gt;To resume sending messages, you can opt in the number by using the &lt;code&gt;OptInPhoneNumber&lt;/code&gt; action.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param checkIfPhoneNumberIsOptedOutInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCheckIfPhoneNumberIsOptedOutAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CheckIfPhoneNumberIsOptedOutInput checkIfPhoneNumberIsOptedOutInput, final ApiCallback<CheckIfPhoneNumberIsOptedOutResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCheckIfPhoneNumberIsOptedOutValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, checkIfPhoneNumberIsOptedOutInput, _callback);
        Type localVarReturnType = new TypeToken<CheckIfPhoneNumberIsOptedOutResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTConfirmSubscription
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param confirmSubscriptionInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> FilterPolicyLimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTConfirmSubscriptionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ConfirmSubscriptionInput confirmSubscriptionInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = confirmSubscriptionInput;

        // create path and map variables
        String localVarPath = "/#Action=ConfirmSubscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTConfirmSubscriptionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ConfirmSubscriptionInput confirmSubscriptionInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTConfirmSubscription(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTConfirmSubscription(Async)");
        }

        return pOSTConfirmSubscriptionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, confirmSubscriptionInput, _callback);

    }

    /**
     * 
     * Verifies an endpoint owner&#39;s intent to receive messages by validating the token sent to the endpoint by an earlier &lt;code&gt;Subscribe&lt;/code&gt; action. If the token is valid, the action creates a new subscription and returns its Amazon Resource Name (ARN). This call requires an AWS signature only when the &lt;code&gt;AuthenticateOnUnsubscribe&lt;/code&gt; flag is set to \&quot;true\&quot;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param confirmSubscriptionInput  (optional)
     * @return ConfirmSubscriptionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> FilterPolicyLimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ConfirmSubscriptionResponse pOSTConfirmSubscription(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ConfirmSubscriptionInput confirmSubscriptionInput) throws ApiException {
        ApiResponse<ConfirmSubscriptionResponse> localVarResp = pOSTConfirmSubscriptionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, confirmSubscriptionInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Verifies an endpoint owner&#39;s intent to receive messages by validating the token sent to the endpoint by an earlier &lt;code&gt;Subscribe&lt;/code&gt; action. If the token is valid, the action creates a new subscription and returns its Amazon Resource Name (ARN). This call requires an AWS signature only when the &lt;code&gt;AuthenticateOnUnsubscribe&lt;/code&gt; flag is set to \&quot;true\&quot;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param confirmSubscriptionInput  (optional)
     * @return ApiResponse&lt;ConfirmSubscriptionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> FilterPolicyLimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfirmSubscriptionResponse> pOSTConfirmSubscriptionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ConfirmSubscriptionInput confirmSubscriptionInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTConfirmSubscriptionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, confirmSubscriptionInput, null);
        Type localVarReturnType = new TypeToken<ConfirmSubscriptionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Verifies an endpoint owner&#39;s intent to receive messages by validating the token sent to the endpoint by an earlier &lt;code&gt;Subscribe&lt;/code&gt; action. If the token is valid, the action creates a new subscription and returns its Amazon Resource Name (ARN). This call requires an AWS signature only when the &lt;code&gt;AuthenticateOnUnsubscribe&lt;/code&gt; flag is set to \&quot;true\&quot;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param confirmSubscriptionInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> FilterPolicyLimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTConfirmSubscriptionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ConfirmSubscriptionInput confirmSubscriptionInput, final ApiCallback<ConfirmSubscriptionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTConfirmSubscriptionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, confirmSubscriptionInput, _callback);
        Type localVarReturnType = new TypeToken<ConfirmSubscriptionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreatePlatformApplication
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createPlatformApplicationInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreatePlatformApplicationCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreatePlatformApplicationInput createPlatformApplicationInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPlatformApplicationInput;

        // create path and map variables
        String localVarPath = "/#Action=CreatePlatformApplication";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreatePlatformApplicationValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreatePlatformApplicationInput createPlatformApplicationInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreatePlatformApplication(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreatePlatformApplication(Async)");
        }

        return pOSTCreatePlatformApplicationCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createPlatformApplicationInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a platform application object for one of the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging), to which devices and mobile apps may register. You must specify &lt;code&gt;PlatformPrincipal&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; attributes when using the &lt;code&gt;CreatePlatformApplication&lt;/code&gt; action.&lt;/p&gt; &lt;p&gt; &lt;code&gt;PlatformPrincipal&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; are received from the notification service.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;ADM&lt;/code&gt;, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;client id&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;client secret&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;Baidu&lt;/code&gt;, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;API key&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;secret key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;APNS&lt;/code&gt; and &lt;code&gt;APNS_SANDBOX&lt;/code&gt; using certificate credentials, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;SSL certificate&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;private key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;APNS&lt;/code&gt; and &lt;code&gt;APNS_SANDBOX&lt;/code&gt; using token credentials, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;signing key ID&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;signing key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;GCM&lt;/code&gt; (Firebase Cloud Messaging), there is no &lt;code&gt;PlatformPrincipal&lt;/code&gt; and the &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;API key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;MPNS&lt;/code&gt;, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;TLS certificate&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;private key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;WNS&lt;/code&gt;, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;Package Security Identifier&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;secret key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can use the returned &lt;code&gt;PlatformApplicationArn&lt;/code&gt; as an attribute for the &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; action.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createPlatformApplicationInput  (optional)
     * @return CreatePlatformApplicationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public CreatePlatformApplicationResponse pOSTCreatePlatformApplication(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreatePlatformApplicationInput createPlatformApplicationInput) throws ApiException {
        ApiResponse<CreatePlatformApplicationResponse> localVarResp = pOSTCreatePlatformApplicationWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createPlatformApplicationInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a platform application object for one of the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging), to which devices and mobile apps may register. You must specify &lt;code&gt;PlatformPrincipal&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; attributes when using the &lt;code&gt;CreatePlatformApplication&lt;/code&gt; action.&lt;/p&gt; &lt;p&gt; &lt;code&gt;PlatformPrincipal&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; are received from the notification service.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;ADM&lt;/code&gt;, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;client id&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;client secret&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;Baidu&lt;/code&gt;, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;API key&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;secret key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;APNS&lt;/code&gt; and &lt;code&gt;APNS_SANDBOX&lt;/code&gt; using certificate credentials, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;SSL certificate&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;private key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;APNS&lt;/code&gt; and &lt;code&gt;APNS_SANDBOX&lt;/code&gt; using token credentials, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;signing key ID&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;signing key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;GCM&lt;/code&gt; (Firebase Cloud Messaging), there is no &lt;code&gt;PlatformPrincipal&lt;/code&gt; and the &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;API key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;MPNS&lt;/code&gt;, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;TLS certificate&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;private key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;WNS&lt;/code&gt;, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;Package Security Identifier&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;secret key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can use the returned &lt;code&gt;PlatformApplicationArn&lt;/code&gt; as an attribute for the &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; action.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createPlatformApplicationInput  (optional)
     * @return ApiResponse&lt;CreatePlatformApplicationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreatePlatformApplicationResponse> pOSTCreatePlatformApplicationWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreatePlatformApplicationInput createPlatformApplicationInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreatePlatformApplicationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createPlatformApplicationInput, null);
        Type localVarReturnType = new TypeToken<CreatePlatformApplicationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a platform application object for one of the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging), to which devices and mobile apps may register. You must specify &lt;code&gt;PlatformPrincipal&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; attributes when using the &lt;code&gt;CreatePlatformApplication&lt;/code&gt; action.&lt;/p&gt; &lt;p&gt; &lt;code&gt;PlatformPrincipal&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; are received from the notification service.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;ADM&lt;/code&gt;, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;client id&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;client secret&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;Baidu&lt;/code&gt;, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;API key&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;secret key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;APNS&lt;/code&gt; and &lt;code&gt;APNS_SANDBOX&lt;/code&gt; using certificate credentials, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;SSL certificate&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;private key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;APNS&lt;/code&gt; and &lt;code&gt;APNS_SANDBOX&lt;/code&gt; using token credentials, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;signing key ID&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;signing key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;GCM&lt;/code&gt; (Firebase Cloud Messaging), there is no &lt;code&gt;PlatformPrincipal&lt;/code&gt; and the &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;API key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;MPNS&lt;/code&gt;, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;TLS certificate&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;private key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;WNS&lt;/code&gt;, &lt;code&gt;PlatformPrincipal&lt;/code&gt; is &lt;code&gt;Package Security Identifier&lt;/code&gt; and &lt;code&gt;PlatformCredential&lt;/code&gt; is &lt;code&gt;secret key&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can use the returned &lt;code&gt;PlatformApplicationArn&lt;/code&gt; as an attribute for the &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; action.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createPlatformApplicationInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreatePlatformApplicationAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreatePlatformApplicationInput createPlatformApplicationInput, final ApiCallback<CreatePlatformApplicationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreatePlatformApplicationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createPlatformApplicationInput, _callback);
        Type localVarReturnType = new TypeToken<CreatePlatformApplicationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreatePlatformEndpoint
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createPlatformEndpointInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreatePlatformEndpointCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreatePlatformEndpointInput createPlatformEndpointInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPlatformEndpointInput;

        // create path and map variables
        String localVarPath = "/#Action=CreatePlatformEndpoint";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreatePlatformEndpointValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreatePlatformEndpointInput createPlatformEndpointInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreatePlatformEndpoint(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreatePlatformEndpoint(Async)");
        }

        return pOSTCreatePlatformEndpointCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createPlatformEndpointInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates an endpoint for a device and mobile app on one of the supported push notification services, such as GCM (Firebase Cloud Messaging) and APNS. &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; requires the &lt;code&gt;PlatformApplicationArn&lt;/code&gt; that is returned from &lt;code&gt;CreatePlatformApplication&lt;/code&gt;. You can use the returned &lt;code&gt;EndpointArn&lt;/code&gt; to send a message to a mobile app or by the &lt;code&gt;Subscribe&lt;/code&gt; action for subscription to a topic. The &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; action is idempotent, so if the requester already owns an endpoint with the same device token and attributes, that endpoint&#39;s ARN is returned without creating a new endpoint. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;When using &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; with Baidu, two attributes must be provided: ChannelId and UserId. The token field must also contain the ChannelId. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePushBaiduEndpoint.html\&quot;&gt;Creating an Amazon SNS Endpoint for Baidu&lt;/a&gt;. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createPlatformEndpointInput  (optional)
     * @return CreateEndpointResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public CreateEndpointResponse pOSTCreatePlatformEndpoint(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreatePlatformEndpointInput createPlatformEndpointInput) throws ApiException {
        ApiResponse<CreateEndpointResponse> localVarResp = pOSTCreatePlatformEndpointWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createPlatformEndpointInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates an endpoint for a device and mobile app on one of the supported push notification services, such as GCM (Firebase Cloud Messaging) and APNS. &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; requires the &lt;code&gt;PlatformApplicationArn&lt;/code&gt; that is returned from &lt;code&gt;CreatePlatformApplication&lt;/code&gt;. You can use the returned &lt;code&gt;EndpointArn&lt;/code&gt; to send a message to a mobile app or by the &lt;code&gt;Subscribe&lt;/code&gt; action for subscription to a topic. The &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; action is idempotent, so if the requester already owns an endpoint with the same device token and attributes, that endpoint&#39;s ARN is returned without creating a new endpoint. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;When using &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; with Baidu, two attributes must be provided: ChannelId and UserId. The token field must also contain the ChannelId. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePushBaiduEndpoint.html\&quot;&gt;Creating an Amazon SNS Endpoint for Baidu&lt;/a&gt;. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createPlatformEndpointInput  (optional)
     * @return ApiResponse&lt;CreateEndpointResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateEndpointResponse> pOSTCreatePlatformEndpointWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreatePlatformEndpointInput createPlatformEndpointInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreatePlatformEndpointValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createPlatformEndpointInput, null);
        Type localVarReturnType = new TypeToken<CreateEndpointResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates an endpoint for a device and mobile app on one of the supported push notification services, such as GCM (Firebase Cloud Messaging) and APNS. &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; requires the &lt;code&gt;PlatformApplicationArn&lt;/code&gt; that is returned from &lt;code&gt;CreatePlatformApplication&lt;/code&gt;. You can use the returned &lt;code&gt;EndpointArn&lt;/code&gt; to send a message to a mobile app or by the &lt;code&gt;Subscribe&lt;/code&gt; action for subscription to a topic. The &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; action is idempotent, so if the requester already owns an endpoint with the same device token and attributes, that endpoint&#39;s ARN is returned without creating a new endpoint. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;When using &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; with Baidu, two attributes must be provided: ChannelId and UserId. The token field must also contain the ChannelId. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePushBaiduEndpoint.html\&quot;&gt;Creating an Amazon SNS Endpoint for Baidu&lt;/a&gt;. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createPlatformEndpointInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreatePlatformEndpointAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreatePlatformEndpointInput createPlatformEndpointInput, final ApiCallback<CreateEndpointResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreatePlatformEndpointValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createPlatformEndpointInput, _callback);
        Type localVarReturnType = new TypeToken<CreateEndpointResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateSMSSandboxPhoneNumber
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createSMSSandboxPhoneNumberInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OptedOutException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateSMSSandboxPhoneNumberCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateSMSSandboxPhoneNumberInput createSMSSandboxPhoneNumberInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSMSSandboxPhoneNumberInput;

        // create path and map variables
        String localVarPath = "/#Action=CreateSMSSandboxPhoneNumber";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateSMSSandboxPhoneNumberValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateSMSSandboxPhoneNumberInput createSMSSandboxPhoneNumberInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateSMSSandboxPhoneNumber(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateSMSSandboxPhoneNumber(Async)");
        }

        return pOSTCreateSMSSandboxPhoneNumberCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createSMSSandboxPhoneNumberInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds a destination phone number to an Amazon Web Services account in the SMS sandbox and sends a one-time password (OTP) to that phone number.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createSMSSandboxPhoneNumberInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OptedOutException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTCreateSMSSandboxPhoneNumber(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateSMSSandboxPhoneNumberInput createSMSSandboxPhoneNumberInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTCreateSMSSandboxPhoneNumberWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createSMSSandboxPhoneNumberInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Adds a destination phone number to an Amazon Web Services account in the SMS sandbox and sends a one-time password (OTP) to that phone number.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createSMSSandboxPhoneNumberInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OptedOutException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTCreateSMSSandboxPhoneNumberWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateSMSSandboxPhoneNumberInput createSMSSandboxPhoneNumberInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateSMSSandboxPhoneNumberValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createSMSSandboxPhoneNumberInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds a destination phone number to an Amazon Web Services account in the SMS sandbox and sends a one-time password (OTP) to that phone number.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createSMSSandboxPhoneNumberInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OptedOutException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateSMSSandboxPhoneNumberAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateSMSSandboxPhoneNumberInput createSMSSandboxPhoneNumberInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateSMSSandboxPhoneNumberValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createSMSSandboxPhoneNumberInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateTopic
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createTopicInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TopicLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TagLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> StaleTagException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateTopicCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateTopicInput createTopicInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTopicInput;

        // create path and map variables
        String localVarPath = "/#Action=CreateTopic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateTopicValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateTopicInput createTopicInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateTopic(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateTopic(Async)");
        }

        return pOSTCreateTopicCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createTopicInput, _callback);

    }

    /**
     * 
     * Creates a topic to which notifications can be published. Users can create at most 100,000 standard topics (at most 1,000 FIFO topics). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-create-topic.html\&quot;&gt;Creating an Amazon SNS topic&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;. This action is idempotent, so if the requester already owns a topic with the specified name, that topic&#39;s ARN is returned without creating a new topic.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createTopicInput  (optional)
     * @return CreateTopicResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TopicLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TagLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> StaleTagException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public CreateTopicResponse pOSTCreateTopic(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateTopicInput createTopicInput) throws ApiException {
        ApiResponse<CreateTopicResponse> localVarResp = pOSTCreateTopicWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createTopicInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a topic to which notifications can be published. Users can create at most 100,000 standard topics (at most 1,000 FIFO topics). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-create-topic.html\&quot;&gt;Creating an Amazon SNS topic&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;. This action is idempotent, so if the requester already owns a topic with the specified name, that topic&#39;s ARN is returned without creating a new topic.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createTopicInput  (optional)
     * @return ApiResponse&lt;CreateTopicResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TopicLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TagLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> StaleTagException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTopicResponse> pOSTCreateTopicWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateTopicInput createTopicInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateTopicValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createTopicInput, null);
        Type localVarReturnType = new TypeToken<CreateTopicResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a topic to which notifications can be published. Users can create at most 100,000 standard topics (at most 1,000 FIFO topics). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-create-topic.html\&quot;&gt;Creating an Amazon SNS topic&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;. This action is idempotent, so if the requester already owns a topic with the specified name, that topic&#39;s ARN is returned without creating a new topic.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createTopicInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TopicLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TagLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> StaleTagException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateTopicAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateTopicInput createTopicInput, final ApiCallback<CreateTopicResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateTopicValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createTopicInput, _callback);
        Type localVarReturnType = new TypeToken<CreateTopicResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteEndpoint
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteEndpointInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteEndpointCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteEndpointInput deleteEndpointInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteEndpointInput;

        // create path and map variables
        String localVarPath = "/#Action=DeleteEndpoint";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteEndpointValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteEndpointInput deleteEndpointInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteEndpoint(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteEndpoint(Async)");
        }

        return pOSTDeleteEndpointCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteEndpointInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the endpoint for a device and mobile app from Amazon SNS. This action is idempotent. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;When you delete an endpoint that is also subscribed to a topic, then you must also unsubscribe the endpoint from the topic.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteEndpointInput  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTDeleteEndpoint(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteEndpointInput deleteEndpointInput) throws ApiException {
        pOSTDeleteEndpointWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteEndpointInput);
    }

    /**
     * 
     * &lt;p&gt;Deletes the endpoint for a device and mobile app from Amazon SNS. This action is idempotent. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;When you delete an endpoint that is also subscribed to a topic, then you must also unsubscribe the endpoint from the topic.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteEndpointInput  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTDeleteEndpointWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteEndpointInput deleteEndpointInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteEndpointValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteEndpointInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the endpoint for a device and mobile app from Amazon SNS. This action is idempotent. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;When you delete an endpoint that is also subscribed to a topic, then you must also unsubscribe the endpoint from the topic.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteEndpointInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteEndpointAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteEndpointInput deleteEndpointInput, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteEndpointValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteEndpointInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeletePlatformApplication
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deletePlatformApplicationInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeletePlatformApplicationCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeletePlatformApplicationInput deletePlatformApplicationInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deletePlatformApplicationInput;

        // create path and map variables
        String localVarPath = "/#Action=DeletePlatformApplication";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeletePlatformApplicationValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeletePlatformApplicationInput deletePlatformApplicationInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeletePlatformApplication(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeletePlatformApplication(Async)");
        }

        return pOSTDeletePlatformApplicationCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deletePlatformApplicationInput, _callback);

    }

    /**
     * 
     * Deletes a platform application object for one of the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deletePlatformApplicationInput  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTDeletePlatformApplication(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeletePlatformApplicationInput deletePlatformApplicationInput) throws ApiException {
        pOSTDeletePlatformApplicationWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deletePlatformApplicationInput);
    }

    /**
     * 
     * Deletes a platform application object for one of the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deletePlatformApplicationInput  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTDeletePlatformApplicationWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeletePlatformApplicationInput deletePlatformApplicationInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeletePlatformApplicationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deletePlatformApplicationInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a platform application object for one of the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deletePlatformApplicationInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeletePlatformApplicationAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeletePlatformApplicationInput deletePlatformApplicationInput, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeletePlatformApplicationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deletePlatformApplicationInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteSMSSandboxPhoneNumber
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteSMSSandboxPhoneNumberInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteSMSSandboxPhoneNumberCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteSMSSandboxPhoneNumberInput deleteSMSSandboxPhoneNumberInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteSMSSandboxPhoneNumberInput;

        // create path and map variables
        String localVarPath = "/#Action=DeleteSMSSandboxPhoneNumber";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteSMSSandboxPhoneNumberValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteSMSSandboxPhoneNumberInput deleteSMSSandboxPhoneNumberInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteSMSSandboxPhoneNumber(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteSMSSandboxPhoneNumber(Async)");
        }

        return pOSTDeleteSMSSandboxPhoneNumberCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteSMSSandboxPhoneNumberInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes an Amazon Web Services account&#39;s verified or pending phone number from the SMS sandbox.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteSMSSandboxPhoneNumberInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTDeleteSMSSandboxPhoneNumber(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteSMSSandboxPhoneNumberInput deleteSMSSandboxPhoneNumberInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTDeleteSMSSandboxPhoneNumberWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteSMSSandboxPhoneNumberInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes an Amazon Web Services account&#39;s verified or pending phone number from the SMS sandbox.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteSMSSandboxPhoneNumberInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTDeleteSMSSandboxPhoneNumberWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteSMSSandboxPhoneNumberInput deleteSMSSandboxPhoneNumberInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteSMSSandboxPhoneNumberValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteSMSSandboxPhoneNumberInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes an Amazon Web Services account&#39;s verified or pending phone number from the SMS sandbox.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteSMSSandboxPhoneNumberInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteSMSSandboxPhoneNumberAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteSMSSandboxPhoneNumberInput deleteSMSSandboxPhoneNumberInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteSMSSandboxPhoneNumberValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteSMSSandboxPhoneNumberInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteTopic
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteTopicInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> StaleTagException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteTopicCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteTopicInput deleteTopicInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteTopicInput;

        // create path and map variables
        String localVarPath = "/#Action=DeleteTopic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteTopicValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteTopicInput deleteTopicInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteTopic(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteTopic(Async)");
        }

        return pOSTDeleteTopicCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteTopicInput, _callback);

    }

    /**
     * 
     * Deletes a topic and all its subscriptions. Deleting a topic might prevent some messages previously sent to the topic from being delivered to subscribers. This action is idempotent, so deleting a topic that does not exist does not result in an error.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteTopicInput  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> StaleTagException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTDeleteTopic(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteTopicInput deleteTopicInput) throws ApiException {
        pOSTDeleteTopicWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteTopicInput);
    }

    /**
     * 
     * Deletes a topic and all its subscriptions. Deleting a topic might prevent some messages previously sent to the topic from being delivered to subscribers. This action is idempotent, so deleting a topic that does not exist does not result in an error.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteTopicInput  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> StaleTagException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTDeleteTopicWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteTopicInput deleteTopicInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteTopicValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteTopicInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a topic and all its subscriptions. Deleting a topic might prevent some messages previously sent to the topic from being delivered to subscribers. This action is idempotent, so deleting a topic that does not exist does not result in an error.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteTopicInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> StaleTagException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteTopicAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteTopicInput deleteTopicInput, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteTopicValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteTopicInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTGetDataProtectionPolicy
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getDataProtectionPolicyInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetDataProtectionPolicyCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetDataProtectionPolicyInput getDataProtectionPolicyInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getDataProtectionPolicyInput;

        // create path and map variables
        String localVarPath = "/#Action=GetDataProtectionPolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTGetDataProtectionPolicyValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetDataProtectionPolicyInput getDataProtectionPolicyInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTGetDataProtectionPolicy(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTGetDataProtectionPolicy(Async)");
        }

        return pOSTGetDataProtectionPolicyCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getDataProtectionPolicyInput, _callback);

    }

    /**
     * 
     * Retrieves the specified inline &lt;code&gt;DataProtectionPolicy&lt;/code&gt; document that is stored in the specified Amazon SNS topic. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getDataProtectionPolicyInput  (optional)
     * @return GetDataProtectionPolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public GetDataProtectionPolicyResponse pOSTGetDataProtectionPolicy(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetDataProtectionPolicyInput getDataProtectionPolicyInput) throws ApiException {
        ApiResponse<GetDataProtectionPolicyResponse> localVarResp = pOSTGetDataProtectionPolicyWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getDataProtectionPolicyInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the specified inline &lt;code&gt;DataProtectionPolicy&lt;/code&gt; document that is stored in the specified Amazon SNS topic. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getDataProtectionPolicyInput  (optional)
     * @return ApiResponse&lt;GetDataProtectionPolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDataProtectionPolicyResponse> pOSTGetDataProtectionPolicyWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetDataProtectionPolicyInput getDataProtectionPolicyInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTGetDataProtectionPolicyValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getDataProtectionPolicyInput, null);
        Type localVarReturnType = new TypeToken<GetDataProtectionPolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the specified inline &lt;code&gt;DataProtectionPolicy&lt;/code&gt; document that is stored in the specified Amazon SNS topic. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getDataProtectionPolicyInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetDataProtectionPolicyAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetDataProtectionPolicyInput getDataProtectionPolicyInput, final ApiCallback<GetDataProtectionPolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTGetDataProtectionPolicyValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getDataProtectionPolicyInput, _callback);
        Type localVarReturnType = new TypeToken<GetDataProtectionPolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTGetEndpointAttributes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getEndpointAttributesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetEndpointAttributesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetEndpointAttributesInput getEndpointAttributesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getEndpointAttributesInput;

        // create path and map variables
        String localVarPath = "/#Action=GetEndpointAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTGetEndpointAttributesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetEndpointAttributesInput getEndpointAttributesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTGetEndpointAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTGetEndpointAttributes(Async)");
        }

        return pOSTGetEndpointAttributesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getEndpointAttributesInput, _callback);

    }

    /**
     * 
     * Retrieves the endpoint attributes for a device on one of the supported push notification services, such as GCM (Firebase Cloud Messaging) and APNS. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getEndpointAttributesInput  (optional)
     * @return GetEndpointAttributesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public GetEndpointAttributesResponse pOSTGetEndpointAttributes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetEndpointAttributesInput getEndpointAttributesInput) throws ApiException {
        ApiResponse<GetEndpointAttributesResponse> localVarResp = pOSTGetEndpointAttributesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getEndpointAttributesInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the endpoint attributes for a device on one of the supported push notification services, such as GCM (Firebase Cloud Messaging) and APNS. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getEndpointAttributesInput  (optional)
     * @return ApiResponse&lt;GetEndpointAttributesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetEndpointAttributesResponse> pOSTGetEndpointAttributesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetEndpointAttributesInput getEndpointAttributesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTGetEndpointAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getEndpointAttributesInput, null);
        Type localVarReturnType = new TypeToken<GetEndpointAttributesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the endpoint attributes for a device on one of the supported push notification services, such as GCM (Firebase Cloud Messaging) and APNS. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getEndpointAttributesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetEndpointAttributesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetEndpointAttributesInput getEndpointAttributesInput, final ApiCallback<GetEndpointAttributesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTGetEndpointAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getEndpointAttributesInput, _callback);
        Type localVarReturnType = new TypeToken<GetEndpointAttributesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTGetPlatformApplicationAttributes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getPlatformApplicationAttributesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetPlatformApplicationAttributesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetPlatformApplicationAttributesInput getPlatformApplicationAttributesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getPlatformApplicationAttributesInput;

        // create path and map variables
        String localVarPath = "/#Action=GetPlatformApplicationAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTGetPlatformApplicationAttributesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetPlatformApplicationAttributesInput getPlatformApplicationAttributesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTGetPlatformApplicationAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTGetPlatformApplicationAttributes(Async)");
        }

        return pOSTGetPlatformApplicationAttributesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getPlatformApplicationAttributesInput, _callback);

    }

    /**
     * 
     * Retrieves the attributes of the platform application object for the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getPlatformApplicationAttributesInput  (optional)
     * @return GetPlatformApplicationAttributesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public GetPlatformApplicationAttributesResponse pOSTGetPlatformApplicationAttributes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetPlatformApplicationAttributesInput getPlatformApplicationAttributesInput) throws ApiException {
        ApiResponse<GetPlatformApplicationAttributesResponse> localVarResp = pOSTGetPlatformApplicationAttributesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getPlatformApplicationAttributesInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the attributes of the platform application object for the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getPlatformApplicationAttributesInput  (optional)
     * @return ApiResponse&lt;GetPlatformApplicationAttributesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPlatformApplicationAttributesResponse> pOSTGetPlatformApplicationAttributesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetPlatformApplicationAttributesInput getPlatformApplicationAttributesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTGetPlatformApplicationAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getPlatformApplicationAttributesInput, null);
        Type localVarReturnType = new TypeToken<GetPlatformApplicationAttributesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the attributes of the platform application object for the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getPlatformApplicationAttributesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetPlatformApplicationAttributesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetPlatformApplicationAttributesInput getPlatformApplicationAttributesInput, final ApiCallback<GetPlatformApplicationAttributesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTGetPlatformApplicationAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getPlatformApplicationAttributesInput, _callback);
        Type localVarReturnType = new TypeToken<GetPlatformApplicationAttributesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTGetSMSAttributes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getSMSAttributesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetSMSAttributesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetSMSAttributesInput getSMSAttributesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getSMSAttributesInput;

        // create path and map variables
        String localVarPath = "/#Action=GetSMSAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTGetSMSAttributesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetSMSAttributesInput getSMSAttributesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTGetSMSAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTGetSMSAttributes(Async)");
        }

        return pOSTGetSMSAttributesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getSMSAttributesInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the settings for sending SMS messages from your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;These settings are set with the &lt;code&gt;SetSMSAttributes&lt;/code&gt; action.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getSMSAttributesInput  (optional)
     * @return GetSMSAttributesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public GetSMSAttributesResponse pOSTGetSMSAttributes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetSMSAttributesInput getSMSAttributesInput) throws ApiException {
        ApiResponse<GetSMSAttributesResponse> localVarResp = pOSTGetSMSAttributesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getSMSAttributesInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the settings for sending SMS messages from your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;These settings are set with the &lt;code&gt;SetSMSAttributes&lt;/code&gt; action.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getSMSAttributesInput  (optional)
     * @return ApiResponse&lt;GetSMSAttributesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSMSAttributesResponse> pOSTGetSMSAttributesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetSMSAttributesInput getSMSAttributesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTGetSMSAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getSMSAttributesInput, null);
        Type localVarReturnType = new TypeToken<GetSMSAttributesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the settings for sending SMS messages from your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;These settings are set with the &lt;code&gt;SetSMSAttributes&lt;/code&gt; action.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getSMSAttributesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetSMSAttributesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetSMSAttributesInput getSMSAttributesInput, final ApiCallback<GetSMSAttributesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTGetSMSAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getSMSAttributesInput, _callback);
        Type localVarReturnType = new TypeToken<GetSMSAttributesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTGetSMSSandboxAccountStatus
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetSMSSandboxAccountStatusCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/#Action=GetSMSSandboxAccountStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTGetSMSSandboxAccountStatusValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTGetSMSSandboxAccountStatus(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTGetSMSSandboxAccountStatus(Async)");
        }

        return pOSTGetSMSSandboxAccountStatusCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, body, _callback);

    }

    /**
     * 
     * &lt;p&gt;Retrieves the SMS sandbox status for the calling Amazon Web Services account in the target Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param body  (optional)
     * @return GetSMSSandboxAccountStatusResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public GetSMSSandboxAccountStatusResult pOSTGetSMSSandboxAccountStatus(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Object body) throws ApiException {
        ApiResponse<GetSMSSandboxAccountStatusResult> localVarResp = pOSTGetSMSSandboxAccountStatusWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, body);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Retrieves the SMS sandbox status for the calling Amazon Web Services account in the target Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;GetSMSSandboxAccountStatusResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSMSSandboxAccountStatusResult> pOSTGetSMSSandboxAccountStatusWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Object body) throws ApiException {
        okhttp3.Call localVarCall = pOSTGetSMSSandboxAccountStatusValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, body, null);
        Type localVarReturnType = new TypeToken<GetSMSSandboxAccountStatusResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Retrieves the SMS sandbox status for the calling Amazon Web Services account in the target Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetSMSSandboxAccountStatusAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Object body, final ApiCallback<GetSMSSandboxAccountStatusResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTGetSMSSandboxAccountStatusValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, body, _callback);
        Type localVarReturnType = new TypeToken<GetSMSSandboxAccountStatusResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTGetSubscriptionAttributes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getSubscriptionAttributesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetSubscriptionAttributesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetSubscriptionAttributesInput getSubscriptionAttributesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getSubscriptionAttributesInput;

        // create path and map variables
        String localVarPath = "/#Action=GetSubscriptionAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTGetSubscriptionAttributesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetSubscriptionAttributesInput getSubscriptionAttributesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTGetSubscriptionAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTGetSubscriptionAttributes(Async)");
        }

        return pOSTGetSubscriptionAttributesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getSubscriptionAttributesInput, _callback);

    }

    /**
     * 
     * Returns all of the properties of a subscription.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getSubscriptionAttributesInput  (optional)
     * @return GetSubscriptionAttributesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public GetSubscriptionAttributesResponse pOSTGetSubscriptionAttributes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetSubscriptionAttributesInput getSubscriptionAttributesInput) throws ApiException {
        ApiResponse<GetSubscriptionAttributesResponse> localVarResp = pOSTGetSubscriptionAttributesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getSubscriptionAttributesInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all of the properties of a subscription.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getSubscriptionAttributesInput  (optional)
     * @return ApiResponse&lt;GetSubscriptionAttributesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSubscriptionAttributesResponse> pOSTGetSubscriptionAttributesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetSubscriptionAttributesInput getSubscriptionAttributesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTGetSubscriptionAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getSubscriptionAttributesInput, null);
        Type localVarReturnType = new TypeToken<GetSubscriptionAttributesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all of the properties of a subscription.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getSubscriptionAttributesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetSubscriptionAttributesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetSubscriptionAttributesInput getSubscriptionAttributesInput, final ApiCallback<GetSubscriptionAttributesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTGetSubscriptionAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getSubscriptionAttributesInput, _callback);
        Type localVarReturnType = new TypeToken<GetSubscriptionAttributesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTGetTopicAttributes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getTopicAttributesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetTopicAttributesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetTopicAttributesInput getTopicAttributesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getTopicAttributesInput;

        // create path and map variables
        String localVarPath = "/#Action=GetTopicAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTGetTopicAttributesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetTopicAttributesInput getTopicAttributesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTGetTopicAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTGetTopicAttributes(Async)");
        }

        return pOSTGetTopicAttributesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getTopicAttributesInput, _callback);

    }

    /**
     * 
     * Returns all of the properties of a topic. Topic properties returned might differ based on the authorization of the user.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getTopicAttributesInput  (optional)
     * @return GetTopicAttributesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public GetTopicAttributesResponse pOSTGetTopicAttributes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetTopicAttributesInput getTopicAttributesInput) throws ApiException {
        ApiResponse<GetTopicAttributesResponse> localVarResp = pOSTGetTopicAttributesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getTopicAttributesInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all of the properties of a topic. Topic properties returned might differ based on the authorization of the user.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getTopicAttributesInput  (optional)
     * @return ApiResponse&lt;GetTopicAttributesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTopicAttributesResponse> pOSTGetTopicAttributesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetTopicAttributesInput getTopicAttributesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTGetTopicAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getTopicAttributesInput, null);
        Type localVarReturnType = new TypeToken<GetTopicAttributesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all of the properties of a topic. Topic properties returned might differ based on the authorization of the user.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getTopicAttributesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetTopicAttributesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetTopicAttributesInput getTopicAttributesInput, final ApiCallback<GetTopicAttributesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTGetTopicAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getTopicAttributesInput, _callback);
        Type localVarReturnType = new TypeToken<GetTopicAttributesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListEndpointsByPlatformApplication
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listEndpointsByPlatformApplicationInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListEndpointsByPlatformApplicationCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListEndpointsByPlatformApplicationInput listEndpointsByPlatformApplicationInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listEndpointsByPlatformApplicationInput;

        // create path and map variables
        String localVarPath = "/#Action=ListEndpointsByPlatformApplication";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListEndpointsByPlatformApplicationValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListEndpointsByPlatformApplicationInput listEndpointsByPlatformApplicationInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListEndpointsByPlatformApplication(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListEndpointsByPlatformApplication(Async)");
        }

        return pOSTListEndpointsByPlatformApplicationCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listEndpointsByPlatformApplicationInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the endpoints and endpoint attributes for devices in a supported push notification service, such as GCM (Firebase Cloud Messaging) and APNS. The results for &lt;code&gt;ListEndpointsByPlatformApplication&lt;/code&gt; are paginated and return a limited list of endpoints, up to 100. If additional records are available after the first page results, then a NextToken string will be returned. To receive the next page, you call &lt;code&gt;ListEndpointsByPlatformApplication&lt;/code&gt; again using the NextToken string received from the previous call. When there are no more records to return, NextToken will be null. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;This action is throttled at 30 transactions per second (TPS).&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listEndpointsByPlatformApplicationInput  (optional)
     * @return ListEndpointsByPlatformApplicationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ListEndpointsByPlatformApplicationResponse pOSTListEndpointsByPlatformApplication(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListEndpointsByPlatformApplicationInput listEndpointsByPlatformApplicationInput) throws ApiException {
        ApiResponse<ListEndpointsByPlatformApplicationResponse> localVarResp = pOSTListEndpointsByPlatformApplicationWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listEndpointsByPlatformApplicationInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the endpoints and endpoint attributes for devices in a supported push notification service, such as GCM (Firebase Cloud Messaging) and APNS. The results for &lt;code&gt;ListEndpointsByPlatformApplication&lt;/code&gt; are paginated and return a limited list of endpoints, up to 100. If additional records are available after the first page results, then a NextToken string will be returned. To receive the next page, you call &lt;code&gt;ListEndpointsByPlatformApplication&lt;/code&gt; again using the NextToken string received from the previous call. When there are no more records to return, NextToken will be null. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;This action is throttled at 30 transactions per second (TPS).&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listEndpointsByPlatformApplicationInput  (optional)
     * @return ApiResponse&lt;ListEndpointsByPlatformApplicationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListEndpointsByPlatformApplicationResponse> pOSTListEndpointsByPlatformApplicationWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListEndpointsByPlatformApplicationInput listEndpointsByPlatformApplicationInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTListEndpointsByPlatformApplicationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listEndpointsByPlatformApplicationInput, null);
        Type localVarReturnType = new TypeToken<ListEndpointsByPlatformApplicationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the endpoints and endpoint attributes for devices in a supported push notification service, such as GCM (Firebase Cloud Messaging) and APNS. The results for &lt;code&gt;ListEndpointsByPlatformApplication&lt;/code&gt; are paginated and return a limited list of endpoints, up to 100. If additional records are available after the first page results, then a NextToken string will be returned. To receive the next page, you call &lt;code&gt;ListEndpointsByPlatformApplication&lt;/code&gt; again using the NextToken string received from the previous call. When there are no more records to return, NextToken will be null. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;This action is throttled at 30 transactions per second (TPS).&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listEndpointsByPlatformApplicationInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListEndpointsByPlatformApplicationAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListEndpointsByPlatformApplicationInput listEndpointsByPlatformApplicationInput, final ApiCallback<ListEndpointsByPlatformApplicationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListEndpointsByPlatformApplicationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listEndpointsByPlatformApplicationInput, _callback);
        Type localVarReturnType = new TypeToken<ListEndpointsByPlatformApplicationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListOriginationNumbers
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listOriginationNumbersRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListOriginationNumbersCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListOriginationNumbersRequest listOriginationNumbersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listOriginationNumbersRequest;

        // create path and map variables
        String localVarPath = "/#Action=ListOriginationNumbers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListOriginationNumbersValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListOriginationNumbersRequest listOriginationNumbersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListOriginationNumbers(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListOriginationNumbers(Async)");
        }

        return pOSTListOriginationNumbersCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listOriginationNumbersRequest, _callback);

    }

    /**
     * 
     * Lists the calling Amazon Web Services account&#39;s dedicated origination numbers and their metadata. For more information about origination numbers, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/channels-sms-originating-identities-origination-numbers.html\&quot;&gt;Origination numbers&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listOriginationNumbersRequest  (optional)
     * @return ListOriginationNumbersResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public ListOriginationNumbersResult pOSTListOriginationNumbers(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListOriginationNumbersRequest listOriginationNumbersRequest) throws ApiException {
        ApiResponse<ListOriginationNumbersResult> localVarResp = pOSTListOriginationNumbersWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listOriginationNumbersRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the calling Amazon Web Services account&#39;s dedicated origination numbers and their metadata. For more information about origination numbers, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/channels-sms-originating-identities-origination-numbers.html\&quot;&gt;Origination numbers&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listOriginationNumbersRequest  (optional)
     * @return ApiResponse&lt;ListOriginationNumbersResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListOriginationNumbersResult> pOSTListOriginationNumbersWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListOriginationNumbersRequest listOriginationNumbersRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTListOriginationNumbersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listOriginationNumbersRequest, null);
        Type localVarReturnType = new TypeToken<ListOriginationNumbersResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the calling Amazon Web Services account&#39;s dedicated origination numbers and their metadata. For more information about origination numbers, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/channels-sms-originating-identities-origination-numbers.html\&quot;&gt;Origination numbers&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listOriginationNumbersRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListOriginationNumbersAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListOriginationNumbersRequest listOriginationNumbersRequest, final ApiCallback<ListOriginationNumbersResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListOriginationNumbersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listOriginationNumbersRequest, _callback);
        Type localVarReturnType = new TypeToken<ListOriginationNumbersResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListPhoneNumbersOptedOut
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listPhoneNumbersOptedOutInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListPhoneNumbersOptedOutCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListPhoneNumbersOptedOutInput listPhoneNumbersOptedOutInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listPhoneNumbersOptedOutInput;

        // create path and map variables
        String localVarPath = "/#Action=ListPhoneNumbersOptedOut";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListPhoneNumbersOptedOutValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListPhoneNumbersOptedOutInput listPhoneNumbersOptedOutInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListPhoneNumbersOptedOut(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListPhoneNumbersOptedOut(Async)");
        }

        return pOSTListPhoneNumbersOptedOutCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listPhoneNumbersOptedOutInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns a list of phone numbers that are opted out, meaning you cannot send SMS messages to them.&lt;/p&gt; &lt;p&gt;The results for &lt;code&gt;ListPhoneNumbersOptedOut&lt;/code&gt; are paginated, and each page returns up to 100 phone numbers. If additional phone numbers are available after the first page of results, then a &lt;code&gt;NextToken&lt;/code&gt; string will be returned. To receive the next page, you call &lt;code&gt;ListPhoneNumbersOptedOut&lt;/code&gt; again using the &lt;code&gt;NextToken&lt;/code&gt; string received from the previous call. When there are no more records to return, &lt;code&gt;NextToken&lt;/code&gt; will be null.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listPhoneNumbersOptedOutInput  (optional)
     * @return ListPhoneNumbersOptedOutResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ListPhoneNumbersOptedOutResponse pOSTListPhoneNumbersOptedOut(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListPhoneNumbersOptedOutInput listPhoneNumbersOptedOutInput) throws ApiException {
        ApiResponse<ListPhoneNumbersOptedOutResponse> localVarResp = pOSTListPhoneNumbersOptedOutWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listPhoneNumbersOptedOutInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns a list of phone numbers that are opted out, meaning you cannot send SMS messages to them.&lt;/p&gt; &lt;p&gt;The results for &lt;code&gt;ListPhoneNumbersOptedOut&lt;/code&gt; are paginated, and each page returns up to 100 phone numbers. If additional phone numbers are available after the first page of results, then a &lt;code&gt;NextToken&lt;/code&gt; string will be returned. To receive the next page, you call &lt;code&gt;ListPhoneNumbersOptedOut&lt;/code&gt; again using the &lt;code&gt;NextToken&lt;/code&gt; string received from the previous call. When there are no more records to return, &lt;code&gt;NextToken&lt;/code&gt; will be null.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listPhoneNumbersOptedOutInput  (optional)
     * @return ApiResponse&lt;ListPhoneNumbersOptedOutResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListPhoneNumbersOptedOutResponse> pOSTListPhoneNumbersOptedOutWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListPhoneNumbersOptedOutInput listPhoneNumbersOptedOutInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTListPhoneNumbersOptedOutValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listPhoneNumbersOptedOutInput, null);
        Type localVarReturnType = new TypeToken<ListPhoneNumbersOptedOutResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns a list of phone numbers that are opted out, meaning you cannot send SMS messages to them.&lt;/p&gt; &lt;p&gt;The results for &lt;code&gt;ListPhoneNumbersOptedOut&lt;/code&gt; are paginated, and each page returns up to 100 phone numbers. If additional phone numbers are available after the first page of results, then a &lt;code&gt;NextToken&lt;/code&gt; string will be returned. To receive the next page, you call &lt;code&gt;ListPhoneNumbersOptedOut&lt;/code&gt; again using the &lt;code&gt;NextToken&lt;/code&gt; string received from the previous call. When there are no more records to return, &lt;code&gt;NextToken&lt;/code&gt; will be null.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listPhoneNumbersOptedOutInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListPhoneNumbersOptedOutAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListPhoneNumbersOptedOutInput listPhoneNumbersOptedOutInput, final ApiCallback<ListPhoneNumbersOptedOutResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListPhoneNumbersOptedOutValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listPhoneNumbersOptedOutInput, _callback);
        Type localVarReturnType = new TypeToken<ListPhoneNumbersOptedOutResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListPlatformApplications
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listPlatformApplicationsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListPlatformApplicationsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListPlatformApplicationsInput listPlatformApplicationsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listPlatformApplicationsInput;

        // create path and map variables
        String localVarPath = "/#Action=ListPlatformApplications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListPlatformApplicationsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListPlatformApplicationsInput listPlatformApplicationsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListPlatformApplications(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListPlatformApplications(Async)");
        }

        return pOSTListPlatformApplicationsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listPlatformApplicationsInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the platform application objects for the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). The results for &lt;code&gt;ListPlatformApplications&lt;/code&gt; are paginated and return a limited list of applications, up to 100. If additional records are available after the first page results, then a NextToken string will be returned. To receive the next page, you call &lt;code&gt;ListPlatformApplications&lt;/code&gt; using the NextToken string received from the previous call. When there are no more records to return, &lt;code&gt;NextToken&lt;/code&gt; will be null. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;This action is throttled at 15 transactions per second (TPS).&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listPlatformApplicationsInput  (optional)
     * @return ListPlatformApplicationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ListPlatformApplicationsResponse pOSTListPlatformApplications(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListPlatformApplicationsInput listPlatformApplicationsInput) throws ApiException {
        ApiResponse<ListPlatformApplicationsResponse> localVarResp = pOSTListPlatformApplicationsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listPlatformApplicationsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the platform application objects for the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). The results for &lt;code&gt;ListPlatformApplications&lt;/code&gt; are paginated and return a limited list of applications, up to 100. If additional records are available after the first page results, then a NextToken string will be returned. To receive the next page, you call &lt;code&gt;ListPlatformApplications&lt;/code&gt; using the NextToken string received from the previous call. When there are no more records to return, &lt;code&gt;NextToken&lt;/code&gt; will be null. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;This action is throttled at 15 transactions per second (TPS).&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listPlatformApplicationsInput  (optional)
     * @return ApiResponse&lt;ListPlatformApplicationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListPlatformApplicationsResponse> pOSTListPlatformApplicationsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListPlatformApplicationsInput listPlatformApplicationsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTListPlatformApplicationsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listPlatformApplicationsInput, null);
        Type localVarReturnType = new TypeToken<ListPlatformApplicationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the platform application objects for the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). The results for &lt;code&gt;ListPlatformApplications&lt;/code&gt; are paginated and return a limited list of applications, up to 100. If additional records are available after the first page results, then a NextToken string will be returned. To receive the next page, you call &lt;code&gt;ListPlatformApplications&lt;/code&gt; using the NextToken string received from the previous call. When there are no more records to return, &lt;code&gt;NextToken&lt;/code&gt; will be null. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;This action is throttled at 15 transactions per second (TPS).&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listPlatformApplicationsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListPlatformApplicationsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListPlatformApplicationsInput listPlatformApplicationsInput, final ApiCallback<ListPlatformApplicationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListPlatformApplicationsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listPlatformApplicationsInput, _callback);
        Type localVarReturnType = new TypeToken<ListPlatformApplicationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListSMSSandboxPhoneNumbers
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listSMSSandboxPhoneNumbersInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListSMSSandboxPhoneNumbersCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListSMSSandboxPhoneNumbersInput listSMSSandboxPhoneNumbersInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listSMSSandboxPhoneNumbersInput;

        // create path and map variables
        String localVarPath = "/#Action=ListSMSSandboxPhoneNumbers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListSMSSandboxPhoneNumbersValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListSMSSandboxPhoneNumbersInput listSMSSandboxPhoneNumbersInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListSMSSandboxPhoneNumbers(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListSMSSandboxPhoneNumbers(Async)");
        }

        return pOSTListSMSSandboxPhoneNumbersCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listSMSSandboxPhoneNumbersInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the calling Amazon Web Services account&#39;s current verified and pending destination phone numbers in the SMS sandbox.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listSMSSandboxPhoneNumbersInput  (optional)
     * @return ListSMSSandboxPhoneNumbersResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public ListSMSSandboxPhoneNumbersResult pOSTListSMSSandboxPhoneNumbers(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListSMSSandboxPhoneNumbersInput listSMSSandboxPhoneNumbersInput) throws ApiException {
        ApiResponse<ListSMSSandboxPhoneNumbersResult> localVarResp = pOSTListSMSSandboxPhoneNumbersWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listSMSSandboxPhoneNumbersInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the calling Amazon Web Services account&#39;s current verified and pending destination phone numbers in the SMS sandbox.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listSMSSandboxPhoneNumbersInput  (optional)
     * @return ApiResponse&lt;ListSMSSandboxPhoneNumbersResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSMSSandboxPhoneNumbersResult> pOSTListSMSSandboxPhoneNumbersWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListSMSSandboxPhoneNumbersInput listSMSSandboxPhoneNumbersInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTListSMSSandboxPhoneNumbersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listSMSSandboxPhoneNumbersInput, null);
        Type localVarReturnType = new TypeToken<ListSMSSandboxPhoneNumbersResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the calling Amazon Web Services account&#39;s current verified and pending destination phone numbers in the SMS sandbox.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listSMSSandboxPhoneNumbersInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListSMSSandboxPhoneNumbersAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListSMSSandboxPhoneNumbersInput listSMSSandboxPhoneNumbersInput, final ApiCallback<ListSMSSandboxPhoneNumbersResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListSMSSandboxPhoneNumbersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listSMSSandboxPhoneNumbersInput, _callback);
        Type localVarReturnType = new TypeToken<ListSMSSandboxPhoneNumbersResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListSubscriptions
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listSubscriptionsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListSubscriptionsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListSubscriptionsInput listSubscriptionsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listSubscriptionsInput;

        // create path and map variables
        String localVarPath = "/#Action=ListSubscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListSubscriptionsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListSubscriptionsInput listSubscriptionsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListSubscriptions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListSubscriptions(Async)");
        }

        return pOSTListSubscriptionsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listSubscriptionsInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns a list of the requester&#39;s subscriptions. Each call returns a limited list of subscriptions, up to 100. If there are more subscriptions, a &lt;code&gt;NextToken&lt;/code&gt; is also returned. Use the &lt;code&gt;NextToken&lt;/code&gt; parameter in a new &lt;code&gt;ListSubscriptions&lt;/code&gt; call to get further results.&lt;/p&gt; &lt;p&gt;This action is throttled at 30 transactions per second (TPS).&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listSubscriptionsInput  (optional)
     * @return ListSubscriptionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ListSubscriptionsResponse pOSTListSubscriptions(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListSubscriptionsInput listSubscriptionsInput) throws ApiException {
        ApiResponse<ListSubscriptionsResponse> localVarResp = pOSTListSubscriptionsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listSubscriptionsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns a list of the requester&#39;s subscriptions. Each call returns a limited list of subscriptions, up to 100. If there are more subscriptions, a &lt;code&gt;NextToken&lt;/code&gt; is also returned. Use the &lt;code&gt;NextToken&lt;/code&gt; parameter in a new &lt;code&gt;ListSubscriptions&lt;/code&gt; call to get further results.&lt;/p&gt; &lt;p&gt;This action is throttled at 30 transactions per second (TPS).&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listSubscriptionsInput  (optional)
     * @return ApiResponse&lt;ListSubscriptionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSubscriptionsResponse> pOSTListSubscriptionsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListSubscriptionsInput listSubscriptionsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTListSubscriptionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listSubscriptionsInput, null);
        Type localVarReturnType = new TypeToken<ListSubscriptionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns a list of the requester&#39;s subscriptions. Each call returns a limited list of subscriptions, up to 100. If there are more subscriptions, a &lt;code&gt;NextToken&lt;/code&gt; is also returned. Use the &lt;code&gt;NextToken&lt;/code&gt; parameter in a new &lt;code&gt;ListSubscriptions&lt;/code&gt; call to get further results.&lt;/p&gt; &lt;p&gt;This action is throttled at 30 transactions per second (TPS).&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listSubscriptionsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListSubscriptionsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListSubscriptionsInput listSubscriptionsInput, final ApiCallback<ListSubscriptionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListSubscriptionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listSubscriptionsInput, _callback);
        Type localVarReturnType = new TypeToken<ListSubscriptionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListSubscriptionsByTopic
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listSubscriptionsByTopicInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListSubscriptionsByTopicCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListSubscriptionsByTopicInput listSubscriptionsByTopicInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listSubscriptionsByTopicInput;

        // create path and map variables
        String localVarPath = "/#Action=ListSubscriptionsByTopic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListSubscriptionsByTopicValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListSubscriptionsByTopicInput listSubscriptionsByTopicInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListSubscriptionsByTopic(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListSubscriptionsByTopic(Async)");
        }

        return pOSTListSubscriptionsByTopicCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listSubscriptionsByTopicInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns a list of the subscriptions to a specific topic. Each call returns a limited list of subscriptions, up to 100. If there are more subscriptions, a &lt;code&gt;NextToken&lt;/code&gt; is also returned. Use the &lt;code&gt;NextToken&lt;/code&gt; parameter in a new &lt;code&gt;ListSubscriptionsByTopic&lt;/code&gt; call to get further results.&lt;/p&gt; &lt;p&gt;This action is throttled at 30 transactions per second (TPS).&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listSubscriptionsByTopicInput  (optional)
     * @return ListSubscriptionsByTopicResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ListSubscriptionsByTopicResponse pOSTListSubscriptionsByTopic(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListSubscriptionsByTopicInput listSubscriptionsByTopicInput) throws ApiException {
        ApiResponse<ListSubscriptionsByTopicResponse> localVarResp = pOSTListSubscriptionsByTopicWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listSubscriptionsByTopicInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns a list of the subscriptions to a specific topic. Each call returns a limited list of subscriptions, up to 100. If there are more subscriptions, a &lt;code&gt;NextToken&lt;/code&gt; is also returned. Use the &lt;code&gt;NextToken&lt;/code&gt; parameter in a new &lt;code&gt;ListSubscriptionsByTopic&lt;/code&gt; call to get further results.&lt;/p&gt; &lt;p&gt;This action is throttled at 30 transactions per second (TPS).&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listSubscriptionsByTopicInput  (optional)
     * @return ApiResponse&lt;ListSubscriptionsByTopicResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSubscriptionsByTopicResponse> pOSTListSubscriptionsByTopicWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListSubscriptionsByTopicInput listSubscriptionsByTopicInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTListSubscriptionsByTopicValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listSubscriptionsByTopicInput, null);
        Type localVarReturnType = new TypeToken<ListSubscriptionsByTopicResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns a list of the subscriptions to a specific topic. Each call returns a limited list of subscriptions, up to 100. If there are more subscriptions, a &lt;code&gt;NextToken&lt;/code&gt; is also returned. Use the &lt;code&gt;NextToken&lt;/code&gt; parameter in a new &lt;code&gt;ListSubscriptionsByTopic&lt;/code&gt; call to get further results.&lt;/p&gt; &lt;p&gt;This action is throttled at 30 transactions per second (TPS).&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listSubscriptionsByTopicInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListSubscriptionsByTopicAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListSubscriptionsByTopicInput listSubscriptionsByTopicInput, final ApiCallback<ListSubscriptionsByTopicResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListSubscriptionsByTopicValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listSubscriptionsByTopicInput, _callback);
        Type localVarReturnType = new TypeToken<ListSubscriptionsByTopicResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListTagsForResource
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listTagsForResourceRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListTagsForResourceCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListTagsForResourceRequest listTagsForResourceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listTagsForResourceRequest;

        // create path and map variables
        String localVarPath = "/#Action=ListTagsForResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListTagsForResourceValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListTagsForResourceRequest listTagsForResourceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListTagsForResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListTagsForResource(Async)");
        }

        return pOSTListTagsForResourceCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listTagsForResourceRequest, _callback);

    }

    /**
     * 
     * List all tags added to the specified Amazon SNS topic. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html\&quot;&gt;Amazon SNS Tags&lt;/a&gt; in the &lt;i&gt;Amazon Simple Notification Service Developer Guide&lt;/i&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listTagsForResourceRequest  (optional)
     * @return ListTagsForResourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public ListTagsForResourceResponse pOSTListTagsForResource(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListTagsForResourceRequest listTagsForResourceRequest) throws ApiException {
        ApiResponse<ListTagsForResourceResponse> localVarResp = pOSTListTagsForResourceWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listTagsForResourceRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * List all tags added to the specified Amazon SNS topic. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html\&quot;&gt;Amazon SNS Tags&lt;/a&gt; in the &lt;i&gt;Amazon Simple Notification Service Developer Guide&lt;/i&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listTagsForResourceRequest  (optional)
     * @return ApiResponse&lt;ListTagsForResourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTagsForResourceResponse> pOSTListTagsForResourceWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListTagsForResourceRequest listTagsForResourceRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTListTagsForResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listTagsForResourceRequest, null);
        Type localVarReturnType = new TypeToken<ListTagsForResourceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all tags added to the specified Amazon SNS topic. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html\&quot;&gt;Amazon SNS Tags&lt;/a&gt; in the &lt;i&gt;Amazon Simple Notification Service Developer Guide&lt;/i&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listTagsForResourceRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListTagsForResourceAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListTagsForResourceRequest listTagsForResourceRequest, final ApiCallback<ListTagsForResourceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListTagsForResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listTagsForResourceRequest, _callback);
        Type localVarReturnType = new TypeToken<ListTagsForResourceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListTopics
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listTopicsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListTopicsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListTopicsInput listTopicsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listTopicsInput;

        // create path and map variables
        String localVarPath = "/#Action=ListTopics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListTopicsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListTopicsInput listTopicsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListTopics(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListTopics(Async)");
        }

        return pOSTListTopicsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listTopicsInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns a list of the requester&#39;s topics. Each call returns a limited list of topics, up to 100. If there are more topics, a &lt;code&gt;NextToken&lt;/code&gt; is also returned. Use the &lt;code&gt;NextToken&lt;/code&gt; parameter in a new &lt;code&gt;ListTopics&lt;/code&gt; call to get further results.&lt;/p&gt; &lt;p&gt;This action is throttled at 30 transactions per second (TPS).&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listTopicsInput  (optional)
     * @return ListTopicsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ListTopicsResponse pOSTListTopics(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListTopicsInput listTopicsInput) throws ApiException {
        ApiResponse<ListTopicsResponse> localVarResp = pOSTListTopicsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listTopicsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns a list of the requester&#39;s topics. Each call returns a limited list of topics, up to 100. If there are more topics, a &lt;code&gt;NextToken&lt;/code&gt; is also returned. Use the &lt;code&gt;NextToken&lt;/code&gt; parameter in a new &lt;code&gt;ListTopics&lt;/code&gt; call to get further results.&lt;/p&gt; &lt;p&gt;This action is throttled at 30 transactions per second (TPS).&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listTopicsInput  (optional)
     * @return ApiResponse&lt;ListTopicsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTopicsResponse> pOSTListTopicsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListTopicsInput listTopicsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTListTopicsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listTopicsInput, null);
        Type localVarReturnType = new TypeToken<ListTopicsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns a list of the requester&#39;s topics. Each call returns a limited list of topics, up to 100. If there are more topics, a &lt;code&gt;NextToken&lt;/code&gt; is also returned. Use the &lt;code&gt;NextToken&lt;/code&gt; parameter in a new &lt;code&gt;ListTopics&lt;/code&gt; call to get further results.&lt;/p&gt; &lt;p&gt;This action is throttled at 30 transactions per second (TPS).&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listTopicsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListTopicsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListTopicsInput listTopicsInput, final ApiCallback<ListTopicsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListTopicsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listTopicsInput, _callback);
        Type localVarReturnType = new TypeToken<ListTopicsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTOptInPhoneNumber
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param optInPhoneNumberInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTOptInPhoneNumberCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, OptInPhoneNumberInput optInPhoneNumberInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = optInPhoneNumberInput;

        // create path and map variables
        String localVarPath = "/#Action=OptInPhoneNumber";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTOptInPhoneNumberValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, OptInPhoneNumberInput optInPhoneNumberInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTOptInPhoneNumber(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTOptInPhoneNumber(Async)");
        }

        return pOSTOptInPhoneNumberCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, optInPhoneNumberInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Use this request to opt in a phone number that is opted out, which enables you to resume sending SMS messages to the number.&lt;/p&gt; &lt;p&gt;You can opt in a phone number only once every 30 days.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param optInPhoneNumberInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTOptInPhoneNumber(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, OptInPhoneNumberInput optInPhoneNumberInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTOptInPhoneNumberWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, optInPhoneNumberInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Use this request to opt in a phone number that is opted out, which enables you to resume sending SMS messages to the number.&lt;/p&gt; &lt;p&gt;You can opt in a phone number only once every 30 days.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param optInPhoneNumberInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTOptInPhoneNumberWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, OptInPhoneNumberInput optInPhoneNumberInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTOptInPhoneNumberValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, optInPhoneNumberInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Use this request to opt in a phone number that is opted out, which enables you to resume sending SMS messages to the number.&lt;/p&gt; &lt;p&gt;You can opt in a phone number only once every 30 days.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param optInPhoneNumberInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTOptInPhoneNumberAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, OptInPhoneNumberInput optInPhoneNumberInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTOptInPhoneNumberValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, optInPhoneNumberInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTPublish
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param publishInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EndpointDisabledException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PlatformApplicationDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> KMSDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> KMSInvalidStateException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> KMSNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> KMSOptInRequired </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> KMSThrottlingException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> KMSAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPublishCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PublishInput publishInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = publishInput;

        // create path and map variables
        String localVarPath = "/#Action=Publish";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTPublishValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PublishInput publishInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTPublish(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTPublish(Async)");
        }

        return pOSTPublishCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, publishInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Sends a message to an Amazon SNS topic, a text message (SMS message) directly to a phone number, or a message to a mobile platform endpoint (when you specify the &lt;code&gt;TargetArn&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;If you send a message to a topic, Amazon SNS delivers the message to each endpoint that is subscribed to the topic. The format of the message depends on the notification protocol for each subscribed endpoint.&lt;/p&gt; &lt;p&gt;When a &lt;code&gt;messageId&lt;/code&gt; is returned, the message is saved and Amazon SNS immediately delivers it to subscribers.&lt;/p&gt; &lt;p&gt;To use the &lt;code&gt;Publish&lt;/code&gt; action for publishing a message to a mobile endpoint, such as an app on a Kindle device or mobile phone, you must specify the EndpointArn for the TargetArn parameter. The EndpointArn is returned when making a call with the &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; action. &lt;/p&gt; &lt;p&gt;For more information about formatting messages, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/mobile-push-send-custommessage.html\&quot;&gt;Send Custom Platform-Specific Payloads in Messages to Mobile Devices&lt;/a&gt;. &lt;/p&gt; &lt;important&gt; &lt;p&gt;You can publish messages only to topics and endpoints in the same Amazon Web Services Region.&lt;/p&gt; &lt;/important&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param publishInput  (optional)
     * @return PublishResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EndpointDisabledException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PlatformApplicationDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> KMSDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> KMSInvalidStateException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> KMSNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> KMSOptInRequired </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> KMSThrottlingException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> KMSAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public PublishResponse pOSTPublish(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PublishInput publishInput) throws ApiException {
        ApiResponse<PublishResponse> localVarResp = pOSTPublishWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, publishInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Sends a message to an Amazon SNS topic, a text message (SMS message) directly to a phone number, or a message to a mobile platform endpoint (when you specify the &lt;code&gt;TargetArn&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;If you send a message to a topic, Amazon SNS delivers the message to each endpoint that is subscribed to the topic. The format of the message depends on the notification protocol for each subscribed endpoint.&lt;/p&gt; &lt;p&gt;When a &lt;code&gt;messageId&lt;/code&gt; is returned, the message is saved and Amazon SNS immediately delivers it to subscribers.&lt;/p&gt; &lt;p&gt;To use the &lt;code&gt;Publish&lt;/code&gt; action for publishing a message to a mobile endpoint, such as an app on a Kindle device or mobile phone, you must specify the EndpointArn for the TargetArn parameter. The EndpointArn is returned when making a call with the &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; action. &lt;/p&gt; &lt;p&gt;For more information about formatting messages, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/mobile-push-send-custommessage.html\&quot;&gt;Send Custom Platform-Specific Payloads in Messages to Mobile Devices&lt;/a&gt;. &lt;/p&gt; &lt;important&gt; &lt;p&gt;You can publish messages only to topics and endpoints in the same Amazon Web Services Region.&lt;/p&gt; &lt;/important&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param publishInput  (optional)
     * @return ApiResponse&lt;PublishResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EndpointDisabledException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PlatformApplicationDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> KMSDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> KMSInvalidStateException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> KMSNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> KMSOptInRequired </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> KMSThrottlingException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> KMSAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublishResponse> pOSTPublishWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PublishInput publishInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTPublishValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, publishInput, null);
        Type localVarReturnType = new TypeToken<PublishResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Sends a message to an Amazon SNS topic, a text message (SMS message) directly to a phone number, or a message to a mobile platform endpoint (when you specify the &lt;code&gt;TargetArn&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;If you send a message to a topic, Amazon SNS delivers the message to each endpoint that is subscribed to the topic. The format of the message depends on the notification protocol for each subscribed endpoint.&lt;/p&gt; &lt;p&gt;When a &lt;code&gt;messageId&lt;/code&gt; is returned, the message is saved and Amazon SNS immediately delivers it to subscribers.&lt;/p&gt; &lt;p&gt;To use the &lt;code&gt;Publish&lt;/code&gt; action for publishing a message to a mobile endpoint, such as an app on a Kindle device or mobile phone, you must specify the EndpointArn for the TargetArn parameter. The EndpointArn is returned when making a call with the &lt;code&gt;CreatePlatformEndpoint&lt;/code&gt; action. &lt;/p&gt; &lt;p&gt;For more information about formatting messages, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/mobile-push-send-custommessage.html\&quot;&gt;Send Custom Platform-Specific Payloads in Messages to Mobile Devices&lt;/a&gt;. &lt;/p&gt; &lt;important&gt; &lt;p&gt;You can publish messages only to topics and endpoints in the same Amazon Web Services Region.&lt;/p&gt; &lt;/important&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param publishInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EndpointDisabledException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PlatformApplicationDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> KMSDisabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> KMSInvalidStateException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> KMSNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> KMSOptInRequired </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> KMSThrottlingException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> KMSAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPublishAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PublishInput publishInput, final ApiCallback<PublishResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTPublishValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, publishInput, _callback);
        Type localVarReturnType = new TypeToken<PublishResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTPublishBatch
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param publishBatchInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EndpointDisabledException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PlatformApplicationDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> BatchEntryIdsNotDistinctException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> BatchRequestTooLongException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EmptyBatchRequestException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidBatchEntryIdException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyEntriesInBatchRequestException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> KMSDisabledException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> KMSInvalidStateException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> KMSNotFoundException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> KMSOptInRequired </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> KMSThrottlingException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> KMSAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPublishBatchCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PublishBatchInput publishBatchInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = publishBatchInput;

        // create path and map variables
        String localVarPath = "/#Action=PublishBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTPublishBatchValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PublishBatchInput publishBatchInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTPublishBatch(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTPublishBatch(Async)");
        }

        return pOSTPublishBatchCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, publishBatchInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Publishes up to ten messages to the specified topic. This is a batch version of &lt;code&gt;Publish&lt;/code&gt;. For FIFO topics, multiple messages within a single batch are published in the order they are sent, and messages are deduplicated within the batch and across batches for 5 minutes.&lt;/p&gt; &lt;p&gt;The result of publishing each message is reported individually in the response. Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of &lt;code&gt;200&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The maximum allowed individual message size and the maximum total payload size (the sum of the individual lengths of all of the batched messages) are both 256 KB (262,144 bytes). &lt;/p&gt; &lt;p&gt;Some actions take lists of parameters. These lists are specified using the &lt;code&gt;param.n&lt;/code&gt; notation. Values of &lt;code&gt;n&lt;/code&gt; are integers starting from 1. For example, a parameter list with two elements looks like this: &lt;/p&gt; &lt;p&gt;&amp;amp;AttributeName.1&#x3D;first&lt;/p&gt; &lt;p&gt;&amp;amp;AttributeName.2&#x3D;second&lt;/p&gt; &lt;p&gt;If you send a batch message to a topic, Amazon SNS publishes the batch message to each endpoint that is subscribed to the topic. The format of the batch message depends on the notification protocol for each subscribed endpoint.&lt;/p&gt; &lt;p&gt;When a &lt;code&gt;messageId&lt;/code&gt; is returned, the batch message is saved and Amazon SNS immediately delivers the message to subscribers.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param publishBatchInput  (optional)
     * @return PublishBatchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EndpointDisabledException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PlatformApplicationDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> BatchEntryIdsNotDistinctException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> BatchRequestTooLongException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EmptyBatchRequestException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidBatchEntryIdException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyEntriesInBatchRequestException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> KMSDisabledException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> KMSInvalidStateException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> KMSNotFoundException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> KMSOptInRequired </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> KMSThrottlingException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> KMSAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public PublishBatchResponse pOSTPublishBatch(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PublishBatchInput publishBatchInput) throws ApiException {
        ApiResponse<PublishBatchResponse> localVarResp = pOSTPublishBatchWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, publishBatchInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Publishes up to ten messages to the specified topic. This is a batch version of &lt;code&gt;Publish&lt;/code&gt;. For FIFO topics, multiple messages within a single batch are published in the order they are sent, and messages are deduplicated within the batch and across batches for 5 minutes.&lt;/p&gt; &lt;p&gt;The result of publishing each message is reported individually in the response. Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of &lt;code&gt;200&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The maximum allowed individual message size and the maximum total payload size (the sum of the individual lengths of all of the batched messages) are both 256 KB (262,144 bytes). &lt;/p&gt; &lt;p&gt;Some actions take lists of parameters. These lists are specified using the &lt;code&gt;param.n&lt;/code&gt; notation. Values of &lt;code&gt;n&lt;/code&gt; are integers starting from 1. For example, a parameter list with two elements looks like this: &lt;/p&gt; &lt;p&gt;&amp;amp;AttributeName.1&#x3D;first&lt;/p&gt; &lt;p&gt;&amp;amp;AttributeName.2&#x3D;second&lt;/p&gt; &lt;p&gt;If you send a batch message to a topic, Amazon SNS publishes the batch message to each endpoint that is subscribed to the topic. The format of the batch message depends on the notification protocol for each subscribed endpoint.&lt;/p&gt; &lt;p&gt;When a &lt;code&gt;messageId&lt;/code&gt; is returned, the batch message is saved and Amazon SNS immediately delivers the message to subscribers.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param publishBatchInput  (optional)
     * @return ApiResponse&lt;PublishBatchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EndpointDisabledException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PlatformApplicationDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> BatchEntryIdsNotDistinctException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> BatchRequestTooLongException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EmptyBatchRequestException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidBatchEntryIdException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyEntriesInBatchRequestException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> KMSDisabledException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> KMSInvalidStateException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> KMSNotFoundException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> KMSOptInRequired </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> KMSThrottlingException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> KMSAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublishBatchResponse> pOSTPublishBatchWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PublishBatchInput publishBatchInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTPublishBatchValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, publishBatchInput, null);
        Type localVarReturnType = new TypeToken<PublishBatchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Publishes up to ten messages to the specified topic. This is a batch version of &lt;code&gt;Publish&lt;/code&gt;. For FIFO topics, multiple messages within a single batch are published in the order they are sent, and messages are deduplicated within the batch and across batches for 5 minutes.&lt;/p&gt; &lt;p&gt;The result of publishing each message is reported individually in the response. Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of &lt;code&gt;200&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The maximum allowed individual message size and the maximum total payload size (the sum of the individual lengths of all of the batched messages) are both 256 KB (262,144 bytes). &lt;/p&gt; &lt;p&gt;Some actions take lists of parameters. These lists are specified using the &lt;code&gt;param.n&lt;/code&gt; notation. Values of &lt;code&gt;n&lt;/code&gt; are integers starting from 1. For example, a parameter list with two elements looks like this: &lt;/p&gt; &lt;p&gt;&amp;amp;AttributeName.1&#x3D;first&lt;/p&gt; &lt;p&gt;&amp;amp;AttributeName.2&#x3D;second&lt;/p&gt; &lt;p&gt;If you send a batch message to a topic, Amazon SNS publishes the batch message to each endpoint that is subscribed to the topic. The format of the batch message depends on the notification protocol for each subscribed endpoint.&lt;/p&gt; &lt;p&gt;When a &lt;code&gt;messageId&lt;/code&gt; is returned, the batch message is saved and Amazon SNS immediately delivers the message to subscribers.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param publishBatchInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EndpointDisabledException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PlatformApplicationDisabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> BatchEntryIdsNotDistinctException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> BatchRequestTooLongException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EmptyBatchRequestException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidBatchEntryIdException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyEntriesInBatchRequestException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> KMSDisabledException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> KMSInvalidStateException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> KMSNotFoundException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> KMSOptInRequired </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> KMSThrottlingException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> KMSAccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPublishBatchAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PublishBatchInput publishBatchInput, final ApiCallback<PublishBatchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTPublishBatchValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, publishBatchInput, _callback);
        Type localVarReturnType = new TypeToken<PublishBatchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTPutDataProtectionPolicy
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putDataProtectionPolicyInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPutDataProtectionPolicyCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutDataProtectionPolicyInput putDataProtectionPolicyInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putDataProtectionPolicyInput;

        // create path and map variables
        String localVarPath = "/#Action=PutDataProtectionPolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTPutDataProtectionPolicyValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutDataProtectionPolicyInput putDataProtectionPolicyInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTPutDataProtectionPolicy(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTPutDataProtectionPolicy(Async)");
        }

        return pOSTPutDataProtectionPolicyCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putDataProtectionPolicyInput, _callback);

    }

    /**
     * 
     * Adds or updates an inline policy document that is stored in the specified Amazon SNS topic.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putDataProtectionPolicyInput  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTPutDataProtectionPolicy(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutDataProtectionPolicyInput putDataProtectionPolicyInput) throws ApiException {
        pOSTPutDataProtectionPolicyWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putDataProtectionPolicyInput);
    }

    /**
     * 
     * Adds or updates an inline policy document that is stored in the specified Amazon SNS topic.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putDataProtectionPolicyInput  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTPutDataProtectionPolicyWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutDataProtectionPolicyInput putDataProtectionPolicyInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTPutDataProtectionPolicyValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putDataProtectionPolicyInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Adds or updates an inline policy document that is stored in the specified Amazon SNS topic.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putDataProtectionPolicyInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPutDataProtectionPolicyAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutDataProtectionPolicyInput putDataProtectionPolicyInput, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTPutDataProtectionPolicyValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putDataProtectionPolicyInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTRemovePermission
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removePermissionInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRemovePermissionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemovePermissionInput removePermissionInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removePermissionInput;

        // create path and map variables
        String localVarPath = "/#Action=RemovePermission";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTRemovePermissionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemovePermissionInput removePermissionInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTRemovePermission(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTRemovePermission(Async)");
        }

        return pOSTRemovePermissionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removePermissionInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Removes a statement from a topic&#39;s access control policy.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To remove the ability to change topic permissions, you must deny permissions to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetTopicAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removePermissionInput  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTRemovePermission(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemovePermissionInput removePermissionInput) throws ApiException {
        pOSTRemovePermissionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removePermissionInput);
    }

    /**
     * 
     * &lt;p&gt;Removes a statement from a topic&#39;s access control policy.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To remove the ability to change topic permissions, you must deny permissions to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetTopicAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removePermissionInput  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTRemovePermissionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemovePermissionInput removePermissionInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTRemovePermissionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removePermissionInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Removes a statement from a topic&#39;s access control policy.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To remove the ability to change topic permissions, you must deny permissions to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetTopicAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removePermissionInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRemovePermissionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemovePermissionInput removePermissionInput, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTRemovePermissionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removePermissionInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTSetEndpointAttributes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setEndpointAttributesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetEndpointAttributesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetEndpointAttributesInput setEndpointAttributesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setEndpointAttributesInput;

        // create path and map variables
        String localVarPath = "/#Action=SetEndpointAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTSetEndpointAttributesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetEndpointAttributesInput setEndpointAttributesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTSetEndpointAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTSetEndpointAttributes(Async)");
        }

        return pOSTSetEndpointAttributesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setEndpointAttributesInput, _callback);

    }

    /**
     * 
     * Sets the attributes for an endpoint for a device on one of the supported push notification services, such as GCM (Firebase Cloud Messaging) and APNS. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setEndpointAttributesInput  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTSetEndpointAttributes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetEndpointAttributesInput setEndpointAttributesInput) throws ApiException {
        pOSTSetEndpointAttributesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setEndpointAttributesInput);
    }

    /**
     * 
     * Sets the attributes for an endpoint for a device on one of the supported push notification services, such as GCM (Firebase Cloud Messaging) and APNS. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setEndpointAttributesInput  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTSetEndpointAttributesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetEndpointAttributesInput setEndpointAttributesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTSetEndpointAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setEndpointAttributesInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Sets the attributes for an endpoint for a device on one of the supported push notification services, such as GCM (Firebase Cloud Messaging) and APNS. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setEndpointAttributesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetEndpointAttributesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetEndpointAttributesInput setEndpointAttributesInput, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTSetEndpointAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setEndpointAttributesInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTSetPlatformApplicationAttributes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setPlatformApplicationAttributesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetPlatformApplicationAttributesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetPlatformApplicationAttributesInput setPlatformApplicationAttributesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setPlatformApplicationAttributesInput;

        // create path and map variables
        String localVarPath = "/#Action=SetPlatformApplicationAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTSetPlatformApplicationAttributesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetPlatformApplicationAttributesInput setPlatformApplicationAttributesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTSetPlatformApplicationAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTSetPlatformApplicationAttributes(Async)");
        }

        return pOSTSetPlatformApplicationAttributesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setPlatformApplicationAttributesInput, _callback);

    }

    /**
     * 
     * Sets the attributes of the platform application object for the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. For information on configuring attributes for message delivery status, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-msg-status.html\&quot;&gt;Using Amazon SNS Application Attributes for Message Delivery Status&lt;/a&gt;. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setPlatformApplicationAttributesInput  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTSetPlatformApplicationAttributes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetPlatformApplicationAttributesInput setPlatformApplicationAttributesInput) throws ApiException {
        pOSTSetPlatformApplicationAttributesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setPlatformApplicationAttributesInput);
    }

    /**
     * 
     * Sets the attributes of the platform application object for the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. For information on configuring attributes for message delivery status, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-msg-status.html\&quot;&gt;Using Amazon SNS Application Attributes for Message Delivery Status&lt;/a&gt;. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setPlatformApplicationAttributesInput  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTSetPlatformApplicationAttributesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetPlatformApplicationAttributesInput setPlatformApplicationAttributesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTSetPlatformApplicationAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setPlatformApplicationAttributesInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Sets the attributes of the platform application object for the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html\&quot;&gt;Using Amazon SNS Mobile Push Notifications&lt;/a&gt;. For information on configuring attributes for message delivery status, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-msg-status.html\&quot;&gt;Using Amazon SNS Application Attributes for Message Delivery Status&lt;/a&gt;. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setPlatformApplicationAttributesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetPlatformApplicationAttributesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetPlatformApplicationAttributesInput setPlatformApplicationAttributesInput, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTSetPlatformApplicationAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setPlatformApplicationAttributesInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTSetSMSAttributes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setSMSAttributesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetSMSAttributesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetSMSAttributesInput setSMSAttributesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setSMSAttributesInput;

        // create path and map variables
        String localVarPath = "/#Action=SetSMSAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTSetSMSAttributesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetSMSAttributesInput setSMSAttributesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTSetSMSAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTSetSMSAttributes(Async)");
        }

        return pOSTSetSMSAttributesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setSMSAttributesInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Use this request to set the default settings for sending SMS messages and receiving daily SMS usage reports.&lt;/p&gt; &lt;p&gt;You can override some of these settings for a single message when you use the &lt;code&gt;Publish&lt;/code&gt; action with the &lt;code&gt;MessageAttributes.entry.N&lt;/code&gt; parameter. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sms_publish-to-phone.html\&quot;&gt;Publishing to a mobile phone&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To use this operation, you must grant the Amazon SNS service principal (&lt;code&gt;sns.amazonaws.com&lt;/code&gt;) permission to perform the &lt;code&gt;s3:ListBucket&lt;/code&gt; action. &lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setSMSAttributesInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTSetSMSAttributes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetSMSAttributesInput setSMSAttributesInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTSetSMSAttributesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setSMSAttributesInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Use this request to set the default settings for sending SMS messages and receiving daily SMS usage reports.&lt;/p&gt; &lt;p&gt;You can override some of these settings for a single message when you use the &lt;code&gt;Publish&lt;/code&gt; action with the &lt;code&gt;MessageAttributes.entry.N&lt;/code&gt; parameter. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sms_publish-to-phone.html\&quot;&gt;Publishing to a mobile phone&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To use this operation, you must grant the Amazon SNS service principal (&lt;code&gt;sns.amazonaws.com&lt;/code&gt;) permission to perform the &lt;code&gt;s3:ListBucket&lt;/code&gt; action. &lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setSMSAttributesInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTSetSMSAttributesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetSMSAttributesInput setSMSAttributesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTSetSMSAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setSMSAttributesInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Use this request to set the default settings for sending SMS messages and receiving daily SMS usage reports.&lt;/p&gt; &lt;p&gt;You can override some of these settings for a single message when you use the &lt;code&gt;Publish&lt;/code&gt; action with the &lt;code&gt;MessageAttributes.entry.N&lt;/code&gt; parameter. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sms_publish-to-phone.html\&quot;&gt;Publishing to a mobile phone&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To use this operation, you must grant the Amazon SNS service principal (&lt;code&gt;sns.amazonaws.com&lt;/code&gt;) permission to perform the &lt;code&gt;s3:ListBucket&lt;/code&gt; action. &lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setSMSAttributesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ThrottledException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetSMSAttributesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetSMSAttributesInput setSMSAttributesInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTSetSMSAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setSMSAttributesInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTSetSubscriptionAttributes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setSubscriptionAttributesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FilterPolicyLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetSubscriptionAttributesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetSubscriptionAttributesInput setSubscriptionAttributesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setSubscriptionAttributesInput;

        // create path and map variables
        String localVarPath = "/#Action=SetSubscriptionAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTSetSubscriptionAttributesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetSubscriptionAttributesInput setSubscriptionAttributesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTSetSubscriptionAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTSetSubscriptionAttributes(Async)");
        }

        return pOSTSetSubscriptionAttributesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setSubscriptionAttributesInput, _callback);

    }

    /**
     * 
     * Allows a subscription owner to set an attribute of the subscription to a new value.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setSubscriptionAttributesInput  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FilterPolicyLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTSetSubscriptionAttributes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetSubscriptionAttributesInput setSubscriptionAttributesInput) throws ApiException {
        pOSTSetSubscriptionAttributesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setSubscriptionAttributesInput);
    }

    /**
     * 
     * Allows a subscription owner to set an attribute of the subscription to a new value.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setSubscriptionAttributesInput  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FilterPolicyLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTSetSubscriptionAttributesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetSubscriptionAttributesInput setSubscriptionAttributesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTSetSubscriptionAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setSubscriptionAttributesInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Allows a subscription owner to set an attribute of the subscription to a new value.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setSubscriptionAttributesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FilterPolicyLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetSubscriptionAttributesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetSubscriptionAttributesInput setSubscriptionAttributesInput, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTSetSubscriptionAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setSubscriptionAttributesInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTSetTopicAttributes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setTopicAttributesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetTopicAttributesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetTopicAttributesInput setTopicAttributesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setTopicAttributesInput;

        // create path and map variables
        String localVarPath = "/#Action=SetTopicAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTSetTopicAttributesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetTopicAttributesInput setTopicAttributesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTSetTopicAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTSetTopicAttributes(Async)");
        }

        return pOSTSetTopicAttributesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setTopicAttributesInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Allows a topic owner to set an attribute of the topic to a new value.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To remove the ability to change topic permissions, you must deny permissions to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetTopicAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setTopicAttributesInput  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTSetTopicAttributes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetTopicAttributesInput setTopicAttributesInput) throws ApiException {
        pOSTSetTopicAttributesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setTopicAttributesInput);
    }

    /**
     * 
     * &lt;p&gt;Allows a topic owner to set an attribute of the topic to a new value.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To remove the ability to change topic permissions, you must deny permissions to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetTopicAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setTopicAttributesInput  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTSetTopicAttributesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetTopicAttributesInput setTopicAttributesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTSetTopicAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setTopicAttributesInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Allows a topic owner to set an attribute of the topic to a new value.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To remove the ability to change topic permissions, you must deny permissions to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetTopicAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setTopicAttributesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetTopicAttributesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetTopicAttributesInput setTopicAttributesInput, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTSetTopicAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setTopicAttributesInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTSubscribe
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subscribeInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FilterPolicyLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSubscribeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SubscribeInput subscribeInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscribeInput;

        // create path and map variables
        String localVarPath = "/#Action=Subscribe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTSubscribeValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SubscribeInput subscribeInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTSubscribe(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTSubscribe(Async)");
        }

        return pOSTSubscribeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subscribeInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Subscribes an endpoint to an Amazon SNS topic. If the endpoint type is HTTP/S or email, or if the endpoint and the topic are not in the same Amazon Web Services account, the endpoint owner must run the &lt;code&gt;ConfirmSubscription&lt;/code&gt; action to confirm the subscription.&lt;/p&gt; &lt;p&gt;You call the &lt;code&gt;ConfirmSubscription&lt;/code&gt; action with the token from the subscription response. Confirmation tokens are valid for three days.&lt;/p&gt; &lt;p&gt;This action is throttled at 100 transactions per second (TPS).&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subscribeInput  (optional)
     * @return SubscribeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FilterPolicyLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public SubscribeResponse pOSTSubscribe(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SubscribeInput subscribeInput) throws ApiException {
        ApiResponse<SubscribeResponse> localVarResp = pOSTSubscribeWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subscribeInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Subscribes an endpoint to an Amazon SNS topic. If the endpoint type is HTTP/S or email, or if the endpoint and the topic are not in the same Amazon Web Services account, the endpoint owner must run the &lt;code&gt;ConfirmSubscription&lt;/code&gt; action to confirm the subscription.&lt;/p&gt; &lt;p&gt;You call the &lt;code&gt;ConfirmSubscription&lt;/code&gt; action with the token from the subscription response. Confirmation tokens are valid for three days.&lt;/p&gt; &lt;p&gt;This action is throttled at 100 transactions per second (TPS).&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subscribeInput  (optional)
     * @return ApiResponse&lt;SubscribeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FilterPolicyLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscribeResponse> pOSTSubscribeWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SubscribeInput subscribeInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTSubscribeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subscribeInput, null);
        Type localVarReturnType = new TypeToken<SubscribeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Subscribes an endpoint to an Amazon SNS topic. If the endpoint type is HTTP/S or email, or if the endpoint and the topic are not in the same Amazon Web Services account, the endpoint owner must run the &lt;code&gt;ConfirmSubscription&lt;/code&gt; action to confirm the subscription.&lt;/p&gt; &lt;p&gt;You call the &lt;code&gt;ConfirmSubscription&lt;/code&gt; action with the token from the subscription response. Confirmation tokens are valid for three days.&lt;/p&gt; &lt;p&gt;This action is throttled at 100 transactions per second (TPS).&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subscribeInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FilterPolicyLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSubscribeAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SubscribeInput subscribeInput, final ApiCallback<SubscribeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTSubscribeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subscribeInput, _callback);
        Type localVarReturnType = new TypeToken<SubscribeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTTagResource
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tagResourceRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TagLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StaleTagException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTTagResourceCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, TagResourceRequest tagResourceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagResourceRequest;

        // create path and map variables
        String localVarPath = "/#Action=TagResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTTagResourceValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, TagResourceRequest tagResourceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTTagResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTTagResource(Async)");
        }

        return pOSTTagResourceCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tagResourceRequest, _callback);

    }

    /**
     * 
     * &lt;p&gt;Add tags to the specified Amazon SNS topic. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html\&quot;&gt;Amazon SNS Tags&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you use topic tags, keep the following guidelines in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Adding more than 50 tags to a topic isn&#39;t recommended.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags don&#39;t have any semantic meaning. Amazon SNS interprets tags as character strings.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags are case-sensitive.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A new tag with a key identical to that of an existing tag overwrites the existing tag.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tagging actions are limited to 10 TPS per Amazon Web Services account, per Amazon Web Services Region. If your application requires a higher throughput, file a &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/case/create?issueType&#x3D;technical\&quot;&gt;technical support request&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tagResourceRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TagLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StaleTagException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTTagResource(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, TagResourceRequest tagResourceRequest) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTTagResourceWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tagResourceRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Add tags to the specified Amazon SNS topic. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html\&quot;&gt;Amazon SNS Tags&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you use topic tags, keep the following guidelines in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Adding more than 50 tags to a topic isn&#39;t recommended.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags don&#39;t have any semantic meaning. Amazon SNS interprets tags as character strings.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags are case-sensitive.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A new tag with a key identical to that of an existing tag overwrites the existing tag.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tagging actions are limited to 10 TPS per Amazon Web Services account, per Amazon Web Services Region. If your application requires a higher throughput, file a &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/case/create?issueType&#x3D;technical\&quot;&gt;technical support request&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tagResourceRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TagLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StaleTagException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTTagResourceWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, TagResourceRequest tagResourceRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTTagResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tagResourceRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Add tags to the specified Amazon SNS topic. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html\&quot;&gt;Amazon SNS Tags&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you use topic tags, keep the following guidelines in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Adding more than 50 tags to a topic isn&#39;t recommended.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags don&#39;t have any semantic meaning. Amazon SNS interprets tags as character strings.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags are case-sensitive.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A new tag with a key identical to that of an existing tag overwrites the existing tag.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tagging actions are limited to 10 TPS per Amazon Web Services account, per Amazon Web Services Region. If your application requires a higher throughput, file a &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/case/create?issueType&#x3D;technical\&quot;&gt;technical support request&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tagResourceRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TagLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StaleTagException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTTagResourceAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, TagResourceRequest tagResourceRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTTagResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tagResourceRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTUnsubscribe
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param unsubscribeInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTUnsubscribeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UnsubscribeInput unsubscribeInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = unsubscribeInput;

        // create path and map variables
        String localVarPath = "/#Action=Unsubscribe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTUnsubscribeValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UnsubscribeInput unsubscribeInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTUnsubscribe(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTUnsubscribe(Async)");
        }

        return pOSTUnsubscribeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, unsubscribeInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a subscription. If the subscription requires authentication for deletion, only the owner of the subscription or the topic&#39;s owner can unsubscribe, and an Amazon Web Services signature is required. If the &lt;code&gt;Unsubscribe&lt;/code&gt; call does not require authentication and the requester is not the subscription owner, a final cancellation message is delivered to the endpoint, so that the endpoint owner can easily resubscribe to the topic if the &lt;code&gt;Unsubscribe&lt;/code&gt; request was unintended.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon SQS queue subscriptions require authentication for deletion. Only the owner of the subscription, or the owner of the topic can unsubscribe using the required Amazon Web Services signature.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This action is throttled at 100 transactions per second (TPS).&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param unsubscribeInput  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTUnsubscribe(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UnsubscribeInput unsubscribeInput) throws ApiException {
        pOSTUnsubscribeWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, unsubscribeInput);
    }

    /**
     * 
     * &lt;p&gt;Deletes a subscription. If the subscription requires authentication for deletion, only the owner of the subscription or the topic&#39;s owner can unsubscribe, and an Amazon Web Services signature is required. If the &lt;code&gt;Unsubscribe&lt;/code&gt; call does not require authentication and the requester is not the subscription owner, a final cancellation message is delivered to the endpoint, so that the endpoint owner can easily resubscribe to the topic if the &lt;code&gt;Unsubscribe&lt;/code&gt; request was unintended.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon SQS queue subscriptions require authentication for deletion. Only the owner of the subscription, or the owner of the topic can unsubscribe using the required Amazon Web Services signature.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This action is throttled at 100 transactions per second (TPS).&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param unsubscribeInput  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTUnsubscribeWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UnsubscribeInput unsubscribeInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTUnsubscribeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, unsubscribeInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a subscription. If the subscription requires authentication for deletion, only the owner of the subscription or the topic&#39;s owner can unsubscribe, and an Amazon Web Services signature is required. If the &lt;code&gt;Unsubscribe&lt;/code&gt; call does not require authentication and the requester is not the subscription owner, a final cancellation message is delivered to the endpoint, so that the endpoint owner can easily resubscribe to the topic if the &lt;code&gt;Unsubscribe&lt;/code&gt; request was unintended.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon SQS queue subscriptions require authentication for deletion. Only the owner of the subscription, or the owner of the topic can unsubscribe using the required Amazon Web Services signature.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This action is throttled at 100 transactions per second (TPS).&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param unsubscribeInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSecurityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTUnsubscribeAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UnsubscribeInput unsubscribeInput, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTUnsubscribeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, unsubscribeInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTUntagResource
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param untagResourceRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TagLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StaleTagException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTUntagResourceCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UntagResourceRequest untagResourceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = untagResourceRequest;

        // create path and map variables
        String localVarPath = "/#Action=UntagResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTUntagResourceValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UntagResourceRequest untagResourceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTUntagResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTUntagResource(Async)");
        }

        return pOSTUntagResourceCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, untagResourceRequest, _callback);

    }

    /**
     * 
     * Remove tags from the specified Amazon SNS topic. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html\&quot;&gt;Amazon SNS Tags&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param untagResourceRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TagLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StaleTagException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTUntagResource(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UntagResourceRequest untagResourceRequest) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTUntagResourceWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, untagResourceRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Remove tags from the specified Amazon SNS topic. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html\&quot;&gt;Amazon SNS Tags&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param untagResourceRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TagLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StaleTagException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTUntagResourceWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UntagResourceRequest untagResourceRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTUntagResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, untagResourceRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove tags from the specified Amazon SNS topic. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html\&quot;&gt;Amazon SNS Tags&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param untagResourceRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TagLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StaleTagException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagPolicyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConcurrentAccessException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTUntagResourceAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UntagResourceRequest untagResourceRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTUntagResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, untagResourceRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTVerifySMSSandboxPhoneNumber
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param verifySMSSandboxPhoneNumberInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> VerificationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTVerifySMSSandboxPhoneNumberCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, VerifySMSSandboxPhoneNumberInput verifySMSSandboxPhoneNumberInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifySMSSandboxPhoneNumberInput;

        // create path and map variables
        String localVarPath = "/#Action=VerifySMSSandboxPhoneNumber";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTVerifySMSSandboxPhoneNumberValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, VerifySMSSandboxPhoneNumberInput verifySMSSandboxPhoneNumberInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTVerifySMSSandboxPhoneNumber(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTVerifySMSSandboxPhoneNumber(Async)");
        }

        return pOSTVerifySMSSandboxPhoneNumberCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, verifySMSSandboxPhoneNumberInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Verifies a destination phone number with a one-time password (OTP) for the calling Amazon Web Services account.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param verifySMSSandboxPhoneNumberInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> VerificationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTVerifySMSSandboxPhoneNumber(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, VerifySMSSandboxPhoneNumberInput verifySMSSandboxPhoneNumberInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTVerifySMSSandboxPhoneNumberWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, verifySMSSandboxPhoneNumberInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Verifies a destination phone number with a one-time password (OTP) for the calling Amazon Web Services account.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param verifySMSSandboxPhoneNumberInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> VerificationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTVerifySMSSandboxPhoneNumberWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, VerifySMSSandboxPhoneNumberInput verifySMSSandboxPhoneNumberInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTVerifySMSSandboxPhoneNumberValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, verifySMSSandboxPhoneNumberInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Verifies a destination phone number with a one-time password (OTP) for the calling Amazon Web Services account.&lt;/p&gt; &lt;p&gt;When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the &lt;i&gt;SMS sandbox&lt;/i&gt;. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;SMS sandbox&lt;/a&gt; in the &lt;i&gt;Amazon SNS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param verifySMSSandboxPhoneNumberInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthorizationErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> VerificationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTVerifySMSSandboxPhoneNumberAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, VerifySMSSandboxPhoneNumberInput verifySMSSandboxPhoneNumberInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTVerifySMSSandboxPhoneNumberValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, verifySMSSandboxPhoneNumberInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
