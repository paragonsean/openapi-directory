/*
 * Amazon Simple Notification Service
 * <fullname>Amazon Simple Notification Service</fullname> <p>Amazon Simple Notification Service (Amazon SNS) is a web service that enables you to build distributed web-enabled applications. Applications can use Amazon SNS to easily push real-time notification messages to interested subscribers over multiple delivery protocols. For more information about this product see the <a href=\"http://aws.amazon.com/sns/\">Amazon SNS product page</a>. For detailed information about Amazon SNS features and their associated API calls, see the <a href=\"https://docs.aws.amazon.com/sns/latest/dg/\">Amazon SNS Developer Guide</a>. </p> <p>For information on the permissions you need to use this API, see <a href=\"https://docs.aws.amazon.com/sns/latest/dg/sns-authentication-and-access-control.html\">Identity and access management in Amazon SNS</a> in the <i>Amazon SNS Developer Guide.</i> </p> <p>We also provide SDKs that enable you to access Amazon SNS from your preferred programming language. The SDKs contain functionality that automatically takes care of tasks such as: cryptographically signing your service requests, retrying requests, and handling error responses. For a list of available SDKs, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>. </p>
 *
 * The version of the OpenAPI document: 2010-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Input for SetPlatformApplicationAttributes action.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:42.907458-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SetPlatformApplicationAttributesInput {
  public static final String SERIALIZED_NAME_PLATFORM_APPLICATION_ARN = "PlatformApplicationArn";
  @SerializedName(SERIALIZED_NAME_PLATFORM_APPLICATION_ARN)
  private String platformApplicationArn;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "Attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Map attributes;

  public SetPlatformApplicationAttributesInput() {
  }

  public SetPlatformApplicationAttributesInput platformApplicationArn(String platformApplicationArn) {
    this.platformApplicationArn = platformApplicationArn;
    return this;
  }

  /**
   * Get platformApplicationArn
   * @return platformApplicationArn
   */
  @javax.annotation.Nonnull
  public String getPlatformApplicationArn() {
    return platformApplicationArn;
  }

  public void setPlatformApplicationArn(String platformApplicationArn) {
    this.platformApplicationArn = platformApplicationArn;
  }


  public SetPlatformApplicationAttributesInput attributes(Map attributes) {
    this.attributes = attributes;
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nonnull
  public Map getAttributes() {
    return attributes;
  }

  public void setAttributes(Map attributes) {
    this.attributes = attributes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SetPlatformApplicationAttributesInput setPlatformApplicationAttributesInput = (SetPlatformApplicationAttributesInput) o;
    return Objects.equals(this.platformApplicationArn, setPlatformApplicationAttributesInput.platformApplicationArn) &&
        Objects.equals(this.attributes, setPlatformApplicationAttributesInput.attributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(platformApplicationArn, attributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SetPlatformApplicationAttributesInput {\n");
    sb.append("    platformApplicationArn: ").append(toIndentedString(platformApplicationArn)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PlatformApplicationArn");
    openapiFields.add("Attributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("PlatformApplicationArn");
    openapiRequiredFields.add("Attributes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SetPlatformApplicationAttributesInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SetPlatformApplicationAttributesInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SetPlatformApplicationAttributesInput is not found in the empty JSON string", SetPlatformApplicationAttributesInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SetPlatformApplicationAttributesInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SetPlatformApplicationAttributesInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SetPlatformApplicationAttributesInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `PlatformApplicationArn`
      String.validateJsonElement(jsonObj.get("PlatformApplicationArn"));
      // validate the required field `Attributes`
      Map.validateJsonElement(jsonObj.get("Attributes"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SetPlatformApplicationAttributesInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SetPlatformApplicationAttributesInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SetPlatformApplicationAttributesInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SetPlatformApplicationAttributesInput.class));

       return (TypeAdapter<T>) new TypeAdapter<SetPlatformApplicationAttributesInput>() {
           @Override
           public void write(JsonWriter out, SetPlatformApplicationAttributesInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SetPlatformApplicationAttributesInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SetPlatformApplicationAttributesInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SetPlatformApplicationAttributesInput
   * @throws IOException if the JSON string is invalid with respect to SetPlatformApplicationAttributesInput
   */
  public static SetPlatformApplicationAttributesInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SetPlatformApplicationAttributesInput.class);
  }

  /**
   * Convert an instance of SetPlatformApplicationAttributesInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

