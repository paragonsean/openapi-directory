/*
 * Amazon Simple Notification Service
 * <fullname>Amazon Simple Notification Service</fullname> <p>Amazon Simple Notification Service (Amazon SNS) is a web service that enables you to build distributed web-enabled applications. Applications can use Amazon SNS to easily push real-time notification messages to interested subscribers over multiple delivery protocols. For more information about this product see the <a href=\"http://aws.amazon.com/sns/\">Amazon SNS product page</a>. For detailed information about Amazon SNS features and their associated API calls, see the <a href=\"https://docs.aws.amazon.com/sns/latest/dg/\">Amazon SNS Developer Guide</a>. </p> <p>For information on the permissions you need to use this API, see <a href=\"https://docs.aws.amazon.com/sns/latest/dg/sns-authentication-and-access-control.html\">Identity and access management in Amazon SNS</a> in the <i>Amazon SNS Developer Guide.</i> </p> <p>We also provide SDKs that enable you to access Amazon SNS from your preferred programming language. The SDKs contain functionality that automatically takes care of tasks such as: cryptographically signing your service requests, retrying requests, and handling error responses. For a list of available SDKs, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>. </p>
 *
 * The version of the OpenAPI document: 2010-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Supported language code for sending OTP message
 */
@JsonAdapter(LanguageCodeString.Adapter.class)
public enum LanguageCodeString {
  
  EN_US("en-US"),
  
  EN_GB("en-GB"),
  
  ES_419("es-419"),
  
  ES_ES("es-ES"),
  
  DE_DE("de-DE"),
  
  FR_CA("fr-CA"),
  
  FR_FR("fr-FR"),
  
  IT_IT("it-IT"),
  
  JA_JP("ja-JP"),
  
  PT_BR("pt-BR"),
  
  KR_KR("kr-KR"),
  
  ZH_CN("zh-CN"),
  
  ZH_TW("zh-TW");

  private String value;

  LanguageCodeString(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static LanguageCodeString fromValue(String value) {
    for (LanguageCodeString b : LanguageCodeString.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<LanguageCodeString> {
    @Override
    public void write(final JsonWriter jsonWriter, final LanguageCodeString enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public LanguageCodeString read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return LanguageCodeString.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    LanguageCodeString.fromValue(value);
  }
}

