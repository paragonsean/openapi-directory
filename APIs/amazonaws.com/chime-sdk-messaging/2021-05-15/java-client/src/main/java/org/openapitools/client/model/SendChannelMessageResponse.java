/*
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SendChannelMessageResponseStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SendChannelMessageResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:28.676748-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SendChannelMessageResponse {
  public static final String SERIALIZED_NAME_CHANNEL_ARN = "ChannelArn";
  @SerializedName(SERIALIZED_NAME_CHANNEL_ARN)
  private String channelArn;

  public static final String SERIALIZED_NAME_MESSAGE_ID = "MessageId";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ID)
  private String messageId;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private SendChannelMessageResponseStatus status;

  public static final String SERIALIZED_NAME_SUB_CHANNEL_ID = "SubChannelId";
  @SerializedName(SERIALIZED_NAME_SUB_CHANNEL_ID)
  private String subChannelId;

  public SendChannelMessageResponse() {
  }

  public SendChannelMessageResponse channelArn(String channelArn) {
    this.channelArn = channelArn;
    return this;
  }

  /**
   * Get channelArn
   * @return channelArn
   */
  @javax.annotation.Nullable
  public String getChannelArn() {
    return channelArn;
  }

  public void setChannelArn(String channelArn) {
    this.channelArn = channelArn;
  }


  public SendChannelMessageResponse messageId(String messageId) {
    this.messageId = messageId;
    return this;
  }

  /**
   * Get messageId
   * @return messageId
   */
  @javax.annotation.Nullable
  public String getMessageId() {
    return messageId;
  }

  public void setMessageId(String messageId) {
    this.messageId = messageId;
  }


  public SendChannelMessageResponse status(SendChannelMessageResponseStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public SendChannelMessageResponseStatus getStatus() {
    return status;
  }

  public void setStatus(SendChannelMessageResponseStatus status) {
    this.status = status;
  }


  public SendChannelMessageResponse subChannelId(String subChannelId) {
    this.subChannelId = subChannelId;
    return this;
  }

  /**
   * Get subChannelId
   * @return subChannelId
   */
  @javax.annotation.Nullable
  public String getSubChannelId() {
    return subChannelId;
  }

  public void setSubChannelId(String subChannelId) {
    this.subChannelId = subChannelId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendChannelMessageResponse sendChannelMessageResponse = (SendChannelMessageResponse) o;
    return Objects.equals(this.channelArn, sendChannelMessageResponse.channelArn) &&
        Objects.equals(this.messageId, sendChannelMessageResponse.messageId) &&
        Objects.equals(this.status, sendChannelMessageResponse.status) &&
        Objects.equals(this.subChannelId, sendChannelMessageResponse.subChannelId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channelArn, messageId, status, subChannelId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendChannelMessageResponse {\n");
    sb.append("    channelArn: ").append(toIndentedString(channelArn)).append("\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subChannelId: ").append(toIndentedString(subChannelId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ChannelArn");
    openapiFields.add("MessageId");
    openapiFields.add("Status");
    openapiFields.add("SubChannelId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SendChannelMessageResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SendChannelMessageResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SendChannelMessageResponse is not found in the empty JSON string", SendChannelMessageResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SendChannelMessageResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SendChannelMessageResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ChannelArn`
      if (jsonObj.get("ChannelArn") != null && !jsonObj.get("ChannelArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ChannelArn"));
      }
      // validate the optional field `MessageId`
      if (jsonObj.get("MessageId") != null && !jsonObj.get("MessageId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MessageId"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        SendChannelMessageResponseStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `SubChannelId`
      if (jsonObj.get("SubChannelId") != null && !jsonObj.get("SubChannelId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SubChannelId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SendChannelMessageResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SendChannelMessageResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SendChannelMessageResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SendChannelMessageResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SendChannelMessageResponse>() {
           @Override
           public void write(JsonWriter out, SendChannelMessageResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SendChannelMessageResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SendChannelMessageResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SendChannelMessageResponse
   * @throws IOException if the JSON string is invalid with respect to SendChannelMessageResponse
   */
  public static SendChannelMessageResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SendChannelMessageResponse.class);
  }

  /**
   * Convert an instance of SendChannelMessageResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

