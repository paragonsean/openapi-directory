/*
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The attributes required to configure and create an elastic channel. An elastic channel can support a maximum of 1-million members.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:28.676748-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ElasticChannelConfiguration {
  public static final String SERIALIZED_NAME_MAXIMUM_SUB_CHANNELS = "MaximumSubChannels";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_SUB_CHANNELS)
  private Integer maximumSubChannels;

  public static final String SERIALIZED_NAME_TARGET_MEMBERSHIPS_PER_SUB_CHANNEL = "TargetMembershipsPerSubChannel";
  @SerializedName(SERIALIZED_NAME_TARGET_MEMBERSHIPS_PER_SUB_CHANNEL)
  private Integer targetMembershipsPerSubChannel;

  public static final String SERIALIZED_NAME_MINIMUM_MEMBERSHIP_PERCENTAGE = "MinimumMembershipPercentage";
  @SerializedName(SERIALIZED_NAME_MINIMUM_MEMBERSHIP_PERCENTAGE)
  private Integer minimumMembershipPercentage;

  public ElasticChannelConfiguration() {
  }

  public ElasticChannelConfiguration maximumSubChannels(Integer maximumSubChannels) {
    this.maximumSubChannels = maximumSubChannels;
    return this;
  }

  /**
   * Get maximumSubChannels
   * @return maximumSubChannels
   */
  @javax.annotation.Nonnull
  public Integer getMaximumSubChannels() {
    return maximumSubChannels;
  }

  public void setMaximumSubChannels(Integer maximumSubChannels) {
    this.maximumSubChannels = maximumSubChannels;
  }


  public ElasticChannelConfiguration targetMembershipsPerSubChannel(Integer targetMembershipsPerSubChannel) {
    this.targetMembershipsPerSubChannel = targetMembershipsPerSubChannel;
    return this;
  }

  /**
   * Get targetMembershipsPerSubChannel
   * @return targetMembershipsPerSubChannel
   */
  @javax.annotation.Nonnull
  public Integer getTargetMembershipsPerSubChannel() {
    return targetMembershipsPerSubChannel;
  }

  public void setTargetMembershipsPerSubChannel(Integer targetMembershipsPerSubChannel) {
    this.targetMembershipsPerSubChannel = targetMembershipsPerSubChannel;
  }


  public ElasticChannelConfiguration minimumMembershipPercentage(Integer minimumMembershipPercentage) {
    this.minimumMembershipPercentage = minimumMembershipPercentage;
    return this;
  }

  /**
   * Get minimumMembershipPercentage
   * @return minimumMembershipPercentage
   */
  @javax.annotation.Nonnull
  public Integer getMinimumMembershipPercentage() {
    return minimumMembershipPercentage;
  }

  public void setMinimumMembershipPercentage(Integer minimumMembershipPercentage) {
    this.minimumMembershipPercentage = minimumMembershipPercentage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ElasticChannelConfiguration elasticChannelConfiguration = (ElasticChannelConfiguration) o;
    return Objects.equals(this.maximumSubChannels, elasticChannelConfiguration.maximumSubChannels) &&
        Objects.equals(this.targetMembershipsPerSubChannel, elasticChannelConfiguration.targetMembershipsPerSubChannel) &&
        Objects.equals(this.minimumMembershipPercentage, elasticChannelConfiguration.minimumMembershipPercentage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maximumSubChannels, targetMembershipsPerSubChannel, minimumMembershipPercentage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ElasticChannelConfiguration {\n");
    sb.append("    maximumSubChannels: ").append(toIndentedString(maximumSubChannels)).append("\n");
    sb.append("    targetMembershipsPerSubChannel: ").append(toIndentedString(targetMembershipsPerSubChannel)).append("\n");
    sb.append("    minimumMembershipPercentage: ").append(toIndentedString(minimumMembershipPercentage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MaximumSubChannels");
    openapiFields.add("TargetMembershipsPerSubChannel");
    openapiFields.add("MinimumMembershipPercentage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("MaximumSubChannels");
    openapiRequiredFields.add("TargetMembershipsPerSubChannel");
    openapiRequiredFields.add("MinimumMembershipPercentage");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ElasticChannelConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ElasticChannelConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ElasticChannelConfiguration is not found in the empty JSON string", ElasticChannelConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ElasticChannelConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ElasticChannelConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ElasticChannelConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `MaximumSubChannels`
      Integer.validateJsonElement(jsonObj.get("MaximumSubChannels"));
      // validate the required field `TargetMembershipsPerSubChannel`
      Integer.validateJsonElement(jsonObj.get("TargetMembershipsPerSubChannel"));
      // validate the required field `MinimumMembershipPercentage`
      Integer.validateJsonElement(jsonObj.get("MinimumMembershipPercentage"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ElasticChannelConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ElasticChannelConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ElasticChannelConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ElasticChannelConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<ElasticChannelConfiguration>() {
           @Override
           public void write(JsonWriter out, ElasticChannelConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ElasticChannelConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ElasticChannelConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ElasticChannelConfiguration
   * @throws IOException if the JSON string is invalid with respect to ElasticChannelConfiguration
   */
  public static ElasticChannelConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ElasticChannelConfiguration.class);
  }

  /**
   * Convert an instance of ElasticChannelConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

