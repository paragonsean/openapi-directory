/*
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AssociateChannelFlowRequest;
import org.openapitools.client.model.BatchCreateChannelMembershipRequest;
import org.openapitools.client.model.BatchCreateChannelMembershipResponse;
import org.openapitools.client.model.ChannelFlowCallbackRequest;
import org.openapitools.client.model.ChannelFlowCallbackResponse;
import org.openapitools.client.model.CreateChannelBanRequest;
import org.openapitools.client.model.CreateChannelBanResponse;
import org.openapitools.client.model.CreateChannelFlowRequest;
import org.openapitools.client.model.CreateChannelFlowResponse;
import org.openapitools.client.model.CreateChannelMembershipRequest;
import org.openapitools.client.model.CreateChannelMembershipResponse;
import org.openapitools.client.model.CreateChannelModeratorRequest;
import org.openapitools.client.model.CreateChannelModeratorResponse;
import org.openapitools.client.model.CreateChannelRequest;
import org.openapitools.client.model.CreateChannelResponse;
import org.openapitools.client.model.DescribeChannelBanResponse;
import org.openapitools.client.model.DescribeChannelFlowResponse;
import org.openapitools.client.model.DescribeChannelMembershipForAppInstanceUserResponse;
import org.openapitools.client.model.DescribeChannelMembershipResponse;
import org.openapitools.client.model.DescribeChannelModeratedByAppInstanceUserResponse;
import org.openapitools.client.model.DescribeChannelModeratorResponse;
import org.openapitools.client.model.DescribeChannelResponse;
import org.openapitools.client.model.GetChannelMembershipPreferencesResponse;
import org.openapitools.client.model.GetChannelMessageResponse;
import org.openapitools.client.model.GetChannelMessageStatusResponse;
import org.openapitools.client.model.GetMessagingSessionEndpointResponse;
import org.openapitools.client.model.GetMessagingStreamingConfigurationsResponse;
import org.openapitools.client.model.ListChannelBansResponse;
import org.openapitools.client.model.ListChannelFlowsResponse;
import org.openapitools.client.model.ListChannelMembershipsForAppInstanceUserResponse;
import org.openapitools.client.model.ListChannelMembershipsResponse;
import org.openapitools.client.model.ListChannelMessagesResponse;
import org.openapitools.client.model.ListChannelModeratorsResponse;
import org.openapitools.client.model.ListChannelsAssociatedWithChannelFlowResponse;
import org.openapitools.client.model.ListChannelsModeratedByAppInstanceUserResponse;
import org.openapitools.client.model.ListChannelsResponse;
import org.openapitools.client.model.ListSubChannelsResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PutChannelExpirationSettingsRequest;
import org.openapitools.client.model.PutChannelExpirationSettingsResponse;
import org.openapitools.client.model.PutChannelMembershipPreferencesRequest;
import org.openapitools.client.model.PutChannelMembershipPreferencesResponse;
import org.openapitools.client.model.PutMessagingStreamingConfigurationsRequest;
import org.openapitools.client.model.PutMessagingStreamingConfigurationsResponse;
import org.openapitools.client.model.RedactChannelMessageRequest;
import org.openapitools.client.model.RedactChannelMessageResponse;
import org.openapitools.client.model.SearchChannelsRequest;
import org.openapitools.client.model.SearchChannelsResponse;
import org.openapitools.client.model.SendChannelMessageRequest;
import org.openapitools.client.model.SendChannelMessageResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateChannelFlowRequest;
import org.openapitools.client.model.UpdateChannelFlowResponse;
import org.openapitools.client.model.UpdateChannelMessageRequest;
import org.openapitools.client.model.UpdateChannelMessageResponse;
import org.openapitools.client.model.UpdateChannelReadMarkerResponse;
import org.openapitools.client.model.UpdateChannelRequest;
import org.openapitools.client.model.UpdateChannelResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for associateChannelFlow
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user making the API call. (required)
     * @param associateChannelFlowRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call associateChannelFlowCall(String channelArn, String xAmzChimeBearer, AssociateChannelFlowRequest associateChannelFlowRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = associateChannelFlowRequest;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/channel-flow#x-amz-chime-bearer"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call associateChannelFlowValidateBeforeCall(String channelArn, String xAmzChimeBearer, AssociateChannelFlowRequest associateChannelFlowRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling associateChannelFlow(Async)");
        }

        // verify the required parameter 'xAmzChimeBearer' is set
        if (xAmzChimeBearer == null) {
            throw new ApiException("Missing the required parameter 'xAmzChimeBearer' when calling associateChannelFlow(Async)");
        }

        // verify the required parameter 'associateChannelFlowRequest' is set
        if (associateChannelFlowRequest == null) {
            throw new ApiException("Missing the required parameter 'associateChannelFlowRequest' when calling associateChannelFlow(Async)");
        }

        return associateChannelFlowCall(channelArn, xAmzChimeBearer, associateChannelFlowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Associates a channel flow with a channel. Once associated, all messages to that channel go through channel flow processors. To stop processing, use the &lt;code&gt;DisassociateChannelFlow&lt;/code&gt; API.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only administrators or channel moderators can associate a channel flow. The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user making the API call. (required)
     * @param associateChannelFlowRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public void associateChannelFlow(String channelArn, String xAmzChimeBearer, AssociateChannelFlowRequest associateChannelFlowRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        associateChannelFlowWithHttpInfo(channelArn, xAmzChimeBearer, associateChannelFlowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Associates a channel flow with a channel. Once associated, all messages to that channel go through channel flow processors. To stop processing, use the &lt;code&gt;DisassociateChannelFlow&lt;/code&gt; API.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only administrators or channel moderators can associate a channel flow. The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user making the API call. (required)
     * @param associateChannelFlowRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> associateChannelFlowWithHttpInfo(String channelArn, String xAmzChimeBearer, AssociateChannelFlowRequest associateChannelFlowRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = associateChannelFlowValidateBeforeCall(channelArn, xAmzChimeBearer, associateChannelFlowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Associates a channel flow with a channel. Once associated, all messages to that channel go through channel flow processors. To stop processing, use the &lt;code&gt;DisassociateChannelFlow&lt;/code&gt; API.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only administrators or channel moderators can associate a channel flow. The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user making the API call. (required)
     * @param associateChannelFlowRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call associateChannelFlowAsync(String channelArn, String xAmzChimeBearer, AssociateChannelFlowRequest associateChannelFlowRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = associateChannelFlowValidateBeforeCall(channelArn, xAmzChimeBearer, associateChannelFlowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for batchCreateChannelMembership
     * @param channelArn The ARN of the channel to which you&#39;re adding users or bots. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param operation  (required)
     * @param batchCreateChannelMembershipRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchCreateChannelMembershipCall(String channelArn, String xAmzChimeBearer, String operation, BatchCreateChannelMembershipRequest batchCreateChannelMembershipRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchCreateChannelMembershipRequest;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/memberships#operation=batch-create&x-amz-chime-bearer"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchCreateChannelMembershipValidateBeforeCall(String channelArn, String xAmzChimeBearer, String operation, BatchCreateChannelMembershipRequest batchCreateChannelMembershipRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling batchCreateChannelMembership(Async)");
        }

        // verify the required parameter 'xAmzChimeBearer' is set
        if (xAmzChimeBearer == null) {
            throw new ApiException("Missing the required parameter 'xAmzChimeBearer' when calling batchCreateChannelMembership(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling batchCreateChannelMembership(Async)");
        }

        // verify the required parameter 'batchCreateChannelMembershipRequest' is set
        if (batchCreateChannelMembershipRequest == null) {
            throw new ApiException("Missing the required parameter 'batchCreateChannelMembershipRequest' when calling batchCreateChannelMembership(Async)");
        }

        return batchCreateChannelMembershipCall(channelArn, xAmzChimeBearer, operation, batchCreateChannelMembershipRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Adds a specified number of users and bots to a channel. 
     * @param channelArn The ARN of the channel to which you&#39;re adding users or bots. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param operation  (required)
     * @param batchCreateChannelMembershipRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return BatchCreateChannelMembershipResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public BatchCreateChannelMembershipResponse batchCreateChannelMembership(String channelArn, String xAmzChimeBearer, String operation, BatchCreateChannelMembershipRequest batchCreateChannelMembershipRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<BatchCreateChannelMembershipResponse> localVarResp = batchCreateChannelMembershipWithHttpInfo(channelArn, xAmzChimeBearer, operation, batchCreateChannelMembershipRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds a specified number of users and bots to a channel. 
     * @param channelArn The ARN of the channel to which you&#39;re adding users or bots. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param operation  (required)
     * @param batchCreateChannelMembershipRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;BatchCreateChannelMembershipResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchCreateChannelMembershipResponse> batchCreateChannelMembershipWithHttpInfo(String channelArn, String xAmzChimeBearer, String operation, BatchCreateChannelMembershipRequest batchCreateChannelMembershipRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = batchCreateChannelMembershipValidateBeforeCall(channelArn, xAmzChimeBearer, operation, batchCreateChannelMembershipRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<BatchCreateChannelMembershipResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds a specified number of users and bots to a channel. 
     * @param channelArn The ARN of the channel to which you&#39;re adding users or bots. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param operation  (required)
     * @param batchCreateChannelMembershipRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchCreateChannelMembershipAsync(String channelArn, String xAmzChimeBearer, String operation, BatchCreateChannelMembershipRequest batchCreateChannelMembershipRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<BatchCreateChannelMembershipResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchCreateChannelMembershipValidateBeforeCall(channelArn, xAmzChimeBearer, operation, batchCreateChannelMembershipRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<BatchCreateChannelMembershipResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for channelFlowCallback
     * @param channelArn The ARN of the channel. (required)
     * @param operation  (required)
     * @param channelFlowCallbackRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call channelFlowCallbackCall(String channelArn, String operation, ChannelFlowCallbackRequest channelFlowCallbackRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = channelFlowCallbackRequest;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}#operation=channel-flow-callback"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call channelFlowCallbackValidateBeforeCall(String channelArn, String operation, ChannelFlowCallbackRequest channelFlowCallbackRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling channelFlowCallback(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling channelFlowCallback(Async)");
        }

        // verify the required parameter 'channelFlowCallbackRequest' is set
        if (channelFlowCallbackRequest == null) {
            throw new ApiException("Missing the required parameter 'channelFlowCallbackRequest' when calling channelFlowCallback(Async)");
        }

        return channelFlowCallbackCall(channelArn, operation, channelFlowCallbackRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Calls back Amazon Chime SDK messaging with a processing response message. This should be invoked from the processor Lambda. This is a developer API.&lt;/p&gt; &lt;p&gt;You can return one of the following processing responses:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Update message content or metadata&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deny a message&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Make no changes to the message&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param operation  (required)
     * @param channelFlowCallbackRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ChannelFlowCallbackResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ChannelFlowCallbackResponse channelFlowCallback(String channelArn, String operation, ChannelFlowCallbackRequest channelFlowCallbackRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ChannelFlowCallbackResponse> localVarResp = channelFlowCallbackWithHttpInfo(channelArn, operation, channelFlowCallbackRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Calls back Amazon Chime SDK messaging with a processing response message. This should be invoked from the processor Lambda. This is a developer API.&lt;/p&gt; &lt;p&gt;You can return one of the following processing responses:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Update message content or metadata&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deny a message&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Make no changes to the message&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param operation  (required)
     * @param channelFlowCallbackRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ChannelFlowCallbackResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ChannelFlowCallbackResponse> channelFlowCallbackWithHttpInfo(String channelArn, String operation, ChannelFlowCallbackRequest channelFlowCallbackRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = channelFlowCallbackValidateBeforeCall(channelArn, operation, channelFlowCallbackRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ChannelFlowCallbackResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Calls back Amazon Chime SDK messaging with a processing response message. This should be invoked from the processor Lambda. This is a developer API.&lt;/p&gt; &lt;p&gt;You can return one of the following processing responses:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Update message content or metadata&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deny a message&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Make no changes to the message&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param operation  (required)
     * @param channelFlowCallbackRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call channelFlowCallbackAsync(String channelArn, String operation, ChannelFlowCallbackRequest channelFlowCallbackRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ChannelFlowCallbackResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = channelFlowCallbackValidateBeforeCall(channelArn, operation, channelFlowCallbackRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ChannelFlowCallbackResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createChannel
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param createChannelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createChannelCall(String xAmzChimeBearer, CreateChannelRequest createChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createChannelRequest;

        // create path and map variables
        String localVarPath = "/channels#x-amz-chime-bearer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createChannelValidateBeforeCall(String xAmzChimeBearer, CreateChannelRequest createChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzChimeBearer' is set
        if (xAmzChimeBearer == null) {
            throw new ApiException("Missing the required parameter 'xAmzChimeBearer' when calling createChannel(Async)");
        }

        // verify the required parameter 'createChannelRequest' is set
        if (createChannelRequest == null) {
            throw new ApiException("Missing the required parameter 'createChannelRequest' when calling createChannel(Async)");
        }

        return createChannelCall(xAmzChimeBearer, createChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a channel to which you can add users and send messages.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Restriction&lt;/b&gt;: You can&#39;t change a channel&#39;s privacy.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param createChannelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateChannelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public CreateChannelResponse createChannel(String xAmzChimeBearer, CreateChannelRequest createChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateChannelResponse> localVarResp = createChannelWithHttpInfo(xAmzChimeBearer, createChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a channel to which you can add users and send messages.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Restriction&lt;/b&gt;: You can&#39;t change a channel&#39;s privacy.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param createChannelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateChannelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateChannelResponse> createChannelWithHttpInfo(String xAmzChimeBearer, CreateChannelRequest createChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createChannelValidateBeforeCall(xAmzChimeBearer, createChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateChannelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a channel to which you can add users and send messages.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Restriction&lt;/b&gt;: You can&#39;t change a channel&#39;s privacy.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param createChannelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createChannelAsync(String xAmzChimeBearer, CreateChannelRequest createChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateChannelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createChannelValidateBeforeCall(xAmzChimeBearer, createChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateChannelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createChannelBan
     * @param channelArn The ARN of the ban request. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param createChannelBanRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createChannelBanCall(String channelArn, String xAmzChimeBearer, CreateChannelBanRequest createChannelBanRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createChannelBanRequest;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/bans#x-amz-chime-bearer"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createChannelBanValidateBeforeCall(String channelArn, String xAmzChimeBearer, CreateChannelBanRequest createChannelBanRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling createChannelBan(Async)");
        }

        // verify the required parameter 'xAmzChimeBearer' is set
        if (xAmzChimeBearer == null) {
            throw new ApiException("Missing the required parameter 'xAmzChimeBearer' when calling createChannelBan(Async)");
        }

        // verify the required parameter 'createChannelBanRequest' is set
        if (createChannelBanRequest == null) {
            throw new ApiException("Missing the required parameter 'createChannelBanRequest' when calling createChannelBan(Async)");
        }

        return createChannelBanCall(channelArn, xAmzChimeBearer, createChannelBanRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Permanently bans a member from a channel. Moderators can&#39;t add banned members to a channel. To undo a ban, you first have to &lt;code&gt;DeleteChannelBan&lt;/code&gt;, and then &lt;code&gt;CreateChannelMembership&lt;/code&gt;. Bans are cleaned up when you delete users or channels.&lt;/p&gt; &lt;p&gt;If you ban a user who is already part of a channel, that user is automatically kicked from the channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the ban request. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param createChannelBanRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateChannelBanResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public CreateChannelBanResponse createChannelBan(String channelArn, String xAmzChimeBearer, CreateChannelBanRequest createChannelBanRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateChannelBanResponse> localVarResp = createChannelBanWithHttpInfo(channelArn, xAmzChimeBearer, createChannelBanRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Permanently bans a member from a channel. Moderators can&#39;t add banned members to a channel. To undo a ban, you first have to &lt;code&gt;DeleteChannelBan&lt;/code&gt;, and then &lt;code&gt;CreateChannelMembership&lt;/code&gt;. Bans are cleaned up when you delete users or channels.&lt;/p&gt; &lt;p&gt;If you ban a user who is already part of a channel, that user is automatically kicked from the channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the ban request. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param createChannelBanRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateChannelBanResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateChannelBanResponse> createChannelBanWithHttpInfo(String channelArn, String xAmzChimeBearer, CreateChannelBanRequest createChannelBanRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createChannelBanValidateBeforeCall(channelArn, xAmzChimeBearer, createChannelBanRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateChannelBanResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Permanently bans a member from a channel. Moderators can&#39;t add banned members to a channel. To undo a ban, you first have to &lt;code&gt;DeleteChannelBan&lt;/code&gt;, and then &lt;code&gt;CreateChannelMembership&lt;/code&gt;. Bans are cleaned up when you delete users or channels.&lt;/p&gt; &lt;p&gt;If you ban a user who is already part of a channel, that user is automatically kicked from the channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the ban request. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param createChannelBanRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createChannelBanAsync(String channelArn, String xAmzChimeBearer, CreateChannelBanRequest createChannelBanRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateChannelBanResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createChannelBanValidateBeforeCall(channelArn, xAmzChimeBearer, createChannelBanRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateChannelBanResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createChannelFlow
     * @param createChannelFlowRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createChannelFlowCall(CreateChannelFlowRequest createChannelFlowRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createChannelFlowRequest;

        // create path and map variables
        String localVarPath = "/channel-flows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createChannelFlowValidateBeforeCall(CreateChannelFlowRequest createChannelFlowRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createChannelFlowRequest' is set
        if (createChannelFlowRequest == null) {
            throw new ApiException("Missing the required parameter 'createChannelFlowRequest' when calling createChannelFlow(Async)");
        }

        return createChannelFlowCall(createChannelFlowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a channel flow, a container for processors. Processors are AWS Lambda functions that perform actions on chat messages, such as stripping out profanity. You can associate channel flows with channels, and the processors in the channel flow then take action on all messages sent to that channel. This is a developer API.&lt;/p&gt; &lt;p&gt;Channel flows process the following items:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;New and updated messages&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Persistent and non-persistent messages&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Standard message type&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;note&gt; &lt;p&gt;Channel flows don&#39;t process Control or System messages. For more information about the message types provided by Chime SDK messaging, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime/latest/dg/using-the-messaging-sdk.html#msg-types\&quot;&gt;Message types&lt;/a&gt; in the &lt;i&gt;Amazon Chime developer guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param createChannelFlowRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateChannelFlowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public CreateChannelFlowResponse createChannelFlow(CreateChannelFlowRequest createChannelFlowRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateChannelFlowResponse> localVarResp = createChannelFlowWithHttpInfo(createChannelFlowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a channel flow, a container for processors. Processors are AWS Lambda functions that perform actions on chat messages, such as stripping out profanity. You can associate channel flows with channels, and the processors in the channel flow then take action on all messages sent to that channel. This is a developer API.&lt;/p&gt; &lt;p&gt;Channel flows process the following items:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;New and updated messages&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Persistent and non-persistent messages&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Standard message type&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;note&gt; &lt;p&gt;Channel flows don&#39;t process Control or System messages. For more information about the message types provided by Chime SDK messaging, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime/latest/dg/using-the-messaging-sdk.html#msg-types\&quot;&gt;Message types&lt;/a&gt; in the &lt;i&gt;Amazon Chime developer guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param createChannelFlowRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateChannelFlowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateChannelFlowResponse> createChannelFlowWithHttpInfo(CreateChannelFlowRequest createChannelFlowRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createChannelFlowValidateBeforeCall(createChannelFlowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateChannelFlowResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a channel flow, a container for processors. Processors are AWS Lambda functions that perform actions on chat messages, such as stripping out profanity. You can associate channel flows with channels, and the processors in the channel flow then take action on all messages sent to that channel. This is a developer API.&lt;/p&gt; &lt;p&gt;Channel flows process the following items:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;New and updated messages&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Persistent and non-persistent messages&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Standard message type&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;note&gt; &lt;p&gt;Channel flows don&#39;t process Control or System messages. For more information about the message types provided by Chime SDK messaging, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime/latest/dg/using-the-messaging-sdk.html#msg-types\&quot;&gt;Message types&lt;/a&gt; in the &lt;i&gt;Amazon Chime developer guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param createChannelFlowRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createChannelFlowAsync(CreateChannelFlowRequest createChannelFlowRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateChannelFlowResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createChannelFlowValidateBeforeCall(createChannelFlowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateChannelFlowResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createChannelMembership
     * @param channelArn The ARN of the channel to which you&#39;re adding users. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param createChannelMembershipRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createChannelMembershipCall(String channelArn, String xAmzChimeBearer, CreateChannelMembershipRequest createChannelMembershipRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createChannelMembershipRequest;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/memberships#x-amz-chime-bearer"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createChannelMembershipValidateBeforeCall(String channelArn, String xAmzChimeBearer, CreateChannelMembershipRequest createChannelMembershipRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling createChannelMembership(Async)");
        }

        // verify the required parameter 'xAmzChimeBearer' is set
        if (xAmzChimeBearer == null) {
            throw new ApiException("Missing the required parameter 'xAmzChimeBearer' when calling createChannelMembership(Async)");
        }

        // verify the required parameter 'createChannelMembershipRequest' is set
        if (createChannelMembershipRequest == null) {
            throw new ApiException("Missing the required parameter 'createChannelMembershipRequest' when calling createChannelMembership(Async)");
        }

        return createChannelMembershipCall(channelArn, xAmzChimeBearer, createChannelMembershipRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds a member to a channel. The &lt;code&gt;InvitedBy&lt;/code&gt; field in &lt;code&gt;ChannelMembership&lt;/code&gt; is derived from the request header. A channel member can:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;List messages&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Send messages&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Receive messages&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Edit their own messages&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Leave the channel&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Privacy settings impact this action as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Public Channels: You do not need to be a member to list messages, but you must be a member to send messages.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Private Channels: You must be a member to list or send messages.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel to which you&#39;re adding users. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param createChannelMembershipRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateChannelMembershipResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public CreateChannelMembershipResponse createChannelMembership(String channelArn, String xAmzChimeBearer, CreateChannelMembershipRequest createChannelMembershipRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateChannelMembershipResponse> localVarResp = createChannelMembershipWithHttpInfo(channelArn, xAmzChimeBearer, createChannelMembershipRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Adds a member to a channel. The &lt;code&gt;InvitedBy&lt;/code&gt; field in &lt;code&gt;ChannelMembership&lt;/code&gt; is derived from the request header. A channel member can:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;List messages&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Send messages&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Receive messages&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Edit their own messages&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Leave the channel&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Privacy settings impact this action as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Public Channels: You do not need to be a member to list messages, but you must be a member to send messages.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Private Channels: You must be a member to list or send messages.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel to which you&#39;re adding users. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param createChannelMembershipRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateChannelMembershipResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateChannelMembershipResponse> createChannelMembershipWithHttpInfo(String channelArn, String xAmzChimeBearer, CreateChannelMembershipRequest createChannelMembershipRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createChannelMembershipValidateBeforeCall(channelArn, xAmzChimeBearer, createChannelMembershipRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateChannelMembershipResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds a member to a channel. The &lt;code&gt;InvitedBy&lt;/code&gt; field in &lt;code&gt;ChannelMembership&lt;/code&gt; is derived from the request header. A channel member can:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;List messages&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Send messages&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Receive messages&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Edit their own messages&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Leave the channel&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Privacy settings impact this action as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Public Channels: You do not need to be a member to list messages, but you must be a member to send messages.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Private Channels: You must be a member to list or send messages.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel to which you&#39;re adding users. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param createChannelMembershipRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createChannelMembershipAsync(String channelArn, String xAmzChimeBearer, CreateChannelMembershipRequest createChannelMembershipRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateChannelMembershipResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createChannelMembershipValidateBeforeCall(channelArn, xAmzChimeBearer, createChannelMembershipRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateChannelMembershipResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createChannelModerator
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param createChannelModeratorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createChannelModeratorCall(String channelArn, String xAmzChimeBearer, CreateChannelModeratorRequest createChannelModeratorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createChannelModeratorRequest;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/moderators#x-amz-chime-bearer"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createChannelModeratorValidateBeforeCall(String channelArn, String xAmzChimeBearer, CreateChannelModeratorRequest createChannelModeratorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling createChannelModerator(Async)");
        }

        // verify the required parameter 'xAmzChimeBearer' is set
        if (xAmzChimeBearer == null) {
            throw new ApiException("Missing the required parameter 'xAmzChimeBearer' when calling createChannelModerator(Async)");
        }

        // verify the required parameter 'createChannelModeratorRequest' is set
        if (createChannelModeratorRequest == null) {
            throw new ApiException("Missing the required parameter 'createChannelModeratorRequest' when calling createChannelModerator(Async)");
        }

        return createChannelModeratorCall(channelArn, xAmzChimeBearer, createChannelModeratorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new &lt;code&gt;ChannelModerator&lt;/code&gt;. A channel moderator can:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Add and remove other members of the channel.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Add and remove other moderators of the channel.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Add and remove user bans for the channel.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redact messages in the channel.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;List messages in the channel.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt;of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param createChannelModeratorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateChannelModeratorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public CreateChannelModeratorResponse createChannelModerator(String channelArn, String xAmzChimeBearer, CreateChannelModeratorRequest createChannelModeratorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateChannelModeratorResponse> localVarResp = createChannelModeratorWithHttpInfo(channelArn, xAmzChimeBearer, createChannelModeratorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new &lt;code&gt;ChannelModerator&lt;/code&gt;. A channel moderator can:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Add and remove other members of the channel.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Add and remove other moderators of the channel.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Add and remove user bans for the channel.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redact messages in the channel.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;List messages in the channel.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt;of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param createChannelModeratorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateChannelModeratorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateChannelModeratorResponse> createChannelModeratorWithHttpInfo(String channelArn, String xAmzChimeBearer, CreateChannelModeratorRequest createChannelModeratorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createChannelModeratorValidateBeforeCall(channelArn, xAmzChimeBearer, createChannelModeratorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateChannelModeratorResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new &lt;code&gt;ChannelModerator&lt;/code&gt;. A channel moderator can:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Add and remove other members of the channel.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Add and remove other moderators of the channel.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Add and remove user bans for the channel.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redact messages in the channel.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;List messages in the channel.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt;of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param createChannelModeratorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createChannelModeratorAsync(String channelArn, String xAmzChimeBearer, CreateChannelModeratorRequest createChannelModeratorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateChannelModeratorResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createChannelModeratorValidateBeforeCall(channelArn, xAmzChimeBearer, createChannelModeratorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateChannelModeratorResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteChannel
     * @param channelArn The ARN of the channel being deleted. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteChannelCall(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}#x-amz-chime-bearer"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteChannelValidateBeforeCall(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling deleteChannel(Async)");
        }

        // verify the required parameter 'xAmzChimeBearer' is set
        if (xAmzChimeBearer == null) {
            throw new ApiException("Missing the required parameter 'xAmzChimeBearer' when calling deleteChannel(Async)");
        }

        return deleteChannelCall(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Immediately makes a channel and its memberships inaccessible and marks them for deletion. This is an irreversible process.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel being deleted. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public void deleteChannel(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteChannelWithHttpInfo(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Immediately makes a channel and its memberships inaccessible and marks them for deletion. This is an irreversible process.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel being deleted. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteChannelWithHttpInfo(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteChannelValidateBeforeCall(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Immediately makes a channel and its memberships inaccessible and marks them for deletion. This is an irreversible process.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel being deleted. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteChannelAsync(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteChannelValidateBeforeCall(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteChannelBan
     * @param channelArn The ARN of the channel from which the &lt;code&gt;AppInstanceUser&lt;/code&gt; was banned. (required)
     * @param memberArn The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; that you want to reinstate. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteChannelBanCall(String channelArn, String memberArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/bans/{memberArn}#x-amz-chime-bearer"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()))
            .replace("{" + "memberArn" + "}", localVarApiClient.escapeString(memberArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteChannelBanValidateBeforeCall(String channelArn, String memberArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling deleteChannelBan(Async)");
        }

        // verify the required parameter 'memberArn' is set
        if (memberArn == null) {
            throw new ApiException("Missing the required parameter 'memberArn' when calling deleteChannelBan(Async)");
        }

        // verify the required parameter 'xAmzChimeBearer' is set
        if (xAmzChimeBearer == null) {
            throw new ApiException("Missing the required parameter 'xAmzChimeBearer' when calling deleteChannelBan(Async)");
        }

        return deleteChannelBanCall(channelArn, memberArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Removes a member from a channel&#39;s ban list.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel from which the &lt;code&gt;AppInstanceUser&lt;/code&gt; was banned. (required)
     * @param memberArn The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; that you want to reinstate. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public void deleteChannelBan(String channelArn, String memberArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteChannelBanWithHttpInfo(channelArn, memberArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Removes a member from a channel&#39;s ban list.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel from which the &lt;code&gt;AppInstanceUser&lt;/code&gt; was banned. (required)
     * @param memberArn The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; that you want to reinstate. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteChannelBanWithHttpInfo(String channelArn, String memberArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteChannelBanValidateBeforeCall(channelArn, memberArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Removes a member from a channel&#39;s ban list.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel from which the &lt;code&gt;AppInstanceUser&lt;/code&gt; was banned. (required)
     * @param memberArn The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; that you want to reinstate. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteChannelBanAsync(String channelArn, String memberArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteChannelBanValidateBeforeCall(channelArn, memberArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteChannelFlow
     * @param channelFlowArn The ARN of the channel flow. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteChannelFlowCall(String channelFlowArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channel-flows/{channelFlowArn}"
            .replace("{" + "channelFlowArn" + "}", localVarApiClient.escapeString(channelFlowArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteChannelFlowValidateBeforeCall(String channelFlowArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelFlowArn' is set
        if (channelFlowArn == null) {
            throw new ApiException("Missing the required parameter 'channelFlowArn' when calling deleteChannelFlow(Async)");
        }

        return deleteChannelFlowCall(channelFlowArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a channel flow, an irreversible process. This is a developer API.&lt;/p&gt; &lt;note&gt; &lt;p&gt; This API works only when the channel flow is not associated with any channel. To get a list of all channels that a channel flow is associated with, use the &lt;code&gt;ListChannelsAssociatedWithChannelFlow&lt;/code&gt; API. Use the &lt;code&gt;DisassociateChannelFlow&lt;/code&gt; API to disassociate a channel flow from all channels. &lt;/p&gt; &lt;/note&gt;
     * @param channelFlowArn The ARN of the channel flow. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public void deleteChannelFlow(String channelFlowArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteChannelFlowWithHttpInfo(channelFlowArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes a channel flow, an irreversible process. This is a developer API.&lt;/p&gt; &lt;note&gt; &lt;p&gt; This API works only when the channel flow is not associated with any channel. To get a list of all channels that a channel flow is associated with, use the &lt;code&gt;ListChannelsAssociatedWithChannelFlow&lt;/code&gt; API. Use the &lt;code&gt;DisassociateChannelFlow&lt;/code&gt; API to disassociate a channel flow from all channels. &lt;/p&gt; &lt;/note&gt;
     * @param channelFlowArn The ARN of the channel flow. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteChannelFlowWithHttpInfo(String channelFlowArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteChannelFlowValidateBeforeCall(channelFlowArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a channel flow, an irreversible process. This is a developer API.&lt;/p&gt; &lt;note&gt; &lt;p&gt; This API works only when the channel flow is not associated with any channel. To get a list of all channels that a channel flow is associated with, use the &lt;code&gt;ListChannelsAssociatedWithChannelFlow&lt;/code&gt; API. Use the &lt;code&gt;DisassociateChannelFlow&lt;/code&gt; API to disassociate a channel flow from all channels. &lt;/p&gt; &lt;/note&gt;
     * @param channelFlowArn The ARN of the channel flow. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteChannelFlowAsync(String channelFlowArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteChannelFlowValidateBeforeCall(channelFlowArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteChannelMembership
     * @param channelArn The ARN of the channel from which you want to remove the user. (required)
     * @param memberArn The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the member that you&#39;re removing from the channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subChannelId &lt;p&gt;The ID of the SubChannel in the request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only for use by moderators.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteChannelMembershipCall(String channelArn, String memberArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String subChannelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/memberships/{memberArn}#x-amz-chime-bearer"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()))
            .replace("{" + "memberArn" + "}", localVarApiClient.escapeString(memberArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subChannelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sub-channel-id", subChannelId));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteChannelMembershipValidateBeforeCall(String channelArn, String memberArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String subChannelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling deleteChannelMembership(Async)");
        }

        // verify the required parameter 'memberArn' is set
        if (memberArn == null) {
            throw new ApiException("Missing the required parameter 'memberArn' when calling deleteChannelMembership(Async)");
        }

        // verify the required parameter 'xAmzChimeBearer' is set
        if (xAmzChimeBearer == null) {
            throw new ApiException("Missing the required parameter 'xAmzChimeBearer' when calling deleteChannelMembership(Async)");
        }

        return deleteChannelMembershipCall(channelArn, memberArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subChannelId, _callback);

    }

    /**
     * 
     * &lt;p&gt;Removes a member from a channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel from which you want to remove the user. (required)
     * @param memberArn The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the member that you&#39;re removing from the channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subChannelId &lt;p&gt;The ID of the SubChannel in the request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only for use by moderators.&lt;/p&gt; &lt;/note&gt; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public void deleteChannelMembership(String channelArn, String memberArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String subChannelId) throws ApiException {
        deleteChannelMembershipWithHttpInfo(channelArn, memberArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subChannelId);
    }

    /**
     * 
     * &lt;p&gt;Removes a member from a channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel from which you want to remove the user. (required)
     * @param memberArn The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the member that you&#39;re removing from the channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subChannelId &lt;p&gt;The ID of the SubChannel in the request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only for use by moderators.&lt;/p&gt; &lt;/note&gt; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteChannelMembershipWithHttpInfo(String channelArn, String memberArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String subChannelId) throws ApiException {
        okhttp3.Call localVarCall = deleteChannelMembershipValidateBeforeCall(channelArn, memberArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subChannelId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Removes a member from a channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel from which you want to remove the user. (required)
     * @param memberArn The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the member that you&#39;re removing from the channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subChannelId &lt;p&gt;The ID of the SubChannel in the request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only for use by moderators.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteChannelMembershipAsync(String channelArn, String memberArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String subChannelId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteChannelMembershipValidateBeforeCall(channelArn, memberArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subChannelId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteChannelMessage
     * @param channelArn The ARN of the channel. (required)
     * @param messageId The ID of the message being deleted. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subChannelId &lt;p&gt;The ID of the SubChannel in the request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only required when deleting messages in a SubChannel that the user belongs to.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteChannelMessageCall(String channelArn, String messageId, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String subChannelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/messages/{messageId}#x-amz-chime-bearer"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()))
            .replace("{" + "messageId" + "}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subChannelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sub-channel-id", subChannelId));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteChannelMessageValidateBeforeCall(String channelArn, String messageId, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String subChannelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling deleteChannelMessage(Async)");
        }

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling deleteChannelMessage(Async)");
        }

        // verify the required parameter 'xAmzChimeBearer' is set
        if (xAmzChimeBearer == null) {
            throw new ApiException("Missing the required parameter 'xAmzChimeBearer' when calling deleteChannelMessage(Async)");
        }

        return deleteChannelMessageCall(channelArn, messageId, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subChannelId, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a channel message. Only admins can perform this action. Deletion makes messages inaccessible immediately. A background process deletes any revisions created by &lt;code&gt;UpdateChannelMessage&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param messageId The ID of the message being deleted. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subChannelId &lt;p&gt;The ID of the SubChannel in the request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only required when deleting messages in a SubChannel that the user belongs to.&lt;/p&gt; &lt;/note&gt; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public void deleteChannelMessage(String channelArn, String messageId, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String subChannelId) throws ApiException {
        deleteChannelMessageWithHttpInfo(channelArn, messageId, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subChannelId);
    }

    /**
     * 
     * &lt;p&gt;Deletes a channel message. Only admins can perform this action. Deletion makes messages inaccessible immediately. A background process deletes any revisions created by &lt;code&gt;UpdateChannelMessage&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param messageId The ID of the message being deleted. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subChannelId &lt;p&gt;The ID of the SubChannel in the request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only required when deleting messages in a SubChannel that the user belongs to.&lt;/p&gt; &lt;/note&gt; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteChannelMessageWithHttpInfo(String channelArn, String messageId, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String subChannelId) throws ApiException {
        okhttp3.Call localVarCall = deleteChannelMessageValidateBeforeCall(channelArn, messageId, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subChannelId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a channel message. Only admins can perform this action. Deletion makes messages inaccessible immediately. A background process deletes any revisions created by &lt;code&gt;UpdateChannelMessage&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param messageId The ID of the message being deleted. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subChannelId &lt;p&gt;The ID of the SubChannel in the request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only required when deleting messages in a SubChannel that the user belongs to.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteChannelMessageAsync(String channelArn, String messageId, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String subChannelId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteChannelMessageValidateBeforeCall(channelArn, messageId, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subChannelId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteChannelModerator
     * @param channelArn The ARN of the channel. (required)
     * @param channelModeratorArn The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the moderator being deleted. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteChannelModeratorCall(String channelArn, String channelModeratorArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/moderators/{channelModeratorArn}#x-amz-chime-bearer"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()))
            .replace("{" + "channelModeratorArn" + "}", localVarApiClient.escapeString(channelModeratorArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteChannelModeratorValidateBeforeCall(String channelArn, String channelModeratorArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling deleteChannelModerator(Async)");
        }

        // verify the required parameter 'channelModeratorArn' is set
        if (channelModeratorArn == null) {
            throw new ApiException("Missing the required parameter 'channelModeratorArn' when calling deleteChannelModerator(Async)");
        }

        // verify the required parameter 'xAmzChimeBearer' is set
        if (xAmzChimeBearer == null) {
            throw new ApiException("Missing the required parameter 'xAmzChimeBearer' when calling deleteChannelModerator(Async)");
        }

        return deleteChannelModeratorCall(channelArn, channelModeratorArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a channel moderator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param channelModeratorArn The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the moderator being deleted. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public void deleteChannelModerator(String channelArn, String channelModeratorArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteChannelModeratorWithHttpInfo(channelArn, channelModeratorArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes a channel moderator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param channelModeratorArn The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the moderator being deleted. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteChannelModeratorWithHttpInfo(String channelArn, String channelModeratorArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteChannelModeratorValidateBeforeCall(channelArn, channelModeratorArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a channel moderator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param channelModeratorArn The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the moderator being deleted. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteChannelModeratorAsync(String channelArn, String channelModeratorArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteChannelModeratorValidateBeforeCall(channelArn, channelModeratorArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMessagingStreamingConfigurations
     * @param appInstanceArn The ARN of the streaming configurations being deleted. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMessagingStreamingConfigurationsCall(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app-instances/{appInstanceArn}/streaming-configurations"
            .replace("{" + "appInstanceArn" + "}", localVarApiClient.escapeString(appInstanceArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMessagingStreamingConfigurationsValidateBeforeCall(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appInstanceArn' is set
        if (appInstanceArn == null) {
            throw new ApiException("Missing the required parameter 'appInstanceArn' when calling deleteMessagingStreamingConfigurations(Async)");
        }

        return deleteMessagingStreamingConfigurationsCall(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes the streaming configurations for an &lt;code&gt;AppInstance&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/streaming-export.html\&quot;&gt;Streaming messaging data&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.
     * @param appInstanceArn The ARN of the streaming configurations being deleted. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public void deleteMessagingStreamingConfigurations(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteMessagingStreamingConfigurationsWithHttpInfo(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Deletes the streaming configurations for an &lt;code&gt;AppInstance&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/streaming-export.html\&quot;&gt;Streaming messaging data&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.
     * @param appInstanceArn The ARN of the streaming configurations being deleted. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteMessagingStreamingConfigurationsWithHttpInfo(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteMessagingStreamingConfigurationsValidateBeforeCall(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the streaming configurations for an &lt;code&gt;AppInstance&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/streaming-export.html\&quot;&gt;Streaming messaging data&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.
     * @param appInstanceArn The ARN of the streaming configurations being deleted. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMessagingStreamingConfigurationsAsync(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMessagingStreamingConfigurationsValidateBeforeCall(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeChannel
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeChannelCall(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}#x-amz-chime-bearer"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeChannelValidateBeforeCall(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling describeChannel(Async)");
        }

        // verify the required parameter 'xAmzChimeBearer' is set
        if (xAmzChimeBearer == null) {
            throw new ApiException("Missing the required parameter 'xAmzChimeBearer' when calling describeChannel(Async)");
        }

        return describeChannelCall(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the full details of a channel in an Amazon Chime &lt;code&gt;AppInstance&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeChannelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeChannelResponse describeChannel(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeChannelResponse> localVarResp = describeChannelWithHttpInfo(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the full details of a channel in an Amazon Chime &lt;code&gt;AppInstance&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeChannelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeChannelResponse> describeChannelWithHttpInfo(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeChannelValidateBeforeCall(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeChannelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the full details of a channel in an Amazon Chime &lt;code&gt;AppInstance&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeChannelAsync(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeChannelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeChannelValidateBeforeCall(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeChannelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeChannelBan
     * @param channelArn The ARN of the channel from which the user is banned. (required)
     * @param memberArn The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the member being banned. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeChannelBanCall(String channelArn, String memberArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/bans/{memberArn}#x-amz-chime-bearer"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()))
            .replace("{" + "memberArn" + "}", localVarApiClient.escapeString(memberArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeChannelBanValidateBeforeCall(String channelArn, String memberArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling describeChannelBan(Async)");
        }

        // verify the required parameter 'memberArn' is set
        if (memberArn == null) {
            throw new ApiException("Missing the required parameter 'memberArn' when calling describeChannelBan(Async)");
        }

        // verify the required parameter 'xAmzChimeBearer' is set
        if (xAmzChimeBearer == null) {
            throw new ApiException("Missing the required parameter 'xAmzChimeBearer' when calling describeChannelBan(Async)");
        }

        return describeChannelBanCall(channelArn, memberArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the full details of a channel ban.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel from which the user is banned. (required)
     * @param memberArn The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the member being banned. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeChannelBanResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeChannelBanResponse describeChannelBan(String channelArn, String memberArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeChannelBanResponse> localVarResp = describeChannelBanWithHttpInfo(channelArn, memberArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the full details of a channel ban.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel from which the user is banned. (required)
     * @param memberArn The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the member being banned. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeChannelBanResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeChannelBanResponse> describeChannelBanWithHttpInfo(String channelArn, String memberArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeChannelBanValidateBeforeCall(channelArn, memberArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeChannelBanResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the full details of a channel ban.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel from which the user is banned. (required)
     * @param memberArn The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the member being banned. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeChannelBanAsync(String channelArn, String memberArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeChannelBanResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeChannelBanValidateBeforeCall(channelArn, memberArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeChannelBanResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeChannelFlow
     * @param channelFlowArn The ARN of the channel flow. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeChannelFlowCall(String channelFlowArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channel-flows/{channelFlowArn}"
            .replace("{" + "channelFlowArn" + "}", localVarApiClient.escapeString(channelFlowArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeChannelFlowValidateBeforeCall(String channelFlowArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelFlowArn' is set
        if (channelFlowArn == null) {
            throw new ApiException("Missing the required parameter 'channelFlowArn' when calling describeChannelFlow(Async)");
        }

        return describeChannelFlowCall(channelFlowArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Returns the full details of a channel flow in an Amazon Chime &lt;code&gt;AppInstance&lt;/code&gt;. This is a developer API.
     * @param channelFlowArn The ARN of the channel flow. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeChannelFlowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeChannelFlowResponse describeChannelFlow(String channelFlowArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeChannelFlowResponse> localVarResp = describeChannelFlowWithHttpInfo(channelFlowArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the full details of a channel flow in an Amazon Chime &lt;code&gt;AppInstance&lt;/code&gt;. This is a developer API.
     * @param channelFlowArn The ARN of the channel flow. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeChannelFlowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeChannelFlowResponse> describeChannelFlowWithHttpInfo(String channelFlowArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeChannelFlowValidateBeforeCall(channelFlowArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeChannelFlowResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the full details of a channel flow in an Amazon Chime &lt;code&gt;AppInstance&lt;/code&gt;. This is a developer API.
     * @param channelFlowArn The ARN of the channel flow. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeChannelFlowAsync(String channelFlowArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeChannelFlowResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeChannelFlowValidateBeforeCall(channelFlowArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeChannelFlowResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeChannelMembership
     * @param channelArn The ARN of the channel. (required)
     * @param memberArn The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the member. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subChannelId &lt;p&gt;The ID of the SubChannel in the request. The response contains an &lt;code&gt;ElasticChannelConfiguration&lt;/code&gt; object.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only required to get a user’s SubChannel membership details.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeChannelMembershipCall(String channelArn, String memberArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String subChannelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/memberships/{memberArn}#x-amz-chime-bearer"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()))
            .replace("{" + "memberArn" + "}", localVarApiClient.escapeString(memberArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subChannelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sub-channel-id", subChannelId));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeChannelMembershipValidateBeforeCall(String channelArn, String memberArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String subChannelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling describeChannelMembership(Async)");
        }

        // verify the required parameter 'memberArn' is set
        if (memberArn == null) {
            throw new ApiException("Missing the required parameter 'memberArn' when calling describeChannelMembership(Async)");
        }

        // verify the required parameter 'xAmzChimeBearer' is set
        if (xAmzChimeBearer == null) {
            throw new ApiException("Missing the required parameter 'xAmzChimeBearer' when calling describeChannelMembership(Async)");
        }

        return describeChannelMembershipCall(channelArn, memberArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subChannelId, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the full details of a user&#39;s channel membership.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param memberArn The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the member. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subChannelId &lt;p&gt;The ID of the SubChannel in the request. The response contains an &lt;code&gt;ElasticChannelConfiguration&lt;/code&gt; object.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only required to get a user’s SubChannel membership details.&lt;/p&gt; &lt;/note&gt; (optional)
     * @return DescribeChannelMembershipResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeChannelMembershipResponse describeChannelMembership(String channelArn, String memberArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String subChannelId) throws ApiException {
        ApiResponse<DescribeChannelMembershipResponse> localVarResp = describeChannelMembershipWithHttpInfo(channelArn, memberArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subChannelId);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the full details of a user&#39;s channel membership.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param memberArn The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the member. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subChannelId &lt;p&gt;The ID of the SubChannel in the request. The response contains an &lt;code&gt;ElasticChannelConfiguration&lt;/code&gt; object.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only required to get a user’s SubChannel membership details.&lt;/p&gt; &lt;/note&gt; (optional)
     * @return ApiResponse&lt;DescribeChannelMembershipResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeChannelMembershipResponse> describeChannelMembershipWithHttpInfo(String channelArn, String memberArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String subChannelId) throws ApiException {
        okhttp3.Call localVarCall = describeChannelMembershipValidateBeforeCall(channelArn, memberArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subChannelId, null);
        Type localVarReturnType = new TypeToken<DescribeChannelMembershipResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the full details of a user&#39;s channel membership.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param memberArn The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the member. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subChannelId &lt;p&gt;The ID of the SubChannel in the request. The response contains an &lt;code&gt;ElasticChannelConfiguration&lt;/code&gt; object.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only required to get a user’s SubChannel membership details.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeChannelMembershipAsync(String channelArn, String memberArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String subChannelId, final ApiCallback<DescribeChannelMembershipResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeChannelMembershipValidateBeforeCall(channelArn, memberArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subChannelId, _callback);
        Type localVarReturnType = new TypeToken<DescribeChannelMembershipResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeChannelMembershipForAppInstanceUser
     * @param channelArn The ARN of the channel to which the user belongs. (required)
     * @param appInstanceUserArn The ARN of the user or bot in a channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeChannelMembershipForAppInstanceUserCall(String channelArn, String appInstanceUserArn, String xAmzChimeBearer, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}#scope=app-instance-user-membership&app-instance-user-arn&x-amz-chime-bearer"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appInstanceUserArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app-instance-user-arn", appInstanceUserArn));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeChannelMembershipForAppInstanceUserValidateBeforeCall(String channelArn, String appInstanceUserArn, String xAmzChimeBearer, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling describeChannelMembershipForAppInstanceUser(Async)");
        }

        // verify the required parameter 'appInstanceUserArn' is set
        if (appInstanceUserArn == null) {
            throw new ApiException("Missing the required parameter 'appInstanceUserArn' when calling describeChannelMembershipForAppInstanceUser(Async)");
        }

        // verify the required parameter 'xAmzChimeBearer' is set
        if (xAmzChimeBearer == null) {
            throw new ApiException("Missing the required parameter 'xAmzChimeBearer' when calling describeChannelMembershipForAppInstanceUser(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling describeChannelMembershipForAppInstanceUser(Async)");
        }

        return describeChannelMembershipForAppInstanceUserCall(channelArn, appInstanceUserArn, xAmzChimeBearer, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt; Returns the details of a channel based on the membership of the specified &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel to which the user belongs. (required)
     * @param appInstanceUserArn The ARN of the user or bot in a channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeChannelMembershipForAppInstanceUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeChannelMembershipForAppInstanceUserResponse describeChannelMembershipForAppInstanceUser(String channelArn, String appInstanceUserArn, String xAmzChimeBearer, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeChannelMembershipForAppInstanceUserResponse> localVarResp = describeChannelMembershipForAppInstanceUserWithHttpInfo(channelArn, appInstanceUserArn, xAmzChimeBearer, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt; Returns the details of a channel based on the membership of the specified &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel to which the user belongs. (required)
     * @param appInstanceUserArn The ARN of the user or bot in a channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeChannelMembershipForAppInstanceUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeChannelMembershipForAppInstanceUserResponse> describeChannelMembershipForAppInstanceUserWithHttpInfo(String channelArn, String appInstanceUserArn, String xAmzChimeBearer, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeChannelMembershipForAppInstanceUserValidateBeforeCall(channelArn, appInstanceUserArn, xAmzChimeBearer, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeChannelMembershipForAppInstanceUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; Returns the details of a channel based on the membership of the specified &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel to which the user belongs. (required)
     * @param appInstanceUserArn The ARN of the user or bot in a channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeChannelMembershipForAppInstanceUserAsync(String channelArn, String appInstanceUserArn, String xAmzChimeBearer, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeChannelMembershipForAppInstanceUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeChannelMembershipForAppInstanceUserValidateBeforeCall(channelArn, appInstanceUserArn, xAmzChimeBearer, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeChannelMembershipForAppInstanceUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeChannelModeratedByAppInstanceUser
     * @param channelArn The ARN of the moderated channel. (required)
     * @param appInstanceUserArn The ARN of the user or bot in the moderated channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeChannelModeratedByAppInstanceUserCall(String channelArn, String appInstanceUserArn, String xAmzChimeBearer, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}#scope=app-instance-user-moderated-channel&app-instance-user-arn&x-amz-chime-bearer"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appInstanceUserArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app-instance-user-arn", appInstanceUserArn));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeChannelModeratedByAppInstanceUserValidateBeforeCall(String channelArn, String appInstanceUserArn, String xAmzChimeBearer, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling describeChannelModeratedByAppInstanceUser(Async)");
        }

        // verify the required parameter 'appInstanceUserArn' is set
        if (appInstanceUserArn == null) {
            throw new ApiException("Missing the required parameter 'appInstanceUserArn' when calling describeChannelModeratedByAppInstanceUser(Async)");
        }

        // verify the required parameter 'xAmzChimeBearer' is set
        if (xAmzChimeBearer == null) {
            throw new ApiException("Missing the required parameter 'xAmzChimeBearer' when calling describeChannelModeratedByAppInstanceUser(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling describeChannelModeratedByAppInstanceUser(Async)");
        }

        return describeChannelModeratedByAppInstanceUserCall(channelArn, appInstanceUserArn, xAmzChimeBearer, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the full details of a channel moderated by the specified &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the moderated channel. (required)
     * @param appInstanceUserArn The ARN of the user or bot in the moderated channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeChannelModeratedByAppInstanceUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeChannelModeratedByAppInstanceUserResponse describeChannelModeratedByAppInstanceUser(String channelArn, String appInstanceUserArn, String xAmzChimeBearer, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeChannelModeratedByAppInstanceUserResponse> localVarResp = describeChannelModeratedByAppInstanceUserWithHttpInfo(channelArn, appInstanceUserArn, xAmzChimeBearer, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the full details of a channel moderated by the specified &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the moderated channel. (required)
     * @param appInstanceUserArn The ARN of the user or bot in the moderated channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeChannelModeratedByAppInstanceUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeChannelModeratedByAppInstanceUserResponse> describeChannelModeratedByAppInstanceUserWithHttpInfo(String channelArn, String appInstanceUserArn, String xAmzChimeBearer, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeChannelModeratedByAppInstanceUserValidateBeforeCall(channelArn, appInstanceUserArn, xAmzChimeBearer, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeChannelModeratedByAppInstanceUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the full details of a channel moderated by the specified &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the moderated channel. (required)
     * @param appInstanceUserArn The ARN of the user or bot in the moderated channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeChannelModeratedByAppInstanceUserAsync(String channelArn, String appInstanceUserArn, String xAmzChimeBearer, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeChannelModeratedByAppInstanceUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeChannelModeratedByAppInstanceUserValidateBeforeCall(channelArn, appInstanceUserArn, xAmzChimeBearer, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeChannelModeratedByAppInstanceUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeChannelModerator
     * @param channelArn The ARN of the channel. (required)
     * @param channelModeratorArn The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the channel moderator. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeChannelModeratorCall(String channelArn, String channelModeratorArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/moderators/{channelModeratorArn}#x-amz-chime-bearer"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()))
            .replace("{" + "channelModeratorArn" + "}", localVarApiClient.escapeString(channelModeratorArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeChannelModeratorValidateBeforeCall(String channelArn, String channelModeratorArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling describeChannelModerator(Async)");
        }

        // verify the required parameter 'channelModeratorArn' is set
        if (channelModeratorArn == null) {
            throw new ApiException("Missing the required parameter 'channelModeratorArn' when calling describeChannelModerator(Async)");
        }

        // verify the required parameter 'xAmzChimeBearer' is set
        if (xAmzChimeBearer == null) {
            throw new ApiException("Missing the required parameter 'xAmzChimeBearer' when calling describeChannelModerator(Async)");
        }

        return describeChannelModeratorCall(channelArn, channelModeratorArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the full details of a single ChannelModerator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param channelModeratorArn The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the channel moderator. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeChannelModeratorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeChannelModeratorResponse describeChannelModerator(String channelArn, String channelModeratorArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeChannelModeratorResponse> localVarResp = describeChannelModeratorWithHttpInfo(channelArn, channelModeratorArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the full details of a single ChannelModerator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param channelModeratorArn The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the channel moderator. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeChannelModeratorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeChannelModeratorResponse> describeChannelModeratorWithHttpInfo(String channelArn, String channelModeratorArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeChannelModeratorValidateBeforeCall(channelArn, channelModeratorArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeChannelModeratorResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the full details of a single ChannelModerator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param channelModeratorArn The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the channel moderator. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeChannelModeratorAsync(String channelArn, String channelModeratorArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeChannelModeratorResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeChannelModeratorValidateBeforeCall(channelArn, channelModeratorArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeChannelModeratorResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disassociateChannelFlow
     * @param channelArn The ARN of the channel. (required)
     * @param channelFlowArn The ARN of the channel flow. (required)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user making the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disassociateChannelFlowCall(String channelArn, String channelFlowArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/channel-flow/{channelFlowArn}#x-amz-chime-bearer"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()))
            .replace("{" + "channelFlowArn" + "}", localVarApiClient.escapeString(channelFlowArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disassociateChannelFlowValidateBeforeCall(String channelArn, String channelFlowArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling disassociateChannelFlow(Async)");
        }

        // verify the required parameter 'channelFlowArn' is set
        if (channelFlowArn == null) {
            throw new ApiException("Missing the required parameter 'channelFlowArn' when calling disassociateChannelFlow(Async)");
        }

        // verify the required parameter 'xAmzChimeBearer' is set
        if (xAmzChimeBearer == null) {
            throw new ApiException("Missing the required parameter 'xAmzChimeBearer' when calling disassociateChannelFlow(Async)");
        }

        return disassociateChannelFlowCall(channelArn, channelFlowArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Disassociates a channel flow from all its channels. Once disassociated, all messages to that channel stop going through the channel flow processor.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only administrators or channel moderators can disassociate a channel flow.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param channelFlowArn The ARN of the channel flow. (required)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user making the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public void disassociateChannelFlow(String channelArn, String channelFlowArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        disassociateChannelFlowWithHttpInfo(channelArn, channelFlowArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Disassociates a channel flow from all its channels. Once disassociated, all messages to that channel stop going through the channel flow processor.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only administrators or channel moderators can disassociate a channel flow.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param channelFlowArn The ARN of the channel flow. (required)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user making the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> disassociateChannelFlowWithHttpInfo(String channelArn, String channelFlowArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = disassociateChannelFlowValidateBeforeCall(channelArn, channelFlowArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Disassociates a channel flow from all its channels. Once disassociated, all messages to that channel stop going through the channel flow processor.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only administrators or channel moderators can disassociate a channel flow.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param channelFlowArn The ARN of the channel flow. (required)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user making the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disassociateChannelFlowAsync(String channelArn, String channelFlowArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = disassociateChannelFlowValidateBeforeCall(channelArn, channelFlowArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChannelMembershipPreferences
     * @param channelArn The ARN of the channel. (required)
     * @param memberArn The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the member retrieving the preferences. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelMembershipPreferencesCall(String channelArn, String memberArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/memberships/{memberArn}/preferences#x-amz-chime-bearer"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()))
            .replace("{" + "memberArn" + "}", localVarApiClient.escapeString(memberArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChannelMembershipPreferencesValidateBeforeCall(String channelArn, String memberArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling getChannelMembershipPreferences(Async)");
        }

        // verify the required parameter 'memberArn' is set
        if (memberArn == null) {
            throw new ApiException("Missing the required parameter 'memberArn' when calling getChannelMembershipPreferences(Async)");
        }

        // verify the required parameter 'xAmzChimeBearer' is set
        if (xAmzChimeBearer == null) {
            throw new ApiException("Missing the required parameter 'xAmzChimeBearer' when calling getChannelMembershipPreferences(Async)");
        }

        return getChannelMembershipPreferencesCall(channelArn, memberArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets the membership preferences of an &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; for the specified channel. A user or a bot must be a member of the channel and own the membership in order to retrieve membership preferences. Users or bots in the &lt;code&gt;AppInstanceAdmin&lt;/code&gt; and channel moderator roles can&#39;t retrieve preferences for other users or bots. Banned users or bots can&#39;t retrieve membership preferences for the channel from which they are banned.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param memberArn The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the member retrieving the preferences. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetChannelMembershipPreferencesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public GetChannelMembershipPreferencesResponse getChannelMembershipPreferences(String channelArn, String memberArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetChannelMembershipPreferencesResponse> localVarResp = getChannelMembershipPreferencesWithHttpInfo(channelArn, memberArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets the membership preferences of an &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; for the specified channel. A user or a bot must be a member of the channel and own the membership in order to retrieve membership preferences. Users or bots in the &lt;code&gt;AppInstanceAdmin&lt;/code&gt; and channel moderator roles can&#39;t retrieve preferences for other users or bots. Banned users or bots can&#39;t retrieve membership preferences for the channel from which they are banned.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param memberArn The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the member retrieving the preferences. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetChannelMembershipPreferencesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetChannelMembershipPreferencesResponse> getChannelMembershipPreferencesWithHttpInfo(String channelArn, String memberArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getChannelMembershipPreferencesValidateBeforeCall(channelArn, memberArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetChannelMembershipPreferencesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets the membership preferences of an &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; for the specified channel. A user or a bot must be a member of the channel and own the membership in order to retrieve membership preferences. Users or bots in the &lt;code&gt;AppInstanceAdmin&lt;/code&gt; and channel moderator roles can&#39;t retrieve preferences for other users or bots. Banned users or bots can&#39;t retrieve membership preferences for the channel from which they are banned.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param memberArn The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the member retrieving the preferences. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelMembershipPreferencesAsync(String channelArn, String memberArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetChannelMembershipPreferencesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChannelMembershipPreferencesValidateBeforeCall(channelArn, memberArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetChannelMembershipPreferencesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChannelMessage
     * @param channelArn The ARN of the channel. (required)
     * @param messageId The ID of the message. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subChannelId &lt;p&gt;The ID of the SubChannel in the request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only required when getting messages in a SubChannel that the user belongs to.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelMessageCall(String channelArn, String messageId, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String subChannelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/messages/{messageId}#x-amz-chime-bearer"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()))
            .replace("{" + "messageId" + "}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subChannelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sub-channel-id", subChannelId));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChannelMessageValidateBeforeCall(String channelArn, String messageId, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String subChannelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling getChannelMessage(Async)");
        }

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling getChannelMessage(Async)");
        }

        // verify the required parameter 'xAmzChimeBearer' is set
        if (xAmzChimeBearer == null) {
            throw new ApiException("Missing the required parameter 'xAmzChimeBearer' when calling getChannelMessage(Async)");
        }

        return getChannelMessageCall(channelArn, messageId, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subChannelId, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets the full details of a channel message.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param messageId The ID of the message. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subChannelId &lt;p&gt;The ID of the SubChannel in the request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only required when getting messages in a SubChannel that the user belongs to.&lt;/p&gt; &lt;/note&gt; (optional)
     * @return GetChannelMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public GetChannelMessageResponse getChannelMessage(String channelArn, String messageId, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String subChannelId) throws ApiException {
        ApiResponse<GetChannelMessageResponse> localVarResp = getChannelMessageWithHttpInfo(channelArn, messageId, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subChannelId);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets the full details of a channel message.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param messageId The ID of the message. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subChannelId &lt;p&gt;The ID of the SubChannel in the request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only required when getting messages in a SubChannel that the user belongs to.&lt;/p&gt; &lt;/note&gt; (optional)
     * @return ApiResponse&lt;GetChannelMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetChannelMessageResponse> getChannelMessageWithHttpInfo(String channelArn, String messageId, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String subChannelId) throws ApiException {
        okhttp3.Call localVarCall = getChannelMessageValidateBeforeCall(channelArn, messageId, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subChannelId, null);
        Type localVarReturnType = new TypeToken<GetChannelMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets the full details of a channel message.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param messageId The ID of the message. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subChannelId &lt;p&gt;The ID of the SubChannel in the request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only required when getting messages in a SubChannel that the user belongs to.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelMessageAsync(String channelArn, String messageId, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String subChannelId, final ApiCallback<GetChannelMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChannelMessageValidateBeforeCall(channelArn, messageId, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subChannelId, _callback);
        Type localVarReturnType = new TypeToken<GetChannelMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChannelMessageStatus
     * @param channelArn The ARN of the channel (required)
     * @param messageId The ID of the message. (required)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user making the API call. (required)
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subChannelId &lt;p&gt;The ID of the SubChannel in the request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only required when getting message status in a SubChannel that the user belongs to.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelMessageStatusCall(String channelArn, String messageId, String xAmzChimeBearer, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String subChannelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/messages/{messageId}#scope=message-status&x-amz-chime-bearer"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()))
            .replace("{" + "messageId" + "}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subChannelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sub-channel-id", subChannelId));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChannelMessageStatusValidateBeforeCall(String channelArn, String messageId, String xAmzChimeBearer, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String subChannelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling getChannelMessageStatus(Async)");
        }

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling getChannelMessageStatus(Async)");
        }

        // verify the required parameter 'xAmzChimeBearer' is set
        if (xAmzChimeBearer == null) {
            throw new ApiException("Missing the required parameter 'xAmzChimeBearer' when calling getChannelMessageStatus(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getChannelMessageStatus(Async)");
        }

        return getChannelMessageStatusCall(channelArn, messageId, xAmzChimeBearer, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subChannelId, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets message status for a specified &lt;code&gt;messageId&lt;/code&gt;. Use this API to determine the intermediate status of messages going through channel flow processing. The API provides an alternative to retrieving message status if the event was not received because a client wasn&#39;t connected to a websocket. &lt;/p&gt; &lt;p&gt;Messages can have any one of these statuses.&lt;/p&gt; &lt;dl&gt; &lt;dt&gt;SENT&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Message processed successfully&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;PENDING&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Ongoing processing&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;FAILED&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Processing failed&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;DENIED&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Message denied by the processor&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;This API does not return statuses for denied messages, because we don&#39;t store them once the processor denies them. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Only the message sender can invoke this API.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel (required)
     * @param messageId The ID of the message. (required)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user making the API call. (required)
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subChannelId &lt;p&gt;The ID of the SubChannel in the request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only required when getting message status in a SubChannel that the user belongs to.&lt;/p&gt; &lt;/note&gt; (optional)
     * @return GetChannelMessageStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public GetChannelMessageStatusResponse getChannelMessageStatus(String channelArn, String messageId, String xAmzChimeBearer, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String subChannelId) throws ApiException {
        ApiResponse<GetChannelMessageStatusResponse> localVarResp = getChannelMessageStatusWithHttpInfo(channelArn, messageId, xAmzChimeBearer, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subChannelId);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets message status for a specified &lt;code&gt;messageId&lt;/code&gt;. Use this API to determine the intermediate status of messages going through channel flow processing. The API provides an alternative to retrieving message status if the event was not received because a client wasn&#39;t connected to a websocket. &lt;/p&gt; &lt;p&gt;Messages can have any one of these statuses.&lt;/p&gt; &lt;dl&gt; &lt;dt&gt;SENT&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Message processed successfully&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;PENDING&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Ongoing processing&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;FAILED&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Processing failed&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;DENIED&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Message denied by the processor&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;This API does not return statuses for denied messages, because we don&#39;t store them once the processor denies them. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Only the message sender can invoke this API.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel (required)
     * @param messageId The ID of the message. (required)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user making the API call. (required)
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subChannelId &lt;p&gt;The ID of the SubChannel in the request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only required when getting message status in a SubChannel that the user belongs to.&lt;/p&gt; &lt;/note&gt; (optional)
     * @return ApiResponse&lt;GetChannelMessageStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetChannelMessageStatusResponse> getChannelMessageStatusWithHttpInfo(String channelArn, String messageId, String xAmzChimeBearer, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String subChannelId) throws ApiException {
        okhttp3.Call localVarCall = getChannelMessageStatusValidateBeforeCall(channelArn, messageId, xAmzChimeBearer, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subChannelId, null);
        Type localVarReturnType = new TypeToken<GetChannelMessageStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets message status for a specified &lt;code&gt;messageId&lt;/code&gt;. Use this API to determine the intermediate status of messages going through channel flow processing. The API provides an alternative to retrieving message status if the event was not received because a client wasn&#39;t connected to a websocket. &lt;/p&gt; &lt;p&gt;Messages can have any one of these statuses.&lt;/p&gt; &lt;dl&gt; &lt;dt&gt;SENT&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Message processed successfully&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;PENDING&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Ongoing processing&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;FAILED&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Processing failed&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;DENIED&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Message denied by the processor&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;This API does not return statuses for denied messages, because we don&#39;t store them once the processor denies them. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Only the message sender can invoke this API.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel (required)
     * @param messageId The ID of the message. (required)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user making the API call. (required)
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subChannelId &lt;p&gt;The ID of the SubChannel in the request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only required when getting message status in a SubChannel that the user belongs to.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelMessageStatusAsync(String channelArn, String messageId, String xAmzChimeBearer, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String subChannelId, final ApiCallback<GetChannelMessageStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChannelMessageStatusValidateBeforeCall(channelArn, messageId, xAmzChimeBearer, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subChannelId, _callback);
        Type localVarReturnType = new TypeToken<GetChannelMessageStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMessagingSessionEndpoint
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMessagingSessionEndpointCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/endpoints/messaging-session";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMessagingSessionEndpointValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        return getMessagingSessionEndpointCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * The details of the endpoint for the messaging session.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetMessagingSessionEndpointResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public GetMessagingSessionEndpointResponse getMessagingSessionEndpoint(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetMessagingSessionEndpointResponse> localVarResp = getMessagingSessionEndpointWithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * The details of the endpoint for the messaging session.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetMessagingSessionEndpointResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMessagingSessionEndpointResponse> getMessagingSessionEndpointWithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getMessagingSessionEndpointValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetMessagingSessionEndpointResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The details of the endpoint for the messaging session.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMessagingSessionEndpointAsync(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetMessagingSessionEndpointResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMessagingSessionEndpointValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetMessagingSessionEndpointResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMessagingStreamingConfigurations
     * @param appInstanceArn The ARN of the streaming configurations. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMessagingStreamingConfigurationsCall(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app-instances/{appInstanceArn}/streaming-configurations"
            .replace("{" + "appInstanceArn" + "}", localVarApiClient.escapeString(appInstanceArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMessagingStreamingConfigurationsValidateBeforeCall(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appInstanceArn' is set
        if (appInstanceArn == null) {
            throw new ApiException("Missing the required parameter 'appInstanceArn' when calling getMessagingStreamingConfigurations(Async)");
        }

        return getMessagingStreamingConfigurationsCall(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Retrieves the data streaming configuration for an &lt;code&gt;AppInstance&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/streaming-export.html\&quot;&gt;Streaming messaging data&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.
     * @param appInstanceArn The ARN of the streaming configurations. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetMessagingStreamingConfigurationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public GetMessagingStreamingConfigurationsResponse getMessagingStreamingConfigurations(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetMessagingStreamingConfigurationsResponse> localVarResp = getMessagingStreamingConfigurationsWithHttpInfo(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the data streaming configuration for an &lt;code&gt;AppInstance&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/streaming-export.html\&quot;&gt;Streaming messaging data&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.
     * @param appInstanceArn The ARN of the streaming configurations. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetMessagingStreamingConfigurationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMessagingStreamingConfigurationsResponse> getMessagingStreamingConfigurationsWithHttpInfo(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getMessagingStreamingConfigurationsValidateBeforeCall(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetMessagingStreamingConfigurationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the data streaming configuration for an &lt;code&gt;AppInstance&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/streaming-export.html\&quot;&gt;Streaming messaging data&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.
     * @param appInstanceArn The ARN of the streaming configurations. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMessagingStreamingConfigurationsAsync(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetMessagingStreamingConfigurationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMessagingStreamingConfigurationsValidateBeforeCall(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetMessagingStreamingConfigurationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listChannelBans
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of bans that you want returned. (optional)
     * @param nextToken The token passed by previous API calls until all requested bans are returned. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChannelBansCall(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/bans#x-amz-chime-bearer"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listChannelBansValidateBeforeCall(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling listChannelBans(Async)");
        }

        // verify the required parameter 'xAmzChimeBearer' is set
        if (xAmzChimeBearer == null) {
            throw new ApiException("Missing the required parameter 'xAmzChimeBearer' when calling listChannelBans(Async)");
        }

        return listChannelBansCall(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists all the users and bots banned from a particular channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of bans that you want returned. (optional)
     * @param nextToken The token passed by previous API calls until all requested bans are returned. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListChannelBansResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ListChannelBansResponse listChannelBans(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListChannelBansResponse> localVarResp = listChannelBansWithHttpInfo(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists all the users and bots banned from a particular channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of bans that you want returned. (optional)
     * @param nextToken The token passed by previous API calls until all requested bans are returned. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListChannelBansResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListChannelBansResponse> listChannelBansWithHttpInfo(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listChannelBansValidateBeforeCall(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListChannelBansResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists all the users and bots banned from a particular channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of bans that you want returned. (optional)
     * @param nextToken The token passed by previous API calls until all requested bans are returned. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChannelBansAsync(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback<ListChannelBansResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listChannelBansValidateBeforeCall(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListChannelBansResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listChannelFlows
     * @param appInstanceArn The ARN of the app instance. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of channel flows that you want to return. (optional)
     * @param nextToken The token passed by previous API calls until all requested channel flows are returned. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChannelFlowsCall(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channel-flows#app-instance-arn";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appInstanceArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app-instance-arn", appInstanceArn));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listChannelFlowsValidateBeforeCall(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appInstanceArn' is set
        if (appInstanceArn == null) {
            throw new ApiException("Missing the required parameter 'appInstanceArn' when calling listChannelFlows(Async)");
        }

        return listChannelFlowsCall(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * Returns a paginated lists of all the channel flows created under a single Chime. This is a developer API.
     * @param appInstanceArn The ARN of the app instance. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of channel flows that you want to return. (optional)
     * @param nextToken The token passed by previous API calls until all requested channel flows are returned. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListChannelFlowsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ListChannelFlowsResponse listChannelFlows(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListChannelFlowsResponse> localVarResp = listChannelFlowsWithHttpInfo(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a paginated lists of all the channel flows created under a single Chime. This is a developer API.
     * @param appInstanceArn The ARN of the app instance. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of channel flows that you want to return. (optional)
     * @param nextToken The token passed by previous API calls until all requested channel flows are returned. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListChannelFlowsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListChannelFlowsResponse> listChannelFlowsWithHttpInfo(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listChannelFlowsValidateBeforeCall(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListChannelFlowsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a paginated lists of all the channel flows created under a single Chime. This is a developer API.
     * @param appInstanceArn The ARN of the app instance. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of channel flows that you want to return. (optional)
     * @param nextToken The token passed by previous API calls until all requested channel flows are returned. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChannelFlowsAsync(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback<ListChannelFlowsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listChannelFlowsValidateBeforeCall(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListChannelFlowsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listChannelMemberships
     * @param channelArn The maximum number of channel memberships that you want returned. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type The membership type of a user, &lt;code&gt;DEFAULT&lt;/code&gt; or &lt;code&gt;HIDDEN&lt;/code&gt;. Default members are returned as part of &lt;code&gt;ListChannelMemberships&lt;/code&gt; if no type is specified. Hidden members are only returned if the type filter in &lt;code&gt;ListChannelMemberships&lt;/code&gt; equals &lt;code&gt;HIDDEN&lt;/code&gt;. (optional)
     * @param maxResults The maximum number of channel memberships that you want returned. (optional)
     * @param nextToken The token passed by previous API calls until all requested channel memberships are returned. (optional)
     * @param subChannelId &lt;p&gt;The ID of the SubChannel in the request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only required when listing a user&#39;s memberships in a particular sub-channel of an elastic channel.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChannelMembershipsCall(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, Integer maxResults, String nextToken, String subChannelId, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/memberships#x-amz-chime-bearer"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (subChannelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sub-channel-id", subChannelId));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listChannelMembershipsValidateBeforeCall(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, Integer maxResults, String nextToken, String subChannelId, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling listChannelMemberships(Async)");
        }

        // verify the required parameter 'xAmzChimeBearer' is set
        if (xAmzChimeBearer == null) {
            throw new ApiException("Missing the required parameter 'xAmzChimeBearer' when calling listChannelMemberships(Async)");
        }

        return listChannelMembershipsCall(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, maxResults, nextToken, subChannelId, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists all channel memberships in a channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;If you want to list the channels to which a specific app instance user belongs, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime/latest/APIReference/API_messaging-chime_ListChannelMembershipsForAppInstanceUser.html\&quot;&gt;ListChannelMembershipsForAppInstanceUser&lt;/a&gt; API.&lt;/p&gt;
     * @param channelArn The maximum number of channel memberships that you want returned. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type The membership type of a user, &lt;code&gt;DEFAULT&lt;/code&gt; or &lt;code&gt;HIDDEN&lt;/code&gt;. Default members are returned as part of &lt;code&gt;ListChannelMemberships&lt;/code&gt; if no type is specified. Hidden members are only returned if the type filter in &lt;code&gt;ListChannelMemberships&lt;/code&gt; equals &lt;code&gt;HIDDEN&lt;/code&gt;. (optional)
     * @param maxResults The maximum number of channel memberships that you want returned. (optional)
     * @param nextToken The token passed by previous API calls until all requested channel memberships are returned. (optional)
     * @param subChannelId &lt;p&gt;The ID of the SubChannel in the request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only required when listing a user&#39;s memberships in a particular sub-channel of an elastic channel.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListChannelMembershipsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ListChannelMembershipsResponse listChannelMemberships(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, Integer maxResults, String nextToken, String subChannelId, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListChannelMembershipsResponse> localVarResp = listChannelMembershipsWithHttpInfo(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, maxResults, nextToken, subChannelId, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists all channel memberships in a channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;If you want to list the channels to which a specific app instance user belongs, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime/latest/APIReference/API_messaging-chime_ListChannelMembershipsForAppInstanceUser.html\&quot;&gt;ListChannelMembershipsForAppInstanceUser&lt;/a&gt; API.&lt;/p&gt;
     * @param channelArn The maximum number of channel memberships that you want returned. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type The membership type of a user, &lt;code&gt;DEFAULT&lt;/code&gt; or &lt;code&gt;HIDDEN&lt;/code&gt;. Default members are returned as part of &lt;code&gt;ListChannelMemberships&lt;/code&gt; if no type is specified. Hidden members are only returned if the type filter in &lt;code&gt;ListChannelMemberships&lt;/code&gt; equals &lt;code&gt;HIDDEN&lt;/code&gt;. (optional)
     * @param maxResults The maximum number of channel memberships that you want returned. (optional)
     * @param nextToken The token passed by previous API calls until all requested channel memberships are returned. (optional)
     * @param subChannelId &lt;p&gt;The ID of the SubChannel in the request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only required when listing a user&#39;s memberships in a particular sub-channel of an elastic channel.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListChannelMembershipsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListChannelMembershipsResponse> listChannelMembershipsWithHttpInfo(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, Integer maxResults, String nextToken, String subChannelId, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listChannelMembershipsValidateBeforeCall(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, maxResults, nextToken, subChannelId, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListChannelMembershipsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists all channel memberships in a channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;If you want to list the channels to which a specific app instance user belongs, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime/latest/APIReference/API_messaging-chime_ListChannelMembershipsForAppInstanceUser.html\&quot;&gt;ListChannelMembershipsForAppInstanceUser&lt;/a&gt; API.&lt;/p&gt;
     * @param channelArn The maximum number of channel memberships that you want returned. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type The membership type of a user, &lt;code&gt;DEFAULT&lt;/code&gt; or &lt;code&gt;HIDDEN&lt;/code&gt;. Default members are returned as part of &lt;code&gt;ListChannelMemberships&lt;/code&gt; if no type is specified. Hidden members are only returned if the type filter in &lt;code&gt;ListChannelMemberships&lt;/code&gt; equals &lt;code&gt;HIDDEN&lt;/code&gt;. (optional)
     * @param maxResults The maximum number of channel memberships that you want returned. (optional)
     * @param nextToken The token passed by previous API calls until all requested channel memberships are returned. (optional)
     * @param subChannelId &lt;p&gt;The ID of the SubChannel in the request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only required when listing a user&#39;s memberships in a particular sub-channel of an elastic channel.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChannelMembershipsAsync(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, Integer maxResults, String nextToken, String subChannelId, String maxResults2, String nextToken2, final ApiCallback<ListChannelMembershipsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listChannelMembershipsValidateBeforeCall(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, maxResults, nextToken, subChannelId, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListChannelMembershipsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listChannelMembershipsForAppInstanceUser
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param appInstanceUserArn The ARN of the user or bot. (optional)
     * @param maxResults The maximum number of users that you want returned. (optional)
     * @param nextToken The token returned from previous API requests until the number of channel memberships is reached. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChannelMembershipsForAppInstanceUserCall(String xAmzChimeBearer, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String appInstanceUserArn, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels#scope=app-instance-user-memberships&x-amz-chime-bearer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appInstanceUserArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app-instance-user-arn", appInstanceUserArn));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listChannelMembershipsForAppInstanceUserValidateBeforeCall(String xAmzChimeBearer, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String appInstanceUserArn, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzChimeBearer' is set
        if (xAmzChimeBearer == null) {
            throw new ApiException("Missing the required parameter 'xAmzChimeBearer' when calling listChannelMembershipsForAppInstanceUser(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling listChannelMembershipsForAppInstanceUser(Async)");
        }

        return listChannelMembershipsForAppInstanceUserCall(xAmzChimeBearer, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, appInstanceUserArn, maxResults, nextToken, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * &lt;p&gt; Lists all channels that an &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; is a part of. Only an &lt;code&gt;AppInstanceAdmin&lt;/code&gt; can call the API with a user ARN that is not their own. &lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param appInstanceUserArn The ARN of the user or bot. (optional)
     * @param maxResults The maximum number of users that you want returned. (optional)
     * @param nextToken The token returned from previous API requests until the number of channel memberships is reached. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListChannelMembershipsForAppInstanceUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ListChannelMembershipsForAppInstanceUserResponse listChannelMembershipsForAppInstanceUser(String xAmzChimeBearer, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String appInstanceUserArn, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListChannelMembershipsForAppInstanceUserResponse> localVarResp = listChannelMembershipsForAppInstanceUserWithHttpInfo(xAmzChimeBearer, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, appInstanceUserArn, maxResults, nextToken, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt; Lists all channels that an &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; is a part of. Only an &lt;code&gt;AppInstanceAdmin&lt;/code&gt; can call the API with a user ARN that is not their own. &lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param appInstanceUserArn The ARN of the user or bot. (optional)
     * @param maxResults The maximum number of users that you want returned. (optional)
     * @param nextToken The token returned from previous API requests until the number of channel memberships is reached. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListChannelMembershipsForAppInstanceUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListChannelMembershipsForAppInstanceUserResponse> listChannelMembershipsForAppInstanceUserWithHttpInfo(String xAmzChimeBearer, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String appInstanceUserArn, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listChannelMembershipsForAppInstanceUserValidateBeforeCall(xAmzChimeBearer, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, appInstanceUserArn, maxResults, nextToken, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListChannelMembershipsForAppInstanceUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; Lists all channels that an &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; is a part of. Only an &lt;code&gt;AppInstanceAdmin&lt;/code&gt; can call the API with a user ARN that is not their own. &lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param appInstanceUserArn The ARN of the user or bot. (optional)
     * @param maxResults The maximum number of users that you want returned. (optional)
     * @param nextToken The token returned from previous API requests until the number of channel memberships is reached. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChannelMembershipsForAppInstanceUserAsync(String xAmzChimeBearer, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String appInstanceUserArn, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback<ListChannelMembershipsForAppInstanceUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listChannelMembershipsForAppInstanceUserValidateBeforeCall(xAmzChimeBearer, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, appInstanceUserArn, maxResults, nextToken, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListChannelMembershipsForAppInstanceUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listChannelMessages
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sortOrder The order in which you want messages sorted. Default is Descending, based on time created. (optional)
     * @param notBefore The initial or starting time stamp for your requested messages. (optional)
     * @param notAfter The final or ending time stamp for your requested messages. (optional)
     * @param maxResults The maximum number of messages that you want returned. (optional)
     * @param nextToken The token passed by previous API calls until all requested messages are returned. (optional)
     * @param subChannelId &lt;p&gt;The ID of the SubChannel in the request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only required when listing the messages in a SubChannel that the user belongs to.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChannelMessagesCall(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sortOrder, OffsetDateTime notBefore, OffsetDateTime notAfter, Integer maxResults, String nextToken, String subChannelId, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/messages#x-amz-chime-bearer"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort-order", sortOrder));
        }

        if (notBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("not-before", notBefore));
        }

        if (notAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("not-after", notAfter));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (subChannelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sub-channel-id", subChannelId));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listChannelMessagesValidateBeforeCall(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sortOrder, OffsetDateTime notBefore, OffsetDateTime notAfter, Integer maxResults, String nextToken, String subChannelId, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling listChannelMessages(Async)");
        }

        // verify the required parameter 'xAmzChimeBearer' is set
        if (xAmzChimeBearer == null) {
            throw new ApiException("Missing the required parameter 'xAmzChimeBearer' when calling listChannelMessages(Async)");
        }

        return listChannelMessagesCall(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sortOrder, notBefore, notAfter, maxResults, nextToken, subChannelId, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * &lt;p&gt;List all the messages in a channel. Returns a paginated list of &lt;code&gt;ChannelMessages&lt;/code&gt;. By default, sorted by creation timestamp in descending order.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Redacted messages appear in the results as empty, since they are only redacted, not deleted. Deleted messages do not appear in the results. This action always returns the latest version of an edited message.&lt;/p&gt; &lt;p&gt;Also, the &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sortOrder The order in which you want messages sorted. Default is Descending, based on time created. (optional)
     * @param notBefore The initial or starting time stamp for your requested messages. (optional)
     * @param notAfter The final or ending time stamp for your requested messages. (optional)
     * @param maxResults The maximum number of messages that you want returned. (optional)
     * @param nextToken The token passed by previous API calls until all requested messages are returned. (optional)
     * @param subChannelId &lt;p&gt;The ID of the SubChannel in the request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only required when listing the messages in a SubChannel that the user belongs to.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListChannelMessagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ListChannelMessagesResponse listChannelMessages(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sortOrder, OffsetDateTime notBefore, OffsetDateTime notAfter, Integer maxResults, String nextToken, String subChannelId, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListChannelMessagesResponse> localVarResp = listChannelMessagesWithHttpInfo(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sortOrder, notBefore, notAfter, maxResults, nextToken, subChannelId, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;List all the messages in a channel. Returns a paginated list of &lt;code&gt;ChannelMessages&lt;/code&gt;. By default, sorted by creation timestamp in descending order.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Redacted messages appear in the results as empty, since they are only redacted, not deleted. Deleted messages do not appear in the results. This action always returns the latest version of an edited message.&lt;/p&gt; &lt;p&gt;Also, the &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sortOrder The order in which you want messages sorted. Default is Descending, based on time created. (optional)
     * @param notBefore The initial or starting time stamp for your requested messages. (optional)
     * @param notAfter The final or ending time stamp for your requested messages. (optional)
     * @param maxResults The maximum number of messages that you want returned. (optional)
     * @param nextToken The token passed by previous API calls until all requested messages are returned. (optional)
     * @param subChannelId &lt;p&gt;The ID of the SubChannel in the request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only required when listing the messages in a SubChannel that the user belongs to.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListChannelMessagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListChannelMessagesResponse> listChannelMessagesWithHttpInfo(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sortOrder, OffsetDateTime notBefore, OffsetDateTime notAfter, Integer maxResults, String nextToken, String subChannelId, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listChannelMessagesValidateBeforeCall(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sortOrder, notBefore, notAfter, maxResults, nextToken, subChannelId, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListChannelMessagesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;List all the messages in a channel. Returns a paginated list of &lt;code&gt;ChannelMessages&lt;/code&gt;. By default, sorted by creation timestamp in descending order.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Redacted messages appear in the results as empty, since they are only redacted, not deleted. Deleted messages do not appear in the results. This action always returns the latest version of an edited message.&lt;/p&gt; &lt;p&gt;Also, the &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sortOrder The order in which you want messages sorted. Default is Descending, based on time created. (optional)
     * @param notBefore The initial or starting time stamp for your requested messages. (optional)
     * @param notAfter The final or ending time stamp for your requested messages. (optional)
     * @param maxResults The maximum number of messages that you want returned. (optional)
     * @param nextToken The token passed by previous API calls until all requested messages are returned. (optional)
     * @param subChannelId &lt;p&gt;The ID of the SubChannel in the request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only required when listing the messages in a SubChannel that the user belongs to.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChannelMessagesAsync(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sortOrder, OffsetDateTime notBefore, OffsetDateTime notAfter, Integer maxResults, String nextToken, String subChannelId, String maxResults2, String nextToken2, final ApiCallback<ListChannelMessagesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listChannelMessagesValidateBeforeCall(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sortOrder, notBefore, notAfter, maxResults, nextToken, subChannelId, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListChannelMessagesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listChannelModerators
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of moderators that you want returned. (optional)
     * @param nextToken The token passed by previous API calls until all requested moderators are returned. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChannelModeratorsCall(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/moderators#x-amz-chime-bearer"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listChannelModeratorsValidateBeforeCall(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling listChannelModerators(Async)");
        }

        // verify the required parameter 'xAmzChimeBearer' is set
        if (xAmzChimeBearer == null) {
            throw new ApiException("Missing the required parameter 'xAmzChimeBearer' when calling listChannelModerators(Async)");
        }

        return listChannelModeratorsCall(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists all the moderators for a channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of moderators that you want returned. (optional)
     * @param nextToken The token passed by previous API calls until all requested moderators are returned. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListChannelModeratorsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ListChannelModeratorsResponse listChannelModerators(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListChannelModeratorsResponse> localVarResp = listChannelModeratorsWithHttpInfo(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists all the moderators for a channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of moderators that you want returned. (optional)
     * @param nextToken The token passed by previous API calls until all requested moderators are returned. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListChannelModeratorsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListChannelModeratorsResponse> listChannelModeratorsWithHttpInfo(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listChannelModeratorsValidateBeforeCall(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListChannelModeratorsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists all the moderators for a channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of moderators that you want returned. (optional)
     * @param nextToken The token passed by previous API calls until all requested moderators are returned. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChannelModeratorsAsync(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback<ListChannelModeratorsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listChannelModeratorsValidateBeforeCall(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListChannelModeratorsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listChannels
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param privacy The privacy setting. &lt;code&gt;PUBLIC&lt;/code&gt; retrieves all the public channels. &lt;code&gt;PRIVATE&lt;/code&gt; retrieves private channels. Only an &lt;code&gt;AppInstanceAdmin&lt;/code&gt; can retrieve private channels.  (optional)
     * @param maxResults The maximum number of channels that you want to return. (optional)
     * @param nextToken The token passed by previous API calls until all requested channels are returned. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChannelsCall(String appInstanceArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String privacy, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels#app-instance-arn&x-amz-chime-bearer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appInstanceArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app-instance-arn", appInstanceArn));
        }

        if (privacy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("privacy", privacy));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listChannelsValidateBeforeCall(String appInstanceArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String privacy, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appInstanceArn' is set
        if (appInstanceArn == null) {
            throw new ApiException("Missing the required parameter 'appInstanceArn' when calling listChannels(Async)");
        }

        // verify the required parameter 'xAmzChimeBearer' is set
        if (xAmzChimeBearer == null) {
            throw new ApiException("Missing the required parameter 'xAmzChimeBearer' when calling listChannels(Async)");
        }

        return listChannelsCall(appInstanceArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, privacy, maxResults, nextToken, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists all Channels created under a single Chime App as a paginated list. You can specify filters to narrow results.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Functionality &amp;amp; restrictions&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Use privacy &#x3D; &lt;code&gt;PUBLIC&lt;/code&gt; to retrieve all public channels in the account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Only an &lt;code&gt;AppInstanceAdmin&lt;/code&gt; can set privacy &#x3D; &lt;code&gt;PRIVATE&lt;/code&gt; to list the private channels in an account.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param privacy The privacy setting. &lt;code&gt;PUBLIC&lt;/code&gt; retrieves all the public channels. &lt;code&gt;PRIVATE&lt;/code&gt; retrieves private channels. Only an &lt;code&gt;AppInstanceAdmin&lt;/code&gt; can retrieve private channels.  (optional)
     * @param maxResults The maximum number of channels that you want to return. (optional)
     * @param nextToken The token passed by previous API calls until all requested channels are returned. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListChannelsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ListChannelsResponse listChannels(String appInstanceArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String privacy, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListChannelsResponse> localVarResp = listChannelsWithHttpInfo(appInstanceArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, privacy, maxResults, nextToken, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists all Channels created under a single Chime App as a paginated list. You can specify filters to narrow results.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Functionality &amp;amp; restrictions&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Use privacy &#x3D; &lt;code&gt;PUBLIC&lt;/code&gt; to retrieve all public channels in the account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Only an &lt;code&gt;AppInstanceAdmin&lt;/code&gt; can set privacy &#x3D; &lt;code&gt;PRIVATE&lt;/code&gt; to list the private channels in an account.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param privacy The privacy setting. &lt;code&gt;PUBLIC&lt;/code&gt; retrieves all the public channels. &lt;code&gt;PRIVATE&lt;/code&gt; retrieves private channels. Only an &lt;code&gt;AppInstanceAdmin&lt;/code&gt; can retrieve private channels.  (optional)
     * @param maxResults The maximum number of channels that you want to return. (optional)
     * @param nextToken The token passed by previous API calls until all requested channels are returned. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListChannelsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListChannelsResponse> listChannelsWithHttpInfo(String appInstanceArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String privacy, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listChannelsValidateBeforeCall(appInstanceArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, privacy, maxResults, nextToken, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListChannelsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists all Channels created under a single Chime App as a paginated list. You can specify filters to narrow results.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Functionality &amp;amp; restrictions&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Use privacy &#x3D; &lt;code&gt;PUBLIC&lt;/code&gt; to retrieve all public channels in the account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Only an &lt;code&gt;AppInstanceAdmin&lt;/code&gt; can set privacy &#x3D; &lt;code&gt;PRIVATE&lt;/code&gt; to list the private channels in an account.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param privacy The privacy setting. &lt;code&gt;PUBLIC&lt;/code&gt; retrieves all the public channels. &lt;code&gt;PRIVATE&lt;/code&gt; retrieves private channels. Only an &lt;code&gt;AppInstanceAdmin&lt;/code&gt; can retrieve private channels.  (optional)
     * @param maxResults The maximum number of channels that you want to return. (optional)
     * @param nextToken The token passed by previous API calls until all requested channels are returned. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChannelsAsync(String appInstanceArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String privacy, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback<ListChannelsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listChannelsValidateBeforeCall(appInstanceArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, privacy, maxResults, nextToken, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListChannelsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listChannelsAssociatedWithChannelFlow
     * @param channelFlowArn The ARN of the channel flow. (required)
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of channels that you want to return. (optional)
     * @param nextToken The token passed by previous API calls until all requested channels are returned. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChannelsAssociatedWithChannelFlowCall(String channelFlowArn, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels#scope=channel-flow-associations&channel-flow-arn";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelFlowArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel-flow-arn", channelFlowArn));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listChannelsAssociatedWithChannelFlowValidateBeforeCall(String channelFlowArn, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelFlowArn' is set
        if (channelFlowArn == null) {
            throw new ApiException("Missing the required parameter 'channelFlowArn' when calling listChannelsAssociatedWithChannelFlow(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling listChannelsAssociatedWithChannelFlow(Async)");
        }

        return listChannelsAssociatedWithChannelFlowCall(channelFlowArn, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * Lists all channels associated with a specified channel flow. You can associate a channel flow with multiple channels, but you can only associate a channel with one channel flow. This is a developer API.
     * @param channelFlowArn The ARN of the channel flow. (required)
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of channels that you want to return. (optional)
     * @param nextToken The token passed by previous API calls until all requested channels are returned. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListChannelsAssociatedWithChannelFlowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ListChannelsAssociatedWithChannelFlowResponse listChannelsAssociatedWithChannelFlow(String channelFlowArn, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListChannelsAssociatedWithChannelFlowResponse> localVarResp = listChannelsAssociatedWithChannelFlowWithHttpInfo(channelFlowArn, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all channels associated with a specified channel flow. You can associate a channel flow with multiple channels, but you can only associate a channel with one channel flow. This is a developer API.
     * @param channelFlowArn The ARN of the channel flow. (required)
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of channels that you want to return. (optional)
     * @param nextToken The token passed by previous API calls until all requested channels are returned. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListChannelsAssociatedWithChannelFlowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListChannelsAssociatedWithChannelFlowResponse> listChannelsAssociatedWithChannelFlowWithHttpInfo(String channelFlowArn, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listChannelsAssociatedWithChannelFlowValidateBeforeCall(channelFlowArn, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListChannelsAssociatedWithChannelFlowResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all channels associated with a specified channel flow. You can associate a channel flow with multiple channels, but you can only associate a channel with one channel flow. This is a developer API.
     * @param channelFlowArn The ARN of the channel flow. (required)
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of channels that you want to return. (optional)
     * @param nextToken The token passed by previous API calls until all requested channels are returned. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChannelsAssociatedWithChannelFlowAsync(String channelFlowArn, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback<ListChannelsAssociatedWithChannelFlowResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listChannelsAssociatedWithChannelFlowValidateBeforeCall(channelFlowArn, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListChannelsAssociatedWithChannelFlowResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listChannelsModeratedByAppInstanceUser
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param appInstanceUserArn The ARN of the user or bot in the moderated channel. (optional)
     * @param maxResults The maximum number of channels in the request. (optional)
     * @param nextToken The token returned from previous API requests until the number of channels moderated by the user is reached. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChannelsModeratedByAppInstanceUserCall(String xAmzChimeBearer, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String appInstanceUserArn, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels#scope=app-instance-user-moderated-channels&x-amz-chime-bearer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appInstanceUserArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app-instance-user-arn", appInstanceUserArn));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listChannelsModeratedByAppInstanceUserValidateBeforeCall(String xAmzChimeBearer, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String appInstanceUserArn, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzChimeBearer' is set
        if (xAmzChimeBearer == null) {
            throw new ApiException("Missing the required parameter 'xAmzChimeBearer' when calling listChannelsModeratedByAppInstanceUser(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling listChannelsModeratedByAppInstanceUser(Async)");
        }

        return listChannelsModeratedByAppInstanceUserCall(xAmzChimeBearer, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, appInstanceUserArn, maxResults, nextToken, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * &lt;p&gt;A list of the channels moderated by an &lt;code&gt;AppInstanceUser&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param appInstanceUserArn The ARN of the user or bot in the moderated channel. (optional)
     * @param maxResults The maximum number of channels in the request. (optional)
     * @param nextToken The token returned from previous API requests until the number of channels moderated by the user is reached. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListChannelsModeratedByAppInstanceUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ListChannelsModeratedByAppInstanceUserResponse listChannelsModeratedByAppInstanceUser(String xAmzChimeBearer, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String appInstanceUserArn, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListChannelsModeratedByAppInstanceUserResponse> localVarResp = listChannelsModeratedByAppInstanceUserWithHttpInfo(xAmzChimeBearer, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, appInstanceUserArn, maxResults, nextToken, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;A list of the channels moderated by an &lt;code&gt;AppInstanceUser&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param appInstanceUserArn The ARN of the user or bot in the moderated channel. (optional)
     * @param maxResults The maximum number of channels in the request. (optional)
     * @param nextToken The token returned from previous API requests until the number of channels moderated by the user is reached. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListChannelsModeratedByAppInstanceUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListChannelsModeratedByAppInstanceUserResponse> listChannelsModeratedByAppInstanceUserWithHttpInfo(String xAmzChimeBearer, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String appInstanceUserArn, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listChannelsModeratedByAppInstanceUserValidateBeforeCall(xAmzChimeBearer, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, appInstanceUserArn, maxResults, nextToken, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListChannelsModeratedByAppInstanceUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;A list of the channels moderated by an &lt;code&gt;AppInstanceUser&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param appInstanceUserArn The ARN of the user or bot in the moderated channel. (optional)
     * @param maxResults The maximum number of channels in the request. (optional)
     * @param nextToken The token returned from previous API requests until the number of channels moderated by the user is reached. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChannelsModeratedByAppInstanceUserAsync(String xAmzChimeBearer, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String appInstanceUserArn, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback<ListChannelsModeratedByAppInstanceUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listChannelsModeratedByAppInstanceUserValidateBeforeCall(xAmzChimeBearer, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, appInstanceUserArn, maxResults, nextToken, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListChannelsModeratedByAppInstanceUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSubChannels
     * @param channelArn The ARN of elastic channel. (required)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user making the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of sub-channels that you want to return. (optional)
     * @param nextToken The token passed by previous API calls until all requested sub-channels are returned. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSubChannelsCall(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/subchannels#x-amz-chime-bearer"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSubChannelsValidateBeforeCall(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling listSubChannels(Async)");
        }

        // verify the required parameter 'xAmzChimeBearer' is set
        if (xAmzChimeBearer == null) {
            throw new ApiException("Missing the required parameter 'xAmzChimeBearer' when calling listSubChannels(Async)");
        }

        return listSubChannelsCall(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * Lists all the SubChannels in an elastic channel when given a channel ID. Available only to the app instance admins and channel moderators of elastic channels.
     * @param channelArn The ARN of elastic channel. (required)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user making the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of sub-channels that you want to return. (optional)
     * @param nextToken The token passed by previous API calls until all requested sub-channels are returned. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListSubChannelsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ListSubChannelsResponse listSubChannels(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListSubChannelsResponse> localVarResp = listSubChannelsWithHttpInfo(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all the SubChannels in an elastic channel when given a channel ID. Available only to the app instance admins and channel moderators of elastic channels.
     * @param channelArn The ARN of elastic channel. (required)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user making the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of sub-channels that you want to return. (optional)
     * @param nextToken The token passed by previous API calls until all requested sub-channels are returned. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListSubChannelsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSubChannelsResponse> listSubChannelsWithHttpInfo(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listSubChannelsValidateBeforeCall(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListSubChannelsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all the SubChannels in an elastic channel when given a channel ID. Available only to the app instance admins and channel moderators of elastic channels.
     * @param channelArn The ARN of elastic channel. (required)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user making the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of sub-channels that you want to return. (optional)
     * @param nextToken The token passed by previous API calls until all requested sub-channels are returned. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSubChannelsAsync(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback<ListSubChannelsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSubChannelsValidateBeforeCall(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListSubChannelsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTagsForResource
     * @param arn The ARN of the resource. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResourceCall(String arn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tags#arn";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (arn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("arn", arn));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTagsForResourceValidateBeforeCall(String arn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'arn' is set
        if (arn == null) {
            throw new ApiException("Missing the required parameter 'arn' when calling listTagsForResource(Async)");
        }

        return listTagsForResourceCall(arn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Lists the tags applied to an Amazon Chime SDK messaging resource.
     * @param arn The ARN of the resource. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListTagsForResourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ListTagsForResourceResponse listTagsForResource(String arn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListTagsForResourceResponse> localVarResp = listTagsForResourceWithHttpInfo(arn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the tags applied to an Amazon Chime SDK messaging resource.
     * @param arn The ARN of the resource. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListTagsForResourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTagsForResourceResponse> listTagsForResourceWithHttpInfo(String arn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listTagsForResourceValidateBeforeCall(arn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListTagsForResourceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the tags applied to an Amazon Chime SDK messaging resource.
     * @param arn The ARN of the resource. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResourceAsync(String arn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListTagsForResourceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTagsForResourceValidateBeforeCall(arn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListTagsForResourceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putChannelExpirationSettings
     * @param channelArn The ARN of the channel. (required)
     * @param putChannelExpirationSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putChannelExpirationSettingsCall(String channelArn, PutChannelExpirationSettingsRequest putChannelExpirationSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putChannelExpirationSettingsRequest;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/expiration-settings"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putChannelExpirationSettingsValidateBeforeCall(String channelArn, PutChannelExpirationSettingsRequest putChannelExpirationSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling putChannelExpirationSettings(Async)");
        }

        // verify the required parameter 'putChannelExpirationSettingsRequest' is set
        if (putChannelExpirationSettingsRequest == null) {
            throw new ApiException("Missing the required parameter 'putChannelExpirationSettingsRequest' when calling putChannelExpirationSettings(Async)");
        }

        return putChannelExpirationSettingsCall(channelArn, putChannelExpirationSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);

    }

    /**
     * 
     * &lt;p&gt;Sets the number of days before the channel is automatically deleted.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A background process deletes expired channels within 6 hours of expiration. Actual deletion times may vary.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Expired channels that have not yet been deleted appear as active, and you can update their expiration settings. The system honors the new settings.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param putChannelExpirationSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (optional)
     * @return PutChannelExpirationSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public PutChannelExpirationSettingsResponse putChannelExpirationSettings(String channelArn, PutChannelExpirationSettingsRequest putChannelExpirationSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        ApiResponse<PutChannelExpirationSettingsResponse> localVarResp = putChannelExpirationSettingsWithHttpInfo(channelArn, putChannelExpirationSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Sets the number of days before the channel is automatically deleted.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A background process deletes expired channels within 6 hours of expiration. Actual deletion times may vary.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Expired channels that have not yet been deleted appear as active, and you can update their expiration settings. The system honors the new settings.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param putChannelExpirationSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (optional)
     * @return ApiResponse&lt;PutChannelExpirationSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PutChannelExpirationSettingsResponse> putChannelExpirationSettingsWithHttpInfo(String channelArn, PutChannelExpirationSettingsRequest putChannelExpirationSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        okhttp3.Call localVarCall = putChannelExpirationSettingsValidateBeforeCall(channelArn, putChannelExpirationSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, null);
        Type localVarReturnType = new TypeToken<PutChannelExpirationSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Sets the number of days before the channel is automatically deleted.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A background process deletes expired channels within 6 hours of expiration. Actual deletion times may vary.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Expired channels that have not yet been deleted appear as active, and you can update their expiration settings. The system honors the new settings.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param putChannelExpirationSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putChannelExpirationSettingsAsync(String channelArn, PutChannelExpirationSettingsRequest putChannelExpirationSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback<PutChannelExpirationSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putChannelExpirationSettingsValidateBeforeCall(channelArn, putChannelExpirationSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);
        Type localVarReturnType = new TypeToken<PutChannelExpirationSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putChannelMembershipPreferences
     * @param channelArn The ARN of the channel. (required)
     * @param memberArn The ARN of the member setting the preferences. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param putChannelMembershipPreferencesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putChannelMembershipPreferencesCall(String channelArn, String memberArn, String xAmzChimeBearer, PutChannelMembershipPreferencesRequest putChannelMembershipPreferencesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putChannelMembershipPreferencesRequest;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/memberships/{memberArn}/preferences#x-amz-chime-bearer"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()))
            .replace("{" + "memberArn" + "}", localVarApiClient.escapeString(memberArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putChannelMembershipPreferencesValidateBeforeCall(String channelArn, String memberArn, String xAmzChimeBearer, PutChannelMembershipPreferencesRequest putChannelMembershipPreferencesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling putChannelMembershipPreferences(Async)");
        }

        // verify the required parameter 'memberArn' is set
        if (memberArn == null) {
            throw new ApiException("Missing the required parameter 'memberArn' when calling putChannelMembershipPreferences(Async)");
        }

        // verify the required parameter 'xAmzChimeBearer' is set
        if (xAmzChimeBearer == null) {
            throw new ApiException("Missing the required parameter 'xAmzChimeBearer' when calling putChannelMembershipPreferences(Async)");
        }

        // verify the required parameter 'putChannelMembershipPreferencesRequest' is set
        if (putChannelMembershipPreferencesRequest == null) {
            throw new ApiException("Missing the required parameter 'putChannelMembershipPreferencesRequest' when calling putChannelMembershipPreferences(Async)");
        }

        return putChannelMembershipPreferencesCall(channelArn, memberArn, xAmzChimeBearer, putChannelMembershipPreferencesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Sets the membership preferences of an &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; for the specified channel. The user or bot must be a member of the channel. Only the user or bot who owns the membership can set preferences. Users or bots in the &lt;code&gt;AppInstanceAdmin&lt;/code&gt; and channel moderator roles can&#39;t set preferences for other users. Banned users or bots can&#39;t set membership preferences for the channel from which they are banned.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The x-amz-chime-bearer request header is mandatory. Use the ARN of an &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param memberArn The ARN of the member setting the preferences. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param putChannelMembershipPreferencesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PutChannelMembershipPreferencesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public PutChannelMembershipPreferencesResponse putChannelMembershipPreferences(String channelArn, String memberArn, String xAmzChimeBearer, PutChannelMembershipPreferencesRequest putChannelMembershipPreferencesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PutChannelMembershipPreferencesResponse> localVarResp = putChannelMembershipPreferencesWithHttpInfo(channelArn, memberArn, xAmzChimeBearer, putChannelMembershipPreferencesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Sets the membership preferences of an &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; for the specified channel. The user or bot must be a member of the channel. Only the user or bot who owns the membership can set preferences. Users or bots in the &lt;code&gt;AppInstanceAdmin&lt;/code&gt; and channel moderator roles can&#39;t set preferences for other users. Banned users or bots can&#39;t set membership preferences for the channel from which they are banned.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The x-amz-chime-bearer request header is mandatory. Use the ARN of an &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param memberArn The ARN of the member setting the preferences. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param putChannelMembershipPreferencesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PutChannelMembershipPreferencesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PutChannelMembershipPreferencesResponse> putChannelMembershipPreferencesWithHttpInfo(String channelArn, String memberArn, String xAmzChimeBearer, PutChannelMembershipPreferencesRequest putChannelMembershipPreferencesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = putChannelMembershipPreferencesValidateBeforeCall(channelArn, memberArn, xAmzChimeBearer, putChannelMembershipPreferencesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PutChannelMembershipPreferencesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Sets the membership preferences of an &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; for the specified channel. The user or bot must be a member of the channel. Only the user or bot who owns the membership can set preferences. Users or bots in the &lt;code&gt;AppInstanceAdmin&lt;/code&gt; and channel moderator roles can&#39;t set preferences for other users. Banned users or bots can&#39;t set membership preferences for the channel from which they are banned.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The x-amz-chime-bearer request header is mandatory. Use the ARN of an &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param memberArn The ARN of the member setting the preferences. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param putChannelMembershipPreferencesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putChannelMembershipPreferencesAsync(String channelArn, String memberArn, String xAmzChimeBearer, PutChannelMembershipPreferencesRequest putChannelMembershipPreferencesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PutChannelMembershipPreferencesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putChannelMembershipPreferencesValidateBeforeCall(channelArn, memberArn, xAmzChimeBearer, putChannelMembershipPreferencesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PutChannelMembershipPreferencesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putMessagingStreamingConfigurations
     * @param appInstanceArn The ARN of the streaming configuration. (required)
     * @param putMessagingStreamingConfigurationsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putMessagingStreamingConfigurationsCall(String appInstanceArn, PutMessagingStreamingConfigurationsRequest putMessagingStreamingConfigurationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putMessagingStreamingConfigurationsRequest;

        // create path and map variables
        String localVarPath = "/app-instances/{appInstanceArn}/streaming-configurations"
            .replace("{" + "appInstanceArn" + "}", localVarApiClient.escapeString(appInstanceArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putMessagingStreamingConfigurationsValidateBeforeCall(String appInstanceArn, PutMessagingStreamingConfigurationsRequest putMessagingStreamingConfigurationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appInstanceArn' is set
        if (appInstanceArn == null) {
            throw new ApiException("Missing the required parameter 'appInstanceArn' when calling putMessagingStreamingConfigurations(Async)");
        }

        // verify the required parameter 'putMessagingStreamingConfigurationsRequest' is set
        if (putMessagingStreamingConfigurationsRequest == null) {
            throw new ApiException("Missing the required parameter 'putMessagingStreamingConfigurationsRequest' when calling putMessagingStreamingConfigurations(Async)");
        }

        return putMessagingStreamingConfigurationsCall(appInstanceArn, putMessagingStreamingConfigurationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Sets the data streaming configuration for an &lt;code&gt;AppInstance&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/streaming-export.html\&quot;&gt;Streaming messaging data&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.
     * @param appInstanceArn The ARN of the streaming configuration. (required)
     * @param putMessagingStreamingConfigurationsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PutMessagingStreamingConfigurationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public PutMessagingStreamingConfigurationsResponse putMessagingStreamingConfigurations(String appInstanceArn, PutMessagingStreamingConfigurationsRequest putMessagingStreamingConfigurationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PutMessagingStreamingConfigurationsResponse> localVarResp = putMessagingStreamingConfigurationsWithHttpInfo(appInstanceArn, putMessagingStreamingConfigurationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Sets the data streaming configuration for an &lt;code&gt;AppInstance&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/streaming-export.html\&quot;&gt;Streaming messaging data&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.
     * @param appInstanceArn The ARN of the streaming configuration. (required)
     * @param putMessagingStreamingConfigurationsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PutMessagingStreamingConfigurationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PutMessagingStreamingConfigurationsResponse> putMessagingStreamingConfigurationsWithHttpInfo(String appInstanceArn, PutMessagingStreamingConfigurationsRequest putMessagingStreamingConfigurationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = putMessagingStreamingConfigurationsValidateBeforeCall(appInstanceArn, putMessagingStreamingConfigurationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PutMessagingStreamingConfigurationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Sets the data streaming configuration for an &lt;code&gt;AppInstance&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/streaming-export.html\&quot;&gt;Streaming messaging data&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.
     * @param appInstanceArn The ARN of the streaming configuration. (required)
     * @param putMessagingStreamingConfigurationsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putMessagingStreamingConfigurationsAsync(String appInstanceArn, PutMessagingStreamingConfigurationsRequest putMessagingStreamingConfigurationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PutMessagingStreamingConfigurationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putMessagingStreamingConfigurationsValidateBeforeCall(appInstanceArn, putMessagingStreamingConfigurationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PutMessagingStreamingConfigurationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for redactChannelMessage
     * @param channelArn The ARN of the channel containing the messages that you want to redact. (required)
     * @param messageId The ID of the message being redacted. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param operation  (required)
     * @param redactChannelMessageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call redactChannelMessageCall(String channelArn, String messageId, String xAmzChimeBearer, String operation, RedactChannelMessageRequest redactChannelMessageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = redactChannelMessageRequest;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/messages/{messageId}#operation=redact&x-amz-chime-bearer"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()))
            .replace("{" + "messageId" + "}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call redactChannelMessageValidateBeforeCall(String channelArn, String messageId, String xAmzChimeBearer, String operation, RedactChannelMessageRequest redactChannelMessageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling redactChannelMessage(Async)");
        }

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling redactChannelMessage(Async)");
        }

        // verify the required parameter 'xAmzChimeBearer' is set
        if (xAmzChimeBearer == null) {
            throw new ApiException("Missing the required parameter 'xAmzChimeBearer' when calling redactChannelMessage(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling redactChannelMessage(Async)");
        }

        // verify the required parameter 'redactChannelMessageRequest' is set
        if (redactChannelMessageRequest == null) {
            throw new ApiException("Missing the required parameter 'redactChannelMessageRequest' when calling redactChannelMessage(Async)");
        }

        return redactChannelMessageCall(channelArn, messageId, xAmzChimeBearer, operation, redactChannelMessageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Redacts message content, but not metadata. The message exists in the back end, but the action returns null content, and the state shows as redacted.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel containing the messages that you want to redact. (required)
     * @param messageId The ID of the message being redacted. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param operation  (required)
     * @param redactChannelMessageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return RedactChannelMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public RedactChannelMessageResponse redactChannelMessage(String channelArn, String messageId, String xAmzChimeBearer, String operation, RedactChannelMessageRequest redactChannelMessageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<RedactChannelMessageResponse> localVarResp = redactChannelMessageWithHttpInfo(channelArn, messageId, xAmzChimeBearer, operation, redactChannelMessageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Redacts message content, but not metadata. The message exists in the back end, but the action returns null content, and the state shows as redacted.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel containing the messages that you want to redact. (required)
     * @param messageId The ID of the message being redacted. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param operation  (required)
     * @param redactChannelMessageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;RedactChannelMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RedactChannelMessageResponse> redactChannelMessageWithHttpInfo(String channelArn, String messageId, String xAmzChimeBearer, String operation, RedactChannelMessageRequest redactChannelMessageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = redactChannelMessageValidateBeforeCall(channelArn, messageId, xAmzChimeBearer, operation, redactChannelMessageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<RedactChannelMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Redacts message content, but not metadata. The message exists in the back end, but the action returns null content, and the state shows as redacted.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel containing the messages that you want to redact. (required)
     * @param messageId The ID of the message being redacted. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param operation  (required)
     * @param redactChannelMessageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call redactChannelMessageAsync(String channelArn, String messageId, String xAmzChimeBearer, String operation, RedactChannelMessageRequest redactChannelMessageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<RedactChannelMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = redactChannelMessageValidateBeforeCall(channelArn, messageId, xAmzChimeBearer, operation, redactChannelMessageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<RedactChannelMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchChannels
     * @param operation  (required)
     * @param searchChannelsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user making the API call. (optional)
     * @param maxResults The maximum number of channels that you want returned. (optional)
     * @param nextToken The token returned from previous API requests until the number of channels is reached. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchChannelsCall(String operation, SearchChannelsRequest searchChannelsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchChannelsRequest;

        // create path and map variables
        String localVarPath = "/channels#operation=search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchChannelsValidateBeforeCall(String operation, SearchChannelsRequest searchChannelsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling searchChannels(Async)");
        }

        // verify the required parameter 'searchChannelsRequest' is set
        if (searchChannelsRequest == null) {
            throw new ApiException("Missing the required parameter 'searchChannelsRequest' when calling searchChannels(Async)");
        }

        return searchChannelsCall(operation, searchChannelsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, maxResults, nextToken, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * &lt;p&gt;Allows the &lt;code&gt;ChimeBearer&lt;/code&gt; to search channels by channel members. Users or bots can search across the channels that they belong to. Users in the &lt;code&gt;AppInstanceAdmin&lt;/code&gt; role can search across all channels.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt;
     * @param operation  (required)
     * @param searchChannelsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user making the API call. (optional)
     * @param maxResults The maximum number of channels that you want returned. (optional)
     * @param nextToken The token returned from previous API requests until the number of channels is reached. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return SearchChannelsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public SearchChannelsResponse searchChannels(String operation, SearchChannelsRequest searchChannelsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<SearchChannelsResponse> localVarResp = searchChannelsWithHttpInfo(operation, searchChannelsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, maxResults, nextToken, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Allows the &lt;code&gt;ChimeBearer&lt;/code&gt; to search channels by channel members. Users or bots can search across the channels that they belong to. Users in the &lt;code&gt;AppInstanceAdmin&lt;/code&gt; role can search across all channels.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt;
     * @param operation  (required)
     * @param searchChannelsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user making the API call. (optional)
     * @param maxResults The maximum number of channels that you want returned. (optional)
     * @param nextToken The token returned from previous API requests until the number of channels is reached. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;SearchChannelsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchChannelsResponse> searchChannelsWithHttpInfo(String operation, SearchChannelsRequest searchChannelsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = searchChannelsValidateBeforeCall(operation, searchChannelsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, maxResults, nextToken, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<SearchChannelsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Allows the &lt;code&gt;ChimeBearer&lt;/code&gt; to search channels by channel members. Users or bots can search across the channels that they belong to. Users in the &lt;code&gt;AppInstanceAdmin&lt;/code&gt; role can search across all channels.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt;
     * @param operation  (required)
     * @param searchChannelsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user making the API call. (optional)
     * @param maxResults The maximum number of channels that you want returned. (optional)
     * @param nextToken The token returned from previous API requests until the number of channels is reached. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchChannelsAsync(String operation, SearchChannelsRequest searchChannelsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback<SearchChannelsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchChannelsValidateBeforeCall(operation, searchChannelsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, maxResults, nextToken, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<SearchChannelsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendChannelMessage
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param sendChannelMessageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendChannelMessageCall(String channelArn, String xAmzChimeBearer, SendChannelMessageRequest sendChannelMessageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendChannelMessageRequest;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/messages#x-amz-chime-bearer"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendChannelMessageValidateBeforeCall(String channelArn, String xAmzChimeBearer, SendChannelMessageRequest sendChannelMessageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling sendChannelMessage(Async)");
        }

        // verify the required parameter 'xAmzChimeBearer' is set
        if (xAmzChimeBearer == null) {
            throw new ApiException("Missing the required parameter 'xAmzChimeBearer' when calling sendChannelMessage(Async)");
        }

        // verify the required parameter 'sendChannelMessageRequest' is set
        if (sendChannelMessageRequest == null) {
            throw new ApiException("Missing the required parameter 'sendChannelMessageRequest' when calling sendChannelMessage(Async)");
        }

        return sendChannelMessageCall(channelArn, xAmzChimeBearer, sendChannelMessageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Sends a message to a particular channel that the member is a part of.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;p&gt;Also, &lt;code&gt;STANDARD&lt;/code&gt; messages can be up to 4KB in size and contain metadata. Metadata is arbitrary, and you can use it in a variety of ways, such as containing a link to an attachment.&lt;/p&gt; &lt;p&gt; &lt;code&gt;CONTROL&lt;/code&gt; messages are limited to 30 bytes and do not contain metadata.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param sendChannelMessageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return SendChannelMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public SendChannelMessageResponse sendChannelMessage(String channelArn, String xAmzChimeBearer, SendChannelMessageRequest sendChannelMessageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<SendChannelMessageResponse> localVarResp = sendChannelMessageWithHttpInfo(channelArn, xAmzChimeBearer, sendChannelMessageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Sends a message to a particular channel that the member is a part of.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;p&gt;Also, &lt;code&gt;STANDARD&lt;/code&gt; messages can be up to 4KB in size and contain metadata. Metadata is arbitrary, and you can use it in a variety of ways, such as containing a link to an attachment.&lt;/p&gt; &lt;p&gt; &lt;code&gt;CONTROL&lt;/code&gt; messages are limited to 30 bytes and do not contain metadata.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param sendChannelMessageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;SendChannelMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendChannelMessageResponse> sendChannelMessageWithHttpInfo(String channelArn, String xAmzChimeBearer, SendChannelMessageRequest sendChannelMessageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = sendChannelMessageValidateBeforeCall(channelArn, xAmzChimeBearer, sendChannelMessageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<SendChannelMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Sends a message to a particular channel that the member is a part of.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;p&gt;Also, &lt;code&gt;STANDARD&lt;/code&gt; messages can be up to 4KB in size and contain metadata. Metadata is arbitrary, and you can use it in a variety of ways, such as containing a link to an attachment.&lt;/p&gt; &lt;p&gt; &lt;code&gt;CONTROL&lt;/code&gt; messages are limited to 30 bytes and do not contain metadata.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param sendChannelMessageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendChannelMessageAsync(String channelArn, String xAmzChimeBearer, SendChannelMessageRequest sendChannelMessageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<SendChannelMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendChannelMessageValidateBeforeCall(channelArn, xAmzChimeBearer, sendChannelMessageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<SendChannelMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagResource
     * @param operation  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagResourceCall(String operation, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagResourceRequest;

        // create path and map variables
        String localVarPath = "/tags#operation=tag-resource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagResourceValidateBeforeCall(String operation, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling tagResource(Async)");
        }

        // verify the required parameter 'tagResourceRequest' is set
        if (tagResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'tagResourceRequest' when calling tagResource(Async)");
        }

        return tagResourceCall(operation, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Applies the specified tags to the specified Amazon Chime SDK messaging resource.
     * @param operation  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public void tagResource(String operation, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        tagResourceWithHttpInfo(operation, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Applies the specified tags to the specified Amazon Chime SDK messaging resource.
     * @param operation  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> tagResourceWithHttpInfo(String operation, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = tagResourceValidateBeforeCall(operation, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Applies the specified tags to the specified Amazon Chime SDK messaging resource.
     * @param operation  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagResourceAsync(String operation, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagResourceValidateBeforeCall(operation, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for untagResource
     * @param operation  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagResourceCall(String operation, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = untagResourceRequest;

        // create path and map variables
        String localVarPath = "/tags#operation=untag-resource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call untagResourceValidateBeforeCall(String operation, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling untagResource(Async)");
        }

        // verify the required parameter 'untagResourceRequest' is set
        if (untagResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'untagResourceRequest' when calling untagResource(Async)");
        }

        return untagResourceCall(operation, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Removes the specified tags from the specified Amazon Chime SDK messaging resource.
     * @param operation  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public void untagResource(String operation, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        untagResourceWithHttpInfo(operation, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Removes the specified tags from the specified Amazon Chime SDK messaging resource.
     * @param operation  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> untagResourceWithHttpInfo(String operation, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = untagResourceValidateBeforeCall(operation, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Removes the specified tags from the specified Amazon Chime SDK messaging resource.
     * @param operation  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagResourceAsync(String operation, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = untagResourceValidateBeforeCall(operation, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateChannel
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param updateChannelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateChannelCall(String channelArn, String xAmzChimeBearer, UpdateChannelRequest updateChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateChannelRequest;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}#x-amz-chime-bearer"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateChannelValidateBeforeCall(String channelArn, String xAmzChimeBearer, UpdateChannelRequest updateChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling updateChannel(Async)");
        }

        // verify the required parameter 'xAmzChimeBearer' is set
        if (xAmzChimeBearer == null) {
            throw new ApiException("Missing the required parameter 'xAmzChimeBearer' when calling updateChannel(Async)");
        }

        // verify the required parameter 'updateChannelRequest' is set
        if (updateChannelRequest == null) {
            throw new ApiException("Missing the required parameter 'updateChannelRequest' when calling updateChannel(Async)");
        }

        return updateChannelCall(channelArn, xAmzChimeBearer, updateChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Update a channel&#39;s attributes.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Restriction&lt;/b&gt;: You can&#39;t change a channel&#39;s privacy. &lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param updateChannelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateChannelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateChannelResponse updateChannel(String channelArn, String xAmzChimeBearer, UpdateChannelRequest updateChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateChannelResponse> localVarResp = updateChannelWithHttpInfo(channelArn, xAmzChimeBearer, updateChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Update a channel&#39;s attributes.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Restriction&lt;/b&gt;: You can&#39;t change a channel&#39;s privacy. &lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param updateChannelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateChannelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateChannelResponse> updateChannelWithHttpInfo(String channelArn, String xAmzChimeBearer, UpdateChannelRequest updateChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateChannelValidateBeforeCall(channelArn, xAmzChimeBearer, updateChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateChannelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Update a channel&#39;s attributes.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Restriction&lt;/b&gt;: You can&#39;t change a channel&#39;s privacy. &lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param updateChannelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateChannelAsync(String channelArn, String xAmzChimeBearer, UpdateChannelRequest updateChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateChannelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateChannelValidateBeforeCall(channelArn, xAmzChimeBearer, updateChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateChannelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateChannelFlow
     * @param channelFlowArn The ARN of the channel flow. (required)
     * @param updateChannelFlowRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateChannelFlowCall(String channelFlowArn, UpdateChannelFlowRequest updateChannelFlowRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateChannelFlowRequest;

        // create path and map variables
        String localVarPath = "/channel-flows/{channelFlowArn}"
            .replace("{" + "channelFlowArn" + "}", localVarApiClient.escapeString(channelFlowArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateChannelFlowValidateBeforeCall(String channelFlowArn, UpdateChannelFlowRequest updateChannelFlowRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelFlowArn' is set
        if (channelFlowArn == null) {
            throw new ApiException("Missing the required parameter 'channelFlowArn' when calling updateChannelFlow(Async)");
        }

        // verify the required parameter 'updateChannelFlowRequest' is set
        if (updateChannelFlowRequest == null) {
            throw new ApiException("Missing the required parameter 'updateChannelFlowRequest' when calling updateChannelFlow(Async)");
        }

        return updateChannelFlowCall(channelFlowArn, updateChannelFlowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates channel flow attributes. This is a developer API.
     * @param channelFlowArn The ARN of the channel flow. (required)
     * @param updateChannelFlowRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateChannelFlowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateChannelFlowResponse updateChannelFlow(String channelFlowArn, UpdateChannelFlowRequest updateChannelFlowRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateChannelFlowResponse> localVarResp = updateChannelFlowWithHttpInfo(channelFlowArn, updateChannelFlowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates channel flow attributes. This is a developer API.
     * @param channelFlowArn The ARN of the channel flow. (required)
     * @param updateChannelFlowRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateChannelFlowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateChannelFlowResponse> updateChannelFlowWithHttpInfo(String channelFlowArn, UpdateChannelFlowRequest updateChannelFlowRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateChannelFlowValidateBeforeCall(channelFlowArn, updateChannelFlowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateChannelFlowResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates channel flow attributes. This is a developer API.
     * @param channelFlowArn The ARN of the channel flow. (required)
     * @param updateChannelFlowRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateChannelFlowAsync(String channelFlowArn, UpdateChannelFlowRequest updateChannelFlowRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateChannelFlowResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateChannelFlowValidateBeforeCall(channelFlowArn, updateChannelFlowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateChannelFlowResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateChannelMessage
     * @param channelArn The ARN of the channel. (required)
     * @param messageId The ID string of the message being updated. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param updateChannelMessageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateChannelMessageCall(String channelArn, String messageId, String xAmzChimeBearer, UpdateChannelMessageRequest updateChannelMessageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateChannelMessageRequest;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/messages/{messageId}#x-amz-chime-bearer"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()))
            .replace("{" + "messageId" + "}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateChannelMessageValidateBeforeCall(String channelArn, String messageId, String xAmzChimeBearer, UpdateChannelMessageRequest updateChannelMessageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling updateChannelMessage(Async)");
        }

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling updateChannelMessage(Async)");
        }

        // verify the required parameter 'xAmzChimeBearer' is set
        if (xAmzChimeBearer == null) {
            throw new ApiException("Missing the required parameter 'xAmzChimeBearer' when calling updateChannelMessage(Async)");
        }

        // verify the required parameter 'updateChannelMessageRequest' is set
        if (updateChannelMessageRequest == null) {
            throw new ApiException("Missing the required parameter 'updateChannelMessageRequest' when calling updateChannelMessage(Async)");
        }

        return updateChannelMessageCall(channelArn, messageId, xAmzChimeBearer, updateChannelMessageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates the content of a message.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param messageId The ID string of the message being updated. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param updateChannelMessageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateChannelMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateChannelMessageResponse updateChannelMessage(String channelArn, String messageId, String xAmzChimeBearer, UpdateChannelMessageRequest updateChannelMessageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateChannelMessageResponse> localVarResp = updateChannelMessageWithHttpInfo(channelArn, messageId, xAmzChimeBearer, updateChannelMessageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates the content of a message.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param messageId The ID string of the message being updated. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param updateChannelMessageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateChannelMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateChannelMessageResponse> updateChannelMessageWithHttpInfo(String channelArn, String messageId, String xAmzChimeBearer, UpdateChannelMessageRequest updateChannelMessageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateChannelMessageValidateBeforeCall(channelArn, messageId, xAmzChimeBearer, updateChannelMessageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateChannelMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates the content of a message.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param messageId The ID string of the message being updated. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param updateChannelMessageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateChannelMessageAsync(String channelArn, String messageId, String xAmzChimeBearer, UpdateChannelMessageRequest updateChannelMessageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateChannelMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateChannelMessageValidateBeforeCall(channelArn, messageId, xAmzChimeBearer, updateChannelMessageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateChannelMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateChannelReadMarker
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateChannelReadMarkerCall(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/readMarker#x-amz-chime-bearer"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateChannelReadMarkerValidateBeforeCall(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling updateChannelReadMarker(Async)");
        }

        // verify the required parameter 'xAmzChimeBearer' is set
        if (xAmzChimeBearer == null) {
            throw new ApiException("Missing the required parameter 'xAmzChimeBearer' when calling updateChannelReadMarker(Async)");
        }

        return updateChannelReadMarkerCall(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;The details of the time when a user last read messages in a channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateChannelReadMarkerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateChannelReadMarkerResponse updateChannelReadMarker(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateChannelReadMarkerResponse> localVarResp = updateChannelReadMarkerWithHttpInfo(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;The details of the time when a user last read messages in a channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateChannelReadMarkerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateChannelReadMarkerResponse> updateChannelReadMarkerWithHttpInfo(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateChannelReadMarkerValidateBeforeCall(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateChannelReadMarkerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;The details of the time when a user last read messages in a channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzChimeBearer The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateChannelReadMarkerAsync(String channelArn, String xAmzChimeBearer, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateChannelReadMarkerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateChannelReadMarkerValidateBeforeCall(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateChannelReadMarkerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
