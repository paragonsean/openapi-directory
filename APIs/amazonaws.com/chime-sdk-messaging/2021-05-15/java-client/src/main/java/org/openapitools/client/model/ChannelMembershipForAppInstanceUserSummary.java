/*
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ChannelMembershipForAppInstanceUserSummaryAppInstanceUserMembershipSummary;
import org.openapitools.client.model.ChannelMembershipForAppInstanceUserSummaryChannelSummary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Summary of the channel membership details of an &lt;code&gt;AppInstanceUser&lt;/code&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:28.676748-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChannelMembershipForAppInstanceUserSummary {
  public static final String SERIALIZED_NAME_CHANNEL_SUMMARY = "ChannelSummary";
  @SerializedName(SERIALIZED_NAME_CHANNEL_SUMMARY)
  private ChannelMembershipForAppInstanceUserSummaryChannelSummary channelSummary;

  public static final String SERIALIZED_NAME_APP_INSTANCE_USER_MEMBERSHIP_SUMMARY = "AppInstanceUserMembershipSummary";
  @SerializedName(SERIALIZED_NAME_APP_INSTANCE_USER_MEMBERSHIP_SUMMARY)
  private ChannelMembershipForAppInstanceUserSummaryAppInstanceUserMembershipSummary appInstanceUserMembershipSummary;

  public ChannelMembershipForAppInstanceUserSummary() {
  }

  public ChannelMembershipForAppInstanceUserSummary channelSummary(ChannelMembershipForAppInstanceUserSummaryChannelSummary channelSummary) {
    this.channelSummary = channelSummary;
    return this;
  }

  /**
   * Get channelSummary
   * @return channelSummary
   */
  @javax.annotation.Nullable
  public ChannelMembershipForAppInstanceUserSummaryChannelSummary getChannelSummary() {
    return channelSummary;
  }

  public void setChannelSummary(ChannelMembershipForAppInstanceUserSummaryChannelSummary channelSummary) {
    this.channelSummary = channelSummary;
  }


  public ChannelMembershipForAppInstanceUserSummary appInstanceUserMembershipSummary(ChannelMembershipForAppInstanceUserSummaryAppInstanceUserMembershipSummary appInstanceUserMembershipSummary) {
    this.appInstanceUserMembershipSummary = appInstanceUserMembershipSummary;
    return this;
  }

  /**
   * Get appInstanceUserMembershipSummary
   * @return appInstanceUserMembershipSummary
   */
  @javax.annotation.Nullable
  public ChannelMembershipForAppInstanceUserSummaryAppInstanceUserMembershipSummary getAppInstanceUserMembershipSummary() {
    return appInstanceUserMembershipSummary;
  }

  public void setAppInstanceUserMembershipSummary(ChannelMembershipForAppInstanceUserSummaryAppInstanceUserMembershipSummary appInstanceUserMembershipSummary) {
    this.appInstanceUserMembershipSummary = appInstanceUserMembershipSummary;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChannelMembershipForAppInstanceUserSummary channelMembershipForAppInstanceUserSummary = (ChannelMembershipForAppInstanceUserSummary) o;
    return Objects.equals(this.channelSummary, channelMembershipForAppInstanceUserSummary.channelSummary) &&
        Objects.equals(this.appInstanceUserMembershipSummary, channelMembershipForAppInstanceUserSummary.appInstanceUserMembershipSummary);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channelSummary, appInstanceUserMembershipSummary);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChannelMembershipForAppInstanceUserSummary {\n");
    sb.append("    channelSummary: ").append(toIndentedString(channelSummary)).append("\n");
    sb.append("    appInstanceUserMembershipSummary: ").append(toIndentedString(appInstanceUserMembershipSummary)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ChannelSummary");
    openapiFields.add("AppInstanceUserMembershipSummary");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChannelMembershipForAppInstanceUserSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChannelMembershipForAppInstanceUserSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChannelMembershipForAppInstanceUserSummary is not found in the empty JSON string", ChannelMembershipForAppInstanceUserSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChannelMembershipForAppInstanceUserSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChannelMembershipForAppInstanceUserSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ChannelSummary`
      if (jsonObj.get("ChannelSummary") != null && !jsonObj.get("ChannelSummary").isJsonNull()) {
        ChannelMembershipForAppInstanceUserSummaryChannelSummary.validateJsonElement(jsonObj.get("ChannelSummary"));
      }
      // validate the optional field `AppInstanceUserMembershipSummary`
      if (jsonObj.get("AppInstanceUserMembershipSummary") != null && !jsonObj.get("AppInstanceUserMembershipSummary").isJsonNull()) {
        ChannelMembershipForAppInstanceUserSummaryAppInstanceUserMembershipSummary.validateJsonElement(jsonObj.get("AppInstanceUserMembershipSummary"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChannelMembershipForAppInstanceUserSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChannelMembershipForAppInstanceUserSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChannelMembershipForAppInstanceUserSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChannelMembershipForAppInstanceUserSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<ChannelMembershipForAppInstanceUserSummary>() {
           @Override
           public void write(JsonWriter out, ChannelMembershipForAppInstanceUserSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChannelMembershipForAppInstanceUserSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChannelMembershipForAppInstanceUserSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChannelMembershipForAppInstanceUserSummary
   * @throws IOException if the JSON string is invalid with respect to ChannelMembershipForAppInstanceUserSummary
   */
  public static ChannelMembershipForAppInstanceUserSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChannelMembershipForAppInstanceUserSummary.class);
  }

  /**
   * Convert an instance of ChannelMembershipForAppInstanceUserSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

