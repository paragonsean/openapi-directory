/*
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.MessageAttributeValue;
import org.openapitools.client.model.SendChannelMessageRequestPushNotification;
import org.openapitools.client.model.Target;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SendChannelMessageRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:28.676748-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SendChannelMessageRequest {
  public static final String SERIALIZED_NAME_CONTENT = "Content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  /**
   * &lt;p&gt;The type of message, &lt;code&gt;STANDARD&lt;/code&gt; or &lt;code&gt;CONTROL&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;STANDARD&lt;/code&gt; messages can be up to 4KB in size and contain metadata. Metadata is arbitrary, and you can use it in a variety of ways, such as containing a link to an attachment.&lt;/p&gt; &lt;p&gt; &lt;code&gt;CONTROL&lt;/code&gt; messages are limited to 30 bytes and do not contain metadata.&lt;/p&gt;
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    STANDARD("STANDARD"),
    
    CONTROL("CONTROL");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  /**
   * Boolean that controls whether the message is persisted on the back end. Required.
   */
  @JsonAdapter(PersistenceEnum.Adapter.class)
  public enum PersistenceEnum {
    PERSISTENT("PERSISTENT"),
    
    NON_PERSISTENT("NON_PERSISTENT");

    private String value;

    PersistenceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PersistenceEnum fromValue(String value) {
      for (PersistenceEnum b : PersistenceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PersistenceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PersistenceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PersistenceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PersistenceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PersistenceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PERSISTENCE = "Persistence";
  @SerializedName(SERIALIZED_NAME_PERSISTENCE)
  private PersistenceEnum persistence;

  public static final String SERIALIZED_NAME_METADATA = "Metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private String metadata;

  public static final String SERIALIZED_NAME_CLIENT_REQUEST_TOKEN = "ClientRequestToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_TOKEN)
  private String clientRequestToken;

  public static final String SERIALIZED_NAME_PUSH_NOTIFICATION = "PushNotification";
  @SerializedName(SERIALIZED_NAME_PUSH_NOTIFICATION)
  private SendChannelMessageRequestPushNotification pushNotification;

  public static final String SERIALIZED_NAME_MESSAGE_ATTRIBUTES = "MessageAttributes";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ATTRIBUTES)
  private Map<String, MessageAttributeValue> messageAttributes = new HashMap<>();

  public static final String SERIALIZED_NAME_SUB_CHANNEL_ID = "SubChannelId";
  @SerializedName(SERIALIZED_NAME_SUB_CHANNEL_ID)
  private String subChannelId;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "ContentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_TARGET = "Target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private List<Target> target = new ArrayList<>();

  public SendChannelMessageRequest() {
  }

  public SendChannelMessageRequest content(String content) {
    this.content = content;
    return this;
  }

  /**
   * The content of the channel message.
   * @return content
   */
  @javax.annotation.Nonnull
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public SendChannelMessageRequest type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * &lt;p&gt;The type of message, &lt;code&gt;STANDARD&lt;/code&gt; or &lt;code&gt;CONTROL&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;STANDARD&lt;/code&gt; messages can be up to 4KB in size and contain metadata. Metadata is arbitrary, and you can use it in a variety of ways, such as containing a link to an attachment.&lt;/p&gt; &lt;p&gt; &lt;code&gt;CONTROL&lt;/code&gt; messages are limited to 30 bytes and do not contain metadata.&lt;/p&gt;
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public SendChannelMessageRequest persistence(PersistenceEnum persistence) {
    this.persistence = persistence;
    return this;
  }

  /**
   * Boolean that controls whether the message is persisted on the back end. Required.
   * @return persistence
   */
  @javax.annotation.Nonnull
  public PersistenceEnum getPersistence() {
    return persistence;
  }

  public void setPersistence(PersistenceEnum persistence) {
    this.persistence = persistence;
  }


  public SendChannelMessageRequest metadata(String metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * The optional metadata for each message.
   * @return metadata
   */
  @javax.annotation.Nullable
  public String getMetadata() {
    return metadata;
  }

  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }


  public SendChannelMessageRequest clientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
    return this;
  }

  /**
   * The &lt;code&gt;Idempotency&lt;/code&gt; token for each client request.
   * @return clientRequestToken
   */
  @javax.annotation.Nonnull
  public String getClientRequestToken() {
    return clientRequestToken;
  }

  public void setClientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
  }


  public SendChannelMessageRequest pushNotification(SendChannelMessageRequestPushNotification pushNotification) {
    this.pushNotification = pushNotification;
    return this;
  }

  /**
   * Get pushNotification
   * @return pushNotification
   */
  @javax.annotation.Nullable
  public SendChannelMessageRequestPushNotification getPushNotification() {
    return pushNotification;
  }

  public void setPushNotification(SendChannelMessageRequestPushNotification pushNotification) {
    this.pushNotification = pushNotification;
  }


  public SendChannelMessageRequest messageAttributes(Map<String, MessageAttributeValue> messageAttributes) {
    this.messageAttributes = messageAttributes;
    return this;
  }

  public SendChannelMessageRequest putMessageAttributesItem(String key, MessageAttributeValue messageAttributesItem) {
    if (this.messageAttributes == null) {
      this.messageAttributes = new HashMap<>();
    }
    this.messageAttributes.put(key, messageAttributesItem);
    return this;
  }

  /**
   * The attributes for the message, used for message filtering along with a &lt;code&gt;FilterRule&lt;/code&gt; defined in the &lt;code&gt;PushNotificationPreferences&lt;/code&gt;.
   * @return messageAttributes
   */
  @javax.annotation.Nullable
  public Map<String, MessageAttributeValue> getMessageAttributes() {
    return messageAttributes;
  }

  public void setMessageAttributes(Map<String, MessageAttributeValue> messageAttributes) {
    this.messageAttributes = messageAttributes;
  }


  public SendChannelMessageRequest subChannelId(String subChannelId) {
    this.subChannelId = subChannelId;
    return this;
  }

  /**
   * The ID of the SubChannel in the request.
   * @return subChannelId
   */
  @javax.annotation.Nullable
  public String getSubChannelId() {
    return subChannelId;
  }

  public void setSubChannelId(String subChannelId) {
    this.subChannelId = subChannelId;
  }


  public SendChannelMessageRequest contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * The content type of the channel message.
   * @return contentType
   */
  @javax.annotation.Nullable
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public SendChannelMessageRequest target(List<Target> target) {
    this.target = target;
    return this;
  }

  public SendChannelMessageRequest addTargetItem(Target targetItem) {
    if (this.target == null) {
      this.target = new ArrayList<>();
    }
    this.target.add(targetItem);
    return this;
  }

  /**
   * The target of a message. Must be a member of the channel, such as another user, a bot, or the sender. Only the target and the sender can view targeted messages. Only users who can see targeted messages can take actions on them. However, administrators can delete targeted messages that they can’t see. 
   * @return target
   */
  @javax.annotation.Nullable
  public List<Target> getTarget() {
    return target;
  }

  public void setTarget(List<Target> target) {
    this.target = target;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendChannelMessageRequest sendChannelMessageRequest = (SendChannelMessageRequest) o;
    return Objects.equals(this.content, sendChannelMessageRequest.content) &&
        Objects.equals(this.type, sendChannelMessageRequest.type) &&
        Objects.equals(this.persistence, sendChannelMessageRequest.persistence) &&
        Objects.equals(this.metadata, sendChannelMessageRequest.metadata) &&
        Objects.equals(this.clientRequestToken, sendChannelMessageRequest.clientRequestToken) &&
        Objects.equals(this.pushNotification, sendChannelMessageRequest.pushNotification) &&
        Objects.equals(this.messageAttributes, sendChannelMessageRequest.messageAttributes) &&
        Objects.equals(this.subChannelId, sendChannelMessageRequest.subChannelId) &&
        Objects.equals(this.contentType, sendChannelMessageRequest.contentType) &&
        Objects.equals(this.target, sendChannelMessageRequest.target);
  }

  @Override
  public int hashCode() {
    return Objects.hash(content, type, persistence, metadata, clientRequestToken, pushNotification, messageAttributes, subChannelId, contentType, target);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendChannelMessageRequest {\n");
    sb.append("    content: ").append("*").append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    persistence: ").append(toIndentedString(persistence)).append("\n");
    sb.append("    metadata: ").append("*").append("\n");
    sb.append("    clientRequestToken: ").append("*").append("\n");
    sb.append("    pushNotification: ").append(toIndentedString(pushNotification)).append("\n");
    sb.append("    messageAttributes: ").append(toIndentedString(messageAttributes)).append("\n");
    sb.append("    subChannelId: ").append(toIndentedString(subChannelId)).append("\n");
    sb.append("    contentType: ").append("*").append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Content");
    openapiFields.add("Type");
    openapiFields.add("Persistence");
    openapiFields.add("Metadata");
    openapiFields.add("ClientRequestToken");
    openapiFields.add("PushNotification");
    openapiFields.add("MessageAttributes");
    openapiFields.add("SubChannelId");
    openapiFields.add("ContentType");
    openapiFields.add("Target");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Content");
    openapiRequiredFields.add("Type");
    openapiRequiredFields.add("Persistence");
    openapiRequiredFields.add("ClientRequestToken");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SendChannelMessageRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SendChannelMessageRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SendChannelMessageRequest is not found in the empty JSON string", SendChannelMessageRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SendChannelMessageRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SendChannelMessageRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SendChannelMessageRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Content").toString()));
      }
      if (!jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      // validate the required field `Type`
      TypeEnum.validateJsonElement(jsonObj.get("Type"));
      if (!jsonObj.get("Persistence").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Persistence` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Persistence").toString()));
      }
      // validate the required field `Persistence`
      PersistenceEnum.validateJsonElement(jsonObj.get("Persistence"));
      if ((jsonObj.get("Metadata") != null && !jsonObj.get("Metadata").isJsonNull()) && !jsonObj.get("Metadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Metadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Metadata").toString()));
      }
      if (!jsonObj.get("ClientRequestToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientRequestToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientRequestToken").toString()));
      }
      // validate the optional field `PushNotification`
      if (jsonObj.get("PushNotification") != null && !jsonObj.get("PushNotification").isJsonNull()) {
        SendChannelMessageRequestPushNotification.validateJsonElement(jsonObj.get("PushNotification"));
      }
      if ((jsonObj.get("SubChannelId") != null && !jsonObj.get("SubChannelId").isJsonNull()) && !jsonObj.get("SubChannelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SubChannelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SubChannelId").toString()));
      }
      if ((jsonObj.get("ContentType") != null && !jsonObj.get("ContentType").isJsonNull()) && !jsonObj.get("ContentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContentType").toString()));
      }
      if (jsonObj.get("Target") != null && !jsonObj.get("Target").isJsonNull()) {
        JsonArray jsonArraytarget = jsonObj.getAsJsonArray("Target");
        if (jsonArraytarget != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Target").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Target` to be an array in the JSON string but got `%s`", jsonObj.get("Target").toString()));
          }

          // validate the optional field `Target` (array)
          for (int i = 0; i < jsonArraytarget.size(); i++) {
            Target.validateJsonElement(jsonArraytarget.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SendChannelMessageRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SendChannelMessageRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SendChannelMessageRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SendChannelMessageRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SendChannelMessageRequest>() {
           @Override
           public void write(JsonWriter out, SendChannelMessageRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SendChannelMessageRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SendChannelMessageRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SendChannelMessageRequest
   * @throws IOException if the JSON string is invalid with respect to SendChannelMessageRequest
   */
  public static SendChannelMessageRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SendChannelMessageRequest.class);
  }

  /**
   * Convert an instance of SendChannelMessageRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

