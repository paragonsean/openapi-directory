/*
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ChannelCreatedBy;
import org.openapitools.client.model.ChannelElasticChannelConfiguration;
import org.openapitools.client.model.ChannelExpirationSettings;
import org.openapitools.client.model.ChannelMode;
import org.openapitools.client.model.ChannelPrivacy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The details of a channel.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:28.676748-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Channel {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CHANNEL_ARN = "ChannelArn";
  @SerializedName(SERIALIZED_NAME_CHANNEL_ARN)
  private String channelArn;

  public static final String SERIALIZED_NAME_MODE = "Mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private ChannelMode mode;

  public static final String SERIALIZED_NAME_PRIVACY = "Privacy";
  @SerializedName(SERIALIZED_NAME_PRIVACY)
  private ChannelPrivacy privacy;

  public static final String SERIALIZED_NAME_METADATA = "Metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private String metadata;

  public static final String SERIALIZED_NAME_CREATED_BY = "CreatedBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private ChannelCreatedBy createdBy;

  public static final String SERIALIZED_NAME_CREATED_TIMESTAMP = "CreatedTimestamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIMESTAMP)
  private OffsetDateTime createdTimestamp;

  public static final String SERIALIZED_NAME_LAST_MESSAGE_TIMESTAMP = "LastMessageTimestamp";
  @SerializedName(SERIALIZED_NAME_LAST_MESSAGE_TIMESTAMP)
  private OffsetDateTime lastMessageTimestamp;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIMESTAMP = "LastUpdatedTimestamp";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIMESTAMP)
  private OffsetDateTime lastUpdatedTimestamp;

  public static final String SERIALIZED_NAME_CHANNEL_FLOW_ARN = "ChannelFlowArn";
  @SerializedName(SERIALIZED_NAME_CHANNEL_FLOW_ARN)
  private String channelFlowArn;

  public static final String SERIALIZED_NAME_ELASTIC_CHANNEL_CONFIGURATION = "ElasticChannelConfiguration";
  @SerializedName(SERIALIZED_NAME_ELASTIC_CHANNEL_CONFIGURATION)
  private ChannelElasticChannelConfiguration elasticChannelConfiguration;

  public static final String SERIALIZED_NAME_EXPIRATION_SETTINGS = "ExpirationSettings";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_SETTINGS)
  private ChannelExpirationSettings expirationSettings;

  public Channel() {
  }

  public Channel name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Channel channelArn(String channelArn) {
    this.channelArn = channelArn;
    return this;
  }

  /**
   * Get channelArn
   * @return channelArn
   */
  @javax.annotation.Nullable
  public String getChannelArn() {
    return channelArn;
  }

  public void setChannelArn(String channelArn) {
    this.channelArn = channelArn;
  }


  public Channel mode(ChannelMode mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Get mode
   * @return mode
   */
  @javax.annotation.Nullable
  public ChannelMode getMode() {
    return mode;
  }

  public void setMode(ChannelMode mode) {
    this.mode = mode;
  }


  public Channel privacy(ChannelPrivacy privacy) {
    this.privacy = privacy;
    return this;
  }

  /**
   * Get privacy
   * @return privacy
   */
  @javax.annotation.Nullable
  public ChannelPrivacy getPrivacy() {
    return privacy;
  }

  public void setPrivacy(ChannelPrivacy privacy) {
    this.privacy = privacy;
  }


  public Channel metadata(String metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public String getMetadata() {
    return metadata;
  }

  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }


  public Channel createdBy(ChannelCreatedBy createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public ChannelCreatedBy getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(ChannelCreatedBy createdBy) {
    this.createdBy = createdBy;
  }


  public Channel createdTimestamp(OffsetDateTime createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
    return this;
  }

  /**
   * Get createdTimestamp
   * @return createdTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTimestamp() {
    return createdTimestamp;
  }

  public void setCreatedTimestamp(OffsetDateTime createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
  }


  public Channel lastMessageTimestamp(OffsetDateTime lastMessageTimestamp) {
    this.lastMessageTimestamp = lastMessageTimestamp;
    return this;
  }

  /**
   * Get lastMessageTimestamp
   * @return lastMessageTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastMessageTimestamp() {
    return lastMessageTimestamp;
  }

  public void setLastMessageTimestamp(OffsetDateTime lastMessageTimestamp) {
    this.lastMessageTimestamp = lastMessageTimestamp;
  }


  public Channel lastUpdatedTimestamp(OffsetDateTime lastUpdatedTimestamp) {
    this.lastUpdatedTimestamp = lastUpdatedTimestamp;
    return this;
  }

  /**
   * Get lastUpdatedTimestamp
   * @return lastUpdatedTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedTimestamp() {
    return lastUpdatedTimestamp;
  }

  public void setLastUpdatedTimestamp(OffsetDateTime lastUpdatedTimestamp) {
    this.lastUpdatedTimestamp = lastUpdatedTimestamp;
  }


  public Channel channelFlowArn(String channelFlowArn) {
    this.channelFlowArn = channelFlowArn;
    return this;
  }

  /**
   * Get channelFlowArn
   * @return channelFlowArn
   */
  @javax.annotation.Nullable
  public String getChannelFlowArn() {
    return channelFlowArn;
  }

  public void setChannelFlowArn(String channelFlowArn) {
    this.channelFlowArn = channelFlowArn;
  }


  public Channel elasticChannelConfiguration(ChannelElasticChannelConfiguration elasticChannelConfiguration) {
    this.elasticChannelConfiguration = elasticChannelConfiguration;
    return this;
  }

  /**
   * Get elasticChannelConfiguration
   * @return elasticChannelConfiguration
   */
  @javax.annotation.Nullable
  public ChannelElasticChannelConfiguration getElasticChannelConfiguration() {
    return elasticChannelConfiguration;
  }

  public void setElasticChannelConfiguration(ChannelElasticChannelConfiguration elasticChannelConfiguration) {
    this.elasticChannelConfiguration = elasticChannelConfiguration;
  }


  public Channel expirationSettings(ChannelExpirationSettings expirationSettings) {
    this.expirationSettings = expirationSettings;
    return this;
  }

  /**
   * Get expirationSettings
   * @return expirationSettings
   */
  @javax.annotation.Nullable
  public ChannelExpirationSettings getExpirationSettings() {
    return expirationSettings;
  }

  public void setExpirationSettings(ChannelExpirationSettings expirationSettings) {
    this.expirationSettings = expirationSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Channel channel = (Channel) o;
    return Objects.equals(this.name, channel.name) &&
        Objects.equals(this.channelArn, channel.channelArn) &&
        Objects.equals(this.mode, channel.mode) &&
        Objects.equals(this.privacy, channel.privacy) &&
        Objects.equals(this.metadata, channel.metadata) &&
        Objects.equals(this.createdBy, channel.createdBy) &&
        Objects.equals(this.createdTimestamp, channel.createdTimestamp) &&
        Objects.equals(this.lastMessageTimestamp, channel.lastMessageTimestamp) &&
        Objects.equals(this.lastUpdatedTimestamp, channel.lastUpdatedTimestamp) &&
        Objects.equals(this.channelFlowArn, channel.channelFlowArn) &&
        Objects.equals(this.elasticChannelConfiguration, channel.elasticChannelConfiguration) &&
        Objects.equals(this.expirationSettings, channel.expirationSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, channelArn, mode, privacy, metadata, createdBy, createdTimestamp, lastMessageTimestamp, lastUpdatedTimestamp, channelFlowArn, elasticChannelConfiguration, expirationSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Channel {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    channelArn: ").append(toIndentedString(channelArn)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    privacy: ").append(toIndentedString(privacy)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    createdTimestamp: ").append(toIndentedString(createdTimestamp)).append("\n");
    sb.append("    lastMessageTimestamp: ").append(toIndentedString(lastMessageTimestamp)).append("\n");
    sb.append("    lastUpdatedTimestamp: ").append(toIndentedString(lastUpdatedTimestamp)).append("\n");
    sb.append("    channelFlowArn: ").append(toIndentedString(channelFlowArn)).append("\n");
    sb.append("    elasticChannelConfiguration: ").append(toIndentedString(elasticChannelConfiguration)).append("\n");
    sb.append("    expirationSettings: ").append(toIndentedString(expirationSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("ChannelArn");
    openapiFields.add("Mode");
    openapiFields.add("Privacy");
    openapiFields.add("Metadata");
    openapiFields.add("CreatedBy");
    openapiFields.add("CreatedTimestamp");
    openapiFields.add("LastMessageTimestamp");
    openapiFields.add("LastUpdatedTimestamp");
    openapiFields.add("ChannelFlowArn");
    openapiFields.add("ElasticChannelConfiguration");
    openapiFields.add("ExpirationSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Channel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Channel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Channel is not found in the empty JSON string", Channel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Channel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Channel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `ChannelArn`
      if (jsonObj.get("ChannelArn") != null && !jsonObj.get("ChannelArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ChannelArn"));
      }
      // validate the optional field `Mode`
      if (jsonObj.get("Mode") != null && !jsonObj.get("Mode").isJsonNull()) {
        ChannelMode.validateJsonElement(jsonObj.get("Mode"));
      }
      // validate the optional field `Privacy`
      if (jsonObj.get("Privacy") != null && !jsonObj.get("Privacy").isJsonNull()) {
        ChannelPrivacy.validateJsonElement(jsonObj.get("Privacy"));
      }
      // validate the optional field `Metadata`
      if (jsonObj.get("Metadata") != null && !jsonObj.get("Metadata").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Metadata"));
      }
      // validate the optional field `CreatedBy`
      if (jsonObj.get("CreatedBy") != null && !jsonObj.get("CreatedBy").isJsonNull()) {
        ChannelCreatedBy.validateJsonElement(jsonObj.get("CreatedBy"));
      }
      // validate the optional field `CreatedTimestamp`
      if (jsonObj.get("CreatedTimestamp") != null && !jsonObj.get("CreatedTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedTimestamp"));
      }
      // validate the optional field `LastMessageTimestamp`
      if (jsonObj.get("LastMessageTimestamp") != null && !jsonObj.get("LastMessageTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastMessageTimestamp"));
      }
      // validate the optional field `LastUpdatedTimestamp`
      if (jsonObj.get("LastUpdatedTimestamp") != null && !jsonObj.get("LastUpdatedTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdatedTimestamp"));
      }
      // validate the optional field `ChannelFlowArn`
      if (jsonObj.get("ChannelFlowArn") != null && !jsonObj.get("ChannelFlowArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ChannelFlowArn"));
      }
      // validate the optional field `ElasticChannelConfiguration`
      if (jsonObj.get("ElasticChannelConfiguration") != null && !jsonObj.get("ElasticChannelConfiguration").isJsonNull()) {
        ChannelElasticChannelConfiguration.validateJsonElement(jsonObj.get("ElasticChannelConfiguration"));
      }
      // validate the optional field `ExpirationSettings`
      if (jsonObj.get("ExpirationSettings") != null && !jsonObj.get("ExpirationSettings").isJsonNull()) {
        ChannelExpirationSettings.validateJsonElement(jsonObj.get("ExpirationSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Channel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Channel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Channel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Channel.class));

       return (TypeAdapter<T>) new TypeAdapter<Channel>() {
           @Override
           public void write(JsonWriter out, Channel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Channel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Channel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Channel
   * @throws IOException if the JSON string is invalid with respect to Channel
   */
  public static Channel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Channel.class);
  }

  /**
   * Convert an instance of Channel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

