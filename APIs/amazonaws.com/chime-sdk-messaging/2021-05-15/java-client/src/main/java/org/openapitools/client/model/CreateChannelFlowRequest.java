/*
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Processor;
import org.openapitools.client.model.Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateChannelFlowRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:28.676748-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateChannelFlowRequest {
  public static final String SERIALIZED_NAME_APP_INSTANCE_ARN = "AppInstanceArn";
  @SerializedName(SERIALIZED_NAME_APP_INSTANCE_ARN)
  private String appInstanceArn;

  public static final String SERIALIZED_NAME_PROCESSORS = "Processors";
  @SerializedName(SERIALIZED_NAME_PROCESSORS)
  private List<Processor> processors = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLIENT_REQUEST_TOKEN = "ClientRequestToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_TOKEN)
  private String clientRequestToken;

  public CreateChannelFlowRequest() {
  }

  public CreateChannelFlowRequest appInstanceArn(String appInstanceArn) {
    this.appInstanceArn = appInstanceArn;
    return this;
  }

  /**
   * The ARN of the channel flow request.
   * @return appInstanceArn
   */
  @javax.annotation.Nonnull
  public String getAppInstanceArn() {
    return appInstanceArn;
  }

  public void setAppInstanceArn(String appInstanceArn) {
    this.appInstanceArn = appInstanceArn;
  }


  public CreateChannelFlowRequest processors(List<Processor> processors) {
    this.processors = processors;
    return this;
  }

  public CreateChannelFlowRequest addProcessorsItem(Processor processorsItem) {
    if (this.processors == null) {
      this.processors = new ArrayList<>();
    }
    this.processors.add(processorsItem);
    return this;
  }

  /**
   * Information about the processor Lambda functions.
   * @return processors
   */
  @javax.annotation.Nonnull
  public List<Processor> getProcessors() {
    return processors;
  }

  public void setProcessors(List<Processor> processors) {
    this.processors = processors;
  }


  public CreateChannelFlowRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the channel flow.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateChannelFlowRequest tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public CreateChannelFlowRequest addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * The tags for the creation request.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  public CreateChannelFlowRequest clientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
    return this;
  }

  /**
   * The client token for the request. An Idempotency token.
   * @return clientRequestToken
   */
  @javax.annotation.Nonnull
  public String getClientRequestToken() {
    return clientRequestToken;
  }

  public void setClientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateChannelFlowRequest createChannelFlowRequest = (CreateChannelFlowRequest) o;
    return Objects.equals(this.appInstanceArn, createChannelFlowRequest.appInstanceArn) &&
        Objects.equals(this.processors, createChannelFlowRequest.processors) &&
        Objects.equals(this.name, createChannelFlowRequest.name) &&
        Objects.equals(this.tags, createChannelFlowRequest.tags) &&
        Objects.equals(this.clientRequestToken, createChannelFlowRequest.clientRequestToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appInstanceArn, processors, name, tags, clientRequestToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateChannelFlowRequest {\n");
    sb.append("    appInstanceArn: ").append(toIndentedString(appInstanceArn)).append("\n");
    sb.append("    processors: ").append(toIndentedString(processors)).append("\n");
    sb.append("    name: ").append("*").append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    clientRequestToken: ").append("*").append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AppInstanceArn");
    openapiFields.add("Processors");
    openapiFields.add("Name");
    openapiFields.add("Tags");
    openapiFields.add("ClientRequestToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AppInstanceArn");
    openapiRequiredFields.add("Processors");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("ClientRequestToken");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateChannelFlowRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateChannelFlowRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateChannelFlowRequest is not found in the empty JSON string", CreateChannelFlowRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateChannelFlowRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateChannelFlowRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateChannelFlowRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("AppInstanceArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AppInstanceArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AppInstanceArn").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("Processors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Processors` to be an array in the JSON string but got `%s`", jsonObj.get("Processors").toString()));
      }

      JsonArray jsonArrayprocessors = jsonObj.getAsJsonArray("Processors");
      // validate the required field `Processors` (array)
      for (int i = 0; i < jsonArrayprocessors.size(); i++) {
        Processor.validateJsonElement(jsonArrayprocessors.get(i));
      };
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("Tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Tags` to be an array in the JSON string but got `%s`", jsonObj.get("Tags").toString()));
          }

          // validate the optional field `Tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      if (!jsonObj.get("ClientRequestToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientRequestToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientRequestToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateChannelFlowRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateChannelFlowRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateChannelFlowRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateChannelFlowRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateChannelFlowRequest>() {
           @Override
           public void write(JsonWriter out, CreateChannelFlowRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateChannelFlowRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateChannelFlowRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateChannelFlowRequest
   * @throws IOException if the JSON string is invalid with respect to CreateChannelFlowRequest
   */
  public static CreateChannelFlowRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateChannelFlowRequest.class);
  }

  /**
   * Convert an instance of CreateChannelFlowRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

