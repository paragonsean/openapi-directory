/*
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.BatchChannelMembershipsInvitedBy;
import org.openapitools.client.model.ChannelMembershipMember;
import org.openapitools.client.model.ChannelMembershipType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The details of a channel member.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:28.676748-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChannelMembership {
  public static final String SERIALIZED_NAME_INVITED_BY = "InvitedBy";
  @SerializedName(SERIALIZED_NAME_INVITED_BY)
  private BatchChannelMembershipsInvitedBy invitedBy;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ChannelMembershipType type;

  public static final String SERIALIZED_NAME_MEMBER = "Member";
  @SerializedName(SERIALIZED_NAME_MEMBER)
  private ChannelMembershipMember member;

  public static final String SERIALIZED_NAME_CHANNEL_ARN = "ChannelArn";
  @SerializedName(SERIALIZED_NAME_CHANNEL_ARN)
  private String channelArn;

  public static final String SERIALIZED_NAME_CREATED_TIMESTAMP = "CreatedTimestamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIMESTAMP)
  private OffsetDateTime createdTimestamp;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIMESTAMP = "LastUpdatedTimestamp";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIMESTAMP)
  private OffsetDateTime lastUpdatedTimestamp;

  public static final String SERIALIZED_NAME_SUB_CHANNEL_ID = "SubChannelId";
  @SerializedName(SERIALIZED_NAME_SUB_CHANNEL_ID)
  private String subChannelId;

  public ChannelMembership() {
  }

  public ChannelMembership invitedBy(BatchChannelMembershipsInvitedBy invitedBy) {
    this.invitedBy = invitedBy;
    return this;
  }

  /**
   * Get invitedBy
   * @return invitedBy
   */
  @javax.annotation.Nullable
  public BatchChannelMembershipsInvitedBy getInvitedBy() {
    return invitedBy;
  }

  public void setInvitedBy(BatchChannelMembershipsInvitedBy invitedBy) {
    this.invitedBy = invitedBy;
  }


  public ChannelMembership type(ChannelMembershipType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public ChannelMembershipType getType() {
    return type;
  }

  public void setType(ChannelMembershipType type) {
    this.type = type;
  }


  public ChannelMembership member(ChannelMembershipMember member) {
    this.member = member;
    return this;
  }

  /**
   * Get member
   * @return member
   */
  @javax.annotation.Nullable
  public ChannelMembershipMember getMember() {
    return member;
  }

  public void setMember(ChannelMembershipMember member) {
    this.member = member;
  }


  public ChannelMembership channelArn(String channelArn) {
    this.channelArn = channelArn;
    return this;
  }

  /**
   * Get channelArn
   * @return channelArn
   */
  @javax.annotation.Nullable
  public String getChannelArn() {
    return channelArn;
  }

  public void setChannelArn(String channelArn) {
    this.channelArn = channelArn;
  }


  public ChannelMembership createdTimestamp(OffsetDateTime createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
    return this;
  }

  /**
   * Get createdTimestamp
   * @return createdTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTimestamp() {
    return createdTimestamp;
  }

  public void setCreatedTimestamp(OffsetDateTime createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
  }


  public ChannelMembership lastUpdatedTimestamp(OffsetDateTime lastUpdatedTimestamp) {
    this.lastUpdatedTimestamp = lastUpdatedTimestamp;
    return this;
  }

  /**
   * Get lastUpdatedTimestamp
   * @return lastUpdatedTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedTimestamp() {
    return lastUpdatedTimestamp;
  }

  public void setLastUpdatedTimestamp(OffsetDateTime lastUpdatedTimestamp) {
    this.lastUpdatedTimestamp = lastUpdatedTimestamp;
  }


  public ChannelMembership subChannelId(String subChannelId) {
    this.subChannelId = subChannelId;
    return this;
  }

  /**
   * Get subChannelId
   * @return subChannelId
   */
  @javax.annotation.Nullable
  public String getSubChannelId() {
    return subChannelId;
  }

  public void setSubChannelId(String subChannelId) {
    this.subChannelId = subChannelId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChannelMembership channelMembership = (ChannelMembership) o;
    return Objects.equals(this.invitedBy, channelMembership.invitedBy) &&
        Objects.equals(this.type, channelMembership.type) &&
        Objects.equals(this.member, channelMembership.member) &&
        Objects.equals(this.channelArn, channelMembership.channelArn) &&
        Objects.equals(this.createdTimestamp, channelMembership.createdTimestamp) &&
        Objects.equals(this.lastUpdatedTimestamp, channelMembership.lastUpdatedTimestamp) &&
        Objects.equals(this.subChannelId, channelMembership.subChannelId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(invitedBy, type, member, channelArn, createdTimestamp, lastUpdatedTimestamp, subChannelId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChannelMembership {\n");
    sb.append("    invitedBy: ").append(toIndentedString(invitedBy)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    member: ").append(toIndentedString(member)).append("\n");
    sb.append("    channelArn: ").append(toIndentedString(channelArn)).append("\n");
    sb.append("    createdTimestamp: ").append(toIndentedString(createdTimestamp)).append("\n");
    sb.append("    lastUpdatedTimestamp: ").append(toIndentedString(lastUpdatedTimestamp)).append("\n");
    sb.append("    subChannelId: ").append(toIndentedString(subChannelId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("InvitedBy");
    openapiFields.add("Type");
    openapiFields.add("Member");
    openapiFields.add("ChannelArn");
    openapiFields.add("CreatedTimestamp");
    openapiFields.add("LastUpdatedTimestamp");
    openapiFields.add("SubChannelId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChannelMembership
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChannelMembership.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChannelMembership is not found in the empty JSON string", ChannelMembership.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChannelMembership.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChannelMembership` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `InvitedBy`
      if (jsonObj.get("InvitedBy") != null && !jsonObj.get("InvitedBy").isJsonNull()) {
        BatchChannelMembershipsInvitedBy.validateJsonElement(jsonObj.get("InvitedBy"));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        ChannelMembershipType.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `Member`
      if (jsonObj.get("Member") != null && !jsonObj.get("Member").isJsonNull()) {
        ChannelMembershipMember.validateJsonElement(jsonObj.get("Member"));
      }
      // validate the optional field `ChannelArn`
      if (jsonObj.get("ChannelArn") != null && !jsonObj.get("ChannelArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ChannelArn"));
      }
      // validate the optional field `CreatedTimestamp`
      if (jsonObj.get("CreatedTimestamp") != null && !jsonObj.get("CreatedTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedTimestamp"));
      }
      // validate the optional field `LastUpdatedTimestamp`
      if (jsonObj.get("LastUpdatedTimestamp") != null && !jsonObj.get("LastUpdatedTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdatedTimestamp"));
      }
      // validate the optional field `SubChannelId`
      if (jsonObj.get("SubChannelId") != null && !jsonObj.get("SubChannelId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SubChannelId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChannelMembership.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChannelMembership' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChannelMembership> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChannelMembership.class));

       return (TypeAdapter<T>) new TypeAdapter<ChannelMembership>() {
           @Override
           public void write(JsonWriter out, ChannelMembership value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChannelMembership read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChannelMembership given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChannelMembership
   * @throws IOException if the JSON string is invalid with respect to ChannelMembership
   */
  public static ChannelMembership fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChannelMembership.class);
  }

  /**
   * Convert an instance of ChannelMembership to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

