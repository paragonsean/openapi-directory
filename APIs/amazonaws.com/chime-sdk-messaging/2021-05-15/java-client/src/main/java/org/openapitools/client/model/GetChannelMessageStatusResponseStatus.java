/*
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ChannelMessageStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetChannelMessageStatusResponseStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:28.676748-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetChannelMessageStatusResponseStatus {
  public static final String SERIALIZED_NAME_VALUE = "Value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private ChannelMessageStatus value;

  public static final String SERIALIZED_NAME_DETAIL = "Detail";
  @SerializedName(SERIALIZED_NAME_DETAIL)
  private String detail;

  public GetChannelMessageStatusResponseStatus() {
  }

  public GetChannelMessageStatusResponseStatus value(ChannelMessageStatus value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public ChannelMessageStatus getValue() {
    return value;
  }

  public void setValue(ChannelMessageStatus value) {
    this.value = value;
  }


  public GetChannelMessageStatusResponseStatus detail(String detail) {
    this.detail = detail;
    return this;
  }

  /**
   * Get detail
   * @return detail
   */
  @javax.annotation.Nullable
  public String getDetail() {
    return detail;
  }

  public void setDetail(String detail) {
    this.detail = detail;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetChannelMessageStatusResponseStatus getChannelMessageStatusResponseStatus = (GetChannelMessageStatusResponseStatus) o;
    return Objects.equals(this.value, getChannelMessageStatusResponseStatus.value) &&
        Objects.equals(this.detail, getChannelMessageStatusResponseStatus.detail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(value, detail);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetChannelMessageStatusResponseStatus {\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Value");
    openapiFields.add("Detail");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetChannelMessageStatusResponseStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetChannelMessageStatusResponseStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetChannelMessageStatusResponseStatus is not found in the empty JSON string", GetChannelMessageStatusResponseStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetChannelMessageStatusResponseStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetChannelMessageStatusResponseStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Value`
      if (jsonObj.get("Value") != null && !jsonObj.get("Value").isJsonNull()) {
        ChannelMessageStatus.validateJsonElement(jsonObj.get("Value"));
      }
      // validate the optional field `Detail`
      if (jsonObj.get("Detail") != null && !jsonObj.get("Detail").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Detail"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetChannelMessageStatusResponseStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetChannelMessageStatusResponseStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetChannelMessageStatusResponseStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetChannelMessageStatusResponseStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<GetChannelMessageStatusResponseStatus>() {
           @Override
           public void write(JsonWriter out, GetChannelMessageStatusResponseStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetChannelMessageStatusResponseStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetChannelMessageStatusResponseStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetChannelMessageStatusResponseStatus
   * @throws IOException if the JSON string is invalid with respect to GetChannelMessageStatusResponseStatus
   */
  public static GetChannelMessageStatusResponseStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetChannelMessageStatusResponseStatus.class);
  }

  /**
   * Convert an instance of GetChannelMessageStatusResponseStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

