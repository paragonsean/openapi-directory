/*
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ChannelFlowCallbackRequestChannelMessage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChannelFlowCallbackRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:28.676748-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChannelFlowCallbackRequest {
  public static final String SERIALIZED_NAME_CALLBACK_ID = "CallbackId";
  @SerializedName(SERIALIZED_NAME_CALLBACK_ID)
  private String callbackId;

  public static final String SERIALIZED_NAME_DELETE_RESOURCE = "DeleteResource";
  @SerializedName(SERIALIZED_NAME_DELETE_RESOURCE)
  private Boolean deleteResource;

  public static final String SERIALIZED_NAME_CHANNEL_MESSAGE = "ChannelMessage";
  @SerializedName(SERIALIZED_NAME_CHANNEL_MESSAGE)
  private ChannelFlowCallbackRequestChannelMessage channelMessage;

  public ChannelFlowCallbackRequest() {
  }

  public ChannelFlowCallbackRequest callbackId(String callbackId) {
    this.callbackId = callbackId;
    return this;
  }

  /**
   * The identifier passed to the processor by the service when invoked. Use the identifier to call back the service.
   * @return callbackId
   */
  @javax.annotation.Nonnull
  public String getCallbackId() {
    return callbackId;
  }

  public void setCallbackId(String callbackId) {
    this.callbackId = callbackId;
  }


  public ChannelFlowCallbackRequest deleteResource(Boolean deleteResource) {
    this.deleteResource = deleteResource;
    return this;
  }

  /**
   * When a processor determines that a message needs to be &lt;code&gt;DENIED&lt;/code&gt;, pass this parameter with a value of true.
   * @return deleteResource
   */
  @javax.annotation.Nullable
  public Boolean getDeleteResource() {
    return deleteResource;
  }

  public void setDeleteResource(Boolean deleteResource) {
    this.deleteResource = deleteResource;
  }


  public ChannelFlowCallbackRequest channelMessage(ChannelFlowCallbackRequestChannelMessage channelMessage) {
    this.channelMessage = channelMessage;
    return this;
  }

  /**
   * Get channelMessage
   * @return channelMessage
   */
  @javax.annotation.Nonnull
  public ChannelFlowCallbackRequestChannelMessage getChannelMessage() {
    return channelMessage;
  }

  public void setChannelMessage(ChannelFlowCallbackRequestChannelMessage channelMessage) {
    this.channelMessage = channelMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChannelFlowCallbackRequest channelFlowCallbackRequest = (ChannelFlowCallbackRequest) o;
    return Objects.equals(this.callbackId, channelFlowCallbackRequest.callbackId) &&
        Objects.equals(this.deleteResource, channelFlowCallbackRequest.deleteResource) &&
        Objects.equals(this.channelMessage, channelFlowCallbackRequest.channelMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callbackId, deleteResource, channelMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChannelFlowCallbackRequest {\n");
    sb.append("    callbackId: ").append(toIndentedString(callbackId)).append("\n");
    sb.append("    deleteResource: ").append(toIndentedString(deleteResource)).append("\n");
    sb.append("    channelMessage: ").append(toIndentedString(channelMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CallbackId");
    openapiFields.add("DeleteResource");
    openapiFields.add("ChannelMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CallbackId");
    openapiRequiredFields.add("ChannelMessage");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChannelFlowCallbackRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChannelFlowCallbackRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChannelFlowCallbackRequest is not found in the empty JSON string", ChannelFlowCallbackRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChannelFlowCallbackRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChannelFlowCallbackRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ChannelFlowCallbackRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("CallbackId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CallbackId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CallbackId").toString()));
      }
      // validate the required field `ChannelMessage`
      ChannelFlowCallbackRequestChannelMessage.validateJsonElement(jsonObj.get("ChannelMessage"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChannelFlowCallbackRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChannelFlowCallbackRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChannelFlowCallbackRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChannelFlowCallbackRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ChannelFlowCallbackRequest>() {
           @Override
           public void write(JsonWriter out, ChannelFlowCallbackRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChannelFlowCallbackRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChannelFlowCallbackRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChannelFlowCallbackRequest
   * @throws IOException if the JSON string is invalid with respect to ChannelFlowCallbackRequest
   */
  public static ChannelFlowCallbackRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChannelFlowCallbackRequest.class);
  }

  /**
   * Convert an instance of ChannelFlowCallbackRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

