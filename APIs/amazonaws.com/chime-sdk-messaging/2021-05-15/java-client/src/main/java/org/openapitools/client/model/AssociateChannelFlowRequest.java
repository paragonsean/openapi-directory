/*
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AssociateChannelFlowRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:28.676748-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssociateChannelFlowRequest {
  public static final String SERIALIZED_NAME_CHANNEL_FLOW_ARN = "ChannelFlowArn";
  @SerializedName(SERIALIZED_NAME_CHANNEL_FLOW_ARN)
  private String channelFlowArn;

  public AssociateChannelFlowRequest() {
  }

  public AssociateChannelFlowRequest channelFlowArn(String channelFlowArn) {
    this.channelFlowArn = channelFlowArn;
    return this;
  }

  /**
   * The ARN of the channel flow.
   * @return channelFlowArn
   */
  @javax.annotation.Nonnull
  public String getChannelFlowArn() {
    return channelFlowArn;
  }

  public void setChannelFlowArn(String channelFlowArn) {
    this.channelFlowArn = channelFlowArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssociateChannelFlowRequest associateChannelFlowRequest = (AssociateChannelFlowRequest) o;
    return Objects.equals(this.channelFlowArn, associateChannelFlowRequest.channelFlowArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channelFlowArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssociateChannelFlowRequest {\n");
    sb.append("    channelFlowArn: ").append(toIndentedString(channelFlowArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ChannelFlowArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ChannelFlowArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssociateChannelFlowRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssociateChannelFlowRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssociateChannelFlowRequest is not found in the empty JSON string", AssociateChannelFlowRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssociateChannelFlowRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssociateChannelFlowRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AssociateChannelFlowRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ChannelFlowArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ChannelFlowArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ChannelFlowArn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssociateChannelFlowRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssociateChannelFlowRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssociateChannelFlowRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssociateChannelFlowRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AssociateChannelFlowRequest>() {
           @Override
           public void write(JsonWriter out, AssociateChannelFlowRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssociateChannelFlowRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssociateChannelFlowRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssociateChannelFlowRequest
   * @throws IOException if the JSON string is invalid with respect to AssociateChannelFlowRequest
   */
  public static AssociateChannelFlowRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssociateChannelFlowRequest.class);
  }

  /**
   * Convert an instance of AssociateChannelFlowRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

