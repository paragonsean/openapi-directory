/*
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetChannelMessageResponseChannelMessage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetChannelMessageResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:28.676748-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetChannelMessageResponse {
  public static final String SERIALIZED_NAME_CHANNEL_MESSAGE = "ChannelMessage";
  @SerializedName(SERIALIZED_NAME_CHANNEL_MESSAGE)
  private GetChannelMessageResponseChannelMessage channelMessage;

  public GetChannelMessageResponse() {
  }

  public GetChannelMessageResponse channelMessage(GetChannelMessageResponseChannelMessage channelMessage) {
    this.channelMessage = channelMessage;
    return this;
  }

  /**
   * Get channelMessage
   * @return channelMessage
   */
  @javax.annotation.Nullable
  public GetChannelMessageResponseChannelMessage getChannelMessage() {
    return channelMessage;
  }

  public void setChannelMessage(GetChannelMessageResponseChannelMessage channelMessage) {
    this.channelMessage = channelMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetChannelMessageResponse getChannelMessageResponse = (GetChannelMessageResponse) o;
    return Objects.equals(this.channelMessage, getChannelMessageResponse.channelMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channelMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetChannelMessageResponse {\n");
    sb.append("    channelMessage: ").append(toIndentedString(channelMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ChannelMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetChannelMessageResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetChannelMessageResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetChannelMessageResponse is not found in the empty JSON string", GetChannelMessageResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetChannelMessageResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetChannelMessageResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ChannelMessage`
      if (jsonObj.get("ChannelMessage") != null && !jsonObj.get("ChannelMessage").isJsonNull()) {
        GetChannelMessageResponseChannelMessage.validateJsonElement(jsonObj.get("ChannelMessage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetChannelMessageResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetChannelMessageResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetChannelMessageResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetChannelMessageResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetChannelMessageResponse>() {
           @Override
           public void write(JsonWriter out, GetChannelMessageResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetChannelMessageResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetChannelMessageResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetChannelMessageResponse
   * @throws IOException if the JSON string is invalid with respect to GetChannelMessageResponse
   */
  public static GetChannelMessageResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetChannelMessageResponse.class);
  }

  /**
   * Convert an instance of GetChannelMessageResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

