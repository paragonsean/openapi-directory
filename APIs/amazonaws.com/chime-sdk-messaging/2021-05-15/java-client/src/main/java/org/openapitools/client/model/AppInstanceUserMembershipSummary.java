/*
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ChannelMembershipType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Summary of the membership details of an &lt;code&gt;AppInstanceUser&lt;/code&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:28.676748-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppInstanceUserMembershipSummary {
  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ChannelMembershipType type;

  public static final String SERIALIZED_NAME_READ_MARKER_TIMESTAMP = "ReadMarkerTimestamp";
  @SerializedName(SERIALIZED_NAME_READ_MARKER_TIMESTAMP)
  private OffsetDateTime readMarkerTimestamp;

  public static final String SERIALIZED_NAME_SUB_CHANNEL_ID = "SubChannelId";
  @SerializedName(SERIALIZED_NAME_SUB_CHANNEL_ID)
  private String subChannelId;

  public AppInstanceUserMembershipSummary() {
  }

  public AppInstanceUserMembershipSummary type(ChannelMembershipType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public ChannelMembershipType getType() {
    return type;
  }

  public void setType(ChannelMembershipType type) {
    this.type = type;
  }


  public AppInstanceUserMembershipSummary readMarkerTimestamp(OffsetDateTime readMarkerTimestamp) {
    this.readMarkerTimestamp = readMarkerTimestamp;
    return this;
  }

  /**
   * Get readMarkerTimestamp
   * @return readMarkerTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getReadMarkerTimestamp() {
    return readMarkerTimestamp;
  }

  public void setReadMarkerTimestamp(OffsetDateTime readMarkerTimestamp) {
    this.readMarkerTimestamp = readMarkerTimestamp;
  }


  public AppInstanceUserMembershipSummary subChannelId(String subChannelId) {
    this.subChannelId = subChannelId;
    return this;
  }

  /**
   * Get subChannelId
   * @return subChannelId
   */
  @javax.annotation.Nullable
  public String getSubChannelId() {
    return subChannelId;
  }

  public void setSubChannelId(String subChannelId) {
    this.subChannelId = subChannelId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppInstanceUserMembershipSummary appInstanceUserMembershipSummary = (AppInstanceUserMembershipSummary) o;
    return Objects.equals(this.type, appInstanceUserMembershipSummary.type) &&
        Objects.equals(this.readMarkerTimestamp, appInstanceUserMembershipSummary.readMarkerTimestamp) &&
        Objects.equals(this.subChannelId, appInstanceUserMembershipSummary.subChannelId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, readMarkerTimestamp, subChannelId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppInstanceUserMembershipSummary {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    readMarkerTimestamp: ").append(toIndentedString(readMarkerTimestamp)).append("\n");
    sb.append("    subChannelId: ").append(toIndentedString(subChannelId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Type");
    openapiFields.add("ReadMarkerTimestamp");
    openapiFields.add("SubChannelId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppInstanceUserMembershipSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppInstanceUserMembershipSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppInstanceUserMembershipSummary is not found in the empty JSON string", AppInstanceUserMembershipSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppInstanceUserMembershipSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppInstanceUserMembershipSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        ChannelMembershipType.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `ReadMarkerTimestamp`
      if (jsonObj.get("ReadMarkerTimestamp") != null && !jsonObj.get("ReadMarkerTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ReadMarkerTimestamp"));
      }
      // validate the optional field `SubChannelId`
      if (jsonObj.get("SubChannelId") != null && !jsonObj.get("SubChannelId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SubChannelId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppInstanceUserMembershipSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppInstanceUserMembershipSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppInstanceUserMembershipSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppInstanceUserMembershipSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<AppInstanceUserMembershipSummary>() {
           @Override
           public void write(JsonWriter out, AppInstanceUserMembershipSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppInstanceUserMembershipSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppInstanceUserMembershipSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppInstanceUserMembershipSummary
   * @throws IOException if the JSON string is invalid with respect to AppInstanceUserMembershipSummary
   */
  public static AppInstanceUserMembershipSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppInstanceUserMembershipSummary.class);
  }

  /**
   * Convert an instance of AppInstanceUserMembershipSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

