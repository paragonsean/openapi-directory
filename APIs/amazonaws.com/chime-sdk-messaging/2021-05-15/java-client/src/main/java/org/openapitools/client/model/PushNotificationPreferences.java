/*
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AllowNotifications;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The channel membership preferences for push notification.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:28.676748-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PushNotificationPreferences {
  public static final String SERIALIZED_NAME_ALLOW_NOTIFICATIONS = "AllowNotifications";
  @SerializedName(SERIALIZED_NAME_ALLOW_NOTIFICATIONS)
  private AllowNotifications allowNotifications;

  public static final String SERIALIZED_NAME_FILTER_RULE = "FilterRule";
  @SerializedName(SERIALIZED_NAME_FILTER_RULE)
  private String filterRule;

  public PushNotificationPreferences() {
  }

  public PushNotificationPreferences allowNotifications(AllowNotifications allowNotifications) {
    this.allowNotifications = allowNotifications;
    return this;
  }

  /**
   * Get allowNotifications
   * @return allowNotifications
   */
  @javax.annotation.Nonnull
  public AllowNotifications getAllowNotifications() {
    return allowNotifications;
  }

  public void setAllowNotifications(AllowNotifications allowNotifications) {
    this.allowNotifications = allowNotifications;
  }


  public PushNotificationPreferences filterRule(String filterRule) {
    this.filterRule = filterRule;
    return this;
  }

  /**
   * Get filterRule
   * @return filterRule
   */
  @javax.annotation.Nullable
  public String getFilterRule() {
    return filterRule;
  }

  public void setFilterRule(String filterRule) {
    this.filterRule = filterRule;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PushNotificationPreferences pushNotificationPreferences = (PushNotificationPreferences) o;
    return Objects.equals(this.allowNotifications, pushNotificationPreferences.allowNotifications) &&
        Objects.equals(this.filterRule, pushNotificationPreferences.filterRule);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowNotifications, filterRule);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PushNotificationPreferences {\n");
    sb.append("    allowNotifications: ").append(toIndentedString(allowNotifications)).append("\n");
    sb.append("    filterRule: ").append(toIndentedString(filterRule)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AllowNotifications");
    openapiFields.add("FilterRule");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AllowNotifications");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PushNotificationPreferences
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PushNotificationPreferences.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PushNotificationPreferences is not found in the empty JSON string", PushNotificationPreferences.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PushNotificationPreferences.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PushNotificationPreferences` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PushNotificationPreferences.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `AllowNotifications`
      AllowNotifications.validateJsonElement(jsonObj.get("AllowNotifications"));
      // validate the optional field `FilterRule`
      if (jsonObj.get("FilterRule") != null && !jsonObj.get("FilterRule").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FilterRule"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PushNotificationPreferences.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PushNotificationPreferences' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PushNotificationPreferences> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PushNotificationPreferences.class));

       return (TypeAdapter<T>) new TypeAdapter<PushNotificationPreferences>() {
           @Override
           public void write(JsonWriter out, PushNotificationPreferences value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PushNotificationPreferences read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PushNotificationPreferences given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PushNotificationPreferences
   * @throws IOException if the JSON string is invalid with respect to PushNotificationPreferences
   */
  public static PushNotificationPreferences fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PushNotificationPreferences.class);
  }

  /**
   * Convert an instance of PushNotificationPreferences to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

