/*
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ChannelMessagePersistenceType;
import org.openapitools.client.model.ChannelMessageSender;
import org.openapitools.client.model.ChannelMessageType;
import org.openapitools.client.model.SendChannelMessageResponseStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The details of a message in a channel.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:28.676748-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChannelMessage {
  public static final String SERIALIZED_NAME_CHANNEL_ARN = "ChannelArn";
  @SerializedName(SERIALIZED_NAME_CHANNEL_ARN)
  private String channelArn;

  public static final String SERIALIZED_NAME_MESSAGE_ID = "MessageId";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ID)
  private String messageId;

  public static final String SERIALIZED_NAME_CONTENT = "Content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_METADATA = "Metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private String metadata;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ChannelMessageType type;

  public static final String SERIALIZED_NAME_CREATED_TIMESTAMP = "CreatedTimestamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIMESTAMP)
  private OffsetDateTime createdTimestamp;

  public static final String SERIALIZED_NAME_LAST_EDITED_TIMESTAMP = "LastEditedTimestamp";
  @SerializedName(SERIALIZED_NAME_LAST_EDITED_TIMESTAMP)
  private OffsetDateTime lastEditedTimestamp;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIMESTAMP = "LastUpdatedTimestamp";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIMESTAMP)
  private OffsetDateTime lastUpdatedTimestamp;

  public static final String SERIALIZED_NAME_SENDER = "Sender";
  @SerializedName(SERIALIZED_NAME_SENDER)
  private ChannelMessageSender sender;

  public static final String SERIALIZED_NAME_REDACTED = "Redacted";
  @SerializedName(SERIALIZED_NAME_REDACTED)
  private Boolean redacted;

  public static final String SERIALIZED_NAME_PERSISTENCE = "Persistence";
  @SerializedName(SERIALIZED_NAME_PERSISTENCE)
  private ChannelMessagePersistenceType persistence;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private SendChannelMessageResponseStatus status;

  public static final String SERIALIZED_NAME_MESSAGE_ATTRIBUTES = "MessageAttributes";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ATTRIBUTES)
  private Map messageAttributes;

  public static final String SERIALIZED_NAME_SUB_CHANNEL_ID = "SubChannelId";
  @SerializedName(SERIALIZED_NAME_SUB_CHANNEL_ID)
  private String subChannelId;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "ContentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_TARGET = "Target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private List target;

  public ChannelMessage() {
  }

  public ChannelMessage channelArn(String channelArn) {
    this.channelArn = channelArn;
    return this;
  }

  /**
   * Get channelArn
   * @return channelArn
   */
  @javax.annotation.Nullable
  public String getChannelArn() {
    return channelArn;
  }

  public void setChannelArn(String channelArn) {
    this.channelArn = channelArn;
  }


  public ChannelMessage messageId(String messageId) {
    this.messageId = messageId;
    return this;
  }

  /**
   * Get messageId
   * @return messageId
   */
  @javax.annotation.Nullable
  public String getMessageId() {
    return messageId;
  }

  public void setMessageId(String messageId) {
    this.messageId = messageId;
  }


  public ChannelMessage content(String content) {
    this.content = content;
    return this;
  }

  /**
   * Get content
   * @return content
   */
  @javax.annotation.Nullable
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public ChannelMessage metadata(String metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public String getMetadata() {
    return metadata;
  }

  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }


  public ChannelMessage type(ChannelMessageType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public ChannelMessageType getType() {
    return type;
  }

  public void setType(ChannelMessageType type) {
    this.type = type;
  }


  public ChannelMessage createdTimestamp(OffsetDateTime createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
    return this;
  }

  /**
   * Get createdTimestamp
   * @return createdTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTimestamp() {
    return createdTimestamp;
  }

  public void setCreatedTimestamp(OffsetDateTime createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
  }


  public ChannelMessage lastEditedTimestamp(OffsetDateTime lastEditedTimestamp) {
    this.lastEditedTimestamp = lastEditedTimestamp;
    return this;
  }

  /**
   * Get lastEditedTimestamp
   * @return lastEditedTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastEditedTimestamp() {
    return lastEditedTimestamp;
  }

  public void setLastEditedTimestamp(OffsetDateTime lastEditedTimestamp) {
    this.lastEditedTimestamp = lastEditedTimestamp;
  }


  public ChannelMessage lastUpdatedTimestamp(OffsetDateTime lastUpdatedTimestamp) {
    this.lastUpdatedTimestamp = lastUpdatedTimestamp;
    return this;
  }

  /**
   * Get lastUpdatedTimestamp
   * @return lastUpdatedTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedTimestamp() {
    return lastUpdatedTimestamp;
  }

  public void setLastUpdatedTimestamp(OffsetDateTime lastUpdatedTimestamp) {
    this.lastUpdatedTimestamp = lastUpdatedTimestamp;
  }


  public ChannelMessage sender(ChannelMessageSender sender) {
    this.sender = sender;
    return this;
  }

  /**
   * Get sender
   * @return sender
   */
  @javax.annotation.Nullable
  public ChannelMessageSender getSender() {
    return sender;
  }

  public void setSender(ChannelMessageSender sender) {
    this.sender = sender;
  }


  public ChannelMessage redacted(Boolean redacted) {
    this.redacted = redacted;
    return this;
  }

  /**
   * Get redacted
   * @return redacted
   */
  @javax.annotation.Nullable
  public Boolean getRedacted() {
    return redacted;
  }

  public void setRedacted(Boolean redacted) {
    this.redacted = redacted;
  }


  public ChannelMessage persistence(ChannelMessagePersistenceType persistence) {
    this.persistence = persistence;
    return this;
  }

  /**
   * Get persistence
   * @return persistence
   */
  @javax.annotation.Nullable
  public ChannelMessagePersistenceType getPersistence() {
    return persistence;
  }

  public void setPersistence(ChannelMessagePersistenceType persistence) {
    this.persistence = persistence;
  }


  public ChannelMessage status(SendChannelMessageResponseStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public SendChannelMessageResponseStatus getStatus() {
    return status;
  }

  public void setStatus(SendChannelMessageResponseStatus status) {
    this.status = status;
  }


  public ChannelMessage messageAttributes(Map messageAttributes) {
    this.messageAttributes = messageAttributes;
    return this;
  }

  /**
   * Get messageAttributes
   * @return messageAttributes
   */
  @javax.annotation.Nullable
  public Map getMessageAttributes() {
    return messageAttributes;
  }

  public void setMessageAttributes(Map messageAttributes) {
    this.messageAttributes = messageAttributes;
  }


  public ChannelMessage subChannelId(String subChannelId) {
    this.subChannelId = subChannelId;
    return this;
  }

  /**
   * Get subChannelId
   * @return subChannelId
   */
  @javax.annotation.Nullable
  public String getSubChannelId() {
    return subChannelId;
  }

  public void setSubChannelId(String subChannelId) {
    this.subChannelId = subChannelId;
  }


  public ChannelMessage contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * Get contentType
   * @return contentType
   */
  @javax.annotation.Nullable
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public ChannelMessage target(List target) {
    this.target = target;
    return this;
  }

  /**
   * Get target
   * @return target
   */
  @javax.annotation.Nullable
  public List getTarget() {
    return target;
  }

  public void setTarget(List target) {
    this.target = target;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChannelMessage channelMessage = (ChannelMessage) o;
    return Objects.equals(this.channelArn, channelMessage.channelArn) &&
        Objects.equals(this.messageId, channelMessage.messageId) &&
        Objects.equals(this.content, channelMessage.content) &&
        Objects.equals(this.metadata, channelMessage.metadata) &&
        Objects.equals(this.type, channelMessage.type) &&
        Objects.equals(this.createdTimestamp, channelMessage.createdTimestamp) &&
        Objects.equals(this.lastEditedTimestamp, channelMessage.lastEditedTimestamp) &&
        Objects.equals(this.lastUpdatedTimestamp, channelMessage.lastUpdatedTimestamp) &&
        Objects.equals(this.sender, channelMessage.sender) &&
        Objects.equals(this.redacted, channelMessage.redacted) &&
        Objects.equals(this.persistence, channelMessage.persistence) &&
        Objects.equals(this.status, channelMessage.status) &&
        Objects.equals(this.messageAttributes, channelMessage.messageAttributes) &&
        Objects.equals(this.subChannelId, channelMessage.subChannelId) &&
        Objects.equals(this.contentType, channelMessage.contentType) &&
        Objects.equals(this.target, channelMessage.target);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channelArn, messageId, content, metadata, type, createdTimestamp, lastEditedTimestamp, lastUpdatedTimestamp, sender, redacted, persistence, status, messageAttributes, subChannelId, contentType, target);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChannelMessage {\n");
    sb.append("    channelArn: ").append(toIndentedString(channelArn)).append("\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    createdTimestamp: ").append(toIndentedString(createdTimestamp)).append("\n");
    sb.append("    lastEditedTimestamp: ").append(toIndentedString(lastEditedTimestamp)).append("\n");
    sb.append("    lastUpdatedTimestamp: ").append(toIndentedString(lastUpdatedTimestamp)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    redacted: ").append(toIndentedString(redacted)).append("\n");
    sb.append("    persistence: ").append(toIndentedString(persistence)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    messageAttributes: ").append(toIndentedString(messageAttributes)).append("\n");
    sb.append("    subChannelId: ").append(toIndentedString(subChannelId)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ChannelArn");
    openapiFields.add("MessageId");
    openapiFields.add("Content");
    openapiFields.add("Metadata");
    openapiFields.add("Type");
    openapiFields.add("CreatedTimestamp");
    openapiFields.add("LastEditedTimestamp");
    openapiFields.add("LastUpdatedTimestamp");
    openapiFields.add("Sender");
    openapiFields.add("Redacted");
    openapiFields.add("Persistence");
    openapiFields.add("Status");
    openapiFields.add("MessageAttributes");
    openapiFields.add("SubChannelId");
    openapiFields.add("ContentType");
    openapiFields.add("Target");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChannelMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChannelMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChannelMessage is not found in the empty JSON string", ChannelMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChannelMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChannelMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ChannelArn`
      if (jsonObj.get("ChannelArn") != null && !jsonObj.get("ChannelArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ChannelArn"));
      }
      // validate the optional field `MessageId`
      if (jsonObj.get("MessageId") != null && !jsonObj.get("MessageId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MessageId"));
      }
      // validate the optional field `Content`
      if (jsonObj.get("Content") != null && !jsonObj.get("Content").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Content"));
      }
      // validate the optional field `Metadata`
      if (jsonObj.get("Metadata") != null && !jsonObj.get("Metadata").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Metadata"));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        ChannelMessageType.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `CreatedTimestamp`
      if (jsonObj.get("CreatedTimestamp") != null && !jsonObj.get("CreatedTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedTimestamp"));
      }
      // validate the optional field `LastEditedTimestamp`
      if (jsonObj.get("LastEditedTimestamp") != null && !jsonObj.get("LastEditedTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastEditedTimestamp"));
      }
      // validate the optional field `LastUpdatedTimestamp`
      if (jsonObj.get("LastUpdatedTimestamp") != null && !jsonObj.get("LastUpdatedTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdatedTimestamp"));
      }
      // validate the optional field `Sender`
      if (jsonObj.get("Sender") != null && !jsonObj.get("Sender").isJsonNull()) {
        ChannelMessageSender.validateJsonElement(jsonObj.get("Sender"));
      }
      // validate the optional field `Redacted`
      if (jsonObj.get("Redacted") != null && !jsonObj.get("Redacted").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Redacted"));
      }
      // validate the optional field `Persistence`
      if (jsonObj.get("Persistence") != null && !jsonObj.get("Persistence").isJsonNull()) {
        ChannelMessagePersistenceType.validateJsonElement(jsonObj.get("Persistence"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        SendChannelMessageResponseStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `MessageAttributes`
      if (jsonObj.get("MessageAttributes") != null && !jsonObj.get("MessageAttributes").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("MessageAttributes"));
      }
      // validate the optional field `SubChannelId`
      if (jsonObj.get("SubChannelId") != null && !jsonObj.get("SubChannelId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SubChannelId"));
      }
      // validate the optional field `ContentType`
      if (jsonObj.get("ContentType") != null && !jsonObj.get("ContentType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ContentType"));
      }
      // validate the optional field `Target`
      if (jsonObj.get("Target") != null && !jsonObj.get("Target").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Target"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChannelMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChannelMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChannelMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChannelMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<ChannelMessage>() {
           @Override
           public void write(JsonWriter out, ChannelMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChannelMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChannelMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChannelMessage
   * @throws IOException if the JSON string is invalid with respect to ChannelMessage
   */
  public static ChannelMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChannelMessage.class);
  }

  /**
   * Convert an instance of ChannelMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

