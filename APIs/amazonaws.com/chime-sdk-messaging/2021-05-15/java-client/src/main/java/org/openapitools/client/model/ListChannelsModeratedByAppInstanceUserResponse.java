/*
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListChannelsModeratedByAppInstanceUserResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:28.676748-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListChannelsModeratedByAppInstanceUserResponse {
  public static final String SERIALIZED_NAME_CHANNELS = "Channels";
  @SerializedName(SERIALIZED_NAME_CHANNELS)
  private List channels;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public ListChannelsModeratedByAppInstanceUserResponse() {
  }

  public ListChannelsModeratedByAppInstanceUserResponse channels(List channels) {
    this.channels = channels;
    return this;
  }

  /**
   * Get channels
   * @return channels
   */
  @javax.annotation.Nullable
  public List getChannels() {
    return channels;
  }

  public void setChannels(List channels) {
    this.channels = channels;
  }


  public ListChannelsModeratedByAppInstanceUserResponse nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Get nextToken
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListChannelsModeratedByAppInstanceUserResponse listChannelsModeratedByAppInstanceUserResponse = (ListChannelsModeratedByAppInstanceUserResponse) o;
    return Objects.equals(this.channels, listChannelsModeratedByAppInstanceUserResponse.channels) &&
        Objects.equals(this.nextToken, listChannelsModeratedByAppInstanceUserResponse.nextToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channels, nextToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListChannelsModeratedByAppInstanceUserResponse {\n");
    sb.append("    channels: ").append(toIndentedString(channels)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Channels");
    openapiFields.add("NextToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListChannelsModeratedByAppInstanceUserResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListChannelsModeratedByAppInstanceUserResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListChannelsModeratedByAppInstanceUserResponse is not found in the empty JSON string", ListChannelsModeratedByAppInstanceUserResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListChannelsModeratedByAppInstanceUserResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListChannelsModeratedByAppInstanceUserResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Channels`
      if (jsonObj.get("Channels") != null && !jsonObj.get("Channels").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Channels"));
      }
      // validate the optional field `NextToken`
      if (jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NextToken"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListChannelsModeratedByAppInstanceUserResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListChannelsModeratedByAppInstanceUserResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListChannelsModeratedByAppInstanceUserResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListChannelsModeratedByAppInstanceUserResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ListChannelsModeratedByAppInstanceUserResponse>() {
           @Override
           public void write(JsonWriter out, ListChannelsModeratedByAppInstanceUserResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListChannelsModeratedByAppInstanceUserResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListChannelsModeratedByAppInstanceUserResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListChannelsModeratedByAppInstanceUserResponse
   * @throws IOException if the JSON string is invalid with respect to ListChannelsModeratedByAppInstanceUserResponse
   */
  public static ListChannelsModeratedByAppInstanceUserResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListChannelsModeratedByAppInstanceUserResponse.class);
  }

  /**
   * Convert an instance of ListChannelsModeratedByAppInstanceUserResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

