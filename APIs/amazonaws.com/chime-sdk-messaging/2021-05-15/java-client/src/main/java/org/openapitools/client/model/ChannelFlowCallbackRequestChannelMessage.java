/*
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.ChannelFlowCallbackRequestChannelMessagePushNotification;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChannelFlowCallbackRequestChannelMessage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:28.676748-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChannelFlowCallbackRequestChannelMessage {
  public static final String SERIALIZED_NAME_MESSAGE_ID = "MessageId";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ID)
  private String messageId;

  public static final String SERIALIZED_NAME_CONTENT = "Content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_METADATA = "Metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private String metadata;

  public static final String SERIALIZED_NAME_PUSH_NOTIFICATION = "PushNotification";
  @SerializedName(SERIALIZED_NAME_PUSH_NOTIFICATION)
  private ChannelFlowCallbackRequestChannelMessagePushNotification pushNotification;

  public static final String SERIALIZED_NAME_MESSAGE_ATTRIBUTES = "MessageAttributes";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ATTRIBUTES)
  private Map messageAttributes;

  public static final String SERIALIZED_NAME_SUB_CHANNEL_ID = "SubChannelId";
  @SerializedName(SERIALIZED_NAME_SUB_CHANNEL_ID)
  private String subChannelId;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "ContentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public ChannelFlowCallbackRequestChannelMessage() {
  }

  public ChannelFlowCallbackRequestChannelMessage messageId(String messageId) {
    this.messageId = messageId;
    return this;
  }

  /**
   * Get messageId
   * @return messageId
   */
  @javax.annotation.Nonnull
  public String getMessageId() {
    return messageId;
  }

  public void setMessageId(String messageId) {
    this.messageId = messageId;
  }


  public ChannelFlowCallbackRequestChannelMessage content(String content) {
    this.content = content;
    return this;
  }

  /**
   * Get content
   * @return content
   */
  @javax.annotation.Nullable
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public ChannelFlowCallbackRequestChannelMessage metadata(String metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public String getMetadata() {
    return metadata;
  }

  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }


  public ChannelFlowCallbackRequestChannelMessage pushNotification(ChannelFlowCallbackRequestChannelMessagePushNotification pushNotification) {
    this.pushNotification = pushNotification;
    return this;
  }

  /**
   * Get pushNotification
   * @return pushNotification
   */
  @javax.annotation.Nullable
  public ChannelFlowCallbackRequestChannelMessagePushNotification getPushNotification() {
    return pushNotification;
  }

  public void setPushNotification(ChannelFlowCallbackRequestChannelMessagePushNotification pushNotification) {
    this.pushNotification = pushNotification;
  }


  public ChannelFlowCallbackRequestChannelMessage messageAttributes(Map messageAttributes) {
    this.messageAttributes = messageAttributes;
    return this;
  }

  /**
   * Get messageAttributes
   * @return messageAttributes
   */
  @javax.annotation.Nullable
  public Map getMessageAttributes() {
    return messageAttributes;
  }

  public void setMessageAttributes(Map messageAttributes) {
    this.messageAttributes = messageAttributes;
  }


  public ChannelFlowCallbackRequestChannelMessage subChannelId(String subChannelId) {
    this.subChannelId = subChannelId;
    return this;
  }

  /**
   * Get subChannelId
   * @return subChannelId
   */
  @javax.annotation.Nullable
  public String getSubChannelId() {
    return subChannelId;
  }

  public void setSubChannelId(String subChannelId) {
    this.subChannelId = subChannelId;
  }


  public ChannelFlowCallbackRequestChannelMessage contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * Get contentType
   * @return contentType
   */
  @javax.annotation.Nullable
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChannelFlowCallbackRequestChannelMessage channelFlowCallbackRequestChannelMessage = (ChannelFlowCallbackRequestChannelMessage) o;
    return Objects.equals(this.messageId, channelFlowCallbackRequestChannelMessage.messageId) &&
        Objects.equals(this.content, channelFlowCallbackRequestChannelMessage.content) &&
        Objects.equals(this.metadata, channelFlowCallbackRequestChannelMessage.metadata) &&
        Objects.equals(this.pushNotification, channelFlowCallbackRequestChannelMessage.pushNotification) &&
        Objects.equals(this.messageAttributes, channelFlowCallbackRequestChannelMessage.messageAttributes) &&
        Objects.equals(this.subChannelId, channelFlowCallbackRequestChannelMessage.subChannelId) &&
        Objects.equals(this.contentType, channelFlowCallbackRequestChannelMessage.contentType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(messageId, content, metadata, pushNotification, messageAttributes, subChannelId, contentType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChannelFlowCallbackRequestChannelMessage {\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    pushNotification: ").append(toIndentedString(pushNotification)).append("\n");
    sb.append("    messageAttributes: ").append(toIndentedString(messageAttributes)).append("\n");
    sb.append("    subChannelId: ").append(toIndentedString(subChannelId)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MessageId");
    openapiFields.add("Content");
    openapiFields.add("Metadata");
    openapiFields.add("PushNotification");
    openapiFields.add("MessageAttributes");
    openapiFields.add("SubChannelId");
    openapiFields.add("ContentType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("MessageId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChannelFlowCallbackRequestChannelMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChannelFlowCallbackRequestChannelMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChannelFlowCallbackRequestChannelMessage is not found in the empty JSON string", ChannelFlowCallbackRequestChannelMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChannelFlowCallbackRequestChannelMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChannelFlowCallbackRequestChannelMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ChannelFlowCallbackRequestChannelMessage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `MessageId`
      String.validateJsonElement(jsonObj.get("MessageId"));
      // validate the optional field `Content`
      if (jsonObj.get("Content") != null && !jsonObj.get("Content").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Content"));
      }
      // validate the optional field `Metadata`
      if (jsonObj.get("Metadata") != null && !jsonObj.get("Metadata").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Metadata"));
      }
      // validate the optional field `PushNotification`
      if (jsonObj.get("PushNotification") != null && !jsonObj.get("PushNotification").isJsonNull()) {
        ChannelFlowCallbackRequestChannelMessagePushNotification.validateJsonElement(jsonObj.get("PushNotification"));
      }
      // validate the optional field `MessageAttributes`
      if (jsonObj.get("MessageAttributes") != null && !jsonObj.get("MessageAttributes").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("MessageAttributes"));
      }
      // validate the optional field `SubChannelId`
      if (jsonObj.get("SubChannelId") != null && !jsonObj.get("SubChannelId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SubChannelId"));
      }
      // validate the optional field `ContentType`
      if (jsonObj.get("ContentType") != null && !jsonObj.get("ContentType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ContentType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChannelFlowCallbackRequestChannelMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChannelFlowCallbackRequestChannelMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChannelFlowCallbackRequestChannelMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChannelFlowCallbackRequestChannelMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<ChannelFlowCallbackRequestChannelMessage>() {
           @Override
           public void write(JsonWriter out, ChannelFlowCallbackRequestChannelMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChannelFlowCallbackRequestChannelMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChannelFlowCallbackRequestChannelMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChannelFlowCallbackRequestChannelMessage
   * @throws IOException if the JSON string is invalid with respect to ChannelFlowCallbackRequestChannelMessage
   */
  public static ChannelFlowCallbackRequestChannelMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChannelFlowCallbackRequestChannelMessage.class);
  }

  /**
   * Convert an instance of ChannelFlowCallbackRequestChannelMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

