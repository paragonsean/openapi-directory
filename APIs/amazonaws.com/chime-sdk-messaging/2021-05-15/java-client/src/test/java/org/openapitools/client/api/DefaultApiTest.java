/*
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AssociateChannelFlowRequest;
import org.openapitools.client.model.BatchCreateChannelMembershipRequest;
import org.openapitools.client.model.BatchCreateChannelMembershipResponse;
import org.openapitools.client.model.ChannelFlowCallbackRequest;
import org.openapitools.client.model.ChannelFlowCallbackResponse;
import org.openapitools.client.model.CreateChannelBanRequest;
import org.openapitools.client.model.CreateChannelBanResponse;
import org.openapitools.client.model.CreateChannelFlowRequest;
import org.openapitools.client.model.CreateChannelFlowResponse;
import org.openapitools.client.model.CreateChannelMembershipRequest;
import org.openapitools.client.model.CreateChannelMembershipResponse;
import org.openapitools.client.model.CreateChannelModeratorRequest;
import org.openapitools.client.model.CreateChannelModeratorResponse;
import org.openapitools.client.model.CreateChannelRequest;
import org.openapitools.client.model.CreateChannelResponse;
import org.openapitools.client.model.DescribeChannelBanResponse;
import org.openapitools.client.model.DescribeChannelFlowResponse;
import org.openapitools.client.model.DescribeChannelMembershipForAppInstanceUserResponse;
import org.openapitools.client.model.DescribeChannelMembershipResponse;
import org.openapitools.client.model.DescribeChannelModeratedByAppInstanceUserResponse;
import org.openapitools.client.model.DescribeChannelModeratorResponse;
import org.openapitools.client.model.DescribeChannelResponse;
import org.openapitools.client.model.GetChannelMembershipPreferencesResponse;
import org.openapitools.client.model.GetChannelMessageResponse;
import org.openapitools.client.model.GetChannelMessageStatusResponse;
import org.openapitools.client.model.GetMessagingSessionEndpointResponse;
import org.openapitools.client.model.GetMessagingStreamingConfigurationsResponse;
import org.openapitools.client.model.ListChannelBansResponse;
import org.openapitools.client.model.ListChannelFlowsResponse;
import org.openapitools.client.model.ListChannelMembershipsForAppInstanceUserResponse;
import org.openapitools.client.model.ListChannelMembershipsResponse;
import org.openapitools.client.model.ListChannelMessagesResponse;
import org.openapitools.client.model.ListChannelModeratorsResponse;
import org.openapitools.client.model.ListChannelsAssociatedWithChannelFlowResponse;
import org.openapitools.client.model.ListChannelsModeratedByAppInstanceUserResponse;
import org.openapitools.client.model.ListChannelsResponse;
import org.openapitools.client.model.ListSubChannelsResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PutChannelExpirationSettingsRequest;
import org.openapitools.client.model.PutChannelExpirationSettingsResponse;
import org.openapitools.client.model.PutChannelMembershipPreferencesRequest;
import org.openapitools.client.model.PutChannelMembershipPreferencesResponse;
import org.openapitools.client.model.PutMessagingStreamingConfigurationsRequest;
import org.openapitools.client.model.PutMessagingStreamingConfigurationsResponse;
import org.openapitools.client.model.RedactChannelMessageRequest;
import org.openapitools.client.model.RedactChannelMessageResponse;
import org.openapitools.client.model.SearchChannelsRequest;
import org.openapitools.client.model.SearchChannelsResponse;
import org.openapitools.client.model.SendChannelMessageRequest;
import org.openapitools.client.model.SendChannelMessageResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateChannelFlowRequest;
import org.openapitools.client.model.UpdateChannelFlowResponse;
import org.openapitools.client.model.UpdateChannelMessageRequest;
import org.openapitools.client.model.UpdateChannelMessageResponse;
import org.openapitools.client.model.UpdateChannelReadMarkerResponse;
import org.openapitools.client.model.UpdateChannelRequest;
import org.openapitools.client.model.UpdateChannelResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt;Associates a channel flow with a channel. Once associated, all messages to that channel go through channel flow processors. To stop processing, use the &lt;code&gt;DisassociateChannelFlow&lt;/code&gt; API.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only administrators or channel moderators can associate a channel flow. The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateChannelFlowTest() throws ApiException {
        String channelArn = null;
        String xAmzChimeBearer = null;
        AssociateChannelFlowRequest associateChannelFlowRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.associateChannelFlow(channelArn, xAmzChimeBearer, associateChannelFlowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds a specified number of users and bots to a channel. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchCreateChannelMembershipTest() throws ApiException {
        String channelArn = null;
        String xAmzChimeBearer = null;
        String operation = null;
        BatchCreateChannelMembershipRequest batchCreateChannelMembershipRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchCreateChannelMembershipResponse response = api.batchCreateChannelMembership(channelArn, xAmzChimeBearer, operation, batchCreateChannelMembershipRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Calls back Amazon Chime SDK messaging with a processing response message. This should be invoked from the processor Lambda. This is a developer API.&lt;/p&gt; &lt;p&gt;You can return one of the following processing responses:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Update message content or metadata&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deny a message&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Make no changes to the message&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void channelFlowCallbackTest() throws ApiException {
        String channelArn = null;
        String operation = null;
        ChannelFlowCallbackRequest channelFlowCallbackRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ChannelFlowCallbackResponse response = api.channelFlowCallback(channelArn, operation, channelFlowCallbackRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a channel to which you can add users and send messages.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Restriction&lt;/b&gt;: You can&#39;t change a channel&#39;s privacy.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createChannelTest() throws ApiException {
        String xAmzChimeBearer = null;
        CreateChannelRequest createChannelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateChannelResponse response = api.createChannel(xAmzChimeBearer, createChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Permanently bans a member from a channel. Moderators can&#39;t add banned members to a channel. To undo a ban, you first have to &lt;code&gt;DeleteChannelBan&lt;/code&gt;, and then &lt;code&gt;CreateChannelMembership&lt;/code&gt;. Bans are cleaned up when you delete users or channels.&lt;/p&gt; &lt;p&gt;If you ban a user who is already part of a channel, that user is automatically kicked from the channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createChannelBanTest() throws ApiException {
        String channelArn = null;
        String xAmzChimeBearer = null;
        CreateChannelBanRequest createChannelBanRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateChannelBanResponse response = api.createChannelBan(channelArn, xAmzChimeBearer, createChannelBanRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a channel flow, a container for processors. Processors are AWS Lambda functions that perform actions on chat messages, such as stripping out profanity. You can associate channel flows with channels, and the processors in the channel flow then take action on all messages sent to that channel. This is a developer API.&lt;/p&gt; &lt;p&gt;Channel flows process the following items:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;New and updated messages&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Persistent and non-persistent messages&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Standard message type&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;note&gt; &lt;p&gt;Channel flows don&#39;t process Control or System messages. For more information about the message types provided by Chime SDK messaging, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime/latest/dg/using-the-messaging-sdk.html#msg-types\&quot;&gt;Message types&lt;/a&gt; in the &lt;i&gt;Amazon Chime developer guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createChannelFlowTest() throws ApiException {
        CreateChannelFlowRequest createChannelFlowRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateChannelFlowResponse response = api.createChannelFlow(createChannelFlowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds a member to a channel. The &lt;code&gt;InvitedBy&lt;/code&gt; field in &lt;code&gt;ChannelMembership&lt;/code&gt; is derived from the request header. A channel member can:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;List messages&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Send messages&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Receive messages&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Edit their own messages&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Leave the channel&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Privacy settings impact this action as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Public Channels: You do not need to be a member to list messages, but you must be a member to send messages.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Private Channels: You must be a member to list or send messages.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createChannelMembershipTest() throws ApiException {
        String channelArn = null;
        String xAmzChimeBearer = null;
        CreateChannelMembershipRequest createChannelMembershipRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateChannelMembershipResponse response = api.createChannelMembership(channelArn, xAmzChimeBearer, createChannelMembershipRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new &lt;code&gt;ChannelModerator&lt;/code&gt;. A channel moderator can:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Add and remove other members of the channel.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Add and remove other moderators of the channel.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Add and remove user bans for the channel.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redact messages in the channel.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;List messages in the channel.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt;of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createChannelModeratorTest() throws ApiException {
        String channelArn = null;
        String xAmzChimeBearer = null;
        CreateChannelModeratorRequest createChannelModeratorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateChannelModeratorResponse response = api.createChannelModerator(channelArn, xAmzChimeBearer, createChannelModeratorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Immediately makes a channel and its memberships inaccessible and marks them for deletion. This is an irreversible process.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteChannelTest() throws ApiException {
        String channelArn = null;
        String xAmzChimeBearer = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteChannel(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Removes a member from a channel&#39;s ban list.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteChannelBanTest() throws ApiException {
        String channelArn = null;
        String memberArn = null;
        String xAmzChimeBearer = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteChannelBan(channelArn, memberArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a channel flow, an irreversible process. This is a developer API.&lt;/p&gt; &lt;note&gt; &lt;p&gt; This API works only when the channel flow is not associated with any channel. To get a list of all channels that a channel flow is associated with, use the &lt;code&gt;ListChannelsAssociatedWithChannelFlow&lt;/code&gt; API. Use the &lt;code&gt;DisassociateChannelFlow&lt;/code&gt; API to disassociate a channel flow from all channels. &lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteChannelFlowTest() throws ApiException {
        String channelFlowArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteChannelFlow(channelFlowArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Removes a member from a channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteChannelMembershipTest() throws ApiException {
        String channelArn = null;
        String memberArn = null;
        String xAmzChimeBearer = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String subChannelId = null;
        api.deleteChannelMembership(channelArn, memberArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subChannelId);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a channel message. Only admins can perform this action. Deletion makes messages inaccessible immediately. A background process deletes any revisions created by &lt;code&gt;UpdateChannelMessage&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteChannelMessageTest() throws ApiException {
        String channelArn = null;
        String messageId = null;
        String xAmzChimeBearer = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String subChannelId = null;
        api.deleteChannelMessage(channelArn, messageId, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subChannelId);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a channel moderator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteChannelModeratorTest() throws ApiException {
        String channelArn = null;
        String channelModeratorArn = null;
        String xAmzChimeBearer = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteChannelModerator(channelArn, channelModeratorArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the streaming configurations for an &lt;code&gt;AppInstance&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/streaming-export.html\&quot;&gt;Streaming messaging data&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMessagingStreamingConfigurationsTest() throws ApiException {
        String appInstanceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteMessagingStreamingConfigurations(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns the full details of a channel in an Amazon Chime &lt;code&gt;AppInstance&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeChannelTest() throws ApiException {
        String channelArn = null;
        String xAmzChimeBearer = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeChannelResponse response = api.describeChannel(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns the full details of a channel ban.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeChannelBanTest() throws ApiException {
        String channelArn = null;
        String memberArn = null;
        String xAmzChimeBearer = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeChannelBanResponse response = api.describeChannelBan(channelArn, memberArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the full details of a channel flow in an Amazon Chime &lt;code&gt;AppInstance&lt;/code&gt;. This is a developer API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeChannelFlowTest() throws ApiException {
        String channelFlowArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeChannelFlowResponse response = api.describeChannelFlow(channelFlowArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns the full details of a user&#39;s channel membership.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeChannelMembershipTest() throws ApiException {
        String channelArn = null;
        String memberArn = null;
        String xAmzChimeBearer = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String subChannelId = null;
        DescribeChannelMembershipResponse response = api.describeChannelMembership(channelArn, memberArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subChannelId);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Returns the details of a channel based on the membership of the specified &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeChannelMembershipForAppInstanceUserTest() throws ApiException {
        String channelArn = null;
        String appInstanceUserArn = null;
        String xAmzChimeBearer = null;
        String scope = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeChannelMembershipForAppInstanceUserResponse response = api.describeChannelMembershipForAppInstanceUser(channelArn, appInstanceUserArn, xAmzChimeBearer, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns the full details of a channel moderated by the specified &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeChannelModeratedByAppInstanceUserTest() throws ApiException {
        String channelArn = null;
        String appInstanceUserArn = null;
        String xAmzChimeBearer = null;
        String scope = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeChannelModeratedByAppInstanceUserResponse response = api.describeChannelModeratedByAppInstanceUser(channelArn, appInstanceUserArn, xAmzChimeBearer, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns the full details of a single ChannelModerator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeChannelModeratorTest() throws ApiException {
        String channelArn = null;
        String channelModeratorArn = null;
        String xAmzChimeBearer = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeChannelModeratorResponse response = api.describeChannelModerator(channelArn, channelModeratorArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Disassociates a channel flow from all its channels. Once disassociated, all messages to that channel stop going through the channel flow processor.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only administrators or channel moderators can disassociate a channel flow.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateChannelFlowTest() throws ApiException {
        String channelArn = null;
        String channelFlowArn = null;
        String xAmzChimeBearer = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.disassociateChannelFlow(channelArn, channelFlowArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets the membership preferences of an &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; for the specified channel. A user or a bot must be a member of the channel and own the membership in order to retrieve membership preferences. Users or bots in the &lt;code&gt;AppInstanceAdmin&lt;/code&gt; and channel moderator roles can&#39;t retrieve preferences for other users or bots. Banned users or bots can&#39;t retrieve membership preferences for the channel from which they are banned.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChannelMembershipPreferencesTest() throws ApiException {
        String channelArn = null;
        String memberArn = null;
        String xAmzChimeBearer = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetChannelMembershipPreferencesResponse response = api.getChannelMembershipPreferences(channelArn, memberArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets the full details of a channel message.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChannelMessageTest() throws ApiException {
        String channelArn = null;
        String messageId = null;
        String xAmzChimeBearer = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String subChannelId = null;
        GetChannelMessageResponse response = api.getChannelMessage(channelArn, messageId, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subChannelId);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets message status for a specified &lt;code&gt;messageId&lt;/code&gt;. Use this API to determine the intermediate status of messages going through channel flow processing. The API provides an alternative to retrieving message status if the event was not received because a client wasn&#39;t connected to a websocket. &lt;/p&gt; &lt;p&gt;Messages can have any one of these statuses.&lt;/p&gt; &lt;dl&gt; &lt;dt&gt;SENT&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Message processed successfully&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;PENDING&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Ongoing processing&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;FAILED&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Processing failed&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;DENIED&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Message denied by the processor&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;This API does not return statuses for denied messages, because we don&#39;t store them once the processor denies them. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Only the message sender can invoke this API.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChannelMessageStatusTest() throws ApiException {
        String channelArn = null;
        String messageId = null;
        String xAmzChimeBearer = null;
        String scope = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String subChannelId = null;
        GetChannelMessageStatusResponse response = api.getChannelMessageStatus(channelArn, messageId, xAmzChimeBearer, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subChannelId);
        // TODO: test validations
    }

    /**
     * The details of the endpoint for the messaging session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMessagingSessionEndpointTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetMessagingSessionEndpointResponse response = api.getMessagingSessionEndpoint(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the data streaming configuration for an &lt;code&gt;AppInstance&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/streaming-export.html\&quot;&gt;Streaming messaging data&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMessagingStreamingConfigurationsTest() throws ApiException {
        String appInstanceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetMessagingStreamingConfigurationsResponse response = api.getMessagingStreamingConfigurations(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists all the users and bots banned from a particular channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listChannelBansTest() throws ApiException {
        String channelArn = null;
        String xAmzChimeBearer = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListChannelBansResponse response = api.listChannelBans(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Returns a paginated lists of all the channel flows created under a single Chime. This is a developer API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listChannelFlowsTest() throws ApiException {
        String appInstanceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListChannelFlowsResponse response = api.listChannelFlows(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists all channel memberships in a channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;If you want to list the channels to which a specific app instance user belongs, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime/latest/APIReference/API_messaging-chime_ListChannelMembershipsForAppInstanceUser.html\&quot;&gt;ListChannelMembershipsForAppInstanceUser&lt;/a&gt; API.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listChannelMembershipsTest() throws ApiException {
        String channelArn = null;
        String xAmzChimeBearer = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String type = null;
        Integer maxResults = null;
        String nextToken = null;
        String subChannelId = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListChannelMembershipsResponse response = api.listChannelMemberships(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, maxResults, nextToken, subChannelId, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Lists all channels that an &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; is a part of. Only an &lt;code&gt;AppInstanceAdmin&lt;/code&gt; can call the API with a user ARN that is not their own. &lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listChannelMembershipsForAppInstanceUserTest() throws ApiException {
        String xAmzChimeBearer = null;
        String scope = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String appInstanceUserArn = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListChannelMembershipsForAppInstanceUserResponse response = api.listChannelMembershipsForAppInstanceUser(xAmzChimeBearer, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, appInstanceUserArn, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;List all the messages in a channel. Returns a paginated list of &lt;code&gt;ChannelMessages&lt;/code&gt;. By default, sorted by creation timestamp in descending order.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Redacted messages appear in the results as empty, since they are only redacted, not deleted. Deleted messages do not appear in the results. This action always returns the latest version of an edited message.&lt;/p&gt; &lt;p&gt;Also, the &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listChannelMessagesTest() throws ApiException {
        String channelArn = null;
        String xAmzChimeBearer = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String sortOrder = null;
        OffsetDateTime notBefore = null;
        OffsetDateTime notAfter = null;
        Integer maxResults = null;
        String nextToken = null;
        String subChannelId = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListChannelMessagesResponse response = api.listChannelMessages(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sortOrder, notBefore, notAfter, maxResults, nextToken, subChannelId, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists all the moderators for a channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listChannelModeratorsTest() throws ApiException {
        String channelArn = null;
        String xAmzChimeBearer = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListChannelModeratorsResponse response = api.listChannelModerators(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists all Channels created under a single Chime App as a paginated list. You can specify filters to narrow results.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Functionality &amp;amp; restrictions&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Use privacy &#x3D; &lt;code&gt;PUBLIC&lt;/code&gt; to retrieve all public channels in the account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Only an &lt;code&gt;AppInstanceAdmin&lt;/code&gt; can set privacy &#x3D; &lt;code&gt;PRIVATE&lt;/code&gt; to list the private channels in an account.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listChannelsTest() throws ApiException {
        String appInstanceArn = null;
        String xAmzChimeBearer = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String privacy = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListChannelsResponse response = api.listChannels(appInstanceArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, privacy, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Lists all channels associated with a specified channel flow. You can associate a channel flow with multiple channels, but you can only associate a channel with one channel flow. This is a developer API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listChannelsAssociatedWithChannelFlowTest() throws ApiException {
        String channelFlowArn = null;
        String scope = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListChannelsAssociatedWithChannelFlowResponse response = api.listChannelsAssociatedWithChannelFlow(channelFlowArn, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;A list of the channels moderated by an &lt;code&gt;AppInstanceUser&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listChannelsModeratedByAppInstanceUserTest() throws ApiException {
        String xAmzChimeBearer = null;
        String scope = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String appInstanceUserArn = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListChannelsModeratedByAppInstanceUserResponse response = api.listChannelsModeratedByAppInstanceUser(xAmzChimeBearer, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, appInstanceUserArn, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Lists all the SubChannels in an elastic channel when given a channel ID. Available only to the app instance admins and channel moderators of elastic channels.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSubChannelsTest() throws ApiException {
        String channelArn = null;
        String xAmzChimeBearer = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListSubChannelsResponse response = api.listSubChannels(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Lists the tags applied to an Amazon Chime SDK messaging resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String arn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(arn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Sets the number of days before the channel is automatically deleted.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A background process deletes expired channels within 6 hours of expiration. Actual deletion times may vary.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Expired channels that have not yet been deleted appear as active, and you can update their expiration settings. The system honors the new settings.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putChannelExpirationSettingsTest() throws ApiException {
        String channelArn = null;
        PutChannelExpirationSettingsRequest putChannelExpirationSettingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String xAmzChimeBearer = null;
        PutChannelExpirationSettingsResponse response = api.putChannelExpirationSettings(channelArn, putChannelExpirationSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Sets the membership preferences of an &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; for the specified channel. The user or bot must be a member of the channel. Only the user or bot who owns the membership can set preferences. Users or bots in the &lt;code&gt;AppInstanceAdmin&lt;/code&gt; and channel moderator roles can&#39;t set preferences for other users. Banned users or bots can&#39;t set membership preferences for the channel from which they are banned.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The x-amz-chime-bearer request header is mandatory. Use the ARN of an &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putChannelMembershipPreferencesTest() throws ApiException {
        String channelArn = null;
        String memberArn = null;
        String xAmzChimeBearer = null;
        PutChannelMembershipPreferencesRequest putChannelMembershipPreferencesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutChannelMembershipPreferencesResponse response = api.putChannelMembershipPreferences(channelArn, memberArn, xAmzChimeBearer, putChannelMembershipPreferencesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Sets the data streaming configuration for an &lt;code&gt;AppInstance&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/streaming-export.html\&quot;&gt;Streaming messaging data&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putMessagingStreamingConfigurationsTest() throws ApiException {
        String appInstanceArn = null;
        PutMessagingStreamingConfigurationsRequest putMessagingStreamingConfigurationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutMessagingStreamingConfigurationsResponse response = api.putMessagingStreamingConfigurations(appInstanceArn, putMessagingStreamingConfigurationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Redacts message content, but not metadata. The message exists in the back end, but the action returns null content, and the state shows as redacted.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void redactChannelMessageTest() throws ApiException {
        String channelArn = null;
        String messageId = null;
        String xAmzChimeBearer = null;
        String operation = null;
        RedactChannelMessageRequest redactChannelMessageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RedactChannelMessageResponse response = api.redactChannelMessage(channelArn, messageId, xAmzChimeBearer, operation, redactChannelMessageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Allows the &lt;code&gt;ChimeBearer&lt;/code&gt; to search channels by channel members. Users or bots can search across the channels that they belong to. Users in the &lt;code&gt;AppInstanceAdmin&lt;/code&gt; role can search across all channels.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchChannelsTest() throws ApiException {
        String operation = null;
        SearchChannelsRequest searchChannelsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String xAmzChimeBearer = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        SearchChannelsResponse response = api.searchChannels(operation, searchChannelsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Sends a message to a particular channel that the member is a part of.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;p&gt;Also, &lt;code&gt;STANDARD&lt;/code&gt; messages can be up to 4KB in size and contain metadata. Metadata is arbitrary, and you can use it in a variety of ways, such as containing a link to an attachment.&lt;/p&gt; &lt;p&gt; &lt;code&gt;CONTROL&lt;/code&gt; messages are limited to 30 bytes and do not contain metadata.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendChannelMessageTest() throws ApiException {
        String channelArn = null;
        String xAmzChimeBearer = null;
        SendChannelMessageRequest sendChannelMessageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SendChannelMessageResponse response = api.sendChannelMessage(channelArn, xAmzChimeBearer, sendChannelMessageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Applies the specified tags to the specified Amazon Chime SDK messaging resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String operation = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.tagResource(operation, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes the specified tags from the specified Amazon Chime SDK messaging resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String operation = null;
        UntagResourceRequest untagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.untagResource(operation, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Update a channel&#39;s attributes.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Restriction&lt;/b&gt;: You can&#39;t change a channel&#39;s privacy. &lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateChannelTest() throws ApiException {
        String channelArn = null;
        String xAmzChimeBearer = null;
        UpdateChannelRequest updateChannelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateChannelResponse response = api.updateChannel(channelArn, xAmzChimeBearer, updateChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates channel flow attributes. This is a developer API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateChannelFlowTest() throws ApiException {
        String channelFlowArn = null;
        UpdateChannelFlowRequest updateChannelFlowRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateChannelFlowResponse response = api.updateChannelFlow(channelFlowArn, updateChannelFlowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the content of a message.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateChannelMessageTest() throws ApiException {
        String channelArn = null;
        String messageId = null;
        String xAmzChimeBearer = null;
        UpdateChannelMessageRequest updateChannelMessageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateChannelMessageResponse response = api.updateChannelMessage(channelArn, messageId, xAmzChimeBearer, updateChannelMessageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;The details of the time when a user last read messages in a channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; or &lt;code&gt;AppInstanceBot&lt;/code&gt; that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateChannelReadMarkerTest() throws ApiException {
        String channelArn = null;
        String xAmzChimeBearer = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateChannelReadMarkerResponse response = api.updateChannelReadMarker(channelArn, xAmzChimeBearer, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
