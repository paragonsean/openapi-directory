/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendChannelMessageResponse_Status.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendChannelMessageResponse_Status::OAISendChannelMessageResponse_Status(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendChannelMessageResponse_Status::OAISendChannelMessageResponse_Status() {
    this->initializeModel();
}

OAISendChannelMessageResponse_Status::~OAISendChannelMessageResponse_Status() {}

void OAISendChannelMessageResponse_Status::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;

    m_detail_isSet = false;
    m_detail_isValid = false;
}

void OAISendChannelMessageResponse_Status::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendChannelMessageResponse_Status::fromJsonObject(QJsonObject json) {

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_detail_isValid = ::OpenAPI::fromJsonValue(m_detail, json[QString("Detail")]);
    m_detail_isSet = !json[QString("Detail")].isNull() && m_detail_isValid;
}

QString OAISendChannelMessageResponse_Status::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendChannelMessageResponse_Status::asJsonObject() const {
    QJsonObject obj;
    if (m_value.isSet()) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_detail_isSet) {
        obj.insert(QString("Detail"), ::OpenAPI::toJsonValue(m_detail));
    }
    return obj;
}

OAIChannelMessageStatus OAISendChannelMessageResponse_Status::getValue() const {
    return m_value;
}
void OAISendChannelMessageResponse_Status::setValue(const OAIChannelMessageStatus &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAISendChannelMessageResponse_Status::is_value_Set() const{
    return m_value_isSet;
}

bool OAISendChannelMessageResponse_Status::is_value_Valid() const{
    return m_value_isValid;
}

QString OAISendChannelMessageResponse_Status::getDetail() const {
    return m_detail;
}
void OAISendChannelMessageResponse_Status::setDetail(const QString &detail) {
    m_detail = detail;
    m_detail_isSet = true;
}

bool OAISendChannelMessageResponse_Status::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAISendChannelMessageResponse_Status::is_detail_Valid() const{
    return m_detail_isValid;
}

bool OAISendChannelMessageResponse_Status::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendChannelMessageResponse_Status::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
