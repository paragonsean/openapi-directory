/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchField::OAISearchField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchField::OAISearchField() {
    this->initializeModel();
}

OAISearchField::~OAISearchField() {}

void OAISearchField::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;
}

void OAISearchField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchField::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("Key")]);
    m_key_isSet = !json[QString("Key")].isNull() && m_key_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("Values")]);
    m_values_isSet = !json[QString("Values")].isNull() && m_values_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("Operator")]);
    m_r_operator_isSet = !json[QString("Operator")].isNull() && m_r_operator_isValid;
}

QString OAISearchField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchField::asJsonObject() const {
    QJsonObject obj;
    if (m_key.isSet()) {
        obj.insert(QString("Key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_values.isSet()) {
        obj.insert(QString("Values"), ::OpenAPI::toJsonValue(m_values));
    }
    if (m_r_operator.isSet()) {
        obj.insert(QString("Operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    return obj;
}

OAISearchFieldKey OAISearchField::getKey() const {
    return m_key;
}
void OAISearchField::setKey(const OAISearchFieldKey &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAISearchField::is_key_Set() const{
    return m_key_isSet;
}

bool OAISearchField::is_key_Valid() const{
    return m_key_isValid;
}

QList OAISearchField::getValues() const {
    return m_values;
}
void OAISearchField::setValues(const QList &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAISearchField::is_values_Set() const{
    return m_values_isSet;
}

bool OAISearchField::is_values_Valid() const{
    return m_values_isValid;
}

OAISearchFieldOperator OAISearchField::getROperator() const {
    return m_r_operator;
}
void OAISearchField::setROperator(const OAISearchFieldOperator &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAISearchField::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAISearchField::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

bool OAISearchField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchField::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_key_isValid && m_values_isValid && m_r_operator_isValid && true;
}

} // namespace OpenAPI
