/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetChannelMembershipPreferencesResponse_Preferences.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetChannelMembershipPreferencesResponse_Preferences::OAIGetChannelMembershipPreferencesResponse_Preferences(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetChannelMembershipPreferencesResponse_Preferences::OAIGetChannelMembershipPreferencesResponse_Preferences() {
    this->initializeModel();
}

OAIGetChannelMembershipPreferencesResponse_Preferences::~OAIGetChannelMembershipPreferencesResponse_Preferences() {}

void OAIGetChannelMembershipPreferencesResponse_Preferences::initializeModel() {

    m_push_notifications_isSet = false;
    m_push_notifications_isValid = false;
}

void OAIGetChannelMembershipPreferencesResponse_Preferences::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetChannelMembershipPreferencesResponse_Preferences::fromJsonObject(QJsonObject json) {

    m_push_notifications_isValid = ::OpenAPI::fromJsonValue(m_push_notifications, json[QString("PushNotifications")]);
    m_push_notifications_isSet = !json[QString("PushNotifications")].isNull() && m_push_notifications_isValid;
}

QString OAIGetChannelMembershipPreferencesResponse_Preferences::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetChannelMembershipPreferencesResponse_Preferences::asJsonObject() const {
    QJsonObject obj;
    if (m_push_notifications.isSet()) {
        obj.insert(QString("PushNotifications"), ::OpenAPI::toJsonValue(m_push_notifications));
    }
    return obj;
}

OAIPutChannelMembershipPreferences_request_Preferences_PushNotifications OAIGetChannelMembershipPreferencesResponse_Preferences::getPushNotifications() const {
    return m_push_notifications;
}
void OAIGetChannelMembershipPreferencesResponse_Preferences::setPushNotifications(const OAIPutChannelMembershipPreferences_request_Preferences_PushNotifications &push_notifications) {
    m_push_notifications = push_notifications;
    m_push_notifications_isSet = true;
}

bool OAIGetChannelMembershipPreferencesResponse_Preferences::is_push_notifications_Set() const{
    return m_push_notifications_isSet;
}

bool OAIGetChannelMembershipPreferencesResponse_Preferences::is_push_notifications_Valid() const{
    return m_push_notifications_isValid;
}

bool OAIGetChannelMembershipPreferencesResponse_Preferences::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_push_notifications.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetChannelMembershipPreferencesResponse_Preferences::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
