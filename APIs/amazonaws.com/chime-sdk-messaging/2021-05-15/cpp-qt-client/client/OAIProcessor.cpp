/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProcessor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProcessor::OAIProcessor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProcessor::OAIProcessor() {
    this->initializeModel();
}

OAIProcessor::~OAIProcessor() {}

void OAIProcessor::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_execution_order_isSet = false;
    m_execution_order_isValid = false;

    m_fallback_action_isSet = false;
    m_fallback_action_isValid = false;
}

void OAIProcessor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProcessor::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("Configuration")]);
    m_configuration_isSet = !json[QString("Configuration")].isNull() && m_configuration_isValid;

    m_execution_order_isValid = ::OpenAPI::fromJsonValue(m_execution_order, json[QString("ExecutionOrder")]);
    m_execution_order_isSet = !json[QString("ExecutionOrder")].isNull() && m_execution_order_isValid;

    m_fallback_action_isValid = ::OpenAPI::fromJsonValue(m_fallback_action, json[QString("FallbackAction")]);
    m_fallback_action_isSet = !json[QString("FallbackAction")].isNull() && m_fallback_action_isValid;
}

QString OAIProcessor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProcessor::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_configuration.isSet()) {
        obj.insert(QString("Configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_execution_order_isSet) {
        obj.insert(QString("ExecutionOrder"), ::OpenAPI::toJsonValue(m_execution_order));
    }
    if (m_fallback_action.isSet()) {
        obj.insert(QString("FallbackAction"), ::OpenAPI::toJsonValue(m_fallback_action));
    }
    return obj;
}

QString OAIProcessor::getName() const {
    return m_name;
}
void OAIProcessor::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProcessor::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProcessor::is_name_Valid() const{
    return m_name_isValid;
}

OAIProcessor_Configuration OAIProcessor::getConfiguration() const {
    return m_configuration;
}
void OAIProcessor::setConfiguration(const OAIProcessor_Configuration &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAIProcessor::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAIProcessor::is_configuration_Valid() const{
    return m_configuration_isValid;
}

qint32 OAIProcessor::getExecutionOrder() const {
    return m_execution_order;
}
void OAIProcessor::setExecutionOrder(const qint32 &execution_order) {
    m_execution_order = execution_order;
    m_execution_order_isSet = true;
}

bool OAIProcessor::is_execution_order_Set() const{
    return m_execution_order_isSet;
}

bool OAIProcessor::is_execution_order_Valid() const{
    return m_execution_order_isValid;
}

OAIFallbackAction OAIProcessor::getFallbackAction() const {
    return m_fallback_action;
}
void OAIProcessor::setFallbackAction(const OAIFallbackAction &fallback_action) {
    m_fallback_action = fallback_action;
    m_fallback_action_isSet = true;
}

bool OAIProcessor::is_fallback_action_Set() const{
    return m_fallback_action_isSet;
}

bool OAIProcessor::is_fallback_action_Valid() const{
    return m_fallback_action_isValid;
}

bool OAIProcessor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fallback_action.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProcessor::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_configuration_isValid && m_execution_order_isValid && m_fallback_action_isValid && true;
}

} // namespace OpenAPI
