/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStreamingConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStreamingConfiguration::OAIStreamingConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStreamingConfiguration::OAIStreamingConfiguration() {
    this->initializeModel();
}

OAIStreamingConfiguration::~OAIStreamingConfiguration() {}

void OAIStreamingConfiguration::initializeModel() {

    m_data_type_isSet = false;
    m_data_type_isValid = false;

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;
}

void OAIStreamingConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStreamingConfiguration::fromJsonObject(QJsonObject json) {

    m_data_type_isValid = ::OpenAPI::fromJsonValue(m_data_type, json[QString("DataType")]);
    m_data_type_isSet = !json[QString("DataType")].isNull() && m_data_type_isValid;

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceArn")]);
    m_resource_arn_isSet = !json[QString("ResourceArn")].isNull() && m_resource_arn_isValid;
}

QString OAIStreamingConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStreamingConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_data_type.isSet()) {
        obj.insert(QString("DataType"), ::OpenAPI::toJsonValue(m_data_type));
    }
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    return obj;
}

OAIMessagingDataType OAIStreamingConfiguration::getDataType() const {
    return m_data_type;
}
void OAIStreamingConfiguration::setDataType(const OAIMessagingDataType &data_type) {
    m_data_type = data_type;
    m_data_type_isSet = true;
}

bool OAIStreamingConfiguration::is_data_type_Set() const{
    return m_data_type_isSet;
}

bool OAIStreamingConfiguration::is_data_type_Valid() const{
    return m_data_type_isValid;
}

QString OAIStreamingConfiguration::getResourceArn() const {
    return m_resource_arn;
}
void OAIStreamingConfiguration::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIStreamingConfiguration::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIStreamingConfiguration::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

bool OAIStreamingConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStreamingConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_type_isValid && m_resource_arn_isValid && true;
}

} // namespace OpenAPI
