/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeChannelBanResponse_ChannelBan.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeChannelBanResponse_ChannelBan::OAIDescribeChannelBanResponse_ChannelBan(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeChannelBanResponse_ChannelBan::OAIDescribeChannelBanResponse_ChannelBan() {
    this->initializeModel();
}

OAIDescribeChannelBanResponse_ChannelBan::~OAIDescribeChannelBanResponse_ChannelBan() {}

void OAIDescribeChannelBanResponse_ChannelBan::initializeModel() {

    m_member_isSet = false;
    m_member_isValid = false;

    m_channel_arn_isSet = false;
    m_channel_arn_isValid = false;

    m_created_timestamp_isSet = false;
    m_created_timestamp_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;
}

void OAIDescribeChannelBanResponse_ChannelBan::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeChannelBanResponse_ChannelBan::fromJsonObject(QJsonObject json) {

    m_member_isValid = ::OpenAPI::fromJsonValue(m_member, json[QString("Member")]);
    m_member_isSet = !json[QString("Member")].isNull() && m_member_isValid;

    m_channel_arn_isValid = ::OpenAPI::fromJsonValue(m_channel_arn, json[QString("ChannelArn")]);
    m_channel_arn_isSet = !json[QString("ChannelArn")].isNull() && m_channel_arn_isValid;

    m_created_timestamp_isValid = ::OpenAPI::fromJsonValue(m_created_timestamp, json[QString("CreatedTimestamp")]);
    m_created_timestamp_isSet = !json[QString("CreatedTimestamp")].isNull() && m_created_timestamp_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("CreatedBy")]);
    m_created_by_isSet = !json[QString("CreatedBy")].isNull() && m_created_by_isValid;
}

QString OAIDescribeChannelBanResponse_ChannelBan::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeChannelBanResponse_ChannelBan::asJsonObject() const {
    QJsonObject obj;
    if (m_member.isSet()) {
        obj.insert(QString("Member"), ::OpenAPI::toJsonValue(m_member));
    }
    if (m_channel_arn_isSet) {
        obj.insert(QString("ChannelArn"), ::OpenAPI::toJsonValue(m_channel_arn));
    }
    if (m_created_timestamp_isSet) {
        obj.insert(QString("CreatedTimestamp"), ::OpenAPI::toJsonValue(m_created_timestamp));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("CreatedBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    return obj;
}

OAIChannelBan_Member OAIDescribeChannelBanResponse_ChannelBan::getMember() const {
    return m_member;
}
void OAIDescribeChannelBanResponse_ChannelBan::setMember(const OAIChannelBan_Member &member) {
    m_member = member;
    m_member_isSet = true;
}

bool OAIDescribeChannelBanResponse_ChannelBan::is_member_Set() const{
    return m_member_isSet;
}

bool OAIDescribeChannelBanResponse_ChannelBan::is_member_Valid() const{
    return m_member_isValid;
}

QString OAIDescribeChannelBanResponse_ChannelBan::getChannelArn() const {
    return m_channel_arn;
}
void OAIDescribeChannelBanResponse_ChannelBan::setChannelArn(const QString &channel_arn) {
    m_channel_arn = channel_arn;
    m_channel_arn_isSet = true;
}

bool OAIDescribeChannelBanResponse_ChannelBan::is_channel_arn_Set() const{
    return m_channel_arn_isSet;
}

bool OAIDescribeChannelBanResponse_ChannelBan::is_channel_arn_Valid() const{
    return m_channel_arn_isValid;
}

QDateTime OAIDescribeChannelBanResponse_ChannelBan::getCreatedTimestamp() const {
    return m_created_timestamp;
}
void OAIDescribeChannelBanResponse_ChannelBan::setCreatedTimestamp(const QDateTime &created_timestamp) {
    m_created_timestamp = created_timestamp;
    m_created_timestamp_isSet = true;
}

bool OAIDescribeChannelBanResponse_ChannelBan::is_created_timestamp_Set() const{
    return m_created_timestamp_isSet;
}

bool OAIDescribeChannelBanResponse_ChannelBan::is_created_timestamp_Valid() const{
    return m_created_timestamp_isValid;
}

OAIChannelBan_CreatedBy OAIDescribeChannelBanResponse_ChannelBan::getCreatedBy() const {
    return m_created_by;
}
void OAIDescribeChannelBanResponse_ChannelBan::setCreatedBy(const OAIChannelBan_CreatedBy &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIDescribeChannelBanResponse_ChannelBan::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIDescribeChannelBanResponse_ChannelBan::is_created_by_Valid() const{
    return m_created_by_isValid;
}

bool OAIDescribeChannelBanResponse_ChannelBan::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_member.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeChannelBanResponse_ChannelBan::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
