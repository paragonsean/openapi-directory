/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorCode::OAIErrorCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorCode::OAIErrorCode() {
    this->initializeModel();
}

OAIErrorCode::~OAIErrorCode() {}

void OAIErrorCode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIErrorCode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIErrorCode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("BadRequest", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::BADREQUEST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Conflict", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::CONFLICT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Forbidden", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::FORBIDDEN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NotFound", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::NOTFOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PreconditionFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::PRECONDITIONFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ResourceLimitExceeded", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::RESOURCELIMITEXCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ServiceFailure", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::SERVICEFAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AccessDenied", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::ACCESSDENIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ServiceUnavailable", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::SERVICEUNAVAILABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Throttled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::THROTTLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Throttling", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::THROTTLING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Unauthorized", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::UNAUTHORIZED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Unprocessable", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::UNPROCESSABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VoiceConnectorGroupAssociationsExist", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::VOICECONNECTORGROUPASSOCIATIONSEXIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PhoneNumberAssociationsExist", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::PHONENUMBERASSOCIATIONSEXIST;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIErrorCode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIErrorCode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIErrorCode::BADREQUEST:
            val = "BadRequest";
            break;
        case eOAIErrorCode::CONFLICT:
            val = "Conflict";
            break;
        case eOAIErrorCode::FORBIDDEN:
            val = "Forbidden";
            break;
        case eOAIErrorCode::NOTFOUND:
            val = "NotFound";
            break;
        case eOAIErrorCode::PRECONDITIONFAILED:
            val = "PreconditionFailed";
            break;
        case eOAIErrorCode::RESOURCELIMITEXCEEDED:
            val = "ResourceLimitExceeded";
            break;
        case eOAIErrorCode::SERVICEFAILURE:
            val = "ServiceFailure";
            break;
        case eOAIErrorCode::ACCESSDENIED:
            val = "AccessDenied";
            break;
        case eOAIErrorCode::SERVICEUNAVAILABLE:
            val = "ServiceUnavailable";
            break;
        case eOAIErrorCode::THROTTLED:
            val = "Throttled";
            break;
        case eOAIErrorCode::THROTTLING:
            val = "Throttling";
            break;
        case eOAIErrorCode::UNAUTHORIZED:
            val = "Unauthorized";
            break;
        case eOAIErrorCode::UNPROCESSABLE:
            val = "Unprocessable";
            break;
        case eOAIErrorCode::VOICECONNECTORGROUPASSOCIATIONSEXIST:
            val = "VoiceConnectorGroupAssociationsExist";
            break;
        case eOAIErrorCode::PHONENUMBERASSOCIATIONSEXIST:
            val = "PhoneNumberAssociationsExist";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIErrorCode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIErrorCode::eOAIErrorCode OAIErrorCode::getValue() const {
    return m_value;
}

void OAIErrorCode::setValue(const OAIErrorCode::eOAIErrorCode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIErrorCode::isSet() const {
    
    return m_value_isSet;
}

bool OAIErrorCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
