/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateChannelModeratorResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateChannelModeratorResponse::OAICreateChannelModeratorResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateChannelModeratorResponse::OAICreateChannelModeratorResponse() {
    this->initializeModel();
}

OAICreateChannelModeratorResponse::~OAICreateChannelModeratorResponse() {}

void OAICreateChannelModeratorResponse::initializeModel() {

    m_channel_arn_isSet = false;
    m_channel_arn_isValid = false;

    m_channel_moderator_isSet = false;
    m_channel_moderator_isValid = false;
}

void OAICreateChannelModeratorResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateChannelModeratorResponse::fromJsonObject(QJsonObject json) {

    m_channel_arn_isValid = ::OpenAPI::fromJsonValue(m_channel_arn, json[QString("ChannelArn")]);
    m_channel_arn_isSet = !json[QString("ChannelArn")].isNull() && m_channel_arn_isValid;

    m_channel_moderator_isValid = ::OpenAPI::fromJsonValue(m_channel_moderator, json[QString("ChannelModerator")]);
    m_channel_moderator_isSet = !json[QString("ChannelModerator")].isNull() && m_channel_moderator_isValid;
}

QString OAICreateChannelModeratorResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateChannelModeratorResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_arn_isSet) {
        obj.insert(QString("ChannelArn"), ::OpenAPI::toJsonValue(m_channel_arn));
    }
    if (m_channel_moderator.isSet()) {
        obj.insert(QString("ChannelModerator"), ::OpenAPI::toJsonValue(m_channel_moderator));
    }
    return obj;
}

QString OAICreateChannelModeratorResponse::getChannelArn() const {
    return m_channel_arn;
}
void OAICreateChannelModeratorResponse::setChannelArn(const QString &channel_arn) {
    m_channel_arn = channel_arn;
    m_channel_arn_isSet = true;
}

bool OAICreateChannelModeratorResponse::is_channel_arn_Set() const{
    return m_channel_arn_isSet;
}

bool OAICreateChannelModeratorResponse::is_channel_arn_Valid() const{
    return m_channel_arn_isValid;
}

OAICreateChannelModeratorResponse_ChannelModerator OAICreateChannelModeratorResponse::getChannelModerator() const {
    return m_channel_moderator;
}
void OAICreateChannelModeratorResponse::setChannelModerator(const OAICreateChannelModeratorResponse_ChannelModerator &channel_moderator) {
    m_channel_moderator = channel_moderator;
    m_channel_moderator_isSet = true;
}

bool OAICreateChannelModeratorResponse::is_channel_moderator_Set() const{
    return m_channel_moderator_isSet;
}

bool OAICreateChannelModeratorResponse::is_channel_moderator_Valid() const{
    return m_channel_moderator_isValid;
}

bool OAICreateChannelModeratorResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_moderator.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateChannelModeratorResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
