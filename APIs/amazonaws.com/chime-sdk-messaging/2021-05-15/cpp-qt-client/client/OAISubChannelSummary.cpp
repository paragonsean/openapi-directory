/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubChannelSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubChannelSummary::OAISubChannelSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubChannelSummary::OAISubChannelSummary() {
    this->initializeModel();
}

OAISubChannelSummary::~OAISubChannelSummary() {}

void OAISubChannelSummary::initializeModel() {

    m_sub_channel_id_isSet = false;
    m_sub_channel_id_isValid = false;

    m_membership_count_isSet = false;
    m_membership_count_isValid = false;
}

void OAISubChannelSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubChannelSummary::fromJsonObject(QJsonObject json) {

    m_sub_channel_id_isValid = ::OpenAPI::fromJsonValue(m_sub_channel_id, json[QString("SubChannelId")]);
    m_sub_channel_id_isSet = !json[QString("SubChannelId")].isNull() && m_sub_channel_id_isValid;

    m_membership_count_isValid = ::OpenAPI::fromJsonValue(m_membership_count, json[QString("MembershipCount")]);
    m_membership_count_isSet = !json[QString("MembershipCount")].isNull() && m_membership_count_isValid;
}

QString OAISubChannelSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubChannelSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_sub_channel_id_isSet) {
        obj.insert(QString("SubChannelId"), ::OpenAPI::toJsonValue(m_sub_channel_id));
    }
    if (m_membership_count_isSet) {
        obj.insert(QString("MembershipCount"), ::OpenAPI::toJsonValue(m_membership_count));
    }
    return obj;
}

QString OAISubChannelSummary::getSubChannelId() const {
    return m_sub_channel_id;
}
void OAISubChannelSummary::setSubChannelId(const QString &sub_channel_id) {
    m_sub_channel_id = sub_channel_id;
    m_sub_channel_id_isSet = true;
}

bool OAISubChannelSummary::is_sub_channel_id_Set() const{
    return m_sub_channel_id_isSet;
}

bool OAISubChannelSummary::is_sub_channel_id_Valid() const{
    return m_sub_channel_id_isValid;
}

qint32 OAISubChannelSummary::getMembershipCount() const {
    return m_membership_count;
}
void OAISubChannelSummary::setMembershipCount(const qint32 &membership_count) {
    m_membership_count = membership_count;
    m_membership_count_isSet = true;
}

bool OAISubChannelSummary::is_membership_count_Set() const{
    return m_membership_count_isSet;
}

bool OAISubChannelSummary::is_membership_count_Valid() const{
    return m_membership_count_isValid;
}

bool OAISubChannelSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sub_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubChannelSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
