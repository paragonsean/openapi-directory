/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelMembership.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelMembership::OAIChannelMembership(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelMembership::OAIChannelMembership() {
    this->initializeModel();
}

OAIChannelMembership::~OAIChannelMembership() {}

void OAIChannelMembership::initializeModel() {

    m_invited_by_isSet = false;
    m_invited_by_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_member_isSet = false;
    m_member_isValid = false;

    m_channel_arn_isSet = false;
    m_channel_arn_isValid = false;

    m_created_timestamp_isSet = false;
    m_created_timestamp_isValid = false;

    m_last_updated_timestamp_isSet = false;
    m_last_updated_timestamp_isValid = false;

    m_sub_channel_id_isSet = false;
    m_sub_channel_id_isValid = false;
}

void OAIChannelMembership::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelMembership::fromJsonObject(QJsonObject json) {

    m_invited_by_isValid = ::OpenAPI::fromJsonValue(m_invited_by, json[QString("InvitedBy")]);
    m_invited_by_isSet = !json[QString("InvitedBy")].isNull() && m_invited_by_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_member_isValid = ::OpenAPI::fromJsonValue(m_member, json[QString("Member")]);
    m_member_isSet = !json[QString("Member")].isNull() && m_member_isValid;

    m_channel_arn_isValid = ::OpenAPI::fromJsonValue(m_channel_arn, json[QString("ChannelArn")]);
    m_channel_arn_isSet = !json[QString("ChannelArn")].isNull() && m_channel_arn_isValid;

    m_created_timestamp_isValid = ::OpenAPI::fromJsonValue(m_created_timestamp, json[QString("CreatedTimestamp")]);
    m_created_timestamp_isSet = !json[QString("CreatedTimestamp")].isNull() && m_created_timestamp_isValid;

    m_last_updated_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_updated_timestamp, json[QString("LastUpdatedTimestamp")]);
    m_last_updated_timestamp_isSet = !json[QString("LastUpdatedTimestamp")].isNull() && m_last_updated_timestamp_isValid;

    m_sub_channel_id_isValid = ::OpenAPI::fromJsonValue(m_sub_channel_id, json[QString("SubChannelId")]);
    m_sub_channel_id_isSet = !json[QString("SubChannelId")].isNull() && m_sub_channel_id_isValid;
}

QString OAIChannelMembership::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelMembership::asJsonObject() const {
    QJsonObject obj;
    if (m_invited_by.isSet()) {
        obj.insert(QString("InvitedBy"), ::OpenAPI::toJsonValue(m_invited_by));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_member.isSet()) {
        obj.insert(QString("Member"), ::OpenAPI::toJsonValue(m_member));
    }
    if (m_channel_arn_isSet) {
        obj.insert(QString("ChannelArn"), ::OpenAPI::toJsonValue(m_channel_arn));
    }
    if (m_created_timestamp_isSet) {
        obj.insert(QString("CreatedTimestamp"), ::OpenAPI::toJsonValue(m_created_timestamp));
    }
    if (m_last_updated_timestamp_isSet) {
        obj.insert(QString("LastUpdatedTimestamp"), ::OpenAPI::toJsonValue(m_last_updated_timestamp));
    }
    if (m_sub_channel_id_isSet) {
        obj.insert(QString("SubChannelId"), ::OpenAPI::toJsonValue(m_sub_channel_id));
    }
    return obj;
}

OAIBatchChannelMemberships_InvitedBy OAIChannelMembership::getInvitedBy() const {
    return m_invited_by;
}
void OAIChannelMembership::setInvitedBy(const OAIBatchChannelMemberships_InvitedBy &invited_by) {
    m_invited_by = invited_by;
    m_invited_by_isSet = true;
}

bool OAIChannelMembership::is_invited_by_Set() const{
    return m_invited_by_isSet;
}

bool OAIChannelMembership::is_invited_by_Valid() const{
    return m_invited_by_isValid;
}

OAIChannelMembershipType OAIChannelMembership::getType() const {
    return m_type;
}
void OAIChannelMembership::setType(const OAIChannelMembershipType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIChannelMembership::is_type_Set() const{
    return m_type_isSet;
}

bool OAIChannelMembership::is_type_Valid() const{
    return m_type_isValid;
}

OAIChannelMembership_Member OAIChannelMembership::getMember() const {
    return m_member;
}
void OAIChannelMembership::setMember(const OAIChannelMembership_Member &member) {
    m_member = member;
    m_member_isSet = true;
}

bool OAIChannelMembership::is_member_Set() const{
    return m_member_isSet;
}

bool OAIChannelMembership::is_member_Valid() const{
    return m_member_isValid;
}

QString OAIChannelMembership::getChannelArn() const {
    return m_channel_arn;
}
void OAIChannelMembership::setChannelArn(const QString &channel_arn) {
    m_channel_arn = channel_arn;
    m_channel_arn_isSet = true;
}

bool OAIChannelMembership::is_channel_arn_Set() const{
    return m_channel_arn_isSet;
}

bool OAIChannelMembership::is_channel_arn_Valid() const{
    return m_channel_arn_isValid;
}

QDateTime OAIChannelMembership::getCreatedTimestamp() const {
    return m_created_timestamp;
}
void OAIChannelMembership::setCreatedTimestamp(const QDateTime &created_timestamp) {
    m_created_timestamp = created_timestamp;
    m_created_timestamp_isSet = true;
}

bool OAIChannelMembership::is_created_timestamp_Set() const{
    return m_created_timestamp_isSet;
}

bool OAIChannelMembership::is_created_timestamp_Valid() const{
    return m_created_timestamp_isValid;
}

QDateTime OAIChannelMembership::getLastUpdatedTimestamp() const {
    return m_last_updated_timestamp;
}
void OAIChannelMembership::setLastUpdatedTimestamp(const QDateTime &last_updated_timestamp) {
    m_last_updated_timestamp = last_updated_timestamp;
    m_last_updated_timestamp_isSet = true;
}

bool OAIChannelMembership::is_last_updated_timestamp_Set() const{
    return m_last_updated_timestamp_isSet;
}

bool OAIChannelMembership::is_last_updated_timestamp_Valid() const{
    return m_last_updated_timestamp_isValid;
}

QString OAIChannelMembership::getSubChannelId() const {
    return m_sub_channel_id;
}
void OAIChannelMembership::setSubChannelId(const QString &sub_channel_id) {
    m_sub_channel_id = sub_channel_id;
    m_sub_channel_id_isSet = true;
}

bool OAIChannelMembership::is_sub_channel_id_Set() const{
    return m_sub_channel_id_isSet;
}

bool OAIChannelMembership::is_sub_channel_id_Valid() const{
    return m_sub_channel_id_isValid;
}

bool OAIChannelMembership::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_invited_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_member.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelMembership::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
