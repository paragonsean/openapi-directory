/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateChannelFlow_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateChannelFlow_request::OAICreateChannelFlow_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateChannelFlow_request::OAICreateChannelFlow_request() {
    this->initializeModel();
}

OAICreateChannelFlow_request::~OAICreateChannelFlow_request() {}

void OAICreateChannelFlow_request::initializeModel() {

    m_app_instance_arn_isSet = false;
    m_app_instance_arn_isValid = false;

    m_processors_isSet = false;
    m_processors_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;
}

void OAICreateChannelFlow_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateChannelFlow_request::fromJsonObject(QJsonObject json) {

    m_app_instance_arn_isValid = ::OpenAPI::fromJsonValue(m_app_instance_arn, json[QString("AppInstanceArn")]);
    m_app_instance_arn_isSet = !json[QString("AppInstanceArn")].isNull() && m_app_instance_arn_isValid;

    m_processors_isValid = ::OpenAPI::fromJsonValue(m_processors, json[QString("Processors")]);
    m_processors_isSet = !json[QString("Processors")].isNull() && m_processors_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;
}

QString OAICreateChannelFlow_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateChannelFlow_request::asJsonObject() const {
    QJsonObject obj;
    if (m_app_instance_arn_isSet) {
        obj.insert(QString("AppInstanceArn"), ::OpenAPI::toJsonValue(m_app_instance_arn));
    }
    if (m_processors.size() > 0) {
        obj.insert(QString("Processors"), ::OpenAPI::toJsonValue(m_processors));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    return obj;
}

QString OAICreateChannelFlow_request::getAppInstanceArn() const {
    return m_app_instance_arn;
}
void OAICreateChannelFlow_request::setAppInstanceArn(const QString &app_instance_arn) {
    m_app_instance_arn = app_instance_arn;
    m_app_instance_arn_isSet = true;
}

bool OAICreateChannelFlow_request::is_app_instance_arn_Set() const{
    return m_app_instance_arn_isSet;
}

bool OAICreateChannelFlow_request::is_app_instance_arn_Valid() const{
    return m_app_instance_arn_isValid;
}

QList<OAIProcessor> OAICreateChannelFlow_request::getProcessors() const {
    return m_processors;
}
void OAICreateChannelFlow_request::setProcessors(const QList<OAIProcessor> &processors) {
    m_processors = processors;
    m_processors_isSet = true;
}

bool OAICreateChannelFlow_request::is_processors_Set() const{
    return m_processors_isSet;
}

bool OAICreateChannelFlow_request::is_processors_Valid() const{
    return m_processors_isValid;
}

QString OAICreateChannelFlow_request::getName() const {
    return m_name;
}
void OAICreateChannelFlow_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateChannelFlow_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateChannelFlow_request::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAITag> OAICreateChannelFlow_request::getTags() const {
    return m_tags;
}
void OAICreateChannelFlow_request::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateChannelFlow_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateChannelFlow_request::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateChannelFlow_request::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICreateChannelFlow_request::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICreateChannelFlow_request::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICreateChannelFlow_request::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

bool OAICreateChannelFlow_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_instance_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateChannelFlow_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_instance_arn_isValid && m_processors_isValid && m_name_isValid && m_client_request_token_isValid && true;
}

} // namespace OpenAPI
