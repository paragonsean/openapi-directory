/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListChannelMessagesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListChannelMessagesResponse::OAIListChannelMessagesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListChannelMessagesResponse::OAIListChannelMessagesResponse() {
    this->initializeModel();
}

OAIListChannelMessagesResponse::~OAIListChannelMessagesResponse() {}

void OAIListChannelMessagesResponse::initializeModel() {

    m_channel_arn_isSet = false;
    m_channel_arn_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_channel_messages_isSet = false;
    m_channel_messages_isValid = false;

    m_sub_channel_id_isSet = false;
    m_sub_channel_id_isValid = false;
}

void OAIListChannelMessagesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListChannelMessagesResponse::fromJsonObject(QJsonObject json) {

    m_channel_arn_isValid = ::OpenAPI::fromJsonValue(m_channel_arn, json[QString("ChannelArn")]);
    m_channel_arn_isSet = !json[QString("ChannelArn")].isNull() && m_channel_arn_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_channel_messages_isValid = ::OpenAPI::fromJsonValue(m_channel_messages, json[QString("ChannelMessages")]);
    m_channel_messages_isSet = !json[QString("ChannelMessages")].isNull() && m_channel_messages_isValid;

    m_sub_channel_id_isValid = ::OpenAPI::fromJsonValue(m_sub_channel_id, json[QString("SubChannelId")]);
    m_sub_channel_id_isSet = !json[QString("SubChannelId")].isNull() && m_sub_channel_id_isValid;
}

QString OAIListChannelMessagesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListChannelMessagesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_arn_isSet) {
        obj.insert(QString("ChannelArn"), ::OpenAPI::toJsonValue(m_channel_arn));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_channel_messages.isSet()) {
        obj.insert(QString("ChannelMessages"), ::OpenAPI::toJsonValue(m_channel_messages));
    }
    if (m_sub_channel_id_isSet) {
        obj.insert(QString("SubChannelId"), ::OpenAPI::toJsonValue(m_sub_channel_id));
    }
    return obj;
}

QString OAIListChannelMessagesResponse::getChannelArn() const {
    return m_channel_arn;
}
void OAIListChannelMessagesResponse::setChannelArn(const QString &channel_arn) {
    m_channel_arn = channel_arn;
    m_channel_arn_isSet = true;
}

bool OAIListChannelMessagesResponse::is_channel_arn_Set() const{
    return m_channel_arn_isSet;
}

bool OAIListChannelMessagesResponse::is_channel_arn_Valid() const{
    return m_channel_arn_isValid;
}

QString OAIListChannelMessagesResponse::getNextToken() const {
    return m_next_token;
}
void OAIListChannelMessagesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListChannelMessagesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListChannelMessagesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIListChannelMessagesResponse::getChannelMessages() const {
    return m_channel_messages;
}
void OAIListChannelMessagesResponse::setChannelMessages(const QList &channel_messages) {
    m_channel_messages = channel_messages;
    m_channel_messages_isSet = true;
}

bool OAIListChannelMessagesResponse::is_channel_messages_Set() const{
    return m_channel_messages_isSet;
}

bool OAIListChannelMessagesResponse::is_channel_messages_Valid() const{
    return m_channel_messages_isValid;
}

QString OAIListChannelMessagesResponse::getSubChannelId() const {
    return m_sub_channel_id;
}
void OAIListChannelMessagesResponse::setSubChannelId(const QString &sub_channel_id) {
    m_sub_channel_id = sub_channel_id;
    m_sub_channel_id_isSet = true;
}

bool OAIListChannelMessagesResponse::is_sub_channel_id_Set() const{
    return m_sub_channel_id_isSet;
}

bool OAIListChannelMessagesResponse::is_sub_channel_id_Valid() const{
    return m_sub_channel_id_isValid;
}

bool OAIListChannelMessagesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_messages.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListChannelMessagesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
