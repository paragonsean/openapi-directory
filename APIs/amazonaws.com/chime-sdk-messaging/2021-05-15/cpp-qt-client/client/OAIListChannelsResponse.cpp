/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListChannelsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListChannelsResponse::OAIListChannelsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListChannelsResponse::OAIListChannelsResponse() {
    this->initializeModel();
}

OAIListChannelsResponse::~OAIListChannelsResponse() {}

void OAIListChannelsResponse::initializeModel() {

    m_channels_isSet = false;
    m_channels_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListChannelsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListChannelsResponse::fromJsonObject(QJsonObject json) {

    m_channels_isValid = ::OpenAPI::fromJsonValue(m_channels, json[QString("Channels")]);
    m_channels_isSet = !json[QString("Channels")].isNull() && m_channels_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListChannelsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListChannelsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_channels.isSet()) {
        obj.insert(QString("Channels"), ::OpenAPI::toJsonValue(m_channels));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListChannelsResponse::getChannels() const {
    return m_channels;
}
void OAIListChannelsResponse::setChannels(const QList &channels) {
    m_channels = channels;
    m_channels_isSet = true;
}

bool OAIListChannelsResponse::is_channels_Set() const{
    return m_channels_isSet;
}

bool OAIListChannelsResponse::is_channels_Valid() const{
    return m_channels_isValid;
}

QString OAIListChannelsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListChannelsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListChannelsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListChannelsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListChannelsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListChannelsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
