/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendChannelMessageRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendChannelMessageRequest::OAISendChannelMessageRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendChannelMessageRequest::OAISendChannelMessageRequest() {
    this->initializeModel();
}

OAISendChannelMessageRequest::~OAISendChannelMessageRequest() {}

void OAISendChannelMessageRequest::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_persistence_isSet = false;
    m_persistence_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_push_notification_isSet = false;
    m_push_notification_isValid = false;

    m_message_attributes_isSet = false;
    m_message_attributes_isValid = false;

    m_sub_channel_id_isSet = false;
    m_sub_channel_id_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;
}

void OAISendChannelMessageRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendChannelMessageRequest::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("Content")]);
    m_content_isSet = !json[QString("Content")].isNull() && m_content_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_persistence_isValid = ::OpenAPI::fromJsonValue(m_persistence, json[QString("Persistence")]);
    m_persistence_isSet = !json[QString("Persistence")].isNull() && m_persistence_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("Metadata")]);
    m_metadata_isSet = !json[QString("Metadata")].isNull() && m_metadata_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;

    m_push_notification_isValid = ::OpenAPI::fromJsonValue(m_push_notification, json[QString("PushNotification")]);
    m_push_notification_isSet = !json[QString("PushNotification")].isNull() && m_push_notification_isValid;

    m_message_attributes_isValid = ::OpenAPI::fromJsonValue(m_message_attributes, json[QString("MessageAttributes")]);
    m_message_attributes_isSet = !json[QString("MessageAttributes")].isNull() && m_message_attributes_isValid;

    m_sub_channel_id_isValid = ::OpenAPI::fromJsonValue(m_sub_channel_id, json[QString("SubChannelId")]);
    m_sub_channel_id_isSet = !json[QString("SubChannelId")].isNull() && m_sub_channel_id_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("ContentType")]);
    m_content_type_isSet = !json[QString("ContentType")].isNull() && m_content_type_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("Target")]);
    m_target_isSet = !json[QString("Target")].isNull() && m_target_isValid;
}

QString OAISendChannelMessageRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendChannelMessageRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("Content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_persistence.isSet()) {
        obj.insert(QString("Persistence"), ::OpenAPI::toJsonValue(m_persistence));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("Metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_push_notification.isSet()) {
        obj.insert(QString("PushNotification"), ::OpenAPI::toJsonValue(m_push_notification));
    }
    if (m_message_attributes.isSet()) {
        obj.insert(QString("MessageAttributes"), ::OpenAPI::toJsonValue(m_message_attributes));
    }
    if (m_sub_channel_id_isSet) {
        obj.insert(QString("SubChannelId"), ::OpenAPI::toJsonValue(m_sub_channel_id));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("ContentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_target.isSet()) {
        obj.insert(QString("Target"), ::OpenAPI::toJsonValue(m_target));
    }
    return obj;
}

QString OAISendChannelMessageRequest::getContent() const {
    return m_content;
}
void OAISendChannelMessageRequest::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAISendChannelMessageRequest::is_content_Set() const{
    return m_content_isSet;
}

bool OAISendChannelMessageRequest::is_content_Valid() const{
    return m_content_isValid;
}

OAIChannelMessageType OAISendChannelMessageRequest::getType() const {
    return m_type;
}
void OAISendChannelMessageRequest::setType(const OAIChannelMessageType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISendChannelMessageRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAISendChannelMessageRequest::is_type_Valid() const{
    return m_type_isValid;
}

OAIChannelMessagePersistenceType OAISendChannelMessageRequest::getPersistence() const {
    return m_persistence;
}
void OAISendChannelMessageRequest::setPersistence(const OAIChannelMessagePersistenceType &persistence) {
    m_persistence = persistence;
    m_persistence_isSet = true;
}

bool OAISendChannelMessageRequest::is_persistence_Set() const{
    return m_persistence_isSet;
}

bool OAISendChannelMessageRequest::is_persistence_Valid() const{
    return m_persistence_isValid;
}

QString OAISendChannelMessageRequest::getMetadata() const {
    return m_metadata;
}
void OAISendChannelMessageRequest::setMetadata(const QString &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAISendChannelMessageRequest::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAISendChannelMessageRequest::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAISendChannelMessageRequest::getClientRequestToken() const {
    return m_client_request_token;
}
void OAISendChannelMessageRequest::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAISendChannelMessageRequest::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAISendChannelMessageRequest::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

OAIChannelFlowCallback_request_ChannelMessage_PushNotification OAISendChannelMessageRequest::getPushNotification() const {
    return m_push_notification;
}
void OAISendChannelMessageRequest::setPushNotification(const OAIChannelFlowCallback_request_ChannelMessage_PushNotification &push_notification) {
    m_push_notification = push_notification;
    m_push_notification_isSet = true;
}

bool OAISendChannelMessageRequest::is_push_notification_Set() const{
    return m_push_notification_isSet;
}

bool OAISendChannelMessageRequest::is_push_notification_Valid() const{
    return m_push_notification_isValid;
}

QMap OAISendChannelMessageRequest::getMessageAttributes() const {
    return m_message_attributes;
}
void OAISendChannelMessageRequest::setMessageAttributes(const QMap &message_attributes) {
    m_message_attributes = message_attributes;
    m_message_attributes_isSet = true;
}

bool OAISendChannelMessageRequest::is_message_attributes_Set() const{
    return m_message_attributes_isSet;
}

bool OAISendChannelMessageRequest::is_message_attributes_Valid() const{
    return m_message_attributes_isValid;
}

QString OAISendChannelMessageRequest::getSubChannelId() const {
    return m_sub_channel_id;
}
void OAISendChannelMessageRequest::setSubChannelId(const QString &sub_channel_id) {
    m_sub_channel_id = sub_channel_id;
    m_sub_channel_id_isSet = true;
}

bool OAISendChannelMessageRequest::is_sub_channel_id_Set() const{
    return m_sub_channel_id_isSet;
}

bool OAISendChannelMessageRequest::is_sub_channel_id_Valid() const{
    return m_sub_channel_id_isValid;
}

QString OAISendChannelMessageRequest::getContentType() const {
    return m_content_type;
}
void OAISendChannelMessageRequest::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAISendChannelMessageRequest::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAISendChannelMessageRequest::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QList OAISendChannelMessageRequest::getTarget() const {
    return m_target;
}
void OAISendChannelMessageRequest::setTarget(const QList &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAISendChannelMessageRequest::is_target_Set() const{
    return m_target_isSet;
}

bool OAISendChannelMessageRequest::is_target_Valid() const{
    return m_target_isValid;
}

bool OAISendChannelMessageRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_persistence.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_notification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendChannelMessageRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_content_isValid && m_type_isValid && m_persistence_isValid && m_client_request_token_isValid && true;
}

} // namespace OpenAPI
