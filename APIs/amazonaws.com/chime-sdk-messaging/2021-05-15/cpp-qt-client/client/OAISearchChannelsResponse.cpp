/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchChannelsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchChannelsResponse::OAISearchChannelsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchChannelsResponse::OAISearchChannelsResponse() {
    this->initializeModel();
}

OAISearchChannelsResponse::~OAISearchChannelsResponse() {}

void OAISearchChannelsResponse::initializeModel() {

    m_channels_isSet = false;
    m_channels_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAISearchChannelsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchChannelsResponse::fromJsonObject(QJsonObject json) {

    m_channels_isValid = ::OpenAPI::fromJsonValue(m_channels, json[QString("Channels")]);
    m_channels_isSet = !json[QString("Channels")].isNull() && m_channels_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAISearchChannelsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchChannelsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_channels.isSet()) {
        obj.insert(QString("Channels"), ::OpenAPI::toJsonValue(m_channels));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAISearchChannelsResponse::getChannels() const {
    return m_channels;
}
void OAISearchChannelsResponse::setChannels(const QList &channels) {
    m_channels = channels;
    m_channels_isSet = true;
}

bool OAISearchChannelsResponse::is_channels_Set() const{
    return m_channels_isSet;
}

bool OAISearchChannelsResponse::is_channels_Valid() const{
    return m_channels_isValid;
}

QString OAISearchChannelsResponse::getNextToken() const {
    return m_next_token;
}
void OAISearchChannelsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAISearchChannelsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAISearchChannelsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAISearchChannelsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchChannelsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
