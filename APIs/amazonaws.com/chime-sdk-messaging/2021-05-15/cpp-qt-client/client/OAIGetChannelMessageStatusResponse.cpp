/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetChannelMessageStatusResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetChannelMessageStatusResponse::OAIGetChannelMessageStatusResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetChannelMessageStatusResponse::OAIGetChannelMessageStatusResponse() {
    this->initializeModel();
}

OAIGetChannelMessageStatusResponse::~OAIGetChannelMessageStatusResponse() {}

void OAIGetChannelMessageStatusResponse::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIGetChannelMessageStatusResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetChannelMessageStatusResponse::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIGetChannelMessageStatusResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetChannelMessageStatusResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIGetChannelMessageStatusResponse_Status OAIGetChannelMessageStatusResponse::getStatus() const {
    return m_status;
}
void OAIGetChannelMessageStatusResponse::setStatus(const OAIGetChannelMessageStatusResponse_Status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetChannelMessageStatusResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetChannelMessageStatusResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIGetChannelMessageStatusResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetChannelMessageStatusResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
