/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutMessagingStreamingConfigurationsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutMessagingStreamingConfigurationsRequest::OAIPutMessagingStreamingConfigurationsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutMessagingStreamingConfigurationsRequest::OAIPutMessagingStreamingConfigurationsRequest() {
    this->initializeModel();
}

OAIPutMessagingStreamingConfigurationsRequest::~OAIPutMessagingStreamingConfigurationsRequest() {}

void OAIPutMessagingStreamingConfigurationsRequest::initializeModel() {

    m_streaming_configurations_isSet = false;
    m_streaming_configurations_isValid = false;
}

void OAIPutMessagingStreamingConfigurationsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutMessagingStreamingConfigurationsRequest::fromJsonObject(QJsonObject json) {

    m_streaming_configurations_isValid = ::OpenAPI::fromJsonValue(m_streaming_configurations, json[QString("StreamingConfigurations")]);
    m_streaming_configurations_isSet = !json[QString("StreamingConfigurations")].isNull() && m_streaming_configurations_isValid;
}

QString OAIPutMessagingStreamingConfigurationsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutMessagingStreamingConfigurationsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_streaming_configurations.isSet()) {
        obj.insert(QString("StreamingConfigurations"), ::OpenAPI::toJsonValue(m_streaming_configurations));
    }
    return obj;
}

QList OAIPutMessagingStreamingConfigurationsRequest::getStreamingConfigurations() const {
    return m_streaming_configurations;
}
void OAIPutMessagingStreamingConfigurationsRequest::setStreamingConfigurations(const QList &streaming_configurations) {
    m_streaming_configurations = streaming_configurations;
    m_streaming_configurations_isSet = true;
}

bool OAIPutMessagingStreamingConfigurationsRequest::is_streaming_configurations_Set() const{
    return m_streaming_configurations_isSet;
}

bool OAIPutMessagingStreamingConfigurationsRequest::is_streaming_configurations_Valid() const{
    return m_streaming_configurations_isValid;
}

bool OAIPutMessagingStreamingConfigurationsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_streaming_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutMessagingStreamingConfigurationsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_streaming_configurations_isValid && true;
}

} // namespace OpenAPI
