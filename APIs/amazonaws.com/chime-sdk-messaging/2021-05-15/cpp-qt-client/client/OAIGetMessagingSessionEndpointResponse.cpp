/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetMessagingSessionEndpointResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetMessagingSessionEndpointResponse::OAIGetMessagingSessionEndpointResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetMessagingSessionEndpointResponse::OAIGetMessagingSessionEndpointResponse() {
    this->initializeModel();
}

OAIGetMessagingSessionEndpointResponse::~OAIGetMessagingSessionEndpointResponse() {}

void OAIGetMessagingSessionEndpointResponse::initializeModel() {

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;
}

void OAIGetMessagingSessionEndpointResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetMessagingSessionEndpointResponse::fromJsonObject(QJsonObject json) {

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("Endpoint")]);
    m_endpoint_isSet = !json[QString("Endpoint")].isNull() && m_endpoint_isValid;
}

QString OAIGetMessagingSessionEndpointResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetMessagingSessionEndpointResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoint.isSet()) {
        obj.insert(QString("Endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    return obj;
}

OAIGetMessagingSessionEndpointResponse_Endpoint OAIGetMessagingSessionEndpointResponse::getEndpoint() const {
    return m_endpoint;
}
void OAIGetMessagingSessionEndpointResponse::setEndpoint(const OAIGetMessagingSessionEndpointResponse_Endpoint &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIGetMessagingSessionEndpointResponse::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIGetMessagingSessionEndpointResponse::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

bool OAIGetMessagingSessionEndpointResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoint.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetMessagingSessionEndpointResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
