/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPushNotificationConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPushNotificationConfiguration::OAIPushNotificationConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPushNotificationConfiguration::OAIPushNotificationConfiguration() {
    this->initializeModel();
}

OAIPushNotificationConfiguration::~OAIPushNotificationConfiguration() {}

void OAIPushNotificationConfiguration::initializeModel() {

    m_title_isSet = false;
    m_title_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPushNotificationConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPushNotificationConfiguration::fromJsonObject(QJsonObject json) {

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("Body")]);
    m_body_isSet = !json[QString("Body")].isNull() && m_body_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIPushNotificationConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPushNotificationConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_body_isSet) {
        obj.insert(QString("Body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIPushNotificationConfiguration::getTitle() const {
    return m_title;
}
void OAIPushNotificationConfiguration::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPushNotificationConfiguration::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPushNotificationConfiguration::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIPushNotificationConfiguration::getBody() const {
    return m_body;
}
void OAIPushNotificationConfiguration::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIPushNotificationConfiguration::is_body_Set() const{
    return m_body_isSet;
}

bool OAIPushNotificationConfiguration::is_body_Valid() const{
    return m_body_isValid;
}

OAIPushNotificationType OAIPushNotificationConfiguration::getType() const {
    return m_type;
}
void OAIPushNotificationConfiguration::setType(const OAIPushNotificationType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPushNotificationConfiguration::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPushNotificationConfiguration::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPushNotificationConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPushNotificationConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
