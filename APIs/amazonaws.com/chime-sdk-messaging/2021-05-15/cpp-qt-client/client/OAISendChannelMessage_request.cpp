/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendChannelMessage_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendChannelMessage_request::OAISendChannelMessage_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendChannelMessage_request::OAISendChannelMessage_request() {
    this->initializeModel();
}

OAISendChannelMessage_request::~OAISendChannelMessage_request() {}

void OAISendChannelMessage_request::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_persistence_isSet = false;
    m_persistence_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_push_notification_isSet = false;
    m_push_notification_isValid = false;

    m_message_attributes_isSet = false;
    m_message_attributes_isValid = false;

    m_sub_channel_id_isSet = false;
    m_sub_channel_id_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;
}

void OAISendChannelMessage_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendChannelMessage_request::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("Content")]);
    m_content_isSet = !json[QString("Content")].isNull() && m_content_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_persistence_isValid = ::OpenAPI::fromJsonValue(m_persistence, json[QString("Persistence")]);
    m_persistence_isSet = !json[QString("Persistence")].isNull() && m_persistence_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("Metadata")]);
    m_metadata_isSet = !json[QString("Metadata")].isNull() && m_metadata_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;

    m_push_notification_isValid = ::OpenAPI::fromJsonValue(m_push_notification, json[QString("PushNotification")]);
    m_push_notification_isSet = !json[QString("PushNotification")].isNull() && m_push_notification_isValid;

    m_message_attributes_isValid = ::OpenAPI::fromJsonValue(m_message_attributes, json[QString("MessageAttributes")]);
    m_message_attributes_isSet = !json[QString("MessageAttributes")].isNull() && m_message_attributes_isValid;

    m_sub_channel_id_isValid = ::OpenAPI::fromJsonValue(m_sub_channel_id, json[QString("SubChannelId")]);
    m_sub_channel_id_isSet = !json[QString("SubChannelId")].isNull() && m_sub_channel_id_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("ContentType")]);
    m_content_type_isSet = !json[QString("ContentType")].isNull() && m_content_type_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("Target")]);
    m_target_isSet = !json[QString("Target")].isNull() && m_target_isValid;
}

QString OAISendChannelMessage_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendChannelMessage_request::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("Content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_persistence_isSet) {
        obj.insert(QString("Persistence"), ::OpenAPI::toJsonValue(m_persistence));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("Metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_push_notification.isSet()) {
        obj.insert(QString("PushNotification"), ::OpenAPI::toJsonValue(m_push_notification));
    }
    if (m_message_attributes.size() > 0) {
        obj.insert(QString("MessageAttributes"), ::OpenAPI::toJsonValue(m_message_attributes));
    }
    if (m_sub_channel_id_isSet) {
        obj.insert(QString("SubChannelId"), ::OpenAPI::toJsonValue(m_sub_channel_id));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("ContentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_target.size() > 0) {
        obj.insert(QString("Target"), ::OpenAPI::toJsonValue(m_target));
    }
    return obj;
}

QString OAISendChannelMessage_request::getContent() const {
    return m_content;
}
void OAISendChannelMessage_request::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAISendChannelMessage_request::is_content_Set() const{
    return m_content_isSet;
}

bool OAISendChannelMessage_request::is_content_Valid() const{
    return m_content_isValid;
}

QString OAISendChannelMessage_request::getType() const {
    return m_type;
}
void OAISendChannelMessage_request::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISendChannelMessage_request::is_type_Set() const{
    return m_type_isSet;
}

bool OAISendChannelMessage_request::is_type_Valid() const{
    return m_type_isValid;
}

QString OAISendChannelMessage_request::getPersistence() const {
    return m_persistence;
}
void OAISendChannelMessage_request::setPersistence(const QString &persistence) {
    m_persistence = persistence;
    m_persistence_isSet = true;
}

bool OAISendChannelMessage_request::is_persistence_Set() const{
    return m_persistence_isSet;
}

bool OAISendChannelMessage_request::is_persistence_Valid() const{
    return m_persistence_isValid;
}

QString OAISendChannelMessage_request::getMetadata() const {
    return m_metadata;
}
void OAISendChannelMessage_request::setMetadata(const QString &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAISendChannelMessage_request::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAISendChannelMessage_request::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAISendChannelMessage_request::getClientRequestToken() const {
    return m_client_request_token;
}
void OAISendChannelMessage_request::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAISendChannelMessage_request::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAISendChannelMessage_request::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

OAISendChannelMessage_request_PushNotification OAISendChannelMessage_request::getPushNotification() const {
    return m_push_notification;
}
void OAISendChannelMessage_request::setPushNotification(const OAISendChannelMessage_request_PushNotification &push_notification) {
    m_push_notification = push_notification;
    m_push_notification_isSet = true;
}

bool OAISendChannelMessage_request::is_push_notification_Set() const{
    return m_push_notification_isSet;
}

bool OAISendChannelMessage_request::is_push_notification_Valid() const{
    return m_push_notification_isValid;
}

QMap<QString, OAIMessageAttributeValue> OAISendChannelMessage_request::getMessageAttributes() const {
    return m_message_attributes;
}
void OAISendChannelMessage_request::setMessageAttributes(const QMap<QString, OAIMessageAttributeValue> &message_attributes) {
    m_message_attributes = message_attributes;
    m_message_attributes_isSet = true;
}

bool OAISendChannelMessage_request::is_message_attributes_Set() const{
    return m_message_attributes_isSet;
}

bool OAISendChannelMessage_request::is_message_attributes_Valid() const{
    return m_message_attributes_isValid;
}

QString OAISendChannelMessage_request::getSubChannelId() const {
    return m_sub_channel_id;
}
void OAISendChannelMessage_request::setSubChannelId(const QString &sub_channel_id) {
    m_sub_channel_id = sub_channel_id;
    m_sub_channel_id_isSet = true;
}

bool OAISendChannelMessage_request::is_sub_channel_id_Set() const{
    return m_sub_channel_id_isSet;
}

bool OAISendChannelMessage_request::is_sub_channel_id_Valid() const{
    return m_sub_channel_id_isValid;
}

QString OAISendChannelMessage_request::getContentType() const {
    return m_content_type;
}
void OAISendChannelMessage_request::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAISendChannelMessage_request::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAISendChannelMessage_request::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QList<OAITarget> OAISendChannelMessage_request::getTarget() const {
    return m_target;
}
void OAISendChannelMessage_request::setTarget(const QList<OAITarget> &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAISendChannelMessage_request::is_target_Set() const{
    return m_target_isSet;
}

bool OAISendChannelMessage_request::is_target_Valid() const{
    return m_target_isValid;
}

bool OAISendChannelMessage_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_persistence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_notification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendChannelMessage_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_content_isValid && m_type_isValid && m_persistence_isValid && m_client_request_token_isValid && true;
}

} // namespace OpenAPI
