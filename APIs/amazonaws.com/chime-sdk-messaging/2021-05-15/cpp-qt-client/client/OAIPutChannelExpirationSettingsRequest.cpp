/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutChannelExpirationSettingsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutChannelExpirationSettingsRequest::OAIPutChannelExpirationSettingsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutChannelExpirationSettingsRequest::OAIPutChannelExpirationSettingsRequest() {
    this->initializeModel();
}

OAIPutChannelExpirationSettingsRequest::~OAIPutChannelExpirationSettingsRequest() {}

void OAIPutChannelExpirationSettingsRequest::initializeModel() {

    m_expiration_settings_isSet = false;
    m_expiration_settings_isValid = false;
}

void OAIPutChannelExpirationSettingsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutChannelExpirationSettingsRequest::fromJsonObject(QJsonObject json) {

    m_expiration_settings_isValid = ::OpenAPI::fromJsonValue(m_expiration_settings, json[QString("ExpirationSettings")]);
    m_expiration_settings_isSet = !json[QString("ExpirationSettings")].isNull() && m_expiration_settings_isValid;
}

QString OAIPutChannelExpirationSettingsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutChannelExpirationSettingsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_expiration_settings.isSet()) {
        obj.insert(QString("ExpirationSettings"), ::OpenAPI::toJsonValue(m_expiration_settings));
    }
    return obj;
}

OAIPutChannelExpirationSettingsResponse_ExpirationSettings OAIPutChannelExpirationSettingsRequest::getExpirationSettings() const {
    return m_expiration_settings;
}
void OAIPutChannelExpirationSettingsRequest::setExpirationSettings(const OAIPutChannelExpirationSettingsResponse_ExpirationSettings &expiration_settings) {
    m_expiration_settings = expiration_settings;
    m_expiration_settings_isSet = true;
}

bool OAIPutChannelExpirationSettingsRequest::is_expiration_settings_Set() const{
    return m_expiration_settings_isSet;
}

bool OAIPutChannelExpirationSettingsRequest::is_expiration_settings_Valid() const{
    return m_expiration_settings_isValid;
}

bool OAIPutChannelExpirationSettingsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expiration_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutChannelExpirationSettingsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
