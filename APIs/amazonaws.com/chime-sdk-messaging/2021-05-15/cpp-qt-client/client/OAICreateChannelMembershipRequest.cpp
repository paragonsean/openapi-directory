/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateChannelMembershipRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateChannelMembershipRequest::OAICreateChannelMembershipRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateChannelMembershipRequest::OAICreateChannelMembershipRequest() {
    this->initializeModel();
}

OAICreateChannelMembershipRequest::~OAICreateChannelMembershipRequest() {}

void OAICreateChannelMembershipRequest::initializeModel() {

    m_member_arn_isSet = false;
    m_member_arn_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_sub_channel_id_isSet = false;
    m_sub_channel_id_isValid = false;
}

void OAICreateChannelMembershipRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateChannelMembershipRequest::fromJsonObject(QJsonObject json) {

    m_member_arn_isValid = ::OpenAPI::fromJsonValue(m_member_arn, json[QString("MemberArn")]);
    m_member_arn_isSet = !json[QString("MemberArn")].isNull() && m_member_arn_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_sub_channel_id_isValid = ::OpenAPI::fromJsonValue(m_sub_channel_id, json[QString("SubChannelId")]);
    m_sub_channel_id_isSet = !json[QString("SubChannelId")].isNull() && m_sub_channel_id_isValid;
}

QString OAICreateChannelMembershipRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateChannelMembershipRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_member_arn_isSet) {
        obj.insert(QString("MemberArn"), ::OpenAPI::toJsonValue(m_member_arn));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_sub_channel_id_isSet) {
        obj.insert(QString("SubChannelId"), ::OpenAPI::toJsonValue(m_sub_channel_id));
    }
    return obj;
}

QString OAICreateChannelMembershipRequest::getMemberArn() const {
    return m_member_arn;
}
void OAICreateChannelMembershipRequest::setMemberArn(const QString &member_arn) {
    m_member_arn = member_arn;
    m_member_arn_isSet = true;
}

bool OAICreateChannelMembershipRequest::is_member_arn_Set() const{
    return m_member_arn_isSet;
}

bool OAICreateChannelMembershipRequest::is_member_arn_Valid() const{
    return m_member_arn_isValid;
}

OAIChannelMembershipType OAICreateChannelMembershipRequest::getType() const {
    return m_type;
}
void OAICreateChannelMembershipRequest::setType(const OAIChannelMembershipType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateChannelMembershipRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateChannelMembershipRequest::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICreateChannelMembershipRequest::getSubChannelId() const {
    return m_sub_channel_id;
}
void OAICreateChannelMembershipRequest::setSubChannelId(const QString &sub_channel_id) {
    m_sub_channel_id = sub_channel_id;
    m_sub_channel_id_isSet = true;
}

bool OAICreateChannelMembershipRequest::is_sub_channel_id_Set() const{
    return m_sub_channel_id_isSet;
}

bool OAICreateChannelMembershipRequest::is_sub_channel_id_Valid() const{
    return m_sub_channel_id_isValid;
}

bool OAICreateChannelMembershipRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_member_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateChannelMembershipRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_member_arn_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
