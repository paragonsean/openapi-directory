/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateChannelModeratorRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateChannelModeratorRequest::OAICreateChannelModeratorRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateChannelModeratorRequest::OAICreateChannelModeratorRequest() {
    this->initializeModel();
}

OAICreateChannelModeratorRequest::~OAICreateChannelModeratorRequest() {}

void OAICreateChannelModeratorRequest::initializeModel() {

    m_channel_moderator_arn_isSet = false;
    m_channel_moderator_arn_isValid = false;
}

void OAICreateChannelModeratorRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateChannelModeratorRequest::fromJsonObject(QJsonObject json) {

    m_channel_moderator_arn_isValid = ::OpenAPI::fromJsonValue(m_channel_moderator_arn, json[QString("ChannelModeratorArn")]);
    m_channel_moderator_arn_isSet = !json[QString("ChannelModeratorArn")].isNull() && m_channel_moderator_arn_isValid;
}

QString OAICreateChannelModeratorRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateChannelModeratorRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_moderator_arn_isSet) {
        obj.insert(QString("ChannelModeratorArn"), ::OpenAPI::toJsonValue(m_channel_moderator_arn));
    }
    return obj;
}

QString OAICreateChannelModeratorRequest::getChannelModeratorArn() const {
    return m_channel_moderator_arn;
}
void OAICreateChannelModeratorRequest::setChannelModeratorArn(const QString &channel_moderator_arn) {
    m_channel_moderator_arn = channel_moderator_arn;
    m_channel_moderator_arn_isSet = true;
}

bool OAICreateChannelModeratorRequest::is_channel_moderator_arn_Set() const{
    return m_channel_moderator_arn_isSet;
}

bool OAICreateChannelModeratorRequest::is_channel_moderator_arn_Valid() const{
    return m_channel_moderator_arn_isValid;
}

bool OAICreateChannelModeratorRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_moderator_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateChannelModeratorRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_channel_moderator_arn_isValid && true;
}

} // namespace OpenAPI
