/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchCreateChannelMembership_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchCreateChannelMembership_request::OAIBatchCreateChannelMembership_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchCreateChannelMembership_request::OAIBatchCreateChannelMembership_request() {
    this->initializeModel();
}

OAIBatchCreateChannelMembership_request::~OAIBatchCreateChannelMembership_request() {}

void OAIBatchCreateChannelMembership_request::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_member_arns_isSet = false;
    m_member_arns_isValid = false;

    m_sub_channel_id_isSet = false;
    m_sub_channel_id_isValid = false;
}

void OAIBatchCreateChannelMembership_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchCreateChannelMembership_request::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_member_arns_isValid = ::OpenAPI::fromJsonValue(m_member_arns, json[QString("MemberArns")]);
    m_member_arns_isSet = !json[QString("MemberArns")].isNull() && m_member_arns_isValid;

    m_sub_channel_id_isValid = ::OpenAPI::fromJsonValue(m_sub_channel_id, json[QString("SubChannelId")]);
    m_sub_channel_id_isSet = !json[QString("SubChannelId")].isNull() && m_sub_channel_id_isValid;
}

QString OAIBatchCreateChannelMembership_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchCreateChannelMembership_request::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_member_arns.size() > 0) {
        obj.insert(QString("MemberArns"), ::OpenAPI::toJsonValue(m_member_arns));
    }
    if (m_sub_channel_id_isSet) {
        obj.insert(QString("SubChannelId"), ::OpenAPI::toJsonValue(m_sub_channel_id));
    }
    return obj;
}

QString OAIBatchCreateChannelMembership_request::getType() const {
    return m_type;
}
void OAIBatchCreateChannelMembership_request::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBatchCreateChannelMembership_request::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBatchCreateChannelMembership_request::is_type_Valid() const{
    return m_type_isValid;
}

QList<QString> OAIBatchCreateChannelMembership_request::getMemberArns() const {
    return m_member_arns;
}
void OAIBatchCreateChannelMembership_request::setMemberArns(const QList<QString> &member_arns) {
    m_member_arns = member_arns;
    m_member_arns_isSet = true;
}

bool OAIBatchCreateChannelMembership_request::is_member_arns_Set() const{
    return m_member_arns_isSet;
}

bool OAIBatchCreateChannelMembership_request::is_member_arns_Valid() const{
    return m_member_arns_isValid;
}

QString OAIBatchCreateChannelMembership_request::getSubChannelId() const {
    return m_sub_channel_id;
}
void OAIBatchCreateChannelMembership_request::setSubChannelId(const QString &sub_channel_id) {
    m_sub_channel_id = sub_channel_id;
    m_sub_channel_id_isSet = true;
}

bool OAIBatchCreateChannelMembership_request::is_sub_channel_id_Set() const{
    return m_sub_channel_id_isSet;
}

bool OAIBatchCreateChannelMembership_request::is_sub_channel_id_Valid() const{
    return m_sub_channel_id_isValid;
}

bool OAIBatchCreateChannelMembership_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_arns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchCreateChannelMembership_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_member_arns_isValid && true;
}

} // namespace OpenAPI
