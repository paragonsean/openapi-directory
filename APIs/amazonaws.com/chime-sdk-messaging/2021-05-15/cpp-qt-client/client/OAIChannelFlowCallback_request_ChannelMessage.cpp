/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelFlowCallback_request_ChannelMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelFlowCallback_request_ChannelMessage::OAIChannelFlowCallback_request_ChannelMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelFlowCallback_request_ChannelMessage::OAIChannelFlowCallback_request_ChannelMessage() {
    this->initializeModel();
}

OAIChannelFlowCallback_request_ChannelMessage::~OAIChannelFlowCallback_request_ChannelMessage() {}

void OAIChannelFlowCallback_request_ChannelMessage::initializeModel() {

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_push_notification_isSet = false;
    m_push_notification_isValid = false;

    m_message_attributes_isSet = false;
    m_message_attributes_isValid = false;

    m_sub_channel_id_isSet = false;
    m_sub_channel_id_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;
}

void OAIChannelFlowCallback_request_ChannelMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelFlowCallback_request_ChannelMessage::fromJsonObject(QJsonObject json) {

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("MessageId")]);
    m_message_id_isSet = !json[QString("MessageId")].isNull() && m_message_id_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("Content")]);
    m_content_isSet = !json[QString("Content")].isNull() && m_content_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("Metadata")]);
    m_metadata_isSet = !json[QString("Metadata")].isNull() && m_metadata_isValid;

    m_push_notification_isValid = ::OpenAPI::fromJsonValue(m_push_notification, json[QString("PushNotification")]);
    m_push_notification_isSet = !json[QString("PushNotification")].isNull() && m_push_notification_isValid;

    m_message_attributes_isValid = ::OpenAPI::fromJsonValue(m_message_attributes, json[QString("MessageAttributes")]);
    m_message_attributes_isSet = !json[QString("MessageAttributes")].isNull() && m_message_attributes_isValid;

    m_sub_channel_id_isValid = ::OpenAPI::fromJsonValue(m_sub_channel_id, json[QString("SubChannelId")]);
    m_sub_channel_id_isSet = !json[QString("SubChannelId")].isNull() && m_sub_channel_id_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("ContentType")]);
    m_content_type_isSet = !json[QString("ContentType")].isNull() && m_content_type_isValid;
}

QString OAIChannelFlowCallback_request_ChannelMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelFlowCallback_request_ChannelMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_message_id_isSet) {
        obj.insert(QString("MessageId"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_content_isSet) {
        obj.insert(QString("Content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("Metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_push_notification.isSet()) {
        obj.insert(QString("PushNotification"), ::OpenAPI::toJsonValue(m_push_notification));
    }
    if (m_message_attributes.isSet()) {
        obj.insert(QString("MessageAttributes"), ::OpenAPI::toJsonValue(m_message_attributes));
    }
    if (m_sub_channel_id_isSet) {
        obj.insert(QString("SubChannelId"), ::OpenAPI::toJsonValue(m_sub_channel_id));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("ContentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    return obj;
}

QString OAIChannelFlowCallback_request_ChannelMessage::getMessageId() const {
    return m_message_id;
}
void OAIChannelFlowCallback_request_ChannelMessage::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIChannelFlowCallback_request_ChannelMessage::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIChannelFlowCallback_request_ChannelMessage::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QString OAIChannelFlowCallback_request_ChannelMessage::getContent() const {
    return m_content;
}
void OAIChannelFlowCallback_request_ChannelMessage::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIChannelFlowCallback_request_ChannelMessage::is_content_Set() const{
    return m_content_isSet;
}

bool OAIChannelFlowCallback_request_ChannelMessage::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIChannelFlowCallback_request_ChannelMessage::getMetadata() const {
    return m_metadata;
}
void OAIChannelFlowCallback_request_ChannelMessage::setMetadata(const QString &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIChannelFlowCallback_request_ChannelMessage::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIChannelFlowCallback_request_ChannelMessage::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIChannelFlowCallback_request_ChannelMessage_PushNotification OAIChannelFlowCallback_request_ChannelMessage::getPushNotification() const {
    return m_push_notification;
}
void OAIChannelFlowCallback_request_ChannelMessage::setPushNotification(const OAIChannelFlowCallback_request_ChannelMessage_PushNotification &push_notification) {
    m_push_notification = push_notification;
    m_push_notification_isSet = true;
}

bool OAIChannelFlowCallback_request_ChannelMessage::is_push_notification_Set() const{
    return m_push_notification_isSet;
}

bool OAIChannelFlowCallback_request_ChannelMessage::is_push_notification_Valid() const{
    return m_push_notification_isValid;
}

QMap OAIChannelFlowCallback_request_ChannelMessage::getMessageAttributes() const {
    return m_message_attributes;
}
void OAIChannelFlowCallback_request_ChannelMessage::setMessageAttributes(const QMap &message_attributes) {
    m_message_attributes = message_attributes;
    m_message_attributes_isSet = true;
}

bool OAIChannelFlowCallback_request_ChannelMessage::is_message_attributes_Set() const{
    return m_message_attributes_isSet;
}

bool OAIChannelFlowCallback_request_ChannelMessage::is_message_attributes_Valid() const{
    return m_message_attributes_isValid;
}

QString OAIChannelFlowCallback_request_ChannelMessage::getSubChannelId() const {
    return m_sub_channel_id;
}
void OAIChannelFlowCallback_request_ChannelMessage::setSubChannelId(const QString &sub_channel_id) {
    m_sub_channel_id = sub_channel_id;
    m_sub_channel_id_isSet = true;
}

bool OAIChannelFlowCallback_request_ChannelMessage::is_sub_channel_id_Set() const{
    return m_sub_channel_id_isSet;
}

bool OAIChannelFlowCallback_request_ChannelMessage::is_sub_channel_id_Valid() const{
    return m_sub_channel_id_isValid;
}

QString OAIChannelFlowCallback_request_ChannelMessage::getContentType() const {
    return m_content_type;
}
void OAIChannelFlowCallback_request_ChannelMessage::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIChannelFlowCallback_request_ChannelMessage::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIChannelFlowCallback_request_ChannelMessage::is_content_type_Valid() const{
    return m_content_type_isValid;
}

bool OAIChannelFlowCallback_request_ChannelMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_notification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelFlowCallback_request_ChannelMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
