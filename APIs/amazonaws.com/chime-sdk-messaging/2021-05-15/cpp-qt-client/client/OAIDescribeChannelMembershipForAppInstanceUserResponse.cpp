/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeChannelMembershipForAppInstanceUserResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeChannelMembershipForAppInstanceUserResponse::OAIDescribeChannelMembershipForAppInstanceUserResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeChannelMembershipForAppInstanceUserResponse::OAIDescribeChannelMembershipForAppInstanceUserResponse() {
    this->initializeModel();
}

OAIDescribeChannelMembershipForAppInstanceUserResponse::~OAIDescribeChannelMembershipForAppInstanceUserResponse() {}

void OAIDescribeChannelMembershipForAppInstanceUserResponse::initializeModel() {

    m_channel_membership_isSet = false;
    m_channel_membership_isValid = false;
}

void OAIDescribeChannelMembershipForAppInstanceUserResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeChannelMembershipForAppInstanceUserResponse::fromJsonObject(QJsonObject json) {

    m_channel_membership_isValid = ::OpenAPI::fromJsonValue(m_channel_membership, json[QString("ChannelMembership")]);
    m_channel_membership_isSet = !json[QString("ChannelMembership")].isNull() && m_channel_membership_isValid;
}

QString OAIDescribeChannelMembershipForAppInstanceUserResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeChannelMembershipForAppInstanceUserResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_membership.isSet()) {
        obj.insert(QString("ChannelMembership"), ::OpenAPI::toJsonValue(m_channel_membership));
    }
    return obj;
}

OAIDescribeChannelMembershipForAppInstanceUserResponse_ChannelMembership OAIDescribeChannelMembershipForAppInstanceUserResponse::getChannelMembership() const {
    return m_channel_membership;
}
void OAIDescribeChannelMembershipForAppInstanceUserResponse::setChannelMembership(const OAIDescribeChannelMembershipForAppInstanceUserResponse_ChannelMembership &channel_membership) {
    m_channel_membership = channel_membership;
    m_channel_membership_isSet = true;
}

bool OAIDescribeChannelMembershipForAppInstanceUserResponse::is_channel_membership_Set() const{
    return m_channel_membership_isSet;
}

bool OAIDescribeChannelMembershipForAppInstanceUserResponse::is_channel_membership_Valid() const{
    return m_channel_membership_isValid;
}

bool OAIDescribeChannelMembershipForAppInstanceUserResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_membership.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeChannelMembershipForAppInstanceUserResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
