/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeChannelFlowResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeChannelFlowResponse::OAIDescribeChannelFlowResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeChannelFlowResponse::OAIDescribeChannelFlowResponse() {
    this->initializeModel();
}

OAIDescribeChannelFlowResponse::~OAIDescribeChannelFlowResponse() {}

void OAIDescribeChannelFlowResponse::initializeModel() {

    m_channel_flow_isSet = false;
    m_channel_flow_isValid = false;
}

void OAIDescribeChannelFlowResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeChannelFlowResponse::fromJsonObject(QJsonObject json) {

    m_channel_flow_isValid = ::OpenAPI::fromJsonValue(m_channel_flow, json[QString("ChannelFlow")]);
    m_channel_flow_isSet = !json[QString("ChannelFlow")].isNull() && m_channel_flow_isValid;
}

QString OAIDescribeChannelFlowResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeChannelFlowResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_flow.isSet()) {
        obj.insert(QString("ChannelFlow"), ::OpenAPI::toJsonValue(m_channel_flow));
    }
    return obj;
}

OAIDescribeChannelFlowResponse_ChannelFlow OAIDescribeChannelFlowResponse::getChannelFlow() const {
    return m_channel_flow;
}
void OAIDescribeChannelFlowResponse::setChannelFlow(const OAIDescribeChannelFlowResponse_ChannelFlow &channel_flow) {
    m_channel_flow = channel_flow;
    m_channel_flow_isSet = true;
}

bool OAIDescribeChannelFlowResponse::is_channel_flow_Set() const{
    return m_channel_flow_isSet;
}

bool OAIDescribeChannelFlowResponse::is_channel_flow_Valid() const{
    return m_channel_flow_isValid;
}

bool OAIDescribeChannelFlowResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_flow.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeChannelFlowResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
