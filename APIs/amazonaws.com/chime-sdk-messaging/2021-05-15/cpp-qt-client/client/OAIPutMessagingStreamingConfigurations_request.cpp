/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutMessagingStreamingConfigurations_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutMessagingStreamingConfigurations_request::OAIPutMessagingStreamingConfigurations_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutMessagingStreamingConfigurations_request::OAIPutMessagingStreamingConfigurations_request() {
    this->initializeModel();
}

OAIPutMessagingStreamingConfigurations_request::~OAIPutMessagingStreamingConfigurations_request() {}

void OAIPutMessagingStreamingConfigurations_request::initializeModel() {

    m_streaming_configurations_isSet = false;
    m_streaming_configurations_isValid = false;
}

void OAIPutMessagingStreamingConfigurations_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutMessagingStreamingConfigurations_request::fromJsonObject(QJsonObject json) {

    m_streaming_configurations_isValid = ::OpenAPI::fromJsonValue(m_streaming_configurations, json[QString("StreamingConfigurations")]);
    m_streaming_configurations_isSet = !json[QString("StreamingConfigurations")].isNull() && m_streaming_configurations_isValid;
}

QString OAIPutMessagingStreamingConfigurations_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutMessagingStreamingConfigurations_request::asJsonObject() const {
    QJsonObject obj;
    if (m_streaming_configurations.size() > 0) {
        obj.insert(QString("StreamingConfigurations"), ::OpenAPI::toJsonValue(m_streaming_configurations));
    }
    return obj;
}

QList<OAIStreamingConfiguration> OAIPutMessagingStreamingConfigurations_request::getStreamingConfigurations() const {
    return m_streaming_configurations;
}
void OAIPutMessagingStreamingConfigurations_request::setStreamingConfigurations(const QList<OAIStreamingConfiguration> &streaming_configurations) {
    m_streaming_configurations = streaming_configurations;
    m_streaming_configurations_isSet = true;
}

bool OAIPutMessagingStreamingConfigurations_request::is_streaming_configurations_Set() const{
    return m_streaming_configurations_isSet;
}

bool OAIPutMessagingStreamingConfigurations_request::is_streaming_configurations_Valid() const{
    return m_streaming_configurations_isValid;
}

bool OAIPutMessagingStreamingConfigurations_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_streaming_configurations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutMessagingStreamingConfigurations_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_streaming_configurations_isValid && true;
}

} // namespace OpenAPI
