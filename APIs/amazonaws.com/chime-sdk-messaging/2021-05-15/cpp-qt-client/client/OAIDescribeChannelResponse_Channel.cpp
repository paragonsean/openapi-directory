/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeChannelResponse_Channel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeChannelResponse_Channel::OAIDescribeChannelResponse_Channel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeChannelResponse_Channel::OAIDescribeChannelResponse_Channel() {
    this->initializeModel();
}

OAIDescribeChannelResponse_Channel::~OAIDescribeChannelResponse_Channel() {}

void OAIDescribeChannelResponse_Channel::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_channel_arn_isSet = false;
    m_channel_arn_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_privacy_isSet = false;
    m_privacy_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_timestamp_isSet = false;
    m_created_timestamp_isValid = false;

    m_last_message_timestamp_isSet = false;
    m_last_message_timestamp_isValid = false;

    m_last_updated_timestamp_isSet = false;
    m_last_updated_timestamp_isValid = false;

    m_channel_flow_arn_isSet = false;
    m_channel_flow_arn_isValid = false;

    m_elastic_channel_configuration_isSet = false;
    m_elastic_channel_configuration_isValid = false;

    m_expiration_settings_isSet = false;
    m_expiration_settings_isValid = false;
}

void OAIDescribeChannelResponse_Channel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeChannelResponse_Channel::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_channel_arn_isValid = ::OpenAPI::fromJsonValue(m_channel_arn, json[QString("ChannelArn")]);
    m_channel_arn_isSet = !json[QString("ChannelArn")].isNull() && m_channel_arn_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("Mode")]);
    m_mode_isSet = !json[QString("Mode")].isNull() && m_mode_isValid;

    m_privacy_isValid = ::OpenAPI::fromJsonValue(m_privacy, json[QString("Privacy")]);
    m_privacy_isSet = !json[QString("Privacy")].isNull() && m_privacy_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("Metadata")]);
    m_metadata_isSet = !json[QString("Metadata")].isNull() && m_metadata_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("CreatedBy")]);
    m_created_by_isSet = !json[QString("CreatedBy")].isNull() && m_created_by_isValid;

    m_created_timestamp_isValid = ::OpenAPI::fromJsonValue(m_created_timestamp, json[QString("CreatedTimestamp")]);
    m_created_timestamp_isSet = !json[QString("CreatedTimestamp")].isNull() && m_created_timestamp_isValid;

    m_last_message_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_message_timestamp, json[QString("LastMessageTimestamp")]);
    m_last_message_timestamp_isSet = !json[QString("LastMessageTimestamp")].isNull() && m_last_message_timestamp_isValid;

    m_last_updated_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_updated_timestamp, json[QString("LastUpdatedTimestamp")]);
    m_last_updated_timestamp_isSet = !json[QString("LastUpdatedTimestamp")].isNull() && m_last_updated_timestamp_isValid;

    m_channel_flow_arn_isValid = ::OpenAPI::fromJsonValue(m_channel_flow_arn, json[QString("ChannelFlowArn")]);
    m_channel_flow_arn_isSet = !json[QString("ChannelFlowArn")].isNull() && m_channel_flow_arn_isValid;

    m_elastic_channel_configuration_isValid = ::OpenAPI::fromJsonValue(m_elastic_channel_configuration, json[QString("ElasticChannelConfiguration")]);
    m_elastic_channel_configuration_isSet = !json[QString("ElasticChannelConfiguration")].isNull() && m_elastic_channel_configuration_isValid;

    m_expiration_settings_isValid = ::OpenAPI::fromJsonValue(m_expiration_settings, json[QString("ExpirationSettings")]);
    m_expiration_settings_isSet = !json[QString("ExpirationSettings")].isNull() && m_expiration_settings_isValid;
}

QString OAIDescribeChannelResponse_Channel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeChannelResponse_Channel::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_channel_arn_isSet) {
        obj.insert(QString("ChannelArn"), ::OpenAPI::toJsonValue(m_channel_arn));
    }
    if (m_mode.isSet()) {
        obj.insert(QString("Mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_privacy.isSet()) {
        obj.insert(QString("Privacy"), ::OpenAPI::toJsonValue(m_privacy));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("Metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("CreatedBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_timestamp_isSet) {
        obj.insert(QString("CreatedTimestamp"), ::OpenAPI::toJsonValue(m_created_timestamp));
    }
    if (m_last_message_timestamp_isSet) {
        obj.insert(QString("LastMessageTimestamp"), ::OpenAPI::toJsonValue(m_last_message_timestamp));
    }
    if (m_last_updated_timestamp_isSet) {
        obj.insert(QString("LastUpdatedTimestamp"), ::OpenAPI::toJsonValue(m_last_updated_timestamp));
    }
    if (m_channel_flow_arn_isSet) {
        obj.insert(QString("ChannelFlowArn"), ::OpenAPI::toJsonValue(m_channel_flow_arn));
    }
    if (m_elastic_channel_configuration.isSet()) {
        obj.insert(QString("ElasticChannelConfiguration"), ::OpenAPI::toJsonValue(m_elastic_channel_configuration));
    }
    if (m_expiration_settings.isSet()) {
        obj.insert(QString("ExpirationSettings"), ::OpenAPI::toJsonValue(m_expiration_settings));
    }
    return obj;
}

QString OAIDescribeChannelResponse_Channel::getName() const {
    return m_name;
}
void OAIDescribeChannelResponse_Channel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDescribeChannelResponse_Channel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDescribeChannelResponse_Channel::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDescribeChannelResponse_Channel::getChannelArn() const {
    return m_channel_arn;
}
void OAIDescribeChannelResponse_Channel::setChannelArn(const QString &channel_arn) {
    m_channel_arn = channel_arn;
    m_channel_arn_isSet = true;
}

bool OAIDescribeChannelResponse_Channel::is_channel_arn_Set() const{
    return m_channel_arn_isSet;
}

bool OAIDescribeChannelResponse_Channel::is_channel_arn_Valid() const{
    return m_channel_arn_isValid;
}

OAIChannelMode OAIDescribeChannelResponse_Channel::getMode() const {
    return m_mode;
}
void OAIDescribeChannelResponse_Channel::setMode(const OAIChannelMode &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIDescribeChannelResponse_Channel::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIDescribeChannelResponse_Channel::is_mode_Valid() const{
    return m_mode_isValid;
}

OAIChannelPrivacy OAIDescribeChannelResponse_Channel::getPrivacy() const {
    return m_privacy;
}
void OAIDescribeChannelResponse_Channel::setPrivacy(const OAIChannelPrivacy &privacy) {
    m_privacy = privacy;
    m_privacy_isSet = true;
}

bool OAIDescribeChannelResponse_Channel::is_privacy_Set() const{
    return m_privacy_isSet;
}

bool OAIDescribeChannelResponse_Channel::is_privacy_Valid() const{
    return m_privacy_isValid;
}

QString OAIDescribeChannelResponse_Channel::getMetadata() const {
    return m_metadata;
}
void OAIDescribeChannelResponse_Channel::setMetadata(const QString &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIDescribeChannelResponse_Channel::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIDescribeChannelResponse_Channel::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIChannel_CreatedBy OAIDescribeChannelResponse_Channel::getCreatedBy() const {
    return m_created_by;
}
void OAIDescribeChannelResponse_Channel::setCreatedBy(const OAIChannel_CreatedBy &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIDescribeChannelResponse_Channel::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIDescribeChannelResponse_Channel::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAIDescribeChannelResponse_Channel::getCreatedTimestamp() const {
    return m_created_timestamp;
}
void OAIDescribeChannelResponse_Channel::setCreatedTimestamp(const QDateTime &created_timestamp) {
    m_created_timestamp = created_timestamp;
    m_created_timestamp_isSet = true;
}

bool OAIDescribeChannelResponse_Channel::is_created_timestamp_Set() const{
    return m_created_timestamp_isSet;
}

bool OAIDescribeChannelResponse_Channel::is_created_timestamp_Valid() const{
    return m_created_timestamp_isValid;
}

QDateTime OAIDescribeChannelResponse_Channel::getLastMessageTimestamp() const {
    return m_last_message_timestamp;
}
void OAIDescribeChannelResponse_Channel::setLastMessageTimestamp(const QDateTime &last_message_timestamp) {
    m_last_message_timestamp = last_message_timestamp;
    m_last_message_timestamp_isSet = true;
}

bool OAIDescribeChannelResponse_Channel::is_last_message_timestamp_Set() const{
    return m_last_message_timestamp_isSet;
}

bool OAIDescribeChannelResponse_Channel::is_last_message_timestamp_Valid() const{
    return m_last_message_timestamp_isValid;
}

QDateTime OAIDescribeChannelResponse_Channel::getLastUpdatedTimestamp() const {
    return m_last_updated_timestamp;
}
void OAIDescribeChannelResponse_Channel::setLastUpdatedTimestamp(const QDateTime &last_updated_timestamp) {
    m_last_updated_timestamp = last_updated_timestamp;
    m_last_updated_timestamp_isSet = true;
}

bool OAIDescribeChannelResponse_Channel::is_last_updated_timestamp_Set() const{
    return m_last_updated_timestamp_isSet;
}

bool OAIDescribeChannelResponse_Channel::is_last_updated_timestamp_Valid() const{
    return m_last_updated_timestamp_isValid;
}

QString OAIDescribeChannelResponse_Channel::getChannelFlowArn() const {
    return m_channel_flow_arn;
}
void OAIDescribeChannelResponse_Channel::setChannelFlowArn(const QString &channel_flow_arn) {
    m_channel_flow_arn = channel_flow_arn;
    m_channel_flow_arn_isSet = true;
}

bool OAIDescribeChannelResponse_Channel::is_channel_flow_arn_Set() const{
    return m_channel_flow_arn_isSet;
}

bool OAIDescribeChannelResponse_Channel::is_channel_flow_arn_Valid() const{
    return m_channel_flow_arn_isValid;
}

OAIChannel_ElasticChannelConfiguration OAIDescribeChannelResponse_Channel::getElasticChannelConfiguration() const {
    return m_elastic_channel_configuration;
}
void OAIDescribeChannelResponse_Channel::setElasticChannelConfiguration(const OAIChannel_ElasticChannelConfiguration &elastic_channel_configuration) {
    m_elastic_channel_configuration = elastic_channel_configuration;
    m_elastic_channel_configuration_isSet = true;
}

bool OAIDescribeChannelResponse_Channel::is_elastic_channel_configuration_Set() const{
    return m_elastic_channel_configuration_isSet;
}

bool OAIDescribeChannelResponse_Channel::is_elastic_channel_configuration_Valid() const{
    return m_elastic_channel_configuration_isValid;
}

OAIChannel_ExpirationSettings OAIDescribeChannelResponse_Channel::getExpirationSettings() const {
    return m_expiration_settings;
}
void OAIDescribeChannelResponse_Channel::setExpirationSettings(const OAIChannel_ExpirationSettings &expiration_settings) {
    m_expiration_settings = expiration_settings;
    m_expiration_settings_isSet = true;
}

bool OAIDescribeChannelResponse_Channel::is_expiration_settings_Set() const{
    return m_expiration_settings_isSet;
}

bool OAIDescribeChannelResponse_Channel::is_expiration_settings_Valid() const{
    return m_expiration_settings_isValid;
}

bool OAIDescribeChannelResponse_Channel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_message_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_flow_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elastic_channel_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeChannelResponse_Channel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
