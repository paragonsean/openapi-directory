/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelMembershipForAppInstanceUserSummary_AppInstanceUserMembershipSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelMembershipForAppInstanceUserSummary_AppInstanceUserMembershipSummary::OAIChannelMembershipForAppInstanceUserSummary_AppInstanceUserMembershipSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelMembershipForAppInstanceUserSummary_AppInstanceUserMembershipSummary::OAIChannelMembershipForAppInstanceUserSummary_AppInstanceUserMembershipSummary() {
    this->initializeModel();
}

OAIChannelMembershipForAppInstanceUserSummary_AppInstanceUserMembershipSummary::~OAIChannelMembershipForAppInstanceUserSummary_AppInstanceUserMembershipSummary() {}

void OAIChannelMembershipForAppInstanceUserSummary_AppInstanceUserMembershipSummary::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_read_marker_timestamp_isSet = false;
    m_read_marker_timestamp_isValid = false;

    m_sub_channel_id_isSet = false;
    m_sub_channel_id_isValid = false;
}

void OAIChannelMembershipForAppInstanceUserSummary_AppInstanceUserMembershipSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelMembershipForAppInstanceUserSummary_AppInstanceUserMembershipSummary::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_read_marker_timestamp_isValid = ::OpenAPI::fromJsonValue(m_read_marker_timestamp, json[QString("ReadMarkerTimestamp")]);
    m_read_marker_timestamp_isSet = !json[QString("ReadMarkerTimestamp")].isNull() && m_read_marker_timestamp_isValid;

    m_sub_channel_id_isValid = ::OpenAPI::fromJsonValue(m_sub_channel_id, json[QString("SubChannelId")]);
    m_sub_channel_id_isSet = !json[QString("SubChannelId")].isNull() && m_sub_channel_id_isValid;
}

QString OAIChannelMembershipForAppInstanceUserSummary_AppInstanceUserMembershipSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelMembershipForAppInstanceUserSummary_AppInstanceUserMembershipSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_read_marker_timestamp_isSet) {
        obj.insert(QString("ReadMarkerTimestamp"), ::OpenAPI::toJsonValue(m_read_marker_timestamp));
    }
    if (m_sub_channel_id_isSet) {
        obj.insert(QString("SubChannelId"), ::OpenAPI::toJsonValue(m_sub_channel_id));
    }
    return obj;
}

OAIChannelMembershipType OAIChannelMembershipForAppInstanceUserSummary_AppInstanceUserMembershipSummary::getType() const {
    return m_type;
}
void OAIChannelMembershipForAppInstanceUserSummary_AppInstanceUserMembershipSummary::setType(const OAIChannelMembershipType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIChannelMembershipForAppInstanceUserSummary_AppInstanceUserMembershipSummary::is_type_Set() const{
    return m_type_isSet;
}

bool OAIChannelMembershipForAppInstanceUserSummary_AppInstanceUserMembershipSummary::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIChannelMembershipForAppInstanceUserSummary_AppInstanceUserMembershipSummary::getReadMarkerTimestamp() const {
    return m_read_marker_timestamp;
}
void OAIChannelMembershipForAppInstanceUserSummary_AppInstanceUserMembershipSummary::setReadMarkerTimestamp(const QDateTime &read_marker_timestamp) {
    m_read_marker_timestamp = read_marker_timestamp;
    m_read_marker_timestamp_isSet = true;
}

bool OAIChannelMembershipForAppInstanceUserSummary_AppInstanceUserMembershipSummary::is_read_marker_timestamp_Set() const{
    return m_read_marker_timestamp_isSet;
}

bool OAIChannelMembershipForAppInstanceUserSummary_AppInstanceUserMembershipSummary::is_read_marker_timestamp_Valid() const{
    return m_read_marker_timestamp_isValid;
}

QString OAIChannelMembershipForAppInstanceUserSummary_AppInstanceUserMembershipSummary::getSubChannelId() const {
    return m_sub_channel_id;
}
void OAIChannelMembershipForAppInstanceUserSummary_AppInstanceUserMembershipSummary::setSubChannelId(const QString &sub_channel_id) {
    m_sub_channel_id = sub_channel_id;
    m_sub_channel_id_isSet = true;
}

bool OAIChannelMembershipForAppInstanceUserSummary_AppInstanceUserMembershipSummary::is_sub_channel_id_Set() const{
    return m_sub_channel_id_isSet;
}

bool OAIChannelMembershipForAppInstanceUserSummary_AppInstanceUserMembershipSummary::is_sub_channel_id_Valid() const{
    return m_sub_channel_id_isValid;
}

bool OAIChannelMembershipForAppInstanceUserSummary_AppInstanceUserMembershipSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_marker_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelMembershipForAppInstanceUserSummary_AppInstanceUserMembershipSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
