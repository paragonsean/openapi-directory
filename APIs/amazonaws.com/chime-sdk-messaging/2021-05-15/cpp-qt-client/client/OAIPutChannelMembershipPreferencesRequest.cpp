/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutChannelMembershipPreferencesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutChannelMembershipPreferencesRequest::OAIPutChannelMembershipPreferencesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutChannelMembershipPreferencesRequest::OAIPutChannelMembershipPreferencesRequest() {
    this->initializeModel();
}

OAIPutChannelMembershipPreferencesRequest::~OAIPutChannelMembershipPreferencesRequest() {}

void OAIPutChannelMembershipPreferencesRequest::initializeModel() {

    m_preferences_isSet = false;
    m_preferences_isValid = false;
}

void OAIPutChannelMembershipPreferencesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutChannelMembershipPreferencesRequest::fromJsonObject(QJsonObject json) {

    m_preferences_isValid = ::OpenAPI::fromJsonValue(m_preferences, json[QString("Preferences")]);
    m_preferences_isSet = !json[QString("Preferences")].isNull() && m_preferences_isValid;
}

QString OAIPutChannelMembershipPreferencesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutChannelMembershipPreferencesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_preferences.isSet()) {
        obj.insert(QString("Preferences"), ::OpenAPI::toJsonValue(m_preferences));
    }
    return obj;
}

OAIPutChannelMembershipPreferencesRequest_Preferences OAIPutChannelMembershipPreferencesRequest::getPreferences() const {
    return m_preferences;
}
void OAIPutChannelMembershipPreferencesRequest::setPreferences(const OAIPutChannelMembershipPreferencesRequest_Preferences &preferences) {
    m_preferences = preferences;
    m_preferences_isSet = true;
}

bool OAIPutChannelMembershipPreferencesRequest::is_preferences_Set() const{
    return m_preferences_isSet;
}

bool OAIPutChannelMembershipPreferencesRequest::is_preferences_Valid() const{
    return m_preferences_isValid;
}

bool OAIPutChannelMembershipPreferencesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_preferences.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutChannelMembershipPreferencesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_preferences_isValid && true;
}

} // namespace OpenAPI
