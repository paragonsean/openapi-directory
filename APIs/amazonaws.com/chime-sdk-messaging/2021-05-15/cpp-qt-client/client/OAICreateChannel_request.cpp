/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateChannel_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateChannel_request::OAICreateChannel_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateChannel_request::OAICreateChannel_request() {
    this->initializeModel();
}

OAICreateChannel_request::~OAICreateChannel_request() {}

void OAICreateChannel_request::initializeModel() {

    m_app_instance_arn_isSet = false;
    m_app_instance_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_privacy_isSet = false;
    m_privacy_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_channel_id_isSet = false;
    m_channel_id_isValid = false;

    m_member_arns_isSet = false;
    m_member_arns_isValid = false;

    m_moderator_arns_isSet = false;
    m_moderator_arns_isValid = false;

    m_elastic_channel_configuration_isSet = false;
    m_elastic_channel_configuration_isValid = false;

    m_expiration_settings_isSet = false;
    m_expiration_settings_isValid = false;
}

void OAICreateChannel_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateChannel_request::fromJsonObject(QJsonObject json) {

    m_app_instance_arn_isValid = ::OpenAPI::fromJsonValue(m_app_instance_arn, json[QString("AppInstanceArn")]);
    m_app_instance_arn_isSet = !json[QString("AppInstanceArn")].isNull() && m_app_instance_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("Mode")]);
    m_mode_isSet = !json[QString("Mode")].isNull() && m_mode_isValid;

    m_privacy_isValid = ::OpenAPI::fromJsonValue(m_privacy, json[QString("Privacy")]);
    m_privacy_isSet = !json[QString("Privacy")].isNull() && m_privacy_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("Metadata")]);
    m_metadata_isSet = !json[QString("Metadata")].isNull() && m_metadata_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_channel_id_isValid = ::OpenAPI::fromJsonValue(m_channel_id, json[QString("ChannelId")]);
    m_channel_id_isSet = !json[QString("ChannelId")].isNull() && m_channel_id_isValid;

    m_member_arns_isValid = ::OpenAPI::fromJsonValue(m_member_arns, json[QString("MemberArns")]);
    m_member_arns_isSet = !json[QString("MemberArns")].isNull() && m_member_arns_isValid;

    m_moderator_arns_isValid = ::OpenAPI::fromJsonValue(m_moderator_arns, json[QString("ModeratorArns")]);
    m_moderator_arns_isSet = !json[QString("ModeratorArns")].isNull() && m_moderator_arns_isValid;

    m_elastic_channel_configuration_isValid = ::OpenAPI::fromJsonValue(m_elastic_channel_configuration, json[QString("ElasticChannelConfiguration")]);
    m_elastic_channel_configuration_isSet = !json[QString("ElasticChannelConfiguration")].isNull() && m_elastic_channel_configuration_isValid;

    m_expiration_settings_isValid = ::OpenAPI::fromJsonValue(m_expiration_settings, json[QString("ExpirationSettings")]);
    m_expiration_settings_isSet = !json[QString("ExpirationSettings")].isNull() && m_expiration_settings_isValid;
}

QString OAICreateChannel_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateChannel_request::asJsonObject() const {
    QJsonObject obj;
    if (m_app_instance_arn_isSet) {
        obj.insert(QString("AppInstanceArn"), ::OpenAPI::toJsonValue(m_app_instance_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_mode_isSet) {
        obj.insert(QString("Mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_privacy_isSet) {
        obj.insert(QString("Privacy"), ::OpenAPI::toJsonValue(m_privacy));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("Metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_channel_id_isSet) {
        obj.insert(QString("ChannelId"), ::OpenAPI::toJsonValue(m_channel_id));
    }
    if (m_member_arns.size() > 0) {
        obj.insert(QString("MemberArns"), ::OpenAPI::toJsonValue(m_member_arns));
    }
    if (m_moderator_arns.size() > 0) {
        obj.insert(QString("ModeratorArns"), ::OpenAPI::toJsonValue(m_moderator_arns));
    }
    if (m_elastic_channel_configuration.isSet()) {
        obj.insert(QString("ElasticChannelConfiguration"), ::OpenAPI::toJsonValue(m_elastic_channel_configuration));
    }
    if (m_expiration_settings.isSet()) {
        obj.insert(QString("ExpirationSettings"), ::OpenAPI::toJsonValue(m_expiration_settings));
    }
    return obj;
}

QString OAICreateChannel_request::getAppInstanceArn() const {
    return m_app_instance_arn;
}
void OAICreateChannel_request::setAppInstanceArn(const QString &app_instance_arn) {
    m_app_instance_arn = app_instance_arn;
    m_app_instance_arn_isSet = true;
}

bool OAICreateChannel_request::is_app_instance_arn_Set() const{
    return m_app_instance_arn_isSet;
}

bool OAICreateChannel_request::is_app_instance_arn_Valid() const{
    return m_app_instance_arn_isValid;
}

QString OAICreateChannel_request::getName() const {
    return m_name;
}
void OAICreateChannel_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateChannel_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateChannel_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateChannel_request::getMode() const {
    return m_mode;
}
void OAICreateChannel_request::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAICreateChannel_request::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAICreateChannel_request::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAICreateChannel_request::getPrivacy() const {
    return m_privacy;
}
void OAICreateChannel_request::setPrivacy(const QString &privacy) {
    m_privacy = privacy;
    m_privacy_isSet = true;
}

bool OAICreateChannel_request::is_privacy_Set() const{
    return m_privacy_isSet;
}

bool OAICreateChannel_request::is_privacy_Valid() const{
    return m_privacy_isValid;
}

QString OAICreateChannel_request::getMetadata() const {
    return m_metadata;
}
void OAICreateChannel_request::setMetadata(const QString &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAICreateChannel_request::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAICreateChannel_request::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAICreateChannel_request::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICreateChannel_request::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICreateChannel_request::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICreateChannel_request::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QList<OAITag> OAICreateChannel_request::getTags() const {
    return m_tags;
}
void OAICreateChannel_request::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateChannel_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateChannel_request::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateChannel_request::getChannelId() const {
    return m_channel_id;
}
void OAICreateChannel_request::setChannelId(const QString &channel_id) {
    m_channel_id = channel_id;
    m_channel_id_isSet = true;
}

bool OAICreateChannel_request::is_channel_id_Set() const{
    return m_channel_id_isSet;
}

bool OAICreateChannel_request::is_channel_id_Valid() const{
    return m_channel_id_isValid;
}

QList<QString> OAICreateChannel_request::getMemberArns() const {
    return m_member_arns;
}
void OAICreateChannel_request::setMemberArns(const QList<QString> &member_arns) {
    m_member_arns = member_arns;
    m_member_arns_isSet = true;
}

bool OAICreateChannel_request::is_member_arns_Set() const{
    return m_member_arns_isSet;
}

bool OAICreateChannel_request::is_member_arns_Valid() const{
    return m_member_arns_isValid;
}

QList<QString> OAICreateChannel_request::getModeratorArns() const {
    return m_moderator_arns;
}
void OAICreateChannel_request::setModeratorArns(const QList<QString> &moderator_arns) {
    m_moderator_arns = moderator_arns;
    m_moderator_arns_isSet = true;
}

bool OAICreateChannel_request::is_moderator_arns_Set() const{
    return m_moderator_arns_isSet;
}

bool OAICreateChannel_request::is_moderator_arns_Valid() const{
    return m_moderator_arns_isValid;
}

OAICreateChannel_request_ElasticChannelConfiguration OAICreateChannel_request::getElasticChannelConfiguration() const {
    return m_elastic_channel_configuration;
}
void OAICreateChannel_request::setElasticChannelConfiguration(const OAICreateChannel_request_ElasticChannelConfiguration &elastic_channel_configuration) {
    m_elastic_channel_configuration = elastic_channel_configuration;
    m_elastic_channel_configuration_isSet = true;
}

bool OAICreateChannel_request::is_elastic_channel_configuration_Set() const{
    return m_elastic_channel_configuration_isSet;
}

bool OAICreateChannel_request::is_elastic_channel_configuration_Valid() const{
    return m_elastic_channel_configuration_isValid;
}

OAICreateChannel_request_ExpirationSettings OAICreateChannel_request::getExpirationSettings() const {
    return m_expiration_settings;
}
void OAICreateChannel_request::setExpirationSettings(const OAICreateChannel_request_ExpirationSettings &expiration_settings) {
    m_expiration_settings = expiration_settings;
    m_expiration_settings_isSet = true;
}

bool OAICreateChannel_request::is_expiration_settings_Set() const{
    return m_expiration_settings_isSet;
}

bool OAICreateChannel_request::is_expiration_settings_Valid() const{
    return m_expiration_settings_isValid;
}

bool OAICreateChannel_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_instance_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_arns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_moderator_arns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_elastic_channel_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateChannel_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_instance_arn_isValid && m_name_isValid && m_client_request_token_isValid && true;
}

} // namespace OpenAPI
