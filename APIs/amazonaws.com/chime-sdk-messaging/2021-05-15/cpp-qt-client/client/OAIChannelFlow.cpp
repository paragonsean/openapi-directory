/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelFlow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelFlow::OAIChannelFlow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelFlow::OAIChannelFlow() {
    this->initializeModel();
}

OAIChannelFlow::~OAIChannelFlow() {}

void OAIChannelFlow::initializeModel() {

    m_channel_flow_arn_isSet = false;
    m_channel_flow_arn_isValid = false;

    m_processors_isSet = false;
    m_processors_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_created_timestamp_isSet = false;
    m_created_timestamp_isValid = false;

    m_last_updated_timestamp_isSet = false;
    m_last_updated_timestamp_isValid = false;
}

void OAIChannelFlow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelFlow::fromJsonObject(QJsonObject json) {

    m_channel_flow_arn_isValid = ::OpenAPI::fromJsonValue(m_channel_flow_arn, json[QString("ChannelFlowArn")]);
    m_channel_flow_arn_isSet = !json[QString("ChannelFlowArn")].isNull() && m_channel_flow_arn_isValid;

    m_processors_isValid = ::OpenAPI::fromJsonValue(m_processors, json[QString("Processors")]);
    m_processors_isSet = !json[QString("Processors")].isNull() && m_processors_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_created_timestamp_isValid = ::OpenAPI::fromJsonValue(m_created_timestamp, json[QString("CreatedTimestamp")]);
    m_created_timestamp_isSet = !json[QString("CreatedTimestamp")].isNull() && m_created_timestamp_isValid;

    m_last_updated_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_updated_timestamp, json[QString("LastUpdatedTimestamp")]);
    m_last_updated_timestamp_isSet = !json[QString("LastUpdatedTimestamp")].isNull() && m_last_updated_timestamp_isValid;
}

QString OAIChannelFlow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelFlow::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_flow_arn_isSet) {
        obj.insert(QString("ChannelFlowArn"), ::OpenAPI::toJsonValue(m_channel_flow_arn));
    }
    if (m_processors.isSet()) {
        obj.insert(QString("Processors"), ::OpenAPI::toJsonValue(m_processors));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_created_timestamp_isSet) {
        obj.insert(QString("CreatedTimestamp"), ::OpenAPI::toJsonValue(m_created_timestamp));
    }
    if (m_last_updated_timestamp_isSet) {
        obj.insert(QString("LastUpdatedTimestamp"), ::OpenAPI::toJsonValue(m_last_updated_timestamp));
    }
    return obj;
}

QString OAIChannelFlow::getChannelFlowArn() const {
    return m_channel_flow_arn;
}
void OAIChannelFlow::setChannelFlowArn(const QString &channel_flow_arn) {
    m_channel_flow_arn = channel_flow_arn;
    m_channel_flow_arn_isSet = true;
}

bool OAIChannelFlow::is_channel_flow_arn_Set() const{
    return m_channel_flow_arn_isSet;
}

bool OAIChannelFlow::is_channel_flow_arn_Valid() const{
    return m_channel_flow_arn_isValid;
}

QList OAIChannelFlow::getProcessors() const {
    return m_processors;
}
void OAIChannelFlow::setProcessors(const QList &processors) {
    m_processors = processors;
    m_processors_isSet = true;
}

bool OAIChannelFlow::is_processors_Set() const{
    return m_processors_isSet;
}

bool OAIChannelFlow::is_processors_Valid() const{
    return m_processors_isValid;
}

QString OAIChannelFlow::getName() const {
    return m_name;
}
void OAIChannelFlow::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIChannelFlow::is_name_Set() const{
    return m_name_isSet;
}

bool OAIChannelFlow::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAIChannelFlow::getCreatedTimestamp() const {
    return m_created_timestamp;
}
void OAIChannelFlow::setCreatedTimestamp(const QDateTime &created_timestamp) {
    m_created_timestamp = created_timestamp;
    m_created_timestamp_isSet = true;
}

bool OAIChannelFlow::is_created_timestamp_Set() const{
    return m_created_timestamp_isSet;
}

bool OAIChannelFlow::is_created_timestamp_Valid() const{
    return m_created_timestamp_isValid;
}

QDateTime OAIChannelFlow::getLastUpdatedTimestamp() const {
    return m_last_updated_timestamp;
}
void OAIChannelFlow::setLastUpdatedTimestamp(const QDateTime &last_updated_timestamp) {
    m_last_updated_timestamp = last_updated_timestamp;
    m_last_updated_timestamp_isSet = true;
}

bool OAIChannelFlow::is_last_updated_timestamp_Set() const{
    return m_last_updated_timestamp_isSet;
}

bool OAIChannelFlow::is_last_updated_timestamp_Valid() const{
    return m_last_updated_timestamp_isValid;
}

bool OAIChannelFlow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_flow_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelFlow::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
