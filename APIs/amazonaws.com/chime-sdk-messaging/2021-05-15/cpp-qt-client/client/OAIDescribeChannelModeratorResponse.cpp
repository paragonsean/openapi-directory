/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeChannelModeratorResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeChannelModeratorResponse::OAIDescribeChannelModeratorResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeChannelModeratorResponse::OAIDescribeChannelModeratorResponse() {
    this->initializeModel();
}

OAIDescribeChannelModeratorResponse::~OAIDescribeChannelModeratorResponse() {}

void OAIDescribeChannelModeratorResponse::initializeModel() {

    m_channel_moderator_isSet = false;
    m_channel_moderator_isValid = false;
}

void OAIDescribeChannelModeratorResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeChannelModeratorResponse::fromJsonObject(QJsonObject json) {

    m_channel_moderator_isValid = ::OpenAPI::fromJsonValue(m_channel_moderator, json[QString("ChannelModerator")]);
    m_channel_moderator_isSet = !json[QString("ChannelModerator")].isNull() && m_channel_moderator_isValid;
}

QString OAIDescribeChannelModeratorResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeChannelModeratorResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_moderator.isSet()) {
        obj.insert(QString("ChannelModerator"), ::OpenAPI::toJsonValue(m_channel_moderator));
    }
    return obj;
}

OAIDescribeChannelModeratorResponse_ChannelModerator OAIDescribeChannelModeratorResponse::getChannelModerator() const {
    return m_channel_moderator;
}
void OAIDescribeChannelModeratorResponse::setChannelModerator(const OAIDescribeChannelModeratorResponse_ChannelModerator &channel_moderator) {
    m_channel_moderator = channel_moderator;
    m_channel_moderator_isSet = true;
}

bool OAIDescribeChannelModeratorResponse::is_channel_moderator_Set() const{
    return m_channel_moderator_isSet;
}

bool OAIDescribeChannelModeratorResponse::is_channel_moderator_Valid() const{
    return m_channel_moderator_isValid;
}

bool OAIDescribeChannelModeratorResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_moderator.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeChannelModeratorResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
