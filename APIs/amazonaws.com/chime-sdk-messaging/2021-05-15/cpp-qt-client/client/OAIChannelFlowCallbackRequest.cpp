/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelFlowCallbackRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelFlowCallbackRequest::OAIChannelFlowCallbackRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelFlowCallbackRequest::OAIChannelFlowCallbackRequest() {
    this->initializeModel();
}

OAIChannelFlowCallbackRequest::~OAIChannelFlowCallbackRequest() {}

void OAIChannelFlowCallbackRequest::initializeModel() {

    m_callback_id_isSet = false;
    m_callback_id_isValid = false;

    m_delete_resource_isSet = false;
    m_delete_resource_isValid = false;

    m_channel_message_isSet = false;
    m_channel_message_isValid = false;
}

void OAIChannelFlowCallbackRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelFlowCallbackRequest::fromJsonObject(QJsonObject json) {

    m_callback_id_isValid = ::OpenAPI::fromJsonValue(m_callback_id, json[QString("CallbackId")]);
    m_callback_id_isSet = !json[QString("CallbackId")].isNull() && m_callback_id_isValid;

    m_delete_resource_isValid = ::OpenAPI::fromJsonValue(m_delete_resource, json[QString("DeleteResource")]);
    m_delete_resource_isSet = !json[QString("DeleteResource")].isNull() && m_delete_resource_isValid;

    m_channel_message_isValid = ::OpenAPI::fromJsonValue(m_channel_message, json[QString("ChannelMessage")]);
    m_channel_message_isSet = !json[QString("ChannelMessage")].isNull() && m_channel_message_isValid;
}

QString OAIChannelFlowCallbackRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelFlowCallbackRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_callback_id_isSet) {
        obj.insert(QString("CallbackId"), ::OpenAPI::toJsonValue(m_callback_id));
    }
    if (m_delete_resource_isSet) {
        obj.insert(QString("DeleteResource"), ::OpenAPI::toJsonValue(m_delete_resource));
    }
    if (m_channel_message.isSet()) {
        obj.insert(QString("ChannelMessage"), ::OpenAPI::toJsonValue(m_channel_message));
    }
    return obj;
}

QString OAIChannelFlowCallbackRequest::getCallbackId() const {
    return m_callback_id;
}
void OAIChannelFlowCallbackRequest::setCallbackId(const QString &callback_id) {
    m_callback_id = callback_id;
    m_callback_id_isSet = true;
}

bool OAIChannelFlowCallbackRequest::is_callback_id_Set() const{
    return m_callback_id_isSet;
}

bool OAIChannelFlowCallbackRequest::is_callback_id_Valid() const{
    return m_callback_id_isValid;
}

bool OAIChannelFlowCallbackRequest::getDeleteResource() const {
    return m_delete_resource;
}
void OAIChannelFlowCallbackRequest::setDeleteResource(const bool &delete_resource) {
    m_delete_resource = delete_resource;
    m_delete_resource_isSet = true;
}

bool OAIChannelFlowCallbackRequest::is_delete_resource_Set() const{
    return m_delete_resource_isSet;
}

bool OAIChannelFlowCallbackRequest::is_delete_resource_Valid() const{
    return m_delete_resource_isValid;
}

OAIChannelFlowCallbackRequest_ChannelMessage OAIChannelFlowCallbackRequest::getChannelMessage() const {
    return m_channel_message;
}
void OAIChannelFlowCallbackRequest::setChannelMessage(const OAIChannelFlowCallbackRequest_ChannelMessage &channel_message) {
    m_channel_message = channel_message;
    m_channel_message_isSet = true;
}

bool OAIChannelFlowCallbackRequest::is_channel_message_Set() const{
    return m_channel_message_isSet;
}

bool OAIChannelFlowCallbackRequest::is_channel_message_Valid() const{
    return m_channel_message_isValid;
}

bool OAIChannelFlowCallbackRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_callback_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_message.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelFlowCallbackRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_callback_id_isValid && m_channel_message_isValid && true;
}

} // namespace OpenAPI
