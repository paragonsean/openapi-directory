/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetChannelMessageStatusResponse_Status.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetChannelMessageStatusResponse_Status::OAIGetChannelMessageStatusResponse_Status(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetChannelMessageStatusResponse_Status::OAIGetChannelMessageStatusResponse_Status() {
    this->initializeModel();
}

OAIGetChannelMessageStatusResponse_Status::~OAIGetChannelMessageStatusResponse_Status() {}

void OAIGetChannelMessageStatusResponse_Status::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;

    m_detail_isSet = false;
    m_detail_isValid = false;
}

void OAIGetChannelMessageStatusResponse_Status::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetChannelMessageStatusResponse_Status::fromJsonObject(QJsonObject json) {

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_detail_isValid = ::OpenAPI::fromJsonValue(m_detail, json[QString("Detail")]);
    m_detail_isSet = !json[QString("Detail")].isNull() && m_detail_isValid;
}

QString OAIGetChannelMessageStatusResponse_Status::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetChannelMessageStatusResponse_Status::asJsonObject() const {
    QJsonObject obj;
    if (m_value.isSet()) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_detail_isSet) {
        obj.insert(QString("Detail"), ::OpenAPI::toJsonValue(m_detail));
    }
    return obj;
}

OAIChannelMessageStatus OAIGetChannelMessageStatusResponse_Status::getValue() const {
    return m_value;
}
void OAIGetChannelMessageStatusResponse_Status::setValue(const OAIChannelMessageStatus &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIGetChannelMessageStatusResponse_Status::is_value_Set() const{
    return m_value_isSet;
}

bool OAIGetChannelMessageStatusResponse_Status::is_value_Valid() const{
    return m_value_isValid;
}

QString OAIGetChannelMessageStatusResponse_Status::getDetail() const {
    return m_detail;
}
void OAIGetChannelMessageStatusResponse_Status::setDetail(const QString &detail) {
    m_detail = detail;
    m_detail_isSet = true;
}

bool OAIGetChannelMessageStatusResponse_Status::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAIGetChannelMessageStatusResponse_Status::is_detail_Valid() const{
    return m_detail_isValid;
}

bool OAIGetChannelMessageStatusResponse_Status::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetChannelMessageStatusResponse_Status::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
