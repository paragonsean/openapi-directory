/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeChannelResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeChannelResponse::OAIDescribeChannelResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeChannelResponse::OAIDescribeChannelResponse() {
    this->initializeModel();
}

OAIDescribeChannelResponse::~OAIDescribeChannelResponse() {}

void OAIDescribeChannelResponse::initializeModel() {

    m_channel_isSet = false;
    m_channel_isValid = false;
}

void OAIDescribeChannelResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeChannelResponse::fromJsonObject(QJsonObject json) {

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("Channel")]);
    m_channel_isSet = !json[QString("Channel")].isNull() && m_channel_isValid;
}

QString OAIDescribeChannelResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeChannelResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_channel.isSet()) {
        obj.insert(QString("Channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    return obj;
}

OAIDescribeChannelResponse_Channel OAIDescribeChannelResponse::getChannel() const {
    return m_channel;
}
void OAIDescribeChannelResponse::setChannel(const OAIDescribeChannelResponse_Channel &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIDescribeChannelResponse::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIDescribeChannelResponse::is_channel_Valid() const{
    return m_channel_isValid;
}

bool OAIDescribeChannelResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeChannelResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
