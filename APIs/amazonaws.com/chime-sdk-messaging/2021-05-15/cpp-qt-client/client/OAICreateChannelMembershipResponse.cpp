/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateChannelMembershipResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateChannelMembershipResponse::OAICreateChannelMembershipResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateChannelMembershipResponse::OAICreateChannelMembershipResponse() {
    this->initializeModel();
}

OAICreateChannelMembershipResponse::~OAICreateChannelMembershipResponse() {}

void OAICreateChannelMembershipResponse::initializeModel() {

    m_channel_arn_isSet = false;
    m_channel_arn_isValid = false;

    m_member_isSet = false;
    m_member_isValid = false;

    m_sub_channel_id_isSet = false;
    m_sub_channel_id_isValid = false;
}

void OAICreateChannelMembershipResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateChannelMembershipResponse::fromJsonObject(QJsonObject json) {

    m_channel_arn_isValid = ::OpenAPI::fromJsonValue(m_channel_arn, json[QString("ChannelArn")]);
    m_channel_arn_isSet = !json[QString("ChannelArn")].isNull() && m_channel_arn_isValid;

    m_member_isValid = ::OpenAPI::fromJsonValue(m_member, json[QString("Member")]);
    m_member_isSet = !json[QString("Member")].isNull() && m_member_isValid;

    m_sub_channel_id_isValid = ::OpenAPI::fromJsonValue(m_sub_channel_id, json[QString("SubChannelId")]);
    m_sub_channel_id_isSet = !json[QString("SubChannelId")].isNull() && m_sub_channel_id_isValid;
}

QString OAICreateChannelMembershipResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateChannelMembershipResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_arn_isSet) {
        obj.insert(QString("ChannelArn"), ::OpenAPI::toJsonValue(m_channel_arn));
    }
    if (m_member.isSet()) {
        obj.insert(QString("Member"), ::OpenAPI::toJsonValue(m_member));
    }
    if (m_sub_channel_id_isSet) {
        obj.insert(QString("SubChannelId"), ::OpenAPI::toJsonValue(m_sub_channel_id));
    }
    return obj;
}

QString OAICreateChannelMembershipResponse::getChannelArn() const {
    return m_channel_arn;
}
void OAICreateChannelMembershipResponse::setChannelArn(const QString &channel_arn) {
    m_channel_arn = channel_arn;
    m_channel_arn_isSet = true;
}

bool OAICreateChannelMembershipResponse::is_channel_arn_Set() const{
    return m_channel_arn_isSet;
}

bool OAICreateChannelMembershipResponse::is_channel_arn_Valid() const{
    return m_channel_arn_isValid;
}

OAICreateChannelMembershipResponse_Member OAICreateChannelMembershipResponse::getMember() const {
    return m_member;
}
void OAICreateChannelMembershipResponse::setMember(const OAICreateChannelMembershipResponse_Member &member) {
    m_member = member;
    m_member_isSet = true;
}

bool OAICreateChannelMembershipResponse::is_member_Set() const{
    return m_member_isSet;
}

bool OAICreateChannelMembershipResponse::is_member_Valid() const{
    return m_member_isValid;
}

QString OAICreateChannelMembershipResponse::getSubChannelId() const {
    return m_sub_channel_id;
}
void OAICreateChannelMembershipResponse::setSubChannelId(const QString &sub_channel_id) {
    m_sub_channel_id = sub_channel_id;
    m_sub_channel_id_isSet = true;
}

bool OAICreateChannelMembershipResponse::is_sub_channel_id_Set() const{
    return m_sub_channel_id_isSet;
}

bool OAICreateChannelMembershipResponse::is_sub_channel_id_Valid() const{
    return m_sub_channel_id_isValid;
}

bool OAICreateChannelMembershipResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateChannelMembershipResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
