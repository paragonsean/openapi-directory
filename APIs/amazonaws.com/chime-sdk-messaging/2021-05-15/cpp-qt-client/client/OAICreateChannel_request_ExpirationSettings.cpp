/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateChannel_request_ExpirationSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateChannel_request_ExpirationSettings::OAICreateChannel_request_ExpirationSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateChannel_request_ExpirationSettings::OAICreateChannel_request_ExpirationSettings() {
    this->initializeModel();
}

OAICreateChannel_request_ExpirationSettings::~OAICreateChannel_request_ExpirationSettings() {}

void OAICreateChannel_request_ExpirationSettings::initializeModel() {

    m_expiration_days_isSet = false;
    m_expiration_days_isValid = false;

    m_expiration_criterion_isSet = false;
    m_expiration_criterion_isValid = false;
}

void OAICreateChannel_request_ExpirationSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateChannel_request_ExpirationSettings::fromJsonObject(QJsonObject json) {

    m_expiration_days_isValid = ::OpenAPI::fromJsonValue(m_expiration_days, json[QString("ExpirationDays")]);
    m_expiration_days_isSet = !json[QString("ExpirationDays")].isNull() && m_expiration_days_isValid;

    m_expiration_criterion_isValid = ::OpenAPI::fromJsonValue(m_expiration_criterion, json[QString("ExpirationCriterion")]);
    m_expiration_criterion_isSet = !json[QString("ExpirationCriterion")].isNull() && m_expiration_criterion_isValid;
}

QString OAICreateChannel_request_ExpirationSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateChannel_request_ExpirationSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_expiration_days_isSet) {
        obj.insert(QString("ExpirationDays"), ::OpenAPI::toJsonValue(m_expiration_days));
    }
    if (m_expiration_criterion.isSet()) {
        obj.insert(QString("ExpirationCriterion"), ::OpenAPI::toJsonValue(m_expiration_criterion));
    }
    return obj;
}

qint32 OAICreateChannel_request_ExpirationSettings::getExpirationDays() const {
    return m_expiration_days;
}
void OAICreateChannel_request_ExpirationSettings::setExpirationDays(const qint32 &expiration_days) {
    m_expiration_days = expiration_days;
    m_expiration_days_isSet = true;
}

bool OAICreateChannel_request_ExpirationSettings::is_expiration_days_Set() const{
    return m_expiration_days_isSet;
}

bool OAICreateChannel_request_ExpirationSettings::is_expiration_days_Valid() const{
    return m_expiration_days_isValid;
}

OAIExpirationCriterion OAICreateChannel_request_ExpirationSettings::getExpirationCriterion() const {
    return m_expiration_criterion;
}
void OAICreateChannel_request_ExpirationSettings::setExpirationCriterion(const OAIExpirationCriterion &expiration_criterion) {
    m_expiration_criterion = expiration_criterion;
    m_expiration_criterion_isSet = true;
}

bool OAICreateChannel_request_ExpirationSettings::is_expiration_criterion_Set() const{
    return m_expiration_criterion_isSet;
}

bool OAICreateChannel_request_ExpirationSettings::is_expiration_criterion_Valid() const{
    return m_expiration_criterion_isValid;
}

bool OAICreateChannel_request_ExpirationSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expiration_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_criterion.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateChannel_request_ExpirationSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
