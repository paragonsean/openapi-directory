/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateChannelMessageRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateChannelMessageRequest::OAIUpdateChannelMessageRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateChannelMessageRequest::OAIUpdateChannelMessageRequest() {
    this->initializeModel();
}

OAIUpdateChannelMessageRequest::~OAIUpdateChannelMessageRequest() {}

void OAIUpdateChannelMessageRequest::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_sub_channel_id_isSet = false;
    m_sub_channel_id_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;
}

void OAIUpdateChannelMessageRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateChannelMessageRequest::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("Content")]);
    m_content_isSet = !json[QString("Content")].isNull() && m_content_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("Metadata")]);
    m_metadata_isSet = !json[QString("Metadata")].isNull() && m_metadata_isValid;

    m_sub_channel_id_isValid = ::OpenAPI::fromJsonValue(m_sub_channel_id, json[QString("SubChannelId")]);
    m_sub_channel_id_isSet = !json[QString("SubChannelId")].isNull() && m_sub_channel_id_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("ContentType")]);
    m_content_type_isSet = !json[QString("ContentType")].isNull() && m_content_type_isValid;
}

QString OAIUpdateChannelMessageRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateChannelMessageRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("Content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("Metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_sub_channel_id_isSet) {
        obj.insert(QString("SubChannelId"), ::OpenAPI::toJsonValue(m_sub_channel_id));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("ContentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    return obj;
}

QString OAIUpdateChannelMessageRequest::getContent() const {
    return m_content;
}
void OAIUpdateChannelMessageRequest::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIUpdateChannelMessageRequest::is_content_Set() const{
    return m_content_isSet;
}

bool OAIUpdateChannelMessageRequest::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIUpdateChannelMessageRequest::getMetadata() const {
    return m_metadata;
}
void OAIUpdateChannelMessageRequest::setMetadata(const QString &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIUpdateChannelMessageRequest::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIUpdateChannelMessageRequest::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIUpdateChannelMessageRequest::getSubChannelId() const {
    return m_sub_channel_id;
}
void OAIUpdateChannelMessageRequest::setSubChannelId(const QString &sub_channel_id) {
    m_sub_channel_id = sub_channel_id;
    m_sub_channel_id_isSet = true;
}

bool OAIUpdateChannelMessageRequest::is_sub_channel_id_Set() const{
    return m_sub_channel_id_isSet;
}

bool OAIUpdateChannelMessageRequest::is_sub_channel_id_Valid() const{
    return m_sub_channel_id_isValid;
}

QString OAIUpdateChannelMessageRequest::getContentType() const {
    return m_content_type;
}
void OAIUpdateChannelMessageRequest::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIUpdateChannelMessageRequest::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIUpdateChannelMessageRequest::is_content_type_Valid() const{
    return m_content_type_isValid;
}

bool OAIUpdateChannelMessageRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateChannelMessageRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_content_isValid && true;
}

} // namespace OpenAPI
