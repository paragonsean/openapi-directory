/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProcessorConfiguration_Lambda.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProcessorConfiguration_Lambda::OAIProcessorConfiguration_Lambda(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProcessorConfiguration_Lambda::OAIProcessorConfiguration_Lambda() {
    this->initializeModel();
}

OAIProcessorConfiguration_Lambda::~OAIProcessorConfiguration_Lambda() {}

void OAIProcessorConfiguration_Lambda::initializeModel() {

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_invocation_type_isSet = false;
    m_invocation_type_isValid = false;
}

void OAIProcessorConfiguration_Lambda::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProcessorConfiguration_Lambda::fromJsonObject(QJsonObject json) {

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceArn")]);
    m_resource_arn_isSet = !json[QString("ResourceArn")].isNull() && m_resource_arn_isValid;

    m_invocation_type_isValid = ::OpenAPI::fromJsonValue(m_invocation_type, json[QString("InvocationType")]);
    m_invocation_type_isSet = !json[QString("InvocationType")].isNull() && m_invocation_type_isValid;
}

QString OAIProcessorConfiguration_Lambda::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProcessorConfiguration_Lambda::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_invocation_type.isSet()) {
        obj.insert(QString("InvocationType"), ::OpenAPI::toJsonValue(m_invocation_type));
    }
    return obj;
}

QString OAIProcessorConfiguration_Lambda::getResourceArn() const {
    return m_resource_arn;
}
void OAIProcessorConfiguration_Lambda::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIProcessorConfiguration_Lambda::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIProcessorConfiguration_Lambda::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

OAIInvocationType OAIProcessorConfiguration_Lambda::getInvocationType() const {
    return m_invocation_type;
}
void OAIProcessorConfiguration_Lambda::setInvocationType(const OAIInvocationType &invocation_type) {
    m_invocation_type = invocation_type;
    m_invocation_type_isSet = true;
}

bool OAIProcessorConfiguration_Lambda::is_invocation_type_Set() const{
    return m_invocation_type_isSet;
}

bool OAIProcessorConfiguration_Lambda::is_invocation_type_Valid() const{
    return m_invocation_type_isValid;
}

bool OAIProcessorConfiguration_Lambda::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invocation_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProcessorConfiguration_Lambda::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_arn_isValid && m_invocation_type_isValid && true;
}

} // namespace OpenAPI
