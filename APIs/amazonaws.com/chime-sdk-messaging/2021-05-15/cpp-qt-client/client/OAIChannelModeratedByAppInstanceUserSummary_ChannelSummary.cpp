/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary::OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary::OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary() {
    this->initializeModel();
}

OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary::~OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary() {}

void OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_channel_arn_isSet = false;
    m_channel_arn_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_privacy_isSet = false;
    m_privacy_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_last_message_timestamp_isSet = false;
    m_last_message_timestamp_isValid = false;
}

void OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_channel_arn_isValid = ::OpenAPI::fromJsonValue(m_channel_arn, json[QString("ChannelArn")]);
    m_channel_arn_isSet = !json[QString("ChannelArn")].isNull() && m_channel_arn_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("Mode")]);
    m_mode_isSet = !json[QString("Mode")].isNull() && m_mode_isValid;

    m_privacy_isValid = ::OpenAPI::fromJsonValue(m_privacy, json[QString("Privacy")]);
    m_privacy_isSet = !json[QString("Privacy")].isNull() && m_privacy_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("Metadata")]);
    m_metadata_isSet = !json[QString("Metadata")].isNull() && m_metadata_isValid;

    m_last_message_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_message_timestamp, json[QString("LastMessageTimestamp")]);
    m_last_message_timestamp_isSet = !json[QString("LastMessageTimestamp")].isNull() && m_last_message_timestamp_isValid;
}

QString OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_channel_arn_isSet) {
        obj.insert(QString("ChannelArn"), ::OpenAPI::toJsonValue(m_channel_arn));
    }
    if (m_mode.isSet()) {
        obj.insert(QString("Mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_privacy.isSet()) {
        obj.insert(QString("Privacy"), ::OpenAPI::toJsonValue(m_privacy));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("Metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_last_message_timestamp_isSet) {
        obj.insert(QString("LastMessageTimestamp"), ::OpenAPI::toJsonValue(m_last_message_timestamp));
    }
    return obj;
}

QString OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary::getName() const {
    return m_name;
}
void OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary::getChannelArn() const {
    return m_channel_arn;
}
void OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary::setChannelArn(const QString &channel_arn) {
    m_channel_arn = channel_arn;
    m_channel_arn_isSet = true;
}

bool OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary::is_channel_arn_Set() const{
    return m_channel_arn_isSet;
}

bool OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary::is_channel_arn_Valid() const{
    return m_channel_arn_isValid;
}

OAIChannelMode OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary::getMode() const {
    return m_mode;
}
void OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary::setMode(const OAIChannelMode &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary::is_mode_Valid() const{
    return m_mode_isValid;
}

OAIChannelPrivacy OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary::getPrivacy() const {
    return m_privacy;
}
void OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary::setPrivacy(const OAIChannelPrivacy &privacy) {
    m_privacy = privacy;
    m_privacy_isSet = true;
}

bool OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary::is_privacy_Set() const{
    return m_privacy_isSet;
}

bool OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary::is_privacy_Valid() const{
    return m_privacy_isValid;
}

QString OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary::getMetadata() const {
    return m_metadata;
}
void OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary::setMetadata(const QString &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QDateTime OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary::getLastMessageTimestamp() const {
    return m_last_message_timestamp;
}
void OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary::setLastMessageTimestamp(const QDateTime &last_message_timestamp) {
    m_last_message_timestamp = last_message_timestamp;
    m_last_message_timestamp_isSet = true;
}

bool OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary::is_last_message_timestamp_Set() const{
    return m_last_message_timestamp_isSet;
}

bool OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary::is_last_message_timestamp_Valid() const{
    return m_last_message_timestamp_isValid;
}

bool OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_message_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
