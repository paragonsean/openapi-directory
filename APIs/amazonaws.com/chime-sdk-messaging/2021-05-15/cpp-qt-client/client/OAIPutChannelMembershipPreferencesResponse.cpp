/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutChannelMembershipPreferencesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutChannelMembershipPreferencesResponse::OAIPutChannelMembershipPreferencesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutChannelMembershipPreferencesResponse::OAIPutChannelMembershipPreferencesResponse() {
    this->initializeModel();
}

OAIPutChannelMembershipPreferencesResponse::~OAIPutChannelMembershipPreferencesResponse() {}

void OAIPutChannelMembershipPreferencesResponse::initializeModel() {

    m_channel_arn_isSet = false;
    m_channel_arn_isValid = false;

    m_member_isSet = false;
    m_member_isValid = false;

    m_preferences_isSet = false;
    m_preferences_isValid = false;
}

void OAIPutChannelMembershipPreferencesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutChannelMembershipPreferencesResponse::fromJsonObject(QJsonObject json) {

    m_channel_arn_isValid = ::OpenAPI::fromJsonValue(m_channel_arn, json[QString("ChannelArn")]);
    m_channel_arn_isSet = !json[QString("ChannelArn")].isNull() && m_channel_arn_isValid;

    m_member_isValid = ::OpenAPI::fromJsonValue(m_member, json[QString("Member")]);
    m_member_isSet = !json[QString("Member")].isNull() && m_member_isValid;

    m_preferences_isValid = ::OpenAPI::fromJsonValue(m_preferences, json[QString("Preferences")]);
    m_preferences_isSet = !json[QString("Preferences")].isNull() && m_preferences_isValid;
}

QString OAIPutChannelMembershipPreferencesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutChannelMembershipPreferencesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_arn_isSet) {
        obj.insert(QString("ChannelArn"), ::OpenAPI::toJsonValue(m_channel_arn));
    }
    if (m_member.isSet()) {
        obj.insert(QString("Member"), ::OpenAPI::toJsonValue(m_member));
    }
    if (m_preferences.isSet()) {
        obj.insert(QString("Preferences"), ::OpenAPI::toJsonValue(m_preferences));
    }
    return obj;
}

QString OAIPutChannelMembershipPreferencesResponse::getChannelArn() const {
    return m_channel_arn;
}
void OAIPutChannelMembershipPreferencesResponse::setChannelArn(const QString &channel_arn) {
    m_channel_arn = channel_arn;
    m_channel_arn_isSet = true;
}

bool OAIPutChannelMembershipPreferencesResponse::is_channel_arn_Set() const{
    return m_channel_arn_isSet;
}

bool OAIPutChannelMembershipPreferencesResponse::is_channel_arn_Valid() const{
    return m_channel_arn_isValid;
}

OAIGetChannelMembershipPreferencesResponse_Member OAIPutChannelMembershipPreferencesResponse::getMember() const {
    return m_member;
}
void OAIPutChannelMembershipPreferencesResponse::setMember(const OAIGetChannelMembershipPreferencesResponse_Member &member) {
    m_member = member;
    m_member_isSet = true;
}

bool OAIPutChannelMembershipPreferencesResponse::is_member_Set() const{
    return m_member_isSet;
}

bool OAIPutChannelMembershipPreferencesResponse::is_member_Valid() const{
    return m_member_isValid;
}

OAIPutChannelMembershipPreferencesResponse_Preferences OAIPutChannelMembershipPreferencesResponse::getPreferences() const {
    return m_preferences;
}
void OAIPutChannelMembershipPreferencesResponse::setPreferences(const OAIPutChannelMembershipPreferencesResponse_Preferences &preferences) {
    m_preferences = preferences;
    m_preferences_isSet = true;
}

bool OAIPutChannelMembershipPreferencesResponse::is_preferences_Set() const{
    return m_preferences_isSet;
}

bool OAIPutChannelMembershipPreferencesResponse::is_preferences_Valid() const{
    return m_preferences_isValid;
}

bool OAIPutChannelMembershipPreferencesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferences.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutChannelMembershipPreferencesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
