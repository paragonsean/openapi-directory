/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeChannelModeratedByAppInstanceUserResponse_Channel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeChannelModeratedByAppInstanceUserResponse_Channel::OAIDescribeChannelModeratedByAppInstanceUserResponse_Channel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeChannelModeratedByAppInstanceUserResponse_Channel::OAIDescribeChannelModeratedByAppInstanceUserResponse_Channel() {
    this->initializeModel();
}

OAIDescribeChannelModeratedByAppInstanceUserResponse_Channel::~OAIDescribeChannelModeratedByAppInstanceUserResponse_Channel() {}

void OAIDescribeChannelModeratedByAppInstanceUserResponse_Channel::initializeModel() {

    m_channel_summary_isSet = false;
    m_channel_summary_isValid = false;
}

void OAIDescribeChannelModeratedByAppInstanceUserResponse_Channel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeChannelModeratedByAppInstanceUserResponse_Channel::fromJsonObject(QJsonObject json) {

    m_channel_summary_isValid = ::OpenAPI::fromJsonValue(m_channel_summary, json[QString("ChannelSummary")]);
    m_channel_summary_isSet = !json[QString("ChannelSummary")].isNull() && m_channel_summary_isValid;
}

QString OAIDescribeChannelModeratedByAppInstanceUserResponse_Channel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeChannelModeratedByAppInstanceUserResponse_Channel::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_summary.isSet()) {
        obj.insert(QString("ChannelSummary"), ::OpenAPI::toJsonValue(m_channel_summary));
    }
    return obj;
}

OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary OAIDescribeChannelModeratedByAppInstanceUserResponse_Channel::getChannelSummary() const {
    return m_channel_summary;
}
void OAIDescribeChannelModeratedByAppInstanceUserResponse_Channel::setChannelSummary(const OAIChannelModeratedByAppInstanceUserSummary_ChannelSummary &channel_summary) {
    m_channel_summary = channel_summary;
    m_channel_summary_isSet = true;
}

bool OAIDescribeChannelModeratedByAppInstanceUserResponse_Channel::is_channel_summary_Set() const{
    return m_channel_summary_isSet;
}

bool OAIDescribeChannelModeratedByAppInstanceUserResponse_Channel::is_channel_summary_Valid() const{
    return m_channel_summary_isValid;
}

bool OAIDescribeChannelModeratedByAppInstanceUserResponse_Channel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeChannelModeratedByAppInstanceUserResponse_Channel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
