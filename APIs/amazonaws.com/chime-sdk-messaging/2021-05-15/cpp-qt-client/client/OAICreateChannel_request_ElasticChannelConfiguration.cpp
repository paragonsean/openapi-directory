/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateChannel_request_ElasticChannelConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateChannel_request_ElasticChannelConfiguration::OAICreateChannel_request_ElasticChannelConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateChannel_request_ElasticChannelConfiguration::OAICreateChannel_request_ElasticChannelConfiguration() {
    this->initializeModel();
}

OAICreateChannel_request_ElasticChannelConfiguration::~OAICreateChannel_request_ElasticChannelConfiguration() {}

void OAICreateChannel_request_ElasticChannelConfiguration::initializeModel() {

    m_maximum_sub_channels_isSet = false;
    m_maximum_sub_channels_isValid = false;

    m_target_memberships_per_sub_channel_isSet = false;
    m_target_memberships_per_sub_channel_isValid = false;

    m_minimum_membership_percentage_isSet = false;
    m_minimum_membership_percentage_isValid = false;
}

void OAICreateChannel_request_ElasticChannelConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateChannel_request_ElasticChannelConfiguration::fromJsonObject(QJsonObject json) {

    m_maximum_sub_channels_isValid = ::OpenAPI::fromJsonValue(m_maximum_sub_channels, json[QString("MaximumSubChannels")]);
    m_maximum_sub_channels_isSet = !json[QString("MaximumSubChannels")].isNull() && m_maximum_sub_channels_isValid;

    m_target_memberships_per_sub_channel_isValid = ::OpenAPI::fromJsonValue(m_target_memberships_per_sub_channel, json[QString("TargetMembershipsPerSubChannel")]);
    m_target_memberships_per_sub_channel_isSet = !json[QString("TargetMembershipsPerSubChannel")].isNull() && m_target_memberships_per_sub_channel_isValid;

    m_minimum_membership_percentage_isValid = ::OpenAPI::fromJsonValue(m_minimum_membership_percentage, json[QString("MinimumMembershipPercentage")]);
    m_minimum_membership_percentage_isSet = !json[QString("MinimumMembershipPercentage")].isNull() && m_minimum_membership_percentage_isValid;
}

QString OAICreateChannel_request_ElasticChannelConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateChannel_request_ElasticChannelConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_maximum_sub_channels_isSet) {
        obj.insert(QString("MaximumSubChannels"), ::OpenAPI::toJsonValue(m_maximum_sub_channels));
    }
    if (m_target_memberships_per_sub_channel_isSet) {
        obj.insert(QString("TargetMembershipsPerSubChannel"), ::OpenAPI::toJsonValue(m_target_memberships_per_sub_channel));
    }
    if (m_minimum_membership_percentage_isSet) {
        obj.insert(QString("MinimumMembershipPercentage"), ::OpenAPI::toJsonValue(m_minimum_membership_percentage));
    }
    return obj;
}

qint32 OAICreateChannel_request_ElasticChannelConfiguration::getMaximumSubChannels() const {
    return m_maximum_sub_channels;
}
void OAICreateChannel_request_ElasticChannelConfiguration::setMaximumSubChannels(const qint32 &maximum_sub_channels) {
    m_maximum_sub_channels = maximum_sub_channels;
    m_maximum_sub_channels_isSet = true;
}

bool OAICreateChannel_request_ElasticChannelConfiguration::is_maximum_sub_channels_Set() const{
    return m_maximum_sub_channels_isSet;
}

bool OAICreateChannel_request_ElasticChannelConfiguration::is_maximum_sub_channels_Valid() const{
    return m_maximum_sub_channels_isValid;
}

qint32 OAICreateChannel_request_ElasticChannelConfiguration::getTargetMembershipsPerSubChannel() const {
    return m_target_memberships_per_sub_channel;
}
void OAICreateChannel_request_ElasticChannelConfiguration::setTargetMembershipsPerSubChannel(const qint32 &target_memberships_per_sub_channel) {
    m_target_memberships_per_sub_channel = target_memberships_per_sub_channel;
    m_target_memberships_per_sub_channel_isSet = true;
}

bool OAICreateChannel_request_ElasticChannelConfiguration::is_target_memberships_per_sub_channel_Set() const{
    return m_target_memberships_per_sub_channel_isSet;
}

bool OAICreateChannel_request_ElasticChannelConfiguration::is_target_memberships_per_sub_channel_Valid() const{
    return m_target_memberships_per_sub_channel_isValid;
}

qint32 OAICreateChannel_request_ElasticChannelConfiguration::getMinimumMembershipPercentage() const {
    return m_minimum_membership_percentage;
}
void OAICreateChannel_request_ElasticChannelConfiguration::setMinimumMembershipPercentage(const qint32 &minimum_membership_percentage) {
    m_minimum_membership_percentage = minimum_membership_percentage;
    m_minimum_membership_percentage_isSet = true;
}

bool OAICreateChannel_request_ElasticChannelConfiguration::is_minimum_membership_percentage_Set() const{
    return m_minimum_membership_percentage_isSet;
}

bool OAICreateChannel_request_ElasticChannelConfiguration::is_minimum_membership_percentage_Valid() const{
    return m_minimum_membership_percentage_isValid;
}

bool OAICreateChannel_request_ElasticChannelConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_maximum_sub_channels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_memberships_per_sub_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_membership_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateChannel_request_ElasticChannelConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
