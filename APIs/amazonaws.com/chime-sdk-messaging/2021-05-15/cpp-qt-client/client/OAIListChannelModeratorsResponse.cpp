/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListChannelModeratorsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListChannelModeratorsResponse::OAIListChannelModeratorsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListChannelModeratorsResponse::OAIListChannelModeratorsResponse() {
    this->initializeModel();
}

OAIListChannelModeratorsResponse::~OAIListChannelModeratorsResponse() {}

void OAIListChannelModeratorsResponse::initializeModel() {

    m_channel_arn_isSet = false;
    m_channel_arn_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_channel_moderators_isSet = false;
    m_channel_moderators_isValid = false;
}

void OAIListChannelModeratorsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListChannelModeratorsResponse::fromJsonObject(QJsonObject json) {

    m_channel_arn_isValid = ::OpenAPI::fromJsonValue(m_channel_arn, json[QString("ChannelArn")]);
    m_channel_arn_isSet = !json[QString("ChannelArn")].isNull() && m_channel_arn_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_channel_moderators_isValid = ::OpenAPI::fromJsonValue(m_channel_moderators, json[QString("ChannelModerators")]);
    m_channel_moderators_isSet = !json[QString("ChannelModerators")].isNull() && m_channel_moderators_isValid;
}

QString OAIListChannelModeratorsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListChannelModeratorsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_arn_isSet) {
        obj.insert(QString("ChannelArn"), ::OpenAPI::toJsonValue(m_channel_arn));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_channel_moderators.isSet()) {
        obj.insert(QString("ChannelModerators"), ::OpenAPI::toJsonValue(m_channel_moderators));
    }
    return obj;
}

QString OAIListChannelModeratorsResponse::getChannelArn() const {
    return m_channel_arn;
}
void OAIListChannelModeratorsResponse::setChannelArn(const QString &channel_arn) {
    m_channel_arn = channel_arn;
    m_channel_arn_isSet = true;
}

bool OAIListChannelModeratorsResponse::is_channel_arn_Set() const{
    return m_channel_arn_isSet;
}

bool OAIListChannelModeratorsResponse::is_channel_arn_Valid() const{
    return m_channel_arn_isValid;
}

QString OAIListChannelModeratorsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListChannelModeratorsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListChannelModeratorsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListChannelModeratorsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIListChannelModeratorsResponse::getChannelModerators() const {
    return m_channel_moderators;
}
void OAIListChannelModeratorsResponse::setChannelModerators(const QList &channel_moderators) {
    m_channel_moderators = channel_moderators;
    m_channel_moderators_isSet = true;
}

bool OAIListChannelModeratorsResponse::is_channel_moderators_Set() const{
    return m_channel_moderators_isSet;
}

bool OAIListChannelModeratorsResponse::is_channel_moderators_Valid() const{
    return m_channel_moderators_isValid;
}

bool OAIListChannelModeratorsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_moderators.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListChannelModeratorsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
