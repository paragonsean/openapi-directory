/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRedactChannelMessageRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRedactChannelMessageRequest::OAIRedactChannelMessageRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRedactChannelMessageRequest::OAIRedactChannelMessageRequest() {
    this->initializeModel();
}

OAIRedactChannelMessageRequest::~OAIRedactChannelMessageRequest() {}

void OAIRedactChannelMessageRequest::initializeModel() {

    m_sub_channel_id_isSet = false;
    m_sub_channel_id_isValid = false;
}

void OAIRedactChannelMessageRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRedactChannelMessageRequest::fromJsonObject(QJsonObject json) {

    m_sub_channel_id_isValid = ::OpenAPI::fromJsonValue(m_sub_channel_id, json[QString("SubChannelId")]);
    m_sub_channel_id_isSet = !json[QString("SubChannelId")].isNull() && m_sub_channel_id_isValid;
}

QString OAIRedactChannelMessageRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRedactChannelMessageRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_sub_channel_id_isSet) {
        obj.insert(QString("SubChannelId"), ::OpenAPI::toJsonValue(m_sub_channel_id));
    }
    return obj;
}

QString OAIRedactChannelMessageRequest::getSubChannelId() const {
    return m_sub_channel_id;
}
void OAIRedactChannelMessageRequest::setSubChannelId(const QString &sub_channel_id) {
    m_sub_channel_id = sub_channel_id;
    m_sub_channel_id_isSet = true;
}

bool OAIRedactChannelMessageRequest::is_sub_channel_id_Set() const{
    return m_sub_channel_id_isSet;
}

bool OAIRedactChannelMessageRequest::is_sub_channel_id_Valid() const{
    return m_sub_channel_id_isValid;
}

bool OAIRedactChannelMessageRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sub_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRedactChannelMessageRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
