/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchCreateChannelMembershipRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchCreateChannelMembershipRequest::OAIBatchCreateChannelMembershipRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchCreateChannelMembershipRequest::OAIBatchCreateChannelMembershipRequest() {
    this->initializeModel();
}

OAIBatchCreateChannelMembershipRequest::~OAIBatchCreateChannelMembershipRequest() {}

void OAIBatchCreateChannelMembershipRequest::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_member_arns_isSet = false;
    m_member_arns_isValid = false;

    m_sub_channel_id_isSet = false;
    m_sub_channel_id_isValid = false;
}

void OAIBatchCreateChannelMembershipRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchCreateChannelMembershipRequest::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_member_arns_isValid = ::OpenAPI::fromJsonValue(m_member_arns, json[QString("MemberArns")]);
    m_member_arns_isSet = !json[QString("MemberArns")].isNull() && m_member_arns_isValid;

    m_sub_channel_id_isValid = ::OpenAPI::fromJsonValue(m_sub_channel_id, json[QString("SubChannelId")]);
    m_sub_channel_id_isSet = !json[QString("SubChannelId")].isNull() && m_sub_channel_id_isValid;
}

QString OAIBatchCreateChannelMembershipRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchCreateChannelMembershipRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_member_arns.isSet()) {
        obj.insert(QString("MemberArns"), ::OpenAPI::toJsonValue(m_member_arns));
    }
    if (m_sub_channel_id_isSet) {
        obj.insert(QString("SubChannelId"), ::OpenAPI::toJsonValue(m_sub_channel_id));
    }
    return obj;
}

OAIChannelMembershipType OAIBatchCreateChannelMembershipRequest::getType() const {
    return m_type;
}
void OAIBatchCreateChannelMembershipRequest::setType(const OAIChannelMembershipType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBatchCreateChannelMembershipRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBatchCreateChannelMembershipRequest::is_type_Valid() const{
    return m_type_isValid;
}

QList OAIBatchCreateChannelMembershipRequest::getMemberArns() const {
    return m_member_arns;
}
void OAIBatchCreateChannelMembershipRequest::setMemberArns(const QList &member_arns) {
    m_member_arns = member_arns;
    m_member_arns_isSet = true;
}

bool OAIBatchCreateChannelMembershipRequest::is_member_arns_Set() const{
    return m_member_arns_isSet;
}

bool OAIBatchCreateChannelMembershipRequest::is_member_arns_Valid() const{
    return m_member_arns_isValid;
}

QString OAIBatchCreateChannelMembershipRequest::getSubChannelId() const {
    return m_sub_channel_id;
}
void OAIBatchCreateChannelMembershipRequest::setSubChannelId(const QString &sub_channel_id) {
    m_sub_channel_id = sub_channel_id;
    m_sub_channel_id_isSet = true;
}

bool OAIBatchCreateChannelMembershipRequest::is_sub_channel_id_Set() const{
    return m_sub_channel_id_isSet;
}

bool OAIBatchCreateChannelMembershipRequest::is_sub_channel_id_Valid() const{
    return m_sub_channel_id_isValid;
}

bool OAIBatchCreateChannelMembershipRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchCreateChannelMembershipRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_member_arns_isValid && true;
}

} // namespace OpenAPI
