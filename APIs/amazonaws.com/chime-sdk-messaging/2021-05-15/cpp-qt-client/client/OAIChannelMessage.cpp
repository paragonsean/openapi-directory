/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelMessage::OAIChannelMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelMessage::OAIChannelMessage() {
    this->initializeModel();
}

OAIChannelMessage::~OAIChannelMessage() {}

void OAIChannelMessage::initializeModel() {

    m_channel_arn_isSet = false;
    m_channel_arn_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_created_timestamp_isSet = false;
    m_created_timestamp_isValid = false;

    m_last_edited_timestamp_isSet = false;
    m_last_edited_timestamp_isValid = false;

    m_last_updated_timestamp_isSet = false;
    m_last_updated_timestamp_isValid = false;

    m_sender_isSet = false;
    m_sender_isValid = false;

    m_redacted_isSet = false;
    m_redacted_isValid = false;

    m_persistence_isSet = false;
    m_persistence_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_message_attributes_isSet = false;
    m_message_attributes_isValid = false;

    m_sub_channel_id_isSet = false;
    m_sub_channel_id_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;
}

void OAIChannelMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelMessage::fromJsonObject(QJsonObject json) {

    m_channel_arn_isValid = ::OpenAPI::fromJsonValue(m_channel_arn, json[QString("ChannelArn")]);
    m_channel_arn_isSet = !json[QString("ChannelArn")].isNull() && m_channel_arn_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("MessageId")]);
    m_message_id_isSet = !json[QString("MessageId")].isNull() && m_message_id_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("Content")]);
    m_content_isSet = !json[QString("Content")].isNull() && m_content_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("Metadata")]);
    m_metadata_isSet = !json[QString("Metadata")].isNull() && m_metadata_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_created_timestamp_isValid = ::OpenAPI::fromJsonValue(m_created_timestamp, json[QString("CreatedTimestamp")]);
    m_created_timestamp_isSet = !json[QString("CreatedTimestamp")].isNull() && m_created_timestamp_isValid;

    m_last_edited_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_edited_timestamp, json[QString("LastEditedTimestamp")]);
    m_last_edited_timestamp_isSet = !json[QString("LastEditedTimestamp")].isNull() && m_last_edited_timestamp_isValid;

    m_last_updated_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_updated_timestamp, json[QString("LastUpdatedTimestamp")]);
    m_last_updated_timestamp_isSet = !json[QString("LastUpdatedTimestamp")].isNull() && m_last_updated_timestamp_isValid;

    m_sender_isValid = ::OpenAPI::fromJsonValue(m_sender, json[QString("Sender")]);
    m_sender_isSet = !json[QString("Sender")].isNull() && m_sender_isValid;

    m_redacted_isValid = ::OpenAPI::fromJsonValue(m_redacted, json[QString("Redacted")]);
    m_redacted_isSet = !json[QString("Redacted")].isNull() && m_redacted_isValid;

    m_persistence_isValid = ::OpenAPI::fromJsonValue(m_persistence, json[QString("Persistence")]);
    m_persistence_isSet = !json[QString("Persistence")].isNull() && m_persistence_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_message_attributes_isValid = ::OpenAPI::fromJsonValue(m_message_attributes, json[QString("MessageAttributes")]);
    m_message_attributes_isSet = !json[QString("MessageAttributes")].isNull() && m_message_attributes_isValid;

    m_sub_channel_id_isValid = ::OpenAPI::fromJsonValue(m_sub_channel_id, json[QString("SubChannelId")]);
    m_sub_channel_id_isSet = !json[QString("SubChannelId")].isNull() && m_sub_channel_id_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("ContentType")]);
    m_content_type_isSet = !json[QString("ContentType")].isNull() && m_content_type_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("Target")]);
    m_target_isSet = !json[QString("Target")].isNull() && m_target_isValid;
}

QString OAIChannelMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_arn_isSet) {
        obj.insert(QString("ChannelArn"), ::OpenAPI::toJsonValue(m_channel_arn));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("MessageId"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_content_isSet) {
        obj.insert(QString("Content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("Metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_created_timestamp_isSet) {
        obj.insert(QString("CreatedTimestamp"), ::OpenAPI::toJsonValue(m_created_timestamp));
    }
    if (m_last_edited_timestamp_isSet) {
        obj.insert(QString("LastEditedTimestamp"), ::OpenAPI::toJsonValue(m_last_edited_timestamp));
    }
    if (m_last_updated_timestamp_isSet) {
        obj.insert(QString("LastUpdatedTimestamp"), ::OpenAPI::toJsonValue(m_last_updated_timestamp));
    }
    if (m_sender.isSet()) {
        obj.insert(QString("Sender"), ::OpenAPI::toJsonValue(m_sender));
    }
    if (m_redacted_isSet) {
        obj.insert(QString("Redacted"), ::OpenAPI::toJsonValue(m_redacted));
    }
    if (m_persistence.isSet()) {
        obj.insert(QString("Persistence"), ::OpenAPI::toJsonValue(m_persistence));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_message_attributes.isSet()) {
        obj.insert(QString("MessageAttributes"), ::OpenAPI::toJsonValue(m_message_attributes));
    }
    if (m_sub_channel_id_isSet) {
        obj.insert(QString("SubChannelId"), ::OpenAPI::toJsonValue(m_sub_channel_id));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("ContentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_target.isSet()) {
        obj.insert(QString("Target"), ::OpenAPI::toJsonValue(m_target));
    }
    return obj;
}

QString OAIChannelMessage::getChannelArn() const {
    return m_channel_arn;
}
void OAIChannelMessage::setChannelArn(const QString &channel_arn) {
    m_channel_arn = channel_arn;
    m_channel_arn_isSet = true;
}

bool OAIChannelMessage::is_channel_arn_Set() const{
    return m_channel_arn_isSet;
}

bool OAIChannelMessage::is_channel_arn_Valid() const{
    return m_channel_arn_isValid;
}

QString OAIChannelMessage::getMessageId() const {
    return m_message_id;
}
void OAIChannelMessage::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIChannelMessage::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIChannelMessage::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QString OAIChannelMessage::getContent() const {
    return m_content;
}
void OAIChannelMessage::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIChannelMessage::is_content_Set() const{
    return m_content_isSet;
}

bool OAIChannelMessage::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIChannelMessage::getMetadata() const {
    return m_metadata;
}
void OAIChannelMessage::setMetadata(const QString &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIChannelMessage::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIChannelMessage::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIChannelMessageType OAIChannelMessage::getType() const {
    return m_type;
}
void OAIChannelMessage::setType(const OAIChannelMessageType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIChannelMessage::is_type_Set() const{
    return m_type_isSet;
}

bool OAIChannelMessage::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIChannelMessage::getCreatedTimestamp() const {
    return m_created_timestamp;
}
void OAIChannelMessage::setCreatedTimestamp(const QDateTime &created_timestamp) {
    m_created_timestamp = created_timestamp;
    m_created_timestamp_isSet = true;
}

bool OAIChannelMessage::is_created_timestamp_Set() const{
    return m_created_timestamp_isSet;
}

bool OAIChannelMessage::is_created_timestamp_Valid() const{
    return m_created_timestamp_isValid;
}

QDateTime OAIChannelMessage::getLastEditedTimestamp() const {
    return m_last_edited_timestamp;
}
void OAIChannelMessage::setLastEditedTimestamp(const QDateTime &last_edited_timestamp) {
    m_last_edited_timestamp = last_edited_timestamp;
    m_last_edited_timestamp_isSet = true;
}

bool OAIChannelMessage::is_last_edited_timestamp_Set() const{
    return m_last_edited_timestamp_isSet;
}

bool OAIChannelMessage::is_last_edited_timestamp_Valid() const{
    return m_last_edited_timestamp_isValid;
}

QDateTime OAIChannelMessage::getLastUpdatedTimestamp() const {
    return m_last_updated_timestamp;
}
void OAIChannelMessage::setLastUpdatedTimestamp(const QDateTime &last_updated_timestamp) {
    m_last_updated_timestamp = last_updated_timestamp;
    m_last_updated_timestamp_isSet = true;
}

bool OAIChannelMessage::is_last_updated_timestamp_Set() const{
    return m_last_updated_timestamp_isSet;
}

bool OAIChannelMessage::is_last_updated_timestamp_Valid() const{
    return m_last_updated_timestamp_isValid;
}

OAIChannelMessage_Sender OAIChannelMessage::getSender() const {
    return m_sender;
}
void OAIChannelMessage::setSender(const OAIChannelMessage_Sender &sender) {
    m_sender = sender;
    m_sender_isSet = true;
}

bool OAIChannelMessage::is_sender_Set() const{
    return m_sender_isSet;
}

bool OAIChannelMessage::is_sender_Valid() const{
    return m_sender_isValid;
}

bool OAIChannelMessage::getRedacted() const {
    return m_redacted;
}
void OAIChannelMessage::setRedacted(const bool &redacted) {
    m_redacted = redacted;
    m_redacted_isSet = true;
}

bool OAIChannelMessage::is_redacted_Set() const{
    return m_redacted_isSet;
}

bool OAIChannelMessage::is_redacted_Valid() const{
    return m_redacted_isValid;
}

OAIChannelMessagePersistenceType OAIChannelMessage::getPersistence() const {
    return m_persistence;
}
void OAIChannelMessage::setPersistence(const OAIChannelMessagePersistenceType &persistence) {
    m_persistence = persistence;
    m_persistence_isSet = true;
}

bool OAIChannelMessage::is_persistence_Set() const{
    return m_persistence_isSet;
}

bool OAIChannelMessage::is_persistence_Valid() const{
    return m_persistence_isValid;
}

OAISendChannelMessageResponse_Status OAIChannelMessage::getStatus() const {
    return m_status;
}
void OAIChannelMessage::setStatus(const OAISendChannelMessageResponse_Status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIChannelMessage::is_status_Set() const{
    return m_status_isSet;
}

bool OAIChannelMessage::is_status_Valid() const{
    return m_status_isValid;
}

QMap OAIChannelMessage::getMessageAttributes() const {
    return m_message_attributes;
}
void OAIChannelMessage::setMessageAttributes(const QMap &message_attributes) {
    m_message_attributes = message_attributes;
    m_message_attributes_isSet = true;
}

bool OAIChannelMessage::is_message_attributes_Set() const{
    return m_message_attributes_isSet;
}

bool OAIChannelMessage::is_message_attributes_Valid() const{
    return m_message_attributes_isValid;
}

QString OAIChannelMessage::getSubChannelId() const {
    return m_sub_channel_id;
}
void OAIChannelMessage::setSubChannelId(const QString &sub_channel_id) {
    m_sub_channel_id = sub_channel_id;
    m_sub_channel_id_isSet = true;
}

bool OAIChannelMessage::is_sub_channel_id_Set() const{
    return m_sub_channel_id_isSet;
}

bool OAIChannelMessage::is_sub_channel_id_Valid() const{
    return m_sub_channel_id_isValid;
}

QString OAIChannelMessage::getContentType() const {
    return m_content_type;
}
void OAIChannelMessage::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIChannelMessage::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIChannelMessage::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QList OAIChannelMessage::getTarget() const {
    return m_target;
}
void OAIChannelMessage::setTarget(const QList &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIChannelMessage::is_target_Set() const{
    return m_target_isSet;
}

bool OAIChannelMessage::is_target_Valid() const{
    return m_target_isValid;
}

bool OAIChannelMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_edited_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redacted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_persistence.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
