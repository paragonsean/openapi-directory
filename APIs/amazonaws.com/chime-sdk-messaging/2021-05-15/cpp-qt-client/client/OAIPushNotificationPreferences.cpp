/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPushNotificationPreferences.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPushNotificationPreferences::OAIPushNotificationPreferences(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPushNotificationPreferences::OAIPushNotificationPreferences() {
    this->initializeModel();
}

OAIPushNotificationPreferences::~OAIPushNotificationPreferences() {}

void OAIPushNotificationPreferences::initializeModel() {

    m_allow_notifications_isSet = false;
    m_allow_notifications_isValid = false;

    m_filter_rule_isSet = false;
    m_filter_rule_isValid = false;
}

void OAIPushNotificationPreferences::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPushNotificationPreferences::fromJsonObject(QJsonObject json) {

    m_allow_notifications_isValid = ::OpenAPI::fromJsonValue(m_allow_notifications, json[QString("AllowNotifications")]);
    m_allow_notifications_isSet = !json[QString("AllowNotifications")].isNull() && m_allow_notifications_isValid;

    m_filter_rule_isValid = ::OpenAPI::fromJsonValue(m_filter_rule, json[QString("FilterRule")]);
    m_filter_rule_isSet = !json[QString("FilterRule")].isNull() && m_filter_rule_isValid;
}

QString OAIPushNotificationPreferences::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPushNotificationPreferences::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_notifications.isSet()) {
        obj.insert(QString("AllowNotifications"), ::OpenAPI::toJsonValue(m_allow_notifications));
    }
    if (m_filter_rule_isSet) {
        obj.insert(QString("FilterRule"), ::OpenAPI::toJsonValue(m_filter_rule));
    }
    return obj;
}

OAIAllowNotifications OAIPushNotificationPreferences::getAllowNotifications() const {
    return m_allow_notifications;
}
void OAIPushNotificationPreferences::setAllowNotifications(const OAIAllowNotifications &allow_notifications) {
    m_allow_notifications = allow_notifications;
    m_allow_notifications_isSet = true;
}

bool OAIPushNotificationPreferences::is_allow_notifications_Set() const{
    return m_allow_notifications_isSet;
}

bool OAIPushNotificationPreferences::is_allow_notifications_Valid() const{
    return m_allow_notifications_isValid;
}

QString OAIPushNotificationPreferences::getFilterRule() const {
    return m_filter_rule;
}
void OAIPushNotificationPreferences::setFilterRule(const QString &filter_rule) {
    m_filter_rule = filter_rule;
    m_filter_rule_isSet = true;
}

bool OAIPushNotificationPreferences::is_filter_rule_Set() const{
    return m_filter_rule_isSet;
}

bool OAIPushNotificationPreferences::is_filter_rule_Valid() const{
    return m_filter_rule_isValid;
}

bool OAIPushNotificationPreferences::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_notifications.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_rule_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPushNotificationPreferences::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_allow_notifications_isValid && true;
}

} // namespace OpenAPI
