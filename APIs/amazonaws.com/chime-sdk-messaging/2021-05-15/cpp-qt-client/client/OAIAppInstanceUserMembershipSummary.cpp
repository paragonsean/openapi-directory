/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppInstanceUserMembershipSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppInstanceUserMembershipSummary::OAIAppInstanceUserMembershipSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppInstanceUserMembershipSummary::OAIAppInstanceUserMembershipSummary() {
    this->initializeModel();
}

OAIAppInstanceUserMembershipSummary::~OAIAppInstanceUserMembershipSummary() {}

void OAIAppInstanceUserMembershipSummary::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_read_marker_timestamp_isSet = false;
    m_read_marker_timestamp_isValid = false;

    m_sub_channel_id_isSet = false;
    m_sub_channel_id_isValid = false;
}

void OAIAppInstanceUserMembershipSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppInstanceUserMembershipSummary::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_read_marker_timestamp_isValid = ::OpenAPI::fromJsonValue(m_read_marker_timestamp, json[QString("ReadMarkerTimestamp")]);
    m_read_marker_timestamp_isSet = !json[QString("ReadMarkerTimestamp")].isNull() && m_read_marker_timestamp_isValid;

    m_sub_channel_id_isValid = ::OpenAPI::fromJsonValue(m_sub_channel_id, json[QString("SubChannelId")]);
    m_sub_channel_id_isSet = !json[QString("SubChannelId")].isNull() && m_sub_channel_id_isValid;
}

QString OAIAppInstanceUserMembershipSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppInstanceUserMembershipSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_read_marker_timestamp_isSet) {
        obj.insert(QString("ReadMarkerTimestamp"), ::OpenAPI::toJsonValue(m_read_marker_timestamp));
    }
    if (m_sub_channel_id_isSet) {
        obj.insert(QString("SubChannelId"), ::OpenAPI::toJsonValue(m_sub_channel_id));
    }
    return obj;
}

OAIChannelMembershipType OAIAppInstanceUserMembershipSummary::getType() const {
    return m_type;
}
void OAIAppInstanceUserMembershipSummary::setType(const OAIChannelMembershipType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAppInstanceUserMembershipSummary::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAppInstanceUserMembershipSummary::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIAppInstanceUserMembershipSummary::getReadMarkerTimestamp() const {
    return m_read_marker_timestamp;
}
void OAIAppInstanceUserMembershipSummary::setReadMarkerTimestamp(const QDateTime &read_marker_timestamp) {
    m_read_marker_timestamp = read_marker_timestamp;
    m_read_marker_timestamp_isSet = true;
}

bool OAIAppInstanceUserMembershipSummary::is_read_marker_timestamp_Set() const{
    return m_read_marker_timestamp_isSet;
}

bool OAIAppInstanceUserMembershipSummary::is_read_marker_timestamp_Valid() const{
    return m_read_marker_timestamp_isValid;
}

QString OAIAppInstanceUserMembershipSummary::getSubChannelId() const {
    return m_sub_channel_id;
}
void OAIAppInstanceUserMembershipSummary::setSubChannelId(const QString &sub_channel_id) {
    m_sub_channel_id = sub_channel_id;
    m_sub_channel_id_isSet = true;
}

bool OAIAppInstanceUserMembershipSummary::is_sub_channel_id_Set() const{
    return m_sub_channel_id_isSet;
}

bool OAIAppInstanceUserMembershipSummary::is_sub_channel_id_Valid() const{
    return m_sub_channel_id_isValid;
}

bool OAIAppInstanceUserMembershipSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_marker_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppInstanceUserMembershipSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
