/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateChannelMessageResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateChannelMessageResponse::OAIUpdateChannelMessageResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateChannelMessageResponse::OAIUpdateChannelMessageResponse() {
    this->initializeModel();
}

OAIUpdateChannelMessageResponse::~OAIUpdateChannelMessageResponse() {}

void OAIUpdateChannelMessageResponse::initializeModel() {

    m_channel_arn_isSet = false;
    m_channel_arn_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_sub_channel_id_isSet = false;
    m_sub_channel_id_isValid = false;
}

void OAIUpdateChannelMessageResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateChannelMessageResponse::fromJsonObject(QJsonObject json) {

    m_channel_arn_isValid = ::OpenAPI::fromJsonValue(m_channel_arn, json[QString("ChannelArn")]);
    m_channel_arn_isSet = !json[QString("ChannelArn")].isNull() && m_channel_arn_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("MessageId")]);
    m_message_id_isSet = !json[QString("MessageId")].isNull() && m_message_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_sub_channel_id_isValid = ::OpenAPI::fromJsonValue(m_sub_channel_id, json[QString("SubChannelId")]);
    m_sub_channel_id_isSet = !json[QString("SubChannelId")].isNull() && m_sub_channel_id_isValid;
}

QString OAIUpdateChannelMessageResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateChannelMessageResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_arn_isSet) {
        obj.insert(QString("ChannelArn"), ::OpenAPI::toJsonValue(m_channel_arn));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("MessageId"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_sub_channel_id_isSet) {
        obj.insert(QString("SubChannelId"), ::OpenAPI::toJsonValue(m_sub_channel_id));
    }
    return obj;
}

QString OAIUpdateChannelMessageResponse::getChannelArn() const {
    return m_channel_arn;
}
void OAIUpdateChannelMessageResponse::setChannelArn(const QString &channel_arn) {
    m_channel_arn = channel_arn;
    m_channel_arn_isSet = true;
}

bool OAIUpdateChannelMessageResponse::is_channel_arn_Set() const{
    return m_channel_arn_isSet;
}

bool OAIUpdateChannelMessageResponse::is_channel_arn_Valid() const{
    return m_channel_arn_isValid;
}

QString OAIUpdateChannelMessageResponse::getMessageId() const {
    return m_message_id;
}
void OAIUpdateChannelMessageResponse::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIUpdateChannelMessageResponse::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIUpdateChannelMessageResponse::is_message_id_Valid() const{
    return m_message_id_isValid;
}

OAIUpdateChannelMessageResponse_Status OAIUpdateChannelMessageResponse::getStatus() const {
    return m_status;
}
void OAIUpdateChannelMessageResponse::setStatus(const OAIUpdateChannelMessageResponse_Status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUpdateChannelMessageResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUpdateChannelMessageResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIUpdateChannelMessageResponse::getSubChannelId() const {
    return m_sub_channel_id;
}
void OAIUpdateChannelMessageResponse::setSubChannelId(const QString &sub_channel_id) {
    m_sub_channel_id = sub_channel_id;
    m_sub_channel_id_isSet = true;
}

bool OAIUpdateChannelMessageResponse::is_sub_channel_id_Set() const{
    return m_sub_channel_id_isSet;
}

bool OAIUpdateChannelMessageResponse::is_sub_channel_id_Valid() const{
    return m_sub_channel_id_isValid;
}

bool OAIUpdateChannelMessageResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateChannelMessageResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
