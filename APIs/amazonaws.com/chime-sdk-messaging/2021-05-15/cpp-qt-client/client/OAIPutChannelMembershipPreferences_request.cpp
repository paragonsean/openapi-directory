/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutChannelMembershipPreferences_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutChannelMembershipPreferences_request::OAIPutChannelMembershipPreferences_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutChannelMembershipPreferences_request::OAIPutChannelMembershipPreferences_request() {
    this->initializeModel();
}

OAIPutChannelMembershipPreferences_request::~OAIPutChannelMembershipPreferences_request() {}

void OAIPutChannelMembershipPreferences_request::initializeModel() {

    m_preferences_isSet = false;
    m_preferences_isValid = false;
}

void OAIPutChannelMembershipPreferences_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutChannelMembershipPreferences_request::fromJsonObject(QJsonObject json) {

    m_preferences_isValid = ::OpenAPI::fromJsonValue(m_preferences, json[QString("Preferences")]);
    m_preferences_isSet = !json[QString("Preferences")].isNull() && m_preferences_isValid;
}

QString OAIPutChannelMembershipPreferences_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutChannelMembershipPreferences_request::asJsonObject() const {
    QJsonObject obj;
    if (m_preferences.isSet()) {
        obj.insert(QString("Preferences"), ::OpenAPI::toJsonValue(m_preferences));
    }
    return obj;
}

OAIPutChannelMembershipPreferences_request_Preferences OAIPutChannelMembershipPreferences_request::getPreferences() const {
    return m_preferences;
}
void OAIPutChannelMembershipPreferences_request::setPreferences(const OAIPutChannelMembershipPreferences_request_Preferences &preferences) {
    m_preferences = preferences;
    m_preferences_isSet = true;
}

bool OAIPutChannelMembershipPreferences_request::is_preferences_Set() const{
    return m_preferences_isSet;
}

bool OAIPutChannelMembershipPreferences_request::is_preferences_Valid() const{
    return m_preferences_isValid;
}

bool OAIPutChannelMembershipPreferences_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_preferences.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutChannelMembershipPreferences_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_preferences_isValid && true;
}

} // namespace OpenAPI
