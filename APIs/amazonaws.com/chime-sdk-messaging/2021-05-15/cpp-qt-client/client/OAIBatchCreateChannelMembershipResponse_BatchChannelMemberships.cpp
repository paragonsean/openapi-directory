/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchCreateChannelMembershipResponse_BatchChannelMemberships.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchCreateChannelMembershipResponse_BatchChannelMemberships::OAIBatchCreateChannelMembershipResponse_BatchChannelMemberships(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchCreateChannelMembershipResponse_BatchChannelMemberships::OAIBatchCreateChannelMembershipResponse_BatchChannelMemberships() {
    this->initializeModel();
}

OAIBatchCreateChannelMembershipResponse_BatchChannelMemberships::~OAIBatchCreateChannelMembershipResponse_BatchChannelMemberships() {}

void OAIBatchCreateChannelMembershipResponse_BatchChannelMemberships::initializeModel() {

    m_invited_by_isSet = false;
    m_invited_by_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_members_isSet = false;
    m_members_isValid = false;

    m_channel_arn_isSet = false;
    m_channel_arn_isValid = false;

    m_sub_channel_id_isSet = false;
    m_sub_channel_id_isValid = false;
}

void OAIBatchCreateChannelMembershipResponse_BatchChannelMemberships::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchCreateChannelMembershipResponse_BatchChannelMemberships::fromJsonObject(QJsonObject json) {

    m_invited_by_isValid = ::OpenAPI::fromJsonValue(m_invited_by, json[QString("InvitedBy")]);
    m_invited_by_isSet = !json[QString("InvitedBy")].isNull() && m_invited_by_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_members_isValid = ::OpenAPI::fromJsonValue(m_members, json[QString("Members")]);
    m_members_isSet = !json[QString("Members")].isNull() && m_members_isValid;

    m_channel_arn_isValid = ::OpenAPI::fromJsonValue(m_channel_arn, json[QString("ChannelArn")]);
    m_channel_arn_isSet = !json[QString("ChannelArn")].isNull() && m_channel_arn_isValid;

    m_sub_channel_id_isValid = ::OpenAPI::fromJsonValue(m_sub_channel_id, json[QString("SubChannelId")]);
    m_sub_channel_id_isSet = !json[QString("SubChannelId")].isNull() && m_sub_channel_id_isValid;
}

QString OAIBatchCreateChannelMembershipResponse_BatchChannelMemberships::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchCreateChannelMembershipResponse_BatchChannelMemberships::asJsonObject() const {
    QJsonObject obj;
    if (m_invited_by.isSet()) {
        obj.insert(QString("InvitedBy"), ::OpenAPI::toJsonValue(m_invited_by));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_members.isSet()) {
        obj.insert(QString("Members"), ::OpenAPI::toJsonValue(m_members));
    }
    if (m_channel_arn_isSet) {
        obj.insert(QString("ChannelArn"), ::OpenAPI::toJsonValue(m_channel_arn));
    }
    if (m_sub_channel_id_isSet) {
        obj.insert(QString("SubChannelId"), ::OpenAPI::toJsonValue(m_sub_channel_id));
    }
    return obj;
}

OAIBatchChannelMemberships_InvitedBy OAIBatchCreateChannelMembershipResponse_BatchChannelMemberships::getInvitedBy() const {
    return m_invited_by;
}
void OAIBatchCreateChannelMembershipResponse_BatchChannelMemberships::setInvitedBy(const OAIBatchChannelMemberships_InvitedBy &invited_by) {
    m_invited_by = invited_by;
    m_invited_by_isSet = true;
}

bool OAIBatchCreateChannelMembershipResponse_BatchChannelMemberships::is_invited_by_Set() const{
    return m_invited_by_isSet;
}

bool OAIBatchCreateChannelMembershipResponse_BatchChannelMemberships::is_invited_by_Valid() const{
    return m_invited_by_isValid;
}

OAIChannelMembershipType OAIBatchCreateChannelMembershipResponse_BatchChannelMemberships::getType() const {
    return m_type;
}
void OAIBatchCreateChannelMembershipResponse_BatchChannelMemberships::setType(const OAIChannelMembershipType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBatchCreateChannelMembershipResponse_BatchChannelMemberships::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBatchCreateChannelMembershipResponse_BatchChannelMemberships::is_type_Valid() const{
    return m_type_isValid;
}

QList OAIBatchCreateChannelMembershipResponse_BatchChannelMemberships::getMembers() const {
    return m_members;
}
void OAIBatchCreateChannelMembershipResponse_BatchChannelMemberships::setMembers(const QList &members) {
    m_members = members;
    m_members_isSet = true;
}

bool OAIBatchCreateChannelMembershipResponse_BatchChannelMemberships::is_members_Set() const{
    return m_members_isSet;
}

bool OAIBatchCreateChannelMembershipResponse_BatchChannelMemberships::is_members_Valid() const{
    return m_members_isValid;
}

QString OAIBatchCreateChannelMembershipResponse_BatchChannelMemberships::getChannelArn() const {
    return m_channel_arn;
}
void OAIBatchCreateChannelMembershipResponse_BatchChannelMemberships::setChannelArn(const QString &channel_arn) {
    m_channel_arn = channel_arn;
    m_channel_arn_isSet = true;
}

bool OAIBatchCreateChannelMembershipResponse_BatchChannelMemberships::is_channel_arn_Set() const{
    return m_channel_arn_isSet;
}

bool OAIBatchCreateChannelMembershipResponse_BatchChannelMemberships::is_channel_arn_Valid() const{
    return m_channel_arn_isValid;
}

QString OAIBatchCreateChannelMembershipResponse_BatchChannelMemberships::getSubChannelId() const {
    return m_sub_channel_id;
}
void OAIBatchCreateChannelMembershipResponse_BatchChannelMemberships::setSubChannelId(const QString &sub_channel_id) {
    m_sub_channel_id = sub_channel_id;
    m_sub_channel_id_isSet = true;
}

bool OAIBatchCreateChannelMembershipResponse_BatchChannelMemberships::is_sub_channel_id_Set() const{
    return m_sub_channel_id_isSet;
}

bool OAIBatchCreateChannelMembershipResponse_BatchChannelMemberships::is_sub_channel_id_Valid() const{
    return m_sub_channel_id_isValid;
}

bool OAIBatchCreateChannelMembershipResponse_BatchChannelMemberships::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_invited_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_members.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchCreateChannelMembershipResponse_BatchChannelMemberships::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
