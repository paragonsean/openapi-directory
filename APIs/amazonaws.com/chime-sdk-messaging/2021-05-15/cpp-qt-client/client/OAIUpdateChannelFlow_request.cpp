/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateChannelFlow_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateChannelFlow_request::OAIUpdateChannelFlow_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateChannelFlow_request::OAIUpdateChannelFlow_request() {
    this->initializeModel();
}

OAIUpdateChannelFlow_request::~OAIUpdateChannelFlow_request() {}

void OAIUpdateChannelFlow_request::initializeModel() {

    m_processors_isSet = false;
    m_processors_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIUpdateChannelFlow_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateChannelFlow_request::fromJsonObject(QJsonObject json) {

    m_processors_isValid = ::OpenAPI::fromJsonValue(m_processors, json[QString("Processors")]);
    m_processors_isSet = !json[QString("Processors")].isNull() && m_processors_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;
}

QString OAIUpdateChannelFlow_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateChannelFlow_request::asJsonObject() const {
    QJsonObject obj;
    if (m_processors.size() > 0) {
        obj.insert(QString("Processors"), ::OpenAPI::toJsonValue(m_processors));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QList<OAIProcessor> OAIUpdateChannelFlow_request::getProcessors() const {
    return m_processors;
}
void OAIUpdateChannelFlow_request::setProcessors(const QList<OAIProcessor> &processors) {
    m_processors = processors;
    m_processors_isSet = true;
}

bool OAIUpdateChannelFlow_request::is_processors_Set() const{
    return m_processors_isSet;
}

bool OAIUpdateChannelFlow_request::is_processors_Valid() const{
    return m_processors_isValid;
}

QString OAIUpdateChannelFlow_request::getName() const {
    return m_name;
}
void OAIUpdateChannelFlow_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateChannelFlow_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateChannelFlow_request::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIUpdateChannelFlow_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_processors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateChannelFlow_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_processors_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
