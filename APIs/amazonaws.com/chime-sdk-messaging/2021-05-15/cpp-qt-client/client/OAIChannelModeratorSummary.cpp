/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelModeratorSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelModeratorSummary::OAIChannelModeratorSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelModeratorSummary::OAIChannelModeratorSummary() {
    this->initializeModel();
}

OAIChannelModeratorSummary::~OAIChannelModeratorSummary() {}

void OAIChannelModeratorSummary::initializeModel() {

    m_moderator_isSet = false;
    m_moderator_isValid = false;
}

void OAIChannelModeratorSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelModeratorSummary::fromJsonObject(QJsonObject json) {

    m_moderator_isValid = ::OpenAPI::fromJsonValue(m_moderator, json[QString("Moderator")]);
    m_moderator_isSet = !json[QString("Moderator")].isNull() && m_moderator_isValid;
}

QString OAIChannelModeratorSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelModeratorSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_moderator.isSet()) {
        obj.insert(QString("Moderator"), ::OpenAPI::toJsonValue(m_moderator));
    }
    return obj;
}

OAIChannelModeratorSummary_Moderator OAIChannelModeratorSummary::getModerator() const {
    return m_moderator;
}
void OAIChannelModeratorSummary::setModerator(const OAIChannelModeratorSummary_Moderator &moderator) {
    m_moderator = moderator;
    m_moderator_isSet = true;
}

bool OAIChannelModeratorSummary::is_moderator_Set() const{
    return m_moderator_isSet;
}

bool OAIChannelModeratorSummary::is_moderator_Valid() const{
    return m_moderator_isValid;
}

bool OAIChannelModeratorSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_moderator.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelModeratorSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
