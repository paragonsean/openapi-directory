/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutChannelExpirationSettingsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutChannelExpirationSettingsResponse::OAIPutChannelExpirationSettingsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutChannelExpirationSettingsResponse::OAIPutChannelExpirationSettingsResponse() {
    this->initializeModel();
}

OAIPutChannelExpirationSettingsResponse::~OAIPutChannelExpirationSettingsResponse() {}

void OAIPutChannelExpirationSettingsResponse::initializeModel() {

    m_channel_arn_isSet = false;
    m_channel_arn_isValid = false;

    m_expiration_settings_isSet = false;
    m_expiration_settings_isValid = false;
}

void OAIPutChannelExpirationSettingsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutChannelExpirationSettingsResponse::fromJsonObject(QJsonObject json) {

    m_channel_arn_isValid = ::OpenAPI::fromJsonValue(m_channel_arn, json[QString("ChannelArn")]);
    m_channel_arn_isSet = !json[QString("ChannelArn")].isNull() && m_channel_arn_isValid;

    m_expiration_settings_isValid = ::OpenAPI::fromJsonValue(m_expiration_settings, json[QString("ExpirationSettings")]);
    m_expiration_settings_isSet = !json[QString("ExpirationSettings")].isNull() && m_expiration_settings_isValid;
}

QString OAIPutChannelExpirationSettingsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutChannelExpirationSettingsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_arn_isSet) {
        obj.insert(QString("ChannelArn"), ::OpenAPI::toJsonValue(m_channel_arn));
    }
    if (m_expiration_settings.isSet()) {
        obj.insert(QString("ExpirationSettings"), ::OpenAPI::toJsonValue(m_expiration_settings));
    }
    return obj;
}

QString OAIPutChannelExpirationSettingsResponse::getChannelArn() const {
    return m_channel_arn;
}
void OAIPutChannelExpirationSettingsResponse::setChannelArn(const QString &channel_arn) {
    m_channel_arn = channel_arn;
    m_channel_arn_isSet = true;
}

bool OAIPutChannelExpirationSettingsResponse::is_channel_arn_Set() const{
    return m_channel_arn_isSet;
}

bool OAIPutChannelExpirationSettingsResponse::is_channel_arn_Valid() const{
    return m_channel_arn_isValid;
}

OAIPutChannelExpirationSettingsResponse_ExpirationSettings OAIPutChannelExpirationSettingsResponse::getExpirationSettings() const {
    return m_expiration_settings;
}
void OAIPutChannelExpirationSettingsResponse::setExpirationSettings(const OAIPutChannelExpirationSettingsResponse_ExpirationSettings &expiration_settings) {
    m_expiration_settings = expiration_settings;
    m_expiration_settings_isSet = true;
}

bool OAIPutChannelExpirationSettingsResponse::is_expiration_settings_Set() const{
    return m_expiration_settings_isSet;
}

bool OAIPutChannelExpirationSettingsResponse::is_expiration_settings_Valid() const{
    return m_expiration_settings_isValid;
}

bool OAIPutChannelExpirationSettingsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutChannelExpirationSettingsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
