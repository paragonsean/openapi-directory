/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILambdaConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILambdaConfiguration::OAILambdaConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILambdaConfiguration::OAILambdaConfiguration() {
    this->initializeModel();
}

OAILambdaConfiguration::~OAILambdaConfiguration() {}

void OAILambdaConfiguration::initializeModel() {

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_invocation_type_isSet = false;
    m_invocation_type_isValid = false;
}

void OAILambdaConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILambdaConfiguration::fromJsonObject(QJsonObject json) {

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceArn")]);
    m_resource_arn_isSet = !json[QString("ResourceArn")].isNull() && m_resource_arn_isValid;

    m_invocation_type_isValid = ::OpenAPI::fromJsonValue(m_invocation_type, json[QString("InvocationType")]);
    m_invocation_type_isSet = !json[QString("InvocationType")].isNull() && m_invocation_type_isValid;
}

QString OAILambdaConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILambdaConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_invocation_type.isSet()) {
        obj.insert(QString("InvocationType"), ::OpenAPI::toJsonValue(m_invocation_type));
    }
    return obj;
}

QString OAILambdaConfiguration::getResourceArn() const {
    return m_resource_arn;
}
void OAILambdaConfiguration::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAILambdaConfiguration::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAILambdaConfiguration::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

OAIInvocationType OAILambdaConfiguration::getInvocationType() const {
    return m_invocation_type;
}
void OAILambdaConfiguration::setInvocationType(const OAIInvocationType &invocation_type) {
    m_invocation_type = invocation_type;
    m_invocation_type_isSet = true;
}

bool OAILambdaConfiguration::is_invocation_type_Set() const{
    return m_invocation_type_isSet;
}

bool OAILambdaConfiguration::is_invocation_type_Valid() const{
    return m_invocation_type_isValid;
}

bool OAILambdaConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invocation_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILambdaConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_arn_isValid && m_invocation_type_isValid && true;
}

} // namespace OpenAPI
