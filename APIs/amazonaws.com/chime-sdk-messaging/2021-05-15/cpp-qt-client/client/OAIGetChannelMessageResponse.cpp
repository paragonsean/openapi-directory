/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetChannelMessageResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetChannelMessageResponse::OAIGetChannelMessageResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetChannelMessageResponse::OAIGetChannelMessageResponse() {
    this->initializeModel();
}

OAIGetChannelMessageResponse::~OAIGetChannelMessageResponse() {}

void OAIGetChannelMessageResponse::initializeModel() {

    m_channel_message_isSet = false;
    m_channel_message_isValid = false;
}

void OAIGetChannelMessageResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetChannelMessageResponse::fromJsonObject(QJsonObject json) {

    m_channel_message_isValid = ::OpenAPI::fromJsonValue(m_channel_message, json[QString("ChannelMessage")]);
    m_channel_message_isSet = !json[QString("ChannelMessage")].isNull() && m_channel_message_isValid;
}

QString OAIGetChannelMessageResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetChannelMessageResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_message.isSet()) {
        obj.insert(QString("ChannelMessage"), ::OpenAPI::toJsonValue(m_channel_message));
    }
    return obj;
}

OAIGetChannelMessageResponse_ChannelMessage OAIGetChannelMessageResponse::getChannelMessage() const {
    return m_channel_message;
}
void OAIGetChannelMessageResponse::setChannelMessage(const OAIGetChannelMessageResponse_ChannelMessage &channel_message) {
    m_channel_message = channel_message;
    m_channel_message_isSet = true;
}

bool OAIGetChannelMessageResponse::is_channel_message_Set() const{
    return m_channel_message_isSet;
}

bool OAIGetChannelMessageResponse::is_channel_message_Valid() const{
    return m_channel_message_isValid;
}

bool OAIGetChannelMessageResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_message.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetChannelMessageResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
