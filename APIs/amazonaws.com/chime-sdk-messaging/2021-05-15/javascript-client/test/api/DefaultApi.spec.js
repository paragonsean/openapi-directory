/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonChimeSdkMessaging);
  }
}(this, function(expect, AmazonChimeSdkMessaging) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonChimeSdkMessaging.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('associateChannelFlow', function() {
      it('should call associateChannelFlow successfully', function(done) {
        //uncomment below and update the code to test associateChannelFlow
        //instance.associateChannelFlow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchCreateChannelMembership', function() {
      it('should call batchCreateChannelMembership successfully', function(done) {
        //uncomment below and update the code to test batchCreateChannelMembership
        //instance.batchCreateChannelMembership(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('channelFlowCallback', function() {
      it('should call channelFlowCallback successfully', function(done) {
        //uncomment below and update the code to test channelFlowCallback
        //instance.channelFlowCallback(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createChannel', function() {
      it('should call createChannel successfully', function(done) {
        //uncomment below and update the code to test createChannel
        //instance.createChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createChannelBan', function() {
      it('should call createChannelBan successfully', function(done) {
        //uncomment below and update the code to test createChannelBan
        //instance.createChannelBan(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createChannelFlow', function() {
      it('should call createChannelFlow successfully', function(done) {
        //uncomment below and update the code to test createChannelFlow
        //instance.createChannelFlow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createChannelMembership', function() {
      it('should call createChannelMembership successfully', function(done) {
        //uncomment below and update the code to test createChannelMembership
        //instance.createChannelMembership(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createChannelModerator', function() {
      it('should call createChannelModerator successfully', function(done) {
        //uncomment below and update the code to test createChannelModerator
        //instance.createChannelModerator(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteChannel', function() {
      it('should call deleteChannel successfully', function(done) {
        //uncomment below and update the code to test deleteChannel
        //instance.deleteChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteChannelBan', function() {
      it('should call deleteChannelBan successfully', function(done) {
        //uncomment below and update the code to test deleteChannelBan
        //instance.deleteChannelBan(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteChannelFlow', function() {
      it('should call deleteChannelFlow successfully', function(done) {
        //uncomment below and update the code to test deleteChannelFlow
        //instance.deleteChannelFlow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteChannelMembership', function() {
      it('should call deleteChannelMembership successfully', function(done) {
        //uncomment below and update the code to test deleteChannelMembership
        //instance.deleteChannelMembership(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteChannelMessage', function() {
      it('should call deleteChannelMessage successfully', function(done) {
        //uncomment below and update the code to test deleteChannelMessage
        //instance.deleteChannelMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteChannelModerator', function() {
      it('should call deleteChannelModerator successfully', function(done) {
        //uncomment below and update the code to test deleteChannelModerator
        //instance.deleteChannelModerator(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteMessagingStreamingConfigurations', function() {
      it('should call deleteMessagingStreamingConfigurations successfully', function(done) {
        //uncomment below and update the code to test deleteMessagingStreamingConfigurations
        //instance.deleteMessagingStreamingConfigurations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeChannel', function() {
      it('should call describeChannel successfully', function(done) {
        //uncomment below and update the code to test describeChannel
        //instance.describeChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeChannelBan', function() {
      it('should call describeChannelBan successfully', function(done) {
        //uncomment below and update the code to test describeChannelBan
        //instance.describeChannelBan(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeChannelFlow', function() {
      it('should call describeChannelFlow successfully', function(done) {
        //uncomment below and update the code to test describeChannelFlow
        //instance.describeChannelFlow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeChannelMembership', function() {
      it('should call describeChannelMembership successfully', function(done) {
        //uncomment below and update the code to test describeChannelMembership
        //instance.describeChannelMembership(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeChannelMembershipForAppInstanceUser', function() {
      it('should call describeChannelMembershipForAppInstanceUser successfully', function(done) {
        //uncomment below and update the code to test describeChannelMembershipForAppInstanceUser
        //instance.describeChannelMembershipForAppInstanceUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeChannelModeratedByAppInstanceUser', function() {
      it('should call describeChannelModeratedByAppInstanceUser successfully', function(done) {
        //uncomment below and update the code to test describeChannelModeratedByAppInstanceUser
        //instance.describeChannelModeratedByAppInstanceUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeChannelModerator', function() {
      it('should call describeChannelModerator successfully', function(done) {
        //uncomment below and update the code to test describeChannelModerator
        //instance.describeChannelModerator(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociateChannelFlow', function() {
      it('should call disassociateChannelFlow successfully', function(done) {
        //uncomment below and update the code to test disassociateChannelFlow
        //instance.disassociateChannelFlow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getChannelMembershipPreferences', function() {
      it('should call getChannelMembershipPreferences successfully', function(done) {
        //uncomment below and update the code to test getChannelMembershipPreferences
        //instance.getChannelMembershipPreferences(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getChannelMessage', function() {
      it('should call getChannelMessage successfully', function(done) {
        //uncomment below and update the code to test getChannelMessage
        //instance.getChannelMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getChannelMessageStatus', function() {
      it('should call getChannelMessageStatus successfully', function(done) {
        //uncomment below and update the code to test getChannelMessageStatus
        //instance.getChannelMessageStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMessagingSessionEndpoint', function() {
      it('should call getMessagingSessionEndpoint successfully', function(done) {
        //uncomment below and update the code to test getMessagingSessionEndpoint
        //instance.getMessagingSessionEndpoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMessagingStreamingConfigurations', function() {
      it('should call getMessagingStreamingConfigurations successfully', function(done) {
        //uncomment below and update the code to test getMessagingStreamingConfigurations
        //instance.getMessagingStreamingConfigurations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listChannelBans', function() {
      it('should call listChannelBans successfully', function(done) {
        //uncomment below and update the code to test listChannelBans
        //instance.listChannelBans(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listChannelFlows', function() {
      it('should call listChannelFlows successfully', function(done) {
        //uncomment below and update the code to test listChannelFlows
        //instance.listChannelFlows(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listChannelMemberships', function() {
      it('should call listChannelMemberships successfully', function(done) {
        //uncomment below and update the code to test listChannelMemberships
        //instance.listChannelMemberships(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listChannelMembershipsForAppInstanceUser', function() {
      it('should call listChannelMembershipsForAppInstanceUser successfully', function(done) {
        //uncomment below and update the code to test listChannelMembershipsForAppInstanceUser
        //instance.listChannelMembershipsForAppInstanceUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listChannelMessages', function() {
      it('should call listChannelMessages successfully', function(done) {
        //uncomment below and update the code to test listChannelMessages
        //instance.listChannelMessages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listChannelModerators', function() {
      it('should call listChannelModerators successfully', function(done) {
        //uncomment below and update the code to test listChannelModerators
        //instance.listChannelModerators(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listChannels', function() {
      it('should call listChannels successfully', function(done) {
        //uncomment below and update the code to test listChannels
        //instance.listChannels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listChannelsAssociatedWithChannelFlow', function() {
      it('should call listChannelsAssociatedWithChannelFlow successfully', function(done) {
        //uncomment below and update the code to test listChannelsAssociatedWithChannelFlow
        //instance.listChannelsAssociatedWithChannelFlow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listChannelsModeratedByAppInstanceUser', function() {
      it('should call listChannelsModeratedByAppInstanceUser successfully', function(done) {
        //uncomment below and update the code to test listChannelsModeratedByAppInstanceUser
        //instance.listChannelsModeratedByAppInstanceUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSubChannels', function() {
      it('should call listSubChannels successfully', function(done) {
        //uncomment below and update the code to test listSubChannels
        //instance.listSubChannels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putChannelExpirationSettings', function() {
      it('should call putChannelExpirationSettings successfully', function(done) {
        //uncomment below and update the code to test putChannelExpirationSettings
        //instance.putChannelExpirationSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putChannelMembershipPreferences', function() {
      it('should call putChannelMembershipPreferences successfully', function(done) {
        //uncomment below and update the code to test putChannelMembershipPreferences
        //instance.putChannelMembershipPreferences(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putMessagingStreamingConfigurations', function() {
      it('should call putMessagingStreamingConfigurations successfully', function(done) {
        //uncomment below and update the code to test putMessagingStreamingConfigurations
        //instance.putMessagingStreamingConfigurations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('redactChannelMessage', function() {
      it('should call redactChannelMessage successfully', function(done) {
        //uncomment below and update the code to test redactChannelMessage
        //instance.redactChannelMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchChannels', function() {
      it('should call searchChannels successfully', function(done) {
        //uncomment below and update the code to test searchChannels
        //instance.searchChannels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendChannelMessage', function() {
      it('should call sendChannelMessage successfully', function(done) {
        //uncomment below and update the code to test sendChannelMessage
        //instance.sendChannelMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateChannel', function() {
      it('should call updateChannel successfully', function(done) {
        //uncomment below and update the code to test updateChannel
        //instance.updateChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateChannelFlow', function() {
      it('should call updateChannelFlow successfully', function(done) {
        //uncomment below and update the code to test updateChannelFlow
        //instance.updateChannelFlow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateChannelMessage', function() {
      it('should call updateChannelMessage successfully', function(done) {
        //uncomment below and update the code to test updateChannelMessage
        //instance.updateChannelMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateChannelReadMarker', function() {
      it('should call updateChannelReadMarker successfully', function(done) {
        //uncomment below and update the code to test updateChannelReadMarker
        //instance.updateChannelReadMarker(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
