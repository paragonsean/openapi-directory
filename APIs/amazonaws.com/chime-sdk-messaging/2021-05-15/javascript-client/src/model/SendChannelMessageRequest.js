/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MessageAttributeValue from './MessageAttributeValue';
import SendChannelMessageRequestPushNotification from './SendChannelMessageRequestPushNotification';
import Target from './Target';

/**
 * The SendChannelMessageRequest model module.
 * @module model/SendChannelMessageRequest
 * @version 2021-05-15
 */
class SendChannelMessageRequest {
    /**
     * Constructs a new <code>SendChannelMessageRequest</code>.
     * @alias module:model/SendChannelMessageRequest
     * @param content {String} The content of the channel message.
     * @param type {module:model/SendChannelMessageRequest.TypeEnum} <p>The type of message, <code>STANDARD</code> or <code>CONTROL</code>.</p> <p> <code>STANDARD</code> messages can be up to 4KB in size and contain metadata. Metadata is arbitrary, and you can use it in a variety of ways, such as containing a link to an attachment.</p> <p> <code>CONTROL</code> messages are limited to 30 bytes and do not contain metadata.</p>
     * @param persistence {module:model/SendChannelMessageRequest.PersistenceEnum} Boolean that controls whether the message is persisted on the back end. Required.
     * @param clientRequestToken {String} The <code>Idempotency</code> token for each client request.
     */
    constructor(content, type, persistence, clientRequestToken) { 
        
        SendChannelMessageRequest.initialize(this, content, type, persistence, clientRequestToken);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, content, type, persistence, clientRequestToken) { 
        obj['Content'] = content;
        obj['Type'] = type;
        obj['Persistence'] = persistence;
        obj['ClientRequestToken'] = clientRequestToken;
    }

    /**
     * Constructs a <code>SendChannelMessageRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SendChannelMessageRequest} obj Optional instance to populate.
     * @return {module:model/SendChannelMessageRequest} The populated <code>SendChannelMessageRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SendChannelMessageRequest();

            if (data.hasOwnProperty('Content')) {
                obj['Content'] = ApiClient.convertToType(data['Content'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
            if (data.hasOwnProperty('Persistence')) {
                obj['Persistence'] = ApiClient.convertToType(data['Persistence'], 'String');
            }
            if (data.hasOwnProperty('Metadata')) {
                obj['Metadata'] = ApiClient.convertToType(data['Metadata'], 'String');
            }
            if (data.hasOwnProperty('ClientRequestToken')) {
                obj['ClientRequestToken'] = ApiClient.convertToType(data['ClientRequestToken'], 'String');
            }
            if (data.hasOwnProperty('PushNotification')) {
                obj['PushNotification'] = SendChannelMessageRequestPushNotification.constructFromObject(data['PushNotification']);
            }
            if (data.hasOwnProperty('MessageAttributes')) {
                obj['MessageAttributes'] = ApiClient.convertToType(data['MessageAttributes'], {'String': MessageAttributeValue});
            }
            if (data.hasOwnProperty('SubChannelId')) {
                obj['SubChannelId'] = ApiClient.convertToType(data['SubChannelId'], 'String');
            }
            if (data.hasOwnProperty('ContentType')) {
                obj['ContentType'] = ApiClient.convertToType(data['ContentType'], 'String');
            }
            if (data.hasOwnProperty('Target')) {
                obj['Target'] = ApiClient.convertToType(data['Target'], [Target]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SendChannelMessageRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SendChannelMessageRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SendChannelMessageRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Content'] && !(typeof data['Content'] === 'string' || data['Content'] instanceof String)) {
            throw new Error("Expected the field `Content` to be a primitive type in the JSON string but got " + data['Content']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }
        // ensure the json data is a string
        if (data['Persistence'] && !(typeof data['Persistence'] === 'string' || data['Persistence'] instanceof String)) {
            throw new Error("Expected the field `Persistence` to be a primitive type in the JSON string but got " + data['Persistence']);
        }
        // ensure the json data is a string
        if (data['Metadata'] && !(typeof data['Metadata'] === 'string' || data['Metadata'] instanceof String)) {
            throw new Error("Expected the field `Metadata` to be a primitive type in the JSON string but got " + data['Metadata']);
        }
        // ensure the json data is a string
        if (data['ClientRequestToken'] && !(typeof data['ClientRequestToken'] === 'string' || data['ClientRequestToken'] instanceof String)) {
            throw new Error("Expected the field `ClientRequestToken` to be a primitive type in the JSON string but got " + data['ClientRequestToken']);
        }
        // validate the optional field `PushNotification`
        if (data['PushNotification']) { // data not null
          SendChannelMessageRequestPushNotification.validateJSON(data['PushNotification']);
        }
        // ensure the json data is a string
        if (data['SubChannelId'] && !(typeof data['SubChannelId'] === 'string' || data['SubChannelId'] instanceof String)) {
            throw new Error("Expected the field `SubChannelId` to be a primitive type in the JSON string but got " + data['SubChannelId']);
        }
        // ensure the json data is a string
        if (data['ContentType'] && !(typeof data['ContentType'] === 'string' || data['ContentType'] instanceof String)) {
            throw new Error("Expected the field `ContentType` to be a primitive type in the JSON string but got " + data['ContentType']);
        }
        if (data['Target']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Target'])) {
                throw new Error("Expected the field `Target` to be an array in the JSON data but got " + data['Target']);
            }
            // validate the optional field `Target` (array)
            for (const item of data['Target']) {
                Target.validateJSON(item);
            };
        }

        return true;
    }


}

SendChannelMessageRequest.RequiredProperties = ["Content", "Type", "Persistence", "ClientRequestToken"];

/**
 * The content of the channel message.
 * @member {String} Content
 */
SendChannelMessageRequest.prototype['Content'] = undefined;

/**
 * <p>The type of message, <code>STANDARD</code> or <code>CONTROL</code>.</p> <p> <code>STANDARD</code> messages can be up to 4KB in size and contain metadata. Metadata is arbitrary, and you can use it in a variety of ways, such as containing a link to an attachment.</p> <p> <code>CONTROL</code> messages are limited to 30 bytes and do not contain metadata.</p>
 * @member {module:model/SendChannelMessageRequest.TypeEnum} Type
 */
SendChannelMessageRequest.prototype['Type'] = undefined;

/**
 * Boolean that controls whether the message is persisted on the back end. Required.
 * @member {module:model/SendChannelMessageRequest.PersistenceEnum} Persistence
 */
SendChannelMessageRequest.prototype['Persistence'] = undefined;

/**
 * The optional metadata for each message.
 * @member {String} Metadata
 */
SendChannelMessageRequest.prototype['Metadata'] = undefined;

/**
 * The <code>Idempotency</code> token for each client request.
 * @member {String} ClientRequestToken
 */
SendChannelMessageRequest.prototype['ClientRequestToken'] = undefined;

/**
 * @member {module:model/SendChannelMessageRequestPushNotification} PushNotification
 */
SendChannelMessageRequest.prototype['PushNotification'] = undefined;

/**
 * The attributes for the message, used for message filtering along with a <code>FilterRule</code> defined in the <code>PushNotificationPreferences</code>.
 * @member {Object.<String, module:model/MessageAttributeValue>} MessageAttributes
 */
SendChannelMessageRequest.prototype['MessageAttributes'] = undefined;

/**
 * The ID of the SubChannel in the request.
 * @member {String} SubChannelId
 */
SendChannelMessageRequest.prototype['SubChannelId'] = undefined;

/**
 * The content type of the channel message.
 * @member {String} ContentType
 */
SendChannelMessageRequest.prototype['ContentType'] = undefined;

/**
 * The target of a message. Must be a member of the channel, such as another user, a bot, or the sender. Only the target and the sender can view targeted messages. Only users who can see targeted messages can take actions on them. However, administrators can delete targeted messages that they can’t see. 
 * @member {Array.<module:model/Target>} Target
 */
SendChannelMessageRequest.prototype['Target'] = undefined;





/**
 * Allowed values for the <code>Type</code> property.
 * @enum {String}
 * @readonly
 */
SendChannelMessageRequest['TypeEnum'] = {

    /**
     * value: "STANDARD"
     * @const
     */
    "STANDARD": "STANDARD",

    /**
     * value: "CONTROL"
     * @const
     */
    "CONTROL": "CONTROL"
};


/**
 * Allowed values for the <code>Persistence</code> property.
 * @enum {String}
 * @readonly
 */
SendChannelMessageRequest['PersistenceEnum'] = {

    /**
     * value: "PERSISTENT"
     * @const
     */
    "PERSISTENT": "PERSISTENT",

    /**
     * value: "NON_PERSISTENT"
     * @const
     */
    "NON_PERSISTENT": "NON_PERSISTENT"
};



export default SendChannelMessageRequest;

