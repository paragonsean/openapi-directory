/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateChannelRequestElasticChannelConfiguration from './CreateChannelRequestElasticChannelConfiguration';
import CreateChannelRequestExpirationSettings from './CreateChannelRequestExpirationSettings';
import Tag from './Tag';

/**
 * The CreateChannelRequest model module.
 * @module model/CreateChannelRequest
 * @version 2021-05-15
 */
class CreateChannelRequest {
    /**
     * Constructs a new <code>CreateChannelRequest</code>.
     * @alias module:model/CreateChannelRequest
     * @param appInstanceArn {String} The ARN of the channel request.
     * @param name {String} The name of the channel.
     * @param clientRequestToken {String} The client token for the request. An <code>Idempotency</code> token.
     */
    constructor(appInstanceArn, name, clientRequestToken) { 
        
        CreateChannelRequest.initialize(this, appInstanceArn, name, clientRequestToken);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, appInstanceArn, name, clientRequestToken) { 
        obj['AppInstanceArn'] = appInstanceArn;
        obj['Name'] = name;
        obj['ClientRequestToken'] = clientRequestToken;
    }

    /**
     * Constructs a <code>CreateChannelRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateChannelRequest} obj Optional instance to populate.
     * @return {module:model/CreateChannelRequest} The populated <code>CreateChannelRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateChannelRequest();

            if (data.hasOwnProperty('AppInstanceArn')) {
                obj['AppInstanceArn'] = ApiClient.convertToType(data['AppInstanceArn'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Mode')) {
                obj['Mode'] = ApiClient.convertToType(data['Mode'], 'String');
            }
            if (data.hasOwnProperty('Privacy')) {
                obj['Privacy'] = ApiClient.convertToType(data['Privacy'], 'String');
            }
            if (data.hasOwnProperty('Metadata')) {
                obj['Metadata'] = ApiClient.convertToType(data['Metadata'], 'String');
            }
            if (data.hasOwnProperty('ClientRequestToken')) {
                obj['ClientRequestToken'] = ApiClient.convertToType(data['ClientRequestToken'], 'String');
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], [Tag]);
            }
            if (data.hasOwnProperty('ChannelId')) {
                obj['ChannelId'] = ApiClient.convertToType(data['ChannelId'], 'String');
            }
            if (data.hasOwnProperty('MemberArns')) {
                obj['MemberArns'] = ApiClient.convertToType(data['MemberArns'], ['String']);
            }
            if (data.hasOwnProperty('ModeratorArns')) {
                obj['ModeratorArns'] = ApiClient.convertToType(data['ModeratorArns'], ['String']);
            }
            if (data.hasOwnProperty('ElasticChannelConfiguration')) {
                obj['ElasticChannelConfiguration'] = CreateChannelRequestElasticChannelConfiguration.constructFromObject(data['ElasticChannelConfiguration']);
            }
            if (data.hasOwnProperty('ExpirationSettings')) {
                obj['ExpirationSettings'] = CreateChannelRequestExpirationSettings.constructFromObject(data['ExpirationSettings']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateChannelRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateChannelRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateChannelRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['AppInstanceArn'] && !(typeof data['AppInstanceArn'] === 'string' || data['AppInstanceArn'] instanceof String)) {
            throw new Error("Expected the field `AppInstanceArn` to be a primitive type in the JSON string but got " + data['AppInstanceArn']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['Mode'] && !(typeof data['Mode'] === 'string' || data['Mode'] instanceof String)) {
            throw new Error("Expected the field `Mode` to be a primitive type in the JSON string but got " + data['Mode']);
        }
        // ensure the json data is a string
        if (data['Privacy'] && !(typeof data['Privacy'] === 'string' || data['Privacy'] instanceof String)) {
            throw new Error("Expected the field `Privacy` to be a primitive type in the JSON string but got " + data['Privacy']);
        }
        // ensure the json data is a string
        if (data['Metadata'] && !(typeof data['Metadata'] === 'string' || data['Metadata'] instanceof String)) {
            throw new Error("Expected the field `Metadata` to be a primitive type in the JSON string but got " + data['Metadata']);
        }
        // ensure the json data is a string
        if (data['ClientRequestToken'] && !(typeof data['ClientRequestToken'] === 'string' || data['ClientRequestToken'] instanceof String)) {
            throw new Error("Expected the field `ClientRequestToken` to be a primitive type in the JSON string but got " + data['ClientRequestToken']);
        }
        if (data['Tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Tags'])) {
                throw new Error("Expected the field `Tags` to be an array in the JSON data but got " + data['Tags']);
            }
            // validate the optional field `Tags` (array)
            for (const item of data['Tags']) {
                Tag.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ChannelId'] && !(typeof data['ChannelId'] === 'string' || data['ChannelId'] instanceof String)) {
            throw new Error("Expected the field `ChannelId` to be a primitive type in the JSON string but got " + data['ChannelId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['MemberArns'])) {
            throw new Error("Expected the field `MemberArns` to be an array in the JSON data but got " + data['MemberArns']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ModeratorArns'])) {
            throw new Error("Expected the field `ModeratorArns` to be an array in the JSON data but got " + data['ModeratorArns']);
        }
        // validate the optional field `ElasticChannelConfiguration`
        if (data['ElasticChannelConfiguration']) { // data not null
          CreateChannelRequestElasticChannelConfiguration.validateJSON(data['ElasticChannelConfiguration']);
        }
        // validate the optional field `ExpirationSettings`
        if (data['ExpirationSettings']) { // data not null
          CreateChannelRequestExpirationSettings.validateJSON(data['ExpirationSettings']);
        }

        return true;
    }


}

CreateChannelRequest.RequiredProperties = ["AppInstanceArn", "Name", "ClientRequestToken"];

/**
 * The ARN of the channel request.
 * @member {String} AppInstanceArn
 */
CreateChannelRequest.prototype['AppInstanceArn'] = undefined;

/**
 * The name of the channel.
 * @member {String} Name
 */
CreateChannelRequest.prototype['Name'] = undefined;

/**
 * The channel mode: <code>UNRESTRICTED</code> or <code>RESTRICTED</code>. Administrators, moderators, and channel members can add themselves and other members to unrestricted channels. Only administrators and moderators can add members to restricted channels.
 * @member {module:model/CreateChannelRequest.ModeEnum} Mode
 */
CreateChannelRequest.prototype['Mode'] = undefined;

/**
 * The channel's privacy level: <code>PUBLIC</code> or <code>PRIVATE</code>. Private channels aren't discoverable by users outside the channel. Public channels are discoverable by anyone in the <code>AppInstance</code>.
 * @member {module:model/CreateChannelRequest.PrivacyEnum} Privacy
 */
CreateChannelRequest.prototype['Privacy'] = undefined;

/**
 * The metadata of the creation request. Limited to 1KB and UTF-8.
 * @member {String} Metadata
 */
CreateChannelRequest.prototype['Metadata'] = undefined;

/**
 * The client token for the request. An <code>Idempotency</code> token.
 * @member {String} ClientRequestToken
 */
CreateChannelRequest.prototype['ClientRequestToken'] = undefined;

/**
 * The tags for the creation request.
 * @member {Array.<module:model/Tag>} Tags
 */
CreateChannelRequest.prototype['Tags'] = undefined;

/**
 * The ID of the channel in the request.
 * @member {String} ChannelId
 */
CreateChannelRequest.prototype['ChannelId'] = undefined;

/**
 * The ARNs of the channel members in the request.
 * @member {Array.<String>} MemberArns
 */
CreateChannelRequest.prototype['MemberArns'] = undefined;

/**
 * The ARNs of the channel moderators in the request.
 * @member {Array.<String>} ModeratorArns
 */
CreateChannelRequest.prototype['ModeratorArns'] = undefined;

/**
 * @member {module:model/CreateChannelRequestElasticChannelConfiguration} ElasticChannelConfiguration
 */
CreateChannelRequest.prototype['ElasticChannelConfiguration'] = undefined;

/**
 * @member {module:model/CreateChannelRequestExpirationSettings} ExpirationSettings
 */
CreateChannelRequest.prototype['ExpirationSettings'] = undefined;





/**
 * Allowed values for the <code>Mode</code> property.
 * @enum {String}
 * @readonly
 */
CreateChannelRequest['ModeEnum'] = {

    /**
     * value: "UNRESTRICTED"
     * @const
     */
    "UNRESTRICTED": "UNRESTRICTED",

    /**
     * value: "RESTRICTED"
     * @const
     */
    "RESTRICTED": "RESTRICTED"
};


/**
 * Allowed values for the <code>Privacy</code> property.
 * @enum {String}
 * @readonly
 */
CreateChannelRequest['PrivacyEnum'] = {

    /**
     * value: "PUBLIC"
     * @const
     */
    "PUBLIC": "PUBLIC",

    /**
     * value: "PRIVATE"
     * @const
     */
    "PRIVATE": "PRIVATE"
};



export default CreateChannelRequest;

