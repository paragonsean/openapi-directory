/**
 * Amazon Chime SDK Messaging
 * The Amazon Chime SDK messaging APIs in this section allow software developers to send and receive messages in custom messaging applications. These APIs depend on the frameworks provided by the Amazon Chime SDK identity APIs. For more information about the messaging APIs, see <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html\">Amazon Chime SDK messaging</a>.
 *
 * The version of the OpenAPI document: 2021-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssociateChannelFlowRequest from '../model/AssociateChannelFlowRequest';
import BatchCreateChannelMembershipRequest from '../model/BatchCreateChannelMembershipRequest';
import BatchCreateChannelMembershipResponse from '../model/BatchCreateChannelMembershipResponse';
import ChannelFlowCallbackRequest from '../model/ChannelFlowCallbackRequest';
import ChannelFlowCallbackResponse from '../model/ChannelFlowCallbackResponse';
import CreateChannelBanRequest from '../model/CreateChannelBanRequest';
import CreateChannelBanResponse from '../model/CreateChannelBanResponse';
import CreateChannelFlowRequest from '../model/CreateChannelFlowRequest';
import CreateChannelFlowResponse from '../model/CreateChannelFlowResponse';
import CreateChannelMembershipRequest from '../model/CreateChannelMembershipRequest';
import CreateChannelMembershipResponse from '../model/CreateChannelMembershipResponse';
import CreateChannelModeratorRequest from '../model/CreateChannelModeratorRequest';
import CreateChannelModeratorResponse from '../model/CreateChannelModeratorResponse';
import CreateChannelRequest from '../model/CreateChannelRequest';
import CreateChannelResponse from '../model/CreateChannelResponse';
import DescribeChannelBanResponse from '../model/DescribeChannelBanResponse';
import DescribeChannelFlowResponse from '../model/DescribeChannelFlowResponse';
import DescribeChannelMembershipForAppInstanceUserResponse from '../model/DescribeChannelMembershipForAppInstanceUserResponse';
import DescribeChannelMembershipResponse from '../model/DescribeChannelMembershipResponse';
import DescribeChannelModeratedByAppInstanceUserResponse from '../model/DescribeChannelModeratedByAppInstanceUserResponse';
import DescribeChannelModeratorResponse from '../model/DescribeChannelModeratorResponse';
import DescribeChannelResponse from '../model/DescribeChannelResponse';
import GetChannelMembershipPreferencesResponse from '../model/GetChannelMembershipPreferencesResponse';
import GetChannelMessageResponse from '../model/GetChannelMessageResponse';
import GetChannelMessageStatusResponse from '../model/GetChannelMessageStatusResponse';
import GetMessagingSessionEndpointResponse from '../model/GetMessagingSessionEndpointResponse';
import GetMessagingStreamingConfigurationsResponse from '../model/GetMessagingStreamingConfigurationsResponse';
import ListChannelBansResponse from '../model/ListChannelBansResponse';
import ListChannelFlowsResponse from '../model/ListChannelFlowsResponse';
import ListChannelMembershipsForAppInstanceUserResponse from '../model/ListChannelMembershipsForAppInstanceUserResponse';
import ListChannelMembershipsResponse from '../model/ListChannelMembershipsResponse';
import ListChannelMessagesResponse from '../model/ListChannelMessagesResponse';
import ListChannelModeratorsResponse from '../model/ListChannelModeratorsResponse';
import ListChannelsAssociatedWithChannelFlowResponse from '../model/ListChannelsAssociatedWithChannelFlowResponse';
import ListChannelsModeratedByAppInstanceUserResponse from '../model/ListChannelsModeratedByAppInstanceUserResponse';
import ListChannelsResponse from '../model/ListChannelsResponse';
import ListSubChannelsResponse from '../model/ListSubChannelsResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import PutChannelExpirationSettingsRequest from '../model/PutChannelExpirationSettingsRequest';
import PutChannelExpirationSettingsResponse from '../model/PutChannelExpirationSettingsResponse';
import PutChannelMembershipPreferencesRequest from '../model/PutChannelMembershipPreferencesRequest';
import PutChannelMembershipPreferencesResponse from '../model/PutChannelMembershipPreferencesResponse';
import PutMessagingStreamingConfigurationsRequest from '../model/PutMessagingStreamingConfigurationsRequest';
import PutMessagingStreamingConfigurationsResponse from '../model/PutMessagingStreamingConfigurationsResponse';
import RedactChannelMessageRequest from '../model/RedactChannelMessageRequest';
import RedactChannelMessageResponse from '../model/RedactChannelMessageResponse';
import SearchChannelsRequest from '../model/SearchChannelsRequest';
import SearchChannelsResponse from '../model/SearchChannelsResponse';
import SendChannelMessageRequest from '../model/SendChannelMessageRequest';
import SendChannelMessageResponse from '../model/SendChannelMessageResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UntagResourceRequest from '../model/UntagResourceRequest';
import UpdateChannelFlowRequest from '../model/UpdateChannelFlowRequest';
import UpdateChannelFlowResponse from '../model/UpdateChannelFlowResponse';
import UpdateChannelMessageRequest from '../model/UpdateChannelMessageRequest';
import UpdateChannelMessageResponse from '../model/UpdateChannelMessageResponse';
import UpdateChannelReadMarkerResponse from '../model/UpdateChannelReadMarkerResponse';
import UpdateChannelRequest from '../model/UpdateChannelRequest';
import UpdateChannelResponse from '../model/UpdateChannelResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2021-05-15
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the associateChannelFlow operation.
     * @callback module:api/DefaultApi~associateChannelFlowCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Associates a channel flow with a channel. Once associated, all messages to that channel go through channel flow processors. To stop processing, use the <code>DisassociateChannelFlow</code> API.</p> <note> <p>Only administrators or channel moderators can associate a channel flow. The <code>x-amz-chime-bearer</code> request header is mandatory. Use the ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call as the value in the header.</p> </note>
     * @param {String} channelArn The ARN of the channel.
     * @param {String} xAmzChimeBearer The <code>AppInstanceUserArn</code> of the user making the API call.
     * @param {module:model/AssociateChannelFlowRequest} associateChannelFlowRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateChannelFlowCallback} callback The callback function, accepting three arguments: error, data, response
     */
    associateChannelFlow(channelArn, xAmzChimeBearer, associateChannelFlowRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateChannelFlowRequest;
      // verify the required parameter 'channelArn' is set
      if (channelArn === undefined || channelArn === null) {
        throw new Error("Missing the required parameter 'channelArn' when calling associateChannelFlow");
      }
      // verify the required parameter 'xAmzChimeBearer' is set
      if (xAmzChimeBearer === undefined || xAmzChimeBearer === null) {
        throw new Error("Missing the required parameter 'xAmzChimeBearer' when calling associateChannelFlow");
      }
      // verify the required parameter 'associateChannelFlowRequest' is set
      if (associateChannelFlowRequest === undefined || associateChannelFlowRequest === null) {
        throw new Error("Missing the required parameter 'associateChannelFlowRequest' when calling associateChannelFlow");
      }

      let pathParams = {
        'channelArn': channelArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-chime-bearer': xAmzChimeBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/channels/{channelArn}/channel-flow#x-amz-chime-bearer', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchCreateChannelMembership operation.
     * @callback module:api/DefaultApi~batchCreateChannelMembershipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchCreateChannelMembershipResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a specified number of users and bots to a channel. 
     * @param {String} channelArn The ARN of the channel to which you're adding users or bots.
     * @param {String} xAmzChimeBearer The ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call.
     * @param {module:model/String} operation 
     * @param {module:model/BatchCreateChannelMembershipRequest} batchCreateChannelMembershipRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchCreateChannelMembershipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchCreateChannelMembershipResponse}
     */
    batchCreateChannelMembership(channelArn, xAmzChimeBearer, operation, batchCreateChannelMembershipRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchCreateChannelMembershipRequest;
      // verify the required parameter 'channelArn' is set
      if (channelArn === undefined || channelArn === null) {
        throw new Error("Missing the required parameter 'channelArn' when calling batchCreateChannelMembership");
      }
      // verify the required parameter 'xAmzChimeBearer' is set
      if (xAmzChimeBearer === undefined || xAmzChimeBearer === null) {
        throw new Error("Missing the required parameter 'xAmzChimeBearer' when calling batchCreateChannelMembership");
      }
      // verify the required parameter 'operation' is set
      if (operation === undefined || operation === null) {
        throw new Error("Missing the required parameter 'operation' when calling batchCreateChannelMembership");
      }
      // verify the required parameter 'batchCreateChannelMembershipRequest' is set
      if (batchCreateChannelMembershipRequest === undefined || batchCreateChannelMembershipRequest === null) {
        throw new Error("Missing the required parameter 'batchCreateChannelMembershipRequest' when calling batchCreateChannelMembership");
      }

      let pathParams = {
        'channelArn': channelArn
      };
      let queryParams = {
        'operation': operation
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-chime-bearer': xAmzChimeBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchCreateChannelMembershipResponse;
      return this.apiClient.callApi(
        '/channels/{channelArn}/memberships#operation=batch-create&x-amz-chime-bearer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the channelFlowCallback operation.
     * @callback module:api/DefaultApi~channelFlowCallbackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChannelFlowCallbackResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Calls back Amazon Chime SDK messaging with a processing response message. This should be invoked from the processor Lambda. This is a developer API.</p> <p>You can return one of the following processing responses:</p> <ul> <li> <p>Update message content or metadata</p> </li> <li> <p>Deny a message</p> </li> <li> <p>Make no changes to the message</p> </li> </ul>
     * @param {String} channelArn The ARN of the channel.
     * @param {module:model/String} operation 
     * @param {module:model/ChannelFlowCallbackRequest} channelFlowCallbackRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~channelFlowCallbackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChannelFlowCallbackResponse}
     */
    channelFlowCallback(channelArn, operation, channelFlowCallbackRequest, opts, callback) {
      opts = opts || {};
      let postBody = channelFlowCallbackRequest;
      // verify the required parameter 'channelArn' is set
      if (channelArn === undefined || channelArn === null) {
        throw new Error("Missing the required parameter 'channelArn' when calling channelFlowCallback");
      }
      // verify the required parameter 'operation' is set
      if (operation === undefined || operation === null) {
        throw new Error("Missing the required parameter 'operation' when calling channelFlowCallback");
      }
      // verify the required parameter 'channelFlowCallbackRequest' is set
      if (channelFlowCallbackRequest === undefined || channelFlowCallbackRequest === null) {
        throw new Error("Missing the required parameter 'channelFlowCallbackRequest' when calling channelFlowCallback");
      }

      let pathParams = {
        'channelArn': channelArn
      };
      let queryParams = {
        'operation': operation
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChannelFlowCallbackResponse;
      return this.apiClient.callApi(
        '/channels/{channelArn}#operation=channel-flow-callback', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createChannel operation.
     * @callback module:api/DefaultApi~createChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a channel to which you can add users and send messages.</p> <p> <b>Restriction</b>: You can't change a channel's privacy.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call as the value in the header.</p> </note>
     * @param {String} xAmzChimeBearer The ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call.
     * @param {module:model/CreateChannelRequest} createChannelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateChannelResponse}
     */
    createChannel(xAmzChimeBearer, createChannelRequest, opts, callback) {
      opts = opts || {};
      let postBody = createChannelRequest;
      // verify the required parameter 'xAmzChimeBearer' is set
      if (xAmzChimeBearer === undefined || xAmzChimeBearer === null) {
        throw new Error("Missing the required parameter 'xAmzChimeBearer' when calling createChannel");
      }
      // verify the required parameter 'createChannelRequest' is set
      if (createChannelRequest === undefined || createChannelRequest === null) {
        throw new Error("Missing the required parameter 'createChannelRequest' when calling createChannel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-chime-bearer': xAmzChimeBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateChannelResponse;
      return this.apiClient.callApi(
        '/channels#x-amz-chime-bearer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createChannelBan operation.
     * @callback module:api/DefaultApi~createChannelBanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateChannelBanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Permanently bans a member from a channel. Moderators can't add banned members to a channel. To undo a ban, you first have to <code>DeleteChannelBan</code>, and then <code>CreateChannelMembership</code>. Bans are cleaned up when you delete users or channels.</p> <p>If you ban a user who is already part of a channel, that user is automatically kicked from the channel.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call as the value in the header.</p> </note>
     * @param {String} channelArn The ARN of the ban request.
     * @param {String} xAmzChimeBearer The ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call.
     * @param {module:model/CreateChannelBanRequest} createChannelBanRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createChannelBanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateChannelBanResponse}
     */
    createChannelBan(channelArn, xAmzChimeBearer, createChannelBanRequest, opts, callback) {
      opts = opts || {};
      let postBody = createChannelBanRequest;
      // verify the required parameter 'channelArn' is set
      if (channelArn === undefined || channelArn === null) {
        throw new Error("Missing the required parameter 'channelArn' when calling createChannelBan");
      }
      // verify the required parameter 'xAmzChimeBearer' is set
      if (xAmzChimeBearer === undefined || xAmzChimeBearer === null) {
        throw new Error("Missing the required parameter 'xAmzChimeBearer' when calling createChannelBan");
      }
      // verify the required parameter 'createChannelBanRequest' is set
      if (createChannelBanRequest === undefined || createChannelBanRequest === null) {
        throw new Error("Missing the required parameter 'createChannelBanRequest' when calling createChannelBan");
      }

      let pathParams = {
        'channelArn': channelArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-chime-bearer': xAmzChimeBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateChannelBanResponse;
      return this.apiClient.callApi(
        '/channels/{channelArn}/bans#x-amz-chime-bearer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createChannelFlow operation.
     * @callback module:api/DefaultApi~createChannelFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateChannelFlowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a channel flow, a container for processors. Processors are AWS Lambda functions that perform actions on chat messages, such as stripping out profanity. You can associate channel flows with channels, and the processors in the channel flow then take action on all messages sent to that channel. This is a developer API.</p> <p>Channel flows process the following items:</p> <ol> <li> <p>New and updated messages</p> </li> <li> <p>Persistent and non-persistent messages</p> </li> <li> <p>The Standard message type</p> </li> </ol> <note> <p>Channel flows don't process Control or System messages. For more information about the message types provided by Chime SDK messaging, refer to <a href=\"https://docs.aws.amazon.com/chime/latest/dg/using-the-messaging-sdk.html#msg-types\">Message types</a> in the <i>Amazon Chime developer guide</i>.</p> </note>
     * @param {module:model/CreateChannelFlowRequest} createChannelFlowRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createChannelFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateChannelFlowResponse}
     */
    createChannelFlow(createChannelFlowRequest, opts, callback) {
      opts = opts || {};
      let postBody = createChannelFlowRequest;
      // verify the required parameter 'createChannelFlowRequest' is set
      if (createChannelFlowRequest === undefined || createChannelFlowRequest === null) {
        throw new Error("Missing the required parameter 'createChannelFlowRequest' when calling createChannelFlow");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateChannelFlowResponse;
      return this.apiClient.callApi(
        '/channel-flows', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createChannelMembership operation.
     * @callback module:api/DefaultApi~createChannelMembershipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateChannelMembershipResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Adds a member to a channel. The <code>InvitedBy</code> field in <code>ChannelMembership</code> is derived from the request header. A channel member can:</p> <ul> <li> <p>List messages</p> </li> <li> <p>Send messages</p> </li> <li> <p>Receive messages</p> </li> <li> <p>Edit their own messages</p> </li> <li> <p>Leave the channel</p> </li> </ul> <p>Privacy settings impact this action as follows:</p> <ul> <li> <p>Public Channels: You do not need to be a member to list messages, but you must be a member to send messages.</p> </li> <li> <p>Private Channels: You must be a member to list or send messages.</p> </li> </ul> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the ARN of the <code>AppInstanceUserArn</code> or <code>AppInstanceBot</code> that makes the API call as the value in the header.</p> </note>
     * @param {String} channelArn The ARN of the channel to which you're adding users.
     * @param {String} xAmzChimeBearer The ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call.
     * @param {module:model/CreateChannelMembershipRequest} createChannelMembershipRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createChannelMembershipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateChannelMembershipResponse}
     */
    createChannelMembership(channelArn, xAmzChimeBearer, createChannelMembershipRequest, opts, callback) {
      opts = opts || {};
      let postBody = createChannelMembershipRequest;
      // verify the required parameter 'channelArn' is set
      if (channelArn === undefined || channelArn === null) {
        throw new Error("Missing the required parameter 'channelArn' when calling createChannelMembership");
      }
      // verify the required parameter 'xAmzChimeBearer' is set
      if (xAmzChimeBearer === undefined || xAmzChimeBearer === null) {
        throw new Error("Missing the required parameter 'xAmzChimeBearer' when calling createChannelMembership");
      }
      // verify the required parameter 'createChannelMembershipRequest' is set
      if (createChannelMembershipRequest === undefined || createChannelMembershipRequest === null) {
        throw new Error("Missing the required parameter 'createChannelMembershipRequest' when calling createChannelMembership");
      }

      let pathParams = {
        'channelArn': channelArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-chime-bearer': xAmzChimeBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateChannelMembershipResponse;
      return this.apiClient.callApi(
        '/channels/{channelArn}/memberships#x-amz-chime-bearer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createChannelModerator operation.
     * @callback module:api/DefaultApi~createChannelModeratorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateChannelModeratorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new <code>ChannelModerator</code>. A channel moderator can:</p> <ul> <li> <p>Add and remove other members of the channel.</p> </li> <li> <p>Add and remove other moderators of the channel.</p> </li> <li> <p>Add and remove user bans for the channel.</p> </li> <li> <p>Redact messages in the channel.</p> </li> <li> <p>List messages in the channel.</p> </li> </ul> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code>of the user that makes the API call as the value in the header.</p> </note>
     * @param {String} channelArn The ARN of the channel.
     * @param {String} xAmzChimeBearer The ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call.
     * @param {module:model/CreateChannelModeratorRequest} createChannelModeratorRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createChannelModeratorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateChannelModeratorResponse}
     */
    createChannelModerator(channelArn, xAmzChimeBearer, createChannelModeratorRequest, opts, callback) {
      opts = opts || {};
      let postBody = createChannelModeratorRequest;
      // verify the required parameter 'channelArn' is set
      if (channelArn === undefined || channelArn === null) {
        throw new Error("Missing the required parameter 'channelArn' when calling createChannelModerator");
      }
      // verify the required parameter 'xAmzChimeBearer' is set
      if (xAmzChimeBearer === undefined || xAmzChimeBearer === null) {
        throw new Error("Missing the required parameter 'xAmzChimeBearer' when calling createChannelModerator");
      }
      // verify the required parameter 'createChannelModeratorRequest' is set
      if (createChannelModeratorRequest === undefined || createChannelModeratorRequest === null) {
        throw new Error("Missing the required parameter 'createChannelModeratorRequest' when calling createChannelModerator");
      }

      let pathParams = {
        'channelArn': channelArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-chime-bearer': xAmzChimeBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateChannelModeratorResponse;
      return this.apiClient.callApi(
        '/channels/{channelArn}/moderators#x-amz-chime-bearer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChannel operation.
     * @callback module:api/DefaultApi~deleteChannelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Immediately makes a channel and its memberships inaccessible and marks them for deletion. This is an irreversible process.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the ARN of the <code>AppInstanceUserArn</code> or <code>AppInstanceBot</code> that makes the API call as the value in the header.</p> </note>
     * @param {String} channelArn The ARN of the channel being deleted.
     * @param {String} xAmzChimeBearer The ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteChannelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteChannel(channelArn, xAmzChimeBearer, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelArn' is set
      if (channelArn === undefined || channelArn === null) {
        throw new Error("Missing the required parameter 'channelArn' when calling deleteChannel");
      }
      // verify the required parameter 'xAmzChimeBearer' is set
      if (xAmzChimeBearer === undefined || xAmzChimeBearer === null) {
        throw new Error("Missing the required parameter 'xAmzChimeBearer' when calling deleteChannel");
      }

      let pathParams = {
        'channelArn': channelArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-chime-bearer': xAmzChimeBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/channels/{channelArn}#x-amz-chime-bearer', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChannelBan operation.
     * @callback module:api/DefaultApi~deleteChannelBanCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Removes a member from a channel's ban list.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call as the value in the header.</p> </note>
     * @param {String} channelArn The ARN of the channel from which the <code>AppInstanceUser</code> was banned.
     * @param {String} memberArn The ARN of the <code>AppInstanceUser</code> that you want to reinstate.
     * @param {String} xAmzChimeBearer The ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteChannelBanCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteChannelBan(channelArn, memberArn, xAmzChimeBearer, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelArn' is set
      if (channelArn === undefined || channelArn === null) {
        throw new Error("Missing the required parameter 'channelArn' when calling deleteChannelBan");
      }
      // verify the required parameter 'memberArn' is set
      if (memberArn === undefined || memberArn === null) {
        throw new Error("Missing the required parameter 'memberArn' when calling deleteChannelBan");
      }
      // verify the required parameter 'xAmzChimeBearer' is set
      if (xAmzChimeBearer === undefined || xAmzChimeBearer === null) {
        throw new Error("Missing the required parameter 'xAmzChimeBearer' when calling deleteChannelBan");
      }

      let pathParams = {
        'channelArn': channelArn,
        'memberArn': memberArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-chime-bearer': xAmzChimeBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/channels/{channelArn}/bans/{memberArn}#x-amz-chime-bearer', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChannelFlow operation.
     * @callback module:api/DefaultApi~deleteChannelFlowCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a channel flow, an irreversible process. This is a developer API.</p> <note> <p> This API works only when the channel flow is not associated with any channel. To get a list of all channels that a channel flow is associated with, use the <code>ListChannelsAssociatedWithChannelFlow</code> API. Use the <code>DisassociateChannelFlow</code> API to disassociate a channel flow from all channels. </p> </note>
     * @param {String} channelFlowArn The ARN of the channel flow.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteChannelFlowCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteChannelFlow(channelFlowArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelFlowArn' is set
      if (channelFlowArn === undefined || channelFlowArn === null) {
        throw new Error("Missing the required parameter 'channelFlowArn' when calling deleteChannelFlow");
      }

      let pathParams = {
        'channelFlowArn': channelFlowArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/channel-flows/{channelFlowArn}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChannelMembership operation.
     * @callback module:api/DefaultApi~deleteChannelMembershipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Removes a member from a channel.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes the API call as the value in the header.</p> </note>
     * @param {String} channelArn The ARN of the channel from which you want to remove the user.
     * @param {String} memberArn The <code>AppInstanceUserArn</code> of the member that you're removing from the channel.
     * @param {String} xAmzChimeBearer The ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [subChannelId] <p>The ID of the SubChannel in the request.</p> <note> <p>Only for use by moderators.</p> </note>
     * @param {module:api/DefaultApi~deleteChannelMembershipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteChannelMembership(channelArn, memberArn, xAmzChimeBearer, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelArn' is set
      if (channelArn === undefined || channelArn === null) {
        throw new Error("Missing the required parameter 'channelArn' when calling deleteChannelMembership");
      }
      // verify the required parameter 'memberArn' is set
      if (memberArn === undefined || memberArn === null) {
        throw new Error("Missing the required parameter 'memberArn' when calling deleteChannelMembership");
      }
      // verify the required parameter 'xAmzChimeBearer' is set
      if (xAmzChimeBearer === undefined || xAmzChimeBearer === null) {
        throw new Error("Missing the required parameter 'xAmzChimeBearer' when calling deleteChannelMembership");
      }

      let pathParams = {
        'channelArn': channelArn,
        'memberArn': memberArn
      };
      let queryParams = {
        'sub-channel-id': opts['subChannelId']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-chime-bearer': xAmzChimeBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/channels/{channelArn}/memberships/{memberArn}#x-amz-chime-bearer', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChannelMessage operation.
     * @callback module:api/DefaultApi~deleteChannelMessageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a channel message. Only admins can perform this action. Deletion makes messages inaccessible immediately. A background process deletes any revisions created by <code>UpdateChannelMessage</code>.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call as the value in the header.</p> </note>
     * @param {String} channelArn The ARN of the channel.
     * @param {String} messageId The ID of the message being deleted.
     * @param {String} xAmzChimeBearer The ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [subChannelId] <p>The ID of the SubChannel in the request.</p> <note> <p>Only required when deleting messages in a SubChannel that the user belongs to.</p> </note>
     * @param {module:api/DefaultApi~deleteChannelMessageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteChannelMessage(channelArn, messageId, xAmzChimeBearer, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelArn' is set
      if (channelArn === undefined || channelArn === null) {
        throw new Error("Missing the required parameter 'channelArn' when calling deleteChannelMessage");
      }
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling deleteChannelMessage");
      }
      // verify the required parameter 'xAmzChimeBearer' is set
      if (xAmzChimeBearer === undefined || xAmzChimeBearer === null) {
        throw new Error("Missing the required parameter 'xAmzChimeBearer' when calling deleteChannelMessage");
      }

      let pathParams = {
        'channelArn': channelArn,
        'messageId': messageId
      };
      let queryParams = {
        'sub-channel-id': opts['subChannelId']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-chime-bearer': xAmzChimeBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/channels/{channelArn}/messages/{messageId}#x-amz-chime-bearer', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChannelModerator operation.
     * @callback module:api/DefaultApi~deleteChannelModeratorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a channel moderator.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call as the value in the header.</p> </note>
     * @param {String} channelArn The ARN of the channel.
     * @param {String} channelModeratorArn The <code>AppInstanceUserArn</code> of the moderator being deleted.
     * @param {String} xAmzChimeBearer The ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteChannelModeratorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteChannelModerator(channelArn, channelModeratorArn, xAmzChimeBearer, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelArn' is set
      if (channelArn === undefined || channelArn === null) {
        throw new Error("Missing the required parameter 'channelArn' when calling deleteChannelModerator");
      }
      // verify the required parameter 'channelModeratorArn' is set
      if (channelModeratorArn === undefined || channelModeratorArn === null) {
        throw new Error("Missing the required parameter 'channelModeratorArn' when calling deleteChannelModerator");
      }
      // verify the required parameter 'xAmzChimeBearer' is set
      if (xAmzChimeBearer === undefined || xAmzChimeBearer === null) {
        throw new Error("Missing the required parameter 'xAmzChimeBearer' when calling deleteChannelModerator");
      }

      let pathParams = {
        'channelArn': channelArn,
        'channelModeratorArn': channelModeratorArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-chime-bearer': xAmzChimeBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/channels/{channelArn}/moderators/{channelModeratorArn}#x-amz-chime-bearer', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMessagingStreamingConfigurations operation.
     * @callback module:api/DefaultApi~deleteMessagingStreamingConfigurationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the streaming configurations for an <code>AppInstance</code>. For more information, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/dg/streaming-export.html\">Streaming messaging data</a> in the <i>Amazon Chime SDK Developer Guide</i>.
     * @param {String} appInstanceArn The ARN of the streaming configurations being deleted.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteMessagingStreamingConfigurationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMessagingStreamingConfigurations(appInstanceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appInstanceArn' is set
      if (appInstanceArn === undefined || appInstanceArn === null) {
        throw new Error("Missing the required parameter 'appInstanceArn' when calling deleteMessagingStreamingConfigurations");
      }

      let pathParams = {
        'appInstanceArn': appInstanceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/app-instances/{appInstanceArn}/streaming-configurations', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeChannel operation.
     * @callback module:api/DefaultApi~describeChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns the full details of a channel in an Amazon Chime <code>AppInstance</code>.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call as the value in the header.</p> </note>
     * @param {String} channelArn The ARN of the channel.
     * @param {String} xAmzChimeBearer The ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeChannelResponse}
     */
    describeChannel(channelArn, xAmzChimeBearer, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelArn' is set
      if (channelArn === undefined || channelArn === null) {
        throw new Error("Missing the required parameter 'channelArn' when calling describeChannel");
      }
      // verify the required parameter 'xAmzChimeBearer' is set
      if (xAmzChimeBearer === undefined || xAmzChimeBearer === null) {
        throw new Error("Missing the required parameter 'xAmzChimeBearer' when calling describeChannel");
      }

      let pathParams = {
        'channelArn': channelArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-chime-bearer': xAmzChimeBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeChannelResponse;
      return this.apiClient.callApi(
        '/channels/{channelArn}#x-amz-chime-bearer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeChannelBan operation.
     * @callback module:api/DefaultApi~describeChannelBanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeChannelBanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns the full details of a channel ban.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call as the value in the header.</p> </note>
     * @param {String} channelArn The ARN of the channel from which the user is banned.
     * @param {String} memberArn The <code>AppInstanceUserArn</code> of the member being banned.
     * @param {String} xAmzChimeBearer The ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeChannelBanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeChannelBanResponse}
     */
    describeChannelBan(channelArn, memberArn, xAmzChimeBearer, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelArn' is set
      if (channelArn === undefined || channelArn === null) {
        throw new Error("Missing the required parameter 'channelArn' when calling describeChannelBan");
      }
      // verify the required parameter 'memberArn' is set
      if (memberArn === undefined || memberArn === null) {
        throw new Error("Missing the required parameter 'memberArn' when calling describeChannelBan");
      }
      // verify the required parameter 'xAmzChimeBearer' is set
      if (xAmzChimeBearer === undefined || xAmzChimeBearer === null) {
        throw new Error("Missing the required parameter 'xAmzChimeBearer' when calling describeChannelBan");
      }

      let pathParams = {
        'channelArn': channelArn,
        'memberArn': memberArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-chime-bearer': xAmzChimeBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeChannelBanResponse;
      return this.apiClient.callApi(
        '/channels/{channelArn}/bans/{memberArn}#x-amz-chime-bearer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeChannelFlow operation.
     * @callback module:api/DefaultApi~describeChannelFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeChannelFlowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the full details of a channel flow in an Amazon Chime <code>AppInstance</code>. This is a developer API.
     * @param {String} channelFlowArn The ARN of the channel flow.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeChannelFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeChannelFlowResponse}
     */
    describeChannelFlow(channelFlowArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelFlowArn' is set
      if (channelFlowArn === undefined || channelFlowArn === null) {
        throw new Error("Missing the required parameter 'channelFlowArn' when calling describeChannelFlow");
      }

      let pathParams = {
        'channelFlowArn': channelFlowArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeChannelFlowResponse;
      return this.apiClient.callApi(
        '/channel-flows/{channelFlowArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeChannelMembership operation.
     * @callback module:api/DefaultApi~describeChannelMembershipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeChannelMembershipResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns the full details of a user's channel membership.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call as the value in the header.</p> </note>
     * @param {String} channelArn The ARN of the channel.
     * @param {String} memberArn The <code>AppInstanceUserArn</code> of the member.
     * @param {String} xAmzChimeBearer The ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [subChannelId] <p>The ID of the SubChannel in the request. The response contains an <code>ElasticChannelConfiguration</code> object.</p> <note> <p>Only required to get a user’s SubChannel membership details.</p> </note>
     * @param {module:api/DefaultApi~describeChannelMembershipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeChannelMembershipResponse}
     */
    describeChannelMembership(channelArn, memberArn, xAmzChimeBearer, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelArn' is set
      if (channelArn === undefined || channelArn === null) {
        throw new Error("Missing the required parameter 'channelArn' when calling describeChannelMembership");
      }
      // verify the required parameter 'memberArn' is set
      if (memberArn === undefined || memberArn === null) {
        throw new Error("Missing the required parameter 'memberArn' when calling describeChannelMembership");
      }
      // verify the required parameter 'xAmzChimeBearer' is set
      if (xAmzChimeBearer === undefined || xAmzChimeBearer === null) {
        throw new Error("Missing the required parameter 'xAmzChimeBearer' when calling describeChannelMembership");
      }

      let pathParams = {
        'channelArn': channelArn,
        'memberArn': memberArn
      };
      let queryParams = {
        'sub-channel-id': opts['subChannelId']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-chime-bearer': xAmzChimeBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeChannelMembershipResponse;
      return this.apiClient.callApi(
        '/channels/{channelArn}/memberships/{memberArn}#x-amz-chime-bearer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeChannelMembershipForAppInstanceUser operation.
     * @callback module:api/DefaultApi~describeChannelMembershipForAppInstanceUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeChannelMembershipForAppInstanceUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> Returns the details of a channel based on the membership of the specified <code>AppInstanceUser</code> or <code>AppInstanceBot</code>.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call as the value in the header.</p> </note>
     * @param {String} channelArn The ARN of the channel to which the user belongs.
     * @param {String} appInstanceUserArn The ARN of the user or bot in a channel.
     * @param {String} xAmzChimeBearer The ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call.
     * @param {module:model/String} scope 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeChannelMembershipForAppInstanceUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeChannelMembershipForAppInstanceUserResponse}
     */
    describeChannelMembershipForAppInstanceUser(channelArn, appInstanceUserArn, xAmzChimeBearer, scope, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelArn' is set
      if (channelArn === undefined || channelArn === null) {
        throw new Error("Missing the required parameter 'channelArn' when calling describeChannelMembershipForAppInstanceUser");
      }
      // verify the required parameter 'appInstanceUserArn' is set
      if (appInstanceUserArn === undefined || appInstanceUserArn === null) {
        throw new Error("Missing the required parameter 'appInstanceUserArn' when calling describeChannelMembershipForAppInstanceUser");
      }
      // verify the required parameter 'xAmzChimeBearer' is set
      if (xAmzChimeBearer === undefined || xAmzChimeBearer === null) {
        throw new Error("Missing the required parameter 'xAmzChimeBearer' when calling describeChannelMembershipForAppInstanceUser");
      }
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling describeChannelMembershipForAppInstanceUser");
      }

      let pathParams = {
        'channelArn': channelArn
      };
      let queryParams = {
        'app-instance-user-arn': appInstanceUserArn,
        'scope': scope
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-chime-bearer': xAmzChimeBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeChannelMembershipForAppInstanceUserResponse;
      return this.apiClient.callApi(
        '/channels/{channelArn}#scope=app-instance-user-membership&app-instance-user-arn&x-amz-chime-bearer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeChannelModeratedByAppInstanceUser operation.
     * @callback module:api/DefaultApi~describeChannelModeratedByAppInstanceUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeChannelModeratedByAppInstanceUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns the full details of a channel moderated by the specified <code>AppInstanceUser</code> or <code>AppInstanceBot</code>.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call as the value in the header.</p> </note>
     * @param {String} channelArn The ARN of the moderated channel.
     * @param {String} appInstanceUserArn The ARN of the user or bot in the moderated channel.
     * @param {String} xAmzChimeBearer The ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call.
     * @param {module:model/String} scope 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeChannelModeratedByAppInstanceUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeChannelModeratedByAppInstanceUserResponse}
     */
    describeChannelModeratedByAppInstanceUser(channelArn, appInstanceUserArn, xAmzChimeBearer, scope, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelArn' is set
      if (channelArn === undefined || channelArn === null) {
        throw new Error("Missing the required parameter 'channelArn' when calling describeChannelModeratedByAppInstanceUser");
      }
      // verify the required parameter 'appInstanceUserArn' is set
      if (appInstanceUserArn === undefined || appInstanceUserArn === null) {
        throw new Error("Missing the required parameter 'appInstanceUserArn' when calling describeChannelModeratedByAppInstanceUser");
      }
      // verify the required parameter 'xAmzChimeBearer' is set
      if (xAmzChimeBearer === undefined || xAmzChimeBearer === null) {
        throw new Error("Missing the required parameter 'xAmzChimeBearer' when calling describeChannelModeratedByAppInstanceUser");
      }
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling describeChannelModeratedByAppInstanceUser");
      }

      let pathParams = {
        'channelArn': channelArn
      };
      let queryParams = {
        'app-instance-user-arn': appInstanceUserArn,
        'scope': scope
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-chime-bearer': xAmzChimeBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeChannelModeratedByAppInstanceUserResponse;
      return this.apiClient.callApi(
        '/channels/{channelArn}#scope=app-instance-user-moderated-channel&app-instance-user-arn&x-amz-chime-bearer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeChannelModerator operation.
     * @callback module:api/DefaultApi~describeChannelModeratorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeChannelModeratorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns the full details of a single ChannelModerator.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes the API call as the value in the header.</p> </note>
     * @param {String} channelArn The ARN of the channel.
     * @param {String} channelModeratorArn The <code>AppInstanceUserArn</code> of the channel moderator.
     * @param {String} xAmzChimeBearer The ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeChannelModeratorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeChannelModeratorResponse}
     */
    describeChannelModerator(channelArn, channelModeratorArn, xAmzChimeBearer, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelArn' is set
      if (channelArn === undefined || channelArn === null) {
        throw new Error("Missing the required parameter 'channelArn' when calling describeChannelModerator");
      }
      // verify the required parameter 'channelModeratorArn' is set
      if (channelModeratorArn === undefined || channelModeratorArn === null) {
        throw new Error("Missing the required parameter 'channelModeratorArn' when calling describeChannelModerator");
      }
      // verify the required parameter 'xAmzChimeBearer' is set
      if (xAmzChimeBearer === undefined || xAmzChimeBearer === null) {
        throw new Error("Missing the required parameter 'xAmzChimeBearer' when calling describeChannelModerator");
      }

      let pathParams = {
        'channelArn': channelArn,
        'channelModeratorArn': channelModeratorArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-chime-bearer': xAmzChimeBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeChannelModeratorResponse;
      return this.apiClient.callApi(
        '/channels/{channelArn}/moderators/{channelModeratorArn}#x-amz-chime-bearer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateChannelFlow operation.
     * @callback module:api/DefaultApi~disassociateChannelFlowCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Disassociates a channel flow from all its channels. Once disassociated, all messages to that channel stop going through the channel flow processor.</p> <note> <p>Only administrators or channel moderators can disassociate a channel flow.</p> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call as the value in the header.</p> </note>
     * @param {String} channelArn The ARN of the channel.
     * @param {String} channelFlowArn The ARN of the channel flow.
     * @param {String} xAmzChimeBearer The <code>AppInstanceUserArn</code> of the user making the API call.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateChannelFlowCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disassociateChannelFlow(channelArn, channelFlowArn, xAmzChimeBearer, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelArn' is set
      if (channelArn === undefined || channelArn === null) {
        throw new Error("Missing the required parameter 'channelArn' when calling disassociateChannelFlow");
      }
      // verify the required parameter 'channelFlowArn' is set
      if (channelFlowArn === undefined || channelFlowArn === null) {
        throw new Error("Missing the required parameter 'channelFlowArn' when calling disassociateChannelFlow");
      }
      // verify the required parameter 'xAmzChimeBearer' is set
      if (xAmzChimeBearer === undefined || xAmzChimeBearer === null) {
        throw new Error("Missing the required parameter 'xAmzChimeBearer' when calling disassociateChannelFlow");
      }

      let pathParams = {
        'channelArn': channelArn,
        'channelFlowArn': channelFlowArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-chime-bearer': xAmzChimeBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/channels/{channelArn}/channel-flow/{channelFlowArn}#x-amz-chime-bearer', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelMembershipPreferences operation.
     * @callback module:api/DefaultApi~getChannelMembershipPreferencesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetChannelMembershipPreferencesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets the membership preferences of an <code>AppInstanceUser</code> or <code>AppInstanceBot</code> for the specified channel. A user or a bot must be a member of the channel and own the membership in order to retrieve membership preferences. Users or bots in the <code>AppInstanceAdmin</code> and channel moderator roles can't retrieve preferences for other users or bots. Banned users or bots can't retrieve membership preferences for the channel from which they are banned.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call as the value in the header.</p> </note>
     * @param {String} channelArn The ARN of the channel.
     * @param {String} memberArn The <code>AppInstanceUserArn</code> of the member retrieving the preferences.
     * @param {String} xAmzChimeBearer The ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getChannelMembershipPreferencesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetChannelMembershipPreferencesResponse}
     */
    getChannelMembershipPreferences(channelArn, memberArn, xAmzChimeBearer, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelArn' is set
      if (channelArn === undefined || channelArn === null) {
        throw new Error("Missing the required parameter 'channelArn' when calling getChannelMembershipPreferences");
      }
      // verify the required parameter 'memberArn' is set
      if (memberArn === undefined || memberArn === null) {
        throw new Error("Missing the required parameter 'memberArn' when calling getChannelMembershipPreferences");
      }
      // verify the required parameter 'xAmzChimeBearer' is set
      if (xAmzChimeBearer === undefined || xAmzChimeBearer === null) {
        throw new Error("Missing the required parameter 'xAmzChimeBearer' when calling getChannelMembershipPreferences");
      }

      let pathParams = {
        'channelArn': channelArn,
        'memberArn': memberArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-chime-bearer': xAmzChimeBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetChannelMembershipPreferencesResponse;
      return this.apiClient.callApi(
        '/channels/{channelArn}/memberships/{memberArn}/preferences#x-amz-chime-bearer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelMessage operation.
     * @callback module:api/DefaultApi~getChannelMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetChannelMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets the full details of a channel message.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call as the value in the header.</p> </note>
     * @param {String} channelArn The ARN of the channel.
     * @param {String} messageId The ID of the message.
     * @param {String} xAmzChimeBearer The ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [subChannelId] <p>The ID of the SubChannel in the request.</p> <note> <p>Only required when getting messages in a SubChannel that the user belongs to.</p> </note>
     * @param {module:api/DefaultApi~getChannelMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetChannelMessageResponse}
     */
    getChannelMessage(channelArn, messageId, xAmzChimeBearer, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelArn' is set
      if (channelArn === undefined || channelArn === null) {
        throw new Error("Missing the required parameter 'channelArn' when calling getChannelMessage");
      }
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling getChannelMessage");
      }
      // verify the required parameter 'xAmzChimeBearer' is set
      if (xAmzChimeBearer === undefined || xAmzChimeBearer === null) {
        throw new Error("Missing the required parameter 'xAmzChimeBearer' when calling getChannelMessage");
      }

      let pathParams = {
        'channelArn': channelArn,
        'messageId': messageId
      };
      let queryParams = {
        'sub-channel-id': opts['subChannelId']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-chime-bearer': xAmzChimeBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetChannelMessageResponse;
      return this.apiClient.callApi(
        '/channels/{channelArn}/messages/{messageId}#x-amz-chime-bearer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelMessageStatus operation.
     * @callback module:api/DefaultApi~getChannelMessageStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetChannelMessageStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets message status for a specified <code>messageId</code>. Use this API to determine the intermediate status of messages going through channel flow processing. The API provides an alternative to retrieving message status if the event was not received because a client wasn't connected to a websocket. </p> <p>Messages can have any one of these statuses.</p> <dl> <dt>SENT</dt> <dd> <p>Message processed successfully</p> </dd> <dt>PENDING</dt> <dd> <p>Ongoing processing</p> </dd> <dt>FAILED</dt> <dd> <p>Processing failed</p> </dd> <dt>DENIED</dt> <dd> <p>Message denied by the processor</p> </dd> </dl> <note> <ul> <li> <p>This API does not return statuses for denied messages, because we don't store them once the processor denies them. </p> </li> <li> <p>Only the message sender can invoke this API.</p> </li> <li> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call as the value in the header.</p> </li> </ul> </note>
     * @param {String} channelArn The ARN of the channel
     * @param {String} messageId The ID of the message.
     * @param {String} xAmzChimeBearer The <code>AppInstanceUserArn</code> of the user making the API call.
     * @param {module:model/String} scope 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [subChannelId] <p>The ID of the SubChannel in the request.</p> <note> <p>Only required when getting message status in a SubChannel that the user belongs to.</p> </note>
     * @param {module:api/DefaultApi~getChannelMessageStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetChannelMessageStatusResponse}
     */
    getChannelMessageStatus(channelArn, messageId, xAmzChimeBearer, scope, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelArn' is set
      if (channelArn === undefined || channelArn === null) {
        throw new Error("Missing the required parameter 'channelArn' when calling getChannelMessageStatus");
      }
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling getChannelMessageStatus");
      }
      // verify the required parameter 'xAmzChimeBearer' is set
      if (xAmzChimeBearer === undefined || xAmzChimeBearer === null) {
        throw new Error("Missing the required parameter 'xAmzChimeBearer' when calling getChannelMessageStatus");
      }
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling getChannelMessageStatus");
      }

      let pathParams = {
        'channelArn': channelArn,
        'messageId': messageId
      };
      let queryParams = {
        'sub-channel-id': opts['subChannelId'],
        'scope': scope
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-chime-bearer': xAmzChimeBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetChannelMessageStatusResponse;
      return this.apiClient.callApi(
        '/channels/{channelArn}/messages/{messageId}#scope=message-status&x-amz-chime-bearer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMessagingSessionEndpoint operation.
     * @callback module:api/DefaultApi~getMessagingSessionEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMessagingSessionEndpointResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The details of the endpoint for the messaging session.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getMessagingSessionEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMessagingSessionEndpointResponse}
     */
    getMessagingSessionEndpoint(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMessagingSessionEndpointResponse;
      return this.apiClient.callApi(
        '/endpoints/messaging-session', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMessagingStreamingConfigurations operation.
     * @callback module:api/DefaultApi~getMessagingStreamingConfigurationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMessagingStreamingConfigurationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the data streaming configuration for an <code>AppInstance</code>. For more information, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/dg/streaming-export.html\">Streaming messaging data</a> in the <i>Amazon Chime SDK Developer Guide</i>.
     * @param {String} appInstanceArn The ARN of the streaming configurations.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getMessagingStreamingConfigurationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMessagingStreamingConfigurationsResponse}
     */
    getMessagingStreamingConfigurations(appInstanceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appInstanceArn' is set
      if (appInstanceArn === undefined || appInstanceArn === null) {
        throw new Error("Missing the required parameter 'appInstanceArn' when calling getMessagingStreamingConfigurations");
      }

      let pathParams = {
        'appInstanceArn': appInstanceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMessagingStreamingConfigurationsResponse;
      return this.apiClient.callApi(
        '/app-instances/{appInstanceArn}/streaming-configurations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listChannelBans operation.
     * @callback module:api/DefaultApi~listChannelBansCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListChannelBansResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists all the users and bots banned from a particular channel.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call as the value in the header.</p> </note>
     * @param {String} channelArn The ARN of the channel.
     * @param {String} xAmzChimeBearer The ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of bans that you want returned.
     * @param {String} [nextToken] The token passed by previous API calls until all requested bans are returned.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listChannelBansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListChannelBansResponse}
     */
    listChannelBans(channelArn, xAmzChimeBearer, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelArn' is set
      if (channelArn === undefined || channelArn === null) {
        throw new Error("Missing the required parameter 'channelArn' when calling listChannelBans");
      }
      // verify the required parameter 'xAmzChimeBearer' is set
      if (xAmzChimeBearer === undefined || xAmzChimeBearer === null) {
        throw new Error("Missing the required parameter 'xAmzChimeBearer' when calling listChannelBans");
      }

      let pathParams = {
        'channelArn': channelArn
      };
      let queryParams = {
        'max-results': opts['maxResults'],
        'next-token': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-chime-bearer': xAmzChimeBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListChannelBansResponse;
      return this.apiClient.callApi(
        '/channels/{channelArn}/bans#x-amz-chime-bearer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listChannelFlows operation.
     * @callback module:api/DefaultApi~listChannelFlowsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListChannelFlowsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a paginated lists of all the channel flows created under a single Chime. This is a developer API.
     * @param {String} appInstanceArn The ARN of the app instance.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of channel flows that you want to return.
     * @param {String} [nextToken] The token passed by previous API calls until all requested channel flows are returned.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listChannelFlowsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListChannelFlowsResponse}
     */
    listChannelFlows(appInstanceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appInstanceArn' is set
      if (appInstanceArn === undefined || appInstanceArn === null) {
        throw new Error("Missing the required parameter 'appInstanceArn' when calling listChannelFlows");
      }

      let pathParams = {
      };
      let queryParams = {
        'app-instance-arn': appInstanceArn,
        'max-results': opts['maxResults'],
        'next-token': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListChannelFlowsResponse;
      return this.apiClient.callApi(
        '/channel-flows#app-instance-arn', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listChannelMemberships operation.
     * @callback module:api/DefaultApi~listChannelMembershipsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListChannelMembershipsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists all channel memberships in a channel.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call as the value in the header.</p> </note> <p>If you want to list the channels to which a specific app instance user belongs, see the <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_messaging-chime_ListChannelMembershipsForAppInstanceUser.html\">ListChannelMembershipsForAppInstanceUser</a> API.</p>
     * @param {String} channelArn The maximum number of channel memberships that you want returned.
     * @param {String} xAmzChimeBearer The ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [type] The membership type of a user, <code>DEFAULT</code> or <code>HIDDEN</code>. Default members are returned as part of <code>ListChannelMemberships</code> if no type is specified. Hidden members are only returned if the type filter in <code>ListChannelMemberships</code> equals <code>HIDDEN</code>.
     * @param {Number} [maxResults] The maximum number of channel memberships that you want returned.
     * @param {String} [nextToken] The token passed by previous API calls until all requested channel memberships are returned.
     * @param {String} [subChannelId] <p>The ID of the SubChannel in the request.</p> <note> <p>Only required when listing a user's memberships in a particular sub-channel of an elastic channel.</p> </note>
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listChannelMembershipsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListChannelMembershipsResponse}
     */
    listChannelMemberships(channelArn, xAmzChimeBearer, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelArn' is set
      if (channelArn === undefined || channelArn === null) {
        throw new Error("Missing the required parameter 'channelArn' when calling listChannelMemberships");
      }
      // verify the required parameter 'xAmzChimeBearer' is set
      if (xAmzChimeBearer === undefined || xAmzChimeBearer === null) {
        throw new Error("Missing the required parameter 'xAmzChimeBearer' when calling listChannelMemberships");
      }

      let pathParams = {
        'channelArn': channelArn
      };
      let queryParams = {
        'type': opts['type'],
        'max-results': opts['maxResults'],
        'next-token': opts['nextToken'],
        'sub-channel-id': opts['subChannelId'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-chime-bearer': xAmzChimeBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListChannelMembershipsResponse;
      return this.apiClient.callApi(
        '/channels/{channelArn}/memberships#x-amz-chime-bearer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listChannelMembershipsForAppInstanceUser operation.
     * @callback module:api/DefaultApi~listChannelMembershipsForAppInstanceUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListChannelMembershipsForAppInstanceUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> Lists all channels that an <code>AppInstanceUser</code> or <code>AppInstanceBot</code> is a part of. Only an <code>AppInstanceAdmin</code> can call the API with a user ARN that is not their own. </p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call as the value in the header.</p> </note>
     * @param {String} xAmzChimeBearer The ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call.
     * @param {module:model/String} scope 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [appInstanceUserArn] The ARN of the user or bot.
     * @param {Number} [maxResults] The maximum number of users that you want returned.
     * @param {String} [nextToken] The token returned from previous API requests until the number of channel memberships is reached.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listChannelMembershipsForAppInstanceUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListChannelMembershipsForAppInstanceUserResponse}
     */
    listChannelMembershipsForAppInstanceUser(xAmzChimeBearer, scope, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAmzChimeBearer' is set
      if (xAmzChimeBearer === undefined || xAmzChimeBearer === null) {
        throw new Error("Missing the required parameter 'xAmzChimeBearer' when calling listChannelMembershipsForAppInstanceUser");
      }
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling listChannelMembershipsForAppInstanceUser");
      }

      let pathParams = {
      };
      let queryParams = {
        'app-instance-user-arn': opts['appInstanceUserArn'],
        'max-results': opts['maxResults'],
        'next-token': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2'],
        'scope': scope
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-chime-bearer': xAmzChimeBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListChannelMembershipsForAppInstanceUserResponse;
      return this.apiClient.callApi(
        '/channels#scope=app-instance-user-memberships&x-amz-chime-bearer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listChannelMessages operation.
     * @callback module:api/DefaultApi~listChannelMessagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListChannelMessagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>List all the messages in a channel. Returns a paginated list of <code>ChannelMessages</code>. By default, sorted by creation timestamp in descending order.</p> <note> <p>Redacted messages appear in the results as empty, since they are only redacted, not deleted. Deleted messages do not appear in the results. This action always returns the latest version of an edited message.</p> <p>Also, the <code>x-amz-chime-bearer</code> request header is mandatory. Use the ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call as the value in the header.</p> </note>
     * @param {String} channelArn The ARN of the channel.
     * @param {String} xAmzChimeBearer The ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [sortOrder] The order in which you want messages sorted. Default is Descending, based on time created.
     * @param {Date} [notBefore] The initial or starting time stamp for your requested messages.
     * @param {Date} [notAfter] The final or ending time stamp for your requested messages.
     * @param {Number} [maxResults] The maximum number of messages that you want returned.
     * @param {String} [nextToken] The token passed by previous API calls until all requested messages are returned.
     * @param {String} [subChannelId] <p>The ID of the SubChannel in the request.</p> <note> <p>Only required when listing the messages in a SubChannel that the user belongs to.</p> </note>
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listChannelMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListChannelMessagesResponse}
     */
    listChannelMessages(channelArn, xAmzChimeBearer, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelArn' is set
      if (channelArn === undefined || channelArn === null) {
        throw new Error("Missing the required parameter 'channelArn' when calling listChannelMessages");
      }
      // verify the required parameter 'xAmzChimeBearer' is set
      if (xAmzChimeBearer === undefined || xAmzChimeBearer === null) {
        throw new Error("Missing the required parameter 'xAmzChimeBearer' when calling listChannelMessages");
      }

      let pathParams = {
        'channelArn': channelArn
      };
      let queryParams = {
        'sort-order': opts['sortOrder'],
        'not-before': opts['notBefore'],
        'not-after': opts['notAfter'],
        'max-results': opts['maxResults'],
        'next-token': opts['nextToken'],
        'sub-channel-id': opts['subChannelId'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-chime-bearer': xAmzChimeBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListChannelMessagesResponse;
      return this.apiClient.callApi(
        '/channels/{channelArn}/messages#x-amz-chime-bearer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listChannelModerators operation.
     * @callback module:api/DefaultApi~listChannelModeratorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListChannelModeratorsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists all the moderators for a channel.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call as the value in the header.</p> </note>
     * @param {String} channelArn The ARN of the channel.
     * @param {String} xAmzChimeBearer The ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of moderators that you want returned.
     * @param {String} [nextToken] The token passed by previous API calls until all requested moderators are returned.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listChannelModeratorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListChannelModeratorsResponse}
     */
    listChannelModerators(channelArn, xAmzChimeBearer, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelArn' is set
      if (channelArn === undefined || channelArn === null) {
        throw new Error("Missing the required parameter 'channelArn' when calling listChannelModerators");
      }
      // verify the required parameter 'xAmzChimeBearer' is set
      if (xAmzChimeBearer === undefined || xAmzChimeBearer === null) {
        throw new Error("Missing the required parameter 'xAmzChimeBearer' when calling listChannelModerators");
      }

      let pathParams = {
        'channelArn': channelArn
      };
      let queryParams = {
        'max-results': opts['maxResults'],
        'next-token': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-chime-bearer': xAmzChimeBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListChannelModeratorsResponse;
      return this.apiClient.callApi(
        '/channels/{channelArn}/moderators#x-amz-chime-bearer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listChannels operation.
     * @callback module:api/DefaultApi~listChannelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListChannelsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists all Channels created under a single Chime App as a paginated list. You can specify filters to narrow results.</p> <p class=\"title\"> <b>Functionality &amp; restrictions</b> </p> <ul> <li> <p>Use privacy = <code>PUBLIC</code> to retrieve all public channels in the account.</p> </li> <li> <p>Only an <code>AppInstanceAdmin</code> can set privacy = <code>PRIVATE</code> to list the private channels in an account.</p> </li> </ul> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call as the value in the header.</p> </note>
     * @param {String} appInstanceArn The ARN of the <code>AppInstance</code>.
     * @param {String} xAmzChimeBearer The ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [privacy] The privacy setting. <code>PUBLIC</code> retrieves all the public channels. <code>PRIVATE</code> retrieves private channels. Only an <code>AppInstanceAdmin</code> can retrieve private channels. 
     * @param {Number} [maxResults] The maximum number of channels that you want to return.
     * @param {String} [nextToken] The token passed by previous API calls until all requested channels are returned.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListChannelsResponse}
     */
    listChannels(appInstanceArn, xAmzChimeBearer, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appInstanceArn' is set
      if (appInstanceArn === undefined || appInstanceArn === null) {
        throw new Error("Missing the required parameter 'appInstanceArn' when calling listChannels");
      }
      // verify the required parameter 'xAmzChimeBearer' is set
      if (xAmzChimeBearer === undefined || xAmzChimeBearer === null) {
        throw new Error("Missing the required parameter 'xAmzChimeBearer' when calling listChannels");
      }

      let pathParams = {
      };
      let queryParams = {
        'app-instance-arn': appInstanceArn,
        'privacy': opts['privacy'],
        'max-results': opts['maxResults'],
        'next-token': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-chime-bearer': xAmzChimeBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListChannelsResponse;
      return this.apiClient.callApi(
        '/channels#app-instance-arn&x-amz-chime-bearer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listChannelsAssociatedWithChannelFlow operation.
     * @callback module:api/DefaultApi~listChannelsAssociatedWithChannelFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListChannelsAssociatedWithChannelFlowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all channels associated with a specified channel flow. You can associate a channel flow with multiple channels, but you can only associate a channel with one channel flow. This is a developer API.
     * @param {String} channelFlowArn The ARN of the channel flow.
     * @param {module:model/String} scope 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of channels that you want to return.
     * @param {String} [nextToken] The token passed by previous API calls until all requested channels are returned.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listChannelsAssociatedWithChannelFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListChannelsAssociatedWithChannelFlowResponse}
     */
    listChannelsAssociatedWithChannelFlow(channelFlowArn, scope, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelFlowArn' is set
      if (channelFlowArn === undefined || channelFlowArn === null) {
        throw new Error("Missing the required parameter 'channelFlowArn' when calling listChannelsAssociatedWithChannelFlow");
      }
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling listChannelsAssociatedWithChannelFlow");
      }

      let pathParams = {
      };
      let queryParams = {
        'channel-flow-arn': channelFlowArn,
        'max-results': opts['maxResults'],
        'next-token': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2'],
        'scope': scope
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListChannelsAssociatedWithChannelFlowResponse;
      return this.apiClient.callApi(
        '/channels#scope=channel-flow-associations&channel-flow-arn', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listChannelsModeratedByAppInstanceUser operation.
     * @callback module:api/DefaultApi~listChannelsModeratedByAppInstanceUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListChannelsModeratedByAppInstanceUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>A list of the channels moderated by an <code>AppInstanceUser</code>.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call as the value in the header.</p> </note>
     * @param {String} xAmzChimeBearer The ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call.
     * @param {module:model/String} scope 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [appInstanceUserArn] The ARN of the user or bot in the moderated channel.
     * @param {Number} [maxResults] The maximum number of channels in the request.
     * @param {String} [nextToken] The token returned from previous API requests until the number of channels moderated by the user is reached.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listChannelsModeratedByAppInstanceUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListChannelsModeratedByAppInstanceUserResponse}
     */
    listChannelsModeratedByAppInstanceUser(xAmzChimeBearer, scope, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAmzChimeBearer' is set
      if (xAmzChimeBearer === undefined || xAmzChimeBearer === null) {
        throw new Error("Missing the required parameter 'xAmzChimeBearer' when calling listChannelsModeratedByAppInstanceUser");
      }
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling listChannelsModeratedByAppInstanceUser");
      }

      let pathParams = {
      };
      let queryParams = {
        'app-instance-user-arn': opts['appInstanceUserArn'],
        'max-results': opts['maxResults'],
        'next-token': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2'],
        'scope': scope
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-chime-bearer': xAmzChimeBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListChannelsModeratedByAppInstanceUserResponse;
      return this.apiClient.callApi(
        '/channels#scope=app-instance-user-moderated-channels&x-amz-chime-bearer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSubChannels operation.
     * @callback module:api/DefaultApi~listSubChannelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSubChannelsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the SubChannels in an elastic channel when given a channel ID. Available only to the app instance admins and channel moderators of elastic channels.
     * @param {String} channelArn The ARN of elastic channel.
     * @param {String} xAmzChimeBearer The <code>AppInstanceUserArn</code> of the user making the API call.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of sub-channels that you want to return.
     * @param {String} [nextToken] The token passed by previous API calls until all requested sub-channels are returned.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listSubChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSubChannelsResponse}
     */
    listSubChannels(channelArn, xAmzChimeBearer, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelArn' is set
      if (channelArn === undefined || channelArn === null) {
        throw new Error("Missing the required parameter 'channelArn' when calling listSubChannels");
      }
      // verify the required parameter 'xAmzChimeBearer' is set
      if (xAmzChimeBearer === undefined || xAmzChimeBearer === null) {
        throw new Error("Missing the required parameter 'xAmzChimeBearer' when calling listSubChannels");
      }

      let pathParams = {
        'channelArn': channelArn
      };
      let queryParams = {
        'max-results': opts['maxResults'],
        'next-token': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-chime-bearer': xAmzChimeBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSubChannelsResponse;
      return this.apiClient.callApi(
        '/channels/{channelArn}/subchannels#x-amz-chime-bearer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the tags applied to an Amazon Chime SDK messaging resource.
     * @param {String} arn The ARN of the resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(arn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'arn' is set
      if (arn === undefined || arn === null) {
        throw new Error("Missing the required parameter 'arn' when calling listTagsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
        'arn': arn
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/tags#arn', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putChannelExpirationSettings operation.
     * @callback module:api/DefaultApi~putChannelExpirationSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutChannelExpirationSettingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Sets the number of days before the channel is automatically deleted.</p> <note> <ul> <li> <p>A background process deletes expired channels within 6 hours of expiration. Actual deletion times may vary.</p> </li> <li> <p>Expired channels that have not yet been deleted appear as active, and you can update their expiration settings. The system honors the new settings.</p> </li> <li> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call as the value in the header.</p> </li> </ul> </note>
     * @param {String} channelArn The ARN of the channel.
     * @param {module:model/PutChannelExpirationSettingsRequest} putChannelExpirationSettingsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [xAmzChimeBearer] The ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call.
     * @param {module:api/DefaultApi~putChannelExpirationSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutChannelExpirationSettingsResponse}
     */
    putChannelExpirationSettings(channelArn, putChannelExpirationSettingsRequest, opts, callback) {
      opts = opts || {};
      let postBody = putChannelExpirationSettingsRequest;
      // verify the required parameter 'channelArn' is set
      if (channelArn === undefined || channelArn === null) {
        throw new Error("Missing the required parameter 'channelArn' when calling putChannelExpirationSettings");
      }
      // verify the required parameter 'putChannelExpirationSettingsRequest' is set
      if (putChannelExpirationSettingsRequest === undefined || putChannelExpirationSettingsRequest === null) {
        throw new Error("Missing the required parameter 'putChannelExpirationSettingsRequest' when calling putChannelExpirationSettings");
      }

      let pathParams = {
        'channelArn': channelArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-chime-bearer': opts['xAmzChimeBearer']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutChannelExpirationSettingsResponse;
      return this.apiClient.callApi(
        '/channels/{channelArn}/expiration-settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putChannelMembershipPreferences operation.
     * @callback module:api/DefaultApi~putChannelMembershipPreferencesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutChannelMembershipPreferencesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Sets the membership preferences of an <code>AppInstanceUser</code> or <code>AppInstanceBot</code> for the specified channel. The user or bot must be a member of the channel. Only the user or bot who owns the membership can set preferences. Users or bots in the <code>AppInstanceAdmin</code> and channel moderator roles can't set preferences for other users. Banned users or bots can't set membership preferences for the channel from which they are banned.</p> <note> <p>The x-amz-chime-bearer request header is mandatory. Use the ARN of an <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call as the value in the header.</p> </note>
     * @param {String} channelArn The ARN of the channel.
     * @param {String} memberArn The ARN of the member setting the preferences.
     * @param {String} xAmzChimeBearer The ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call.
     * @param {module:model/PutChannelMembershipPreferencesRequest} putChannelMembershipPreferencesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putChannelMembershipPreferencesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutChannelMembershipPreferencesResponse}
     */
    putChannelMembershipPreferences(channelArn, memberArn, xAmzChimeBearer, putChannelMembershipPreferencesRequest, opts, callback) {
      opts = opts || {};
      let postBody = putChannelMembershipPreferencesRequest;
      // verify the required parameter 'channelArn' is set
      if (channelArn === undefined || channelArn === null) {
        throw new Error("Missing the required parameter 'channelArn' when calling putChannelMembershipPreferences");
      }
      // verify the required parameter 'memberArn' is set
      if (memberArn === undefined || memberArn === null) {
        throw new Error("Missing the required parameter 'memberArn' when calling putChannelMembershipPreferences");
      }
      // verify the required parameter 'xAmzChimeBearer' is set
      if (xAmzChimeBearer === undefined || xAmzChimeBearer === null) {
        throw new Error("Missing the required parameter 'xAmzChimeBearer' when calling putChannelMembershipPreferences");
      }
      // verify the required parameter 'putChannelMembershipPreferencesRequest' is set
      if (putChannelMembershipPreferencesRequest === undefined || putChannelMembershipPreferencesRequest === null) {
        throw new Error("Missing the required parameter 'putChannelMembershipPreferencesRequest' when calling putChannelMembershipPreferences");
      }

      let pathParams = {
        'channelArn': channelArn,
        'memberArn': memberArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-chime-bearer': xAmzChimeBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutChannelMembershipPreferencesResponse;
      return this.apiClient.callApi(
        '/channels/{channelArn}/memberships/{memberArn}/preferences#x-amz-chime-bearer', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putMessagingStreamingConfigurations operation.
     * @callback module:api/DefaultApi~putMessagingStreamingConfigurationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutMessagingStreamingConfigurationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the data streaming configuration for an <code>AppInstance</code>. For more information, see <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/dg/streaming-export.html\">Streaming messaging data</a> in the <i>Amazon Chime SDK Developer Guide</i>.
     * @param {String} appInstanceArn The ARN of the streaming configuration.
     * @param {module:model/PutMessagingStreamingConfigurationsRequest} putMessagingStreamingConfigurationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putMessagingStreamingConfigurationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutMessagingStreamingConfigurationsResponse}
     */
    putMessagingStreamingConfigurations(appInstanceArn, putMessagingStreamingConfigurationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = putMessagingStreamingConfigurationsRequest;
      // verify the required parameter 'appInstanceArn' is set
      if (appInstanceArn === undefined || appInstanceArn === null) {
        throw new Error("Missing the required parameter 'appInstanceArn' when calling putMessagingStreamingConfigurations");
      }
      // verify the required parameter 'putMessagingStreamingConfigurationsRequest' is set
      if (putMessagingStreamingConfigurationsRequest === undefined || putMessagingStreamingConfigurationsRequest === null) {
        throw new Error("Missing the required parameter 'putMessagingStreamingConfigurationsRequest' when calling putMessagingStreamingConfigurations");
      }

      let pathParams = {
        'appInstanceArn': appInstanceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutMessagingStreamingConfigurationsResponse;
      return this.apiClient.callApi(
        '/app-instances/{appInstanceArn}/streaming-configurations', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the redactChannelMessage operation.
     * @callback module:api/DefaultApi~redactChannelMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RedactChannelMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Redacts message content, but not metadata. The message exists in the back end, but the action returns null content, and the state shows as redacted.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call as the value in the header.</p> </note>
     * @param {String} channelArn The ARN of the channel containing the messages that you want to redact.
     * @param {String} messageId The ID of the message being redacted.
     * @param {String} xAmzChimeBearer The ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call.
     * @param {module:model/String} operation 
     * @param {module:model/RedactChannelMessageRequest} redactChannelMessageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~redactChannelMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RedactChannelMessageResponse}
     */
    redactChannelMessage(channelArn, messageId, xAmzChimeBearer, operation, redactChannelMessageRequest, opts, callback) {
      opts = opts || {};
      let postBody = redactChannelMessageRequest;
      // verify the required parameter 'channelArn' is set
      if (channelArn === undefined || channelArn === null) {
        throw new Error("Missing the required parameter 'channelArn' when calling redactChannelMessage");
      }
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling redactChannelMessage");
      }
      // verify the required parameter 'xAmzChimeBearer' is set
      if (xAmzChimeBearer === undefined || xAmzChimeBearer === null) {
        throw new Error("Missing the required parameter 'xAmzChimeBearer' when calling redactChannelMessage");
      }
      // verify the required parameter 'operation' is set
      if (operation === undefined || operation === null) {
        throw new Error("Missing the required parameter 'operation' when calling redactChannelMessage");
      }
      // verify the required parameter 'redactChannelMessageRequest' is set
      if (redactChannelMessageRequest === undefined || redactChannelMessageRequest === null) {
        throw new Error("Missing the required parameter 'redactChannelMessageRequest' when calling redactChannelMessage");
      }

      let pathParams = {
        'channelArn': channelArn,
        'messageId': messageId
      };
      let queryParams = {
        'operation': operation
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-chime-bearer': xAmzChimeBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RedactChannelMessageResponse;
      return this.apiClient.callApi(
        '/channels/{channelArn}/messages/{messageId}#operation=redact&x-amz-chime-bearer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchChannels operation.
     * @callback module:api/DefaultApi~searchChannelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchChannelsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Allows the <code>ChimeBearer</code> to search channels by channel members. Users or bots can search across the channels that they belong to. Users in the <code>AppInstanceAdmin</code> role can search across all channels.</p> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call as the value in the header.</p>
     * @param {module:model/String} operation 
     * @param {module:model/SearchChannelsRequest} searchChannelsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [xAmzChimeBearer] The <code>AppInstanceUserArn</code> of the user making the API call.
     * @param {Number} [maxResults] The maximum number of channels that you want returned.
     * @param {String} [nextToken] The token returned from previous API requests until the number of channels is reached.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~searchChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchChannelsResponse}
     */
    searchChannels(operation, searchChannelsRequest, opts, callback) {
      opts = opts || {};
      let postBody = searchChannelsRequest;
      // verify the required parameter 'operation' is set
      if (operation === undefined || operation === null) {
        throw new Error("Missing the required parameter 'operation' when calling searchChannels");
      }
      // verify the required parameter 'searchChannelsRequest' is set
      if (searchChannelsRequest === undefined || searchChannelsRequest === null) {
        throw new Error("Missing the required parameter 'searchChannelsRequest' when calling searchChannels");
      }

      let pathParams = {
      };
      let queryParams = {
        'max-results': opts['maxResults'],
        'next-token': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2'],
        'operation': operation
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-chime-bearer': opts['xAmzChimeBearer']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchChannelsResponse;
      return this.apiClient.callApi(
        '/channels#operation=search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendChannelMessage operation.
     * @callback module:api/DefaultApi~sendChannelMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendChannelMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Sends a message to a particular channel that the member is a part of.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call as the value in the header.</p> <p>Also, <code>STANDARD</code> messages can be up to 4KB in size and contain metadata. Metadata is arbitrary, and you can use it in a variety of ways, such as containing a link to an attachment.</p> <p> <code>CONTROL</code> messages are limited to 30 bytes and do not contain metadata.</p> </note>
     * @param {String} channelArn The ARN of the channel.
     * @param {String} xAmzChimeBearer The ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call.
     * @param {module:model/SendChannelMessageRequest} sendChannelMessageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~sendChannelMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendChannelMessageResponse}
     */
    sendChannelMessage(channelArn, xAmzChimeBearer, sendChannelMessageRequest, opts, callback) {
      opts = opts || {};
      let postBody = sendChannelMessageRequest;
      // verify the required parameter 'channelArn' is set
      if (channelArn === undefined || channelArn === null) {
        throw new Error("Missing the required parameter 'channelArn' when calling sendChannelMessage");
      }
      // verify the required parameter 'xAmzChimeBearer' is set
      if (xAmzChimeBearer === undefined || xAmzChimeBearer === null) {
        throw new Error("Missing the required parameter 'xAmzChimeBearer' when calling sendChannelMessage");
      }
      // verify the required parameter 'sendChannelMessageRequest' is set
      if (sendChannelMessageRequest === undefined || sendChannelMessageRequest === null) {
        throw new Error("Missing the required parameter 'sendChannelMessageRequest' when calling sendChannelMessage");
      }

      let pathParams = {
        'channelArn': channelArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-chime-bearer': xAmzChimeBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SendChannelMessageResponse;
      return this.apiClient.callApi(
        '/channels/{channelArn}/messages#x-amz-chime-bearer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Applies the specified tags to the specified Amazon Chime SDK messaging resource.
     * @param {module:model/String} operation 
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tagResource(operation, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'operation' is set
      if (operation === undefined || operation === null) {
        throw new Error("Missing the required parameter 'operation' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
      };
      let queryParams = {
        'operation': operation
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tags#operation=tag-resource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the specified tags from the specified Amazon Chime SDK messaging resource.
     * @param {module:model/String} operation 
     * @param {module:model/UntagResourceRequest} untagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    untagResource(operation, untagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = untagResourceRequest;
      // verify the required parameter 'operation' is set
      if (operation === undefined || operation === null) {
        throw new Error("Missing the required parameter 'operation' when calling untagResource");
      }
      // verify the required parameter 'untagResourceRequest' is set
      if (untagResourceRequest === undefined || untagResourceRequest === null) {
        throw new Error("Missing the required parameter 'untagResourceRequest' when calling untagResource");
      }

      let pathParams = {
      };
      let queryParams = {
        'operation': operation
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tags#operation=untag-resource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChannel operation.
     * @callback module:api/DefaultApi~updateChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Update a channel's attributes.</p> <p> <b>Restriction</b>: You can't change a channel's privacy. </p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call as the value in the header.</p> </note>
     * @param {String} channelArn The ARN of the channel.
     * @param {String} xAmzChimeBearer The ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call.
     * @param {module:model/UpdateChannelRequest} updateChannelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateChannelResponse}
     */
    updateChannel(channelArn, xAmzChimeBearer, updateChannelRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateChannelRequest;
      // verify the required parameter 'channelArn' is set
      if (channelArn === undefined || channelArn === null) {
        throw new Error("Missing the required parameter 'channelArn' when calling updateChannel");
      }
      // verify the required parameter 'xAmzChimeBearer' is set
      if (xAmzChimeBearer === undefined || xAmzChimeBearer === null) {
        throw new Error("Missing the required parameter 'xAmzChimeBearer' when calling updateChannel");
      }
      // verify the required parameter 'updateChannelRequest' is set
      if (updateChannelRequest === undefined || updateChannelRequest === null) {
        throw new Error("Missing the required parameter 'updateChannelRequest' when calling updateChannel");
      }

      let pathParams = {
        'channelArn': channelArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-chime-bearer': xAmzChimeBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateChannelResponse;
      return this.apiClient.callApi(
        '/channels/{channelArn}#x-amz-chime-bearer', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChannelFlow operation.
     * @callback module:api/DefaultApi~updateChannelFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateChannelFlowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates channel flow attributes. This is a developer API.
     * @param {String} channelFlowArn The ARN of the channel flow.
     * @param {module:model/UpdateChannelFlowRequest} updateChannelFlowRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateChannelFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateChannelFlowResponse}
     */
    updateChannelFlow(channelFlowArn, updateChannelFlowRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateChannelFlowRequest;
      // verify the required parameter 'channelFlowArn' is set
      if (channelFlowArn === undefined || channelFlowArn === null) {
        throw new Error("Missing the required parameter 'channelFlowArn' when calling updateChannelFlow");
      }
      // verify the required parameter 'updateChannelFlowRequest' is set
      if (updateChannelFlowRequest === undefined || updateChannelFlowRequest === null) {
        throw new Error("Missing the required parameter 'updateChannelFlowRequest' when calling updateChannelFlow");
      }

      let pathParams = {
        'channelFlowArn': channelFlowArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateChannelFlowResponse;
      return this.apiClient.callApi(
        '/channel-flows/{channelFlowArn}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChannelMessage operation.
     * @callback module:api/DefaultApi~updateChannelMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateChannelMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates the content of a message.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call as the value in the header.</p> </note>
     * @param {String} channelArn The ARN of the channel.
     * @param {String} messageId The ID string of the message being updated.
     * @param {String} xAmzChimeBearer The ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call.
     * @param {module:model/UpdateChannelMessageRequest} updateChannelMessageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateChannelMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateChannelMessageResponse}
     */
    updateChannelMessage(channelArn, messageId, xAmzChimeBearer, updateChannelMessageRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateChannelMessageRequest;
      // verify the required parameter 'channelArn' is set
      if (channelArn === undefined || channelArn === null) {
        throw new Error("Missing the required parameter 'channelArn' when calling updateChannelMessage");
      }
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling updateChannelMessage");
      }
      // verify the required parameter 'xAmzChimeBearer' is set
      if (xAmzChimeBearer === undefined || xAmzChimeBearer === null) {
        throw new Error("Missing the required parameter 'xAmzChimeBearer' when calling updateChannelMessage");
      }
      // verify the required parameter 'updateChannelMessageRequest' is set
      if (updateChannelMessageRequest === undefined || updateChannelMessageRequest === null) {
        throw new Error("Missing the required parameter 'updateChannelMessageRequest' when calling updateChannelMessage");
      }

      let pathParams = {
        'channelArn': channelArn,
        'messageId': messageId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-chime-bearer': xAmzChimeBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateChannelMessageResponse;
      return this.apiClient.callApi(
        '/channels/{channelArn}/messages/{messageId}#x-amz-chime-bearer', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChannelReadMarker operation.
     * @callback module:api/DefaultApi~updateChannelReadMarkerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateChannelReadMarkerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>The details of the time when a user last read messages in a channel.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call as the value in the header.</p> </note>
     * @param {String} channelArn The ARN of the channel.
     * @param {String} xAmzChimeBearer The ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateChannelReadMarkerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateChannelReadMarkerResponse}
     */
    updateChannelReadMarker(channelArn, xAmzChimeBearer, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelArn' is set
      if (channelArn === undefined || channelArn === null) {
        throw new Error("Missing the required parameter 'channelArn' when calling updateChannelReadMarker");
      }
      // verify the required parameter 'xAmzChimeBearer' is set
      if (xAmzChimeBearer === undefined || xAmzChimeBearer === null) {
        throw new Error("Missing the required parameter 'xAmzChimeBearer' when calling updateChannelReadMarker");
      }

      let pathParams = {
        'channelArn': channelArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-chime-bearer': xAmzChimeBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UpdateChannelReadMarkerResponse;
      return this.apiClient.callApi(
        '/channels/{channelArn}/readMarker#x-amz-chime-bearer', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
