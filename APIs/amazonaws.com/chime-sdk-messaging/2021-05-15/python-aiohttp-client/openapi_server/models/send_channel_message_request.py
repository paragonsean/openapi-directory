# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message_attribute_value import MessageAttributeValue
from openapi_server.models.send_channel_message_request_push_notification import SendChannelMessageRequestPushNotification
from openapi_server.models.target import Target
import re
from openapi_server import util


class SendChannelMessageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, type: str=None, persistence: str=None, metadata: str=None, client_request_token: str=None, push_notification: SendChannelMessageRequestPushNotification=None, message_attributes: Dict[str, MessageAttributeValue]=None, sub_channel_id: str=None, content_type: str=None, target: List[Target]=None):
        """SendChannelMessageRequest - a model defined in OpenAPI

        :param content: The content of this SendChannelMessageRequest.
        :param type: The type of this SendChannelMessageRequest.
        :param persistence: The persistence of this SendChannelMessageRequest.
        :param metadata: The metadata of this SendChannelMessageRequest.
        :param client_request_token: The client_request_token of this SendChannelMessageRequest.
        :param push_notification: The push_notification of this SendChannelMessageRequest.
        :param message_attributes: The message_attributes of this SendChannelMessageRequest.
        :param sub_channel_id: The sub_channel_id of this SendChannelMessageRequest.
        :param content_type: The content_type of this SendChannelMessageRequest.
        :param target: The target of this SendChannelMessageRequest.
        """
        self.openapi_types = {
            'content': str,
            'type': str,
            'persistence': str,
            'metadata': str,
            'client_request_token': str,
            'push_notification': SendChannelMessageRequestPushNotification,
            'message_attributes': Dict[str, MessageAttributeValue],
            'sub_channel_id': str,
            'content_type': str,
            'target': List[Target]
        }

        self.attribute_map = {
            'content': 'Content',
            'type': 'Type',
            'persistence': 'Persistence',
            'metadata': 'Metadata',
            'client_request_token': 'ClientRequestToken',
            'push_notification': 'PushNotification',
            'message_attributes': 'MessageAttributes',
            'sub_channel_id': 'SubChannelId',
            'content_type': 'ContentType',
            'target': 'Target'
        }

        self._content = content
        self._type = type
        self._persistence = persistence
        self._metadata = metadata
        self._client_request_token = client_request_token
        self._push_notification = push_notification
        self._message_attributes = message_attributes
        self._sub_channel_id = sub_channel_id
        self._content_type = content_type
        self._target = target

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendChannelMessageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SendChannelMessage_request of this SendChannelMessageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this SendChannelMessageRequest.

        The content of the channel message.

        :return: The content of this SendChannelMessageRequest.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this SendChannelMessageRequest.

        The content of the channel message.

        :param content: The content of this SendChannelMessageRequest.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")
        if content is not None and len(content) < 1:
            raise ValueError("Invalid value for `content`, length must be greater than or equal to `1`")
        if content is not None and not re.search(r'[\s\S]*', content):
            raise ValueError("Invalid value for `content`, must be a follow pattern or equal to `/[\s\S]*/`")

        self._content = content

    @property
    def type(self):
        """Gets the type of this SendChannelMessageRequest.

        <p>The type of message, <code>STANDARD</code> or <code>CONTROL</code>.</p> <p> <code>STANDARD</code> messages can be up to 4KB in size and contain metadata. Metadata is arbitrary, and you can use it in a variety of ways, such as containing a link to an attachment.</p> <p> <code>CONTROL</code> messages are limited to 30 bytes and do not contain metadata.</p>

        :return: The type of this SendChannelMessageRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SendChannelMessageRequest.

        <p>The type of message, <code>STANDARD</code> or <code>CONTROL</code>.</p> <p> <code>STANDARD</code> messages can be up to 4KB in size and contain metadata. Metadata is arbitrary, and you can use it in a variety of ways, such as containing a link to an attachment.</p> <p> <code>CONTROL</code> messages are limited to 30 bytes and do not contain metadata.</p>

        :param type: The type of this SendChannelMessageRequest.
        :type type: str
        """
        allowed_values = ["STANDARD", "CONTROL"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def persistence(self):
        """Gets the persistence of this SendChannelMessageRequest.

        Boolean that controls whether the message is persisted on the back end. Required.

        :return: The persistence of this SendChannelMessageRequest.
        :rtype: str
        """
        return self._persistence

    @persistence.setter
    def persistence(self, persistence):
        """Sets the persistence of this SendChannelMessageRequest.

        Boolean that controls whether the message is persisted on the back end. Required.

        :param persistence: The persistence of this SendChannelMessageRequest.
        :type persistence: str
        """
        allowed_values = ["PERSISTENT", "NON_PERSISTENT"]  # noqa: E501
        if persistence not in allowed_values:
            raise ValueError(
                "Invalid value for `persistence` ({0}), must be one of {1}"
                .format(persistence, allowed_values)
            )

        self._persistence = persistence

    @property
    def metadata(self):
        """Gets the metadata of this SendChannelMessageRequest.

        The optional metadata for each message.

        :return: The metadata of this SendChannelMessageRequest.
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this SendChannelMessageRequest.

        The optional metadata for each message.

        :param metadata: The metadata of this SendChannelMessageRequest.
        :type metadata: str
        """
        if metadata is not None and len(metadata) > 1024:
            raise ValueError("Invalid value for `metadata`, length must be less than or equal to `1024`")
        if metadata is not None and len(metadata) < 0:
            raise ValueError("Invalid value for `metadata`, length must be greater than or equal to `0`")
        if metadata is not None and not re.search(r'.*', metadata):
            raise ValueError("Invalid value for `metadata`, must be a follow pattern or equal to `/.*/`")

        self._metadata = metadata

    @property
    def client_request_token(self):
        """Gets the client_request_token of this SendChannelMessageRequest.

        The <code>Idempotency</code> token for each client request.

        :return: The client_request_token of this SendChannelMessageRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this SendChannelMessageRequest.

        The <code>Idempotency</code> token for each client request.

        :param client_request_token: The client_request_token of this SendChannelMessageRequest.
        :type client_request_token: str
        """
        if client_request_token is None:
            raise ValueError("Invalid value for `client_request_token`, must not be `None`")
        if client_request_token is not None and len(client_request_token) > 64:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `64`")
        if client_request_token is not None and len(client_request_token) < 2:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `2`")
        if client_request_token is not None and not re.search(r'[-_a-zA-Z0-9]*', client_request_token):
            raise ValueError("Invalid value for `client_request_token`, must be a follow pattern or equal to `/[-_a-zA-Z0-9]*/`")

        self._client_request_token = client_request_token

    @property
    def push_notification(self):
        """Gets the push_notification of this SendChannelMessageRequest.


        :return: The push_notification of this SendChannelMessageRequest.
        :rtype: SendChannelMessageRequestPushNotification
        """
        return self._push_notification

    @push_notification.setter
    def push_notification(self, push_notification):
        """Sets the push_notification of this SendChannelMessageRequest.


        :param push_notification: The push_notification of this SendChannelMessageRequest.
        :type push_notification: SendChannelMessageRequestPushNotification
        """

        self._push_notification = push_notification

    @property
    def message_attributes(self):
        """Gets the message_attributes of this SendChannelMessageRequest.

        The attributes for the message, used for message filtering along with a <code>FilterRule</code> defined in the <code>PushNotificationPreferences</code>.

        :return: The message_attributes of this SendChannelMessageRequest.
        :rtype: Dict[str, MessageAttributeValue]
        """
        return self._message_attributes

    @message_attributes.setter
    def message_attributes(self, message_attributes):
        """Sets the message_attributes of this SendChannelMessageRequest.

        The attributes for the message, used for message filtering along with a <code>FilterRule</code> defined in the <code>PushNotificationPreferences</code>.

        :param message_attributes: The message_attributes of this SendChannelMessageRequest.
        :type message_attributes: Dict[str, MessageAttributeValue]
        """

        self._message_attributes = message_attributes

    @property
    def sub_channel_id(self):
        """Gets the sub_channel_id of this SendChannelMessageRequest.

        The ID of the SubChannel in the request.

        :return: The sub_channel_id of this SendChannelMessageRequest.
        :rtype: str
        """
        return self._sub_channel_id

    @sub_channel_id.setter
    def sub_channel_id(self, sub_channel_id):
        """Sets the sub_channel_id of this SendChannelMessageRequest.

        The ID of the SubChannel in the request.

        :param sub_channel_id: The sub_channel_id of this SendChannelMessageRequest.
        :type sub_channel_id: str
        """
        if sub_channel_id is not None and len(sub_channel_id) > 128:
            raise ValueError("Invalid value for `sub_channel_id`, length must be less than or equal to `128`")
        if sub_channel_id is not None and len(sub_channel_id) < 1:
            raise ValueError("Invalid value for `sub_channel_id`, length must be greater than or equal to `1`")
        if sub_channel_id is not None and not re.search(r'[-_a-zA-Z0-9]*', sub_channel_id):
            raise ValueError("Invalid value for `sub_channel_id`, must be a follow pattern or equal to `/[-_a-zA-Z0-9]*/`")

        self._sub_channel_id = sub_channel_id

    @property
    def content_type(self):
        """Gets the content_type of this SendChannelMessageRequest.

        The content type of the channel message.

        :return: The content_type of this SendChannelMessageRequest.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this SendChannelMessageRequest.

        The content type of the channel message.

        :param content_type: The content_type of this SendChannelMessageRequest.
        :type content_type: str
        """
        if content_type is not None and len(content_type) > 45:
            raise ValueError("Invalid value for `content_type`, length must be less than or equal to `45`")
        if content_type is not None and len(content_type) < 0:
            raise ValueError("Invalid value for `content_type`, length must be greater than or equal to `0`")
        if content_type is not None and not re.search(r'[\s\S]*', content_type):
            raise ValueError("Invalid value for `content_type`, must be a follow pattern or equal to `/[\s\S]*/`")

        self._content_type = content_type

    @property
    def target(self):
        """Gets the target of this SendChannelMessageRequest.

        The target of a message. Must be a member of the channel, such as another user, a bot, or the sender. Only the target and the sender can view targeted messages. Only users who can see targeted messages can take actions on them. However, administrators can delete targeted messages that they can’t see. 

        :return: The target of this SendChannelMessageRequest.
        :rtype: List[Target]
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this SendChannelMessageRequest.

        The target of a message. Must be a member of the channel, such as another user, a bot, or the sender. Only the target and the sender can view targeted messages. Only users who can see targeted messages can take actions on them. However, administrators can delete targeted messages that they can’t see. 

        :param target: The target of this SendChannelMessageRequest.
        :type target: List[Target]
        """
        if target is not None and len(target) > 1:
            raise ValueError("Invalid value for `target`, number of items must be less than or equal to `1`")
        if target is not None and len(target) < 1:
            raise ValueError("Invalid value for `target`, number of items must be greater than or equal to `1`")

        self._target = target
