# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UpdateChannelMessageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, metadata: str=None, sub_channel_id: str=None, content_type: str=None):
        """UpdateChannelMessageRequest - a model defined in OpenAPI

        :param content: The content of this UpdateChannelMessageRequest.
        :param metadata: The metadata of this UpdateChannelMessageRequest.
        :param sub_channel_id: The sub_channel_id of this UpdateChannelMessageRequest.
        :param content_type: The content_type of this UpdateChannelMessageRequest.
        """
        self.openapi_types = {
            'content': str,
            'metadata': str,
            'sub_channel_id': str,
            'content_type': str
        }

        self.attribute_map = {
            'content': 'Content',
            'metadata': 'Metadata',
            'sub_channel_id': 'SubChannelId',
            'content_type': 'ContentType'
        }

        self._content = content
        self._metadata = metadata
        self._sub_channel_id = sub_channel_id
        self._content_type = content_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateChannelMessageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateChannelMessage_request of this UpdateChannelMessageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this UpdateChannelMessageRequest.

        The content of the channel message. 

        :return: The content of this UpdateChannelMessageRequest.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this UpdateChannelMessageRequest.

        The content of the channel message. 

        :param content: The content of this UpdateChannelMessageRequest.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")
        if content is not None and len(content) < 1:
            raise ValueError("Invalid value for `content`, length must be greater than or equal to `1`")
        if content is not None and not re.search(r'[\s\S]*', content):
            raise ValueError("Invalid value for `content`, must be a follow pattern or equal to `/[\s\S]*/`")

        self._content = content

    @property
    def metadata(self):
        """Gets the metadata of this UpdateChannelMessageRequest.

        The metadata of the message being updated.

        :return: The metadata of this UpdateChannelMessageRequest.
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this UpdateChannelMessageRequest.

        The metadata of the message being updated.

        :param metadata: The metadata of this UpdateChannelMessageRequest.
        :type metadata: str
        """
        if metadata is not None and len(metadata) > 1024:
            raise ValueError("Invalid value for `metadata`, length must be less than or equal to `1024`")
        if metadata is not None and len(metadata) < 0:
            raise ValueError("Invalid value for `metadata`, length must be greater than or equal to `0`")
        if metadata is not None and not re.search(r'.*', metadata):
            raise ValueError("Invalid value for `metadata`, must be a follow pattern or equal to `/.*/`")

        self._metadata = metadata

    @property
    def sub_channel_id(self):
        """Gets the sub_channel_id of this UpdateChannelMessageRequest.

        <p>The ID of the SubChannel in the request.</p> <note> <p>Only required when updating messages in a SubChannel that the user belongs to.</p> </note>

        :return: The sub_channel_id of this UpdateChannelMessageRequest.
        :rtype: str
        """
        return self._sub_channel_id

    @sub_channel_id.setter
    def sub_channel_id(self, sub_channel_id):
        """Sets the sub_channel_id of this UpdateChannelMessageRequest.

        <p>The ID of the SubChannel in the request.</p> <note> <p>Only required when updating messages in a SubChannel that the user belongs to.</p> </note>

        :param sub_channel_id: The sub_channel_id of this UpdateChannelMessageRequest.
        :type sub_channel_id: str
        """
        if sub_channel_id is not None and len(sub_channel_id) > 128:
            raise ValueError("Invalid value for `sub_channel_id`, length must be less than or equal to `128`")
        if sub_channel_id is not None and len(sub_channel_id) < 1:
            raise ValueError("Invalid value for `sub_channel_id`, length must be greater than or equal to `1`")
        if sub_channel_id is not None and not re.search(r'[-_a-zA-Z0-9]*', sub_channel_id):
            raise ValueError("Invalid value for `sub_channel_id`, must be a follow pattern or equal to `/[-_a-zA-Z0-9]*/`")

        self._sub_channel_id = sub_channel_id

    @property
    def content_type(self):
        """Gets the content_type of this UpdateChannelMessageRequest.

        The content type of the channel message.

        :return: The content_type of this UpdateChannelMessageRequest.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this UpdateChannelMessageRequest.

        The content type of the channel message.

        :param content_type: The content_type of this UpdateChannelMessageRequest.
        :type content_type: str
        """
        if content_type is not None and len(content_type) > 45:
            raise ValueError("Invalid value for `content_type`, length must be less than or equal to `45`")
        if content_type is not None and len(content_type) < 0:
            raise ValueError("Invalid value for `content_type`, length must be greater than or equal to `0`")
        if content_type is not None and not re.search(r'[\s\S]*', content_type):
            raise ValueError("Invalid value for `content_type`, must be a follow pattern or equal to `/[\s\S]*/`")

        self._content_type = content_type
