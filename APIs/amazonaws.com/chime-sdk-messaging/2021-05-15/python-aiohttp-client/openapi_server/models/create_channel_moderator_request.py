# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateChannelModeratorRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_moderator_arn: str=None):
        """CreateChannelModeratorRequest - a model defined in OpenAPI

        :param channel_moderator_arn: The channel_moderator_arn of this CreateChannelModeratorRequest.
        """
        self.openapi_types = {
            'channel_moderator_arn': str
        }

        self.attribute_map = {
            'channel_moderator_arn': 'ChannelModeratorArn'
        }

        self._channel_moderator_arn = channel_moderator_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateChannelModeratorRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateChannelModerator_request of this CreateChannelModeratorRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_moderator_arn(self):
        """Gets the channel_moderator_arn of this CreateChannelModeratorRequest.

        The <code>AppInstanceUserArn</code> of the moderator.

        :return: The channel_moderator_arn of this CreateChannelModeratorRequest.
        :rtype: str
        """
        return self._channel_moderator_arn

    @channel_moderator_arn.setter
    def channel_moderator_arn(self, channel_moderator_arn):
        """Sets the channel_moderator_arn of this CreateChannelModeratorRequest.

        The <code>AppInstanceUserArn</code> of the moderator.

        :param channel_moderator_arn: The channel_moderator_arn of this CreateChannelModeratorRequest.
        :type channel_moderator_arn: str
        """
        if channel_moderator_arn is None:
            raise ValueError("Invalid value for `channel_moderator_arn`, must not be `None`")
        if channel_moderator_arn is not None and len(channel_moderator_arn) > 1600:
            raise ValueError("Invalid value for `channel_moderator_arn`, length must be less than or equal to `1600`")
        if channel_moderator_arn is not None and len(channel_moderator_arn) < 5:
            raise ValueError("Invalid value for `channel_moderator_arn`, length must be greater than or equal to `5`")
        if channel_moderator_arn is not None and not re.search(r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^\/].{0,1023}', channel_moderator_arn):
            raise ValueError("Invalid value for `channel_moderator_arn`, must be a follow pattern or equal to `/arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^\/].{0,1023}/`")

        self._channel_moderator_arn = channel_moderator_arn
