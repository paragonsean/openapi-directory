# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ElasticChannelConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, maximum_sub_channels: int=None, target_memberships_per_sub_channel: int=None, minimum_membership_percentage: int=None):
        """ElasticChannelConfiguration - a model defined in OpenAPI

        :param maximum_sub_channels: The maximum_sub_channels of this ElasticChannelConfiguration.
        :param target_memberships_per_sub_channel: The target_memberships_per_sub_channel of this ElasticChannelConfiguration.
        :param minimum_membership_percentage: The minimum_membership_percentage of this ElasticChannelConfiguration.
        """
        self.openapi_types = {
            'maximum_sub_channels': int,
            'target_memberships_per_sub_channel': int,
            'minimum_membership_percentage': int
        }

        self.attribute_map = {
            'maximum_sub_channels': 'MaximumSubChannels',
            'target_memberships_per_sub_channel': 'TargetMembershipsPerSubChannel',
            'minimum_membership_percentage': 'MinimumMembershipPercentage'
        }

        self._maximum_sub_channels = maximum_sub_channels
        self._target_memberships_per_sub_channel = target_memberships_per_sub_channel
        self._minimum_membership_percentage = minimum_membership_percentage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ElasticChannelConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ElasticChannelConfiguration of this ElasticChannelConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def maximum_sub_channels(self):
        """Gets the maximum_sub_channels of this ElasticChannelConfiguration.


        :return: The maximum_sub_channels of this ElasticChannelConfiguration.
        :rtype: int
        """
        return self._maximum_sub_channels

    @maximum_sub_channels.setter
    def maximum_sub_channels(self, maximum_sub_channels):
        """Sets the maximum_sub_channels of this ElasticChannelConfiguration.


        :param maximum_sub_channels: The maximum_sub_channels of this ElasticChannelConfiguration.
        :type maximum_sub_channels: int
        """
        if maximum_sub_channels is None:
            raise ValueError("Invalid value for `maximum_sub_channels`, must not be `None`")

        self._maximum_sub_channels = maximum_sub_channels

    @property
    def target_memberships_per_sub_channel(self):
        """Gets the target_memberships_per_sub_channel of this ElasticChannelConfiguration.


        :return: The target_memberships_per_sub_channel of this ElasticChannelConfiguration.
        :rtype: int
        """
        return self._target_memberships_per_sub_channel

    @target_memberships_per_sub_channel.setter
    def target_memberships_per_sub_channel(self, target_memberships_per_sub_channel):
        """Sets the target_memberships_per_sub_channel of this ElasticChannelConfiguration.


        :param target_memberships_per_sub_channel: The target_memberships_per_sub_channel of this ElasticChannelConfiguration.
        :type target_memberships_per_sub_channel: int
        """
        if target_memberships_per_sub_channel is None:
            raise ValueError("Invalid value for `target_memberships_per_sub_channel`, must not be `None`")

        self._target_memberships_per_sub_channel = target_memberships_per_sub_channel

    @property
    def minimum_membership_percentage(self):
        """Gets the minimum_membership_percentage of this ElasticChannelConfiguration.


        :return: The minimum_membership_percentage of this ElasticChannelConfiguration.
        :rtype: int
        """
        return self._minimum_membership_percentage

    @minimum_membership_percentage.setter
    def minimum_membership_percentage(self, minimum_membership_percentage):
        """Sets the minimum_membership_percentage of this ElasticChannelConfiguration.


        :param minimum_membership_percentage: The minimum_membership_percentage of this ElasticChannelConfiguration.
        :type minimum_membership_percentage: int
        """
        if minimum_membership_percentage is None:
            raise ValueError("Invalid value for `minimum_membership_percentage`, must not be `None`")

        self._minimum_membership_percentage = minimum_membership_percentage
