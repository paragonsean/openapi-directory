# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.processor_configuration_lambda import ProcessorConfigurationLambda
from openapi_server import util


class ProcessorConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _lambda: ProcessorConfigurationLambda=None):
        """ProcessorConfiguration - a model defined in OpenAPI

        :param _lambda: The _lambda of this ProcessorConfiguration.
        """
        self.openapi_types = {
            '_lambda': ProcessorConfigurationLambda
        }

        self.attribute_map = {
            '_lambda': 'Lambda'
        }

        self.__lambda = _lambda

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProcessorConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Processor_Configuration of this ProcessorConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _lambda(self):
        """Gets the _lambda of this ProcessorConfiguration.


        :return: The _lambda of this ProcessorConfiguration.
        :rtype: ProcessorConfigurationLambda
        """
        return self.__lambda

    @_lambda.setter
    def _lambda(self, _lambda):
        """Sets the _lambda of this ProcessorConfiguration.


        :param _lambda: The _lambda of this ProcessorConfiguration.
        :type _lambda: ProcessorConfigurationLambda
        """
        if _lambda is None:
            raise ValueError("Invalid value for `_lambda`, must not be `None`")

        self.__lambda = _lambda
