# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.streaming_configuration import StreamingConfiguration
from openapi_server import util


class PutMessagingStreamingConfigurationsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, streaming_configurations: List[StreamingConfiguration]=None):
        """PutMessagingStreamingConfigurationsRequest - a model defined in OpenAPI

        :param streaming_configurations: The streaming_configurations of this PutMessagingStreamingConfigurationsRequest.
        """
        self.openapi_types = {
            'streaming_configurations': List[StreamingConfiguration]
        }

        self.attribute_map = {
            'streaming_configurations': 'StreamingConfigurations'
        }

        self._streaming_configurations = streaming_configurations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutMessagingStreamingConfigurationsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutMessagingStreamingConfigurations_request of this PutMessagingStreamingConfigurationsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def streaming_configurations(self):
        """Gets the streaming_configurations of this PutMessagingStreamingConfigurationsRequest.

        The streaming configurations.

        :return: The streaming_configurations of this PutMessagingStreamingConfigurationsRequest.
        :rtype: List[StreamingConfiguration]
        """
        return self._streaming_configurations

    @streaming_configurations.setter
    def streaming_configurations(self, streaming_configurations):
        """Sets the streaming_configurations of this PutMessagingStreamingConfigurationsRequest.

        The streaming configurations.

        :param streaming_configurations: The streaming_configurations of this PutMessagingStreamingConfigurationsRequest.
        :type streaming_configurations: List[StreamingConfiguration]
        """
        if streaming_configurations is None:
            raise ValueError("Invalid value for `streaming_configurations`, must not be `None`")
        if streaming_configurations is not None and len(streaming_configurations) > 2:
            raise ValueError("Invalid value for `streaming_configurations`, number of items must be less than or equal to `2`")
        if streaming_configurations is not None and len(streaming_configurations) < 1:
            raise ValueError("Invalid value for `streaming_configurations`, number of items must be greater than or equal to `1`")

        self._streaming_configurations = streaming_configurations
