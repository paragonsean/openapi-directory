# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateChannelBanRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, member_arn: str=None):
        """CreateChannelBanRequest - a model defined in OpenAPI

        :param member_arn: The member_arn of this CreateChannelBanRequest.
        """
        self.openapi_types = {
            'member_arn': str
        }

        self.attribute_map = {
            'member_arn': 'MemberArn'
        }

        self._member_arn = member_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateChannelBanRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateChannelBan_request of this CreateChannelBanRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def member_arn(self):
        """Gets the member_arn of this CreateChannelBanRequest.

        The <code>AppInstanceUserArn</code> of the member being banned.

        :return: The member_arn of this CreateChannelBanRequest.
        :rtype: str
        """
        return self._member_arn

    @member_arn.setter
    def member_arn(self, member_arn):
        """Sets the member_arn of this CreateChannelBanRequest.

        The <code>AppInstanceUserArn</code> of the member being banned.

        :param member_arn: The member_arn of this CreateChannelBanRequest.
        :type member_arn: str
        """
        if member_arn is None:
            raise ValueError("Invalid value for `member_arn`, must not be `None`")
        if member_arn is not None and len(member_arn) > 1600:
            raise ValueError("Invalid value for `member_arn`, length must be less than or equal to `1600`")
        if member_arn is not None and len(member_arn) < 5:
            raise ValueError("Invalid value for `member_arn`, length must be greater than or equal to `5`")
        if member_arn is not None and not re.search(r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^\/].{0,1023}', member_arn):
            raise ValueError("Invalid value for `member_arn`, must be a follow pattern or equal to `/arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^\/].{0,1023}/`")

        self._member_arn = member_arn
