# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.expiration_criterion import ExpirationCriterion
from openapi_server import util


class ChannelExpirationSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expiration_days: int=None, expiration_criterion: ExpirationCriterion=None):
        """ChannelExpirationSettings - a model defined in OpenAPI

        :param expiration_days: The expiration_days of this ChannelExpirationSettings.
        :param expiration_criterion: The expiration_criterion of this ChannelExpirationSettings.
        """
        self.openapi_types = {
            'expiration_days': int,
            'expiration_criterion': ExpirationCriterion
        }

        self.attribute_map = {
            'expiration_days': 'ExpirationDays',
            'expiration_criterion': 'ExpirationCriterion'
        }

        self._expiration_days = expiration_days
        self._expiration_criterion = expiration_criterion

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelExpirationSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Channel_ExpirationSettings of this ChannelExpirationSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expiration_days(self):
        """Gets the expiration_days of this ChannelExpirationSettings.


        :return: The expiration_days of this ChannelExpirationSettings.
        :rtype: int
        """
        return self._expiration_days

    @expiration_days.setter
    def expiration_days(self, expiration_days):
        """Sets the expiration_days of this ChannelExpirationSettings.


        :param expiration_days: The expiration_days of this ChannelExpirationSettings.
        :type expiration_days: int
        """
        if expiration_days is None:
            raise ValueError("Invalid value for `expiration_days`, must not be `None`")

        self._expiration_days = expiration_days

    @property
    def expiration_criterion(self):
        """Gets the expiration_criterion of this ChannelExpirationSettings.


        :return: The expiration_criterion of this ChannelExpirationSettings.
        :rtype: ExpirationCriterion
        """
        return self._expiration_criterion

    @expiration_criterion.setter
    def expiration_criterion(self, expiration_criterion):
        """Sets the expiration_criterion of this ChannelExpirationSettings.


        :param expiration_criterion: The expiration_criterion of this ChannelExpirationSettings.
        :type expiration_criterion: ExpirationCriterion
        """
        if expiration_criterion is None:
            raise ValueError("Invalid value for `expiration_criterion`, must not be `None`")

        self._expiration_criterion = expiration_criterion
