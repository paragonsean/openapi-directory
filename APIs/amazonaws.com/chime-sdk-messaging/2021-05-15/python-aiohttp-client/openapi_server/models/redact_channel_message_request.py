# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class RedactChannelMessageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sub_channel_id: str=None):
        """RedactChannelMessageRequest - a model defined in OpenAPI

        :param sub_channel_id: The sub_channel_id of this RedactChannelMessageRequest.
        """
        self.openapi_types = {
            'sub_channel_id': str
        }

        self.attribute_map = {
            'sub_channel_id': 'SubChannelId'
        }

        self._sub_channel_id = sub_channel_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RedactChannelMessageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RedactChannelMessage_request of this RedactChannelMessageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sub_channel_id(self):
        """Gets the sub_channel_id of this RedactChannelMessageRequest.

        The ID of the SubChannel in the request.

        :return: The sub_channel_id of this RedactChannelMessageRequest.
        :rtype: str
        """
        return self._sub_channel_id

    @sub_channel_id.setter
    def sub_channel_id(self, sub_channel_id):
        """Sets the sub_channel_id of this RedactChannelMessageRequest.

        The ID of the SubChannel in the request.

        :param sub_channel_id: The sub_channel_id of this RedactChannelMessageRequest.
        :type sub_channel_id: str
        """
        if sub_channel_id is not None and len(sub_channel_id) > 128:
            raise ValueError("Invalid value for `sub_channel_id`, length must be less than or equal to `128`")
        if sub_channel_id is not None and len(sub_channel_id) < 1:
            raise ValueError("Invalid value for `sub_channel_id`, length must be greater than or equal to `1`")
        if sub_channel_id is not None and not re.search(r'[-_a-zA-Z0-9]*', sub_channel_id):
            raise ValueError("Invalid value for `sub_channel_id`, must be a follow pattern or equal to `/[-_a-zA-Z0-9]*/`")

        self._sub_channel_id = sub_channel_id
