# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateChannelMembershipRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, member_arn: str=None, type: str=None, sub_channel_id: str=None):
        """CreateChannelMembershipRequest - a model defined in OpenAPI

        :param member_arn: The member_arn of this CreateChannelMembershipRequest.
        :param type: The type of this CreateChannelMembershipRequest.
        :param sub_channel_id: The sub_channel_id of this CreateChannelMembershipRequest.
        """
        self.openapi_types = {
            'member_arn': str,
            'type': str,
            'sub_channel_id': str
        }

        self.attribute_map = {
            'member_arn': 'MemberArn',
            'type': 'Type',
            'sub_channel_id': 'SubChannelId'
        }

        self._member_arn = member_arn
        self._type = type
        self._sub_channel_id = sub_channel_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateChannelMembershipRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateChannelMembership_request of this CreateChannelMembershipRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def member_arn(self):
        """Gets the member_arn of this CreateChannelMembershipRequest.

        The <code>AppInstanceUserArn</code> of the member you want to add to the channel.

        :return: The member_arn of this CreateChannelMembershipRequest.
        :rtype: str
        """
        return self._member_arn

    @member_arn.setter
    def member_arn(self, member_arn):
        """Sets the member_arn of this CreateChannelMembershipRequest.

        The <code>AppInstanceUserArn</code> of the member you want to add to the channel.

        :param member_arn: The member_arn of this CreateChannelMembershipRequest.
        :type member_arn: str
        """
        if member_arn is None:
            raise ValueError("Invalid value for `member_arn`, must not be `None`")
        if member_arn is not None and len(member_arn) > 1600:
            raise ValueError("Invalid value for `member_arn`, length must be less than or equal to `1600`")
        if member_arn is not None and len(member_arn) < 5:
            raise ValueError("Invalid value for `member_arn`, length must be greater than or equal to `5`")
        if member_arn is not None and not re.search(r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^\/].{0,1023}', member_arn):
            raise ValueError("Invalid value for `member_arn`, must be a follow pattern or equal to `/arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^\/].{0,1023}/`")

        self._member_arn = member_arn

    @property
    def type(self):
        """Gets the type of this CreateChannelMembershipRequest.

        The membership type of a user, <code>DEFAULT</code> or <code>HIDDEN</code>. Default members are always returned as part of <code>ListChannelMemberships</code>. Hidden members are only returned if the type filter in <code>ListChannelMemberships</code> equals <code>HIDDEN</code>. Otherwise hidden members are not returned. This is only supported by moderators.

        :return: The type of this CreateChannelMembershipRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateChannelMembershipRequest.

        The membership type of a user, <code>DEFAULT</code> or <code>HIDDEN</code>. Default members are always returned as part of <code>ListChannelMemberships</code>. Hidden members are only returned if the type filter in <code>ListChannelMemberships</code> equals <code>HIDDEN</code>. Otherwise hidden members are not returned. This is only supported by moderators.

        :param type: The type of this CreateChannelMembershipRequest.
        :type type: str
        """
        allowed_values = ["DEFAULT", "HIDDEN"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def sub_channel_id(self):
        """Gets the sub_channel_id of this CreateChannelMembershipRequest.

        <p>The ID of the SubChannel in the request.</p> <note> <p>Only required when creating membership in a SubChannel for a moderator in an elastic channel.</p> </note>

        :return: The sub_channel_id of this CreateChannelMembershipRequest.
        :rtype: str
        """
        return self._sub_channel_id

    @sub_channel_id.setter
    def sub_channel_id(self, sub_channel_id):
        """Sets the sub_channel_id of this CreateChannelMembershipRequest.

        <p>The ID of the SubChannel in the request.</p> <note> <p>Only required when creating membership in a SubChannel for a moderator in an elastic channel.</p> </note>

        :param sub_channel_id: The sub_channel_id of this CreateChannelMembershipRequest.
        :type sub_channel_id: str
        """
        if sub_channel_id is not None and len(sub_channel_id) > 128:
            raise ValueError("Invalid value for `sub_channel_id`, length must be less than or equal to `128`")
        if sub_channel_id is not None and len(sub_channel_id) < 1:
            raise ValueError("Invalid value for `sub_channel_id`, length must be greater than or equal to `1`")
        if sub_channel_id is not None and not re.search(r'[-_a-zA-Z0-9]*', sub_channel_id):
            raise ValueError("Invalid value for `sub_channel_id`, must be a follow pattern or equal to `/[-_a-zA-Z0-9]*/`")

        self._sub_channel_id = sub_channel_id
