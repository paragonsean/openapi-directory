# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.batch_channel_memberships_invited_by import BatchChannelMembershipsInvitedBy
from openapi_server.models.channel_membership_type import ChannelMembershipType
from openapi_server import util


class BatchCreateChannelMembershipResponseBatchChannelMemberships(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, invited_by: BatchChannelMembershipsInvitedBy=None, type: ChannelMembershipType=None, members: List=None, channel_arn: str=None, sub_channel_id: str=None):
        """BatchCreateChannelMembershipResponseBatchChannelMemberships - a model defined in OpenAPI

        :param invited_by: The invited_by of this BatchCreateChannelMembershipResponseBatchChannelMemberships.
        :param type: The type of this BatchCreateChannelMembershipResponseBatchChannelMemberships.
        :param members: The members of this BatchCreateChannelMembershipResponseBatchChannelMemberships.
        :param channel_arn: The channel_arn of this BatchCreateChannelMembershipResponseBatchChannelMemberships.
        :param sub_channel_id: The sub_channel_id of this BatchCreateChannelMembershipResponseBatchChannelMemberships.
        """
        self.openapi_types = {
            'invited_by': BatchChannelMembershipsInvitedBy,
            'type': ChannelMembershipType,
            'members': List,
            'channel_arn': str,
            'sub_channel_id': str
        }

        self.attribute_map = {
            'invited_by': 'InvitedBy',
            'type': 'Type',
            'members': 'Members',
            'channel_arn': 'ChannelArn',
            'sub_channel_id': 'SubChannelId'
        }

        self._invited_by = invited_by
        self._type = type
        self._members = members
        self._channel_arn = channel_arn
        self._sub_channel_id = sub_channel_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchCreateChannelMembershipResponseBatchChannelMemberships':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchCreateChannelMembershipResponse_BatchChannelMemberships of this BatchCreateChannelMembershipResponseBatchChannelMemberships.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def invited_by(self):
        """Gets the invited_by of this BatchCreateChannelMembershipResponseBatchChannelMemberships.


        :return: The invited_by of this BatchCreateChannelMembershipResponseBatchChannelMemberships.
        :rtype: BatchChannelMembershipsInvitedBy
        """
        return self._invited_by

    @invited_by.setter
    def invited_by(self, invited_by):
        """Sets the invited_by of this BatchCreateChannelMembershipResponseBatchChannelMemberships.


        :param invited_by: The invited_by of this BatchCreateChannelMembershipResponseBatchChannelMemberships.
        :type invited_by: BatchChannelMembershipsInvitedBy
        """

        self._invited_by = invited_by

    @property
    def type(self):
        """Gets the type of this BatchCreateChannelMembershipResponseBatchChannelMemberships.


        :return: The type of this BatchCreateChannelMembershipResponseBatchChannelMemberships.
        :rtype: ChannelMembershipType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BatchCreateChannelMembershipResponseBatchChannelMemberships.


        :param type: The type of this BatchCreateChannelMembershipResponseBatchChannelMemberships.
        :type type: ChannelMembershipType
        """

        self._type = type

    @property
    def members(self):
        """Gets the members of this BatchCreateChannelMembershipResponseBatchChannelMemberships.


        :return: The members of this BatchCreateChannelMembershipResponseBatchChannelMemberships.
        :rtype: List
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this BatchCreateChannelMembershipResponseBatchChannelMemberships.


        :param members: The members of this BatchCreateChannelMembershipResponseBatchChannelMemberships.
        :type members: List
        """

        self._members = members

    @property
    def channel_arn(self):
        """Gets the channel_arn of this BatchCreateChannelMembershipResponseBatchChannelMemberships.


        :return: The channel_arn of this BatchCreateChannelMembershipResponseBatchChannelMemberships.
        :rtype: str
        """
        return self._channel_arn

    @channel_arn.setter
    def channel_arn(self, channel_arn):
        """Sets the channel_arn of this BatchCreateChannelMembershipResponseBatchChannelMemberships.


        :param channel_arn: The channel_arn of this BatchCreateChannelMembershipResponseBatchChannelMemberships.
        :type channel_arn: str
        """

        self._channel_arn = channel_arn

    @property
    def sub_channel_id(self):
        """Gets the sub_channel_id of this BatchCreateChannelMembershipResponseBatchChannelMemberships.


        :return: The sub_channel_id of this BatchCreateChannelMembershipResponseBatchChannelMemberships.
        :rtype: str
        """
        return self._sub_channel_id

    @sub_channel_id.setter
    def sub_channel_id(self, sub_channel_id):
        """Sets the sub_channel_id of this BatchCreateChannelMembershipResponseBatchChannelMemberships.


        :param sub_channel_id: The sub_channel_id of this BatchCreateChannelMembershipResponseBatchChannelMemberships.
        :type sub_channel_id: str
        """

        self._sub_channel_id = sub_channel_id
