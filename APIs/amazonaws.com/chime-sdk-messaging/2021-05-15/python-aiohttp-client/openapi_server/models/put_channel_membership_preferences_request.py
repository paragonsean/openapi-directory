# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.put_channel_membership_preferences_request_preferences import PutChannelMembershipPreferencesRequestPreferences
from openapi_server import util


class PutChannelMembershipPreferencesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, preferences: PutChannelMembershipPreferencesRequestPreferences=None):
        """PutChannelMembershipPreferencesRequest - a model defined in OpenAPI

        :param preferences: The preferences of this PutChannelMembershipPreferencesRequest.
        """
        self.openapi_types = {
            'preferences': PutChannelMembershipPreferencesRequestPreferences
        }

        self.attribute_map = {
            'preferences': 'Preferences'
        }

        self._preferences = preferences

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutChannelMembershipPreferencesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutChannelMembershipPreferences_request of this PutChannelMembershipPreferencesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def preferences(self):
        """Gets the preferences of this PutChannelMembershipPreferencesRequest.


        :return: The preferences of this PutChannelMembershipPreferencesRequest.
        :rtype: PutChannelMembershipPreferencesRequestPreferences
        """
        return self._preferences

    @preferences.setter
    def preferences(self, preferences):
        """Sets the preferences of this PutChannelMembershipPreferencesRequest.


        :param preferences: The preferences of this PutChannelMembershipPreferencesRequest.
        :type preferences: PutChannelMembershipPreferencesRequestPreferences
        """
        if preferences is None:
            raise ValueError("Invalid value for `preferences`, must not be `None`")

        self._preferences = preferences
