# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fallback_action import FallbackAction
from openapi_server.models.processor_configuration import ProcessorConfiguration
from openapi_server import util


class Processor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, configuration: ProcessorConfiguration=None, execution_order: int=None, fallback_action: FallbackAction=None):
        """Processor - a model defined in OpenAPI

        :param name: The name of this Processor.
        :param configuration: The configuration of this Processor.
        :param execution_order: The execution_order of this Processor.
        :param fallback_action: The fallback_action of this Processor.
        """
        self.openapi_types = {
            'name': str,
            'configuration': ProcessorConfiguration,
            'execution_order': int,
            'fallback_action': FallbackAction
        }

        self.attribute_map = {
            'name': 'Name',
            'configuration': 'Configuration',
            'execution_order': 'ExecutionOrder',
            'fallback_action': 'FallbackAction'
        }

        self._name = name
        self._configuration = configuration
        self._execution_order = execution_order
        self._fallback_action = fallback_action

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Processor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Processor of this Processor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Processor.


        :return: The name of this Processor.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Processor.


        :param name: The name of this Processor.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def configuration(self):
        """Gets the configuration of this Processor.


        :return: The configuration of this Processor.
        :rtype: ProcessorConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this Processor.


        :param configuration: The configuration of this Processor.
        :type configuration: ProcessorConfiguration
        """
        if configuration is None:
            raise ValueError("Invalid value for `configuration`, must not be `None`")

        self._configuration = configuration

    @property
    def execution_order(self):
        """Gets the execution_order of this Processor.


        :return: The execution_order of this Processor.
        :rtype: int
        """
        return self._execution_order

    @execution_order.setter
    def execution_order(self, execution_order):
        """Sets the execution_order of this Processor.


        :param execution_order: The execution_order of this Processor.
        :type execution_order: int
        """
        if execution_order is None:
            raise ValueError("Invalid value for `execution_order`, must not be `None`")

        self._execution_order = execution_order

    @property
    def fallback_action(self):
        """Gets the fallback_action of this Processor.


        :return: The fallback_action of this Processor.
        :rtype: FallbackAction
        """
        return self._fallback_action

    @fallback_action.setter
    def fallback_action(self, fallback_action):
        """Sets the fallback_action of this Processor.


        :param fallback_action: The fallback_action of this Processor.
        :type fallback_action: FallbackAction
        """
        if fallback_action is None:
            raise ValueError("Invalid value for `fallback_action`, must not be `None`")

        self._fallback_action = fallback_action
