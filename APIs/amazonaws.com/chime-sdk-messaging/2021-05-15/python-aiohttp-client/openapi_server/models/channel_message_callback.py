# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_flow_callback_request_channel_message_push_notification import ChannelFlowCallbackRequestChannelMessagePushNotification
from openapi_server import util


class ChannelMessageCallback(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message_id: str=None, content: str=None, metadata: str=None, push_notification: ChannelFlowCallbackRequestChannelMessagePushNotification=None, message_attributes: Dict=None, sub_channel_id: str=None, content_type: str=None):
        """ChannelMessageCallback - a model defined in OpenAPI

        :param message_id: The message_id of this ChannelMessageCallback.
        :param content: The content of this ChannelMessageCallback.
        :param metadata: The metadata of this ChannelMessageCallback.
        :param push_notification: The push_notification of this ChannelMessageCallback.
        :param message_attributes: The message_attributes of this ChannelMessageCallback.
        :param sub_channel_id: The sub_channel_id of this ChannelMessageCallback.
        :param content_type: The content_type of this ChannelMessageCallback.
        """
        self.openapi_types = {
            'message_id': str,
            'content': str,
            'metadata': str,
            'push_notification': ChannelFlowCallbackRequestChannelMessagePushNotification,
            'message_attributes': Dict,
            'sub_channel_id': str,
            'content_type': str
        }

        self.attribute_map = {
            'message_id': 'MessageId',
            'content': 'Content',
            'metadata': 'Metadata',
            'push_notification': 'PushNotification',
            'message_attributes': 'MessageAttributes',
            'sub_channel_id': 'SubChannelId',
            'content_type': 'ContentType'
        }

        self._message_id = message_id
        self._content = content
        self._metadata = metadata
        self._push_notification = push_notification
        self._message_attributes = message_attributes
        self._sub_channel_id = sub_channel_id
        self._content_type = content_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelMessageCallback':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChannelMessageCallback of this ChannelMessageCallback.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message_id(self):
        """Gets the message_id of this ChannelMessageCallback.


        :return: The message_id of this ChannelMessageCallback.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this ChannelMessageCallback.


        :param message_id: The message_id of this ChannelMessageCallback.
        :type message_id: str
        """
        if message_id is None:
            raise ValueError("Invalid value for `message_id`, must not be `None`")

        self._message_id = message_id

    @property
    def content(self):
        """Gets the content of this ChannelMessageCallback.


        :return: The content of this ChannelMessageCallback.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this ChannelMessageCallback.


        :param content: The content of this ChannelMessageCallback.
        :type content: str
        """

        self._content = content

    @property
    def metadata(self):
        """Gets the metadata of this ChannelMessageCallback.


        :return: The metadata of this ChannelMessageCallback.
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ChannelMessageCallback.


        :param metadata: The metadata of this ChannelMessageCallback.
        :type metadata: str
        """

        self._metadata = metadata

    @property
    def push_notification(self):
        """Gets the push_notification of this ChannelMessageCallback.


        :return: The push_notification of this ChannelMessageCallback.
        :rtype: ChannelFlowCallbackRequestChannelMessagePushNotification
        """
        return self._push_notification

    @push_notification.setter
    def push_notification(self, push_notification):
        """Sets the push_notification of this ChannelMessageCallback.


        :param push_notification: The push_notification of this ChannelMessageCallback.
        :type push_notification: ChannelFlowCallbackRequestChannelMessagePushNotification
        """

        self._push_notification = push_notification

    @property
    def message_attributes(self):
        """Gets the message_attributes of this ChannelMessageCallback.


        :return: The message_attributes of this ChannelMessageCallback.
        :rtype: Dict
        """
        return self._message_attributes

    @message_attributes.setter
    def message_attributes(self, message_attributes):
        """Sets the message_attributes of this ChannelMessageCallback.


        :param message_attributes: The message_attributes of this ChannelMessageCallback.
        :type message_attributes: Dict
        """

        self._message_attributes = message_attributes

    @property
    def sub_channel_id(self):
        """Gets the sub_channel_id of this ChannelMessageCallback.


        :return: The sub_channel_id of this ChannelMessageCallback.
        :rtype: str
        """
        return self._sub_channel_id

    @sub_channel_id.setter
    def sub_channel_id(self, sub_channel_id):
        """Sets the sub_channel_id of this ChannelMessageCallback.


        :param sub_channel_id: The sub_channel_id of this ChannelMessageCallback.
        :type sub_channel_id: str
        """

        self._sub_channel_id = sub_channel_id

    @property
    def content_type(self):
        """Gets the content_type of this ChannelMessageCallback.


        :return: The content_type of this ChannelMessageCallback.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this ChannelMessageCallback.


        :param content_type: The content_type of this ChannelMessageCallback.
        :type content_type: str
        """

        self._content_type = content_type
