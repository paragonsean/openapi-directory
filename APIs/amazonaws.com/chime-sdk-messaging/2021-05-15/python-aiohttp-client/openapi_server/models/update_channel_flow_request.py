# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.processor import Processor
import re
from openapi_server import util


class UpdateChannelFlowRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, processors: List[Processor]=None, name: str=None):
        """UpdateChannelFlowRequest - a model defined in OpenAPI

        :param processors: The processors of this UpdateChannelFlowRequest.
        :param name: The name of this UpdateChannelFlowRequest.
        """
        self.openapi_types = {
            'processors': List[Processor],
            'name': str
        }

        self.attribute_map = {
            'processors': 'Processors',
            'name': 'Name'
        }

        self._processors = processors
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateChannelFlowRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateChannelFlow_request of this UpdateChannelFlowRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def processors(self):
        """Gets the processors of this UpdateChannelFlowRequest.

        Information about the processor Lambda functions 

        :return: The processors of this UpdateChannelFlowRequest.
        :rtype: List[Processor]
        """
        return self._processors

    @processors.setter
    def processors(self, processors):
        """Sets the processors of this UpdateChannelFlowRequest.

        Information about the processor Lambda functions 

        :param processors: The processors of this UpdateChannelFlowRequest.
        :type processors: List[Processor]
        """
        if processors is None:
            raise ValueError("Invalid value for `processors`, must not be `None`")
        if processors is not None and len(processors) > 3:
            raise ValueError("Invalid value for `processors`, number of items must be less than or equal to `3`")
        if processors is not None and len(processors) < 1:
            raise ValueError("Invalid value for `processors`, number of items must be greater than or equal to `1`")

        self._processors = processors

    @property
    def name(self):
        """Gets the name of this UpdateChannelFlowRequest.

        The name of the channel flow.

        :return: The name of this UpdateChannelFlowRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateChannelFlowRequest.

        The name of the channel flow.

        :param name: The name of this UpdateChannelFlowRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*/`")

        self._name = name
