# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.search_field import SearchField
from openapi_server import util


class SearchChannelsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fields: List[SearchField]=None):
        """SearchChannelsRequest - a model defined in OpenAPI

        :param fields: The fields of this SearchChannelsRequest.
        """
        self.openapi_types = {
            'fields': List[SearchField]
        }

        self.attribute_map = {
            'fields': 'Fields'
        }

        self._fields = fields

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchChannelsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchChannels_request of this SearchChannelsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fields(self):
        """Gets the fields of this SearchChannelsRequest.

        A list of the <code>Field</code> objects in the channel being searched.

        :return: The fields of this SearchChannelsRequest.
        :rtype: List[SearchField]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this SearchChannelsRequest.

        A list of the <code>Field</code> objects in the channel being searched.

        :param fields: The fields of this SearchChannelsRequest.
        :type fields: List[SearchField]
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")
        if fields is not None and len(fields) > 20:
            raise ValueError("Invalid value for `fields`, number of items must be less than or equal to `20`")
        if fields is not None and len(fields) < 1:
            raise ValueError("Invalid value for `fields`, number of items must be greater than or equal to `1`")

        self._fields = fields
