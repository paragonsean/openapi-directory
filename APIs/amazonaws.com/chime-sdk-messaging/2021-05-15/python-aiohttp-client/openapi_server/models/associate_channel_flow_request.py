# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class AssociateChannelFlowRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_flow_arn: str=None):
        """AssociateChannelFlowRequest - a model defined in OpenAPI

        :param channel_flow_arn: The channel_flow_arn of this AssociateChannelFlowRequest.
        """
        self.openapi_types = {
            'channel_flow_arn': str
        }

        self.attribute_map = {
            'channel_flow_arn': 'ChannelFlowArn'
        }

        self._channel_flow_arn = channel_flow_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociateChannelFlowRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssociateChannelFlow_request of this AssociateChannelFlowRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_flow_arn(self):
        """Gets the channel_flow_arn of this AssociateChannelFlowRequest.

        The ARN of the channel flow.

        :return: The channel_flow_arn of this AssociateChannelFlowRequest.
        :rtype: str
        """
        return self._channel_flow_arn

    @channel_flow_arn.setter
    def channel_flow_arn(self, channel_flow_arn):
        """Sets the channel_flow_arn of this AssociateChannelFlowRequest.

        The ARN of the channel flow.

        :param channel_flow_arn: The channel_flow_arn of this AssociateChannelFlowRequest.
        :type channel_flow_arn: str
        """
        if channel_flow_arn is None:
            raise ValueError("Invalid value for `channel_flow_arn`, must not be `None`")
        if channel_flow_arn is not None and len(channel_flow_arn) > 1600:
            raise ValueError("Invalid value for `channel_flow_arn`, length must be less than or equal to `1600`")
        if channel_flow_arn is not None and len(channel_flow_arn) < 5:
            raise ValueError("Invalid value for `channel_flow_arn`, length must be greater than or equal to `5`")
        if channel_flow_arn is not None and not re.search(r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^\/].{0,1023}', channel_flow_arn):
            raise ValueError("Invalid value for `channel_flow_arn`, must be a follow pattern or equal to `/arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^\/].{0,1023}/`")

        self._channel_flow_arn = channel_flow_arn
