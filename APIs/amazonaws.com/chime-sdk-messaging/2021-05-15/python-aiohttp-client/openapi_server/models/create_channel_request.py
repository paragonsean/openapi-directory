# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_channel_request_elastic_channel_configuration import CreateChannelRequestElasticChannelConfiguration
from openapi_server.models.create_channel_request_expiration_settings import CreateChannelRequestExpirationSettings
from openapi_server.models.tag import Tag
import re
from openapi_server import util


class CreateChannelRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_instance_arn: str=None, name: str=None, mode: str=None, privacy: str=None, metadata: str=None, client_request_token: str=None, tags: List[Tag]=None, channel_id: str=None, member_arns: List[str]=None, moderator_arns: List[str]=None, elastic_channel_configuration: CreateChannelRequestElasticChannelConfiguration=None, expiration_settings: CreateChannelRequestExpirationSettings=None):
        """CreateChannelRequest - a model defined in OpenAPI

        :param app_instance_arn: The app_instance_arn of this CreateChannelRequest.
        :param name: The name of this CreateChannelRequest.
        :param mode: The mode of this CreateChannelRequest.
        :param privacy: The privacy of this CreateChannelRequest.
        :param metadata: The metadata of this CreateChannelRequest.
        :param client_request_token: The client_request_token of this CreateChannelRequest.
        :param tags: The tags of this CreateChannelRequest.
        :param channel_id: The channel_id of this CreateChannelRequest.
        :param member_arns: The member_arns of this CreateChannelRequest.
        :param moderator_arns: The moderator_arns of this CreateChannelRequest.
        :param elastic_channel_configuration: The elastic_channel_configuration of this CreateChannelRequest.
        :param expiration_settings: The expiration_settings of this CreateChannelRequest.
        """
        self.openapi_types = {
            'app_instance_arn': str,
            'name': str,
            'mode': str,
            'privacy': str,
            'metadata': str,
            'client_request_token': str,
            'tags': List[Tag],
            'channel_id': str,
            'member_arns': List[str],
            'moderator_arns': List[str],
            'elastic_channel_configuration': CreateChannelRequestElasticChannelConfiguration,
            'expiration_settings': CreateChannelRequestExpirationSettings
        }

        self.attribute_map = {
            'app_instance_arn': 'AppInstanceArn',
            'name': 'Name',
            'mode': 'Mode',
            'privacy': 'Privacy',
            'metadata': 'Metadata',
            'client_request_token': 'ClientRequestToken',
            'tags': 'Tags',
            'channel_id': 'ChannelId',
            'member_arns': 'MemberArns',
            'moderator_arns': 'ModeratorArns',
            'elastic_channel_configuration': 'ElasticChannelConfiguration',
            'expiration_settings': 'ExpirationSettings'
        }

        self._app_instance_arn = app_instance_arn
        self._name = name
        self._mode = mode
        self._privacy = privacy
        self._metadata = metadata
        self._client_request_token = client_request_token
        self._tags = tags
        self._channel_id = channel_id
        self._member_arns = member_arns
        self._moderator_arns = moderator_arns
        self._elastic_channel_configuration = elastic_channel_configuration
        self._expiration_settings = expiration_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateChannelRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateChannel_request of this CreateChannelRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_instance_arn(self):
        """Gets the app_instance_arn of this CreateChannelRequest.

        The ARN of the channel request.

        :return: The app_instance_arn of this CreateChannelRequest.
        :rtype: str
        """
        return self._app_instance_arn

    @app_instance_arn.setter
    def app_instance_arn(self, app_instance_arn):
        """Sets the app_instance_arn of this CreateChannelRequest.

        The ARN of the channel request.

        :param app_instance_arn: The app_instance_arn of this CreateChannelRequest.
        :type app_instance_arn: str
        """
        if app_instance_arn is None:
            raise ValueError("Invalid value for `app_instance_arn`, must not be `None`")
        if app_instance_arn is not None and len(app_instance_arn) > 1600:
            raise ValueError("Invalid value for `app_instance_arn`, length must be less than or equal to `1600`")
        if app_instance_arn is not None and len(app_instance_arn) < 5:
            raise ValueError("Invalid value for `app_instance_arn`, length must be greater than or equal to `5`")
        if app_instance_arn is not None and not re.search(r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^\/].{0,1023}', app_instance_arn):
            raise ValueError("Invalid value for `app_instance_arn`, must be a follow pattern or equal to `/arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^\/].{0,1023}/`")

        self._app_instance_arn = app_instance_arn

    @property
    def name(self):
        """Gets the name of this CreateChannelRequest.

        The name of the channel.

        :return: The name of this CreateChannelRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateChannelRequest.

        The name of the channel.

        :param name: The name of this CreateChannelRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*/`")

        self._name = name

    @property
    def mode(self):
        """Gets the mode of this CreateChannelRequest.

        The channel mode: <code>UNRESTRICTED</code> or <code>RESTRICTED</code>. Administrators, moderators, and channel members can add themselves and other members to unrestricted channels. Only administrators and moderators can add members to restricted channels.

        :return: The mode of this CreateChannelRequest.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this CreateChannelRequest.

        The channel mode: <code>UNRESTRICTED</code> or <code>RESTRICTED</code>. Administrators, moderators, and channel members can add themselves and other members to unrestricted channels. Only administrators and moderators can add members to restricted channels.

        :param mode: The mode of this CreateChannelRequest.
        :type mode: str
        """
        allowed_values = ["UNRESTRICTED", "RESTRICTED"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def privacy(self):
        """Gets the privacy of this CreateChannelRequest.

        The channel's privacy level: <code>PUBLIC</code> or <code>PRIVATE</code>. Private channels aren't discoverable by users outside the channel. Public channels are discoverable by anyone in the <code>AppInstance</code>.

        :return: The privacy of this CreateChannelRequest.
        :rtype: str
        """
        return self._privacy

    @privacy.setter
    def privacy(self, privacy):
        """Sets the privacy of this CreateChannelRequest.

        The channel's privacy level: <code>PUBLIC</code> or <code>PRIVATE</code>. Private channels aren't discoverable by users outside the channel. Public channels are discoverable by anyone in the <code>AppInstance</code>.

        :param privacy: The privacy of this CreateChannelRequest.
        :type privacy: str
        """
        allowed_values = ["PUBLIC", "PRIVATE"]  # noqa: E501
        if privacy not in allowed_values:
            raise ValueError(
                "Invalid value for `privacy` ({0}), must be one of {1}"
                .format(privacy, allowed_values)
            )

        self._privacy = privacy

    @property
    def metadata(self):
        """Gets the metadata of this CreateChannelRequest.

        The metadata of the creation request. Limited to 1KB and UTF-8.

        :return: The metadata of this CreateChannelRequest.
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CreateChannelRequest.

        The metadata of the creation request. Limited to 1KB and UTF-8.

        :param metadata: The metadata of this CreateChannelRequest.
        :type metadata: str
        """
        if metadata is not None and len(metadata) > 1024:
            raise ValueError("Invalid value for `metadata`, length must be less than or equal to `1024`")
        if metadata is not None and len(metadata) < 0:
            raise ValueError("Invalid value for `metadata`, length must be greater than or equal to `0`")
        if metadata is not None and not re.search(r'.*', metadata):
            raise ValueError("Invalid value for `metadata`, must be a follow pattern or equal to `/.*/`")

        self._metadata = metadata

    @property
    def client_request_token(self):
        """Gets the client_request_token of this CreateChannelRequest.

        The client token for the request. An <code>Idempotency</code> token.

        :return: The client_request_token of this CreateChannelRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this CreateChannelRequest.

        The client token for the request. An <code>Idempotency</code> token.

        :param client_request_token: The client_request_token of this CreateChannelRequest.
        :type client_request_token: str
        """
        if client_request_token is None:
            raise ValueError("Invalid value for `client_request_token`, must not be `None`")
        if client_request_token is not None and len(client_request_token) > 64:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `64`")
        if client_request_token is not None and len(client_request_token) < 2:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `2`")
        if client_request_token is not None and not re.search(r'[-_a-zA-Z0-9]*', client_request_token):
            raise ValueError("Invalid value for `client_request_token`, must be a follow pattern or equal to `/[-_a-zA-Z0-9]*/`")

        self._client_request_token = client_request_token

    @property
    def tags(self):
        """Gets the tags of this CreateChannelRequest.

        The tags for the creation request.

        :return: The tags of this CreateChannelRequest.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateChannelRequest.

        The tags for the creation request.

        :param tags: The tags of this CreateChannelRequest.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags

    @property
    def channel_id(self):
        """Gets the channel_id of this CreateChannelRequest.

        The ID of the channel in the request.

        :return: The channel_id of this CreateChannelRequest.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this CreateChannelRequest.

        The ID of the channel in the request.

        :param channel_id: The channel_id of this CreateChannelRequest.
        :type channel_id: str
        """
        if channel_id is not None and len(channel_id) > 64:
            raise ValueError("Invalid value for `channel_id`, length must be less than or equal to `64`")
        if channel_id is not None and len(channel_id) < 1:
            raise ValueError("Invalid value for `channel_id`, length must be greater than or equal to `1`")
        if channel_id is not None and not re.search(r'[A-Za-z0-9]([A-Za-z0-9\:\-\_\.\@]{0,62}[A-Za-z0-9])?', channel_id):
            raise ValueError("Invalid value for `channel_id`, must be a follow pattern or equal to `/[A-Za-z0-9]([A-Za-z0-9\:\-\_\.\@]{0,62}[A-Za-z0-9])?/`")

        self._channel_id = channel_id

    @property
    def member_arns(self):
        """Gets the member_arns of this CreateChannelRequest.

        The ARNs of the channel members in the request.

        :return: The member_arns of this CreateChannelRequest.
        :rtype: List[str]
        """
        return self._member_arns

    @member_arns.setter
    def member_arns(self, member_arns):
        """Sets the member_arns of this CreateChannelRequest.

        The ARNs of the channel members in the request.

        :param member_arns: The member_arns of this CreateChannelRequest.
        :type member_arns: List[str]
        """
        if member_arns is not None and len(member_arns) > 10:
            raise ValueError("Invalid value for `member_arns`, number of items must be less than or equal to `10`")
        if member_arns is not None and len(member_arns) < 1:
            raise ValueError("Invalid value for `member_arns`, number of items must be greater than or equal to `1`")

        self._member_arns = member_arns

    @property
    def moderator_arns(self):
        """Gets the moderator_arns of this CreateChannelRequest.

        The ARNs of the channel moderators in the request.

        :return: The moderator_arns of this CreateChannelRequest.
        :rtype: List[str]
        """
        return self._moderator_arns

    @moderator_arns.setter
    def moderator_arns(self, moderator_arns):
        """Sets the moderator_arns of this CreateChannelRequest.

        The ARNs of the channel moderators in the request.

        :param moderator_arns: The moderator_arns of this CreateChannelRequest.
        :type moderator_arns: List[str]
        """
        if moderator_arns is not None and len(moderator_arns) > 10:
            raise ValueError("Invalid value for `moderator_arns`, number of items must be less than or equal to `10`")
        if moderator_arns is not None and len(moderator_arns) < 1:
            raise ValueError("Invalid value for `moderator_arns`, number of items must be greater than or equal to `1`")

        self._moderator_arns = moderator_arns

    @property
    def elastic_channel_configuration(self):
        """Gets the elastic_channel_configuration of this CreateChannelRequest.


        :return: The elastic_channel_configuration of this CreateChannelRequest.
        :rtype: CreateChannelRequestElasticChannelConfiguration
        """
        return self._elastic_channel_configuration

    @elastic_channel_configuration.setter
    def elastic_channel_configuration(self, elastic_channel_configuration):
        """Sets the elastic_channel_configuration of this CreateChannelRequest.


        :param elastic_channel_configuration: The elastic_channel_configuration of this CreateChannelRequest.
        :type elastic_channel_configuration: CreateChannelRequestElasticChannelConfiguration
        """

        self._elastic_channel_configuration = elastic_channel_configuration

    @property
    def expiration_settings(self):
        """Gets the expiration_settings of this CreateChannelRequest.


        :return: The expiration_settings of this CreateChannelRequest.
        :rtype: CreateChannelRequestExpirationSettings
        """
        return self._expiration_settings

    @expiration_settings.setter
    def expiration_settings(self, expiration_settings):
        """Sets the expiration_settings of this CreateChannelRequest.


        :param expiration_settings: The expiration_settings of this CreateChannelRequest.
        :type expiration_settings: CreateChannelRequestExpirationSettings
        """

        self._expiration_settings = expiration_settings
