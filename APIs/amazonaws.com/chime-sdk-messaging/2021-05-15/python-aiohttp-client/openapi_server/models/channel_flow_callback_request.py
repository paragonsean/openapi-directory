# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_flow_callback_request_channel_message import ChannelFlowCallbackRequestChannelMessage
from openapi_server import util


class ChannelFlowCallbackRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, callback_id: str=None, delete_resource: bool=None, channel_message: ChannelFlowCallbackRequestChannelMessage=None):
        """ChannelFlowCallbackRequest - a model defined in OpenAPI

        :param callback_id: The callback_id of this ChannelFlowCallbackRequest.
        :param delete_resource: The delete_resource of this ChannelFlowCallbackRequest.
        :param channel_message: The channel_message of this ChannelFlowCallbackRequest.
        """
        self.openapi_types = {
            'callback_id': str,
            'delete_resource': bool,
            'channel_message': ChannelFlowCallbackRequestChannelMessage
        }

        self.attribute_map = {
            'callback_id': 'CallbackId',
            'delete_resource': 'DeleteResource',
            'channel_message': 'ChannelMessage'
        }

        self._callback_id = callback_id
        self._delete_resource = delete_resource
        self._channel_message = channel_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelFlowCallbackRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChannelFlowCallback_request of this ChannelFlowCallbackRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def callback_id(self):
        """Gets the callback_id of this ChannelFlowCallbackRequest.

        The identifier passed to the processor by the service when invoked. Use the identifier to call back the service.

        :return: The callback_id of this ChannelFlowCallbackRequest.
        :rtype: str
        """
        return self._callback_id

    @callback_id.setter
    def callback_id(self, callback_id):
        """Sets the callback_id of this ChannelFlowCallbackRequest.

        The identifier passed to the processor by the service when invoked. Use the identifier to call back the service.

        :param callback_id: The callback_id of this ChannelFlowCallbackRequest.
        :type callback_id: str
        """
        if callback_id is None:
            raise ValueError("Invalid value for `callback_id`, must not be `None`")
        if callback_id is not None and len(callback_id) > 64:
            raise ValueError("Invalid value for `callback_id`, length must be less than or equal to `64`")
        if callback_id is not None and len(callback_id) < 32:
            raise ValueError("Invalid value for `callback_id`, length must be greater than or equal to `32`")

        self._callback_id = callback_id

    @property
    def delete_resource(self):
        """Gets the delete_resource of this ChannelFlowCallbackRequest.

        When a processor determines that a message needs to be <code>DENIED</code>, pass this parameter with a value of true.

        :return: The delete_resource of this ChannelFlowCallbackRequest.
        :rtype: bool
        """
        return self._delete_resource

    @delete_resource.setter
    def delete_resource(self, delete_resource):
        """Sets the delete_resource of this ChannelFlowCallbackRequest.

        When a processor determines that a message needs to be <code>DENIED</code>, pass this parameter with a value of true.

        :param delete_resource: The delete_resource of this ChannelFlowCallbackRequest.
        :type delete_resource: bool
        """

        self._delete_resource = delete_resource

    @property
    def channel_message(self):
        """Gets the channel_message of this ChannelFlowCallbackRequest.


        :return: The channel_message of this ChannelFlowCallbackRequest.
        :rtype: ChannelFlowCallbackRequestChannelMessage
        """
        return self._channel_message

    @channel_message.setter
    def channel_message(self, channel_message):
        """Sets the channel_message of this ChannelFlowCallbackRequest.


        :param channel_message: The channel_message of this ChannelFlowCallbackRequest.
        :type channel_message: ChannelFlowCallbackRequestChannelMessage
        """
        if channel_message is None:
            raise ValueError("Invalid value for `channel_message`, must not be `None`")

        self._channel_message = channel_message
