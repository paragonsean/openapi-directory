# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.comparison_operator import ComparisonOperator
from openapi_server.models.evaluation_state import EvaluationState
from openapi_server.models.standard_unit import StandardUnit
from openapi_server.models.state_value import StateValue
from openapi_server.models.statistic import Statistic
from openapi_server import util


class MetricAlarm(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alarm_name: str=None, alarm_arn: str=None, alarm_description: str=None, alarm_configuration_updated_timestamp: datetime=None, actions_enabled: bool=None, ok_actions: List=None, alarm_actions: List=None, insufficient_data_actions: List=None, state_value: StateValue=None, state_reason: str=None, state_reason_data: str=None, state_updated_timestamp: datetime=None, metric_name: str=None, namespace: str=None, statistic: Statistic=None, extended_statistic: str=None, dimensions: List=None, period: int=None, unit: StandardUnit=None, evaluation_periods: int=None, datapoints_to_alarm: int=None, threshold: float=None, comparison_operator: ComparisonOperator=None, treat_missing_data: str=None, evaluate_low_sample_count_percentile: str=None, metrics: List=None, threshold_metric_id: str=None, evaluation_state: EvaluationState=None, state_transitioned_timestamp: datetime=None):
        """MetricAlarm - a model defined in OpenAPI

        :param alarm_name: The alarm_name of this MetricAlarm.
        :param alarm_arn: The alarm_arn of this MetricAlarm.
        :param alarm_description: The alarm_description of this MetricAlarm.
        :param alarm_configuration_updated_timestamp: The alarm_configuration_updated_timestamp of this MetricAlarm.
        :param actions_enabled: The actions_enabled of this MetricAlarm.
        :param ok_actions: The ok_actions of this MetricAlarm.
        :param alarm_actions: The alarm_actions of this MetricAlarm.
        :param insufficient_data_actions: The insufficient_data_actions of this MetricAlarm.
        :param state_value: The state_value of this MetricAlarm.
        :param state_reason: The state_reason of this MetricAlarm.
        :param state_reason_data: The state_reason_data of this MetricAlarm.
        :param state_updated_timestamp: The state_updated_timestamp of this MetricAlarm.
        :param metric_name: The metric_name of this MetricAlarm.
        :param namespace: The namespace of this MetricAlarm.
        :param statistic: The statistic of this MetricAlarm.
        :param extended_statistic: The extended_statistic of this MetricAlarm.
        :param dimensions: The dimensions of this MetricAlarm.
        :param period: The period of this MetricAlarm.
        :param unit: The unit of this MetricAlarm.
        :param evaluation_periods: The evaluation_periods of this MetricAlarm.
        :param datapoints_to_alarm: The datapoints_to_alarm of this MetricAlarm.
        :param threshold: The threshold of this MetricAlarm.
        :param comparison_operator: The comparison_operator of this MetricAlarm.
        :param treat_missing_data: The treat_missing_data of this MetricAlarm.
        :param evaluate_low_sample_count_percentile: The evaluate_low_sample_count_percentile of this MetricAlarm.
        :param metrics: The metrics of this MetricAlarm.
        :param threshold_metric_id: The threshold_metric_id of this MetricAlarm.
        :param evaluation_state: The evaluation_state of this MetricAlarm.
        :param state_transitioned_timestamp: The state_transitioned_timestamp of this MetricAlarm.
        """
        self.openapi_types = {
            'alarm_name': str,
            'alarm_arn': str,
            'alarm_description': str,
            'alarm_configuration_updated_timestamp': datetime,
            'actions_enabled': bool,
            'ok_actions': List,
            'alarm_actions': List,
            'insufficient_data_actions': List,
            'state_value': StateValue,
            'state_reason': str,
            'state_reason_data': str,
            'state_updated_timestamp': datetime,
            'metric_name': str,
            'namespace': str,
            'statistic': Statistic,
            'extended_statistic': str,
            'dimensions': List,
            'period': int,
            'unit': StandardUnit,
            'evaluation_periods': int,
            'datapoints_to_alarm': int,
            'threshold': float,
            'comparison_operator': ComparisonOperator,
            'treat_missing_data': str,
            'evaluate_low_sample_count_percentile': str,
            'metrics': List,
            'threshold_metric_id': str,
            'evaluation_state': EvaluationState,
            'state_transitioned_timestamp': datetime
        }

        self.attribute_map = {
            'alarm_name': 'AlarmName',
            'alarm_arn': 'AlarmArn',
            'alarm_description': 'AlarmDescription',
            'alarm_configuration_updated_timestamp': 'AlarmConfigurationUpdatedTimestamp',
            'actions_enabled': 'ActionsEnabled',
            'ok_actions': 'OKActions',
            'alarm_actions': 'AlarmActions',
            'insufficient_data_actions': 'InsufficientDataActions',
            'state_value': 'StateValue',
            'state_reason': 'StateReason',
            'state_reason_data': 'StateReasonData',
            'state_updated_timestamp': 'StateUpdatedTimestamp',
            'metric_name': 'MetricName',
            'namespace': 'Namespace',
            'statistic': 'Statistic',
            'extended_statistic': 'ExtendedStatistic',
            'dimensions': 'Dimensions',
            'period': 'Period',
            'unit': 'Unit',
            'evaluation_periods': 'EvaluationPeriods',
            'datapoints_to_alarm': 'DatapointsToAlarm',
            'threshold': 'Threshold',
            'comparison_operator': 'ComparisonOperator',
            'treat_missing_data': 'TreatMissingData',
            'evaluate_low_sample_count_percentile': 'EvaluateLowSampleCountPercentile',
            'metrics': 'Metrics',
            'threshold_metric_id': 'ThresholdMetricId',
            'evaluation_state': 'EvaluationState',
            'state_transitioned_timestamp': 'StateTransitionedTimestamp'
        }

        self._alarm_name = alarm_name
        self._alarm_arn = alarm_arn
        self._alarm_description = alarm_description
        self._alarm_configuration_updated_timestamp = alarm_configuration_updated_timestamp
        self._actions_enabled = actions_enabled
        self._ok_actions = ok_actions
        self._alarm_actions = alarm_actions
        self._insufficient_data_actions = insufficient_data_actions
        self._state_value = state_value
        self._state_reason = state_reason
        self._state_reason_data = state_reason_data
        self._state_updated_timestamp = state_updated_timestamp
        self._metric_name = metric_name
        self._namespace = namespace
        self._statistic = statistic
        self._extended_statistic = extended_statistic
        self._dimensions = dimensions
        self._period = period
        self._unit = unit
        self._evaluation_periods = evaluation_periods
        self._datapoints_to_alarm = datapoints_to_alarm
        self._threshold = threshold
        self._comparison_operator = comparison_operator
        self._treat_missing_data = treat_missing_data
        self._evaluate_low_sample_count_percentile = evaluate_low_sample_count_percentile
        self._metrics = metrics
        self._threshold_metric_id = threshold_metric_id
        self._evaluation_state = evaluation_state
        self._state_transitioned_timestamp = state_transitioned_timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricAlarm':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricAlarm of this MetricAlarm.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alarm_name(self):
        """Gets the alarm_name of this MetricAlarm.


        :return: The alarm_name of this MetricAlarm.
        :rtype: str
        """
        return self._alarm_name

    @alarm_name.setter
    def alarm_name(self, alarm_name):
        """Sets the alarm_name of this MetricAlarm.


        :param alarm_name: The alarm_name of this MetricAlarm.
        :type alarm_name: str
        """

        self._alarm_name = alarm_name

    @property
    def alarm_arn(self):
        """Gets the alarm_arn of this MetricAlarm.


        :return: The alarm_arn of this MetricAlarm.
        :rtype: str
        """
        return self._alarm_arn

    @alarm_arn.setter
    def alarm_arn(self, alarm_arn):
        """Sets the alarm_arn of this MetricAlarm.


        :param alarm_arn: The alarm_arn of this MetricAlarm.
        :type alarm_arn: str
        """

        self._alarm_arn = alarm_arn

    @property
    def alarm_description(self):
        """Gets the alarm_description of this MetricAlarm.


        :return: The alarm_description of this MetricAlarm.
        :rtype: str
        """
        return self._alarm_description

    @alarm_description.setter
    def alarm_description(self, alarm_description):
        """Sets the alarm_description of this MetricAlarm.


        :param alarm_description: The alarm_description of this MetricAlarm.
        :type alarm_description: str
        """

        self._alarm_description = alarm_description

    @property
    def alarm_configuration_updated_timestamp(self):
        """Gets the alarm_configuration_updated_timestamp of this MetricAlarm.


        :return: The alarm_configuration_updated_timestamp of this MetricAlarm.
        :rtype: datetime
        """
        return self._alarm_configuration_updated_timestamp

    @alarm_configuration_updated_timestamp.setter
    def alarm_configuration_updated_timestamp(self, alarm_configuration_updated_timestamp):
        """Sets the alarm_configuration_updated_timestamp of this MetricAlarm.


        :param alarm_configuration_updated_timestamp: The alarm_configuration_updated_timestamp of this MetricAlarm.
        :type alarm_configuration_updated_timestamp: datetime
        """

        self._alarm_configuration_updated_timestamp = alarm_configuration_updated_timestamp

    @property
    def actions_enabled(self):
        """Gets the actions_enabled of this MetricAlarm.


        :return: The actions_enabled of this MetricAlarm.
        :rtype: bool
        """
        return self._actions_enabled

    @actions_enabled.setter
    def actions_enabled(self, actions_enabled):
        """Sets the actions_enabled of this MetricAlarm.


        :param actions_enabled: The actions_enabled of this MetricAlarm.
        :type actions_enabled: bool
        """

        self._actions_enabled = actions_enabled

    @property
    def ok_actions(self):
        """Gets the ok_actions of this MetricAlarm.


        :return: The ok_actions of this MetricAlarm.
        :rtype: List
        """
        return self._ok_actions

    @ok_actions.setter
    def ok_actions(self, ok_actions):
        """Sets the ok_actions of this MetricAlarm.


        :param ok_actions: The ok_actions of this MetricAlarm.
        :type ok_actions: List
        """

        self._ok_actions = ok_actions

    @property
    def alarm_actions(self):
        """Gets the alarm_actions of this MetricAlarm.


        :return: The alarm_actions of this MetricAlarm.
        :rtype: List
        """
        return self._alarm_actions

    @alarm_actions.setter
    def alarm_actions(self, alarm_actions):
        """Sets the alarm_actions of this MetricAlarm.


        :param alarm_actions: The alarm_actions of this MetricAlarm.
        :type alarm_actions: List
        """

        self._alarm_actions = alarm_actions

    @property
    def insufficient_data_actions(self):
        """Gets the insufficient_data_actions of this MetricAlarm.


        :return: The insufficient_data_actions of this MetricAlarm.
        :rtype: List
        """
        return self._insufficient_data_actions

    @insufficient_data_actions.setter
    def insufficient_data_actions(self, insufficient_data_actions):
        """Sets the insufficient_data_actions of this MetricAlarm.


        :param insufficient_data_actions: The insufficient_data_actions of this MetricAlarm.
        :type insufficient_data_actions: List
        """

        self._insufficient_data_actions = insufficient_data_actions

    @property
    def state_value(self):
        """Gets the state_value of this MetricAlarm.


        :return: The state_value of this MetricAlarm.
        :rtype: StateValue
        """
        return self._state_value

    @state_value.setter
    def state_value(self, state_value):
        """Sets the state_value of this MetricAlarm.


        :param state_value: The state_value of this MetricAlarm.
        :type state_value: StateValue
        """

        self._state_value = state_value

    @property
    def state_reason(self):
        """Gets the state_reason of this MetricAlarm.


        :return: The state_reason of this MetricAlarm.
        :rtype: str
        """
        return self._state_reason

    @state_reason.setter
    def state_reason(self, state_reason):
        """Sets the state_reason of this MetricAlarm.


        :param state_reason: The state_reason of this MetricAlarm.
        :type state_reason: str
        """

        self._state_reason = state_reason

    @property
    def state_reason_data(self):
        """Gets the state_reason_data of this MetricAlarm.


        :return: The state_reason_data of this MetricAlarm.
        :rtype: str
        """
        return self._state_reason_data

    @state_reason_data.setter
    def state_reason_data(self, state_reason_data):
        """Sets the state_reason_data of this MetricAlarm.


        :param state_reason_data: The state_reason_data of this MetricAlarm.
        :type state_reason_data: str
        """

        self._state_reason_data = state_reason_data

    @property
    def state_updated_timestamp(self):
        """Gets the state_updated_timestamp of this MetricAlarm.


        :return: The state_updated_timestamp of this MetricAlarm.
        :rtype: datetime
        """
        return self._state_updated_timestamp

    @state_updated_timestamp.setter
    def state_updated_timestamp(self, state_updated_timestamp):
        """Sets the state_updated_timestamp of this MetricAlarm.


        :param state_updated_timestamp: The state_updated_timestamp of this MetricAlarm.
        :type state_updated_timestamp: datetime
        """

        self._state_updated_timestamp = state_updated_timestamp

    @property
    def metric_name(self):
        """Gets the metric_name of this MetricAlarm.


        :return: The metric_name of this MetricAlarm.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this MetricAlarm.


        :param metric_name: The metric_name of this MetricAlarm.
        :type metric_name: str
        """

        self._metric_name = metric_name

    @property
    def namespace(self):
        """Gets the namespace of this MetricAlarm.


        :return: The namespace of this MetricAlarm.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this MetricAlarm.


        :param namespace: The namespace of this MetricAlarm.
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def statistic(self):
        """Gets the statistic of this MetricAlarm.


        :return: The statistic of this MetricAlarm.
        :rtype: Statistic
        """
        return self._statistic

    @statistic.setter
    def statistic(self, statistic):
        """Sets the statistic of this MetricAlarm.


        :param statistic: The statistic of this MetricAlarm.
        :type statistic: Statistic
        """

        self._statistic = statistic

    @property
    def extended_statistic(self):
        """Gets the extended_statistic of this MetricAlarm.


        :return: The extended_statistic of this MetricAlarm.
        :rtype: str
        """
        return self._extended_statistic

    @extended_statistic.setter
    def extended_statistic(self, extended_statistic):
        """Sets the extended_statistic of this MetricAlarm.


        :param extended_statistic: The extended_statistic of this MetricAlarm.
        :type extended_statistic: str
        """

        self._extended_statistic = extended_statistic

    @property
    def dimensions(self):
        """Gets the dimensions of this MetricAlarm.


        :return: The dimensions of this MetricAlarm.
        :rtype: List
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this MetricAlarm.


        :param dimensions: The dimensions of this MetricAlarm.
        :type dimensions: List
        """

        self._dimensions = dimensions

    @property
    def period(self):
        """Gets the period of this MetricAlarm.


        :return: The period of this MetricAlarm.
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this MetricAlarm.


        :param period: The period of this MetricAlarm.
        :type period: int
        """

        self._period = period

    @property
    def unit(self):
        """Gets the unit of this MetricAlarm.


        :return: The unit of this MetricAlarm.
        :rtype: StandardUnit
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this MetricAlarm.


        :param unit: The unit of this MetricAlarm.
        :type unit: StandardUnit
        """

        self._unit = unit

    @property
    def evaluation_periods(self):
        """Gets the evaluation_periods of this MetricAlarm.


        :return: The evaluation_periods of this MetricAlarm.
        :rtype: int
        """
        return self._evaluation_periods

    @evaluation_periods.setter
    def evaluation_periods(self, evaluation_periods):
        """Sets the evaluation_periods of this MetricAlarm.


        :param evaluation_periods: The evaluation_periods of this MetricAlarm.
        :type evaluation_periods: int
        """

        self._evaluation_periods = evaluation_periods

    @property
    def datapoints_to_alarm(self):
        """Gets the datapoints_to_alarm of this MetricAlarm.


        :return: The datapoints_to_alarm of this MetricAlarm.
        :rtype: int
        """
        return self._datapoints_to_alarm

    @datapoints_to_alarm.setter
    def datapoints_to_alarm(self, datapoints_to_alarm):
        """Sets the datapoints_to_alarm of this MetricAlarm.


        :param datapoints_to_alarm: The datapoints_to_alarm of this MetricAlarm.
        :type datapoints_to_alarm: int
        """

        self._datapoints_to_alarm = datapoints_to_alarm

    @property
    def threshold(self):
        """Gets the threshold of this MetricAlarm.


        :return: The threshold of this MetricAlarm.
        :rtype: float
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this MetricAlarm.


        :param threshold: The threshold of this MetricAlarm.
        :type threshold: float
        """

        self._threshold = threshold

    @property
    def comparison_operator(self):
        """Gets the comparison_operator of this MetricAlarm.


        :return: The comparison_operator of this MetricAlarm.
        :rtype: ComparisonOperator
        """
        return self._comparison_operator

    @comparison_operator.setter
    def comparison_operator(self, comparison_operator):
        """Sets the comparison_operator of this MetricAlarm.


        :param comparison_operator: The comparison_operator of this MetricAlarm.
        :type comparison_operator: ComparisonOperator
        """

        self._comparison_operator = comparison_operator

    @property
    def treat_missing_data(self):
        """Gets the treat_missing_data of this MetricAlarm.


        :return: The treat_missing_data of this MetricAlarm.
        :rtype: str
        """
        return self._treat_missing_data

    @treat_missing_data.setter
    def treat_missing_data(self, treat_missing_data):
        """Sets the treat_missing_data of this MetricAlarm.


        :param treat_missing_data: The treat_missing_data of this MetricAlarm.
        :type treat_missing_data: str
        """

        self._treat_missing_data = treat_missing_data

    @property
    def evaluate_low_sample_count_percentile(self):
        """Gets the evaluate_low_sample_count_percentile of this MetricAlarm.


        :return: The evaluate_low_sample_count_percentile of this MetricAlarm.
        :rtype: str
        """
        return self._evaluate_low_sample_count_percentile

    @evaluate_low_sample_count_percentile.setter
    def evaluate_low_sample_count_percentile(self, evaluate_low_sample_count_percentile):
        """Sets the evaluate_low_sample_count_percentile of this MetricAlarm.


        :param evaluate_low_sample_count_percentile: The evaluate_low_sample_count_percentile of this MetricAlarm.
        :type evaluate_low_sample_count_percentile: str
        """

        self._evaluate_low_sample_count_percentile = evaluate_low_sample_count_percentile

    @property
    def metrics(self):
        """Gets the metrics of this MetricAlarm.


        :return: The metrics of this MetricAlarm.
        :rtype: List
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this MetricAlarm.


        :param metrics: The metrics of this MetricAlarm.
        :type metrics: List
        """

        self._metrics = metrics

    @property
    def threshold_metric_id(self):
        """Gets the threshold_metric_id of this MetricAlarm.


        :return: The threshold_metric_id of this MetricAlarm.
        :rtype: str
        """
        return self._threshold_metric_id

    @threshold_metric_id.setter
    def threshold_metric_id(self, threshold_metric_id):
        """Sets the threshold_metric_id of this MetricAlarm.


        :param threshold_metric_id: The threshold_metric_id of this MetricAlarm.
        :type threshold_metric_id: str
        """

        self._threshold_metric_id = threshold_metric_id

    @property
    def evaluation_state(self):
        """Gets the evaluation_state of this MetricAlarm.


        :return: The evaluation_state of this MetricAlarm.
        :rtype: EvaluationState
        """
        return self._evaluation_state

    @evaluation_state.setter
    def evaluation_state(self, evaluation_state):
        """Sets the evaluation_state of this MetricAlarm.


        :param evaluation_state: The evaluation_state of this MetricAlarm.
        :type evaluation_state: EvaluationState
        """

        self._evaluation_state = evaluation_state

    @property
    def state_transitioned_timestamp(self):
        """Gets the state_transitioned_timestamp of this MetricAlarm.


        :return: The state_transitioned_timestamp of this MetricAlarm.
        :rtype: datetime
        """
        return self._state_transitioned_timestamp

    @state_transitioned_timestamp.setter
    def state_transitioned_timestamp(self, state_transitioned_timestamp):
        """Sets the state_transitioned_timestamp of this MetricAlarm.


        :param state_transitioned_timestamp: The state_transitioned_timestamp of this MetricAlarm.
        :type state_transitioned_timestamp: datetime
        """

        self._state_transitioned_timestamp = state_transitioned_timestamp
