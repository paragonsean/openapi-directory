# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.standard_unit import StandardUnit
from openapi_server import util


class Datapoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, timestamp: datetime=None, sample_count: float=None, average: float=None, sum: float=None, minimum: float=None, maximum: float=None, unit: StandardUnit=None, extended_statistics: Dict=None):
        """Datapoint - a model defined in OpenAPI

        :param timestamp: The timestamp of this Datapoint.
        :param sample_count: The sample_count of this Datapoint.
        :param average: The average of this Datapoint.
        :param sum: The sum of this Datapoint.
        :param minimum: The minimum of this Datapoint.
        :param maximum: The maximum of this Datapoint.
        :param unit: The unit of this Datapoint.
        :param extended_statistics: The extended_statistics of this Datapoint.
        """
        self.openapi_types = {
            'timestamp': datetime,
            'sample_count': float,
            'average': float,
            'sum': float,
            'minimum': float,
            'maximum': float,
            'unit': StandardUnit,
            'extended_statistics': Dict
        }

        self.attribute_map = {
            'timestamp': 'Timestamp',
            'sample_count': 'SampleCount',
            'average': 'Average',
            'sum': 'Sum',
            'minimum': 'Minimum',
            'maximum': 'Maximum',
            'unit': 'Unit',
            'extended_statistics': 'ExtendedStatistics'
        }

        self._timestamp = timestamp
        self._sample_count = sample_count
        self._average = average
        self._sum = sum
        self._minimum = minimum
        self._maximum = maximum
        self._unit = unit
        self._extended_statistics = extended_statistics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Datapoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Datapoint of this Datapoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timestamp(self):
        """Gets the timestamp of this Datapoint.


        :return: The timestamp of this Datapoint.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Datapoint.


        :param timestamp: The timestamp of this Datapoint.
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def sample_count(self):
        """Gets the sample_count of this Datapoint.


        :return: The sample_count of this Datapoint.
        :rtype: float
        """
        return self._sample_count

    @sample_count.setter
    def sample_count(self, sample_count):
        """Sets the sample_count of this Datapoint.


        :param sample_count: The sample_count of this Datapoint.
        :type sample_count: float
        """

        self._sample_count = sample_count

    @property
    def average(self):
        """Gets the average of this Datapoint.


        :return: The average of this Datapoint.
        :rtype: float
        """
        return self._average

    @average.setter
    def average(self, average):
        """Sets the average of this Datapoint.


        :param average: The average of this Datapoint.
        :type average: float
        """

        self._average = average

    @property
    def sum(self):
        """Gets the sum of this Datapoint.


        :return: The sum of this Datapoint.
        :rtype: float
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """Sets the sum of this Datapoint.


        :param sum: The sum of this Datapoint.
        :type sum: float
        """

        self._sum = sum

    @property
    def minimum(self):
        """Gets the minimum of this Datapoint.


        :return: The minimum of this Datapoint.
        :rtype: float
        """
        return self._minimum

    @minimum.setter
    def minimum(self, minimum):
        """Sets the minimum of this Datapoint.


        :param minimum: The minimum of this Datapoint.
        :type minimum: float
        """

        self._minimum = minimum

    @property
    def maximum(self):
        """Gets the maximum of this Datapoint.


        :return: The maximum of this Datapoint.
        :rtype: float
        """
        return self._maximum

    @maximum.setter
    def maximum(self, maximum):
        """Sets the maximum of this Datapoint.


        :param maximum: The maximum of this Datapoint.
        :type maximum: float
        """

        self._maximum = maximum

    @property
    def unit(self):
        """Gets the unit of this Datapoint.


        :return: The unit of this Datapoint.
        :rtype: StandardUnit
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this Datapoint.


        :param unit: The unit of this Datapoint.
        :type unit: StandardUnit
        """

        self._unit = unit

    @property
    def extended_statistics(self):
        """Gets the extended_statistics of this Datapoint.


        :return: The extended_statistics of this Datapoint.
        :rtype: Dict
        """
        return self._extended_statistics

    @extended_statistics.setter
    def extended_statistics(self, extended_statistics):
        """Sets the extended_statistics of this Datapoint.


        :param extended_statistics: The extended_statistics of this Datapoint.
        :type extended_statistics: Dict
        """

        self._extended_statistics = extended_statistics
