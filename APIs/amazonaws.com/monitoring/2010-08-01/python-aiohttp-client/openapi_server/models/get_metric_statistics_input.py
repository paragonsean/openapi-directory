# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.standard_unit import StandardUnit
from openapi_server import util


class GetMetricStatisticsInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, namespace: str=None, metric_name: str=None, dimensions: List=None, start_time: datetime=None, end_time: datetime=None, period: int=None, statistics: List=None, extended_statistics: List=None, unit: StandardUnit=None):
        """GetMetricStatisticsInput - a model defined in OpenAPI

        :param namespace: The namespace of this GetMetricStatisticsInput.
        :param metric_name: The metric_name of this GetMetricStatisticsInput.
        :param dimensions: The dimensions of this GetMetricStatisticsInput.
        :param start_time: The start_time of this GetMetricStatisticsInput.
        :param end_time: The end_time of this GetMetricStatisticsInput.
        :param period: The period of this GetMetricStatisticsInput.
        :param statistics: The statistics of this GetMetricStatisticsInput.
        :param extended_statistics: The extended_statistics of this GetMetricStatisticsInput.
        :param unit: The unit of this GetMetricStatisticsInput.
        """
        self.openapi_types = {
            'namespace': str,
            'metric_name': str,
            'dimensions': List,
            'start_time': datetime,
            'end_time': datetime,
            'period': int,
            'statistics': List,
            'extended_statistics': List,
            'unit': StandardUnit
        }

        self.attribute_map = {
            'namespace': 'Namespace',
            'metric_name': 'MetricName',
            'dimensions': 'Dimensions',
            'start_time': 'StartTime',
            'end_time': 'EndTime',
            'period': 'Period',
            'statistics': 'Statistics',
            'extended_statistics': 'ExtendedStatistics',
            'unit': 'Unit'
        }

        self._namespace = namespace
        self._metric_name = metric_name
        self._dimensions = dimensions
        self._start_time = start_time
        self._end_time = end_time
        self._period = period
        self._statistics = statistics
        self._extended_statistics = extended_statistics
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetMetricStatisticsInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetMetricStatisticsInput of this GetMetricStatisticsInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def namespace(self):
        """Gets the namespace of this GetMetricStatisticsInput.


        :return: The namespace of this GetMetricStatisticsInput.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this GetMetricStatisticsInput.


        :param namespace: The namespace of this GetMetricStatisticsInput.
        :type namespace: str
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")

        self._namespace = namespace

    @property
    def metric_name(self):
        """Gets the metric_name of this GetMetricStatisticsInput.


        :return: The metric_name of this GetMetricStatisticsInput.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this GetMetricStatisticsInput.


        :param metric_name: The metric_name of this GetMetricStatisticsInput.
        :type metric_name: str
        """
        if metric_name is None:
            raise ValueError("Invalid value for `metric_name`, must not be `None`")

        self._metric_name = metric_name

    @property
    def dimensions(self):
        """Gets the dimensions of this GetMetricStatisticsInput.


        :return: The dimensions of this GetMetricStatisticsInput.
        :rtype: List
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this GetMetricStatisticsInput.


        :param dimensions: The dimensions of this GetMetricStatisticsInput.
        :type dimensions: List
        """

        self._dimensions = dimensions

    @property
    def start_time(self):
        """Gets the start_time of this GetMetricStatisticsInput.


        :return: The start_time of this GetMetricStatisticsInput.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GetMetricStatisticsInput.


        :param start_time: The start_time of this GetMetricStatisticsInput.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this GetMetricStatisticsInput.


        :return: The end_time of this GetMetricStatisticsInput.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this GetMetricStatisticsInput.


        :param end_time: The end_time of this GetMetricStatisticsInput.
        :type end_time: datetime
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")

        self._end_time = end_time

    @property
    def period(self):
        """Gets the period of this GetMetricStatisticsInput.


        :return: The period of this GetMetricStatisticsInput.
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this GetMetricStatisticsInput.


        :param period: The period of this GetMetricStatisticsInput.
        :type period: int
        """
        if period is None:
            raise ValueError("Invalid value for `period`, must not be `None`")

        self._period = period

    @property
    def statistics(self):
        """Gets the statistics of this GetMetricStatisticsInput.


        :return: The statistics of this GetMetricStatisticsInput.
        :rtype: List
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this GetMetricStatisticsInput.


        :param statistics: The statistics of this GetMetricStatisticsInput.
        :type statistics: List
        """

        self._statistics = statistics

    @property
    def extended_statistics(self):
        """Gets the extended_statistics of this GetMetricStatisticsInput.


        :return: The extended_statistics of this GetMetricStatisticsInput.
        :rtype: List
        """
        return self._extended_statistics

    @extended_statistics.setter
    def extended_statistics(self, extended_statistics):
        """Sets the extended_statistics of this GetMetricStatisticsInput.


        :param extended_statistics: The extended_statistics of this GetMetricStatisticsInput.
        :type extended_statistics: List
        """

        self._extended_statistics = extended_statistics

    @property
    def unit(self):
        """Gets the unit of this GetMetricStatisticsInput.


        :return: The unit of this GetMetricStatisticsInput.
        :rtype: StandardUnit
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this GetMetricStatisticsInput.


        :param unit: The unit of this GetMetricStatisticsInput.
        :type unit: StandardUnit
        """

        self._unit = unit
