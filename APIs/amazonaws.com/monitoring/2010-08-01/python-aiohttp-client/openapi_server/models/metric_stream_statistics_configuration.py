# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MetricStreamStatisticsConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, include_metrics: List=None, additional_statistics: List=None):
        """MetricStreamStatisticsConfiguration - a model defined in OpenAPI

        :param include_metrics: The include_metrics of this MetricStreamStatisticsConfiguration.
        :param additional_statistics: The additional_statistics of this MetricStreamStatisticsConfiguration.
        """
        self.openapi_types = {
            'include_metrics': List,
            'additional_statistics': List
        }

        self.attribute_map = {
            'include_metrics': 'IncludeMetrics',
            'additional_statistics': 'AdditionalStatistics'
        }

        self._include_metrics = include_metrics
        self._additional_statistics = additional_statistics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricStreamStatisticsConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricStreamStatisticsConfiguration of this MetricStreamStatisticsConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def include_metrics(self):
        """Gets the include_metrics of this MetricStreamStatisticsConfiguration.


        :return: The include_metrics of this MetricStreamStatisticsConfiguration.
        :rtype: List
        """
        return self._include_metrics

    @include_metrics.setter
    def include_metrics(self, include_metrics):
        """Sets the include_metrics of this MetricStreamStatisticsConfiguration.


        :param include_metrics: The include_metrics of this MetricStreamStatisticsConfiguration.
        :type include_metrics: List
        """
        if include_metrics is None:
            raise ValueError("Invalid value for `include_metrics`, must not be `None`")

        self._include_metrics = include_metrics

    @property
    def additional_statistics(self):
        """Gets the additional_statistics of this MetricStreamStatisticsConfiguration.


        :return: The additional_statistics of this MetricStreamStatisticsConfiguration.
        :rtype: List
        """
        return self._additional_statistics

    @additional_statistics.setter
    def additional_statistics(self, additional_statistics):
        """Sets the additional_statistics of this MetricStreamStatisticsConfiguration.


        :param additional_statistics: The additional_statistics of this MetricStreamStatisticsConfiguration.
        :type additional_statistics: List
        """
        if additional_statistics is None:
            raise ValueError("Invalid value for `additional_statistics`, must not be `None`")

        self._additional_statistics = additional_statistics
