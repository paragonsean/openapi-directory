# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InsightRuleContributor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, keys: List=None, approximate_aggregate_value: float=None, datapoints: List=None):
        """InsightRuleContributor - a model defined in OpenAPI

        :param keys: The keys of this InsightRuleContributor.
        :param approximate_aggregate_value: The approximate_aggregate_value of this InsightRuleContributor.
        :param datapoints: The datapoints of this InsightRuleContributor.
        """
        self.openapi_types = {
            'keys': List,
            'approximate_aggregate_value': float,
            'datapoints': List
        }

        self.attribute_map = {
            'keys': 'Keys',
            'approximate_aggregate_value': 'ApproximateAggregateValue',
            'datapoints': 'Datapoints'
        }

        self._keys = keys
        self._approximate_aggregate_value = approximate_aggregate_value
        self._datapoints = datapoints

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InsightRuleContributor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InsightRuleContributor of this InsightRuleContributor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def keys(self):
        """Gets the keys of this InsightRuleContributor.


        :return: The keys of this InsightRuleContributor.
        :rtype: List
        """
        return self._keys

    @keys.setter
    def keys(self, keys):
        """Sets the keys of this InsightRuleContributor.


        :param keys: The keys of this InsightRuleContributor.
        :type keys: List
        """
        if keys is None:
            raise ValueError("Invalid value for `keys`, must not be `None`")

        self._keys = keys

    @property
    def approximate_aggregate_value(self):
        """Gets the approximate_aggregate_value of this InsightRuleContributor.


        :return: The approximate_aggregate_value of this InsightRuleContributor.
        :rtype: float
        """
        return self._approximate_aggregate_value

    @approximate_aggregate_value.setter
    def approximate_aggregate_value(self, approximate_aggregate_value):
        """Sets the approximate_aggregate_value of this InsightRuleContributor.


        :param approximate_aggregate_value: The approximate_aggregate_value of this InsightRuleContributor.
        :type approximate_aggregate_value: float
        """
        if approximate_aggregate_value is None:
            raise ValueError("Invalid value for `approximate_aggregate_value`, must not be `None`")

        self._approximate_aggregate_value = approximate_aggregate_value

    @property
    def datapoints(self):
        """Gets the datapoints of this InsightRuleContributor.


        :return: The datapoints of this InsightRuleContributor.
        :rtype: List
        """
        return self._datapoints

    @datapoints.setter
    def datapoints(self, datapoints):
        """Sets the datapoints of this InsightRuleContributor.


        :param datapoints: The datapoints of this InsightRuleContributor.
        :type datapoints: List
        """
        if datapoints is None:
            raise ValueError("Invalid value for `datapoints`, must not be `None`")

        self._datapoints = datapoints
