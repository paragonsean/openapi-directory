# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetInsightRuleReportInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rule_name: str=None, start_time: datetime=None, end_time: datetime=None, period: int=None, max_contributor_count: int=None, metrics: List=None, order_by: str=None):
        """GetInsightRuleReportInput - a model defined in OpenAPI

        :param rule_name: The rule_name of this GetInsightRuleReportInput.
        :param start_time: The start_time of this GetInsightRuleReportInput.
        :param end_time: The end_time of this GetInsightRuleReportInput.
        :param period: The period of this GetInsightRuleReportInput.
        :param max_contributor_count: The max_contributor_count of this GetInsightRuleReportInput.
        :param metrics: The metrics of this GetInsightRuleReportInput.
        :param order_by: The order_by of this GetInsightRuleReportInput.
        """
        self.openapi_types = {
            'rule_name': str,
            'start_time': datetime,
            'end_time': datetime,
            'period': int,
            'max_contributor_count': int,
            'metrics': List,
            'order_by': str
        }

        self.attribute_map = {
            'rule_name': 'RuleName',
            'start_time': 'StartTime',
            'end_time': 'EndTime',
            'period': 'Period',
            'max_contributor_count': 'MaxContributorCount',
            'metrics': 'Metrics',
            'order_by': 'OrderBy'
        }

        self._rule_name = rule_name
        self._start_time = start_time
        self._end_time = end_time
        self._period = period
        self._max_contributor_count = max_contributor_count
        self._metrics = metrics
        self._order_by = order_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetInsightRuleReportInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetInsightRuleReportInput of this GetInsightRuleReportInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rule_name(self):
        """Gets the rule_name of this GetInsightRuleReportInput.


        :return: The rule_name of this GetInsightRuleReportInput.
        :rtype: str
        """
        return self._rule_name

    @rule_name.setter
    def rule_name(self, rule_name):
        """Sets the rule_name of this GetInsightRuleReportInput.


        :param rule_name: The rule_name of this GetInsightRuleReportInput.
        :type rule_name: str
        """
        if rule_name is None:
            raise ValueError("Invalid value for `rule_name`, must not be `None`")

        self._rule_name = rule_name

    @property
    def start_time(self):
        """Gets the start_time of this GetInsightRuleReportInput.


        :return: The start_time of this GetInsightRuleReportInput.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GetInsightRuleReportInput.


        :param start_time: The start_time of this GetInsightRuleReportInput.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this GetInsightRuleReportInput.


        :return: The end_time of this GetInsightRuleReportInput.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this GetInsightRuleReportInput.


        :param end_time: The end_time of this GetInsightRuleReportInput.
        :type end_time: datetime
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")

        self._end_time = end_time

    @property
    def period(self):
        """Gets the period of this GetInsightRuleReportInput.


        :return: The period of this GetInsightRuleReportInput.
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this GetInsightRuleReportInput.


        :param period: The period of this GetInsightRuleReportInput.
        :type period: int
        """
        if period is None:
            raise ValueError("Invalid value for `period`, must not be `None`")

        self._period = period

    @property
    def max_contributor_count(self):
        """Gets the max_contributor_count of this GetInsightRuleReportInput.


        :return: The max_contributor_count of this GetInsightRuleReportInput.
        :rtype: int
        """
        return self._max_contributor_count

    @max_contributor_count.setter
    def max_contributor_count(self, max_contributor_count):
        """Sets the max_contributor_count of this GetInsightRuleReportInput.


        :param max_contributor_count: The max_contributor_count of this GetInsightRuleReportInput.
        :type max_contributor_count: int
        """

        self._max_contributor_count = max_contributor_count

    @property
    def metrics(self):
        """Gets the metrics of this GetInsightRuleReportInput.


        :return: The metrics of this GetInsightRuleReportInput.
        :rtype: List
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this GetInsightRuleReportInput.


        :param metrics: The metrics of this GetInsightRuleReportInput.
        :type metrics: List
        """

        self._metrics = metrics

    @property
    def order_by(self):
        """Gets the order_by of this GetInsightRuleReportInput.


        :return: The order_by of this GetInsightRuleReportInput.
        :rtype: str
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this GetInsightRuleReportInput.


        :param order_by: The order_by of this GetInsightRuleReportInput.
        :type order_by: str
        """

        self._order_by = order_by
