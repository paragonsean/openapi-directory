# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SingleMetricAnomalyDetector(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, namespace: str=None, metric_name: str=None, dimensions: List=None, stat: str=None):
        """SingleMetricAnomalyDetector - a model defined in OpenAPI

        :param namespace: The namespace of this SingleMetricAnomalyDetector.
        :param metric_name: The metric_name of this SingleMetricAnomalyDetector.
        :param dimensions: The dimensions of this SingleMetricAnomalyDetector.
        :param stat: The stat of this SingleMetricAnomalyDetector.
        """
        self.openapi_types = {
            'namespace': str,
            'metric_name': str,
            'dimensions': List,
            'stat': str
        }

        self.attribute_map = {
            'namespace': 'Namespace',
            'metric_name': 'MetricName',
            'dimensions': 'Dimensions',
            'stat': 'Stat'
        }

        self._namespace = namespace
        self._metric_name = metric_name
        self._dimensions = dimensions
        self._stat = stat

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SingleMetricAnomalyDetector':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SingleMetricAnomalyDetector of this SingleMetricAnomalyDetector.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def namespace(self):
        """Gets the namespace of this SingleMetricAnomalyDetector.


        :return: The namespace of this SingleMetricAnomalyDetector.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this SingleMetricAnomalyDetector.


        :param namespace: The namespace of this SingleMetricAnomalyDetector.
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def metric_name(self):
        """Gets the metric_name of this SingleMetricAnomalyDetector.


        :return: The metric_name of this SingleMetricAnomalyDetector.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this SingleMetricAnomalyDetector.


        :param metric_name: The metric_name of this SingleMetricAnomalyDetector.
        :type metric_name: str
        """

        self._metric_name = metric_name

    @property
    def dimensions(self):
        """Gets the dimensions of this SingleMetricAnomalyDetector.


        :return: The dimensions of this SingleMetricAnomalyDetector.
        :rtype: List
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this SingleMetricAnomalyDetector.


        :param dimensions: The dimensions of this SingleMetricAnomalyDetector.
        :type dimensions: List
        """

        self._dimensions = dimensions

    @property
    def stat(self):
        """Gets the stat of this SingleMetricAnomalyDetector.


        :return: The stat of this SingleMetricAnomalyDetector.
        :rtype: str
        """
        return self._stat

    @stat.setter
    def stat(self, stat):
        """Sets the stat of this SingleMetricAnomalyDetector.


        :param stat: The stat of this SingleMetricAnomalyDetector.
        :type stat: str
        """

        self._stat = stat
