# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InsightRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, state: str=None, _schema: str=None, definition: str=None, managed_rule: bool=None):
        """InsightRule - a model defined in OpenAPI

        :param name: The name of this InsightRule.
        :param state: The state of this InsightRule.
        :param _schema: The _schema of this InsightRule.
        :param definition: The definition of this InsightRule.
        :param managed_rule: The managed_rule of this InsightRule.
        """
        self.openapi_types = {
            'name': str,
            'state': str,
            '_schema': str,
            'definition': str,
            'managed_rule': bool
        }

        self.attribute_map = {
            'name': 'Name',
            'state': 'State',
            '_schema': 'Schema',
            'definition': 'Definition',
            'managed_rule': 'ManagedRule'
        }

        self._name = name
        self._state = state
        self.__schema = _schema
        self._definition = definition
        self._managed_rule = managed_rule

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InsightRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InsightRule of this InsightRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this InsightRule.


        :return: The name of this InsightRule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InsightRule.


        :param name: The name of this InsightRule.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def state(self):
        """Gets the state of this InsightRule.


        :return: The state of this InsightRule.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InsightRule.


        :param state: The state of this InsightRule.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def _schema(self):
        """Gets the _schema of this InsightRule.


        :return: The _schema of this InsightRule.
        :rtype: str
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this InsightRule.


        :param _schema: The _schema of this InsightRule.
        :type _schema: str
        """
        if _schema is None:
            raise ValueError("Invalid value for `_schema`, must not be `None`")

        self.__schema = _schema

    @property
    def definition(self):
        """Gets the definition of this InsightRule.


        :return: The definition of this InsightRule.
        :rtype: str
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this InsightRule.


        :param definition: The definition of this InsightRule.
        :type definition: str
        """
        if definition is None:
            raise ValueError("Invalid value for `definition`, must not be `None`")

        self._definition = definition

    @property
    def managed_rule(self):
        """Gets the managed_rule of this InsightRule.


        :return: The managed_rule of this InsightRule.
        :rtype: bool
        """
        return self._managed_rule

    @managed_rule.setter
    def managed_rule(self, managed_rule):
        """Sets the managed_rule of this InsightRule.


        :param managed_rule: The managed_rule of this InsightRule.
        :type managed_rule: bool
        """

        self._managed_rule = managed_rule
