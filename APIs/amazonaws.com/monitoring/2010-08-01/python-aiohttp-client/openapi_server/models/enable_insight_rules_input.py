# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnableInsightRulesInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rule_names: List=None):
        """EnableInsightRulesInput - a model defined in OpenAPI

        :param rule_names: The rule_names of this EnableInsightRulesInput.
        """
        self.openapi_types = {
            'rule_names': List
        }

        self.attribute_map = {
            'rule_names': 'RuleNames'
        }

        self._rule_names = rule_names

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnableInsightRulesInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnableInsightRulesInput of this EnableInsightRulesInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rule_names(self):
        """Gets the rule_names of this EnableInsightRulesInput.


        :return: The rule_names of this EnableInsightRulesInput.
        :rtype: List
        """
        return self._rule_names

    @rule_names.setter
    def rule_names(self, rule_names):
        """Sets the rule_names of this EnableInsightRulesInput.


        :param rule_names: The rule_names of this EnableInsightRulesInput.
        :type rule_names: List
        """
        if rule_names is None:
            raise ValueError("Invalid value for `rule_names`, must not be `None`")

        self._rule_names = rule_names
