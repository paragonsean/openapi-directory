# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metric_datum_statistic_values import MetricDatumStatisticValues
from openapi_server.models.standard_unit import StandardUnit
from openapi_server import util


class MetricDatum(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metric_name: str=None, dimensions: List=None, timestamp: datetime=None, value: float=None, statistic_values: MetricDatumStatisticValues=None, values: List=None, counts: List=None, unit: StandardUnit=None, storage_resolution: int=None):
        """MetricDatum - a model defined in OpenAPI

        :param metric_name: The metric_name of this MetricDatum.
        :param dimensions: The dimensions of this MetricDatum.
        :param timestamp: The timestamp of this MetricDatum.
        :param value: The value of this MetricDatum.
        :param statistic_values: The statistic_values of this MetricDatum.
        :param values: The values of this MetricDatum.
        :param counts: The counts of this MetricDatum.
        :param unit: The unit of this MetricDatum.
        :param storage_resolution: The storage_resolution of this MetricDatum.
        """
        self.openapi_types = {
            'metric_name': str,
            'dimensions': List,
            'timestamp': datetime,
            'value': float,
            'statistic_values': MetricDatumStatisticValues,
            'values': List,
            'counts': List,
            'unit': StandardUnit,
            'storage_resolution': int
        }

        self.attribute_map = {
            'metric_name': 'MetricName',
            'dimensions': 'Dimensions',
            'timestamp': 'Timestamp',
            'value': 'Value',
            'statistic_values': 'StatisticValues',
            'values': 'Values',
            'counts': 'Counts',
            'unit': 'Unit',
            'storage_resolution': 'StorageResolution'
        }

        self._metric_name = metric_name
        self._dimensions = dimensions
        self._timestamp = timestamp
        self._value = value
        self._statistic_values = statistic_values
        self._values = values
        self._counts = counts
        self._unit = unit
        self._storage_resolution = storage_resolution

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricDatum':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricDatum of this MetricDatum.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metric_name(self):
        """Gets the metric_name of this MetricDatum.


        :return: The metric_name of this MetricDatum.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this MetricDatum.


        :param metric_name: The metric_name of this MetricDatum.
        :type metric_name: str
        """
        if metric_name is None:
            raise ValueError("Invalid value for `metric_name`, must not be `None`")

        self._metric_name = metric_name

    @property
    def dimensions(self):
        """Gets the dimensions of this MetricDatum.


        :return: The dimensions of this MetricDatum.
        :rtype: List
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this MetricDatum.


        :param dimensions: The dimensions of this MetricDatum.
        :type dimensions: List
        """

        self._dimensions = dimensions

    @property
    def timestamp(self):
        """Gets the timestamp of this MetricDatum.


        :return: The timestamp of this MetricDatum.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this MetricDatum.


        :param timestamp: The timestamp of this MetricDatum.
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def value(self):
        """Gets the value of this MetricDatum.


        :return: The value of this MetricDatum.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this MetricDatum.


        :param value: The value of this MetricDatum.
        :type value: float
        """

        self._value = value

    @property
    def statistic_values(self):
        """Gets the statistic_values of this MetricDatum.


        :return: The statistic_values of this MetricDatum.
        :rtype: MetricDatumStatisticValues
        """
        return self._statistic_values

    @statistic_values.setter
    def statistic_values(self, statistic_values):
        """Sets the statistic_values of this MetricDatum.


        :param statistic_values: The statistic_values of this MetricDatum.
        :type statistic_values: MetricDatumStatisticValues
        """

        self._statistic_values = statistic_values

    @property
    def values(self):
        """Gets the values of this MetricDatum.


        :return: The values of this MetricDatum.
        :rtype: List
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this MetricDatum.


        :param values: The values of this MetricDatum.
        :type values: List
        """

        self._values = values

    @property
    def counts(self):
        """Gets the counts of this MetricDatum.


        :return: The counts of this MetricDatum.
        :rtype: List
        """
        return self._counts

    @counts.setter
    def counts(self, counts):
        """Sets the counts of this MetricDatum.


        :param counts: The counts of this MetricDatum.
        :type counts: List
        """

        self._counts = counts

    @property
    def unit(self):
        """Gets the unit of this MetricDatum.


        :return: The unit of this MetricDatum.
        :rtype: StandardUnit
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this MetricDatum.


        :param unit: The unit of this MetricDatum.
        :type unit: StandardUnit
        """

        self._unit = unit

    @property
    def storage_resolution(self):
        """Gets the storage_resolution of this MetricDatum.


        :return: The storage_resolution of this MetricDatum.
        :rtype: int
        """
        return self._storage_resolution

    @storage_resolution.setter
    def storage_resolution(self, storage_resolution):
        """Sets the storage_resolution of this MetricDatum.


        :param storage_resolution: The storage_resolution of this MetricDatum.
        :type storage_resolution: int
        """

        self._storage_resolution = storage_resolution
