# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutInsightRuleInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rule_name: str=None, rule_state: str=None, rule_definition: str=None, tags: List=None):
        """PutInsightRuleInput - a model defined in OpenAPI

        :param rule_name: The rule_name of this PutInsightRuleInput.
        :param rule_state: The rule_state of this PutInsightRuleInput.
        :param rule_definition: The rule_definition of this PutInsightRuleInput.
        :param tags: The tags of this PutInsightRuleInput.
        """
        self.openapi_types = {
            'rule_name': str,
            'rule_state': str,
            'rule_definition': str,
            'tags': List
        }

        self.attribute_map = {
            'rule_name': 'RuleName',
            'rule_state': 'RuleState',
            'rule_definition': 'RuleDefinition',
            'tags': 'Tags'
        }

        self._rule_name = rule_name
        self._rule_state = rule_state
        self._rule_definition = rule_definition
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutInsightRuleInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutInsightRuleInput of this PutInsightRuleInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rule_name(self):
        """Gets the rule_name of this PutInsightRuleInput.


        :return: The rule_name of this PutInsightRuleInput.
        :rtype: str
        """
        return self._rule_name

    @rule_name.setter
    def rule_name(self, rule_name):
        """Sets the rule_name of this PutInsightRuleInput.


        :param rule_name: The rule_name of this PutInsightRuleInput.
        :type rule_name: str
        """
        if rule_name is None:
            raise ValueError("Invalid value for `rule_name`, must not be `None`")

        self._rule_name = rule_name

    @property
    def rule_state(self):
        """Gets the rule_state of this PutInsightRuleInput.


        :return: The rule_state of this PutInsightRuleInput.
        :rtype: str
        """
        return self._rule_state

    @rule_state.setter
    def rule_state(self, rule_state):
        """Sets the rule_state of this PutInsightRuleInput.


        :param rule_state: The rule_state of this PutInsightRuleInput.
        :type rule_state: str
        """

        self._rule_state = rule_state

    @property
    def rule_definition(self):
        """Gets the rule_definition of this PutInsightRuleInput.


        :return: The rule_definition of this PutInsightRuleInput.
        :rtype: str
        """
        return self._rule_definition

    @rule_definition.setter
    def rule_definition(self, rule_definition):
        """Sets the rule_definition of this PutInsightRuleInput.


        :param rule_definition: The rule_definition of this PutInsightRuleInput.
        :type rule_definition: str
        """
        if rule_definition is None:
            raise ValueError("Invalid value for `rule_definition`, must not be `None`")

        self._rule_definition = rule_definition

    @property
    def tags(self):
        """Gets the tags of this PutInsightRuleInput.


        :return: The tags of this PutInsightRuleInput.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PutInsightRuleInput.


        :param tags: The tags of this PutInsightRuleInput.
        :type tags: List
        """

        self._tags = tags
