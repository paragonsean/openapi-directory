# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetInsightRuleReportOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key_labels: List=None, aggregation_statistic: str=None, aggregate_value: float=None, approximate_unique_count: int=None, contributors: List=None, metric_datapoints: List=None):
        """GetInsightRuleReportOutput - a model defined in OpenAPI

        :param key_labels: The key_labels of this GetInsightRuleReportOutput.
        :param aggregation_statistic: The aggregation_statistic of this GetInsightRuleReportOutput.
        :param aggregate_value: The aggregate_value of this GetInsightRuleReportOutput.
        :param approximate_unique_count: The approximate_unique_count of this GetInsightRuleReportOutput.
        :param contributors: The contributors of this GetInsightRuleReportOutput.
        :param metric_datapoints: The metric_datapoints of this GetInsightRuleReportOutput.
        """
        self.openapi_types = {
            'key_labels': List,
            'aggregation_statistic': str,
            'aggregate_value': float,
            'approximate_unique_count': int,
            'contributors': List,
            'metric_datapoints': List
        }

        self.attribute_map = {
            'key_labels': 'KeyLabels',
            'aggregation_statistic': 'AggregationStatistic',
            'aggregate_value': 'AggregateValue',
            'approximate_unique_count': 'ApproximateUniqueCount',
            'contributors': 'Contributors',
            'metric_datapoints': 'MetricDatapoints'
        }

        self._key_labels = key_labels
        self._aggregation_statistic = aggregation_statistic
        self._aggregate_value = aggregate_value
        self._approximate_unique_count = approximate_unique_count
        self._contributors = contributors
        self._metric_datapoints = metric_datapoints

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetInsightRuleReportOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetInsightRuleReportOutput of this GetInsightRuleReportOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key_labels(self):
        """Gets the key_labels of this GetInsightRuleReportOutput.


        :return: The key_labels of this GetInsightRuleReportOutput.
        :rtype: List
        """
        return self._key_labels

    @key_labels.setter
    def key_labels(self, key_labels):
        """Sets the key_labels of this GetInsightRuleReportOutput.


        :param key_labels: The key_labels of this GetInsightRuleReportOutput.
        :type key_labels: List
        """

        self._key_labels = key_labels

    @property
    def aggregation_statistic(self):
        """Gets the aggregation_statistic of this GetInsightRuleReportOutput.


        :return: The aggregation_statistic of this GetInsightRuleReportOutput.
        :rtype: str
        """
        return self._aggregation_statistic

    @aggregation_statistic.setter
    def aggregation_statistic(self, aggregation_statistic):
        """Sets the aggregation_statistic of this GetInsightRuleReportOutput.


        :param aggregation_statistic: The aggregation_statistic of this GetInsightRuleReportOutput.
        :type aggregation_statistic: str
        """

        self._aggregation_statistic = aggregation_statistic

    @property
    def aggregate_value(self):
        """Gets the aggregate_value of this GetInsightRuleReportOutput.


        :return: The aggregate_value of this GetInsightRuleReportOutput.
        :rtype: float
        """
        return self._aggregate_value

    @aggregate_value.setter
    def aggregate_value(self, aggregate_value):
        """Sets the aggregate_value of this GetInsightRuleReportOutput.


        :param aggregate_value: The aggregate_value of this GetInsightRuleReportOutput.
        :type aggregate_value: float
        """

        self._aggregate_value = aggregate_value

    @property
    def approximate_unique_count(self):
        """Gets the approximate_unique_count of this GetInsightRuleReportOutput.


        :return: The approximate_unique_count of this GetInsightRuleReportOutput.
        :rtype: int
        """
        return self._approximate_unique_count

    @approximate_unique_count.setter
    def approximate_unique_count(self, approximate_unique_count):
        """Sets the approximate_unique_count of this GetInsightRuleReportOutput.


        :param approximate_unique_count: The approximate_unique_count of this GetInsightRuleReportOutput.
        :type approximate_unique_count: int
        """

        self._approximate_unique_count = approximate_unique_count

    @property
    def contributors(self):
        """Gets the contributors of this GetInsightRuleReportOutput.


        :return: The contributors of this GetInsightRuleReportOutput.
        :rtype: List
        """
        return self._contributors

    @contributors.setter
    def contributors(self, contributors):
        """Sets the contributors of this GetInsightRuleReportOutput.


        :param contributors: The contributors of this GetInsightRuleReportOutput.
        :type contributors: List
        """

        self._contributors = contributors

    @property
    def metric_datapoints(self):
        """Gets the metric_datapoints of this GetInsightRuleReportOutput.


        :return: The metric_datapoints of this GetInsightRuleReportOutput.
        :rtype: List
        """
        return self._metric_datapoints

    @metric_datapoints.setter
    def metric_datapoints(self, metric_datapoints):
        """Sets the metric_datapoints of this GetInsightRuleReportOutput.


        :param metric_datapoints: The metric_datapoints of this GetInsightRuleReportOutput.
        :type metric_datapoints: List
        """

        self._metric_datapoints = metric_datapoints
