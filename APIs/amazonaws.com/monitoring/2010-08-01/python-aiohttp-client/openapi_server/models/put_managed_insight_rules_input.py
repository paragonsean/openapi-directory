# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutManagedInsightRulesInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, managed_rules: List=None):
        """PutManagedInsightRulesInput - a model defined in OpenAPI

        :param managed_rules: The managed_rules of this PutManagedInsightRulesInput.
        """
        self.openapi_types = {
            'managed_rules': List
        }

        self.attribute_map = {
            'managed_rules': 'ManagedRules'
        }

        self._managed_rules = managed_rules

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutManagedInsightRulesInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutManagedInsightRulesInput of this PutManagedInsightRulesInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def managed_rules(self):
        """Gets the managed_rules of this PutManagedInsightRulesInput.


        :return: The managed_rules of this PutManagedInsightRulesInput.
        :rtype: List
        """
        return self._managed_rules

    @managed_rules.setter
    def managed_rules(self, managed_rules):
        """Sets the managed_rules of this PutManagedInsightRulesInput.


        :param managed_rules: The managed_rules of this PutManagedInsightRulesInput.
        :type managed_rules: List
        """
        if managed_rules is None:
            raise ValueError("Invalid value for `managed_rules`, must not be `None`")

        self._managed_rules = managed_rules
