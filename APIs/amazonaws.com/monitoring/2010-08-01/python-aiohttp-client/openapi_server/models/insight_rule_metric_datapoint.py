# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InsightRuleMetricDatapoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, timestamp: datetime=None, unique_contributors: float=None, max_contributor_value: float=None, sample_count: float=None, average: float=None, sum: float=None, minimum: float=None, maximum: float=None):
        """InsightRuleMetricDatapoint - a model defined in OpenAPI

        :param timestamp: The timestamp of this InsightRuleMetricDatapoint.
        :param unique_contributors: The unique_contributors of this InsightRuleMetricDatapoint.
        :param max_contributor_value: The max_contributor_value of this InsightRuleMetricDatapoint.
        :param sample_count: The sample_count of this InsightRuleMetricDatapoint.
        :param average: The average of this InsightRuleMetricDatapoint.
        :param sum: The sum of this InsightRuleMetricDatapoint.
        :param minimum: The minimum of this InsightRuleMetricDatapoint.
        :param maximum: The maximum of this InsightRuleMetricDatapoint.
        """
        self.openapi_types = {
            'timestamp': datetime,
            'unique_contributors': float,
            'max_contributor_value': float,
            'sample_count': float,
            'average': float,
            'sum': float,
            'minimum': float,
            'maximum': float
        }

        self.attribute_map = {
            'timestamp': 'Timestamp',
            'unique_contributors': 'UniqueContributors',
            'max_contributor_value': 'MaxContributorValue',
            'sample_count': 'SampleCount',
            'average': 'Average',
            'sum': 'Sum',
            'minimum': 'Minimum',
            'maximum': 'Maximum'
        }

        self._timestamp = timestamp
        self._unique_contributors = unique_contributors
        self._max_contributor_value = max_contributor_value
        self._sample_count = sample_count
        self._average = average
        self._sum = sum
        self._minimum = minimum
        self._maximum = maximum

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InsightRuleMetricDatapoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InsightRuleMetricDatapoint of this InsightRuleMetricDatapoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timestamp(self):
        """Gets the timestamp of this InsightRuleMetricDatapoint.


        :return: The timestamp of this InsightRuleMetricDatapoint.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this InsightRuleMetricDatapoint.


        :param timestamp: The timestamp of this InsightRuleMetricDatapoint.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def unique_contributors(self):
        """Gets the unique_contributors of this InsightRuleMetricDatapoint.


        :return: The unique_contributors of this InsightRuleMetricDatapoint.
        :rtype: float
        """
        return self._unique_contributors

    @unique_contributors.setter
    def unique_contributors(self, unique_contributors):
        """Sets the unique_contributors of this InsightRuleMetricDatapoint.


        :param unique_contributors: The unique_contributors of this InsightRuleMetricDatapoint.
        :type unique_contributors: float
        """

        self._unique_contributors = unique_contributors

    @property
    def max_contributor_value(self):
        """Gets the max_contributor_value of this InsightRuleMetricDatapoint.


        :return: The max_contributor_value of this InsightRuleMetricDatapoint.
        :rtype: float
        """
        return self._max_contributor_value

    @max_contributor_value.setter
    def max_contributor_value(self, max_contributor_value):
        """Sets the max_contributor_value of this InsightRuleMetricDatapoint.


        :param max_contributor_value: The max_contributor_value of this InsightRuleMetricDatapoint.
        :type max_contributor_value: float
        """

        self._max_contributor_value = max_contributor_value

    @property
    def sample_count(self):
        """Gets the sample_count of this InsightRuleMetricDatapoint.


        :return: The sample_count of this InsightRuleMetricDatapoint.
        :rtype: float
        """
        return self._sample_count

    @sample_count.setter
    def sample_count(self, sample_count):
        """Sets the sample_count of this InsightRuleMetricDatapoint.


        :param sample_count: The sample_count of this InsightRuleMetricDatapoint.
        :type sample_count: float
        """

        self._sample_count = sample_count

    @property
    def average(self):
        """Gets the average of this InsightRuleMetricDatapoint.


        :return: The average of this InsightRuleMetricDatapoint.
        :rtype: float
        """
        return self._average

    @average.setter
    def average(self, average):
        """Sets the average of this InsightRuleMetricDatapoint.


        :param average: The average of this InsightRuleMetricDatapoint.
        :type average: float
        """

        self._average = average

    @property
    def sum(self):
        """Gets the sum of this InsightRuleMetricDatapoint.


        :return: The sum of this InsightRuleMetricDatapoint.
        :rtype: float
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """Sets the sum of this InsightRuleMetricDatapoint.


        :param sum: The sum of this InsightRuleMetricDatapoint.
        :type sum: float
        """

        self._sum = sum

    @property
    def minimum(self):
        """Gets the minimum of this InsightRuleMetricDatapoint.


        :return: The minimum of this InsightRuleMetricDatapoint.
        :rtype: float
        """
        return self._minimum

    @minimum.setter
    def minimum(self, minimum):
        """Sets the minimum of this InsightRuleMetricDatapoint.


        :param minimum: The minimum of this InsightRuleMetricDatapoint.
        :type minimum: float
        """

        self._minimum = minimum

    @property
    def maximum(self):
        """Gets the maximum of this InsightRuleMetricDatapoint.


        :return: The maximum of this InsightRuleMetricDatapoint.
        :rtype: float
        """
        return self._maximum

    @maximum.setter
    def maximum(self, maximum):
        """Sets the maximum of this InsightRuleMetricDatapoint.


        :param maximum: The maximum of this InsightRuleMetricDatapoint.
        :type maximum: float
        """

        self._maximum = maximum
