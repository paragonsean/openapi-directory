# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutMetricDataInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, namespace: str=None, metric_data: List=None):
        """PutMetricDataInput - a model defined in OpenAPI

        :param namespace: The namespace of this PutMetricDataInput.
        :param metric_data: The metric_data of this PutMetricDataInput.
        """
        self.openapi_types = {
            'namespace': str,
            'metric_data': List
        }

        self.attribute_map = {
            'namespace': 'Namespace',
            'metric_data': 'MetricData'
        }

        self._namespace = namespace
        self._metric_data = metric_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutMetricDataInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutMetricDataInput of this PutMetricDataInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def namespace(self):
        """Gets the namespace of this PutMetricDataInput.


        :return: The namespace of this PutMetricDataInput.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this PutMetricDataInput.


        :param namespace: The namespace of this PutMetricDataInput.
        :type namespace: str
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")

        self._namespace = namespace

    @property
    def metric_data(self):
        """Gets the metric_data of this PutMetricDataInput.


        :return: The metric_data of this PutMetricDataInput.
        :rtype: List
        """
        return self._metric_data

    @metric_data.setter
    def metric_data(self, metric_data):
        """Sets the metric_data of this PutMetricDataInput.


        :param metric_data: The metric_data of this PutMetricDataInput.
        :type metric_data: List
        """
        if metric_data is None:
            raise ValueError("Invalid value for `metric_data`, must not be `None`")

        self._metric_data = metric_data
