# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.anomaly_detector_configuration import AnomalyDetectorConfiguration
from openapi_server.models.anomaly_detector_metric_math_anomaly_detector import AnomalyDetectorMetricMathAnomalyDetector
from openapi_server.models.anomaly_detector_single_metric_anomaly_detector import AnomalyDetectorSingleMetricAnomalyDetector
from openapi_server.models.anomaly_detector_state_value import AnomalyDetectorStateValue
from openapi_server import util


class AnomalyDetector(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, namespace: str=None, metric_name: str=None, dimensions: List=None, stat: str=None, configuration: AnomalyDetectorConfiguration=None, state_value: AnomalyDetectorStateValue=None, single_metric_anomaly_detector: AnomalyDetectorSingleMetricAnomalyDetector=None, metric_math_anomaly_detector: AnomalyDetectorMetricMathAnomalyDetector=None):
        """AnomalyDetector - a model defined in OpenAPI

        :param namespace: The namespace of this AnomalyDetector.
        :param metric_name: The metric_name of this AnomalyDetector.
        :param dimensions: The dimensions of this AnomalyDetector.
        :param stat: The stat of this AnomalyDetector.
        :param configuration: The configuration of this AnomalyDetector.
        :param state_value: The state_value of this AnomalyDetector.
        :param single_metric_anomaly_detector: The single_metric_anomaly_detector of this AnomalyDetector.
        :param metric_math_anomaly_detector: The metric_math_anomaly_detector of this AnomalyDetector.
        """
        self.openapi_types = {
            'namespace': str,
            'metric_name': str,
            'dimensions': List,
            'stat': str,
            'configuration': AnomalyDetectorConfiguration,
            'state_value': AnomalyDetectorStateValue,
            'single_metric_anomaly_detector': AnomalyDetectorSingleMetricAnomalyDetector,
            'metric_math_anomaly_detector': AnomalyDetectorMetricMathAnomalyDetector
        }

        self.attribute_map = {
            'namespace': 'Namespace',
            'metric_name': 'MetricName',
            'dimensions': 'Dimensions',
            'stat': 'Stat',
            'configuration': 'Configuration',
            'state_value': 'StateValue',
            'single_metric_anomaly_detector': 'SingleMetricAnomalyDetector',
            'metric_math_anomaly_detector': 'MetricMathAnomalyDetector'
        }

        self._namespace = namespace
        self._metric_name = metric_name
        self._dimensions = dimensions
        self._stat = stat
        self._configuration = configuration
        self._state_value = state_value
        self._single_metric_anomaly_detector = single_metric_anomaly_detector
        self._metric_math_anomaly_detector = metric_math_anomaly_detector

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnomalyDetector':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnomalyDetector of this AnomalyDetector.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def namespace(self):
        """Gets the namespace of this AnomalyDetector.


        :return: The namespace of this AnomalyDetector.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this AnomalyDetector.


        :param namespace: The namespace of this AnomalyDetector.
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def metric_name(self):
        """Gets the metric_name of this AnomalyDetector.


        :return: The metric_name of this AnomalyDetector.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this AnomalyDetector.


        :param metric_name: The metric_name of this AnomalyDetector.
        :type metric_name: str
        """

        self._metric_name = metric_name

    @property
    def dimensions(self):
        """Gets the dimensions of this AnomalyDetector.


        :return: The dimensions of this AnomalyDetector.
        :rtype: List
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this AnomalyDetector.


        :param dimensions: The dimensions of this AnomalyDetector.
        :type dimensions: List
        """

        self._dimensions = dimensions

    @property
    def stat(self):
        """Gets the stat of this AnomalyDetector.


        :return: The stat of this AnomalyDetector.
        :rtype: str
        """
        return self._stat

    @stat.setter
    def stat(self, stat):
        """Sets the stat of this AnomalyDetector.


        :param stat: The stat of this AnomalyDetector.
        :type stat: str
        """

        self._stat = stat

    @property
    def configuration(self):
        """Gets the configuration of this AnomalyDetector.


        :return: The configuration of this AnomalyDetector.
        :rtype: AnomalyDetectorConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this AnomalyDetector.


        :param configuration: The configuration of this AnomalyDetector.
        :type configuration: AnomalyDetectorConfiguration
        """

        self._configuration = configuration

    @property
    def state_value(self):
        """Gets the state_value of this AnomalyDetector.


        :return: The state_value of this AnomalyDetector.
        :rtype: AnomalyDetectorStateValue
        """
        return self._state_value

    @state_value.setter
    def state_value(self, state_value):
        """Sets the state_value of this AnomalyDetector.


        :param state_value: The state_value of this AnomalyDetector.
        :type state_value: AnomalyDetectorStateValue
        """

        self._state_value = state_value

    @property
    def single_metric_anomaly_detector(self):
        """Gets the single_metric_anomaly_detector of this AnomalyDetector.


        :return: The single_metric_anomaly_detector of this AnomalyDetector.
        :rtype: AnomalyDetectorSingleMetricAnomalyDetector
        """
        return self._single_metric_anomaly_detector

    @single_metric_anomaly_detector.setter
    def single_metric_anomaly_detector(self, single_metric_anomaly_detector):
        """Sets the single_metric_anomaly_detector of this AnomalyDetector.


        :param single_metric_anomaly_detector: The single_metric_anomaly_detector of this AnomalyDetector.
        :type single_metric_anomaly_detector: AnomalyDetectorSingleMetricAnomalyDetector
        """

        self._single_metric_anomaly_detector = single_metric_anomaly_detector

    @property
    def metric_math_anomaly_detector(self):
        """Gets the metric_math_anomaly_detector of this AnomalyDetector.


        :return: The metric_math_anomaly_detector of this AnomalyDetector.
        :rtype: AnomalyDetectorMetricMathAnomalyDetector
        """
        return self._metric_math_anomaly_detector

    @metric_math_anomaly_detector.setter
    def metric_math_anomaly_detector(self, metric_math_anomaly_detector):
        """Sets the metric_math_anomaly_detector of this AnomalyDetector.


        :param metric_math_anomaly_detector: The metric_math_anomaly_detector of this AnomalyDetector.
        :type metric_math_anomaly_detector: AnomalyDetectorMetricMathAnomalyDetector
        """

        self._metric_math_anomaly_detector = metric_math_anomaly_detector
