# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recently_active import RecentlyActive
from openapi_server import util


class ListMetricsInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, namespace: str=None, metric_name: str=None, dimensions: List=None, next_token: str=None, recently_active: RecentlyActive=None, include_linked_accounts: bool=None, owning_account: str=None):
        """ListMetricsInput - a model defined in OpenAPI

        :param namespace: The namespace of this ListMetricsInput.
        :param metric_name: The metric_name of this ListMetricsInput.
        :param dimensions: The dimensions of this ListMetricsInput.
        :param next_token: The next_token of this ListMetricsInput.
        :param recently_active: The recently_active of this ListMetricsInput.
        :param include_linked_accounts: The include_linked_accounts of this ListMetricsInput.
        :param owning_account: The owning_account of this ListMetricsInput.
        """
        self.openapi_types = {
            'namespace': str,
            'metric_name': str,
            'dimensions': List,
            'next_token': str,
            'recently_active': RecentlyActive,
            'include_linked_accounts': bool,
            'owning_account': str
        }

        self.attribute_map = {
            'namespace': 'Namespace',
            'metric_name': 'MetricName',
            'dimensions': 'Dimensions',
            'next_token': 'NextToken',
            'recently_active': 'RecentlyActive',
            'include_linked_accounts': 'IncludeLinkedAccounts',
            'owning_account': 'OwningAccount'
        }

        self._namespace = namespace
        self._metric_name = metric_name
        self._dimensions = dimensions
        self._next_token = next_token
        self._recently_active = recently_active
        self._include_linked_accounts = include_linked_accounts
        self._owning_account = owning_account

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListMetricsInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListMetricsInput of this ListMetricsInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def namespace(self):
        """Gets the namespace of this ListMetricsInput.


        :return: The namespace of this ListMetricsInput.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this ListMetricsInput.


        :param namespace: The namespace of this ListMetricsInput.
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def metric_name(self):
        """Gets the metric_name of this ListMetricsInput.


        :return: The metric_name of this ListMetricsInput.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this ListMetricsInput.


        :param metric_name: The metric_name of this ListMetricsInput.
        :type metric_name: str
        """

        self._metric_name = metric_name

    @property
    def dimensions(self):
        """Gets the dimensions of this ListMetricsInput.


        :return: The dimensions of this ListMetricsInput.
        :rtype: List
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this ListMetricsInput.


        :param dimensions: The dimensions of this ListMetricsInput.
        :type dimensions: List
        """

        self._dimensions = dimensions

    @property
    def next_token(self):
        """Gets the next_token of this ListMetricsInput.


        :return: The next_token of this ListMetricsInput.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListMetricsInput.


        :param next_token: The next_token of this ListMetricsInput.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def recently_active(self):
        """Gets the recently_active of this ListMetricsInput.


        :return: The recently_active of this ListMetricsInput.
        :rtype: RecentlyActive
        """
        return self._recently_active

    @recently_active.setter
    def recently_active(self, recently_active):
        """Sets the recently_active of this ListMetricsInput.


        :param recently_active: The recently_active of this ListMetricsInput.
        :type recently_active: RecentlyActive
        """

        self._recently_active = recently_active

    @property
    def include_linked_accounts(self):
        """Gets the include_linked_accounts of this ListMetricsInput.


        :return: The include_linked_accounts of this ListMetricsInput.
        :rtype: bool
        """
        return self._include_linked_accounts

    @include_linked_accounts.setter
    def include_linked_accounts(self, include_linked_accounts):
        """Sets the include_linked_accounts of this ListMetricsInput.


        :param include_linked_accounts: The include_linked_accounts of this ListMetricsInput.
        :type include_linked_accounts: bool
        """

        self._include_linked_accounts = include_linked_accounts

    @property
    def owning_account(self):
        """Gets the owning_account of this ListMetricsInput.


        :return: The owning_account of this ListMetricsInput.
        :rtype: str
        """
        return self._owning_account

    @owning_account.setter
    def owning_account(self, owning_account):
        """Sets the owning_account of this ListMetricsInput.


        :param owning_account: The owning_account of this ListMetricsInput.
        :type owning_account: str
        """

        self._owning_account = owning_account
