# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_metric_data_input_label_options import GetMetricDataInputLabelOptions
from openapi_server.models.scan_by import ScanBy
from openapi_server import util


class GetMetricDataInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metric_data_queries: List=None, start_time: datetime=None, end_time: datetime=None, next_token: str=None, scan_by: ScanBy=None, max_datapoints: int=None, label_options: GetMetricDataInputLabelOptions=None):
        """GetMetricDataInput - a model defined in OpenAPI

        :param metric_data_queries: The metric_data_queries of this GetMetricDataInput.
        :param start_time: The start_time of this GetMetricDataInput.
        :param end_time: The end_time of this GetMetricDataInput.
        :param next_token: The next_token of this GetMetricDataInput.
        :param scan_by: The scan_by of this GetMetricDataInput.
        :param max_datapoints: The max_datapoints of this GetMetricDataInput.
        :param label_options: The label_options of this GetMetricDataInput.
        """
        self.openapi_types = {
            'metric_data_queries': List,
            'start_time': datetime,
            'end_time': datetime,
            'next_token': str,
            'scan_by': ScanBy,
            'max_datapoints': int,
            'label_options': GetMetricDataInputLabelOptions
        }

        self.attribute_map = {
            'metric_data_queries': 'MetricDataQueries',
            'start_time': 'StartTime',
            'end_time': 'EndTime',
            'next_token': 'NextToken',
            'scan_by': 'ScanBy',
            'max_datapoints': 'MaxDatapoints',
            'label_options': 'LabelOptions'
        }

        self._metric_data_queries = metric_data_queries
        self._start_time = start_time
        self._end_time = end_time
        self._next_token = next_token
        self._scan_by = scan_by
        self._max_datapoints = max_datapoints
        self._label_options = label_options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetMetricDataInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetMetricDataInput of this GetMetricDataInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metric_data_queries(self):
        """Gets the metric_data_queries of this GetMetricDataInput.


        :return: The metric_data_queries of this GetMetricDataInput.
        :rtype: List
        """
        return self._metric_data_queries

    @metric_data_queries.setter
    def metric_data_queries(self, metric_data_queries):
        """Sets the metric_data_queries of this GetMetricDataInput.


        :param metric_data_queries: The metric_data_queries of this GetMetricDataInput.
        :type metric_data_queries: List
        """
        if metric_data_queries is None:
            raise ValueError("Invalid value for `metric_data_queries`, must not be `None`")

        self._metric_data_queries = metric_data_queries

    @property
    def start_time(self):
        """Gets the start_time of this GetMetricDataInput.


        :return: The start_time of this GetMetricDataInput.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GetMetricDataInput.


        :param start_time: The start_time of this GetMetricDataInput.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this GetMetricDataInput.


        :return: The end_time of this GetMetricDataInput.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this GetMetricDataInput.


        :param end_time: The end_time of this GetMetricDataInput.
        :type end_time: datetime
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")

        self._end_time = end_time

    @property
    def next_token(self):
        """Gets the next_token of this GetMetricDataInput.


        :return: The next_token of this GetMetricDataInput.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this GetMetricDataInput.


        :param next_token: The next_token of this GetMetricDataInput.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def scan_by(self):
        """Gets the scan_by of this GetMetricDataInput.


        :return: The scan_by of this GetMetricDataInput.
        :rtype: ScanBy
        """
        return self._scan_by

    @scan_by.setter
    def scan_by(self, scan_by):
        """Sets the scan_by of this GetMetricDataInput.


        :param scan_by: The scan_by of this GetMetricDataInput.
        :type scan_by: ScanBy
        """

        self._scan_by = scan_by

    @property
    def max_datapoints(self):
        """Gets the max_datapoints of this GetMetricDataInput.


        :return: The max_datapoints of this GetMetricDataInput.
        :rtype: int
        """
        return self._max_datapoints

    @max_datapoints.setter
    def max_datapoints(self, max_datapoints):
        """Sets the max_datapoints of this GetMetricDataInput.


        :param max_datapoints: The max_datapoints of this GetMetricDataInput.
        :type max_datapoints: int
        """

        self._max_datapoints = max_datapoints

    @property
    def label_options(self):
        """Gets the label_options of this GetMetricDataInput.


        :return: The label_options of this GetMetricDataInput.
        :rtype: GetMetricDataInputLabelOptions
        """
        return self._label_options

    @label_options.setter
    def label_options(self, label_options):
        """Sets the label_options of this GetMetricDataInput.


        :param label_options: The label_options of this GetMetricDataInput.
        :type label_options: GetMetricDataInputLabelOptions
        """

        self._label_options = label_options
