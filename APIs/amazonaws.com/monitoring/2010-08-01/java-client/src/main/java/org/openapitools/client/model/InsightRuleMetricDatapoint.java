/*
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;One data point from the metric time series returned in a Contributor Insights rule report.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetInsightRuleReport.html\&quot;&gt;GetInsightRuleReport&lt;/a&gt;.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:23.972078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InsightRuleMetricDatapoint {
  public static final String SERIALIZED_NAME_TIMESTAMP = "Timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_UNIQUE_CONTRIBUTORS = "UniqueContributors";
  @SerializedName(SERIALIZED_NAME_UNIQUE_CONTRIBUTORS)
  private Double uniqueContributors;

  public static final String SERIALIZED_NAME_MAX_CONTRIBUTOR_VALUE = "MaxContributorValue";
  @SerializedName(SERIALIZED_NAME_MAX_CONTRIBUTOR_VALUE)
  private Double maxContributorValue;

  public static final String SERIALIZED_NAME_SAMPLE_COUNT = "SampleCount";
  @SerializedName(SERIALIZED_NAME_SAMPLE_COUNT)
  private Double sampleCount;

  public static final String SERIALIZED_NAME_AVERAGE = "Average";
  @SerializedName(SERIALIZED_NAME_AVERAGE)
  private Double average;

  public static final String SERIALIZED_NAME_SUM = "Sum";
  @SerializedName(SERIALIZED_NAME_SUM)
  private Double sum;

  public static final String SERIALIZED_NAME_MINIMUM = "Minimum";
  @SerializedName(SERIALIZED_NAME_MINIMUM)
  private Double minimum;

  public static final String SERIALIZED_NAME_MAXIMUM = "Maximum";
  @SerializedName(SERIALIZED_NAME_MAXIMUM)
  private Double maximum;

  public InsightRuleMetricDatapoint() {
  }

  public InsightRuleMetricDatapoint timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public InsightRuleMetricDatapoint uniqueContributors(Double uniqueContributors) {
    this.uniqueContributors = uniqueContributors;
    return this;
  }

  /**
   * Get uniqueContributors
   * @return uniqueContributors
   */
  @javax.annotation.Nullable
  public Double getUniqueContributors() {
    return uniqueContributors;
  }

  public void setUniqueContributors(Double uniqueContributors) {
    this.uniqueContributors = uniqueContributors;
  }


  public InsightRuleMetricDatapoint maxContributorValue(Double maxContributorValue) {
    this.maxContributorValue = maxContributorValue;
    return this;
  }

  /**
   * Get maxContributorValue
   * @return maxContributorValue
   */
  @javax.annotation.Nullable
  public Double getMaxContributorValue() {
    return maxContributorValue;
  }

  public void setMaxContributorValue(Double maxContributorValue) {
    this.maxContributorValue = maxContributorValue;
  }


  public InsightRuleMetricDatapoint sampleCount(Double sampleCount) {
    this.sampleCount = sampleCount;
    return this;
  }

  /**
   * Get sampleCount
   * @return sampleCount
   */
  @javax.annotation.Nullable
  public Double getSampleCount() {
    return sampleCount;
  }

  public void setSampleCount(Double sampleCount) {
    this.sampleCount = sampleCount;
  }


  public InsightRuleMetricDatapoint average(Double average) {
    this.average = average;
    return this;
  }

  /**
   * Get average
   * @return average
   */
  @javax.annotation.Nullable
  public Double getAverage() {
    return average;
  }

  public void setAverage(Double average) {
    this.average = average;
  }


  public InsightRuleMetricDatapoint sum(Double sum) {
    this.sum = sum;
    return this;
  }

  /**
   * Get sum
   * @return sum
   */
  @javax.annotation.Nullable
  public Double getSum() {
    return sum;
  }

  public void setSum(Double sum) {
    this.sum = sum;
  }


  public InsightRuleMetricDatapoint minimum(Double minimum) {
    this.minimum = minimum;
    return this;
  }

  /**
   * Get minimum
   * @return minimum
   */
  @javax.annotation.Nullable
  public Double getMinimum() {
    return minimum;
  }

  public void setMinimum(Double minimum) {
    this.minimum = minimum;
  }


  public InsightRuleMetricDatapoint maximum(Double maximum) {
    this.maximum = maximum;
    return this;
  }

  /**
   * Get maximum
   * @return maximum
   */
  @javax.annotation.Nullable
  public Double getMaximum() {
    return maximum;
  }

  public void setMaximum(Double maximum) {
    this.maximum = maximum;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InsightRuleMetricDatapoint insightRuleMetricDatapoint = (InsightRuleMetricDatapoint) o;
    return Objects.equals(this.timestamp, insightRuleMetricDatapoint.timestamp) &&
        Objects.equals(this.uniqueContributors, insightRuleMetricDatapoint.uniqueContributors) &&
        Objects.equals(this.maxContributorValue, insightRuleMetricDatapoint.maxContributorValue) &&
        Objects.equals(this.sampleCount, insightRuleMetricDatapoint.sampleCount) &&
        Objects.equals(this.average, insightRuleMetricDatapoint.average) &&
        Objects.equals(this.sum, insightRuleMetricDatapoint.sum) &&
        Objects.equals(this.minimum, insightRuleMetricDatapoint.minimum) &&
        Objects.equals(this.maximum, insightRuleMetricDatapoint.maximum);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timestamp, uniqueContributors, maxContributorValue, sampleCount, average, sum, minimum, maximum);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InsightRuleMetricDatapoint {\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    uniqueContributors: ").append(toIndentedString(uniqueContributors)).append("\n");
    sb.append("    maxContributorValue: ").append(toIndentedString(maxContributorValue)).append("\n");
    sb.append("    sampleCount: ").append(toIndentedString(sampleCount)).append("\n");
    sb.append("    average: ").append(toIndentedString(average)).append("\n");
    sb.append("    sum: ").append(toIndentedString(sum)).append("\n");
    sb.append("    minimum: ").append(toIndentedString(minimum)).append("\n");
    sb.append("    maximum: ").append(toIndentedString(maximum)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Timestamp");
    openapiFields.add("UniqueContributors");
    openapiFields.add("MaxContributorValue");
    openapiFields.add("SampleCount");
    openapiFields.add("Average");
    openapiFields.add("Sum");
    openapiFields.add("Minimum");
    openapiFields.add("Maximum");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Timestamp");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InsightRuleMetricDatapoint
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InsightRuleMetricDatapoint.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InsightRuleMetricDatapoint is not found in the empty JSON string", InsightRuleMetricDatapoint.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InsightRuleMetricDatapoint.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InsightRuleMetricDatapoint` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InsightRuleMetricDatapoint.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Timestamp`
      OffsetDateTime.validateJsonElement(jsonObj.get("Timestamp"));
      // validate the optional field `UniqueContributors`
      if (jsonObj.get("UniqueContributors") != null && !jsonObj.get("UniqueContributors").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("UniqueContributors"));
      }
      // validate the optional field `MaxContributorValue`
      if (jsonObj.get("MaxContributorValue") != null && !jsonObj.get("MaxContributorValue").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("MaxContributorValue"));
      }
      // validate the optional field `SampleCount`
      if (jsonObj.get("SampleCount") != null && !jsonObj.get("SampleCount").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("SampleCount"));
      }
      // validate the optional field `Average`
      if (jsonObj.get("Average") != null && !jsonObj.get("Average").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Average"));
      }
      // validate the optional field `Sum`
      if (jsonObj.get("Sum") != null && !jsonObj.get("Sum").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Sum"));
      }
      // validate the optional field `Minimum`
      if (jsonObj.get("Minimum") != null && !jsonObj.get("Minimum").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Minimum"));
      }
      // validate the optional field `Maximum`
      if (jsonObj.get("Maximum") != null && !jsonObj.get("Maximum").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Maximum"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InsightRuleMetricDatapoint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InsightRuleMetricDatapoint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InsightRuleMetricDatapoint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InsightRuleMetricDatapoint.class));

       return (TypeAdapter<T>) new TypeAdapter<InsightRuleMetricDatapoint>() {
           @Override
           public void write(JsonWriter out, InsightRuleMetricDatapoint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InsightRuleMetricDatapoint read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InsightRuleMetricDatapoint given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InsightRuleMetricDatapoint
   * @throws IOException if the JSON string is invalid with respect to InsightRuleMetricDatapoint
   */
  public static InsightRuleMetricDatapoint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InsightRuleMetricDatapoint.class);
  }

  /**
   * Convert an instance of InsightRuleMetricDatapoint to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

