/*
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ActionsSuppressedBy;
import org.openapitools.client.model.StateValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The details about a composite alarm.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:23.972078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CompositeAlarm {
  public static final String SERIALIZED_NAME_ACTIONS_ENABLED = "ActionsEnabled";
  @SerializedName(SERIALIZED_NAME_ACTIONS_ENABLED)
  private Boolean actionsEnabled;

  public static final String SERIALIZED_NAME_ALARM_ACTIONS = "AlarmActions";
  @SerializedName(SERIALIZED_NAME_ALARM_ACTIONS)
  private List alarmActions;

  public static final String SERIALIZED_NAME_ALARM_ARN = "AlarmArn";
  @SerializedName(SERIALIZED_NAME_ALARM_ARN)
  private String alarmArn;

  public static final String SERIALIZED_NAME_ALARM_CONFIGURATION_UPDATED_TIMESTAMP = "AlarmConfigurationUpdatedTimestamp";
  @SerializedName(SERIALIZED_NAME_ALARM_CONFIGURATION_UPDATED_TIMESTAMP)
  private OffsetDateTime alarmConfigurationUpdatedTimestamp;

  public static final String SERIALIZED_NAME_ALARM_DESCRIPTION = "AlarmDescription";
  @SerializedName(SERIALIZED_NAME_ALARM_DESCRIPTION)
  private String alarmDescription;

  public static final String SERIALIZED_NAME_ALARM_NAME = "AlarmName";
  @SerializedName(SERIALIZED_NAME_ALARM_NAME)
  private String alarmName;

  public static final String SERIALIZED_NAME_ALARM_RULE = "AlarmRule";
  @SerializedName(SERIALIZED_NAME_ALARM_RULE)
  private String alarmRule;

  public static final String SERIALIZED_NAME_INSUFFICIENT_DATA_ACTIONS = "InsufficientDataActions";
  @SerializedName(SERIALIZED_NAME_INSUFFICIENT_DATA_ACTIONS)
  private List insufficientDataActions;

  public static final String SERIALIZED_NAME_OK_ACTIONS = "OKActions";
  @SerializedName(SERIALIZED_NAME_OK_ACTIONS)
  private List okActions;

  public static final String SERIALIZED_NAME_STATE_REASON = "StateReason";
  @SerializedName(SERIALIZED_NAME_STATE_REASON)
  private String stateReason;

  public static final String SERIALIZED_NAME_STATE_REASON_DATA = "StateReasonData";
  @SerializedName(SERIALIZED_NAME_STATE_REASON_DATA)
  private String stateReasonData;

  public static final String SERIALIZED_NAME_STATE_UPDATED_TIMESTAMP = "StateUpdatedTimestamp";
  @SerializedName(SERIALIZED_NAME_STATE_UPDATED_TIMESTAMP)
  private OffsetDateTime stateUpdatedTimestamp;

  public static final String SERIALIZED_NAME_STATE_VALUE = "StateValue";
  @SerializedName(SERIALIZED_NAME_STATE_VALUE)
  private StateValue stateValue;

  public static final String SERIALIZED_NAME_STATE_TRANSITIONED_TIMESTAMP = "StateTransitionedTimestamp";
  @SerializedName(SERIALIZED_NAME_STATE_TRANSITIONED_TIMESTAMP)
  private OffsetDateTime stateTransitionedTimestamp;

  public static final String SERIALIZED_NAME_ACTIONS_SUPPRESSED_BY = "ActionsSuppressedBy";
  @SerializedName(SERIALIZED_NAME_ACTIONS_SUPPRESSED_BY)
  private ActionsSuppressedBy actionsSuppressedBy;

  public static final String SERIALIZED_NAME_ACTIONS_SUPPRESSED_REASON = "ActionsSuppressedReason";
  @SerializedName(SERIALIZED_NAME_ACTIONS_SUPPRESSED_REASON)
  private String actionsSuppressedReason;

  public static final String SERIALIZED_NAME_ACTIONS_SUPPRESSOR = "ActionsSuppressor";
  @SerializedName(SERIALIZED_NAME_ACTIONS_SUPPRESSOR)
  private String actionsSuppressor;

  public static final String SERIALIZED_NAME_ACTIONS_SUPPRESSOR_WAIT_PERIOD = "ActionsSuppressorWaitPeriod";
  @SerializedName(SERIALIZED_NAME_ACTIONS_SUPPRESSOR_WAIT_PERIOD)
  private Integer actionsSuppressorWaitPeriod;

  public static final String SERIALIZED_NAME_ACTIONS_SUPPRESSOR_EXTENSION_PERIOD = "ActionsSuppressorExtensionPeriod";
  @SerializedName(SERIALIZED_NAME_ACTIONS_SUPPRESSOR_EXTENSION_PERIOD)
  private Integer actionsSuppressorExtensionPeriod;

  public CompositeAlarm() {
  }

  public CompositeAlarm actionsEnabled(Boolean actionsEnabled) {
    this.actionsEnabled = actionsEnabled;
    return this;
  }

  /**
   * Get actionsEnabled
   * @return actionsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getActionsEnabled() {
    return actionsEnabled;
  }

  public void setActionsEnabled(Boolean actionsEnabled) {
    this.actionsEnabled = actionsEnabled;
  }


  public CompositeAlarm alarmActions(List alarmActions) {
    this.alarmActions = alarmActions;
    return this;
  }

  /**
   * Get alarmActions
   * @return alarmActions
   */
  @javax.annotation.Nullable
  public List getAlarmActions() {
    return alarmActions;
  }

  public void setAlarmActions(List alarmActions) {
    this.alarmActions = alarmActions;
  }


  public CompositeAlarm alarmArn(String alarmArn) {
    this.alarmArn = alarmArn;
    return this;
  }

  /**
   * Get alarmArn
   * @return alarmArn
   */
  @javax.annotation.Nullable
  public String getAlarmArn() {
    return alarmArn;
  }

  public void setAlarmArn(String alarmArn) {
    this.alarmArn = alarmArn;
  }


  public CompositeAlarm alarmConfigurationUpdatedTimestamp(OffsetDateTime alarmConfigurationUpdatedTimestamp) {
    this.alarmConfigurationUpdatedTimestamp = alarmConfigurationUpdatedTimestamp;
    return this;
  }

  /**
   * Get alarmConfigurationUpdatedTimestamp
   * @return alarmConfigurationUpdatedTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAlarmConfigurationUpdatedTimestamp() {
    return alarmConfigurationUpdatedTimestamp;
  }

  public void setAlarmConfigurationUpdatedTimestamp(OffsetDateTime alarmConfigurationUpdatedTimestamp) {
    this.alarmConfigurationUpdatedTimestamp = alarmConfigurationUpdatedTimestamp;
  }


  public CompositeAlarm alarmDescription(String alarmDescription) {
    this.alarmDescription = alarmDescription;
    return this;
  }

  /**
   * Get alarmDescription
   * @return alarmDescription
   */
  @javax.annotation.Nullable
  public String getAlarmDescription() {
    return alarmDescription;
  }

  public void setAlarmDescription(String alarmDescription) {
    this.alarmDescription = alarmDescription;
  }


  public CompositeAlarm alarmName(String alarmName) {
    this.alarmName = alarmName;
    return this;
  }

  /**
   * Get alarmName
   * @return alarmName
   */
  @javax.annotation.Nullable
  public String getAlarmName() {
    return alarmName;
  }

  public void setAlarmName(String alarmName) {
    this.alarmName = alarmName;
  }


  public CompositeAlarm alarmRule(String alarmRule) {
    this.alarmRule = alarmRule;
    return this;
  }

  /**
   * Get alarmRule
   * @return alarmRule
   */
  @javax.annotation.Nullable
  public String getAlarmRule() {
    return alarmRule;
  }

  public void setAlarmRule(String alarmRule) {
    this.alarmRule = alarmRule;
  }


  public CompositeAlarm insufficientDataActions(List insufficientDataActions) {
    this.insufficientDataActions = insufficientDataActions;
    return this;
  }

  /**
   * Get insufficientDataActions
   * @return insufficientDataActions
   */
  @javax.annotation.Nullable
  public List getInsufficientDataActions() {
    return insufficientDataActions;
  }

  public void setInsufficientDataActions(List insufficientDataActions) {
    this.insufficientDataActions = insufficientDataActions;
  }


  public CompositeAlarm okActions(List okActions) {
    this.okActions = okActions;
    return this;
  }

  /**
   * Get okActions
   * @return okActions
   */
  @javax.annotation.Nullable
  public List getOkActions() {
    return okActions;
  }

  public void setOkActions(List okActions) {
    this.okActions = okActions;
  }


  public CompositeAlarm stateReason(String stateReason) {
    this.stateReason = stateReason;
    return this;
  }

  /**
   * Get stateReason
   * @return stateReason
   */
  @javax.annotation.Nullable
  public String getStateReason() {
    return stateReason;
  }

  public void setStateReason(String stateReason) {
    this.stateReason = stateReason;
  }


  public CompositeAlarm stateReasonData(String stateReasonData) {
    this.stateReasonData = stateReasonData;
    return this;
  }

  /**
   * Get stateReasonData
   * @return stateReasonData
   */
  @javax.annotation.Nullable
  public String getStateReasonData() {
    return stateReasonData;
  }

  public void setStateReasonData(String stateReasonData) {
    this.stateReasonData = stateReasonData;
  }


  public CompositeAlarm stateUpdatedTimestamp(OffsetDateTime stateUpdatedTimestamp) {
    this.stateUpdatedTimestamp = stateUpdatedTimestamp;
    return this;
  }

  /**
   * Get stateUpdatedTimestamp
   * @return stateUpdatedTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStateUpdatedTimestamp() {
    return stateUpdatedTimestamp;
  }

  public void setStateUpdatedTimestamp(OffsetDateTime stateUpdatedTimestamp) {
    this.stateUpdatedTimestamp = stateUpdatedTimestamp;
  }


  public CompositeAlarm stateValue(StateValue stateValue) {
    this.stateValue = stateValue;
    return this;
  }

  /**
   * Get stateValue
   * @return stateValue
   */
  @javax.annotation.Nullable
  public StateValue getStateValue() {
    return stateValue;
  }

  public void setStateValue(StateValue stateValue) {
    this.stateValue = stateValue;
  }


  public CompositeAlarm stateTransitionedTimestamp(OffsetDateTime stateTransitionedTimestamp) {
    this.stateTransitionedTimestamp = stateTransitionedTimestamp;
    return this;
  }

  /**
   * Get stateTransitionedTimestamp
   * @return stateTransitionedTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStateTransitionedTimestamp() {
    return stateTransitionedTimestamp;
  }

  public void setStateTransitionedTimestamp(OffsetDateTime stateTransitionedTimestamp) {
    this.stateTransitionedTimestamp = stateTransitionedTimestamp;
  }


  public CompositeAlarm actionsSuppressedBy(ActionsSuppressedBy actionsSuppressedBy) {
    this.actionsSuppressedBy = actionsSuppressedBy;
    return this;
  }

  /**
   * Get actionsSuppressedBy
   * @return actionsSuppressedBy
   */
  @javax.annotation.Nullable
  public ActionsSuppressedBy getActionsSuppressedBy() {
    return actionsSuppressedBy;
  }

  public void setActionsSuppressedBy(ActionsSuppressedBy actionsSuppressedBy) {
    this.actionsSuppressedBy = actionsSuppressedBy;
  }


  public CompositeAlarm actionsSuppressedReason(String actionsSuppressedReason) {
    this.actionsSuppressedReason = actionsSuppressedReason;
    return this;
  }

  /**
   * Get actionsSuppressedReason
   * @return actionsSuppressedReason
   */
  @javax.annotation.Nullable
  public String getActionsSuppressedReason() {
    return actionsSuppressedReason;
  }

  public void setActionsSuppressedReason(String actionsSuppressedReason) {
    this.actionsSuppressedReason = actionsSuppressedReason;
  }


  public CompositeAlarm actionsSuppressor(String actionsSuppressor) {
    this.actionsSuppressor = actionsSuppressor;
    return this;
  }

  /**
   * Get actionsSuppressor
   * @return actionsSuppressor
   */
  @javax.annotation.Nullable
  public String getActionsSuppressor() {
    return actionsSuppressor;
  }

  public void setActionsSuppressor(String actionsSuppressor) {
    this.actionsSuppressor = actionsSuppressor;
  }


  public CompositeAlarm actionsSuppressorWaitPeriod(Integer actionsSuppressorWaitPeriod) {
    this.actionsSuppressorWaitPeriod = actionsSuppressorWaitPeriod;
    return this;
  }

  /**
   * Get actionsSuppressorWaitPeriod
   * @return actionsSuppressorWaitPeriod
   */
  @javax.annotation.Nullable
  public Integer getActionsSuppressorWaitPeriod() {
    return actionsSuppressorWaitPeriod;
  }

  public void setActionsSuppressorWaitPeriod(Integer actionsSuppressorWaitPeriod) {
    this.actionsSuppressorWaitPeriod = actionsSuppressorWaitPeriod;
  }


  public CompositeAlarm actionsSuppressorExtensionPeriod(Integer actionsSuppressorExtensionPeriod) {
    this.actionsSuppressorExtensionPeriod = actionsSuppressorExtensionPeriod;
    return this;
  }

  /**
   * Get actionsSuppressorExtensionPeriod
   * @return actionsSuppressorExtensionPeriod
   */
  @javax.annotation.Nullable
  public Integer getActionsSuppressorExtensionPeriod() {
    return actionsSuppressorExtensionPeriod;
  }

  public void setActionsSuppressorExtensionPeriod(Integer actionsSuppressorExtensionPeriod) {
    this.actionsSuppressorExtensionPeriod = actionsSuppressorExtensionPeriod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompositeAlarm compositeAlarm = (CompositeAlarm) o;
    return Objects.equals(this.actionsEnabled, compositeAlarm.actionsEnabled) &&
        Objects.equals(this.alarmActions, compositeAlarm.alarmActions) &&
        Objects.equals(this.alarmArn, compositeAlarm.alarmArn) &&
        Objects.equals(this.alarmConfigurationUpdatedTimestamp, compositeAlarm.alarmConfigurationUpdatedTimestamp) &&
        Objects.equals(this.alarmDescription, compositeAlarm.alarmDescription) &&
        Objects.equals(this.alarmName, compositeAlarm.alarmName) &&
        Objects.equals(this.alarmRule, compositeAlarm.alarmRule) &&
        Objects.equals(this.insufficientDataActions, compositeAlarm.insufficientDataActions) &&
        Objects.equals(this.okActions, compositeAlarm.okActions) &&
        Objects.equals(this.stateReason, compositeAlarm.stateReason) &&
        Objects.equals(this.stateReasonData, compositeAlarm.stateReasonData) &&
        Objects.equals(this.stateUpdatedTimestamp, compositeAlarm.stateUpdatedTimestamp) &&
        Objects.equals(this.stateValue, compositeAlarm.stateValue) &&
        Objects.equals(this.stateTransitionedTimestamp, compositeAlarm.stateTransitionedTimestamp) &&
        Objects.equals(this.actionsSuppressedBy, compositeAlarm.actionsSuppressedBy) &&
        Objects.equals(this.actionsSuppressedReason, compositeAlarm.actionsSuppressedReason) &&
        Objects.equals(this.actionsSuppressor, compositeAlarm.actionsSuppressor) &&
        Objects.equals(this.actionsSuppressorWaitPeriod, compositeAlarm.actionsSuppressorWaitPeriod) &&
        Objects.equals(this.actionsSuppressorExtensionPeriod, compositeAlarm.actionsSuppressorExtensionPeriod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionsEnabled, alarmActions, alarmArn, alarmConfigurationUpdatedTimestamp, alarmDescription, alarmName, alarmRule, insufficientDataActions, okActions, stateReason, stateReasonData, stateUpdatedTimestamp, stateValue, stateTransitionedTimestamp, actionsSuppressedBy, actionsSuppressedReason, actionsSuppressor, actionsSuppressorWaitPeriod, actionsSuppressorExtensionPeriod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompositeAlarm {\n");
    sb.append("    actionsEnabled: ").append(toIndentedString(actionsEnabled)).append("\n");
    sb.append("    alarmActions: ").append(toIndentedString(alarmActions)).append("\n");
    sb.append("    alarmArn: ").append(toIndentedString(alarmArn)).append("\n");
    sb.append("    alarmConfigurationUpdatedTimestamp: ").append(toIndentedString(alarmConfigurationUpdatedTimestamp)).append("\n");
    sb.append("    alarmDescription: ").append(toIndentedString(alarmDescription)).append("\n");
    sb.append("    alarmName: ").append(toIndentedString(alarmName)).append("\n");
    sb.append("    alarmRule: ").append(toIndentedString(alarmRule)).append("\n");
    sb.append("    insufficientDataActions: ").append(toIndentedString(insufficientDataActions)).append("\n");
    sb.append("    okActions: ").append(toIndentedString(okActions)).append("\n");
    sb.append("    stateReason: ").append(toIndentedString(stateReason)).append("\n");
    sb.append("    stateReasonData: ").append(toIndentedString(stateReasonData)).append("\n");
    sb.append("    stateUpdatedTimestamp: ").append(toIndentedString(stateUpdatedTimestamp)).append("\n");
    sb.append("    stateValue: ").append(toIndentedString(stateValue)).append("\n");
    sb.append("    stateTransitionedTimestamp: ").append(toIndentedString(stateTransitionedTimestamp)).append("\n");
    sb.append("    actionsSuppressedBy: ").append(toIndentedString(actionsSuppressedBy)).append("\n");
    sb.append("    actionsSuppressedReason: ").append(toIndentedString(actionsSuppressedReason)).append("\n");
    sb.append("    actionsSuppressor: ").append(toIndentedString(actionsSuppressor)).append("\n");
    sb.append("    actionsSuppressorWaitPeriod: ").append(toIndentedString(actionsSuppressorWaitPeriod)).append("\n");
    sb.append("    actionsSuppressorExtensionPeriod: ").append(toIndentedString(actionsSuppressorExtensionPeriod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActionsEnabled");
    openapiFields.add("AlarmActions");
    openapiFields.add("AlarmArn");
    openapiFields.add("AlarmConfigurationUpdatedTimestamp");
    openapiFields.add("AlarmDescription");
    openapiFields.add("AlarmName");
    openapiFields.add("AlarmRule");
    openapiFields.add("InsufficientDataActions");
    openapiFields.add("OKActions");
    openapiFields.add("StateReason");
    openapiFields.add("StateReasonData");
    openapiFields.add("StateUpdatedTimestamp");
    openapiFields.add("StateValue");
    openapiFields.add("StateTransitionedTimestamp");
    openapiFields.add("ActionsSuppressedBy");
    openapiFields.add("ActionsSuppressedReason");
    openapiFields.add("ActionsSuppressor");
    openapiFields.add("ActionsSuppressorWaitPeriod");
    openapiFields.add("ActionsSuppressorExtensionPeriod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CompositeAlarm
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CompositeAlarm.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompositeAlarm is not found in the empty JSON string", CompositeAlarm.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CompositeAlarm.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CompositeAlarm` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ActionsEnabled`
      if (jsonObj.get("ActionsEnabled") != null && !jsonObj.get("ActionsEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ActionsEnabled"));
      }
      // validate the optional field `AlarmActions`
      if (jsonObj.get("AlarmActions") != null && !jsonObj.get("AlarmActions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AlarmActions"));
      }
      // validate the optional field `AlarmArn`
      if (jsonObj.get("AlarmArn") != null && !jsonObj.get("AlarmArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AlarmArn"));
      }
      // validate the optional field `AlarmConfigurationUpdatedTimestamp`
      if (jsonObj.get("AlarmConfigurationUpdatedTimestamp") != null && !jsonObj.get("AlarmConfigurationUpdatedTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("AlarmConfigurationUpdatedTimestamp"));
      }
      // validate the optional field `AlarmDescription`
      if (jsonObj.get("AlarmDescription") != null && !jsonObj.get("AlarmDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AlarmDescription"));
      }
      // validate the optional field `AlarmName`
      if (jsonObj.get("AlarmName") != null && !jsonObj.get("AlarmName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AlarmName"));
      }
      // validate the optional field `AlarmRule`
      if (jsonObj.get("AlarmRule") != null && !jsonObj.get("AlarmRule").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AlarmRule"));
      }
      // validate the optional field `InsufficientDataActions`
      if (jsonObj.get("InsufficientDataActions") != null && !jsonObj.get("InsufficientDataActions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("InsufficientDataActions"));
      }
      // validate the optional field `OKActions`
      if (jsonObj.get("OKActions") != null && !jsonObj.get("OKActions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("OKActions"));
      }
      // validate the optional field `StateReason`
      if (jsonObj.get("StateReason") != null && !jsonObj.get("StateReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StateReason"));
      }
      // validate the optional field `StateReasonData`
      if (jsonObj.get("StateReasonData") != null && !jsonObj.get("StateReasonData").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StateReasonData"));
      }
      // validate the optional field `StateUpdatedTimestamp`
      if (jsonObj.get("StateUpdatedTimestamp") != null && !jsonObj.get("StateUpdatedTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StateUpdatedTimestamp"));
      }
      // validate the optional field `StateValue`
      if (jsonObj.get("StateValue") != null && !jsonObj.get("StateValue").isJsonNull()) {
        StateValue.validateJsonElement(jsonObj.get("StateValue"));
      }
      // validate the optional field `StateTransitionedTimestamp`
      if (jsonObj.get("StateTransitionedTimestamp") != null && !jsonObj.get("StateTransitionedTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StateTransitionedTimestamp"));
      }
      // validate the optional field `ActionsSuppressedBy`
      if (jsonObj.get("ActionsSuppressedBy") != null && !jsonObj.get("ActionsSuppressedBy").isJsonNull()) {
        ActionsSuppressedBy.validateJsonElement(jsonObj.get("ActionsSuppressedBy"));
      }
      // validate the optional field `ActionsSuppressedReason`
      if (jsonObj.get("ActionsSuppressedReason") != null && !jsonObj.get("ActionsSuppressedReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ActionsSuppressedReason"));
      }
      // validate the optional field `ActionsSuppressor`
      if (jsonObj.get("ActionsSuppressor") != null && !jsonObj.get("ActionsSuppressor").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ActionsSuppressor"));
      }
      // validate the optional field `ActionsSuppressorWaitPeriod`
      if (jsonObj.get("ActionsSuppressorWaitPeriod") != null && !jsonObj.get("ActionsSuppressorWaitPeriod").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ActionsSuppressorWaitPeriod"));
      }
      // validate the optional field `ActionsSuppressorExtensionPeriod`
      if (jsonObj.get("ActionsSuppressorExtensionPeriod") != null && !jsonObj.get("ActionsSuppressorExtensionPeriod").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ActionsSuppressorExtensionPeriod"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompositeAlarm.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompositeAlarm' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompositeAlarm> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompositeAlarm.class));

       return (TypeAdapter<T>) new TypeAdapter<CompositeAlarm>() {
           @Override
           public void write(JsonWriter out, CompositeAlarm value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CompositeAlarm read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CompositeAlarm given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CompositeAlarm
   * @throws IOException if the JSON string is invalid with respect to CompositeAlarm
   */
  public static CompositeAlarm fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompositeAlarm.class);
  }

  /**
   * Convert an instance of CompositeAlarm to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

