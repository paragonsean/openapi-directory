/*
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MetricStreamOutputFormat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutMetricStreamInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:23.972078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutMetricStreamInput {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_INCLUDE_FILTERS = "IncludeFilters";
  @SerializedName(SERIALIZED_NAME_INCLUDE_FILTERS)
  private List includeFilters;

  public static final String SERIALIZED_NAME_EXCLUDE_FILTERS = "ExcludeFilters";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_FILTERS)
  private List excludeFilters;

  public static final String SERIALIZED_NAME_FIREHOSE_ARN = "FirehoseArn";
  @SerializedName(SERIALIZED_NAME_FIREHOSE_ARN)
  private String firehoseArn;

  public static final String SERIALIZED_NAME_ROLE_ARN = "RoleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_OUTPUT_FORMAT = "OutputFormat";
  @SerializedName(SERIALIZED_NAME_OUTPUT_FORMAT)
  private MetricStreamOutputFormat outputFormat;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_STATISTICS_CONFIGURATIONS = "StatisticsConfigurations";
  @SerializedName(SERIALIZED_NAME_STATISTICS_CONFIGURATIONS)
  private List statisticsConfigurations;

  public static final String SERIALIZED_NAME_INCLUDE_LINKED_ACCOUNTS_METRICS = "IncludeLinkedAccountsMetrics";
  @SerializedName(SERIALIZED_NAME_INCLUDE_LINKED_ACCOUNTS_METRICS)
  private Boolean includeLinkedAccountsMetrics;

  public PutMetricStreamInput() {
  }

  public PutMetricStreamInput name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PutMetricStreamInput includeFilters(List includeFilters) {
    this.includeFilters = includeFilters;
    return this;
  }

  /**
   * Get includeFilters
   * @return includeFilters
   */
  @javax.annotation.Nullable
  public List getIncludeFilters() {
    return includeFilters;
  }

  public void setIncludeFilters(List includeFilters) {
    this.includeFilters = includeFilters;
  }


  public PutMetricStreamInput excludeFilters(List excludeFilters) {
    this.excludeFilters = excludeFilters;
    return this;
  }

  /**
   * Get excludeFilters
   * @return excludeFilters
   */
  @javax.annotation.Nullable
  public List getExcludeFilters() {
    return excludeFilters;
  }

  public void setExcludeFilters(List excludeFilters) {
    this.excludeFilters = excludeFilters;
  }


  public PutMetricStreamInput firehoseArn(String firehoseArn) {
    this.firehoseArn = firehoseArn;
    return this;
  }

  /**
   * Get firehoseArn
   * @return firehoseArn
   */
  @javax.annotation.Nonnull
  public String getFirehoseArn() {
    return firehoseArn;
  }

  public void setFirehoseArn(String firehoseArn) {
    this.firehoseArn = firehoseArn;
  }


  public PutMetricStreamInput roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * Get roleArn
   * @return roleArn
   */
  @javax.annotation.Nonnull
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public PutMetricStreamInput outputFormat(MetricStreamOutputFormat outputFormat) {
    this.outputFormat = outputFormat;
    return this;
  }

  /**
   * Get outputFormat
   * @return outputFormat
   */
  @javax.annotation.Nonnull
  public MetricStreamOutputFormat getOutputFormat() {
    return outputFormat;
  }

  public void setOutputFormat(MetricStreamOutputFormat outputFormat) {
    this.outputFormat = outputFormat;
  }


  public PutMetricStreamInput tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public PutMetricStreamInput statisticsConfigurations(List statisticsConfigurations) {
    this.statisticsConfigurations = statisticsConfigurations;
    return this;
  }

  /**
   * Get statisticsConfigurations
   * @return statisticsConfigurations
   */
  @javax.annotation.Nullable
  public List getStatisticsConfigurations() {
    return statisticsConfigurations;
  }

  public void setStatisticsConfigurations(List statisticsConfigurations) {
    this.statisticsConfigurations = statisticsConfigurations;
  }


  public PutMetricStreamInput includeLinkedAccountsMetrics(Boolean includeLinkedAccountsMetrics) {
    this.includeLinkedAccountsMetrics = includeLinkedAccountsMetrics;
    return this;
  }

  /**
   * Get includeLinkedAccountsMetrics
   * @return includeLinkedAccountsMetrics
   */
  @javax.annotation.Nullable
  public Boolean getIncludeLinkedAccountsMetrics() {
    return includeLinkedAccountsMetrics;
  }

  public void setIncludeLinkedAccountsMetrics(Boolean includeLinkedAccountsMetrics) {
    this.includeLinkedAccountsMetrics = includeLinkedAccountsMetrics;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutMetricStreamInput putMetricStreamInput = (PutMetricStreamInput) o;
    return Objects.equals(this.name, putMetricStreamInput.name) &&
        Objects.equals(this.includeFilters, putMetricStreamInput.includeFilters) &&
        Objects.equals(this.excludeFilters, putMetricStreamInput.excludeFilters) &&
        Objects.equals(this.firehoseArn, putMetricStreamInput.firehoseArn) &&
        Objects.equals(this.roleArn, putMetricStreamInput.roleArn) &&
        Objects.equals(this.outputFormat, putMetricStreamInput.outputFormat) &&
        Objects.equals(this.tags, putMetricStreamInput.tags) &&
        Objects.equals(this.statisticsConfigurations, putMetricStreamInput.statisticsConfigurations) &&
        Objects.equals(this.includeLinkedAccountsMetrics, putMetricStreamInput.includeLinkedAccountsMetrics);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, includeFilters, excludeFilters, firehoseArn, roleArn, outputFormat, tags, statisticsConfigurations, includeLinkedAccountsMetrics);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutMetricStreamInput {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    includeFilters: ").append(toIndentedString(includeFilters)).append("\n");
    sb.append("    excludeFilters: ").append(toIndentedString(excludeFilters)).append("\n");
    sb.append("    firehoseArn: ").append(toIndentedString(firehoseArn)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    outputFormat: ").append(toIndentedString(outputFormat)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    statisticsConfigurations: ").append(toIndentedString(statisticsConfigurations)).append("\n");
    sb.append("    includeLinkedAccountsMetrics: ").append(toIndentedString(includeLinkedAccountsMetrics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("IncludeFilters");
    openapiFields.add("ExcludeFilters");
    openapiFields.add("FirehoseArn");
    openapiFields.add("RoleArn");
    openapiFields.add("OutputFormat");
    openapiFields.add("Tags");
    openapiFields.add("StatisticsConfigurations");
    openapiFields.add("IncludeLinkedAccountsMetrics");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("FirehoseArn");
    openapiRequiredFields.add("RoleArn");
    openapiRequiredFields.add("OutputFormat");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutMetricStreamInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutMetricStreamInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutMetricStreamInput is not found in the empty JSON string", PutMetricStreamInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutMetricStreamInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutMetricStreamInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PutMetricStreamInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the optional field `IncludeFilters`
      if (jsonObj.get("IncludeFilters") != null && !jsonObj.get("IncludeFilters").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("IncludeFilters"));
      }
      // validate the optional field `ExcludeFilters`
      if (jsonObj.get("ExcludeFilters") != null && !jsonObj.get("ExcludeFilters").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ExcludeFilters"));
      }
      // validate the required field `FirehoseArn`
      String.validateJsonElement(jsonObj.get("FirehoseArn"));
      // validate the required field `RoleArn`
      String.validateJsonElement(jsonObj.get("RoleArn"));
      // validate the required field `OutputFormat`
      MetricStreamOutputFormat.validateJsonElement(jsonObj.get("OutputFormat"));
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `StatisticsConfigurations`
      if (jsonObj.get("StatisticsConfigurations") != null && !jsonObj.get("StatisticsConfigurations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("StatisticsConfigurations"));
      }
      // validate the optional field `IncludeLinkedAccountsMetrics`
      if (jsonObj.get("IncludeLinkedAccountsMetrics") != null && !jsonObj.get("IncludeLinkedAccountsMetrics").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IncludeLinkedAccountsMetrics"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutMetricStreamInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutMetricStreamInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutMetricStreamInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutMetricStreamInput.class));

       return (TypeAdapter<T>) new TypeAdapter<PutMetricStreamInput>() {
           @Override
           public void write(JsonWriter out, PutMetricStreamInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutMetricStreamInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutMetricStreamInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutMetricStreamInput
   * @throws IOException if the JSON string is invalid with respect to PutMetricStreamInput
   */
  public static PutMetricStreamInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutMetricStreamInput.class);
  }

  /**
   * Convert an instance of PutMetricStreamInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

