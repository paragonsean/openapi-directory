/*
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.StateValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeAlarmsInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:23.972078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeAlarmsInput {
  public static final String SERIALIZED_NAME_ALARM_NAMES = "AlarmNames";
  @SerializedName(SERIALIZED_NAME_ALARM_NAMES)
  private List alarmNames;

  public static final String SERIALIZED_NAME_ALARM_NAME_PREFIX = "AlarmNamePrefix";
  @SerializedName(SERIALIZED_NAME_ALARM_NAME_PREFIX)
  private String alarmNamePrefix;

  public static final String SERIALIZED_NAME_ALARM_TYPES = "AlarmTypes";
  @SerializedName(SERIALIZED_NAME_ALARM_TYPES)
  private List alarmTypes;

  public static final String SERIALIZED_NAME_CHILDREN_OF_ALARM_NAME = "ChildrenOfAlarmName";
  @SerializedName(SERIALIZED_NAME_CHILDREN_OF_ALARM_NAME)
  private String childrenOfAlarmName;

  public static final String SERIALIZED_NAME_PARENTS_OF_ALARM_NAME = "ParentsOfAlarmName";
  @SerializedName(SERIALIZED_NAME_PARENTS_OF_ALARM_NAME)
  private String parentsOfAlarmName;

  public static final String SERIALIZED_NAME_STATE_VALUE = "StateValue";
  @SerializedName(SERIALIZED_NAME_STATE_VALUE)
  private StateValue stateValue;

  public static final String SERIALIZED_NAME_ACTION_PREFIX = "ActionPrefix";
  @SerializedName(SERIALIZED_NAME_ACTION_PREFIX)
  private String actionPrefix;

  public static final String SERIALIZED_NAME_MAX_RECORDS = "MaxRecords";
  @SerializedName(SERIALIZED_NAME_MAX_RECORDS)
  private Integer maxRecords;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public DescribeAlarmsInput() {
  }

  public DescribeAlarmsInput alarmNames(List alarmNames) {
    this.alarmNames = alarmNames;
    return this;
  }

  /**
   * Get alarmNames
   * @return alarmNames
   */
  @javax.annotation.Nullable
  public List getAlarmNames() {
    return alarmNames;
  }

  public void setAlarmNames(List alarmNames) {
    this.alarmNames = alarmNames;
  }


  public DescribeAlarmsInput alarmNamePrefix(String alarmNamePrefix) {
    this.alarmNamePrefix = alarmNamePrefix;
    return this;
  }

  /**
   * Get alarmNamePrefix
   * @return alarmNamePrefix
   */
  @javax.annotation.Nullable
  public String getAlarmNamePrefix() {
    return alarmNamePrefix;
  }

  public void setAlarmNamePrefix(String alarmNamePrefix) {
    this.alarmNamePrefix = alarmNamePrefix;
  }


  public DescribeAlarmsInput alarmTypes(List alarmTypes) {
    this.alarmTypes = alarmTypes;
    return this;
  }

  /**
   * Get alarmTypes
   * @return alarmTypes
   */
  @javax.annotation.Nullable
  public List getAlarmTypes() {
    return alarmTypes;
  }

  public void setAlarmTypes(List alarmTypes) {
    this.alarmTypes = alarmTypes;
  }


  public DescribeAlarmsInput childrenOfAlarmName(String childrenOfAlarmName) {
    this.childrenOfAlarmName = childrenOfAlarmName;
    return this;
  }

  /**
   * Get childrenOfAlarmName
   * @return childrenOfAlarmName
   */
  @javax.annotation.Nullable
  public String getChildrenOfAlarmName() {
    return childrenOfAlarmName;
  }

  public void setChildrenOfAlarmName(String childrenOfAlarmName) {
    this.childrenOfAlarmName = childrenOfAlarmName;
  }


  public DescribeAlarmsInput parentsOfAlarmName(String parentsOfAlarmName) {
    this.parentsOfAlarmName = parentsOfAlarmName;
    return this;
  }

  /**
   * Get parentsOfAlarmName
   * @return parentsOfAlarmName
   */
  @javax.annotation.Nullable
  public String getParentsOfAlarmName() {
    return parentsOfAlarmName;
  }

  public void setParentsOfAlarmName(String parentsOfAlarmName) {
    this.parentsOfAlarmName = parentsOfAlarmName;
  }


  public DescribeAlarmsInput stateValue(StateValue stateValue) {
    this.stateValue = stateValue;
    return this;
  }

  /**
   * Get stateValue
   * @return stateValue
   */
  @javax.annotation.Nullable
  public StateValue getStateValue() {
    return stateValue;
  }

  public void setStateValue(StateValue stateValue) {
    this.stateValue = stateValue;
  }


  public DescribeAlarmsInput actionPrefix(String actionPrefix) {
    this.actionPrefix = actionPrefix;
    return this;
  }

  /**
   * Get actionPrefix
   * @return actionPrefix
   */
  @javax.annotation.Nullable
  public String getActionPrefix() {
    return actionPrefix;
  }

  public void setActionPrefix(String actionPrefix) {
    this.actionPrefix = actionPrefix;
  }


  public DescribeAlarmsInput maxRecords(Integer maxRecords) {
    this.maxRecords = maxRecords;
    return this;
  }

  /**
   * Get maxRecords
   * @return maxRecords
   */
  @javax.annotation.Nullable
  public Integer getMaxRecords() {
    return maxRecords;
  }

  public void setMaxRecords(Integer maxRecords) {
    this.maxRecords = maxRecords;
  }


  public DescribeAlarmsInput nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Get nextToken
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeAlarmsInput describeAlarmsInput = (DescribeAlarmsInput) o;
    return Objects.equals(this.alarmNames, describeAlarmsInput.alarmNames) &&
        Objects.equals(this.alarmNamePrefix, describeAlarmsInput.alarmNamePrefix) &&
        Objects.equals(this.alarmTypes, describeAlarmsInput.alarmTypes) &&
        Objects.equals(this.childrenOfAlarmName, describeAlarmsInput.childrenOfAlarmName) &&
        Objects.equals(this.parentsOfAlarmName, describeAlarmsInput.parentsOfAlarmName) &&
        Objects.equals(this.stateValue, describeAlarmsInput.stateValue) &&
        Objects.equals(this.actionPrefix, describeAlarmsInput.actionPrefix) &&
        Objects.equals(this.maxRecords, describeAlarmsInput.maxRecords) &&
        Objects.equals(this.nextToken, describeAlarmsInput.nextToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alarmNames, alarmNamePrefix, alarmTypes, childrenOfAlarmName, parentsOfAlarmName, stateValue, actionPrefix, maxRecords, nextToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeAlarmsInput {\n");
    sb.append("    alarmNames: ").append(toIndentedString(alarmNames)).append("\n");
    sb.append("    alarmNamePrefix: ").append(toIndentedString(alarmNamePrefix)).append("\n");
    sb.append("    alarmTypes: ").append(toIndentedString(alarmTypes)).append("\n");
    sb.append("    childrenOfAlarmName: ").append(toIndentedString(childrenOfAlarmName)).append("\n");
    sb.append("    parentsOfAlarmName: ").append(toIndentedString(parentsOfAlarmName)).append("\n");
    sb.append("    stateValue: ").append(toIndentedString(stateValue)).append("\n");
    sb.append("    actionPrefix: ").append(toIndentedString(actionPrefix)).append("\n");
    sb.append("    maxRecords: ").append(toIndentedString(maxRecords)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AlarmNames");
    openapiFields.add("AlarmNamePrefix");
    openapiFields.add("AlarmTypes");
    openapiFields.add("ChildrenOfAlarmName");
    openapiFields.add("ParentsOfAlarmName");
    openapiFields.add("StateValue");
    openapiFields.add("ActionPrefix");
    openapiFields.add("MaxRecords");
    openapiFields.add("NextToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeAlarmsInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeAlarmsInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeAlarmsInput is not found in the empty JSON string", DescribeAlarmsInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeAlarmsInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeAlarmsInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AlarmNames`
      if (jsonObj.get("AlarmNames") != null && !jsonObj.get("AlarmNames").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AlarmNames"));
      }
      // validate the optional field `AlarmNamePrefix`
      if (jsonObj.get("AlarmNamePrefix") != null && !jsonObj.get("AlarmNamePrefix").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AlarmNamePrefix"));
      }
      // validate the optional field `AlarmTypes`
      if (jsonObj.get("AlarmTypes") != null && !jsonObj.get("AlarmTypes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AlarmTypes"));
      }
      // validate the optional field `ChildrenOfAlarmName`
      if (jsonObj.get("ChildrenOfAlarmName") != null && !jsonObj.get("ChildrenOfAlarmName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ChildrenOfAlarmName"));
      }
      // validate the optional field `ParentsOfAlarmName`
      if (jsonObj.get("ParentsOfAlarmName") != null && !jsonObj.get("ParentsOfAlarmName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ParentsOfAlarmName"));
      }
      // validate the optional field `StateValue`
      if (jsonObj.get("StateValue") != null && !jsonObj.get("StateValue").isJsonNull()) {
        StateValue.validateJsonElement(jsonObj.get("StateValue"));
      }
      // validate the optional field `ActionPrefix`
      if (jsonObj.get("ActionPrefix") != null && !jsonObj.get("ActionPrefix").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ActionPrefix"));
      }
      // validate the optional field `MaxRecords`
      if (jsonObj.get("MaxRecords") != null && !jsonObj.get("MaxRecords").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxRecords"));
      }
      // validate the optional field `NextToken`
      if (jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NextToken"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeAlarmsInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeAlarmsInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeAlarmsInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeAlarmsInput.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeAlarmsInput>() {
           @Override
           public void write(JsonWriter out, DescribeAlarmsInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeAlarmsInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeAlarmsInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeAlarmsInput
   * @throws IOException if the JSON string is invalid with respect to DescribeAlarmsInput
   */
  public static DescribeAlarmsInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeAlarmsInput.class);
  }

  /**
   * Convert an instance of DescribeAlarmsInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

