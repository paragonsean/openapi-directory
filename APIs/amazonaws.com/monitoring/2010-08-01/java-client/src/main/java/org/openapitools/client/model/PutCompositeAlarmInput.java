/*
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutCompositeAlarmInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:23.972078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutCompositeAlarmInput {
  public static final String SERIALIZED_NAME_ACTIONS_ENABLED = "ActionsEnabled";
  @SerializedName(SERIALIZED_NAME_ACTIONS_ENABLED)
  private Boolean actionsEnabled;

  public static final String SERIALIZED_NAME_ALARM_ACTIONS = "AlarmActions";
  @SerializedName(SERIALIZED_NAME_ALARM_ACTIONS)
  private List alarmActions;

  public static final String SERIALIZED_NAME_ALARM_DESCRIPTION = "AlarmDescription";
  @SerializedName(SERIALIZED_NAME_ALARM_DESCRIPTION)
  private String alarmDescription;

  public static final String SERIALIZED_NAME_ALARM_NAME = "AlarmName";
  @SerializedName(SERIALIZED_NAME_ALARM_NAME)
  private String alarmName;

  public static final String SERIALIZED_NAME_ALARM_RULE = "AlarmRule";
  @SerializedName(SERIALIZED_NAME_ALARM_RULE)
  private String alarmRule;

  public static final String SERIALIZED_NAME_INSUFFICIENT_DATA_ACTIONS = "InsufficientDataActions";
  @SerializedName(SERIALIZED_NAME_INSUFFICIENT_DATA_ACTIONS)
  private List insufficientDataActions;

  public static final String SERIALIZED_NAME_OK_ACTIONS = "OKActions";
  @SerializedName(SERIALIZED_NAME_OK_ACTIONS)
  private List okActions;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_ACTIONS_SUPPRESSOR = "ActionsSuppressor";
  @SerializedName(SERIALIZED_NAME_ACTIONS_SUPPRESSOR)
  private String actionsSuppressor;

  public static final String SERIALIZED_NAME_ACTIONS_SUPPRESSOR_WAIT_PERIOD = "ActionsSuppressorWaitPeriod";
  @SerializedName(SERIALIZED_NAME_ACTIONS_SUPPRESSOR_WAIT_PERIOD)
  private Integer actionsSuppressorWaitPeriod;

  public static final String SERIALIZED_NAME_ACTIONS_SUPPRESSOR_EXTENSION_PERIOD = "ActionsSuppressorExtensionPeriod";
  @SerializedName(SERIALIZED_NAME_ACTIONS_SUPPRESSOR_EXTENSION_PERIOD)
  private Integer actionsSuppressorExtensionPeriod;

  public PutCompositeAlarmInput() {
  }

  public PutCompositeAlarmInput actionsEnabled(Boolean actionsEnabled) {
    this.actionsEnabled = actionsEnabled;
    return this;
  }

  /**
   * Get actionsEnabled
   * @return actionsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getActionsEnabled() {
    return actionsEnabled;
  }

  public void setActionsEnabled(Boolean actionsEnabled) {
    this.actionsEnabled = actionsEnabled;
  }


  public PutCompositeAlarmInput alarmActions(List alarmActions) {
    this.alarmActions = alarmActions;
    return this;
  }

  /**
   * Get alarmActions
   * @return alarmActions
   */
  @javax.annotation.Nullable
  public List getAlarmActions() {
    return alarmActions;
  }

  public void setAlarmActions(List alarmActions) {
    this.alarmActions = alarmActions;
  }


  public PutCompositeAlarmInput alarmDescription(String alarmDescription) {
    this.alarmDescription = alarmDescription;
    return this;
  }

  /**
   * Get alarmDescription
   * @return alarmDescription
   */
  @javax.annotation.Nullable
  public String getAlarmDescription() {
    return alarmDescription;
  }

  public void setAlarmDescription(String alarmDescription) {
    this.alarmDescription = alarmDescription;
  }


  public PutCompositeAlarmInput alarmName(String alarmName) {
    this.alarmName = alarmName;
    return this;
  }

  /**
   * Get alarmName
   * @return alarmName
   */
  @javax.annotation.Nonnull
  public String getAlarmName() {
    return alarmName;
  }

  public void setAlarmName(String alarmName) {
    this.alarmName = alarmName;
  }


  public PutCompositeAlarmInput alarmRule(String alarmRule) {
    this.alarmRule = alarmRule;
    return this;
  }

  /**
   * Get alarmRule
   * @return alarmRule
   */
  @javax.annotation.Nonnull
  public String getAlarmRule() {
    return alarmRule;
  }

  public void setAlarmRule(String alarmRule) {
    this.alarmRule = alarmRule;
  }


  public PutCompositeAlarmInput insufficientDataActions(List insufficientDataActions) {
    this.insufficientDataActions = insufficientDataActions;
    return this;
  }

  /**
   * Get insufficientDataActions
   * @return insufficientDataActions
   */
  @javax.annotation.Nullable
  public List getInsufficientDataActions() {
    return insufficientDataActions;
  }

  public void setInsufficientDataActions(List insufficientDataActions) {
    this.insufficientDataActions = insufficientDataActions;
  }


  public PutCompositeAlarmInput okActions(List okActions) {
    this.okActions = okActions;
    return this;
  }

  /**
   * Get okActions
   * @return okActions
   */
  @javax.annotation.Nullable
  public List getOkActions() {
    return okActions;
  }

  public void setOkActions(List okActions) {
    this.okActions = okActions;
  }


  public PutCompositeAlarmInput tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public PutCompositeAlarmInput actionsSuppressor(String actionsSuppressor) {
    this.actionsSuppressor = actionsSuppressor;
    return this;
  }

  /**
   * Get actionsSuppressor
   * @return actionsSuppressor
   */
  @javax.annotation.Nullable
  public String getActionsSuppressor() {
    return actionsSuppressor;
  }

  public void setActionsSuppressor(String actionsSuppressor) {
    this.actionsSuppressor = actionsSuppressor;
  }


  public PutCompositeAlarmInput actionsSuppressorWaitPeriod(Integer actionsSuppressorWaitPeriod) {
    this.actionsSuppressorWaitPeriod = actionsSuppressorWaitPeriod;
    return this;
  }

  /**
   * Get actionsSuppressorWaitPeriod
   * @return actionsSuppressorWaitPeriod
   */
  @javax.annotation.Nullable
  public Integer getActionsSuppressorWaitPeriod() {
    return actionsSuppressorWaitPeriod;
  }

  public void setActionsSuppressorWaitPeriod(Integer actionsSuppressorWaitPeriod) {
    this.actionsSuppressorWaitPeriod = actionsSuppressorWaitPeriod;
  }


  public PutCompositeAlarmInput actionsSuppressorExtensionPeriod(Integer actionsSuppressorExtensionPeriod) {
    this.actionsSuppressorExtensionPeriod = actionsSuppressorExtensionPeriod;
    return this;
  }

  /**
   * Get actionsSuppressorExtensionPeriod
   * @return actionsSuppressorExtensionPeriod
   */
  @javax.annotation.Nullable
  public Integer getActionsSuppressorExtensionPeriod() {
    return actionsSuppressorExtensionPeriod;
  }

  public void setActionsSuppressorExtensionPeriod(Integer actionsSuppressorExtensionPeriod) {
    this.actionsSuppressorExtensionPeriod = actionsSuppressorExtensionPeriod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutCompositeAlarmInput putCompositeAlarmInput = (PutCompositeAlarmInput) o;
    return Objects.equals(this.actionsEnabled, putCompositeAlarmInput.actionsEnabled) &&
        Objects.equals(this.alarmActions, putCompositeAlarmInput.alarmActions) &&
        Objects.equals(this.alarmDescription, putCompositeAlarmInput.alarmDescription) &&
        Objects.equals(this.alarmName, putCompositeAlarmInput.alarmName) &&
        Objects.equals(this.alarmRule, putCompositeAlarmInput.alarmRule) &&
        Objects.equals(this.insufficientDataActions, putCompositeAlarmInput.insufficientDataActions) &&
        Objects.equals(this.okActions, putCompositeAlarmInput.okActions) &&
        Objects.equals(this.tags, putCompositeAlarmInput.tags) &&
        Objects.equals(this.actionsSuppressor, putCompositeAlarmInput.actionsSuppressor) &&
        Objects.equals(this.actionsSuppressorWaitPeriod, putCompositeAlarmInput.actionsSuppressorWaitPeriod) &&
        Objects.equals(this.actionsSuppressorExtensionPeriod, putCompositeAlarmInput.actionsSuppressorExtensionPeriod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionsEnabled, alarmActions, alarmDescription, alarmName, alarmRule, insufficientDataActions, okActions, tags, actionsSuppressor, actionsSuppressorWaitPeriod, actionsSuppressorExtensionPeriod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutCompositeAlarmInput {\n");
    sb.append("    actionsEnabled: ").append(toIndentedString(actionsEnabled)).append("\n");
    sb.append("    alarmActions: ").append(toIndentedString(alarmActions)).append("\n");
    sb.append("    alarmDescription: ").append(toIndentedString(alarmDescription)).append("\n");
    sb.append("    alarmName: ").append(toIndentedString(alarmName)).append("\n");
    sb.append("    alarmRule: ").append(toIndentedString(alarmRule)).append("\n");
    sb.append("    insufficientDataActions: ").append(toIndentedString(insufficientDataActions)).append("\n");
    sb.append("    okActions: ").append(toIndentedString(okActions)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    actionsSuppressor: ").append(toIndentedString(actionsSuppressor)).append("\n");
    sb.append("    actionsSuppressorWaitPeriod: ").append(toIndentedString(actionsSuppressorWaitPeriod)).append("\n");
    sb.append("    actionsSuppressorExtensionPeriod: ").append(toIndentedString(actionsSuppressorExtensionPeriod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActionsEnabled");
    openapiFields.add("AlarmActions");
    openapiFields.add("AlarmDescription");
    openapiFields.add("AlarmName");
    openapiFields.add("AlarmRule");
    openapiFields.add("InsufficientDataActions");
    openapiFields.add("OKActions");
    openapiFields.add("Tags");
    openapiFields.add("ActionsSuppressor");
    openapiFields.add("ActionsSuppressorWaitPeriod");
    openapiFields.add("ActionsSuppressorExtensionPeriod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AlarmName");
    openapiRequiredFields.add("AlarmRule");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutCompositeAlarmInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutCompositeAlarmInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutCompositeAlarmInput is not found in the empty JSON string", PutCompositeAlarmInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutCompositeAlarmInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutCompositeAlarmInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PutCompositeAlarmInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ActionsEnabled`
      if (jsonObj.get("ActionsEnabled") != null && !jsonObj.get("ActionsEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ActionsEnabled"));
      }
      // validate the optional field `AlarmActions`
      if (jsonObj.get("AlarmActions") != null && !jsonObj.get("AlarmActions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AlarmActions"));
      }
      // validate the optional field `AlarmDescription`
      if (jsonObj.get("AlarmDescription") != null && !jsonObj.get("AlarmDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AlarmDescription"));
      }
      // validate the required field `AlarmName`
      String.validateJsonElement(jsonObj.get("AlarmName"));
      // validate the required field `AlarmRule`
      String.validateJsonElement(jsonObj.get("AlarmRule"));
      // validate the optional field `InsufficientDataActions`
      if (jsonObj.get("InsufficientDataActions") != null && !jsonObj.get("InsufficientDataActions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("InsufficientDataActions"));
      }
      // validate the optional field `OKActions`
      if (jsonObj.get("OKActions") != null && !jsonObj.get("OKActions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("OKActions"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `ActionsSuppressor`
      if (jsonObj.get("ActionsSuppressor") != null && !jsonObj.get("ActionsSuppressor").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ActionsSuppressor"));
      }
      // validate the optional field `ActionsSuppressorWaitPeriod`
      if (jsonObj.get("ActionsSuppressorWaitPeriod") != null && !jsonObj.get("ActionsSuppressorWaitPeriod").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ActionsSuppressorWaitPeriod"));
      }
      // validate the optional field `ActionsSuppressorExtensionPeriod`
      if (jsonObj.get("ActionsSuppressorExtensionPeriod") != null && !jsonObj.get("ActionsSuppressorExtensionPeriod").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ActionsSuppressorExtensionPeriod"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutCompositeAlarmInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutCompositeAlarmInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutCompositeAlarmInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutCompositeAlarmInput.class));

       return (TypeAdapter<T>) new TypeAdapter<PutCompositeAlarmInput>() {
           @Override
           public void write(JsonWriter out, PutCompositeAlarmInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutCompositeAlarmInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutCompositeAlarmInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutCompositeAlarmInput
   * @throws IOException if the JSON string is invalid with respect to PutCompositeAlarmInput
   */
  public static PutCompositeAlarmInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutCompositeAlarmInput.class);
  }

  /**
   * Convert an instance of PutCompositeAlarmInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

