/*
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MetricStatMetric;
import org.openapitools.client.model.StandardUnit;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MetricDataQueryMetricStat
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:23.972078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MetricDataQueryMetricStat {
  public static final String SERIALIZED_NAME_METRIC = "Metric";
  @SerializedName(SERIALIZED_NAME_METRIC)
  private MetricStatMetric metric;

  public static final String SERIALIZED_NAME_PERIOD = "Period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private Integer period;

  public static final String SERIALIZED_NAME_STAT = "Stat";
  @SerializedName(SERIALIZED_NAME_STAT)
  private String stat;

  public static final String SERIALIZED_NAME_UNIT = "Unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private StandardUnit unit;

  public MetricDataQueryMetricStat() {
  }

  public MetricDataQueryMetricStat metric(MetricStatMetric metric) {
    this.metric = metric;
    return this;
  }

  /**
   * Get metric
   * @return metric
   */
  @javax.annotation.Nonnull
  public MetricStatMetric getMetric() {
    return metric;
  }

  public void setMetric(MetricStatMetric metric) {
    this.metric = metric;
  }


  public MetricDataQueryMetricStat period(Integer period) {
    this.period = period;
    return this;
  }

  /**
   * Get period
   * @return period
   */
  @javax.annotation.Nonnull
  public Integer getPeriod() {
    return period;
  }

  public void setPeriod(Integer period) {
    this.period = period;
  }


  public MetricDataQueryMetricStat stat(String stat) {
    this.stat = stat;
    return this;
  }

  /**
   * Get stat
   * @return stat
   */
  @javax.annotation.Nonnull
  public String getStat() {
    return stat;
  }

  public void setStat(String stat) {
    this.stat = stat;
  }


  public MetricDataQueryMetricStat unit(StandardUnit unit) {
    this.unit = unit;
    return this;
  }

  /**
   * Get unit
   * @return unit
   */
  @javax.annotation.Nullable
  public StandardUnit getUnit() {
    return unit;
  }

  public void setUnit(StandardUnit unit) {
    this.unit = unit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricDataQueryMetricStat metricDataQueryMetricStat = (MetricDataQueryMetricStat) o;
    return Objects.equals(this.metric, metricDataQueryMetricStat.metric) &&
        Objects.equals(this.period, metricDataQueryMetricStat.period) &&
        Objects.equals(this.stat, metricDataQueryMetricStat.stat) &&
        Objects.equals(this.unit, metricDataQueryMetricStat.unit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metric, period, stat, unit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricDataQueryMetricStat {\n");
    sb.append("    metric: ").append(toIndentedString(metric)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    stat: ").append(toIndentedString(stat)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Metric");
    openapiFields.add("Period");
    openapiFields.add("Stat");
    openapiFields.add("Unit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Metric");
    openapiRequiredFields.add("Period");
    openapiRequiredFields.add("Stat");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MetricDataQueryMetricStat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetricDataQueryMetricStat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetricDataQueryMetricStat is not found in the empty JSON string", MetricDataQueryMetricStat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetricDataQueryMetricStat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetricDataQueryMetricStat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MetricDataQueryMetricStat.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Metric`
      MetricStatMetric.validateJsonElement(jsonObj.get("Metric"));
      // validate the required field `Period`
      Integer.validateJsonElement(jsonObj.get("Period"));
      // validate the required field `Stat`
      String.validateJsonElement(jsonObj.get("Stat"));
      // validate the optional field `Unit`
      if (jsonObj.get("Unit") != null && !jsonObj.get("Unit").isJsonNull()) {
        StandardUnit.validateJsonElement(jsonObj.get("Unit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetricDataQueryMetricStat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetricDataQueryMetricStat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetricDataQueryMetricStat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetricDataQueryMetricStat.class));

       return (TypeAdapter<T>) new TypeAdapter<MetricDataQueryMetricStat>() {
           @Override
           public void write(JsonWriter out, MetricDataQueryMetricStat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetricDataQueryMetricStat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MetricDataQueryMetricStat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MetricDataQueryMetricStat
   * @throws IOException if the JSON string is invalid with respect to MetricDataQueryMetricStat
   */
  public static MetricDataQueryMetricStat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetricDataQueryMetricStat.class);
  }

  /**
   * Convert an instance of MetricDataQueryMetricStat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

