/*
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MetricDatumStatisticValues;
import org.openapitools.client.model.StandardUnit;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Encapsulates the information sent to either create a metric or add new values to be aggregated into an existing metric.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:23.972078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MetricDatum {
  public static final String SERIALIZED_NAME_METRIC_NAME = "MetricName";
  @SerializedName(SERIALIZED_NAME_METRIC_NAME)
  private String metricName;

  public static final String SERIALIZED_NAME_DIMENSIONS = "Dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private List dimensions;

  public static final String SERIALIZED_NAME_TIMESTAMP = "Timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_VALUE = "Value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Double value;

  public static final String SERIALIZED_NAME_STATISTIC_VALUES = "StatisticValues";
  @SerializedName(SERIALIZED_NAME_STATISTIC_VALUES)
  private MetricDatumStatisticValues statisticValues;

  public static final String SERIALIZED_NAME_VALUES = "Values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private List values;

  public static final String SERIALIZED_NAME_COUNTS = "Counts";
  @SerializedName(SERIALIZED_NAME_COUNTS)
  private List counts;

  public static final String SERIALIZED_NAME_UNIT = "Unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private StandardUnit unit;

  public static final String SERIALIZED_NAME_STORAGE_RESOLUTION = "StorageResolution";
  @SerializedName(SERIALIZED_NAME_STORAGE_RESOLUTION)
  private Integer storageResolution;

  public MetricDatum() {
  }

  public MetricDatum metricName(String metricName) {
    this.metricName = metricName;
    return this;
  }

  /**
   * Get metricName
   * @return metricName
   */
  @javax.annotation.Nonnull
  public String getMetricName() {
    return metricName;
  }

  public void setMetricName(String metricName) {
    this.metricName = metricName;
  }


  public MetricDatum dimensions(List dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  /**
   * Get dimensions
   * @return dimensions
   */
  @javax.annotation.Nullable
  public List getDimensions() {
    return dimensions;
  }

  public void setDimensions(List dimensions) {
    this.dimensions = dimensions;
  }


  public MetricDatum timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public MetricDatum value(Double value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public Double getValue() {
    return value;
  }

  public void setValue(Double value) {
    this.value = value;
  }


  public MetricDatum statisticValues(MetricDatumStatisticValues statisticValues) {
    this.statisticValues = statisticValues;
    return this;
  }

  /**
   * Get statisticValues
   * @return statisticValues
   */
  @javax.annotation.Nullable
  public MetricDatumStatisticValues getStatisticValues() {
    return statisticValues;
  }

  public void setStatisticValues(MetricDatumStatisticValues statisticValues) {
    this.statisticValues = statisticValues;
  }


  public MetricDatum values(List values) {
    this.values = values;
    return this;
  }

  /**
   * Get values
   * @return values
   */
  @javax.annotation.Nullable
  public List getValues() {
    return values;
  }

  public void setValues(List values) {
    this.values = values;
  }


  public MetricDatum counts(List counts) {
    this.counts = counts;
    return this;
  }

  /**
   * Get counts
   * @return counts
   */
  @javax.annotation.Nullable
  public List getCounts() {
    return counts;
  }

  public void setCounts(List counts) {
    this.counts = counts;
  }


  public MetricDatum unit(StandardUnit unit) {
    this.unit = unit;
    return this;
  }

  /**
   * Get unit
   * @return unit
   */
  @javax.annotation.Nullable
  public StandardUnit getUnit() {
    return unit;
  }

  public void setUnit(StandardUnit unit) {
    this.unit = unit;
  }


  public MetricDatum storageResolution(Integer storageResolution) {
    this.storageResolution = storageResolution;
    return this;
  }

  /**
   * Get storageResolution
   * @return storageResolution
   */
  @javax.annotation.Nullable
  public Integer getStorageResolution() {
    return storageResolution;
  }

  public void setStorageResolution(Integer storageResolution) {
    this.storageResolution = storageResolution;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricDatum metricDatum = (MetricDatum) o;
    return Objects.equals(this.metricName, metricDatum.metricName) &&
        Objects.equals(this.dimensions, metricDatum.dimensions) &&
        Objects.equals(this.timestamp, metricDatum.timestamp) &&
        Objects.equals(this.value, metricDatum.value) &&
        Objects.equals(this.statisticValues, metricDatum.statisticValues) &&
        Objects.equals(this.values, metricDatum.values) &&
        Objects.equals(this.counts, metricDatum.counts) &&
        Objects.equals(this.unit, metricDatum.unit) &&
        Objects.equals(this.storageResolution, metricDatum.storageResolution);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metricName, dimensions, timestamp, value, statisticValues, values, counts, unit, storageResolution);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricDatum {\n");
    sb.append("    metricName: ").append(toIndentedString(metricName)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    statisticValues: ").append(toIndentedString(statisticValues)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("    counts: ").append(toIndentedString(counts)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    storageResolution: ").append(toIndentedString(storageResolution)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MetricName");
    openapiFields.add("Dimensions");
    openapiFields.add("Timestamp");
    openapiFields.add("Value");
    openapiFields.add("StatisticValues");
    openapiFields.add("Values");
    openapiFields.add("Counts");
    openapiFields.add("Unit");
    openapiFields.add("StorageResolution");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("MetricName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MetricDatum
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetricDatum.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetricDatum is not found in the empty JSON string", MetricDatum.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetricDatum.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetricDatum` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MetricDatum.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `MetricName`
      String.validateJsonElement(jsonObj.get("MetricName"));
      // validate the optional field `Dimensions`
      if (jsonObj.get("Dimensions") != null && !jsonObj.get("Dimensions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Dimensions"));
      }
      // validate the optional field `Timestamp`
      if (jsonObj.get("Timestamp") != null && !jsonObj.get("Timestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("Timestamp"));
      }
      // validate the optional field `Value`
      if (jsonObj.get("Value") != null && !jsonObj.get("Value").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Value"));
      }
      // validate the optional field `StatisticValues`
      if (jsonObj.get("StatisticValues") != null && !jsonObj.get("StatisticValues").isJsonNull()) {
        MetricDatumStatisticValues.validateJsonElement(jsonObj.get("StatisticValues"));
      }
      // validate the optional field `Values`
      if (jsonObj.get("Values") != null && !jsonObj.get("Values").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Values"));
      }
      // validate the optional field `Counts`
      if (jsonObj.get("Counts") != null && !jsonObj.get("Counts").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Counts"));
      }
      // validate the optional field `Unit`
      if (jsonObj.get("Unit") != null && !jsonObj.get("Unit").isJsonNull()) {
        StandardUnit.validateJsonElement(jsonObj.get("Unit"));
      }
      // validate the optional field `StorageResolution`
      if (jsonObj.get("StorageResolution") != null && !jsonObj.get("StorageResolution").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("StorageResolution"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetricDatum.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetricDatum' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetricDatum> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetricDatum.class));

       return (TypeAdapter<T>) new TypeAdapter<MetricDatum>() {
           @Override
           public void write(JsonWriter out, MetricDatum value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetricDatum read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MetricDatum given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MetricDatum
   * @throws IOException if the JSON string is invalid with respect to MetricDatum
   */
  public static MetricDatum fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetricDatum.class);
  }

  /**
   * Convert an instance of MetricDatum to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

