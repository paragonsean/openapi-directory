/*
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AlarmType;
import org.openapitools.client.model.AnomalyDetectorType;
import org.openapitools.client.model.DeleteAlarmsInput;
import org.openapitools.client.model.DeleteAnomalyDetectorInput;
import org.openapitools.client.model.DeleteDashboardsInput;
import org.openapitools.client.model.DeleteInsightRulesInput;
import org.openapitools.client.model.DeleteInsightRulesOutput;
import org.openapitools.client.model.DeleteMetricStreamInput;
import org.openapitools.client.model.DescribeAlarmHistoryInput;
import org.openapitools.client.model.DescribeAlarmHistoryOutput;
import org.openapitools.client.model.DescribeAlarmsForMetricInput;
import org.openapitools.client.model.DescribeAlarmsForMetricOutput;
import org.openapitools.client.model.DescribeAlarmsInput;
import org.openapitools.client.model.DescribeAlarmsOutput;
import org.openapitools.client.model.DescribeAnomalyDetectorsInput;
import org.openapitools.client.model.DescribeAnomalyDetectorsOutput;
import org.openapitools.client.model.DescribeInsightRulesInput;
import org.openapitools.client.model.DescribeInsightRulesOutput;
import org.openapitools.client.model.Dimension;
import org.openapitools.client.model.DimensionFilter;
import org.openapitools.client.model.DisableAlarmActionsInput;
import org.openapitools.client.model.DisableInsightRulesInput;
import org.openapitools.client.model.DisableInsightRulesOutput;
import org.openapitools.client.model.EnableAlarmActionsInput;
import org.openapitools.client.model.EnableInsightRulesInput;
import org.openapitools.client.model.EnableInsightRulesOutput;
import org.openapitools.client.model.GETDeleteAnomalyDetectorMetricMathAnomalyDetectorParameter;
import org.openapitools.client.model.GETDeleteAnomalyDetectorSingleMetricAnomalyDetectorParameter;
import org.openapitools.client.model.GETGetMetricDataLabelOptionsParameter;
import org.openapitools.client.model.GETPutAnomalyDetectorConfigurationParameter;
import org.openapitools.client.model.GetDashboardInput;
import org.openapitools.client.model.GetDashboardOutput;
import org.openapitools.client.model.GetInsightRuleReportInput;
import org.openapitools.client.model.GetInsightRuleReportOutput;
import org.openapitools.client.model.GetMetricDataInput;
import org.openapitools.client.model.GetMetricDataOutput;
import org.openapitools.client.model.GetMetricStatisticsInput;
import org.openapitools.client.model.GetMetricStatisticsOutput;
import org.openapitools.client.model.GetMetricStreamInput;
import org.openapitools.client.model.GetMetricStreamOutput;
import org.openapitools.client.model.GetMetricWidgetImageInput;
import org.openapitools.client.model.GetMetricWidgetImageOutput;
import org.openapitools.client.model.ListDashboardsInput;
import org.openapitools.client.model.ListDashboardsOutput;
import org.openapitools.client.model.ListManagedInsightRulesInput;
import org.openapitools.client.model.ListManagedInsightRulesOutput;
import org.openapitools.client.model.ListMetricStreamsInput;
import org.openapitools.client.model.ListMetricStreamsOutput;
import org.openapitools.client.model.ListMetricsInput;
import org.openapitools.client.model.ListMetricsOutput;
import org.openapitools.client.model.ListTagsForResourceInput;
import org.openapitools.client.model.ListTagsForResourceOutput;
import org.openapitools.client.model.ManagedRule;
import org.openapitools.client.model.MetricDataQuery;
import org.openapitools.client.model.MetricDatum;
import org.openapitools.client.model.MetricStreamFilter;
import org.openapitools.client.model.MetricStreamStatisticsConfiguration;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PutAnomalyDetectorInput;
import org.openapitools.client.model.PutCompositeAlarmInput;
import org.openapitools.client.model.PutDashboardInput;
import org.openapitools.client.model.PutDashboardOutput;
import org.openapitools.client.model.PutInsightRuleInput;
import org.openapitools.client.model.PutManagedInsightRulesInput;
import org.openapitools.client.model.PutManagedInsightRulesOutput;
import org.openapitools.client.model.PutMetricAlarmInput;
import org.openapitools.client.model.PutMetricDataInput;
import org.openapitools.client.model.PutMetricStreamInput;
import org.openapitools.client.model.PutMetricStreamOutput;
import org.openapitools.client.model.SetAlarmStateInput;
import org.openapitools.client.model.StartMetricStreamsInput;
import org.openapitools.client.model.Statistic;
import org.openapitools.client.model.StopMetricStreamsInput;
import org.openapitools.client.model.Tag;
import org.openapitools.client.model.TagResourceInput;
import org.openapitools.client.model.UntagResourceInput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for gETDeleteAlarms
     * @param alarmNames The alarms to be deleted. Do not enclose the alarm names in quote marks. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteAlarmsCall(List<String> alarmNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteAlarms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alarmNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "AlarmNames", alarmNames));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteAlarmsValidateBeforeCall(List<String> alarmNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'alarmNames' is set
        if (alarmNames == null) {
            throw new ApiException("Missing the required parameter 'alarmNames' when calling gETDeleteAlarms(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteAlarms(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteAlarms(Async)");
        }

        return gETDeleteAlarmsCall(alarmNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified alarms. You can delete up to 100 alarms in one operation. However, this total can include no more than one composite alarm. For example, you could delete 99 metric alarms and one composite alarms with one operation, but you can&#39;t delete two composite alarms with one operation.&lt;/p&gt; &lt;p&gt; If you specify an incorrect alarm name or make any other error in the operation, no alarms are deleted. To confirm that alarms were deleted successfully, you can use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeAlarms.html\&quot;&gt;DescribeAlarms&lt;/a&gt; operation after using &lt;code&gt;DeleteAlarms&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;It is possible to create a loop or cycle of composite alarms, where composite alarm A depends on composite alarm B, and composite alarm B also depends on composite alarm A. In this scenario, you can&#39;t delete any composite alarm that is part of the cycle because there is always still a composite alarm that depends on that alarm that you want to delete.&lt;/p&gt; &lt;p&gt;To get out of such a situation, you must break the cycle by changing the rule of one of the composite alarms in the cycle to remove a dependency that creates the cycle. The simplest change to make to break a cycle is to change the &lt;code&gt;AlarmRule&lt;/code&gt; of one of the alarms to &lt;code&gt;false&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;Additionally, the evaluation of composite alarms stops if CloudWatch detects a cycle in the evaluation path. &lt;/p&gt; &lt;/note&gt;
     * @param alarmNames The alarms to be deleted. Do not enclose the alarm names in quote marks. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFound </td><td>  -  </td></tr>
     </table>
     */
    public void gETDeleteAlarms(List<String> alarmNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETDeleteAlarmsWithHttpInfo(alarmNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified alarms. You can delete up to 100 alarms in one operation. However, this total can include no more than one composite alarm. For example, you could delete 99 metric alarms and one composite alarms with one operation, but you can&#39;t delete two composite alarms with one operation.&lt;/p&gt; &lt;p&gt; If you specify an incorrect alarm name or make any other error in the operation, no alarms are deleted. To confirm that alarms were deleted successfully, you can use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeAlarms.html\&quot;&gt;DescribeAlarms&lt;/a&gt; operation after using &lt;code&gt;DeleteAlarms&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;It is possible to create a loop or cycle of composite alarms, where composite alarm A depends on composite alarm B, and composite alarm B also depends on composite alarm A. In this scenario, you can&#39;t delete any composite alarm that is part of the cycle because there is always still a composite alarm that depends on that alarm that you want to delete.&lt;/p&gt; &lt;p&gt;To get out of such a situation, you must break the cycle by changing the rule of one of the composite alarms in the cycle to remove a dependency that creates the cycle. The simplest change to make to break a cycle is to change the &lt;code&gt;AlarmRule&lt;/code&gt; of one of the alarms to &lt;code&gt;false&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;Additionally, the evaluation of composite alarms stops if CloudWatch detects a cycle in the evaluation path. &lt;/p&gt; &lt;/note&gt;
     * @param alarmNames The alarms to be deleted. Do not enclose the alarm names in quote marks. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETDeleteAlarmsWithHttpInfo(List<String> alarmNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteAlarmsValidateBeforeCall(alarmNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified alarms. You can delete up to 100 alarms in one operation. However, this total can include no more than one composite alarm. For example, you could delete 99 metric alarms and one composite alarms with one operation, but you can&#39;t delete two composite alarms with one operation.&lt;/p&gt; &lt;p&gt; If you specify an incorrect alarm name or make any other error in the operation, no alarms are deleted. To confirm that alarms were deleted successfully, you can use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeAlarms.html\&quot;&gt;DescribeAlarms&lt;/a&gt; operation after using &lt;code&gt;DeleteAlarms&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;It is possible to create a loop or cycle of composite alarms, where composite alarm A depends on composite alarm B, and composite alarm B also depends on composite alarm A. In this scenario, you can&#39;t delete any composite alarm that is part of the cycle because there is always still a composite alarm that depends on that alarm that you want to delete.&lt;/p&gt; &lt;p&gt;To get out of such a situation, you must break the cycle by changing the rule of one of the composite alarms in the cycle to remove a dependency that creates the cycle. The simplest change to make to break a cycle is to change the &lt;code&gt;AlarmRule&lt;/code&gt; of one of the alarms to &lt;code&gt;false&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;Additionally, the evaluation of composite alarms stops if CloudWatch detects a cycle in the evaluation path. &lt;/p&gt; &lt;/note&gt;
     * @param alarmNames The alarms to be deleted. Do not enclose the alarm names in quote marks. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteAlarmsAsync(List<String> alarmNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteAlarmsValidateBeforeCall(alarmNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteAnomalyDetector
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param namespace The namespace associated with the anomaly detection model to delete. (optional)
     * @param metricName The metric name associated with the anomaly detection model to delete. (optional)
     * @param dimensions The metric dimensions associated with the anomaly detection model to delete. (optional)
     * @param stat The statistic associated with the anomaly detection model to delete. (optional)
     * @param singleMetricAnomalyDetector &lt;p&gt;A single metric anomaly detector to be deleted.&lt;/p&gt; &lt;p&gt;When using &lt;code&gt;SingleMetricAnomalyDetector&lt;/code&gt;, you cannot include the following parameters in the same operation:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Dimensions&lt;/code&gt;,&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MetricName&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Namespace&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Stat&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;the &lt;code&gt;MetricMathAnomalyDetector&lt;/code&gt; parameters of &lt;code&gt;DeleteAnomalyDetectorInput&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Instead, specify the single metric anomaly detector attributes as part of the &lt;code&gt;SingleMetricAnomalyDetector&lt;/code&gt; property.&lt;/p&gt; (optional)
     * @param metricMathAnomalyDetector &lt;p&gt;The metric math anomaly detector to be deleted.&lt;/p&gt; &lt;p&gt;When using &lt;code&gt;MetricMathAnomalyDetector&lt;/code&gt;, you cannot include following parameters in the same operation:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Dimensions&lt;/code&gt;,&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MetricName&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Namespace&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Stat&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;the &lt;code&gt;SingleMetricAnomalyDetector&lt;/code&gt; parameters of &lt;code&gt;DeleteAnomalyDetectorInput&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Instead, specify the metric math anomaly detector attributes as part of the &lt;code&gt;MetricMathAnomalyDetector&lt;/code&gt; property.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteAnomalyDetectorCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String namespace, String metricName, List<Dimension> dimensions, String stat, GETDeleteAnomalyDetectorSingleMetricAnomalyDetectorParameter singleMetricAnomalyDetector, GETDeleteAnomalyDetectorMetricMathAnomalyDetectorParameter metricMathAnomalyDetector, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteAnomalyDetector";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (namespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Namespace", namespace));
        }

        if (metricName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MetricName", metricName));
        }

        if (dimensions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Dimensions", dimensions));
        }

        if (stat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Stat", stat));
        }

        if (singleMetricAnomalyDetector != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SingleMetricAnomalyDetector", singleMetricAnomalyDetector));
        }

        if (metricMathAnomalyDetector != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MetricMathAnomalyDetector", metricMathAnomalyDetector));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteAnomalyDetectorValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String namespace, String metricName, List<Dimension> dimensions, String stat, GETDeleteAnomalyDetectorSingleMetricAnomalyDetectorParameter singleMetricAnomalyDetector, GETDeleteAnomalyDetectorMetricMathAnomalyDetectorParameter metricMathAnomalyDetector, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteAnomalyDetector(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteAnomalyDetector(Async)");
        }

        return gETDeleteAnomalyDetectorCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, namespace, metricName, dimensions, stat, singleMetricAnomalyDetector, metricMathAnomalyDetector, _callback);

    }

    /**
     * 
     *  Deletes the specified anomaly detection model from your account. For more information about how to delete an anomaly detection model, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Create_Anomaly_Detection_Alarm.html#Delete_Anomaly_Detection_Model\&quot;&gt;Deleting an anomaly detection model&lt;/a&gt; in the &lt;i&gt;CloudWatch User Guide&lt;/i&gt;. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param namespace The namespace associated with the anomaly detection model to delete. (optional)
     * @param metricName The metric name associated with the anomaly detection model to delete. (optional)
     * @param dimensions The metric dimensions associated with the anomaly detection model to delete. (optional)
     * @param stat The statistic associated with the anomaly detection model to delete. (optional)
     * @param singleMetricAnomalyDetector &lt;p&gt;A single metric anomaly detector to be deleted.&lt;/p&gt; &lt;p&gt;When using &lt;code&gt;SingleMetricAnomalyDetector&lt;/code&gt;, you cannot include the following parameters in the same operation:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Dimensions&lt;/code&gt;,&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MetricName&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Namespace&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Stat&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;the &lt;code&gt;MetricMathAnomalyDetector&lt;/code&gt; parameters of &lt;code&gt;DeleteAnomalyDetectorInput&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Instead, specify the single metric anomaly detector attributes as part of the &lt;code&gt;SingleMetricAnomalyDetector&lt;/code&gt; property.&lt;/p&gt; (optional)
     * @param metricMathAnomalyDetector &lt;p&gt;The metric math anomaly detector to be deleted.&lt;/p&gt; &lt;p&gt;When using &lt;code&gt;MetricMathAnomalyDetector&lt;/code&gt;, you cannot include following parameters in the same operation:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Dimensions&lt;/code&gt;,&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MetricName&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Namespace&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Stat&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;the &lt;code&gt;SingleMetricAnomalyDetector&lt;/code&gt; parameters of &lt;code&gt;DeleteAnomalyDetectorInput&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Instead, specify the metric math anomaly detector attributes as part of the &lt;code&gt;MetricMathAnomalyDetector&lt;/code&gt; property.&lt;/p&gt; (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETDeleteAnomalyDetector(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String namespace, String metricName, List<Dimension> dimensions, String stat, GETDeleteAnomalyDetectorSingleMetricAnomalyDetectorParameter singleMetricAnomalyDetector, GETDeleteAnomalyDetectorMetricMathAnomalyDetectorParameter metricMathAnomalyDetector) throws ApiException {
        ApiResponse<Object> localVarResp = gETDeleteAnomalyDetectorWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, namespace, metricName, dimensions, stat, singleMetricAnomalyDetector, metricMathAnomalyDetector);
        return localVarResp.getData();
    }

    /**
     * 
     *  Deletes the specified anomaly detection model from your account. For more information about how to delete an anomaly detection model, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Create_Anomaly_Detection_Alarm.html#Delete_Anomaly_Detection_Model\&quot;&gt;Deleting an anomaly detection model&lt;/a&gt; in the &lt;i&gt;CloudWatch User Guide&lt;/i&gt;. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param namespace The namespace associated with the anomaly detection model to delete. (optional)
     * @param metricName The metric name associated with the anomaly detection model to delete. (optional)
     * @param dimensions The metric dimensions associated with the anomaly detection model to delete. (optional)
     * @param stat The statistic associated with the anomaly detection model to delete. (optional)
     * @param singleMetricAnomalyDetector &lt;p&gt;A single metric anomaly detector to be deleted.&lt;/p&gt; &lt;p&gt;When using &lt;code&gt;SingleMetricAnomalyDetector&lt;/code&gt;, you cannot include the following parameters in the same operation:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Dimensions&lt;/code&gt;,&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MetricName&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Namespace&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Stat&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;the &lt;code&gt;MetricMathAnomalyDetector&lt;/code&gt; parameters of &lt;code&gt;DeleteAnomalyDetectorInput&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Instead, specify the single metric anomaly detector attributes as part of the &lt;code&gt;SingleMetricAnomalyDetector&lt;/code&gt; property.&lt;/p&gt; (optional)
     * @param metricMathAnomalyDetector &lt;p&gt;The metric math anomaly detector to be deleted.&lt;/p&gt; &lt;p&gt;When using &lt;code&gt;MetricMathAnomalyDetector&lt;/code&gt;, you cannot include following parameters in the same operation:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Dimensions&lt;/code&gt;,&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MetricName&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Namespace&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Stat&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;the &lt;code&gt;SingleMetricAnomalyDetector&lt;/code&gt; parameters of &lt;code&gt;DeleteAnomalyDetectorInput&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Instead, specify the metric math anomaly detector attributes as part of the &lt;code&gt;MetricMathAnomalyDetector&lt;/code&gt; property.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETDeleteAnomalyDetectorWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String namespace, String metricName, List<Dimension> dimensions, String stat, GETDeleteAnomalyDetectorSingleMetricAnomalyDetectorParameter singleMetricAnomalyDetector, GETDeleteAnomalyDetectorMetricMathAnomalyDetectorParameter metricMathAnomalyDetector) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteAnomalyDetectorValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, namespace, metricName, dimensions, stat, singleMetricAnomalyDetector, metricMathAnomalyDetector, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Deletes the specified anomaly detection model from your account. For more information about how to delete an anomaly detection model, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Create_Anomaly_Detection_Alarm.html#Delete_Anomaly_Detection_Model\&quot;&gt;Deleting an anomaly detection model&lt;/a&gt; in the &lt;i&gt;CloudWatch User Guide&lt;/i&gt;. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param namespace The namespace associated with the anomaly detection model to delete. (optional)
     * @param metricName The metric name associated with the anomaly detection model to delete. (optional)
     * @param dimensions The metric dimensions associated with the anomaly detection model to delete. (optional)
     * @param stat The statistic associated with the anomaly detection model to delete. (optional)
     * @param singleMetricAnomalyDetector &lt;p&gt;A single metric anomaly detector to be deleted.&lt;/p&gt; &lt;p&gt;When using &lt;code&gt;SingleMetricAnomalyDetector&lt;/code&gt;, you cannot include the following parameters in the same operation:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Dimensions&lt;/code&gt;,&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MetricName&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Namespace&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Stat&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;the &lt;code&gt;MetricMathAnomalyDetector&lt;/code&gt; parameters of &lt;code&gt;DeleteAnomalyDetectorInput&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Instead, specify the single metric anomaly detector attributes as part of the &lt;code&gt;SingleMetricAnomalyDetector&lt;/code&gt; property.&lt;/p&gt; (optional)
     * @param metricMathAnomalyDetector &lt;p&gt;The metric math anomaly detector to be deleted.&lt;/p&gt; &lt;p&gt;When using &lt;code&gt;MetricMathAnomalyDetector&lt;/code&gt;, you cannot include following parameters in the same operation:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Dimensions&lt;/code&gt;,&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MetricName&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Namespace&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Stat&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;the &lt;code&gt;SingleMetricAnomalyDetector&lt;/code&gt; parameters of &lt;code&gt;DeleteAnomalyDetectorInput&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Instead, specify the metric math anomaly detector attributes as part of the &lt;code&gt;MetricMathAnomalyDetector&lt;/code&gt; property.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteAnomalyDetectorAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String namespace, String metricName, List<Dimension> dimensions, String stat, GETDeleteAnomalyDetectorSingleMetricAnomalyDetectorParameter singleMetricAnomalyDetector, GETDeleteAnomalyDetectorMetricMathAnomalyDetectorParameter metricMathAnomalyDetector, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteAnomalyDetectorValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, namespace, metricName, dimensions, stat, singleMetricAnomalyDetector, metricMathAnomalyDetector, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteDashboards
     * @param dashboardNames The dashboards to be deleted. This parameter is required. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DashboardNotFoundError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteDashboardsCall(List<String> dashboardNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteDashboards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dashboardNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "DashboardNames", dashboardNames));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteDashboardsValidateBeforeCall(List<String> dashboardNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardNames' is set
        if (dashboardNames == null) {
            throw new ApiException("Missing the required parameter 'dashboardNames' when calling gETDeleteDashboards(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteDashboards(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteDashboards(Async)");
        }

        return gETDeleteDashboardsCall(dashboardNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes all dashboards that you specify. You can specify up to 100 dashboards to delete. If there is an error during this call, no dashboards are deleted.
     * @param dashboardNames The dashboards to be deleted. This parameter is required. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DashboardNotFoundError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public Object gETDeleteDashboards(List<String> dashboardNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETDeleteDashboardsWithHttpInfo(dashboardNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes all dashboards that you specify. You can specify up to 100 dashboards to delete. If there is an error during this call, no dashboards are deleted.
     * @param dashboardNames The dashboards to be deleted. This parameter is required. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DashboardNotFoundError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETDeleteDashboardsWithHttpInfo(List<String> dashboardNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteDashboardsValidateBeforeCall(dashboardNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes all dashboards that you specify. You can specify up to 100 dashboards to delete. If there is an error during this call, no dashboards are deleted.
     * @param dashboardNames The dashboards to be deleted. This parameter is required. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DashboardNotFoundError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteDashboardsAsync(List<String> dashboardNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteDashboardsValidateBeforeCall(dashboardNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteInsightRules
     * @param ruleNames An array of the rule names to delete. If you need to find out the names of your rules, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeInsightRules.html\&quot;&gt;DescribeInsightRules&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteInsightRulesCall(List<String> ruleNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteInsightRules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ruleNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "RuleNames", ruleNames));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteInsightRulesValidateBeforeCall(List<String> ruleNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleNames' is set
        if (ruleNames == null) {
            throw new ApiException("Missing the required parameter 'ruleNames' when calling gETDeleteInsightRules(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteInsightRules(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteInsightRules(Async)");
        }

        return gETDeleteInsightRulesCall(ruleNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Permanently deletes the specified Contributor Insights rules.&lt;/p&gt; &lt;p&gt;If you create a rule, delete it, and then re-create it with the same name, historical data from the first time the rule was created might not be available.&lt;/p&gt;
     * @param ruleNames An array of the rule names to delete. If you need to find out the names of your rules, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeInsightRules.html\&quot;&gt;DescribeInsightRules&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteInsightRulesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteInsightRulesOutput gETDeleteInsightRules(List<String> ruleNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteInsightRulesOutput> localVarResp = gETDeleteInsightRulesWithHttpInfo(ruleNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Permanently deletes the specified Contributor Insights rules.&lt;/p&gt; &lt;p&gt;If you create a rule, delete it, and then re-create it with the same name, historical data from the first time the rule was created might not be available.&lt;/p&gt;
     * @param ruleNames An array of the rule names to delete. If you need to find out the names of your rules, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeInsightRules.html\&quot;&gt;DescribeInsightRules&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteInsightRulesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteInsightRulesOutput> gETDeleteInsightRulesWithHttpInfo(List<String> ruleNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteInsightRulesValidateBeforeCall(ruleNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteInsightRulesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Permanently deletes the specified Contributor Insights rules.&lt;/p&gt; &lt;p&gt;If you create a rule, delete it, and then re-create it with the same name, historical data from the first time the rule was created might not be available.&lt;/p&gt;
     * @param ruleNames An array of the rule names to delete. If you need to find out the names of your rules, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeInsightRules.html\&quot;&gt;DescribeInsightRules&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteInsightRulesAsync(List<String> ruleNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteInsightRulesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteInsightRulesValidateBeforeCall(ruleNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteInsightRulesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteMetricStream
     * @param name The name of the metric stream to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteMetricStreamCall(String name, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteMetricStream";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Name", name));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteMetricStreamValidateBeforeCall(String name, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling gETDeleteMetricStream(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteMetricStream(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteMetricStream(Async)");
        }

        return gETDeleteMetricStreamCall(name, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Permanently deletes the metric stream that you specify.
     * @param name The name of the metric stream to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETDeleteMetricStream(String name, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETDeleteMetricStreamWithHttpInfo(name, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Permanently deletes the metric stream that you specify.
     * @param name The name of the metric stream to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETDeleteMetricStreamWithHttpInfo(String name, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteMetricStreamValidateBeforeCall(name, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Permanently deletes the metric stream that you specify.
     * @param name The name of the metric stream to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteMetricStreamAsync(String name, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteMetricStreamValidateBeforeCall(name, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeAlarmHistory
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param alarmName The name of the alarm. (optional)
     * @param alarmTypes Use this parameter to specify whether you want the operation to return metric alarms or composite alarms. If you omit this parameter, only metric alarms are returned. (optional)
     * @param historyItemType The type of alarm histories to retrieve. (optional)
     * @param startDate The starting date to retrieve alarm history. (optional)
     * @param endDate The ending date to retrieve alarm history. (optional)
     * @param maxRecords The maximum number of alarm history records to retrieve. (optional)
     * @param nextToken The token returned by a previous call to indicate that there is more data available. (optional)
     * @param scanBy Specified whether to return the newest or oldest alarm history first. Specify &lt;code&gt;TimestampDescending&lt;/code&gt; to have the newest event history returned first, and specify &lt;code&gt;TimestampAscending&lt;/code&gt; to have the oldest history returned first. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeAlarmHistoryCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String alarmName, List<AlarmType> alarmTypes, String historyItemType, OffsetDateTime startDate, OffsetDateTime endDate, Integer maxRecords, String nextToken, String scanBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeAlarmHistory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alarmName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AlarmName", alarmName));
        }

        if (alarmTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "AlarmTypes", alarmTypes));
        }

        if (historyItemType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("HistoryItemType", historyItemType));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndDate", endDate));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (scanBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ScanBy", scanBy));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeAlarmHistoryValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String alarmName, List<AlarmType> alarmTypes, String historyItemType, OffsetDateTime startDate, OffsetDateTime endDate, Integer maxRecords, String nextToken, String scanBy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeAlarmHistory(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeAlarmHistory(Async)");
        }

        return gETDescribeAlarmHistoryCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, alarmName, alarmTypes, historyItemType, startDate, endDate, maxRecords, nextToken, scanBy, _callback);

    }

    /**
     * 
     * &lt;p&gt;Retrieves the history for the specified alarm. You can filter the results by date range or item type. If an alarm name is not specified, the histories for either all metric alarms or all composite alarms are returned.&lt;/p&gt; &lt;p&gt;CloudWatch retains the history of an alarm even if you delete the alarm.&lt;/p&gt; &lt;p&gt;To use this operation and return information about a composite alarm, you must be signed on with the &lt;code&gt;cloudwatch:DescribeAlarmHistory&lt;/code&gt; permission that is scoped to &lt;code&gt;*&lt;/code&gt;. You can&#39;t return information about composite alarms if your &lt;code&gt;cloudwatch:DescribeAlarmHistory&lt;/code&gt; permission has a narrower scope.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param alarmName The name of the alarm. (optional)
     * @param alarmTypes Use this parameter to specify whether you want the operation to return metric alarms or composite alarms. If you omit this parameter, only metric alarms are returned. (optional)
     * @param historyItemType The type of alarm histories to retrieve. (optional)
     * @param startDate The starting date to retrieve alarm history. (optional)
     * @param endDate The ending date to retrieve alarm history. (optional)
     * @param maxRecords The maximum number of alarm history records to retrieve. (optional)
     * @param nextToken The token returned by a previous call to indicate that there is more data available. (optional)
     * @param scanBy Specified whether to return the newest or oldest alarm history first. Specify &lt;code&gt;TimestampDescending&lt;/code&gt; to have the newest event history returned first, and specify &lt;code&gt;TimestampAscending&lt;/code&gt; to have the oldest history returned first. (optional)
     * @return DescribeAlarmHistoryOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public DescribeAlarmHistoryOutput gETDescribeAlarmHistory(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String alarmName, List<AlarmType> alarmTypes, String historyItemType, OffsetDateTime startDate, OffsetDateTime endDate, Integer maxRecords, String nextToken, String scanBy) throws ApiException {
        ApiResponse<DescribeAlarmHistoryOutput> localVarResp = gETDescribeAlarmHistoryWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, alarmName, alarmTypes, historyItemType, startDate, endDate, maxRecords, nextToken, scanBy);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Retrieves the history for the specified alarm. You can filter the results by date range or item type. If an alarm name is not specified, the histories for either all metric alarms or all composite alarms are returned.&lt;/p&gt; &lt;p&gt;CloudWatch retains the history of an alarm even if you delete the alarm.&lt;/p&gt; &lt;p&gt;To use this operation and return information about a composite alarm, you must be signed on with the &lt;code&gt;cloudwatch:DescribeAlarmHistory&lt;/code&gt; permission that is scoped to &lt;code&gt;*&lt;/code&gt;. You can&#39;t return information about composite alarms if your &lt;code&gt;cloudwatch:DescribeAlarmHistory&lt;/code&gt; permission has a narrower scope.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param alarmName The name of the alarm. (optional)
     * @param alarmTypes Use this parameter to specify whether you want the operation to return metric alarms or composite alarms. If you omit this parameter, only metric alarms are returned. (optional)
     * @param historyItemType The type of alarm histories to retrieve. (optional)
     * @param startDate The starting date to retrieve alarm history. (optional)
     * @param endDate The ending date to retrieve alarm history. (optional)
     * @param maxRecords The maximum number of alarm history records to retrieve. (optional)
     * @param nextToken The token returned by a previous call to indicate that there is more data available. (optional)
     * @param scanBy Specified whether to return the newest or oldest alarm history first. Specify &lt;code&gt;TimestampDescending&lt;/code&gt; to have the newest event history returned first, and specify &lt;code&gt;TimestampAscending&lt;/code&gt; to have the oldest history returned first. (optional)
     * @return ApiResponse&lt;DescribeAlarmHistoryOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeAlarmHistoryOutput> gETDescribeAlarmHistoryWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String alarmName, List<AlarmType> alarmTypes, String historyItemType, OffsetDateTime startDate, OffsetDateTime endDate, Integer maxRecords, String nextToken, String scanBy) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeAlarmHistoryValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, alarmName, alarmTypes, historyItemType, startDate, endDate, maxRecords, nextToken, scanBy, null);
        Type localVarReturnType = new TypeToken<DescribeAlarmHistoryOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Retrieves the history for the specified alarm. You can filter the results by date range or item type. If an alarm name is not specified, the histories for either all metric alarms or all composite alarms are returned.&lt;/p&gt; &lt;p&gt;CloudWatch retains the history of an alarm even if you delete the alarm.&lt;/p&gt; &lt;p&gt;To use this operation and return information about a composite alarm, you must be signed on with the &lt;code&gt;cloudwatch:DescribeAlarmHistory&lt;/code&gt; permission that is scoped to &lt;code&gt;*&lt;/code&gt;. You can&#39;t return information about composite alarms if your &lt;code&gt;cloudwatch:DescribeAlarmHistory&lt;/code&gt; permission has a narrower scope.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param alarmName The name of the alarm. (optional)
     * @param alarmTypes Use this parameter to specify whether you want the operation to return metric alarms or composite alarms. If you omit this parameter, only metric alarms are returned. (optional)
     * @param historyItemType The type of alarm histories to retrieve. (optional)
     * @param startDate The starting date to retrieve alarm history. (optional)
     * @param endDate The ending date to retrieve alarm history. (optional)
     * @param maxRecords The maximum number of alarm history records to retrieve. (optional)
     * @param nextToken The token returned by a previous call to indicate that there is more data available. (optional)
     * @param scanBy Specified whether to return the newest or oldest alarm history first. Specify &lt;code&gt;TimestampDescending&lt;/code&gt; to have the newest event history returned first, and specify &lt;code&gt;TimestampAscending&lt;/code&gt; to have the oldest history returned first. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeAlarmHistoryAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String alarmName, List<AlarmType> alarmTypes, String historyItemType, OffsetDateTime startDate, OffsetDateTime endDate, Integer maxRecords, String nextToken, String scanBy, final ApiCallback<DescribeAlarmHistoryOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeAlarmHistoryValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, alarmName, alarmTypes, historyItemType, startDate, endDate, maxRecords, nextToken, scanBy, _callback);
        Type localVarReturnType = new TypeToken<DescribeAlarmHistoryOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeAlarms
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param alarmNames The names of the alarms to retrieve information about. (optional)
     * @param alarmNamePrefix &lt;p&gt;An alarm name prefix. If you specify this parameter, you receive information about all alarms that have names that start with this prefix.&lt;/p&gt; &lt;p&gt;If this parameter is specified, you cannot specify &lt;code&gt;AlarmNames&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param alarmTypes Use this parameter to specify whether you want the operation to return metric alarms or composite alarms. If you omit this parameter, only metric alarms are returned. (optional)
     * @param childrenOfAlarmName &lt;p&gt;If you use this parameter and specify the name of a composite alarm, the operation returns information about the \&quot;children\&quot; alarms of the alarm you specify. These are the metric alarms and composite alarms referenced in the &lt;code&gt;AlarmRule&lt;/code&gt; field of the composite alarm that you specify in &lt;code&gt;ChildrenOfAlarmName&lt;/code&gt;. Information about the composite alarm that you name in &lt;code&gt;ChildrenOfAlarmName&lt;/code&gt; is not returned.&lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;ChildrenOfAlarmName&lt;/code&gt;, you cannot specify any other parameters in the request except for &lt;code&gt;MaxRecords&lt;/code&gt; and &lt;code&gt;NextToken&lt;/code&gt;. If you do so, you receive a validation error.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only the &lt;code&gt;Alarm Name&lt;/code&gt;, &lt;code&gt;ARN&lt;/code&gt;, &lt;code&gt;StateValue&lt;/code&gt; (OK/ALARM/INSUFFICIENT_DATA), and &lt;code&gt;StateUpdatedTimestamp&lt;/code&gt; information are returned by this operation when you use this parameter. To get complete information about these alarms, perform another &lt;code&gt;DescribeAlarms&lt;/code&gt; operation and specify the parent alarm names in the &lt;code&gt;AlarmNames&lt;/code&gt; parameter.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param parentsOfAlarmName &lt;p&gt;If you use this parameter and specify the name of a metric or composite alarm, the operation returns information about the \&quot;parent\&quot; alarms of the alarm you specify. These are the composite alarms that have &lt;code&gt;AlarmRule&lt;/code&gt; parameters that reference the alarm named in &lt;code&gt;ParentsOfAlarmName&lt;/code&gt;. Information about the alarm that you specify in &lt;code&gt;ParentsOfAlarmName&lt;/code&gt; is not returned.&lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;ParentsOfAlarmName&lt;/code&gt;, you cannot specify any other parameters in the request except for &lt;code&gt;MaxRecords&lt;/code&gt; and &lt;code&gt;NextToken&lt;/code&gt;. If you do so, you receive a validation error.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only the Alarm Name and ARN are returned by this operation when you use this parameter. To get complete information about these alarms, perform another &lt;code&gt;DescribeAlarms&lt;/code&gt; operation and specify the parent alarm names in the &lt;code&gt;AlarmNames&lt;/code&gt; parameter.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param stateValue Specify this parameter to receive information only about alarms that are currently in the state that you specify. (optional)
     * @param actionPrefix Use this parameter to filter the results of the operation to only those alarms that use a certain alarm action. For example, you could specify the ARN of an SNS topic to find all alarms that send notifications to that topic. (optional)
     * @param maxRecords The maximum number of alarm descriptions to retrieve. (optional)
     * @param nextToken The token returned by a previous call to indicate that there is more data available. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeAlarmsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> alarmNames, String alarmNamePrefix, List<AlarmType> alarmTypes, String childrenOfAlarmName, String parentsOfAlarmName, String stateValue, String actionPrefix, Integer maxRecords, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeAlarms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alarmNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "AlarmNames", alarmNames));
        }

        if (alarmNamePrefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AlarmNamePrefix", alarmNamePrefix));
        }

        if (alarmTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "AlarmTypes", alarmTypes));
        }

        if (childrenOfAlarmName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ChildrenOfAlarmName", childrenOfAlarmName));
        }

        if (parentsOfAlarmName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ParentsOfAlarmName", parentsOfAlarmName));
        }

        if (stateValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StateValue", stateValue));
        }

        if (actionPrefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ActionPrefix", actionPrefix));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeAlarmsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> alarmNames, String alarmNamePrefix, List<AlarmType> alarmTypes, String childrenOfAlarmName, String parentsOfAlarmName, String stateValue, String actionPrefix, Integer maxRecords, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeAlarms(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeAlarms(Async)");
        }

        return gETDescribeAlarmsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, alarmNames, alarmNamePrefix, alarmTypes, childrenOfAlarmName, parentsOfAlarmName, stateValue, actionPrefix, maxRecords, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Retrieves the specified alarms. You can filter the results by specifying a prefix for the alarm name, the alarm state, or a prefix for any action.&lt;/p&gt; &lt;p&gt;To use this operation and return information about composite alarms, you must be signed on with the &lt;code&gt;cloudwatch:DescribeAlarms&lt;/code&gt; permission that is scoped to &lt;code&gt;*&lt;/code&gt;. You can&#39;t return information about composite alarms if your &lt;code&gt;cloudwatch:DescribeAlarms&lt;/code&gt; permission has a narrower scope.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param alarmNames The names of the alarms to retrieve information about. (optional)
     * @param alarmNamePrefix &lt;p&gt;An alarm name prefix. If you specify this parameter, you receive information about all alarms that have names that start with this prefix.&lt;/p&gt; &lt;p&gt;If this parameter is specified, you cannot specify &lt;code&gt;AlarmNames&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param alarmTypes Use this parameter to specify whether you want the operation to return metric alarms or composite alarms. If you omit this parameter, only metric alarms are returned. (optional)
     * @param childrenOfAlarmName &lt;p&gt;If you use this parameter and specify the name of a composite alarm, the operation returns information about the \&quot;children\&quot; alarms of the alarm you specify. These are the metric alarms and composite alarms referenced in the &lt;code&gt;AlarmRule&lt;/code&gt; field of the composite alarm that you specify in &lt;code&gt;ChildrenOfAlarmName&lt;/code&gt;. Information about the composite alarm that you name in &lt;code&gt;ChildrenOfAlarmName&lt;/code&gt; is not returned.&lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;ChildrenOfAlarmName&lt;/code&gt;, you cannot specify any other parameters in the request except for &lt;code&gt;MaxRecords&lt;/code&gt; and &lt;code&gt;NextToken&lt;/code&gt;. If you do so, you receive a validation error.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only the &lt;code&gt;Alarm Name&lt;/code&gt;, &lt;code&gt;ARN&lt;/code&gt;, &lt;code&gt;StateValue&lt;/code&gt; (OK/ALARM/INSUFFICIENT_DATA), and &lt;code&gt;StateUpdatedTimestamp&lt;/code&gt; information are returned by this operation when you use this parameter. To get complete information about these alarms, perform another &lt;code&gt;DescribeAlarms&lt;/code&gt; operation and specify the parent alarm names in the &lt;code&gt;AlarmNames&lt;/code&gt; parameter.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param parentsOfAlarmName &lt;p&gt;If you use this parameter and specify the name of a metric or composite alarm, the operation returns information about the \&quot;parent\&quot; alarms of the alarm you specify. These are the composite alarms that have &lt;code&gt;AlarmRule&lt;/code&gt; parameters that reference the alarm named in &lt;code&gt;ParentsOfAlarmName&lt;/code&gt;. Information about the alarm that you specify in &lt;code&gt;ParentsOfAlarmName&lt;/code&gt; is not returned.&lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;ParentsOfAlarmName&lt;/code&gt;, you cannot specify any other parameters in the request except for &lt;code&gt;MaxRecords&lt;/code&gt; and &lt;code&gt;NextToken&lt;/code&gt;. If you do so, you receive a validation error.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only the Alarm Name and ARN are returned by this operation when you use this parameter. To get complete information about these alarms, perform another &lt;code&gt;DescribeAlarms&lt;/code&gt; operation and specify the parent alarm names in the &lt;code&gt;AlarmNames&lt;/code&gt; parameter.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param stateValue Specify this parameter to receive information only about alarms that are currently in the state that you specify. (optional)
     * @param actionPrefix Use this parameter to filter the results of the operation to only those alarms that use a certain alarm action. For example, you could specify the ARN of an SNS topic to find all alarms that send notifications to that topic. (optional)
     * @param maxRecords The maximum number of alarm descriptions to retrieve. (optional)
     * @param nextToken The token returned by a previous call to indicate that there is more data available. (optional)
     * @return DescribeAlarmsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public DescribeAlarmsOutput gETDescribeAlarms(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> alarmNames, String alarmNamePrefix, List<AlarmType> alarmTypes, String childrenOfAlarmName, String parentsOfAlarmName, String stateValue, String actionPrefix, Integer maxRecords, String nextToken) throws ApiException {
        ApiResponse<DescribeAlarmsOutput> localVarResp = gETDescribeAlarmsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, alarmNames, alarmNamePrefix, alarmTypes, childrenOfAlarmName, parentsOfAlarmName, stateValue, actionPrefix, maxRecords, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Retrieves the specified alarms. You can filter the results by specifying a prefix for the alarm name, the alarm state, or a prefix for any action.&lt;/p&gt; &lt;p&gt;To use this operation and return information about composite alarms, you must be signed on with the &lt;code&gt;cloudwatch:DescribeAlarms&lt;/code&gt; permission that is scoped to &lt;code&gt;*&lt;/code&gt;. You can&#39;t return information about composite alarms if your &lt;code&gt;cloudwatch:DescribeAlarms&lt;/code&gt; permission has a narrower scope.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param alarmNames The names of the alarms to retrieve information about. (optional)
     * @param alarmNamePrefix &lt;p&gt;An alarm name prefix. If you specify this parameter, you receive information about all alarms that have names that start with this prefix.&lt;/p&gt; &lt;p&gt;If this parameter is specified, you cannot specify &lt;code&gt;AlarmNames&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param alarmTypes Use this parameter to specify whether you want the operation to return metric alarms or composite alarms. If you omit this parameter, only metric alarms are returned. (optional)
     * @param childrenOfAlarmName &lt;p&gt;If you use this parameter and specify the name of a composite alarm, the operation returns information about the \&quot;children\&quot; alarms of the alarm you specify. These are the metric alarms and composite alarms referenced in the &lt;code&gt;AlarmRule&lt;/code&gt; field of the composite alarm that you specify in &lt;code&gt;ChildrenOfAlarmName&lt;/code&gt;. Information about the composite alarm that you name in &lt;code&gt;ChildrenOfAlarmName&lt;/code&gt; is not returned.&lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;ChildrenOfAlarmName&lt;/code&gt;, you cannot specify any other parameters in the request except for &lt;code&gt;MaxRecords&lt;/code&gt; and &lt;code&gt;NextToken&lt;/code&gt;. If you do so, you receive a validation error.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only the &lt;code&gt;Alarm Name&lt;/code&gt;, &lt;code&gt;ARN&lt;/code&gt;, &lt;code&gt;StateValue&lt;/code&gt; (OK/ALARM/INSUFFICIENT_DATA), and &lt;code&gt;StateUpdatedTimestamp&lt;/code&gt; information are returned by this operation when you use this parameter. To get complete information about these alarms, perform another &lt;code&gt;DescribeAlarms&lt;/code&gt; operation and specify the parent alarm names in the &lt;code&gt;AlarmNames&lt;/code&gt; parameter.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param parentsOfAlarmName &lt;p&gt;If you use this parameter and specify the name of a metric or composite alarm, the operation returns information about the \&quot;parent\&quot; alarms of the alarm you specify. These are the composite alarms that have &lt;code&gt;AlarmRule&lt;/code&gt; parameters that reference the alarm named in &lt;code&gt;ParentsOfAlarmName&lt;/code&gt;. Information about the alarm that you specify in &lt;code&gt;ParentsOfAlarmName&lt;/code&gt; is not returned.&lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;ParentsOfAlarmName&lt;/code&gt;, you cannot specify any other parameters in the request except for &lt;code&gt;MaxRecords&lt;/code&gt; and &lt;code&gt;NextToken&lt;/code&gt;. If you do so, you receive a validation error.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only the Alarm Name and ARN are returned by this operation when you use this parameter. To get complete information about these alarms, perform another &lt;code&gt;DescribeAlarms&lt;/code&gt; operation and specify the parent alarm names in the &lt;code&gt;AlarmNames&lt;/code&gt; parameter.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param stateValue Specify this parameter to receive information only about alarms that are currently in the state that you specify. (optional)
     * @param actionPrefix Use this parameter to filter the results of the operation to only those alarms that use a certain alarm action. For example, you could specify the ARN of an SNS topic to find all alarms that send notifications to that topic. (optional)
     * @param maxRecords The maximum number of alarm descriptions to retrieve. (optional)
     * @param nextToken The token returned by a previous call to indicate that there is more data available. (optional)
     * @return ApiResponse&lt;DescribeAlarmsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeAlarmsOutput> gETDescribeAlarmsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> alarmNames, String alarmNamePrefix, List<AlarmType> alarmTypes, String childrenOfAlarmName, String parentsOfAlarmName, String stateValue, String actionPrefix, Integer maxRecords, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeAlarmsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, alarmNames, alarmNamePrefix, alarmTypes, childrenOfAlarmName, parentsOfAlarmName, stateValue, actionPrefix, maxRecords, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeAlarmsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Retrieves the specified alarms. You can filter the results by specifying a prefix for the alarm name, the alarm state, or a prefix for any action.&lt;/p&gt; &lt;p&gt;To use this operation and return information about composite alarms, you must be signed on with the &lt;code&gt;cloudwatch:DescribeAlarms&lt;/code&gt; permission that is scoped to &lt;code&gt;*&lt;/code&gt;. You can&#39;t return information about composite alarms if your &lt;code&gt;cloudwatch:DescribeAlarms&lt;/code&gt; permission has a narrower scope.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param alarmNames The names of the alarms to retrieve information about. (optional)
     * @param alarmNamePrefix &lt;p&gt;An alarm name prefix. If you specify this parameter, you receive information about all alarms that have names that start with this prefix.&lt;/p&gt; &lt;p&gt;If this parameter is specified, you cannot specify &lt;code&gt;AlarmNames&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param alarmTypes Use this parameter to specify whether you want the operation to return metric alarms or composite alarms. If you omit this parameter, only metric alarms are returned. (optional)
     * @param childrenOfAlarmName &lt;p&gt;If you use this parameter and specify the name of a composite alarm, the operation returns information about the \&quot;children\&quot; alarms of the alarm you specify. These are the metric alarms and composite alarms referenced in the &lt;code&gt;AlarmRule&lt;/code&gt; field of the composite alarm that you specify in &lt;code&gt;ChildrenOfAlarmName&lt;/code&gt;. Information about the composite alarm that you name in &lt;code&gt;ChildrenOfAlarmName&lt;/code&gt; is not returned.&lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;ChildrenOfAlarmName&lt;/code&gt;, you cannot specify any other parameters in the request except for &lt;code&gt;MaxRecords&lt;/code&gt; and &lt;code&gt;NextToken&lt;/code&gt;. If you do so, you receive a validation error.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only the &lt;code&gt;Alarm Name&lt;/code&gt;, &lt;code&gt;ARN&lt;/code&gt;, &lt;code&gt;StateValue&lt;/code&gt; (OK/ALARM/INSUFFICIENT_DATA), and &lt;code&gt;StateUpdatedTimestamp&lt;/code&gt; information are returned by this operation when you use this parameter. To get complete information about these alarms, perform another &lt;code&gt;DescribeAlarms&lt;/code&gt; operation and specify the parent alarm names in the &lt;code&gt;AlarmNames&lt;/code&gt; parameter.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param parentsOfAlarmName &lt;p&gt;If you use this parameter and specify the name of a metric or composite alarm, the operation returns information about the \&quot;parent\&quot; alarms of the alarm you specify. These are the composite alarms that have &lt;code&gt;AlarmRule&lt;/code&gt; parameters that reference the alarm named in &lt;code&gt;ParentsOfAlarmName&lt;/code&gt;. Information about the alarm that you specify in &lt;code&gt;ParentsOfAlarmName&lt;/code&gt; is not returned.&lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;ParentsOfAlarmName&lt;/code&gt;, you cannot specify any other parameters in the request except for &lt;code&gt;MaxRecords&lt;/code&gt; and &lt;code&gt;NextToken&lt;/code&gt;. If you do so, you receive a validation error.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only the Alarm Name and ARN are returned by this operation when you use this parameter. To get complete information about these alarms, perform another &lt;code&gt;DescribeAlarms&lt;/code&gt; operation and specify the parent alarm names in the &lt;code&gt;AlarmNames&lt;/code&gt; parameter.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param stateValue Specify this parameter to receive information only about alarms that are currently in the state that you specify. (optional)
     * @param actionPrefix Use this parameter to filter the results of the operation to only those alarms that use a certain alarm action. For example, you could specify the ARN of an SNS topic to find all alarms that send notifications to that topic. (optional)
     * @param maxRecords The maximum number of alarm descriptions to retrieve. (optional)
     * @param nextToken The token returned by a previous call to indicate that there is more data available. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeAlarmsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> alarmNames, String alarmNamePrefix, List<AlarmType> alarmTypes, String childrenOfAlarmName, String parentsOfAlarmName, String stateValue, String actionPrefix, Integer maxRecords, String nextToken, final ApiCallback<DescribeAlarmsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeAlarmsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, alarmNames, alarmNamePrefix, alarmTypes, childrenOfAlarmName, parentsOfAlarmName, stateValue, actionPrefix, maxRecords, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeAlarmsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeAlarmsForMetric
     * @param metricName The name of the metric. (required)
     * @param namespace The namespace of the metric. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param statistic The statistic for the metric, other than percentiles. For percentile statistics, use &lt;code&gt;ExtendedStatistics&lt;/code&gt;. (optional)
     * @param extendedStatistic The percentile statistic for the metric. Specify a value between p0.0 and p100. (optional)
     * @param dimensions The dimensions associated with the metric. If the metric has any associated dimensions, you must specify them in order for the call to succeed. (optional)
     * @param period The period, in seconds, over which the statistic is applied. (optional)
     * @param unit The unit for the metric. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeAlarmsForMetricCall(String metricName, String namespace, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String statistic, String extendedStatistic, List<Dimension> dimensions, Integer period, String unit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeAlarmsForMetric";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metricName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MetricName", metricName));
        }

        if (namespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Namespace", namespace));
        }

        if (statistic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Statistic", statistic));
        }

        if (extendedStatistic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExtendedStatistic", extendedStatistic));
        }

        if (dimensions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Dimensions", dimensions));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (unit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Unit", unit));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeAlarmsForMetricValidateBeforeCall(String metricName, String namespace, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String statistic, String extendedStatistic, List<Dimension> dimensions, Integer period, String unit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'metricName' is set
        if (metricName == null) {
            throw new ApiException("Missing the required parameter 'metricName' when calling gETDescribeAlarmsForMetric(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling gETDescribeAlarmsForMetric(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeAlarmsForMetric(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeAlarmsForMetric(Async)");
        }

        return gETDescribeAlarmsForMetricCall(metricName, namespace, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, statistic, extendedStatistic, dimensions, period, unit, _callback);

    }

    /**
     * 
     * &lt;p&gt;Retrieves the alarms for the specified metric. To filter the results, specify a statistic, period, or unit.&lt;/p&gt; &lt;p&gt;This operation retrieves only standard alarms that are based on the specified metric. It does not return alarms based on math expressions that use the specified metric, or composite alarms that use the specified metric.&lt;/p&gt;
     * @param metricName The name of the metric. (required)
     * @param namespace The namespace of the metric. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param statistic The statistic for the metric, other than percentiles. For percentile statistics, use &lt;code&gt;ExtendedStatistics&lt;/code&gt;. (optional)
     * @param extendedStatistic The percentile statistic for the metric. Specify a value between p0.0 and p100. (optional)
     * @param dimensions The dimensions associated with the metric. If the metric has any associated dimensions, you must specify them in order for the call to succeed. (optional)
     * @param period The period, in seconds, over which the statistic is applied. (optional)
     * @param unit The unit for the metric. (optional)
     * @return DescribeAlarmsForMetricOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DescribeAlarmsForMetricOutput gETDescribeAlarmsForMetric(String metricName, String namespace, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String statistic, String extendedStatistic, List<Dimension> dimensions, Integer period, String unit) throws ApiException {
        ApiResponse<DescribeAlarmsForMetricOutput> localVarResp = gETDescribeAlarmsForMetricWithHttpInfo(metricName, namespace, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, statistic, extendedStatistic, dimensions, period, unit);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Retrieves the alarms for the specified metric. To filter the results, specify a statistic, period, or unit.&lt;/p&gt; &lt;p&gt;This operation retrieves only standard alarms that are based on the specified metric. It does not return alarms based on math expressions that use the specified metric, or composite alarms that use the specified metric.&lt;/p&gt;
     * @param metricName The name of the metric. (required)
     * @param namespace The namespace of the metric. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param statistic The statistic for the metric, other than percentiles. For percentile statistics, use &lt;code&gt;ExtendedStatistics&lt;/code&gt;. (optional)
     * @param extendedStatistic The percentile statistic for the metric. Specify a value between p0.0 and p100. (optional)
     * @param dimensions The dimensions associated with the metric. If the metric has any associated dimensions, you must specify them in order for the call to succeed. (optional)
     * @param period The period, in seconds, over which the statistic is applied. (optional)
     * @param unit The unit for the metric. (optional)
     * @return ApiResponse&lt;DescribeAlarmsForMetricOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeAlarmsForMetricOutput> gETDescribeAlarmsForMetricWithHttpInfo(String metricName, String namespace, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String statistic, String extendedStatistic, List<Dimension> dimensions, Integer period, String unit) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeAlarmsForMetricValidateBeforeCall(metricName, namespace, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, statistic, extendedStatistic, dimensions, period, unit, null);
        Type localVarReturnType = new TypeToken<DescribeAlarmsForMetricOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Retrieves the alarms for the specified metric. To filter the results, specify a statistic, period, or unit.&lt;/p&gt; &lt;p&gt;This operation retrieves only standard alarms that are based on the specified metric. It does not return alarms based on math expressions that use the specified metric, or composite alarms that use the specified metric.&lt;/p&gt;
     * @param metricName The name of the metric. (required)
     * @param namespace The namespace of the metric. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param statistic The statistic for the metric, other than percentiles. For percentile statistics, use &lt;code&gt;ExtendedStatistics&lt;/code&gt;. (optional)
     * @param extendedStatistic The percentile statistic for the metric. Specify a value between p0.0 and p100. (optional)
     * @param dimensions The dimensions associated with the metric. If the metric has any associated dimensions, you must specify them in order for the call to succeed. (optional)
     * @param period The period, in seconds, over which the statistic is applied. (optional)
     * @param unit The unit for the metric. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeAlarmsForMetricAsync(String metricName, String namespace, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String statistic, String extendedStatistic, List<Dimension> dimensions, Integer period, String unit, final ApiCallback<DescribeAlarmsForMetricOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeAlarmsForMetricValidateBeforeCall(metricName, namespace, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, statistic, extendedStatistic, dimensions, period, unit, _callback);
        Type localVarReturnType = new TypeToken<DescribeAlarmsForMetricOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeAnomalyDetectors
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Use the token returned by the previous operation to request the next page of results. (optional)
     * @param maxResults &lt;p&gt;The maximum number of results to return in one operation. The maximum value that you can specify is 100.&lt;/p&gt; &lt;p&gt;To retrieve the remaining results, make another call with the returned &lt;code&gt;NextToken&lt;/code&gt; value. &lt;/p&gt; (optional)
     * @param namespace Limits the results to only the anomaly detection models that are associated with the specified namespace. (optional)
     * @param metricName Limits the results to only the anomaly detection models that are associated with the specified metric name. If there are multiple metrics with this name in different namespaces that have anomaly detection models, they&#39;re all returned. (optional)
     * @param dimensions Limits the results to only the anomaly detection models that are associated with the specified metric dimensions. If there are multiple metrics that have these dimensions and have anomaly detection models associated, they&#39;re all returned. (optional)
     * @param anomalyDetectorTypes The anomaly detector types to request when using &lt;code&gt;DescribeAnomalyDetectorsInput&lt;/code&gt;. If empty, defaults to &lt;code&gt;SINGLE_METRIC&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeAnomalyDetectorsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String namespace, String metricName, List<Dimension> dimensions, List<AnomalyDetectorType> anomalyDetectorTypes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeAnomalyDetectors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (namespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Namespace", namespace));
        }

        if (metricName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MetricName", metricName));
        }

        if (dimensions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Dimensions", dimensions));
        }

        if (anomalyDetectorTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "AnomalyDetectorTypes", anomalyDetectorTypes));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeAnomalyDetectorsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String namespace, String metricName, List<Dimension> dimensions, List<AnomalyDetectorType> anomalyDetectorTypes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeAnomalyDetectors(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeAnomalyDetectors(Async)");
        }

        return gETDescribeAnomalyDetectorsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, namespace, metricName, dimensions, anomalyDetectorTypes, _callback);

    }

    /**
     * 
     * Lists the anomaly detection models that you have created in your account. For single metric anomaly detectors, you can list all of the models in your account or filter the results to only the models that are related to a certain namespace, metric name, or metric dimension. For metric math anomaly detectors, you can list them by adding &lt;code&gt;METRIC_MATH&lt;/code&gt; to the &lt;code&gt;AnomalyDetectorTypes&lt;/code&gt; array. This will return all metric math anomaly detectors in your account.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Use the token returned by the previous operation to request the next page of results. (optional)
     * @param maxResults &lt;p&gt;The maximum number of results to return in one operation. The maximum value that you can specify is 100.&lt;/p&gt; &lt;p&gt;To retrieve the remaining results, make another call with the returned &lt;code&gt;NextToken&lt;/code&gt; value. &lt;/p&gt; (optional)
     * @param namespace Limits the results to only the anomaly detection models that are associated with the specified namespace. (optional)
     * @param metricName Limits the results to only the anomaly detection models that are associated with the specified metric name. If there are multiple metrics with this name in different namespaces that have anomaly detection models, they&#39;re all returned. (optional)
     * @param dimensions Limits the results to only the anomaly detection models that are associated with the specified metric dimensions. If there are multiple metrics that have these dimensions and have anomaly detection models associated, they&#39;re all returned. (optional)
     * @param anomalyDetectorTypes The anomaly detector types to request when using &lt;code&gt;DescribeAnomalyDetectorsInput&lt;/code&gt;. If empty, defaults to &lt;code&gt;SINGLE_METRIC&lt;/code&gt;. (optional)
     * @return DescribeAnomalyDetectorsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeAnomalyDetectorsOutput gETDescribeAnomalyDetectors(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String namespace, String metricName, List<Dimension> dimensions, List<AnomalyDetectorType> anomalyDetectorTypes) throws ApiException {
        ApiResponse<DescribeAnomalyDetectorsOutput> localVarResp = gETDescribeAnomalyDetectorsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, namespace, metricName, dimensions, anomalyDetectorTypes);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the anomaly detection models that you have created in your account. For single metric anomaly detectors, you can list all of the models in your account or filter the results to only the models that are related to a certain namespace, metric name, or metric dimension. For metric math anomaly detectors, you can list them by adding &lt;code&gt;METRIC_MATH&lt;/code&gt; to the &lt;code&gt;AnomalyDetectorTypes&lt;/code&gt; array. This will return all metric math anomaly detectors in your account.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Use the token returned by the previous operation to request the next page of results. (optional)
     * @param maxResults &lt;p&gt;The maximum number of results to return in one operation. The maximum value that you can specify is 100.&lt;/p&gt; &lt;p&gt;To retrieve the remaining results, make another call with the returned &lt;code&gt;NextToken&lt;/code&gt; value. &lt;/p&gt; (optional)
     * @param namespace Limits the results to only the anomaly detection models that are associated with the specified namespace. (optional)
     * @param metricName Limits the results to only the anomaly detection models that are associated with the specified metric name. If there are multiple metrics with this name in different namespaces that have anomaly detection models, they&#39;re all returned. (optional)
     * @param dimensions Limits the results to only the anomaly detection models that are associated with the specified metric dimensions. If there are multiple metrics that have these dimensions and have anomaly detection models associated, they&#39;re all returned. (optional)
     * @param anomalyDetectorTypes The anomaly detector types to request when using &lt;code&gt;DescribeAnomalyDetectorsInput&lt;/code&gt;. If empty, defaults to &lt;code&gt;SINGLE_METRIC&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;DescribeAnomalyDetectorsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeAnomalyDetectorsOutput> gETDescribeAnomalyDetectorsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String namespace, String metricName, List<Dimension> dimensions, List<AnomalyDetectorType> anomalyDetectorTypes) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeAnomalyDetectorsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, namespace, metricName, dimensions, anomalyDetectorTypes, null);
        Type localVarReturnType = new TypeToken<DescribeAnomalyDetectorsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the anomaly detection models that you have created in your account. For single metric anomaly detectors, you can list all of the models in your account or filter the results to only the models that are related to a certain namespace, metric name, or metric dimension. For metric math anomaly detectors, you can list them by adding &lt;code&gt;METRIC_MATH&lt;/code&gt; to the &lt;code&gt;AnomalyDetectorTypes&lt;/code&gt; array. This will return all metric math anomaly detectors in your account.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Use the token returned by the previous operation to request the next page of results. (optional)
     * @param maxResults &lt;p&gt;The maximum number of results to return in one operation. The maximum value that you can specify is 100.&lt;/p&gt; &lt;p&gt;To retrieve the remaining results, make another call with the returned &lt;code&gt;NextToken&lt;/code&gt; value. &lt;/p&gt; (optional)
     * @param namespace Limits the results to only the anomaly detection models that are associated with the specified namespace. (optional)
     * @param metricName Limits the results to only the anomaly detection models that are associated with the specified metric name. If there are multiple metrics with this name in different namespaces that have anomaly detection models, they&#39;re all returned. (optional)
     * @param dimensions Limits the results to only the anomaly detection models that are associated with the specified metric dimensions. If there are multiple metrics that have these dimensions and have anomaly detection models associated, they&#39;re all returned. (optional)
     * @param anomalyDetectorTypes The anomaly detector types to request when using &lt;code&gt;DescribeAnomalyDetectorsInput&lt;/code&gt;. If empty, defaults to &lt;code&gt;SINGLE_METRIC&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeAnomalyDetectorsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String namespace, String metricName, List<Dimension> dimensions, List<AnomalyDetectorType> anomalyDetectorTypes, final ApiCallback<DescribeAnomalyDetectorsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeAnomalyDetectorsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, namespace, metricName, dimensions, anomalyDetectorTypes, _callback);
        Type localVarReturnType = new TypeToken<DescribeAnomalyDetectorsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeInsightRules
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Include this value, if it was returned by the previous operation, to get the next set of rules. (optional)
     * @param maxResults The maximum number of results to return in one operation. If you omit this parameter, the default of 500 is used. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeInsightRulesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeInsightRules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeInsightRulesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeInsightRules(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeInsightRules(Async)");
        }

        return gETDescribeInsightRulesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns a list of all the Contributor Insights rules in your account.&lt;/p&gt; &lt;p&gt;For more information about Contributor Insights, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights.html\&quot;&gt;Using Contributor Insights to Analyze High-Cardinality Data&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Include this value, if it was returned by the previous operation, to get the next set of rules. (optional)
     * @param maxResults The maximum number of results to return in one operation. If you omit this parameter, the default of 500 is used. (optional)
     * @return DescribeInsightRulesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public DescribeInsightRulesOutput gETDescribeInsightRules(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults) throws ApiException {
        ApiResponse<DescribeInsightRulesOutput> localVarResp = gETDescribeInsightRulesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns a list of all the Contributor Insights rules in your account.&lt;/p&gt; &lt;p&gt;For more information about Contributor Insights, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights.html\&quot;&gt;Using Contributor Insights to Analyze High-Cardinality Data&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Include this value, if it was returned by the previous operation, to get the next set of rules. (optional)
     * @param maxResults The maximum number of results to return in one operation. If you omit this parameter, the default of 500 is used. (optional)
     * @return ApiResponse&lt;DescribeInsightRulesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeInsightRulesOutput> gETDescribeInsightRulesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeInsightRulesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, null);
        Type localVarReturnType = new TypeToken<DescribeInsightRulesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns a list of all the Contributor Insights rules in your account.&lt;/p&gt; &lt;p&gt;For more information about Contributor Insights, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights.html\&quot;&gt;Using Contributor Insights to Analyze High-Cardinality Data&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Include this value, if it was returned by the previous operation, to get the next set of rules. (optional)
     * @param maxResults The maximum number of results to return in one operation. If you omit this parameter, the default of 500 is used. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeInsightRulesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, final ApiCallback<DescribeInsightRulesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeInsightRulesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, _callback);
        Type localVarReturnType = new TypeToken<DescribeInsightRulesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDisableAlarmActions
     * @param alarmNames The names of the alarms. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDisableAlarmActionsCall(List<String> alarmNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DisableAlarmActions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alarmNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "AlarmNames", alarmNames));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDisableAlarmActionsValidateBeforeCall(List<String> alarmNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'alarmNames' is set
        if (alarmNames == null) {
            throw new ApiException("Missing the required parameter 'alarmNames' when calling gETDisableAlarmActions(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDisableAlarmActions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDisableAlarmActions(Async)");
        }

        return gETDisableAlarmActionsCall(alarmNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Disables the actions for the specified alarms. When an alarm&#39;s actions are disabled, the alarm actions do not execute when the alarm state changes.
     * @param alarmNames The names of the alarms. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void gETDisableAlarmActions(List<String> alarmNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETDisableAlarmActionsWithHttpInfo(alarmNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Disables the actions for the specified alarms. When an alarm&#39;s actions are disabled, the alarm actions do not execute when the alarm state changes.
     * @param alarmNames The names of the alarms. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETDisableAlarmActionsWithHttpInfo(List<String> alarmNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDisableAlarmActionsValidateBeforeCall(alarmNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Disables the actions for the specified alarms. When an alarm&#39;s actions are disabled, the alarm actions do not execute when the alarm state changes.
     * @param alarmNames The names of the alarms. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDisableAlarmActionsAsync(List<String> alarmNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDisableAlarmActionsValidateBeforeCall(alarmNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDisableInsightRules
     * @param ruleNames An array of the rule names to disable. If you need to find out the names of your rules, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeInsightRules.html\&quot;&gt;DescribeInsightRules&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDisableInsightRulesCall(List<String> ruleNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DisableInsightRules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ruleNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "RuleNames", ruleNames));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDisableInsightRulesValidateBeforeCall(List<String> ruleNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleNames' is set
        if (ruleNames == null) {
            throw new ApiException("Missing the required parameter 'ruleNames' when calling gETDisableInsightRules(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDisableInsightRules(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDisableInsightRules(Async)");
        }

        return gETDisableInsightRulesCall(ruleNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Disables the specified Contributor Insights rules. When rules are disabled, they do not analyze log groups and do not incur costs.
     * @param ruleNames An array of the rule names to disable. If you need to find out the names of your rules, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeInsightRules.html\&quot;&gt;DescribeInsightRules&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DisableInsightRulesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public DisableInsightRulesOutput gETDisableInsightRules(List<String> ruleNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DisableInsightRulesOutput> localVarResp = gETDisableInsightRulesWithHttpInfo(ruleNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Disables the specified Contributor Insights rules. When rules are disabled, they do not analyze log groups and do not incur costs.
     * @param ruleNames An array of the rule names to disable. If you need to find out the names of your rules, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeInsightRules.html\&quot;&gt;DescribeInsightRules&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DisableInsightRulesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DisableInsightRulesOutput> gETDisableInsightRulesWithHttpInfo(List<String> ruleNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDisableInsightRulesValidateBeforeCall(ruleNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DisableInsightRulesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Disables the specified Contributor Insights rules. When rules are disabled, they do not analyze log groups and do not incur costs.
     * @param ruleNames An array of the rule names to disable. If you need to find out the names of your rules, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeInsightRules.html\&quot;&gt;DescribeInsightRules&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDisableInsightRulesAsync(List<String> ruleNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DisableInsightRulesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDisableInsightRulesValidateBeforeCall(ruleNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DisableInsightRulesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETEnableAlarmActions
     * @param alarmNames The names of the alarms. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETEnableAlarmActionsCall(List<String> alarmNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=EnableAlarmActions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alarmNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "AlarmNames", alarmNames));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETEnableAlarmActionsValidateBeforeCall(List<String> alarmNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'alarmNames' is set
        if (alarmNames == null) {
            throw new ApiException("Missing the required parameter 'alarmNames' when calling gETEnableAlarmActions(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETEnableAlarmActions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETEnableAlarmActions(Async)");
        }

        return gETEnableAlarmActionsCall(alarmNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Enables the actions for the specified alarms.
     * @param alarmNames The names of the alarms. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void gETEnableAlarmActions(List<String> alarmNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETEnableAlarmActionsWithHttpInfo(alarmNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Enables the actions for the specified alarms.
     * @param alarmNames The names of the alarms. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETEnableAlarmActionsWithHttpInfo(List<String> alarmNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETEnableAlarmActionsValidateBeforeCall(alarmNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Enables the actions for the specified alarms.
     * @param alarmNames The names of the alarms. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETEnableAlarmActionsAsync(List<String> alarmNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETEnableAlarmActionsValidateBeforeCall(alarmNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETEnableInsightRules
     * @param ruleNames An array of the rule names to enable. If you need to find out the names of your rules, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeInsightRules.html\&quot;&gt;DescribeInsightRules&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETEnableInsightRulesCall(List<String> ruleNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=EnableInsightRules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ruleNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "RuleNames", ruleNames));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETEnableInsightRulesValidateBeforeCall(List<String> ruleNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleNames' is set
        if (ruleNames == null) {
            throw new ApiException("Missing the required parameter 'ruleNames' when calling gETEnableInsightRules(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETEnableInsightRules(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETEnableInsightRules(Async)");
        }

        return gETEnableInsightRulesCall(ruleNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Enables the specified Contributor Insights rules. When rules are enabled, they immediately begin analyzing log data.
     * @param ruleNames An array of the rule names to enable. If you need to find out the names of your rules, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeInsightRules.html\&quot;&gt;DescribeInsightRules&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return EnableInsightRulesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public EnableInsightRulesOutput gETEnableInsightRules(List<String> ruleNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<EnableInsightRulesOutput> localVarResp = gETEnableInsightRulesWithHttpInfo(ruleNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Enables the specified Contributor Insights rules. When rules are enabled, they immediately begin analyzing log data.
     * @param ruleNames An array of the rule names to enable. If you need to find out the names of your rules, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeInsightRules.html\&quot;&gt;DescribeInsightRules&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;EnableInsightRulesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnableInsightRulesOutput> gETEnableInsightRulesWithHttpInfo(List<String> ruleNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETEnableInsightRulesValidateBeforeCall(ruleNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<EnableInsightRulesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Enables the specified Contributor Insights rules. When rules are enabled, they immediately begin analyzing log data.
     * @param ruleNames An array of the rule names to enable. If you need to find out the names of your rules, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeInsightRules.html\&quot;&gt;DescribeInsightRules&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETEnableInsightRulesAsync(List<String> ruleNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<EnableInsightRulesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETEnableInsightRulesValidateBeforeCall(ruleNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<EnableInsightRulesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETGetDashboard
     * @param dashboardName The name of the dashboard to be described. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DashboardNotFoundError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetDashboardCall(String dashboardName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=GetDashboard";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dashboardName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DashboardName", dashboardName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETGetDashboardValidateBeforeCall(String dashboardName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardName' is set
        if (dashboardName == null) {
            throw new ApiException("Missing the required parameter 'dashboardName' when calling gETGetDashboard(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETGetDashboard(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETGetDashboard(Async)");
        }

        return gETGetDashboardCall(dashboardName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Displays the details of the dashboard that you specify.&lt;/p&gt; &lt;p&gt;To copy an existing dashboard, use &lt;code&gt;GetDashboard&lt;/code&gt;, and then use the data returned within &lt;code&gt;DashboardBody&lt;/code&gt; as the template for the new dashboard when you call &lt;code&gt;PutDashboard&lt;/code&gt; to create the copy.&lt;/p&gt;
     * @param dashboardName The name of the dashboard to be described. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetDashboardOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DashboardNotFoundError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public GetDashboardOutput gETGetDashboard(String dashboardName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetDashboardOutput> localVarResp = gETGetDashboardWithHttpInfo(dashboardName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Displays the details of the dashboard that you specify.&lt;/p&gt; &lt;p&gt;To copy an existing dashboard, use &lt;code&gt;GetDashboard&lt;/code&gt;, and then use the data returned within &lt;code&gt;DashboardBody&lt;/code&gt; as the template for the new dashboard when you call &lt;code&gt;PutDashboard&lt;/code&gt; to create the copy.&lt;/p&gt;
     * @param dashboardName The name of the dashboard to be described. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetDashboardOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DashboardNotFoundError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDashboardOutput> gETGetDashboardWithHttpInfo(String dashboardName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETGetDashboardValidateBeforeCall(dashboardName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetDashboardOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Displays the details of the dashboard that you specify.&lt;/p&gt; &lt;p&gt;To copy an existing dashboard, use &lt;code&gt;GetDashboard&lt;/code&gt;, and then use the data returned within &lt;code&gt;DashboardBody&lt;/code&gt; as the template for the new dashboard when you call &lt;code&gt;PutDashboard&lt;/code&gt; to create the copy.&lt;/p&gt;
     * @param dashboardName The name of the dashboard to be described. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DashboardNotFoundError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetDashboardAsync(String dashboardName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetDashboardOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETGetDashboardValidateBeforeCall(dashboardName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetDashboardOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETGetInsightRuleReport
     * @param ruleName The name of the rule that you want to see data from. (required)
     * @param startTime The start time of the data to use in the report. When used in a raw HTTP Query API, it is formatted as &lt;code&gt;yyyy-MM-dd&#39;T&#39;HH:mm:ss&lt;/code&gt;. For example, &lt;code&gt;2019-07-01T23:59:59&lt;/code&gt;. (required)
     * @param endTime The end time of the data to use in the report. When used in a raw HTTP Query API, it is formatted as &lt;code&gt;yyyy-MM-dd&#39;T&#39;HH:mm:ss&lt;/code&gt;. For example, &lt;code&gt;2019-07-01T23:59:59&lt;/code&gt;. (required)
     * @param period The period, in seconds, to use for the statistics in the &lt;code&gt;InsightRuleMetricDatapoint&lt;/code&gt; results. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxContributorCount The maximum number of contributors to include in the report. The range is 1 to 100. If you omit this, the default of 10 is used. (optional)
     * @param metrics &lt;p&gt;Specifies which metrics to use for aggregation of contributor values for the report. You can specify one or more of the following metrics:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UniqueContributors&lt;/code&gt; -- the number of unique contributors for each data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MaxContributorValue&lt;/code&gt; -- the value of the top contributor for each data point. The identity of the contributor might change for each data point in the graph.&lt;/p&gt; &lt;p&gt;If this rule aggregates by COUNT, the top contributor for each data point is the contributor with the most occurrences in that period. If the rule aggregates by SUM, the top contributor is the contributor with the highest sum in the log field specified by the rule&#39;s &lt;code&gt;Value&lt;/code&gt;, during that period.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SampleCount&lt;/code&gt; -- the number of data points matched by the rule.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Sum&lt;/code&gt; -- the sum of the values from all contributors during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Minimum&lt;/code&gt; -- the minimum value from a single observation during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Maximum&lt;/code&gt; -- the maximum value from a single observation during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Average&lt;/code&gt; -- the average value from all contributors during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param orderBy Determines what statistic to use to rank the contributors. Valid values are SUM and MAXIMUM. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetInsightRuleReportCall(String ruleName, OffsetDateTime startTime, OffsetDateTime endTime, Integer period, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxContributorCount, List<String> metrics, String orderBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=GetInsightRuleReport";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ruleName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RuleName", ruleName));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndTime", endTime));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (maxContributorCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxContributorCount", maxContributorCount));
        }

        if (metrics != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Metrics", metrics));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OrderBy", orderBy));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETGetInsightRuleReportValidateBeforeCall(String ruleName, OffsetDateTime startTime, OffsetDateTime endTime, Integer period, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxContributorCount, List<String> metrics, String orderBy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleName' is set
        if (ruleName == null) {
            throw new ApiException("Missing the required parameter 'ruleName' when calling gETGetInsightRuleReport(Async)");
        }

        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling gETGetInsightRuleReport(Async)");
        }

        // verify the required parameter 'endTime' is set
        if (endTime == null) {
            throw new ApiException("Missing the required parameter 'endTime' when calling gETGetInsightRuleReport(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling gETGetInsightRuleReport(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETGetInsightRuleReport(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETGetInsightRuleReport(Async)");
        }

        return gETGetInsightRuleReportCall(ruleName, startTime, endTime, period, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxContributorCount, metrics, orderBy, _callback);

    }

    /**
     * 
     * &lt;p&gt;This operation returns the time series data collected by a Contributor Insights rule. The data includes the identity and number of contributors to the log group.&lt;/p&gt; &lt;p&gt;You can also optionally return one or more statistics about each data point in the time series. These statistics can include the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UniqueContributors&lt;/code&gt; -- the number of unique contributors for each data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MaxContributorValue&lt;/code&gt; -- the value of the top contributor for each data point. The identity of the contributor might change for each data point in the graph.&lt;/p&gt; &lt;p&gt;If this rule aggregates by COUNT, the top contributor for each data point is the contributor with the most occurrences in that period. If the rule aggregates by SUM, the top contributor is the contributor with the highest sum in the log field specified by the rule&#39;s &lt;code&gt;Value&lt;/code&gt;, during that period.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SampleCount&lt;/code&gt; -- the number of data points matched by the rule.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Sum&lt;/code&gt; -- the sum of the values from all contributors during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Minimum&lt;/code&gt; -- the minimum value from a single observation during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Maximum&lt;/code&gt; -- the maximum value from a single observation during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Average&lt;/code&gt; -- the average value from all contributors during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param ruleName The name of the rule that you want to see data from. (required)
     * @param startTime The start time of the data to use in the report. When used in a raw HTTP Query API, it is formatted as &lt;code&gt;yyyy-MM-dd&#39;T&#39;HH:mm:ss&lt;/code&gt;. For example, &lt;code&gt;2019-07-01T23:59:59&lt;/code&gt;. (required)
     * @param endTime The end time of the data to use in the report. When used in a raw HTTP Query API, it is formatted as &lt;code&gt;yyyy-MM-dd&#39;T&#39;HH:mm:ss&lt;/code&gt;. For example, &lt;code&gt;2019-07-01T23:59:59&lt;/code&gt;. (required)
     * @param period The period, in seconds, to use for the statistics in the &lt;code&gt;InsightRuleMetricDatapoint&lt;/code&gt; results. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxContributorCount The maximum number of contributors to include in the report. The range is 1 to 100. If you omit this, the default of 10 is used. (optional)
     * @param metrics &lt;p&gt;Specifies which metrics to use for aggregation of contributor values for the report. You can specify one or more of the following metrics:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UniqueContributors&lt;/code&gt; -- the number of unique contributors for each data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MaxContributorValue&lt;/code&gt; -- the value of the top contributor for each data point. The identity of the contributor might change for each data point in the graph.&lt;/p&gt; &lt;p&gt;If this rule aggregates by COUNT, the top contributor for each data point is the contributor with the most occurrences in that period. If the rule aggregates by SUM, the top contributor is the contributor with the highest sum in the log field specified by the rule&#39;s &lt;code&gt;Value&lt;/code&gt;, during that period.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SampleCount&lt;/code&gt; -- the number of data points matched by the rule.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Sum&lt;/code&gt; -- the sum of the values from all contributors during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Minimum&lt;/code&gt; -- the minimum value from a single observation during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Maximum&lt;/code&gt; -- the maximum value from a single observation during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Average&lt;/code&gt; -- the average value from all contributors during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param orderBy Determines what statistic to use to rank the contributors. Valid values are SUM and MAXIMUM. (optional)
     * @return GetInsightRuleReportOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public GetInsightRuleReportOutput gETGetInsightRuleReport(String ruleName, OffsetDateTime startTime, OffsetDateTime endTime, Integer period, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxContributorCount, List<String> metrics, String orderBy) throws ApiException {
        ApiResponse<GetInsightRuleReportOutput> localVarResp = gETGetInsightRuleReportWithHttpInfo(ruleName, startTime, endTime, period, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxContributorCount, metrics, orderBy);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;This operation returns the time series data collected by a Contributor Insights rule. The data includes the identity and number of contributors to the log group.&lt;/p&gt; &lt;p&gt;You can also optionally return one or more statistics about each data point in the time series. These statistics can include the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UniqueContributors&lt;/code&gt; -- the number of unique contributors for each data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MaxContributorValue&lt;/code&gt; -- the value of the top contributor for each data point. The identity of the contributor might change for each data point in the graph.&lt;/p&gt; &lt;p&gt;If this rule aggregates by COUNT, the top contributor for each data point is the contributor with the most occurrences in that period. If the rule aggregates by SUM, the top contributor is the contributor with the highest sum in the log field specified by the rule&#39;s &lt;code&gt;Value&lt;/code&gt;, during that period.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SampleCount&lt;/code&gt; -- the number of data points matched by the rule.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Sum&lt;/code&gt; -- the sum of the values from all contributors during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Minimum&lt;/code&gt; -- the minimum value from a single observation during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Maximum&lt;/code&gt; -- the maximum value from a single observation during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Average&lt;/code&gt; -- the average value from all contributors during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param ruleName The name of the rule that you want to see data from. (required)
     * @param startTime The start time of the data to use in the report. When used in a raw HTTP Query API, it is formatted as &lt;code&gt;yyyy-MM-dd&#39;T&#39;HH:mm:ss&lt;/code&gt;. For example, &lt;code&gt;2019-07-01T23:59:59&lt;/code&gt;. (required)
     * @param endTime The end time of the data to use in the report. When used in a raw HTTP Query API, it is formatted as &lt;code&gt;yyyy-MM-dd&#39;T&#39;HH:mm:ss&lt;/code&gt;. For example, &lt;code&gt;2019-07-01T23:59:59&lt;/code&gt;. (required)
     * @param period The period, in seconds, to use for the statistics in the &lt;code&gt;InsightRuleMetricDatapoint&lt;/code&gt; results. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxContributorCount The maximum number of contributors to include in the report. The range is 1 to 100. If you omit this, the default of 10 is used. (optional)
     * @param metrics &lt;p&gt;Specifies which metrics to use for aggregation of contributor values for the report. You can specify one or more of the following metrics:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UniqueContributors&lt;/code&gt; -- the number of unique contributors for each data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MaxContributorValue&lt;/code&gt; -- the value of the top contributor for each data point. The identity of the contributor might change for each data point in the graph.&lt;/p&gt; &lt;p&gt;If this rule aggregates by COUNT, the top contributor for each data point is the contributor with the most occurrences in that period. If the rule aggregates by SUM, the top contributor is the contributor with the highest sum in the log field specified by the rule&#39;s &lt;code&gt;Value&lt;/code&gt;, during that period.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SampleCount&lt;/code&gt; -- the number of data points matched by the rule.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Sum&lt;/code&gt; -- the sum of the values from all contributors during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Minimum&lt;/code&gt; -- the minimum value from a single observation during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Maximum&lt;/code&gt; -- the maximum value from a single observation during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Average&lt;/code&gt; -- the average value from all contributors during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param orderBy Determines what statistic to use to rank the contributors. Valid values are SUM and MAXIMUM. (optional)
     * @return ApiResponse&lt;GetInsightRuleReportOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetInsightRuleReportOutput> gETGetInsightRuleReportWithHttpInfo(String ruleName, OffsetDateTime startTime, OffsetDateTime endTime, Integer period, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxContributorCount, List<String> metrics, String orderBy) throws ApiException {
        okhttp3.Call localVarCall = gETGetInsightRuleReportValidateBeforeCall(ruleName, startTime, endTime, period, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxContributorCount, metrics, orderBy, null);
        Type localVarReturnType = new TypeToken<GetInsightRuleReportOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;This operation returns the time series data collected by a Contributor Insights rule. The data includes the identity and number of contributors to the log group.&lt;/p&gt; &lt;p&gt;You can also optionally return one or more statistics about each data point in the time series. These statistics can include the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UniqueContributors&lt;/code&gt; -- the number of unique contributors for each data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MaxContributorValue&lt;/code&gt; -- the value of the top contributor for each data point. The identity of the contributor might change for each data point in the graph.&lt;/p&gt; &lt;p&gt;If this rule aggregates by COUNT, the top contributor for each data point is the contributor with the most occurrences in that period. If the rule aggregates by SUM, the top contributor is the contributor with the highest sum in the log field specified by the rule&#39;s &lt;code&gt;Value&lt;/code&gt;, during that period.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SampleCount&lt;/code&gt; -- the number of data points matched by the rule.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Sum&lt;/code&gt; -- the sum of the values from all contributors during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Minimum&lt;/code&gt; -- the minimum value from a single observation during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Maximum&lt;/code&gt; -- the maximum value from a single observation during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Average&lt;/code&gt; -- the average value from all contributors during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param ruleName The name of the rule that you want to see data from. (required)
     * @param startTime The start time of the data to use in the report. When used in a raw HTTP Query API, it is formatted as &lt;code&gt;yyyy-MM-dd&#39;T&#39;HH:mm:ss&lt;/code&gt;. For example, &lt;code&gt;2019-07-01T23:59:59&lt;/code&gt;. (required)
     * @param endTime The end time of the data to use in the report. When used in a raw HTTP Query API, it is formatted as &lt;code&gt;yyyy-MM-dd&#39;T&#39;HH:mm:ss&lt;/code&gt;. For example, &lt;code&gt;2019-07-01T23:59:59&lt;/code&gt;. (required)
     * @param period The period, in seconds, to use for the statistics in the &lt;code&gt;InsightRuleMetricDatapoint&lt;/code&gt; results. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxContributorCount The maximum number of contributors to include in the report. The range is 1 to 100. If you omit this, the default of 10 is used. (optional)
     * @param metrics &lt;p&gt;Specifies which metrics to use for aggregation of contributor values for the report. You can specify one or more of the following metrics:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UniqueContributors&lt;/code&gt; -- the number of unique contributors for each data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MaxContributorValue&lt;/code&gt; -- the value of the top contributor for each data point. The identity of the contributor might change for each data point in the graph.&lt;/p&gt; &lt;p&gt;If this rule aggregates by COUNT, the top contributor for each data point is the contributor with the most occurrences in that period. If the rule aggregates by SUM, the top contributor is the contributor with the highest sum in the log field specified by the rule&#39;s &lt;code&gt;Value&lt;/code&gt;, during that period.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SampleCount&lt;/code&gt; -- the number of data points matched by the rule.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Sum&lt;/code&gt; -- the sum of the values from all contributors during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Minimum&lt;/code&gt; -- the minimum value from a single observation during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Maximum&lt;/code&gt; -- the maximum value from a single observation during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Average&lt;/code&gt; -- the average value from all contributors during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param orderBy Determines what statistic to use to rank the contributors. Valid values are SUM and MAXIMUM. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetInsightRuleReportAsync(String ruleName, OffsetDateTime startTime, OffsetDateTime endTime, Integer period, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxContributorCount, List<String> metrics, String orderBy, final ApiCallback<GetInsightRuleReportOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETGetInsightRuleReportValidateBeforeCall(ruleName, startTime, endTime, period, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxContributorCount, metrics, orderBy, _callback);
        Type localVarReturnType = new TypeToken<GetInsightRuleReportOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETGetMetricData
     * @param metricDataQueries The metric queries to be returned. A single &lt;code&gt;GetMetricData&lt;/code&gt; call can include as many as 500 &lt;code&gt;MetricDataQuery&lt;/code&gt; structures. Each of these structures can specify either a metric to retrieve, a Metrics Insights query, or a math expression to perform on retrieved data.  (required)
     * @param startTime &lt;p&gt;The time stamp indicating the earliest data to be returned.&lt;/p&gt; &lt;p&gt;The value specified is inclusive; results include data points with the specified time stamp. &lt;/p&gt; &lt;p&gt;CloudWatch rounds the specified time stamp as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Start time less than 15 days ago - Round down to the nearest whole minute. For example, 12:32:34 is rounded down to 12:32:00.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Start time between 15 and 63 days ago - Round down to the nearest 5-minute clock interval. For example, 12:32:34 is rounded down to 12:30:00.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Start time greater than 63 days ago - Round down to the nearest 1-hour clock interval. For example, 12:32:34 is rounded down to 12:00:00.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you set &lt;code&gt;Period&lt;/code&gt; to 5, 10, or 30, the start time of your request is rounded down to the nearest time that corresponds to even 5-, 10-, or 30-second divisions of a minute. For example, if you make a query at (HH:mm:ss) 01:05:23 for the previous 10-second period, the start time of your request is rounded down and you receive data from 01:05:10 to 01:05:20. If you make a query at 15:07:17 for the previous 5 minutes of data, using a period of 5 seconds, you receive data timestamped between 15:02:15 and 15:07:15. &lt;/p&gt; &lt;p&gt;For better performance, specify &lt;code&gt;StartTime&lt;/code&gt; and &lt;code&gt;EndTime&lt;/code&gt; values that align with the value of the metric&#39;s &lt;code&gt;Period&lt;/code&gt; and sync up with the beginning and end of an hour. For example, if the &lt;code&gt;Period&lt;/code&gt; of a metric is 5 minutes, specifying 12:05 or 12:30 as &lt;code&gt;StartTime&lt;/code&gt; can get a faster response from CloudWatch than setting 12:07 or 12:29 as the &lt;code&gt;StartTime&lt;/code&gt;.&lt;/p&gt; (required)
     * @param endTime &lt;p&gt;The time stamp indicating the latest data to be returned.&lt;/p&gt; &lt;p&gt;The value specified is exclusive; results include data points up to the specified time stamp.&lt;/p&gt; &lt;p&gt;For better performance, specify &lt;code&gt;StartTime&lt;/code&gt; and &lt;code&gt;EndTime&lt;/code&gt; values that align with the value of the metric&#39;s &lt;code&gt;Period&lt;/code&gt; and sync up with the beginning and end of an hour. For example, if the &lt;code&gt;Period&lt;/code&gt; of a metric is 5 minutes, specifying 12:05 or 12:30 as &lt;code&gt;EndTime&lt;/code&gt; can get a faster response from CloudWatch than setting 12:07 or 12:29 as the &lt;code&gt;EndTime&lt;/code&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Include this value, if it was returned by the previous &lt;code&gt;GetMetricData&lt;/code&gt; operation, to get the next set of data points. (optional)
     * @param scanBy The order in which data points should be returned. &lt;code&gt;TimestampDescending&lt;/code&gt; returns the newest data first and paginates when the &lt;code&gt;MaxDatapoints&lt;/code&gt; limit is reached. &lt;code&gt;TimestampAscending&lt;/code&gt; returns the oldest data first and paginates when the &lt;code&gt;MaxDatapoints&lt;/code&gt; limit is reached. (optional)
     * @param maxDatapoints The maximum number of data points the request should return before paginating. If you omit this, the default of 100,800 is used. (optional)
     * @param labelOptions This structure includes the &lt;code&gt;Timezone&lt;/code&gt; parameter, which you can use to specify your time zone so that the labels of returned data display the correct time for your time zone.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetMetricDataCall(List<MetricDataQuery> metricDataQueries, OffsetDateTime startTime, OffsetDateTime endTime, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, String scanBy, Integer maxDatapoints, GETGetMetricDataLabelOptionsParameter labelOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=GetMetricData";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metricDataQueries != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "MetricDataQueries", metricDataQueries));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndTime", endTime));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (scanBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ScanBy", scanBy));
        }

        if (maxDatapoints != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxDatapoints", maxDatapoints));
        }

        if (labelOptions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LabelOptions", labelOptions));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETGetMetricDataValidateBeforeCall(List<MetricDataQuery> metricDataQueries, OffsetDateTime startTime, OffsetDateTime endTime, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, String scanBy, Integer maxDatapoints, GETGetMetricDataLabelOptionsParameter labelOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'metricDataQueries' is set
        if (metricDataQueries == null) {
            throw new ApiException("Missing the required parameter 'metricDataQueries' when calling gETGetMetricData(Async)");
        }

        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling gETGetMetricData(Async)");
        }

        // verify the required parameter 'endTime' is set
        if (endTime == null) {
            throw new ApiException("Missing the required parameter 'endTime' when calling gETGetMetricData(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETGetMetricData(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETGetMetricData(Async)");
        }

        return gETGetMetricDataCall(metricDataQueries, startTime, endTime, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, scanBy, maxDatapoints, labelOptions, _callback);

    }

    /**
     * 
     * &lt;p&gt;You can use the &lt;code&gt;GetMetricData&lt;/code&gt; API to retrieve CloudWatch metric values. The operation can also include a CloudWatch Metrics Insights query, and one or more metric math functions.&lt;/p&gt; &lt;p&gt;A &lt;code&gt;GetMetricData&lt;/code&gt; operation that does not include a query can retrieve as many as 500 different metrics in a single request, with a total of as many as 100,800 data points. You can also optionally perform metric math expressions on the values of the returned statistics, to create new time series that represent new insights into your data. For example, using Lambda metrics, you could divide the Errors metric by the Invocations metric to get an error rate time series. For more information about metric math expressions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax\&quot;&gt;Metric Math Syntax and Functions&lt;/a&gt; in the &lt;i&gt;Amazon CloudWatch User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you include a Metrics Insights query, each &lt;code&gt;GetMetricData&lt;/code&gt; operation can include only one query. But the same &lt;code&gt;GetMetricData&lt;/code&gt; operation can also retrieve other metrics. Metrics Insights queries can query only the most recent three hours of metric data. For more information about Metrics Insights, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/query_with_cloudwatch-metrics-insights.html\&quot;&gt;Query your metrics with CloudWatch Metrics Insights&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Calls to the &lt;code&gt;GetMetricData&lt;/code&gt; API have a different pricing structure than calls to &lt;code&gt;GetMetricStatistics&lt;/code&gt;. For more information about pricing, see &lt;a href&#x3D;\&quot;https://aws.amazon.com/cloudwatch/pricing/\&quot;&gt;Amazon CloudWatch Pricing&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Amazon CloudWatch retains metric data as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Data points with a period of less than 60 seconds are available for 3 hours. These data points are high-resolution metrics and are available only for custom metrics that have been defined with a &lt;code&gt;StorageResolution&lt;/code&gt; of 1.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data points with a period of 60 seconds (1-minute) are available for 15 days.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data points with a period of 300 seconds (5-minute) are available for 63 days.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data points with a period of 3600 seconds (1 hour) are available for 455 days (15 months).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Data points that are initially published with a shorter period are aggregated together for long-term storage. For example, if you collect data using a period of 1 minute, the data remains available for 15 days with 1-minute resolution. After 15 days, this data is still available, but is aggregated and retrievable only with a resolution of 5 minutes. After 63 days, the data is further aggregated and is available with a resolution of 1 hour.&lt;/p&gt; &lt;p&gt;If you omit &lt;code&gt;Unit&lt;/code&gt; in your request, all data that was collected with any unit is returned, along with the corresponding units that were specified when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified. If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Using Metrics Insights queries with metric math&lt;/b&gt; &lt;/p&gt; &lt;p&gt;You can&#39;t mix a Metric Insights query and metric math syntax in the same expression, but you can reference results from a Metrics Insights query within other Metric math expressions. A Metrics Insights query without a &lt;b&gt;GROUP BY&lt;/b&gt; clause returns a single time-series (TS), and can be used as input for a metric math expression that expects a single time series. A Metrics Insights query with a &lt;b&gt;GROUP BY&lt;/b&gt; clause returns an array of time-series (TS[]), and can be used as input for a metric math expression that expects an array of time series. &lt;/p&gt;
     * @param metricDataQueries The metric queries to be returned. A single &lt;code&gt;GetMetricData&lt;/code&gt; call can include as many as 500 &lt;code&gt;MetricDataQuery&lt;/code&gt; structures. Each of these structures can specify either a metric to retrieve, a Metrics Insights query, or a math expression to perform on retrieved data.  (required)
     * @param startTime &lt;p&gt;The time stamp indicating the earliest data to be returned.&lt;/p&gt; &lt;p&gt;The value specified is inclusive; results include data points with the specified time stamp. &lt;/p&gt; &lt;p&gt;CloudWatch rounds the specified time stamp as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Start time less than 15 days ago - Round down to the nearest whole minute. For example, 12:32:34 is rounded down to 12:32:00.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Start time between 15 and 63 days ago - Round down to the nearest 5-minute clock interval. For example, 12:32:34 is rounded down to 12:30:00.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Start time greater than 63 days ago - Round down to the nearest 1-hour clock interval. For example, 12:32:34 is rounded down to 12:00:00.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you set &lt;code&gt;Period&lt;/code&gt; to 5, 10, or 30, the start time of your request is rounded down to the nearest time that corresponds to even 5-, 10-, or 30-second divisions of a minute. For example, if you make a query at (HH:mm:ss) 01:05:23 for the previous 10-second period, the start time of your request is rounded down and you receive data from 01:05:10 to 01:05:20. If you make a query at 15:07:17 for the previous 5 minutes of data, using a period of 5 seconds, you receive data timestamped between 15:02:15 and 15:07:15. &lt;/p&gt; &lt;p&gt;For better performance, specify &lt;code&gt;StartTime&lt;/code&gt; and &lt;code&gt;EndTime&lt;/code&gt; values that align with the value of the metric&#39;s &lt;code&gt;Period&lt;/code&gt; and sync up with the beginning and end of an hour. For example, if the &lt;code&gt;Period&lt;/code&gt; of a metric is 5 minutes, specifying 12:05 or 12:30 as &lt;code&gt;StartTime&lt;/code&gt; can get a faster response from CloudWatch than setting 12:07 or 12:29 as the &lt;code&gt;StartTime&lt;/code&gt;.&lt;/p&gt; (required)
     * @param endTime &lt;p&gt;The time stamp indicating the latest data to be returned.&lt;/p&gt; &lt;p&gt;The value specified is exclusive; results include data points up to the specified time stamp.&lt;/p&gt; &lt;p&gt;For better performance, specify &lt;code&gt;StartTime&lt;/code&gt; and &lt;code&gt;EndTime&lt;/code&gt; values that align with the value of the metric&#39;s &lt;code&gt;Period&lt;/code&gt; and sync up with the beginning and end of an hour. For example, if the &lt;code&gt;Period&lt;/code&gt; of a metric is 5 minutes, specifying 12:05 or 12:30 as &lt;code&gt;EndTime&lt;/code&gt; can get a faster response from CloudWatch than setting 12:07 or 12:29 as the &lt;code&gt;EndTime&lt;/code&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Include this value, if it was returned by the previous &lt;code&gt;GetMetricData&lt;/code&gt; operation, to get the next set of data points. (optional)
     * @param scanBy The order in which data points should be returned. &lt;code&gt;TimestampDescending&lt;/code&gt; returns the newest data first and paginates when the &lt;code&gt;MaxDatapoints&lt;/code&gt; limit is reached. &lt;code&gt;TimestampAscending&lt;/code&gt; returns the oldest data first and paginates when the &lt;code&gt;MaxDatapoints&lt;/code&gt; limit is reached. (optional)
     * @param maxDatapoints The maximum number of data points the request should return before paginating. If you omit this, the default of 100,800 is used. (optional)
     * @param labelOptions This structure includes the &lt;code&gt;Timezone&lt;/code&gt; parameter, which you can use to specify your time zone so that the labels of returned data display the correct time for your time zone.  (optional)
     * @return GetMetricDataOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public GetMetricDataOutput gETGetMetricData(List<MetricDataQuery> metricDataQueries, OffsetDateTime startTime, OffsetDateTime endTime, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, String scanBy, Integer maxDatapoints, GETGetMetricDataLabelOptionsParameter labelOptions) throws ApiException {
        ApiResponse<GetMetricDataOutput> localVarResp = gETGetMetricDataWithHttpInfo(metricDataQueries, startTime, endTime, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, scanBy, maxDatapoints, labelOptions);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;You can use the &lt;code&gt;GetMetricData&lt;/code&gt; API to retrieve CloudWatch metric values. The operation can also include a CloudWatch Metrics Insights query, and one or more metric math functions.&lt;/p&gt; &lt;p&gt;A &lt;code&gt;GetMetricData&lt;/code&gt; operation that does not include a query can retrieve as many as 500 different metrics in a single request, with a total of as many as 100,800 data points. You can also optionally perform metric math expressions on the values of the returned statistics, to create new time series that represent new insights into your data. For example, using Lambda metrics, you could divide the Errors metric by the Invocations metric to get an error rate time series. For more information about metric math expressions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax\&quot;&gt;Metric Math Syntax and Functions&lt;/a&gt; in the &lt;i&gt;Amazon CloudWatch User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you include a Metrics Insights query, each &lt;code&gt;GetMetricData&lt;/code&gt; operation can include only one query. But the same &lt;code&gt;GetMetricData&lt;/code&gt; operation can also retrieve other metrics. Metrics Insights queries can query only the most recent three hours of metric data. For more information about Metrics Insights, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/query_with_cloudwatch-metrics-insights.html\&quot;&gt;Query your metrics with CloudWatch Metrics Insights&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Calls to the &lt;code&gt;GetMetricData&lt;/code&gt; API have a different pricing structure than calls to &lt;code&gt;GetMetricStatistics&lt;/code&gt;. For more information about pricing, see &lt;a href&#x3D;\&quot;https://aws.amazon.com/cloudwatch/pricing/\&quot;&gt;Amazon CloudWatch Pricing&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Amazon CloudWatch retains metric data as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Data points with a period of less than 60 seconds are available for 3 hours. These data points are high-resolution metrics and are available only for custom metrics that have been defined with a &lt;code&gt;StorageResolution&lt;/code&gt; of 1.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data points with a period of 60 seconds (1-minute) are available for 15 days.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data points with a period of 300 seconds (5-minute) are available for 63 days.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data points with a period of 3600 seconds (1 hour) are available for 455 days (15 months).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Data points that are initially published with a shorter period are aggregated together for long-term storage. For example, if you collect data using a period of 1 minute, the data remains available for 15 days with 1-minute resolution. After 15 days, this data is still available, but is aggregated and retrievable only with a resolution of 5 minutes. After 63 days, the data is further aggregated and is available with a resolution of 1 hour.&lt;/p&gt; &lt;p&gt;If you omit &lt;code&gt;Unit&lt;/code&gt; in your request, all data that was collected with any unit is returned, along with the corresponding units that were specified when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified. If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Using Metrics Insights queries with metric math&lt;/b&gt; &lt;/p&gt; &lt;p&gt;You can&#39;t mix a Metric Insights query and metric math syntax in the same expression, but you can reference results from a Metrics Insights query within other Metric math expressions. A Metrics Insights query without a &lt;b&gt;GROUP BY&lt;/b&gt; clause returns a single time-series (TS), and can be used as input for a metric math expression that expects a single time series. A Metrics Insights query with a &lt;b&gt;GROUP BY&lt;/b&gt; clause returns an array of time-series (TS[]), and can be used as input for a metric math expression that expects an array of time series. &lt;/p&gt;
     * @param metricDataQueries The metric queries to be returned. A single &lt;code&gt;GetMetricData&lt;/code&gt; call can include as many as 500 &lt;code&gt;MetricDataQuery&lt;/code&gt; structures. Each of these structures can specify either a metric to retrieve, a Metrics Insights query, or a math expression to perform on retrieved data.  (required)
     * @param startTime &lt;p&gt;The time stamp indicating the earliest data to be returned.&lt;/p&gt; &lt;p&gt;The value specified is inclusive; results include data points with the specified time stamp. &lt;/p&gt; &lt;p&gt;CloudWatch rounds the specified time stamp as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Start time less than 15 days ago - Round down to the nearest whole minute. For example, 12:32:34 is rounded down to 12:32:00.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Start time between 15 and 63 days ago - Round down to the nearest 5-minute clock interval. For example, 12:32:34 is rounded down to 12:30:00.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Start time greater than 63 days ago - Round down to the nearest 1-hour clock interval. For example, 12:32:34 is rounded down to 12:00:00.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you set &lt;code&gt;Period&lt;/code&gt; to 5, 10, or 30, the start time of your request is rounded down to the nearest time that corresponds to even 5-, 10-, or 30-second divisions of a minute. For example, if you make a query at (HH:mm:ss) 01:05:23 for the previous 10-second period, the start time of your request is rounded down and you receive data from 01:05:10 to 01:05:20. If you make a query at 15:07:17 for the previous 5 minutes of data, using a period of 5 seconds, you receive data timestamped between 15:02:15 and 15:07:15. &lt;/p&gt; &lt;p&gt;For better performance, specify &lt;code&gt;StartTime&lt;/code&gt; and &lt;code&gt;EndTime&lt;/code&gt; values that align with the value of the metric&#39;s &lt;code&gt;Period&lt;/code&gt; and sync up with the beginning and end of an hour. For example, if the &lt;code&gt;Period&lt;/code&gt; of a metric is 5 minutes, specifying 12:05 or 12:30 as &lt;code&gt;StartTime&lt;/code&gt; can get a faster response from CloudWatch than setting 12:07 or 12:29 as the &lt;code&gt;StartTime&lt;/code&gt;.&lt;/p&gt; (required)
     * @param endTime &lt;p&gt;The time stamp indicating the latest data to be returned.&lt;/p&gt; &lt;p&gt;The value specified is exclusive; results include data points up to the specified time stamp.&lt;/p&gt; &lt;p&gt;For better performance, specify &lt;code&gt;StartTime&lt;/code&gt; and &lt;code&gt;EndTime&lt;/code&gt; values that align with the value of the metric&#39;s &lt;code&gt;Period&lt;/code&gt; and sync up with the beginning and end of an hour. For example, if the &lt;code&gt;Period&lt;/code&gt; of a metric is 5 minutes, specifying 12:05 or 12:30 as &lt;code&gt;EndTime&lt;/code&gt; can get a faster response from CloudWatch than setting 12:07 or 12:29 as the &lt;code&gt;EndTime&lt;/code&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Include this value, if it was returned by the previous &lt;code&gt;GetMetricData&lt;/code&gt; operation, to get the next set of data points. (optional)
     * @param scanBy The order in which data points should be returned. &lt;code&gt;TimestampDescending&lt;/code&gt; returns the newest data first and paginates when the &lt;code&gt;MaxDatapoints&lt;/code&gt; limit is reached. &lt;code&gt;TimestampAscending&lt;/code&gt; returns the oldest data first and paginates when the &lt;code&gt;MaxDatapoints&lt;/code&gt; limit is reached. (optional)
     * @param maxDatapoints The maximum number of data points the request should return before paginating. If you omit this, the default of 100,800 is used. (optional)
     * @param labelOptions This structure includes the &lt;code&gt;Timezone&lt;/code&gt; parameter, which you can use to specify your time zone so that the labels of returned data display the correct time for your time zone.  (optional)
     * @return ApiResponse&lt;GetMetricDataOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMetricDataOutput> gETGetMetricDataWithHttpInfo(List<MetricDataQuery> metricDataQueries, OffsetDateTime startTime, OffsetDateTime endTime, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, String scanBy, Integer maxDatapoints, GETGetMetricDataLabelOptionsParameter labelOptions) throws ApiException {
        okhttp3.Call localVarCall = gETGetMetricDataValidateBeforeCall(metricDataQueries, startTime, endTime, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, scanBy, maxDatapoints, labelOptions, null);
        Type localVarReturnType = new TypeToken<GetMetricDataOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;You can use the &lt;code&gt;GetMetricData&lt;/code&gt; API to retrieve CloudWatch metric values. The operation can also include a CloudWatch Metrics Insights query, and one or more metric math functions.&lt;/p&gt; &lt;p&gt;A &lt;code&gt;GetMetricData&lt;/code&gt; operation that does not include a query can retrieve as many as 500 different metrics in a single request, with a total of as many as 100,800 data points. You can also optionally perform metric math expressions on the values of the returned statistics, to create new time series that represent new insights into your data. For example, using Lambda metrics, you could divide the Errors metric by the Invocations metric to get an error rate time series. For more information about metric math expressions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax\&quot;&gt;Metric Math Syntax and Functions&lt;/a&gt; in the &lt;i&gt;Amazon CloudWatch User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you include a Metrics Insights query, each &lt;code&gt;GetMetricData&lt;/code&gt; operation can include only one query. But the same &lt;code&gt;GetMetricData&lt;/code&gt; operation can also retrieve other metrics. Metrics Insights queries can query only the most recent three hours of metric data. For more information about Metrics Insights, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/query_with_cloudwatch-metrics-insights.html\&quot;&gt;Query your metrics with CloudWatch Metrics Insights&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Calls to the &lt;code&gt;GetMetricData&lt;/code&gt; API have a different pricing structure than calls to &lt;code&gt;GetMetricStatistics&lt;/code&gt;. For more information about pricing, see &lt;a href&#x3D;\&quot;https://aws.amazon.com/cloudwatch/pricing/\&quot;&gt;Amazon CloudWatch Pricing&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Amazon CloudWatch retains metric data as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Data points with a period of less than 60 seconds are available for 3 hours. These data points are high-resolution metrics and are available only for custom metrics that have been defined with a &lt;code&gt;StorageResolution&lt;/code&gt; of 1.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data points with a period of 60 seconds (1-minute) are available for 15 days.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data points with a period of 300 seconds (5-minute) are available for 63 days.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data points with a period of 3600 seconds (1 hour) are available for 455 days (15 months).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Data points that are initially published with a shorter period are aggregated together for long-term storage. For example, if you collect data using a period of 1 minute, the data remains available for 15 days with 1-minute resolution. After 15 days, this data is still available, but is aggregated and retrievable only with a resolution of 5 minutes. After 63 days, the data is further aggregated and is available with a resolution of 1 hour.&lt;/p&gt; &lt;p&gt;If you omit &lt;code&gt;Unit&lt;/code&gt; in your request, all data that was collected with any unit is returned, along with the corresponding units that were specified when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified. If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Using Metrics Insights queries with metric math&lt;/b&gt; &lt;/p&gt; &lt;p&gt;You can&#39;t mix a Metric Insights query and metric math syntax in the same expression, but you can reference results from a Metrics Insights query within other Metric math expressions. A Metrics Insights query without a &lt;b&gt;GROUP BY&lt;/b&gt; clause returns a single time-series (TS), and can be used as input for a metric math expression that expects a single time series. A Metrics Insights query with a &lt;b&gt;GROUP BY&lt;/b&gt; clause returns an array of time-series (TS[]), and can be used as input for a metric math expression that expects an array of time series. &lt;/p&gt;
     * @param metricDataQueries The metric queries to be returned. A single &lt;code&gt;GetMetricData&lt;/code&gt; call can include as many as 500 &lt;code&gt;MetricDataQuery&lt;/code&gt; structures. Each of these structures can specify either a metric to retrieve, a Metrics Insights query, or a math expression to perform on retrieved data.  (required)
     * @param startTime &lt;p&gt;The time stamp indicating the earliest data to be returned.&lt;/p&gt; &lt;p&gt;The value specified is inclusive; results include data points with the specified time stamp. &lt;/p&gt; &lt;p&gt;CloudWatch rounds the specified time stamp as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Start time less than 15 days ago - Round down to the nearest whole minute. For example, 12:32:34 is rounded down to 12:32:00.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Start time between 15 and 63 days ago - Round down to the nearest 5-minute clock interval. For example, 12:32:34 is rounded down to 12:30:00.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Start time greater than 63 days ago - Round down to the nearest 1-hour clock interval. For example, 12:32:34 is rounded down to 12:00:00.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you set &lt;code&gt;Period&lt;/code&gt; to 5, 10, or 30, the start time of your request is rounded down to the nearest time that corresponds to even 5-, 10-, or 30-second divisions of a minute. For example, if you make a query at (HH:mm:ss) 01:05:23 for the previous 10-second period, the start time of your request is rounded down and you receive data from 01:05:10 to 01:05:20. If you make a query at 15:07:17 for the previous 5 minutes of data, using a period of 5 seconds, you receive data timestamped between 15:02:15 and 15:07:15. &lt;/p&gt; &lt;p&gt;For better performance, specify &lt;code&gt;StartTime&lt;/code&gt; and &lt;code&gt;EndTime&lt;/code&gt; values that align with the value of the metric&#39;s &lt;code&gt;Period&lt;/code&gt; and sync up with the beginning and end of an hour. For example, if the &lt;code&gt;Period&lt;/code&gt; of a metric is 5 minutes, specifying 12:05 or 12:30 as &lt;code&gt;StartTime&lt;/code&gt; can get a faster response from CloudWatch than setting 12:07 or 12:29 as the &lt;code&gt;StartTime&lt;/code&gt;.&lt;/p&gt; (required)
     * @param endTime &lt;p&gt;The time stamp indicating the latest data to be returned.&lt;/p&gt; &lt;p&gt;The value specified is exclusive; results include data points up to the specified time stamp.&lt;/p&gt; &lt;p&gt;For better performance, specify &lt;code&gt;StartTime&lt;/code&gt; and &lt;code&gt;EndTime&lt;/code&gt; values that align with the value of the metric&#39;s &lt;code&gt;Period&lt;/code&gt; and sync up with the beginning and end of an hour. For example, if the &lt;code&gt;Period&lt;/code&gt; of a metric is 5 minutes, specifying 12:05 or 12:30 as &lt;code&gt;EndTime&lt;/code&gt; can get a faster response from CloudWatch than setting 12:07 or 12:29 as the &lt;code&gt;EndTime&lt;/code&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Include this value, if it was returned by the previous &lt;code&gt;GetMetricData&lt;/code&gt; operation, to get the next set of data points. (optional)
     * @param scanBy The order in which data points should be returned. &lt;code&gt;TimestampDescending&lt;/code&gt; returns the newest data first and paginates when the &lt;code&gt;MaxDatapoints&lt;/code&gt; limit is reached. &lt;code&gt;TimestampAscending&lt;/code&gt; returns the oldest data first and paginates when the &lt;code&gt;MaxDatapoints&lt;/code&gt; limit is reached. (optional)
     * @param maxDatapoints The maximum number of data points the request should return before paginating. If you omit this, the default of 100,800 is used. (optional)
     * @param labelOptions This structure includes the &lt;code&gt;Timezone&lt;/code&gt; parameter, which you can use to specify your time zone so that the labels of returned data display the correct time for your time zone.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetMetricDataAsync(List<MetricDataQuery> metricDataQueries, OffsetDateTime startTime, OffsetDateTime endTime, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, String scanBy, Integer maxDatapoints, GETGetMetricDataLabelOptionsParameter labelOptions, final ApiCallback<GetMetricDataOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETGetMetricDataValidateBeforeCall(metricDataQueries, startTime, endTime, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, scanBy, maxDatapoints, labelOptions, _callback);
        Type localVarReturnType = new TypeToken<GetMetricDataOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETGetMetricStatistics
     * @param namespace The namespace of the metric, with or without spaces. (required)
     * @param metricName The name of the metric, with or without spaces. (required)
     * @param startTime &lt;p&gt;The time stamp that determines the first data point to return. Start times are evaluated relative to the time that CloudWatch receives the request.&lt;/p&gt; &lt;p&gt;The value specified is inclusive; results include data points with the specified time stamp. In a raw HTTP query, the time stamp must be in ISO 8601 UTC format (for example, 2016-10-03T23:00:00Z).&lt;/p&gt; &lt;p&gt;CloudWatch rounds the specified time stamp as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Start time less than 15 days ago - Round down to the nearest whole minute. For example, 12:32:34 is rounded down to 12:32:00.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Start time between 15 and 63 days ago - Round down to the nearest 5-minute clock interval. For example, 12:32:34 is rounded down to 12:30:00.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Start time greater than 63 days ago - Round down to the nearest 1-hour clock interval. For example, 12:32:34 is rounded down to 12:00:00.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you set &lt;code&gt;Period&lt;/code&gt; to 5, 10, or 30, the start time of your request is rounded down to the nearest time that corresponds to even 5-, 10-, or 30-second divisions of a minute. For example, if you make a query at (HH:mm:ss) 01:05:23 for the previous 10-second period, the start time of your request is rounded down and you receive data from 01:05:10 to 01:05:20. If you make a query at 15:07:17 for the previous 5 minutes of data, using a period of 5 seconds, you receive data timestamped between 15:02:15 and 15:07:15. &lt;/p&gt; (required)
     * @param endTime &lt;p&gt;The time stamp that determines the last data point to return.&lt;/p&gt; &lt;p&gt;The value specified is exclusive; results include data points up to the specified time stamp. In a raw HTTP query, the time stamp must be in ISO 8601 UTC format (for example, 2016-10-10T23:00:00Z).&lt;/p&gt; (required)
     * @param period &lt;p&gt;The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a &lt;code&gt;PutMetricData&lt;/code&gt; call that includes a &lt;code&gt;StorageResolution&lt;/code&gt; of 1 second.&lt;/p&gt; &lt;p&gt;If the &lt;code&gt;StartTime&lt;/code&gt; parameter specifies a time stamp that is greater than 3 hours ago, you must specify the period as follows or no data points in that time range is returned:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Start time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Start time between 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Start time greater than 63 days ago - Use a multiple of 3600 seconds (1 hour).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dimensions The dimensions. If the metric contains multiple dimensions, you must include a value for each dimension. CloudWatch treats each unique combination of dimensions as a separate metric. If a specific combination of dimensions was not published, you can&#39;t retrieve statistics for it. You must specify the same dimensions that were used when the metrics were created. For an example, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#dimension-combinations\&quot;&gt;Dimension Combinations&lt;/a&gt; in the &lt;i&gt;Amazon CloudWatch User Guide&lt;/i&gt;. For more information about specifying dimensions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html\&quot;&gt;Publishing Metrics&lt;/a&gt; in the &lt;i&gt;Amazon CloudWatch User Guide&lt;/i&gt;. (optional)
     * @param statistics The metric statistics, other than percentile. For percentile statistics, use &lt;code&gt;ExtendedStatistics&lt;/code&gt;. When calling &lt;code&gt;GetMetricStatistics&lt;/code&gt;, you must specify either &lt;code&gt;Statistics&lt;/code&gt; or &lt;code&gt;ExtendedStatistics&lt;/code&gt;, but not both. (optional)
     * @param extendedStatistics The percentile statistics. Specify values between p0.0 and p100. When calling &lt;code&gt;GetMetricStatistics&lt;/code&gt;, you must specify either &lt;code&gt;Statistics&lt;/code&gt; or &lt;code&gt;ExtendedStatistics&lt;/code&gt;, but not both. Percentile statistics are not available for metrics when any of the metric values are negative numbers. (optional)
     * @param unit The unit for a given metric. If you omit &lt;code&gt;Unit&lt;/code&gt;, all data that was collected with any unit is returned, along with the corresponding units that were specified when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified. If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetMetricStatisticsCall(String namespace, String metricName, OffsetDateTime startTime, OffsetDateTime endTime, Integer period, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<Dimension> dimensions, List<Statistic> statistics, List<String> extendedStatistics, String unit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=GetMetricStatistics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (namespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Namespace", namespace));
        }

        if (metricName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MetricName", metricName));
        }

        if (dimensions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Dimensions", dimensions));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndTime", endTime));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (statistics != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Statistics", statistics));
        }

        if (extendedStatistics != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ExtendedStatistics", extendedStatistics));
        }

        if (unit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Unit", unit));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETGetMetricStatisticsValidateBeforeCall(String namespace, String metricName, OffsetDateTime startTime, OffsetDateTime endTime, Integer period, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<Dimension> dimensions, List<Statistic> statistics, List<String> extendedStatistics, String unit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling gETGetMetricStatistics(Async)");
        }

        // verify the required parameter 'metricName' is set
        if (metricName == null) {
            throw new ApiException("Missing the required parameter 'metricName' when calling gETGetMetricStatistics(Async)");
        }

        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling gETGetMetricStatistics(Async)");
        }

        // verify the required parameter 'endTime' is set
        if (endTime == null) {
            throw new ApiException("Missing the required parameter 'endTime' when calling gETGetMetricStatistics(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling gETGetMetricStatistics(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETGetMetricStatistics(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETGetMetricStatistics(Async)");
        }

        return gETGetMetricStatisticsCall(namespace, metricName, startTime, endTime, period, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dimensions, statistics, extendedStatistics, unit, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets statistics for the specified metric.&lt;/p&gt; &lt;p&gt;The maximum number of data points returned from a single call is 1,440. If you request more than 1,440 data points, CloudWatch returns an error. To reduce the number of data points, you can narrow the specified time range and make multiple requests across adjacent time ranges, or you can increase the specified period. Data points are not returned in chronological order.&lt;/p&gt; &lt;p&gt;CloudWatch aggregates data points based on the length of the period that you specify. For example, if you request statistics with a one-hour period, CloudWatch aggregates all data points with time stamps that fall within each one-hour period. Therefore, the number of values aggregated by CloudWatch is larger than the number of data points returned.&lt;/p&gt; &lt;p&gt;CloudWatch needs raw data points to calculate percentile statistics. If you publish data using a statistic set instead, you can only retrieve percentile statistics for this data if one of the following conditions is true:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The SampleCount value of the statistic set is 1.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Min and the Max values of the statistic set are equal.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Percentile statistics are not available for metrics when any of the metric values are negative numbers.&lt;/p&gt; &lt;p&gt;Amazon CloudWatch retains metric data as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Data points with a period of less than 60 seconds are available for 3 hours. These data points are high-resolution metrics and are available only for custom metrics that have been defined with a &lt;code&gt;StorageResolution&lt;/code&gt; of 1.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data points with a period of 60 seconds (1-minute) are available for 15 days.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data points with a period of 300 seconds (5-minute) are available for 63 days.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data points with a period of 3600 seconds (1 hour) are available for 455 days (15 months).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Data points that are initially published with a shorter period are aggregated together for long-term storage. For example, if you collect data using a period of 1 minute, the data remains available for 15 days with 1-minute resolution. After 15 days, this data is still available, but is aggregated and retrievable only with a resolution of 5 minutes. After 63 days, the data is further aggregated and is available with a resolution of 1 hour.&lt;/p&gt; &lt;p&gt;CloudWatch started retaining 5-minute and 1-hour metric data as of July 9, 2016.&lt;/p&gt; &lt;p&gt;For information about metrics and dimensions supported by Amazon Web Services services, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CW_Support_For_AWS.html\&quot;&gt;Amazon CloudWatch Metrics and Dimensions Reference&lt;/a&gt; in the &lt;i&gt;Amazon CloudWatch User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param namespace The namespace of the metric, with or without spaces. (required)
     * @param metricName The name of the metric, with or without spaces. (required)
     * @param startTime &lt;p&gt;The time stamp that determines the first data point to return. Start times are evaluated relative to the time that CloudWatch receives the request.&lt;/p&gt; &lt;p&gt;The value specified is inclusive; results include data points with the specified time stamp. In a raw HTTP query, the time stamp must be in ISO 8601 UTC format (for example, 2016-10-03T23:00:00Z).&lt;/p&gt; &lt;p&gt;CloudWatch rounds the specified time stamp as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Start time less than 15 days ago - Round down to the nearest whole minute. For example, 12:32:34 is rounded down to 12:32:00.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Start time between 15 and 63 days ago - Round down to the nearest 5-minute clock interval. For example, 12:32:34 is rounded down to 12:30:00.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Start time greater than 63 days ago - Round down to the nearest 1-hour clock interval. For example, 12:32:34 is rounded down to 12:00:00.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you set &lt;code&gt;Period&lt;/code&gt; to 5, 10, or 30, the start time of your request is rounded down to the nearest time that corresponds to even 5-, 10-, or 30-second divisions of a minute. For example, if you make a query at (HH:mm:ss) 01:05:23 for the previous 10-second period, the start time of your request is rounded down and you receive data from 01:05:10 to 01:05:20. If you make a query at 15:07:17 for the previous 5 minutes of data, using a period of 5 seconds, you receive data timestamped between 15:02:15 and 15:07:15. &lt;/p&gt; (required)
     * @param endTime &lt;p&gt;The time stamp that determines the last data point to return.&lt;/p&gt; &lt;p&gt;The value specified is exclusive; results include data points up to the specified time stamp. In a raw HTTP query, the time stamp must be in ISO 8601 UTC format (for example, 2016-10-10T23:00:00Z).&lt;/p&gt; (required)
     * @param period &lt;p&gt;The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a &lt;code&gt;PutMetricData&lt;/code&gt; call that includes a &lt;code&gt;StorageResolution&lt;/code&gt; of 1 second.&lt;/p&gt; &lt;p&gt;If the &lt;code&gt;StartTime&lt;/code&gt; parameter specifies a time stamp that is greater than 3 hours ago, you must specify the period as follows or no data points in that time range is returned:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Start time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Start time between 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Start time greater than 63 days ago - Use a multiple of 3600 seconds (1 hour).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dimensions The dimensions. If the metric contains multiple dimensions, you must include a value for each dimension. CloudWatch treats each unique combination of dimensions as a separate metric. If a specific combination of dimensions was not published, you can&#39;t retrieve statistics for it. You must specify the same dimensions that were used when the metrics were created. For an example, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#dimension-combinations\&quot;&gt;Dimension Combinations&lt;/a&gt; in the &lt;i&gt;Amazon CloudWatch User Guide&lt;/i&gt;. For more information about specifying dimensions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html\&quot;&gt;Publishing Metrics&lt;/a&gt; in the &lt;i&gt;Amazon CloudWatch User Guide&lt;/i&gt;. (optional)
     * @param statistics The metric statistics, other than percentile. For percentile statistics, use &lt;code&gt;ExtendedStatistics&lt;/code&gt;. When calling &lt;code&gt;GetMetricStatistics&lt;/code&gt;, you must specify either &lt;code&gt;Statistics&lt;/code&gt; or &lt;code&gt;ExtendedStatistics&lt;/code&gt;, but not both. (optional)
     * @param extendedStatistics The percentile statistics. Specify values between p0.0 and p100. When calling &lt;code&gt;GetMetricStatistics&lt;/code&gt;, you must specify either &lt;code&gt;Statistics&lt;/code&gt; or &lt;code&gt;ExtendedStatistics&lt;/code&gt;, but not both. Percentile statistics are not available for metrics when any of the metric values are negative numbers. (optional)
     * @param unit The unit for a given metric. If you omit &lt;code&gt;Unit&lt;/code&gt;, all data that was collected with any unit is returned, along with the corresponding units that were specified when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified. If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions. (optional)
     * @return GetMetricStatisticsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public GetMetricStatisticsOutput gETGetMetricStatistics(String namespace, String metricName, OffsetDateTime startTime, OffsetDateTime endTime, Integer period, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<Dimension> dimensions, List<Statistic> statistics, List<String> extendedStatistics, String unit) throws ApiException {
        ApiResponse<GetMetricStatisticsOutput> localVarResp = gETGetMetricStatisticsWithHttpInfo(namespace, metricName, startTime, endTime, period, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dimensions, statistics, extendedStatistics, unit);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets statistics for the specified metric.&lt;/p&gt; &lt;p&gt;The maximum number of data points returned from a single call is 1,440. If you request more than 1,440 data points, CloudWatch returns an error. To reduce the number of data points, you can narrow the specified time range and make multiple requests across adjacent time ranges, or you can increase the specified period. Data points are not returned in chronological order.&lt;/p&gt; &lt;p&gt;CloudWatch aggregates data points based on the length of the period that you specify. For example, if you request statistics with a one-hour period, CloudWatch aggregates all data points with time stamps that fall within each one-hour period. Therefore, the number of values aggregated by CloudWatch is larger than the number of data points returned.&lt;/p&gt; &lt;p&gt;CloudWatch needs raw data points to calculate percentile statistics. If you publish data using a statistic set instead, you can only retrieve percentile statistics for this data if one of the following conditions is true:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The SampleCount value of the statistic set is 1.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Min and the Max values of the statistic set are equal.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Percentile statistics are not available for metrics when any of the metric values are negative numbers.&lt;/p&gt; &lt;p&gt;Amazon CloudWatch retains metric data as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Data points with a period of less than 60 seconds are available for 3 hours. These data points are high-resolution metrics and are available only for custom metrics that have been defined with a &lt;code&gt;StorageResolution&lt;/code&gt; of 1.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data points with a period of 60 seconds (1-minute) are available for 15 days.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data points with a period of 300 seconds (5-minute) are available for 63 days.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data points with a period of 3600 seconds (1 hour) are available for 455 days (15 months).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Data points that are initially published with a shorter period are aggregated together for long-term storage. For example, if you collect data using a period of 1 minute, the data remains available for 15 days with 1-minute resolution. After 15 days, this data is still available, but is aggregated and retrievable only with a resolution of 5 minutes. After 63 days, the data is further aggregated and is available with a resolution of 1 hour.&lt;/p&gt; &lt;p&gt;CloudWatch started retaining 5-minute and 1-hour metric data as of July 9, 2016.&lt;/p&gt; &lt;p&gt;For information about metrics and dimensions supported by Amazon Web Services services, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CW_Support_For_AWS.html\&quot;&gt;Amazon CloudWatch Metrics and Dimensions Reference&lt;/a&gt; in the &lt;i&gt;Amazon CloudWatch User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param namespace The namespace of the metric, with or without spaces. (required)
     * @param metricName The name of the metric, with or without spaces. (required)
     * @param startTime &lt;p&gt;The time stamp that determines the first data point to return. Start times are evaluated relative to the time that CloudWatch receives the request.&lt;/p&gt; &lt;p&gt;The value specified is inclusive; results include data points with the specified time stamp. In a raw HTTP query, the time stamp must be in ISO 8601 UTC format (for example, 2016-10-03T23:00:00Z).&lt;/p&gt; &lt;p&gt;CloudWatch rounds the specified time stamp as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Start time less than 15 days ago - Round down to the nearest whole minute. For example, 12:32:34 is rounded down to 12:32:00.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Start time between 15 and 63 days ago - Round down to the nearest 5-minute clock interval. For example, 12:32:34 is rounded down to 12:30:00.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Start time greater than 63 days ago - Round down to the nearest 1-hour clock interval. For example, 12:32:34 is rounded down to 12:00:00.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you set &lt;code&gt;Period&lt;/code&gt; to 5, 10, or 30, the start time of your request is rounded down to the nearest time that corresponds to even 5-, 10-, or 30-second divisions of a minute. For example, if you make a query at (HH:mm:ss) 01:05:23 for the previous 10-second period, the start time of your request is rounded down and you receive data from 01:05:10 to 01:05:20. If you make a query at 15:07:17 for the previous 5 minutes of data, using a period of 5 seconds, you receive data timestamped between 15:02:15 and 15:07:15. &lt;/p&gt; (required)
     * @param endTime &lt;p&gt;The time stamp that determines the last data point to return.&lt;/p&gt; &lt;p&gt;The value specified is exclusive; results include data points up to the specified time stamp. In a raw HTTP query, the time stamp must be in ISO 8601 UTC format (for example, 2016-10-10T23:00:00Z).&lt;/p&gt; (required)
     * @param period &lt;p&gt;The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a &lt;code&gt;PutMetricData&lt;/code&gt; call that includes a &lt;code&gt;StorageResolution&lt;/code&gt; of 1 second.&lt;/p&gt; &lt;p&gt;If the &lt;code&gt;StartTime&lt;/code&gt; parameter specifies a time stamp that is greater than 3 hours ago, you must specify the period as follows or no data points in that time range is returned:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Start time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Start time between 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Start time greater than 63 days ago - Use a multiple of 3600 seconds (1 hour).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dimensions The dimensions. If the metric contains multiple dimensions, you must include a value for each dimension. CloudWatch treats each unique combination of dimensions as a separate metric. If a specific combination of dimensions was not published, you can&#39;t retrieve statistics for it. You must specify the same dimensions that were used when the metrics were created. For an example, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#dimension-combinations\&quot;&gt;Dimension Combinations&lt;/a&gt; in the &lt;i&gt;Amazon CloudWatch User Guide&lt;/i&gt;. For more information about specifying dimensions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html\&quot;&gt;Publishing Metrics&lt;/a&gt; in the &lt;i&gt;Amazon CloudWatch User Guide&lt;/i&gt;. (optional)
     * @param statistics The metric statistics, other than percentile. For percentile statistics, use &lt;code&gt;ExtendedStatistics&lt;/code&gt;. When calling &lt;code&gt;GetMetricStatistics&lt;/code&gt;, you must specify either &lt;code&gt;Statistics&lt;/code&gt; or &lt;code&gt;ExtendedStatistics&lt;/code&gt;, but not both. (optional)
     * @param extendedStatistics The percentile statistics. Specify values between p0.0 and p100. When calling &lt;code&gt;GetMetricStatistics&lt;/code&gt;, you must specify either &lt;code&gt;Statistics&lt;/code&gt; or &lt;code&gt;ExtendedStatistics&lt;/code&gt;, but not both. Percentile statistics are not available for metrics when any of the metric values are negative numbers. (optional)
     * @param unit The unit for a given metric. If you omit &lt;code&gt;Unit&lt;/code&gt;, all data that was collected with any unit is returned, along with the corresponding units that were specified when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified. If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions. (optional)
     * @return ApiResponse&lt;GetMetricStatisticsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMetricStatisticsOutput> gETGetMetricStatisticsWithHttpInfo(String namespace, String metricName, OffsetDateTime startTime, OffsetDateTime endTime, Integer period, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<Dimension> dimensions, List<Statistic> statistics, List<String> extendedStatistics, String unit) throws ApiException {
        okhttp3.Call localVarCall = gETGetMetricStatisticsValidateBeforeCall(namespace, metricName, startTime, endTime, period, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dimensions, statistics, extendedStatistics, unit, null);
        Type localVarReturnType = new TypeToken<GetMetricStatisticsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets statistics for the specified metric.&lt;/p&gt; &lt;p&gt;The maximum number of data points returned from a single call is 1,440. If you request more than 1,440 data points, CloudWatch returns an error. To reduce the number of data points, you can narrow the specified time range and make multiple requests across adjacent time ranges, or you can increase the specified period. Data points are not returned in chronological order.&lt;/p&gt; &lt;p&gt;CloudWatch aggregates data points based on the length of the period that you specify. For example, if you request statistics with a one-hour period, CloudWatch aggregates all data points with time stamps that fall within each one-hour period. Therefore, the number of values aggregated by CloudWatch is larger than the number of data points returned.&lt;/p&gt; &lt;p&gt;CloudWatch needs raw data points to calculate percentile statistics. If you publish data using a statistic set instead, you can only retrieve percentile statistics for this data if one of the following conditions is true:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The SampleCount value of the statistic set is 1.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Min and the Max values of the statistic set are equal.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Percentile statistics are not available for metrics when any of the metric values are negative numbers.&lt;/p&gt; &lt;p&gt;Amazon CloudWatch retains metric data as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Data points with a period of less than 60 seconds are available for 3 hours. These data points are high-resolution metrics and are available only for custom metrics that have been defined with a &lt;code&gt;StorageResolution&lt;/code&gt; of 1.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data points with a period of 60 seconds (1-minute) are available for 15 days.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data points with a period of 300 seconds (5-minute) are available for 63 days.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data points with a period of 3600 seconds (1 hour) are available for 455 days (15 months).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Data points that are initially published with a shorter period are aggregated together for long-term storage. For example, if you collect data using a period of 1 minute, the data remains available for 15 days with 1-minute resolution. After 15 days, this data is still available, but is aggregated and retrievable only with a resolution of 5 minutes. After 63 days, the data is further aggregated and is available with a resolution of 1 hour.&lt;/p&gt; &lt;p&gt;CloudWatch started retaining 5-minute and 1-hour metric data as of July 9, 2016.&lt;/p&gt; &lt;p&gt;For information about metrics and dimensions supported by Amazon Web Services services, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CW_Support_For_AWS.html\&quot;&gt;Amazon CloudWatch Metrics and Dimensions Reference&lt;/a&gt; in the &lt;i&gt;Amazon CloudWatch User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param namespace The namespace of the metric, with or without spaces. (required)
     * @param metricName The name of the metric, with or without spaces. (required)
     * @param startTime &lt;p&gt;The time stamp that determines the first data point to return. Start times are evaluated relative to the time that CloudWatch receives the request.&lt;/p&gt; &lt;p&gt;The value specified is inclusive; results include data points with the specified time stamp. In a raw HTTP query, the time stamp must be in ISO 8601 UTC format (for example, 2016-10-03T23:00:00Z).&lt;/p&gt; &lt;p&gt;CloudWatch rounds the specified time stamp as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Start time less than 15 days ago - Round down to the nearest whole minute. For example, 12:32:34 is rounded down to 12:32:00.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Start time between 15 and 63 days ago - Round down to the nearest 5-minute clock interval. For example, 12:32:34 is rounded down to 12:30:00.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Start time greater than 63 days ago - Round down to the nearest 1-hour clock interval. For example, 12:32:34 is rounded down to 12:00:00.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you set &lt;code&gt;Period&lt;/code&gt; to 5, 10, or 30, the start time of your request is rounded down to the nearest time that corresponds to even 5-, 10-, or 30-second divisions of a minute. For example, if you make a query at (HH:mm:ss) 01:05:23 for the previous 10-second period, the start time of your request is rounded down and you receive data from 01:05:10 to 01:05:20. If you make a query at 15:07:17 for the previous 5 minutes of data, using a period of 5 seconds, you receive data timestamped between 15:02:15 and 15:07:15. &lt;/p&gt; (required)
     * @param endTime &lt;p&gt;The time stamp that determines the last data point to return.&lt;/p&gt; &lt;p&gt;The value specified is exclusive; results include data points up to the specified time stamp. In a raw HTTP query, the time stamp must be in ISO 8601 UTC format (for example, 2016-10-10T23:00:00Z).&lt;/p&gt; (required)
     * @param period &lt;p&gt;The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a &lt;code&gt;PutMetricData&lt;/code&gt; call that includes a &lt;code&gt;StorageResolution&lt;/code&gt; of 1 second.&lt;/p&gt; &lt;p&gt;If the &lt;code&gt;StartTime&lt;/code&gt; parameter specifies a time stamp that is greater than 3 hours ago, you must specify the period as follows or no data points in that time range is returned:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Start time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Start time between 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Start time greater than 63 days ago - Use a multiple of 3600 seconds (1 hour).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dimensions The dimensions. If the metric contains multiple dimensions, you must include a value for each dimension. CloudWatch treats each unique combination of dimensions as a separate metric. If a specific combination of dimensions was not published, you can&#39;t retrieve statistics for it. You must specify the same dimensions that were used when the metrics were created. For an example, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#dimension-combinations\&quot;&gt;Dimension Combinations&lt;/a&gt; in the &lt;i&gt;Amazon CloudWatch User Guide&lt;/i&gt;. For more information about specifying dimensions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html\&quot;&gt;Publishing Metrics&lt;/a&gt; in the &lt;i&gt;Amazon CloudWatch User Guide&lt;/i&gt;. (optional)
     * @param statistics The metric statistics, other than percentile. For percentile statistics, use &lt;code&gt;ExtendedStatistics&lt;/code&gt;. When calling &lt;code&gt;GetMetricStatistics&lt;/code&gt;, you must specify either &lt;code&gt;Statistics&lt;/code&gt; or &lt;code&gt;ExtendedStatistics&lt;/code&gt;, but not both. (optional)
     * @param extendedStatistics The percentile statistics. Specify values between p0.0 and p100. When calling &lt;code&gt;GetMetricStatistics&lt;/code&gt;, you must specify either &lt;code&gt;Statistics&lt;/code&gt; or &lt;code&gt;ExtendedStatistics&lt;/code&gt;, but not both. Percentile statistics are not available for metrics when any of the metric values are negative numbers. (optional)
     * @param unit The unit for a given metric. If you omit &lt;code&gt;Unit&lt;/code&gt;, all data that was collected with any unit is returned, along with the corresponding units that were specified when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified. If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetMetricStatisticsAsync(String namespace, String metricName, OffsetDateTime startTime, OffsetDateTime endTime, Integer period, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<Dimension> dimensions, List<Statistic> statistics, List<String> extendedStatistics, String unit, final ApiCallback<GetMetricStatisticsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETGetMetricStatisticsValidateBeforeCall(namespace, metricName, startTime, endTime, period, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dimensions, statistics, extendedStatistics, unit, _callback);
        Type localVarReturnType = new TypeToken<GetMetricStatisticsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETGetMetricStream
     * @param name The name of the metric stream to retrieve information about. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetMetricStreamCall(String name, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=GetMetricStream";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Name", name));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETGetMetricStreamValidateBeforeCall(String name, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling gETGetMetricStream(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETGetMetricStream(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETGetMetricStream(Async)");
        }

        return gETGetMetricStreamCall(name, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Returns information about the metric stream that you specify.
     * @param name The name of the metric stream to retrieve information about. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetMetricStreamOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public GetMetricStreamOutput gETGetMetricStream(String name, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetMetricStreamOutput> localVarResp = gETGetMetricStreamWithHttpInfo(name, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about the metric stream that you specify.
     * @param name The name of the metric stream to retrieve information about. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetMetricStreamOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMetricStreamOutput> gETGetMetricStreamWithHttpInfo(String name, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETGetMetricStreamValidateBeforeCall(name, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetMetricStreamOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about the metric stream that you specify.
     * @param name The name of the metric stream to retrieve information about. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetMetricStreamAsync(String name, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetMetricStreamOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETGetMetricStreamValidateBeforeCall(name, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetMetricStreamOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETGetMetricWidgetImage
     * @param metricWidget &lt;p&gt;A JSON string that defines the bitmap graph to be retrieved. The string includes the metrics to include in the graph, statistics, annotations, title, axis limits, and so on. You can include only one &lt;code&gt;MetricWidget&lt;/code&gt; parameter in each &lt;code&gt;GetMetricWidgetImage&lt;/code&gt; call.&lt;/p&gt; &lt;p&gt;For more information about the syntax of &lt;code&gt;MetricWidget&lt;/code&gt; see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Metric-Widget-Structure.html\&quot;&gt;GetMetricWidgetImage: Metric Widget Structure and Syntax&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If any metric on the graph could not load all the requested data points, an orange triangle with an exclamation point appears next to the graph legend.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param outputFormat &lt;p&gt;The format of the resulting image. Only PNG images are supported.&lt;/p&gt; &lt;p&gt;The default is &lt;code&gt;png&lt;/code&gt;. If you specify &lt;code&gt;png&lt;/code&gt;, the API returns an HTTP response with the content-type set to &lt;code&gt;text/xml&lt;/code&gt;. The image data is in a &lt;code&gt;MetricWidgetImage&lt;/code&gt; field. For example:&lt;/p&gt; &lt;p&gt; &lt;code&gt; &amp;lt;GetMetricWidgetImageResponse xmlns&#x3D;&amp;lt;URLstring&amp;gt;&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; &amp;lt;GetMetricWidgetImageResult&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; &amp;lt;MetricWidgetImage&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; iVBORw0KGgoAAAANSUhEUgAAAlgAAAGQEAYAAAAip...&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; &amp;lt;/MetricWidgetImage&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; &amp;lt;/GetMetricWidgetImageResult&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; &amp;lt;ResponseMetadata&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; &amp;lt;RequestId&amp;gt;6f0d4192-4d42-11e8-82c1-f539a07e0e3b&amp;lt;/RequestId&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; &amp;lt;/ResponseMetadata&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;&amp;lt;/GetMetricWidgetImageResponse&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt;The &lt;code&gt;image/png&lt;/code&gt; setting is intended only for custom HTTP requests. For most use cases, and all actions using an Amazon Web Services SDK, you should use &lt;code&gt;png&lt;/code&gt;. If you specify &lt;code&gt;image/png&lt;/code&gt;, the HTTP response has a content-type set to &lt;code&gt;image/png&lt;/code&gt;, and the body of the response is a PNG image. &lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetMetricWidgetImageCall(String metricWidget, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String outputFormat, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=GetMetricWidgetImage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metricWidget != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MetricWidget", metricWidget));
        }

        if (outputFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OutputFormat", outputFormat));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETGetMetricWidgetImageValidateBeforeCall(String metricWidget, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String outputFormat, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'metricWidget' is set
        if (metricWidget == null) {
            throw new ApiException("Missing the required parameter 'metricWidget' when calling gETGetMetricWidgetImage(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETGetMetricWidgetImage(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETGetMetricWidgetImage(Async)");
        }

        return gETGetMetricWidgetImageCall(metricWidget, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, outputFormat, _callback);

    }

    /**
     * 
     * &lt;p&gt;You can use the &lt;code&gt;GetMetricWidgetImage&lt;/code&gt; API to retrieve a snapshot graph of one or more Amazon CloudWatch metrics as a bitmap image. You can then embed this image into your services and products, such as wiki pages, reports, and documents. You could also retrieve images regularly, such as every minute, and create your own custom live dashboard.&lt;/p&gt; &lt;p&gt;The graph you retrieve can include all CloudWatch metric graph features, including metric math and horizontal and vertical annotations.&lt;/p&gt; &lt;p&gt;There is a limit of 20 transactions per second for this API. Each &lt;code&gt;GetMetricWidgetImage&lt;/code&gt; action has the following limits:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;As many as 100 metrics in the graph.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Up to 100 KB uncompressed payload.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param metricWidget &lt;p&gt;A JSON string that defines the bitmap graph to be retrieved. The string includes the metrics to include in the graph, statistics, annotations, title, axis limits, and so on. You can include only one &lt;code&gt;MetricWidget&lt;/code&gt; parameter in each &lt;code&gt;GetMetricWidgetImage&lt;/code&gt; call.&lt;/p&gt; &lt;p&gt;For more information about the syntax of &lt;code&gt;MetricWidget&lt;/code&gt; see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Metric-Widget-Structure.html\&quot;&gt;GetMetricWidgetImage: Metric Widget Structure and Syntax&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If any metric on the graph could not load all the requested data points, an orange triangle with an exclamation point appears next to the graph legend.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param outputFormat &lt;p&gt;The format of the resulting image. Only PNG images are supported.&lt;/p&gt; &lt;p&gt;The default is &lt;code&gt;png&lt;/code&gt;. If you specify &lt;code&gt;png&lt;/code&gt;, the API returns an HTTP response with the content-type set to &lt;code&gt;text/xml&lt;/code&gt;. The image data is in a &lt;code&gt;MetricWidgetImage&lt;/code&gt; field. For example:&lt;/p&gt; &lt;p&gt; &lt;code&gt; &amp;lt;GetMetricWidgetImageResponse xmlns&#x3D;&amp;lt;URLstring&amp;gt;&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; &amp;lt;GetMetricWidgetImageResult&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; &amp;lt;MetricWidgetImage&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; iVBORw0KGgoAAAANSUhEUgAAAlgAAAGQEAYAAAAip...&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; &amp;lt;/MetricWidgetImage&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; &amp;lt;/GetMetricWidgetImageResult&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; &amp;lt;ResponseMetadata&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; &amp;lt;RequestId&amp;gt;6f0d4192-4d42-11e8-82c1-f539a07e0e3b&amp;lt;/RequestId&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; &amp;lt;/ResponseMetadata&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;&amp;lt;/GetMetricWidgetImageResponse&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt;The &lt;code&gt;image/png&lt;/code&gt; setting is intended only for custom HTTP requests. For most use cases, and all actions using an Amazon Web Services SDK, you should use &lt;code&gt;png&lt;/code&gt;. If you specify &lt;code&gt;image/png&lt;/code&gt;, the HTTP response has a content-type set to &lt;code&gt;image/png&lt;/code&gt;, and the body of the response is a PNG image. &lt;/p&gt; (optional)
     * @return GetMetricWidgetImageOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetMetricWidgetImageOutput gETGetMetricWidgetImage(String metricWidget, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String outputFormat) throws ApiException {
        ApiResponse<GetMetricWidgetImageOutput> localVarResp = gETGetMetricWidgetImageWithHttpInfo(metricWidget, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, outputFormat);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;You can use the &lt;code&gt;GetMetricWidgetImage&lt;/code&gt; API to retrieve a snapshot graph of one or more Amazon CloudWatch metrics as a bitmap image. You can then embed this image into your services and products, such as wiki pages, reports, and documents. You could also retrieve images regularly, such as every minute, and create your own custom live dashboard.&lt;/p&gt; &lt;p&gt;The graph you retrieve can include all CloudWatch metric graph features, including metric math and horizontal and vertical annotations.&lt;/p&gt; &lt;p&gt;There is a limit of 20 transactions per second for this API. Each &lt;code&gt;GetMetricWidgetImage&lt;/code&gt; action has the following limits:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;As many as 100 metrics in the graph.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Up to 100 KB uncompressed payload.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param metricWidget &lt;p&gt;A JSON string that defines the bitmap graph to be retrieved. The string includes the metrics to include in the graph, statistics, annotations, title, axis limits, and so on. You can include only one &lt;code&gt;MetricWidget&lt;/code&gt; parameter in each &lt;code&gt;GetMetricWidgetImage&lt;/code&gt; call.&lt;/p&gt; &lt;p&gt;For more information about the syntax of &lt;code&gt;MetricWidget&lt;/code&gt; see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Metric-Widget-Structure.html\&quot;&gt;GetMetricWidgetImage: Metric Widget Structure and Syntax&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If any metric on the graph could not load all the requested data points, an orange triangle with an exclamation point appears next to the graph legend.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param outputFormat &lt;p&gt;The format of the resulting image. Only PNG images are supported.&lt;/p&gt; &lt;p&gt;The default is &lt;code&gt;png&lt;/code&gt;. If you specify &lt;code&gt;png&lt;/code&gt;, the API returns an HTTP response with the content-type set to &lt;code&gt;text/xml&lt;/code&gt;. The image data is in a &lt;code&gt;MetricWidgetImage&lt;/code&gt; field. For example:&lt;/p&gt; &lt;p&gt; &lt;code&gt; &amp;lt;GetMetricWidgetImageResponse xmlns&#x3D;&amp;lt;URLstring&amp;gt;&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; &amp;lt;GetMetricWidgetImageResult&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; &amp;lt;MetricWidgetImage&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; iVBORw0KGgoAAAANSUhEUgAAAlgAAAGQEAYAAAAip...&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; &amp;lt;/MetricWidgetImage&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; &amp;lt;/GetMetricWidgetImageResult&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; &amp;lt;ResponseMetadata&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; &amp;lt;RequestId&amp;gt;6f0d4192-4d42-11e8-82c1-f539a07e0e3b&amp;lt;/RequestId&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; &amp;lt;/ResponseMetadata&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;&amp;lt;/GetMetricWidgetImageResponse&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt;The &lt;code&gt;image/png&lt;/code&gt; setting is intended only for custom HTTP requests. For most use cases, and all actions using an Amazon Web Services SDK, you should use &lt;code&gt;png&lt;/code&gt;. If you specify &lt;code&gt;image/png&lt;/code&gt;, the HTTP response has a content-type set to &lt;code&gt;image/png&lt;/code&gt;, and the body of the response is a PNG image. &lt;/p&gt; (optional)
     * @return ApiResponse&lt;GetMetricWidgetImageOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMetricWidgetImageOutput> gETGetMetricWidgetImageWithHttpInfo(String metricWidget, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String outputFormat) throws ApiException {
        okhttp3.Call localVarCall = gETGetMetricWidgetImageValidateBeforeCall(metricWidget, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, outputFormat, null);
        Type localVarReturnType = new TypeToken<GetMetricWidgetImageOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;You can use the &lt;code&gt;GetMetricWidgetImage&lt;/code&gt; API to retrieve a snapshot graph of one or more Amazon CloudWatch metrics as a bitmap image. You can then embed this image into your services and products, such as wiki pages, reports, and documents. You could also retrieve images regularly, such as every minute, and create your own custom live dashboard.&lt;/p&gt; &lt;p&gt;The graph you retrieve can include all CloudWatch metric graph features, including metric math and horizontal and vertical annotations.&lt;/p&gt; &lt;p&gt;There is a limit of 20 transactions per second for this API. Each &lt;code&gt;GetMetricWidgetImage&lt;/code&gt; action has the following limits:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;As many as 100 metrics in the graph.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Up to 100 KB uncompressed payload.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param metricWidget &lt;p&gt;A JSON string that defines the bitmap graph to be retrieved. The string includes the metrics to include in the graph, statistics, annotations, title, axis limits, and so on. You can include only one &lt;code&gt;MetricWidget&lt;/code&gt; parameter in each &lt;code&gt;GetMetricWidgetImage&lt;/code&gt; call.&lt;/p&gt; &lt;p&gt;For more information about the syntax of &lt;code&gt;MetricWidget&lt;/code&gt; see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Metric-Widget-Structure.html\&quot;&gt;GetMetricWidgetImage: Metric Widget Structure and Syntax&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If any metric on the graph could not load all the requested data points, an orange triangle with an exclamation point appears next to the graph legend.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param outputFormat &lt;p&gt;The format of the resulting image. Only PNG images are supported.&lt;/p&gt; &lt;p&gt;The default is &lt;code&gt;png&lt;/code&gt;. If you specify &lt;code&gt;png&lt;/code&gt;, the API returns an HTTP response with the content-type set to &lt;code&gt;text/xml&lt;/code&gt;. The image data is in a &lt;code&gt;MetricWidgetImage&lt;/code&gt; field. For example:&lt;/p&gt; &lt;p&gt; &lt;code&gt; &amp;lt;GetMetricWidgetImageResponse xmlns&#x3D;&amp;lt;URLstring&amp;gt;&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; &amp;lt;GetMetricWidgetImageResult&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; &amp;lt;MetricWidgetImage&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; iVBORw0KGgoAAAANSUhEUgAAAlgAAAGQEAYAAAAip...&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; &amp;lt;/MetricWidgetImage&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; &amp;lt;/GetMetricWidgetImageResult&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; &amp;lt;ResponseMetadata&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; &amp;lt;RequestId&amp;gt;6f0d4192-4d42-11e8-82c1-f539a07e0e3b&amp;lt;/RequestId&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; &amp;lt;/ResponseMetadata&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;&amp;lt;/GetMetricWidgetImageResponse&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt;The &lt;code&gt;image/png&lt;/code&gt; setting is intended only for custom HTTP requests. For most use cases, and all actions using an Amazon Web Services SDK, you should use &lt;code&gt;png&lt;/code&gt;. If you specify &lt;code&gt;image/png&lt;/code&gt;, the HTTP response has a content-type set to &lt;code&gt;image/png&lt;/code&gt;, and the body of the response is a PNG image. &lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetMetricWidgetImageAsync(String metricWidget, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String outputFormat, final ApiCallback<GetMetricWidgetImageOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETGetMetricWidgetImageValidateBeforeCall(metricWidget, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, outputFormat, _callback);
        Type localVarReturnType = new TypeToken<GetMetricWidgetImageOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListDashboards
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dashboardNamePrefix If you specify this parameter, only the dashboards with names starting with the specified string are listed. The maximum length is 255, and valid characters are A-Z, a-z, 0-9, \&quot;.\&quot;, \&quot;-\&quot;, and \&quot;_\&quot;.  (optional)
     * @param nextToken The token returned by a previous call to indicate that there is more data available. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListDashboardsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dashboardNamePrefix, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListDashboards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dashboardNamePrefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DashboardNamePrefix", dashboardNamePrefix));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListDashboardsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dashboardNamePrefix, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListDashboards(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListDashboards(Async)");
        }

        return gETListDashboardsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dashboardNamePrefix, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns a list of the dashboards for your account. If you include &lt;code&gt;DashboardNamePrefix&lt;/code&gt;, only those dashboards with names starting with the prefix are listed. Otherwise, all dashboards in your account are listed. &lt;/p&gt; &lt;p&gt; &lt;code&gt;ListDashboards&lt;/code&gt; returns up to 1000 results on one page. If there are more than 1000 dashboards, you can call &lt;code&gt;ListDashboards&lt;/code&gt; again and include the value you received for &lt;code&gt;NextToken&lt;/code&gt; in the first call, to receive the next 1000 results.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dashboardNamePrefix If you specify this parameter, only the dashboards with names starting with the specified string are listed. The maximum length is 255, and valid characters are A-Z, a-z, 0-9, \&quot;.\&quot;, \&quot;-\&quot;, and \&quot;_\&quot;.  (optional)
     * @param nextToken The token returned by a previous call to indicate that there is more data available. (optional)
     * @return ListDashboardsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public ListDashboardsOutput gETListDashboards(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dashboardNamePrefix, String nextToken) throws ApiException {
        ApiResponse<ListDashboardsOutput> localVarResp = gETListDashboardsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dashboardNamePrefix, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns a list of the dashboards for your account. If you include &lt;code&gt;DashboardNamePrefix&lt;/code&gt;, only those dashboards with names starting with the prefix are listed. Otherwise, all dashboards in your account are listed. &lt;/p&gt; &lt;p&gt; &lt;code&gt;ListDashboards&lt;/code&gt; returns up to 1000 results on one page. If there are more than 1000 dashboards, you can call &lt;code&gt;ListDashboards&lt;/code&gt; again and include the value you received for &lt;code&gt;NextToken&lt;/code&gt; in the first call, to receive the next 1000 results.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dashboardNamePrefix If you specify this parameter, only the dashboards with names starting with the specified string are listed. The maximum length is 255, and valid characters are A-Z, a-z, 0-9, \&quot;.\&quot;, \&quot;-\&quot;, and \&quot;_\&quot;.  (optional)
     * @param nextToken The token returned by a previous call to indicate that there is more data available. (optional)
     * @return ApiResponse&lt;ListDashboardsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListDashboardsOutput> gETListDashboardsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dashboardNamePrefix, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = gETListDashboardsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dashboardNamePrefix, nextToken, null);
        Type localVarReturnType = new TypeToken<ListDashboardsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns a list of the dashboards for your account. If you include &lt;code&gt;DashboardNamePrefix&lt;/code&gt;, only those dashboards with names starting with the prefix are listed. Otherwise, all dashboards in your account are listed. &lt;/p&gt; &lt;p&gt; &lt;code&gt;ListDashboards&lt;/code&gt; returns up to 1000 results on one page. If there are more than 1000 dashboards, you can call &lt;code&gt;ListDashboards&lt;/code&gt; again and include the value you received for &lt;code&gt;NextToken&lt;/code&gt; in the first call, to receive the next 1000 results.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dashboardNamePrefix If you specify this parameter, only the dashboards with names starting with the specified string are listed. The maximum length is 255, and valid characters are A-Z, a-z, 0-9, \&quot;.\&quot;, \&quot;-\&quot;, and \&quot;_\&quot;.  (optional)
     * @param nextToken The token returned by a previous call to indicate that there is more data available. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListDashboardsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dashboardNamePrefix, String nextToken, final ApiCallback<ListDashboardsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListDashboardsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dashboardNamePrefix, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListDashboardsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListManagedInsightRules
     * @param resourceARN  The ARN of an Amazon Web Services resource that has managed Contributor Insights rules.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken  Include this value to get the next set of rules if the value was returned by the previous operation.  (optional)
     * @param maxResults  The maximum number of results to return in one operation. If you omit this parameter, the default number is used. The default number is &lt;code&gt;100&lt;/code&gt;.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListManagedInsightRulesCall(String resourceARN, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListManagedInsightRules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resourceARN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ResourceARN", resourceARN));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListManagedInsightRulesValidateBeforeCall(String resourceARN, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceARN' is set
        if (resourceARN == null) {
            throw new ApiException("Missing the required parameter 'resourceARN' when calling gETListManagedInsightRules(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListManagedInsightRules(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListManagedInsightRules(Async)");
        }

        return gETListManagedInsightRulesCall(resourceARN, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, _callback);

    }

    /**
     * 
     *  Returns a list that contains the number of managed Contributor Insights rules in your account. 
     * @param resourceARN  The ARN of an Amazon Web Services resource that has managed Contributor Insights rules.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken  Include this value to get the next set of rules if the value was returned by the previous operation.  (optional)
     * @param maxResults  The maximum number of results to return in one operation. If you omit this parameter, the default number is used. The default number is &lt;code&gt;100&lt;/code&gt;.  (optional)
     * @return ListManagedInsightRulesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public ListManagedInsightRulesOutput gETListManagedInsightRules(String resourceARN, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults) throws ApiException {
        ApiResponse<ListManagedInsightRulesOutput> localVarResp = gETListManagedInsightRulesWithHttpInfo(resourceARN, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        return localVarResp.getData();
    }

    /**
     * 
     *  Returns a list that contains the number of managed Contributor Insights rules in your account. 
     * @param resourceARN  The ARN of an Amazon Web Services resource that has managed Contributor Insights rules.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken  Include this value to get the next set of rules if the value was returned by the previous operation.  (optional)
     * @param maxResults  The maximum number of results to return in one operation. If you omit this parameter, the default number is used. The default number is &lt;code&gt;100&lt;/code&gt;.  (optional)
     * @return ApiResponse&lt;ListManagedInsightRulesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListManagedInsightRulesOutput> gETListManagedInsightRulesWithHttpInfo(String resourceARN, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = gETListManagedInsightRulesValidateBeforeCall(resourceARN, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, null);
        Type localVarReturnType = new TypeToken<ListManagedInsightRulesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Returns a list that contains the number of managed Contributor Insights rules in your account. 
     * @param resourceARN  The ARN of an Amazon Web Services resource that has managed Contributor Insights rules.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken  Include this value to get the next set of rules if the value was returned by the previous operation.  (optional)
     * @param maxResults  The maximum number of results to return in one operation. If you omit this parameter, the default number is used. The default number is &lt;code&gt;100&lt;/code&gt;.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListManagedInsightRulesAsync(String resourceARN, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, final ApiCallback<ListManagedInsightRulesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListManagedInsightRulesValidateBeforeCall(resourceARN, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, _callback);
        Type localVarReturnType = new TypeToken<ListManagedInsightRulesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListMetricStreams
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Include this value, if it was returned by the previous call, to get the next set of metric streams. (optional)
     * @param maxResults The maximum number of results to return in one operation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListMetricStreamsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListMetricStreams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListMetricStreamsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListMetricStreams(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListMetricStreams(Async)");
        }

        return gETListMetricStreamsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, _callback);

    }

    /**
     * 
     * Returns a list of metric streams in this account.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Include this value, if it was returned by the previous call, to get the next set of metric streams. (optional)
     * @param maxResults The maximum number of results to return in one operation. (optional)
     * @return ListMetricStreamsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ListMetricStreamsOutput gETListMetricStreams(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults) throws ApiException {
        ApiResponse<ListMetricStreamsOutput> localVarResp = gETListMetricStreamsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of metric streams in this account.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Include this value, if it was returned by the previous call, to get the next set of metric streams. (optional)
     * @param maxResults The maximum number of results to return in one operation. (optional)
     * @return ApiResponse&lt;ListMetricStreamsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListMetricStreamsOutput> gETListMetricStreamsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = gETListMetricStreamsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, null);
        Type localVarReturnType = new TypeToken<ListMetricStreamsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of metric streams in this account.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Include this value, if it was returned by the previous call, to get the next set of metric streams. (optional)
     * @param maxResults The maximum number of results to return in one operation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListMetricStreamsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, final ApiCallback<ListMetricStreamsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListMetricStreamsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, _callback);
        Type localVarReturnType = new TypeToken<ListMetricStreamsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListMetrics
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param namespace The metric namespace to filter against. Only the namespace that matches exactly will be returned. (optional)
     * @param metricName The name of the metric to filter against. Only the metrics with names that match exactly will be returned. (optional)
     * @param dimensions The dimensions to filter against. Only the dimensions that match exactly will be returned. (optional)
     * @param nextToken The token returned by a previous call to indicate that there is more data available. (optional)
     * @param recentlyActive &lt;p&gt;To filter the results to show only metrics that have had data points published in the past three hours, specify this parameter with a value of &lt;code&gt;PT3H&lt;/code&gt;. This is the only valid value for this parameter.&lt;/p&gt; &lt;p&gt;The results that are returned are an approximation of the value you specify. There is a low probability that the returned results include metrics with last published data as much as 40 minutes more than the specified time interval.&lt;/p&gt; (optional)
     * @param includeLinkedAccounts &lt;p&gt;If you are using this operation in a monitoring account, specify &lt;code&gt;true&lt;/code&gt; to include metrics from source accounts in the returned data.&lt;/p&gt; &lt;p&gt;The default is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param owningAccount When you use this operation in a monitoring account, use this field to return metrics only from one source account. To do so, specify that source account ID in this field, and also specify &lt;code&gt;true&lt;/code&gt; for &lt;code&gt;IncludeLinkedAccounts&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListMetricsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String namespace, String metricName, List<DimensionFilter> dimensions, String nextToken, String recentlyActive, Boolean includeLinkedAccounts, String owningAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListMetrics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (namespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Namespace", namespace));
        }

        if (metricName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MetricName", metricName));
        }

        if (dimensions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Dimensions", dimensions));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (recentlyActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RecentlyActive", recentlyActive));
        }

        if (includeLinkedAccounts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IncludeLinkedAccounts", includeLinkedAccounts));
        }

        if (owningAccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OwningAccount", owningAccount));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListMetricsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String namespace, String metricName, List<DimensionFilter> dimensions, String nextToken, String recentlyActive, Boolean includeLinkedAccounts, String owningAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListMetrics(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListMetrics(Async)");
        }

        return gETListMetricsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, namespace, metricName, dimensions, nextToken, recentlyActive, includeLinkedAccounts, owningAccount, _callback);

    }

    /**
     * 
     * &lt;p&gt;List the specified metrics. You can use the returned metrics with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html\&quot;&gt;GetMetricData&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html\&quot;&gt;GetMetricStatistics&lt;/a&gt; to get statistical data.&lt;/p&gt; &lt;p&gt;Up to 500 results are returned for any one call. To retrieve additional results, use the returned token with subsequent calls.&lt;/p&gt; &lt;p&gt;After you create a metric, allow up to 15 minutes for the metric to appear. To see metric statistics sooner, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html\&quot;&gt;GetMetricData&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html\&quot;&gt;GetMetricStatistics&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you are using CloudWatch cross-account observability, you can use this operation in a monitoring account and view metrics from the linked source accounts. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Unified-Cross-Account.html\&quot;&gt;CloudWatch cross-account observability&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;ListMetrics&lt;/code&gt; doesn&#39;t return information about metrics if those metrics haven&#39;t reported data in the past two weeks. To retrieve those metrics, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html\&quot;&gt;GetMetricData&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html\&quot;&gt;GetMetricStatistics&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param namespace The metric namespace to filter against. Only the namespace that matches exactly will be returned. (optional)
     * @param metricName The name of the metric to filter against. Only the metrics with names that match exactly will be returned. (optional)
     * @param dimensions The dimensions to filter against. Only the dimensions that match exactly will be returned. (optional)
     * @param nextToken The token returned by a previous call to indicate that there is more data available. (optional)
     * @param recentlyActive &lt;p&gt;To filter the results to show only metrics that have had data points published in the past three hours, specify this parameter with a value of &lt;code&gt;PT3H&lt;/code&gt;. This is the only valid value for this parameter.&lt;/p&gt; &lt;p&gt;The results that are returned are an approximation of the value you specify. There is a low probability that the returned results include metrics with last published data as much as 40 minutes more than the specified time interval.&lt;/p&gt; (optional)
     * @param includeLinkedAccounts &lt;p&gt;If you are using this operation in a monitoring account, specify &lt;code&gt;true&lt;/code&gt; to include metrics from source accounts in the returned data.&lt;/p&gt; &lt;p&gt;The default is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param owningAccount When you use this operation in a monitoring account, use this field to return metrics only from one source account. To do so, specify that source account ID in this field, and also specify &lt;code&gt;true&lt;/code&gt; for &lt;code&gt;IncludeLinkedAccounts&lt;/code&gt;. (optional)
     * @return ListMetricsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public ListMetricsOutput gETListMetrics(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String namespace, String metricName, List<DimensionFilter> dimensions, String nextToken, String recentlyActive, Boolean includeLinkedAccounts, String owningAccount) throws ApiException {
        ApiResponse<ListMetricsOutput> localVarResp = gETListMetricsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, namespace, metricName, dimensions, nextToken, recentlyActive, includeLinkedAccounts, owningAccount);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;List the specified metrics. You can use the returned metrics with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html\&quot;&gt;GetMetricData&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html\&quot;&gt;GetMetricStatistics&lt;/a&gt; to get statistical data.&lt;/p&gt; &lt;p&gt;Up to 500 results are returned for any one call. To retrieve additional results, use the returned token with subsequent calls.&lt;/p&gt; &lt;p&gt;After you create a metric, allow up to 15 minutes for the metric to appear. To see metric statistics sooner, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html\&quot;&gt;GetMetricData&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html\&quot;&gt;GetMetricStatistics&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you are using CloudWatch cross-account observability, you can use this operation in a monitoring account and view metrics from the linked source accounts. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Unified-Cross-Account.html\&quot;&gt;CloudWatch cross-account observability&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;ListMetrics&lt;/code&gt; doesn&#39;t return information about metrics if those metrics haven&#39;t reported data in the past two weeks. To retrieve those metrics, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html\&quot;&gt;GetMetricData&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html\&quot;&gt;GetMetricStatistics&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param namespace The metric namespace to filter against. Only the namespace that matches exactly will be returned. (optional)
     * @param metricName The name of the metric to filter against. Only the metrics with names that match exactly will be returned. (optional)
     * @param dimensions The dimensions to filter against. Only the dimensions that match exactly will be returned. (optional)
     * @param nextToken The token returned by a previous call to indicate that there is more data available. (optional)
     * @param recentlyActive &lt;p&gt;To filter the results to show only metrics that have had data points published in the past three hours, specify this parameter with a value of &lt;code&gt;PT3H&lt;/code&gt;. This is the only valid value for this parameter.&lt;/p&gt; &lt;p&gt;The results that are returned are an approximation of the value you specify. There is a low probability that the returned results include metrics with last published data as much as 40 minutes more than the specified time interval.&lt;/p&gt; (optional)
     * @param includeLinkedAccounts &lt;p&gt;If you are using this operation in a monitoring account, specify &lt;code&gt;true&lt;/code&gt; to include metrics from source accounts in the returned data.&lt;/p&gt; &lt;p&gt;The default is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param owningAccount When you use this operation in a monitoring account, use this field to return metrics only from one source account. To do so, specify that source account ID in this field, and also specify &lt;code&gt;true&lt;/code&gt; for &lt;code&gt;IncludeLinkedAccounts&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;ListMetricsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListMetricsOutput> gETListMetricsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String namespace, String metricName, List<DimensionFilter> dimensions, String nextToken, String recentlyActive, Boolean includeLinkedAccounts, String owningAccount) throws ApiException {
        okhttp3.Call localVarCall = gETListMetricsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, namespace, metricName, dimensions, nextToken, recentlyActive, includeLinkedAccounts, owningAccount, null);
        Type localVarReturnType = new TypeToken<ListMetricsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;List the specified metrics. You can use the returned metrics with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html\&quot;&gt;GetMetricData&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html\&quot;&gt;GetMetricStatistics&lt;/a&gt; to get statistical data.&lt;/p&gt; &lt;p&gt;Up to 500 results are returned for any one call. To retrieve additional results, use the returned token with subsequent calls.&lt;/p&gt; &lt;p&gt;After you create a metric, allow up to 15 minutes for the metric to appear. To see metric statistics sooner, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html\&quot;&gt;GetMetricData&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html\&quot;&gt;GetMetricStatistics&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you are using CloudWatch cross-account observability, you can use this operation in a monitoring account and view metrics from the linked source accounts. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Unified-Cross-Account.html\&quot;&gt;CloudWatch cross-account observability&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;ListMetrics&lt;/code&gt; doesn&#39;t return information about metrics if those metrics haven&#39;t reported data in the past two weeks. To retrieve those metrics, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html\&quot;&gt;GetMetricData&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html\&quot;&gt;GetMetricStatistics&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param namespace The metric namespace to filter against. Only the namespace that matches exactly will be returned. (optional)
     * @param metricName The name of the metric to filter against. Only the metrics with names that match exactly will be returned. (optional)
     * @param dimensions The dimensions to filter against. Only the dimensions that match exactly will be returned. (optional)
     * @param nextToken The token returned by a previous call to indicate that there is more data available. (optional)
     * @param recentlyActive &lt;p&gt;To filter the results to show only metrics that have had data points published in the past three hours, specify this parameter with a value of &lt;code&gt;PT3H&lt;/code&gt;. This is the only valid value for this parameter.&lt;/p&gt; &lt;p&gt;The results that are returned are an approximation of the value you specify. There is a low probability that the returned results include metrics with last published data as much as 40 minutes more than the specified time interval.&lt;/p&gt; (optional)
     * @param includeLinkedAccounts &lt;p&gt;If you are using this operation in a monitoring account, specify &lt;code&gt;true&lt;/code&gt; to include metrics from source accounts in the returned data.&lt;/p&gt; &lt;p&gt;The default is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param owningAccount When you use this operation in a monitoring account, use this field to return metrics only from one source account. To do so, specify that source account ID in this field, and also specify &lt;code&gt;true&lt;/code&gt; for &lt;code&gt;IncludeLinkedAccounts&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListMetricsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String namespace, String metricName, List<DimensionFilter> dimensions, String nextToken, String recentlyActive, Boolean includeLinkedAccounts, String owningAccount, final ApiCallback<ListMetricsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListMetricsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, namespace, metricName, dimensions, nextToken, recentlyActive, includeLinkedAccounts, owningAccount, _callback);
        Type localVarReturnType = new TypeToken<ListMetricsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListTagsForResource
     * @param resourceARN &lt;p&gt;The ARN of the CloudWatch resource that you want to view tags for.&lt;/p&gt; &lt;p&gt;The ARN format of an alarm is &lt;code&gt;arn:aws:cloudwatch:&lt;i&gt;Region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:alarm:&lt;i&gt;alarm-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;p&gt;The ARN format of a Contributor Insights rule is &lt;code&gt;arn:aws:cloudwatch:&lt;i&gt;Region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:insight-rule:&lt;i&gt;insight-rule-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;p&gt;For more information about ARN format, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncloudwatch.html#amazoncloudwatch-resources-for-iam-policies\&quot;&gt; Resource Types Defined by Amazon CloudWatch&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListTagsForResourceCall(String resourceARN, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListTagsForResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resourceARN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ResourceARN", resourceARN));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListTagsForResourceValidateBeforeCall(String resourceARN, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceARN' is set
        if (resourceARN == null) {
            throw new ApiException("Missing the required parameter 'resourceARN' when calling gETListTagsForResource(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListTagsForResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListTagsForResource(Async)");
        }

        return gETListTagsForResourceCall(resourceARN, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Displays the tags associated with a CloudWatch resource. Currently, alarms and Contributor Insights rules support tagging.
     * @param resourceARN &lt;p&gt;The ARN of the CloudWatch resource that you want to view tags for.&lt;/p&gt; &lt;p&gt;The ARN format of an alarm is &lt;code&gt;arn:aws:cloudwatch:&lt;i&gt;Region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:alarm:&lt;i&gt;alarm-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;p&gt;The ARN format of a Contributor Insights rule is &lt;code&gt;arn:aws:cloudwatch:&lt;i&gt;Region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:insight-rule:&lt;i&gt;insight-rule-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;p&gt;For more information about ARN format, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncloudwatch.html#amazoncloudwatch-resources-for-iam-policies\&quot;&gt; Resource Types Defined by Amazon CloudWatch&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListTagsForResourceOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public ListTagsForResourceOutput gETListTagsForResource(String resourceARN, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListTagsForResourceOutput> localVarResp = gETListTagsForResourceWithHttpInfo(resourceARN, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Displays the tags associated with a CloudWatch resource. Currently, alarms and Contributor Insights rules support tagging.
     * @param resourceARN &lt;p&gt;The ARN of the CloudWatch resource that you want to view tags for.&lt;/p&gt; &lt;p&gt;The ARN format of an alarm is &lt;code&gt;arn:aws:cloudwatch:&lt;i&gt;Region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:alarm:&lt;i&gt;alarm-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;p&gt;The ARN format of a Contributor Insights rule is &lt;code&gt;arn:aws:cloudwatch:&lt;i&gt;Region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:insight-rule:&lt;i&gt;insight-rule-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;p&gt;For more information about ARN format, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncloudwatch.html#amazoncloudwatch-resources-for-iam-policies\&quot;&gt; Resource Types Defined by Amazon CloudWatch&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListTagsForResourceOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTagsForResourceOutput> gETListTagsForResourceWithHttpInfo(String resourceARN, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETListTagsForResourceValidateBeforeCall(resourceARN, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListTagsForResourceOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Displays the tags associated with a CloudWatch resource. Currently, alarms and Contributor Insights rules support tagging.
     * @param resourceARN &lt;p&gt;The ARN of the CloudWatch resource that you want to view tags for.&lt;/p&gt; &lt;p&gt;The ARN format of an alarm is &lt;code&gt;arn:aws:cloudwatch:&lt;i&gt;Region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:alarm:&lt;i&gt;alarm-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;p&gt;The ARN format of a Contributor Insights rule is &lt;code&gt;arn:aws:cloudwatch:&lt;i&gt;Region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:insight-rule:&lt;i&gt;insight-rule-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;p&gt;For more information about ARN format, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncloudwatch.html#amazoncloudwatch-resources-for-iam-policies\&quot;&gt; Resource Types Defined by Amazon CloudWatch&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListTagsForResourceAsync(String resourceARN, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListTagsForResourceOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListTagsForResourceValidateBeforeCall(resourceARN, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListTagsForResourceOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETPutAnomalyDetector
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param namespace The namespace of the metric to create the anomaly detection model for. (optional)
     * @param metricName The name of the metric to create the anomaly detection model for. (optional)
     * @param dimensions The metric dimensions to create the anomaly detection model for. (optional)
     * @param stat The statistic to use for the metric and the anomaly detection model. (optional)
     * @param _configuration &lt;p&gt;The configuration specifies details about how the anomaly detection model is to be trained, including time ranges to exclude when training and updating the model. You can specify as many as 10 time ranges.&lt;/p&gt; &lt;p&gt;The configuration can also include the time zone to use for the metric.&lt;/p&gt; (optional)
     * @param singleMetricAnomalyDetector &lt;p&gt;A single metric anomaly detector to be created.&lt;/p&gt; &lt;p&gt;When using &lt;code&gt;SingleMetricAnomalyDetector&lt;/code&gt;, you cannot include the following parameters in the same operation:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Dimensions&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MetricName&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Namespace&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Stat&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;the &lt;code&gt;MetricMatchAnomalyDetector&lt;/code&gt; parameters of &lt;code&gt;PutAnomalyDetectorInput&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Instead, specify the single metric anomaly detector attributes as part of the property &lt;code&gt;SingleMetricAnomalyDetector&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param metricMathAnomalyDetector &lt;p&gt;The metric math anomaly detector to be created.&lt;/p&gt; &lt;p&gt;When using &lt;code&gt;MetricMathAnomalyDetector&lt;/code&gt;, you cannot include the following parameters in the same operation:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Dimensions&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MetricName&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Namespace&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Stat&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;the &lt;code&gt;SingleMetricAnomalyDetector&lt;/code&gt; parameters of &lt;code&gt;PutAnomalyDetectorInput&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Instead, specify the metric math anomaly detector attributes as part of the property &lt;code&gt;MetricMathAnomalyDetector&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPutAnomalyDetectorCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String namespace, String metricName, List<Dimension> dimensions, String stat, GETPutAnomalyDetectorConfigurationParameter _configuration, GETDeleteAnomalyDetectorSingleMetricAnomalyDetectorParameter singleMetricAnomalyDetector, GETDeleteAnomalyDetectorMetricMathAnomalyDetectorParameter metricMathAnomalyDetector, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=PutAnomalyDetector";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (namespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Namespace", namespace));
        }

        if (metricName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MetricName", metricName));
        }

        if (dimensions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Dimensions", dimensions));
        }

        if (stat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Stat", stat));
        }

        if (_configuration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Configuration", _configuration));
        }

        if (singleMetricAnomalyDetector != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SingleMetricAnomalyDetector", singleMetricAnomalyDetector));
        }

        if (metricMathAnomalyDetector != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MetricMathAnomalyDetector", metricMathAnomalyDetector));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETPutAnomalyDetectorValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String namespace, String metricName, List<Dimension> dimensions, String stat, GETPutAnomalyDetectorConfigurationParameter _configuration, GETDeleteAnomalyDetectorSingleMetricAnomalyDetectorParameter singleMetricAnomalyDetector, GETDeleteAnomalyDetectorMetricMathAnomalyDetectorParameter metricMathAnomalyDetector, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETPutAnomalyDetector(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETPutAnomalyDetector(Async)");
        }

        return gETPutAnomalyDetectorCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, namespace, metricName, dimensions, stat, _configuration, singleMetricAnomalyDetector, metricMathAnomalyDetector, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates an anomaly detection model for a CloudWatch metric. You can use the model to display a band of expected normal values when the metric is graphed.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Anomaly_Detection.html\&quot;&gt;CloudWatch Anomaly Detection&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param namespace The namespace of the metric to create the anomaly detection model for. (optional)
     * @param metricName The name of the metric to create the anomaly detection model for. (optional)
     * @param dimensions The metric dimensions to create the anomaly detection model for. (optional)
     * @param stat The statistic to use for the metric and the anomaly detection model. (optional)
     * @param _configuration &lt;p&gt;The configuration specifies details about how the anomaly detection model is to be trained, including time ranges to exclude when training and updating the model. You can specify as many as 10 time ranges.&lt;/p&gt; &lt;p&gt;The configuration can also include the time zone to use for the metric.&lt;/p&gt; (optional)
     * @param singleMetricAnomalyDetector &lt;p&gt;A single metric anomaly detector to be created.&lt;/p&gt; &lt;p&gt;When using &lt;code&gt;SingleMetricAnomalyDetector&lt;/code&gt;, you cannot include the following parameters in the same operation:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Dimensions&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MetricName&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Namespace&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Stat&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;the &lt;code&gt;MetricMatchAnomalyDetector&lt;/code&gt; parameters of &lt;code&gt;PutAnomalyDetectorInput&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Instead, specify the single metric anomaly detector attributes as part of the property &lt;code&gt;SingleMetricAnomalyDetector&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param metricMathAnomalyDetector &lt;p&gt;The metric math anomaly detector to be created.&lt;/p&gt; &lt;p&gt;When using &lt;code&gt;MetricMathAnomalyDetector&lt;/code&gt;, you cannot include the following parameters in the same operation:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Dimensions&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MetricName&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Namespace&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Stat&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;the &lt;code&gt;SingleMetricAnomalyDetector&lt;/code&gt; parameters of &lt;code&gt;PutAnomalyDetectorInput&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Instead, specify the metric math anomaly detector attributes as part of the property &lt;code&gt;MetricMathAnomalyDetector&lt;/code&gt;.&lt;/p&gt; (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETPutAnomalyDetector(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String namespace, String metricName, List<Dimension> dimensions, String stat, GETPutAnomalyDetectorConfigurationParameter _configuration, GETDeleteAnomalyDetectorSingleMetricAnomalyDetectorParameter singleMetricAnomalyDetector, GETDeleteAnomalyDetectorMetricMathAnomalyDetectorParameter metricMathAnomalyDetector) throws ApiException {
        ApiResponse<Object> localVarResp = gETPutAnomalyDetectorWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, namespace, metricName, dimensions, stat, _configuration, singleMetricAnomalyDetector, metricMathAnomalyDetector);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates an anomaly detection model for a CloudWatch metric. You can use the model to display a band of expected normal values when the metric is graphed.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Anomaly_Detection.html\&quot;&gt;CloudWatch Anomaly Detection&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param namespace The namespace of the metric to create the anomaly detection model for. (optional)
     * @param metricName The name of the metric to create the anomaly detection model for. (optional)
     * @param dimensions The metric dimensions to create the anomaly detection model for. (optional)
     * @param stat The statistic to use for the metric and the anomaly detection model. (optional)
     * @param _configuration &lt;p&gt;The configuration specifies details about how the anomaly detection model is to be trained, including time ranges to exclude when training and updating the model. You can specify as many as 10 time ranges.&lt;/p&gt; &lt;p&gt;The configuration can also include the time zone to use for the metric.&lt;/p&gt; (optional)
     * @param singleMetricAnomalyDetector &lt;p&gt;A single metric anomaly detector to be created.&lt;/p&gt; &lt;p&gt;When using &lt;code&gt;SingleMetricAnomalyDetector&lt;/code&gt;, you cannot include the following parameters in the same operation:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Dimensions&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MetricName&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Namespace&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Stat&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;the &lt;code&gt;MetricMatchAnomalyDetector&lt;/code&gt; parameters of &lt;code&gt;PutAnomalyDetectorInput&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Instead, specify the single metric anomaly detector attributes as part of the property &lt;code&gt;SingleMetricAnomalyDetector&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param metricMathAnomalyDetector &lt;p&gt;The metric math anomaly detector to be created.&lt;/p&gt; &lt;p&gt;When using &lt;code&gt;MetricMathAnomalyDetector&lt;/code&gt;, you cannot include the following parameters in the same operation:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Dimensions&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MetricName&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Namespace&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Stat&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;the &lt;code&gt;SingleMetricAnomalyDetector&lt;/code&gt; parameters of &lt;code&gt;PutAnomalyDetectorInput&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Instead, specify the metric math anomaly detector attributes as part of the property &lt;code&gt;MetricMathAnomalyDetector&lt;/code&gt;.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETPutAnomalyDetectorWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String namespace, String metricName, List<Dimension> dimensions, String stat, GETPutAnomalyDetectorConfigurationParameter _configuration, GETDeleteAnomalyDetectorSingleMetricAnomalyDetectorParameter singleMetricAnomalyDetector, GETDeleteAnomalyDetectorMetricMathAnomalyDetectorParameter metricMathAnomalyDetector) throws ApiException {
        okhttp3.Call localVarCall = gETPutAnomalyDetectorValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, namespace, metricName, dimensions, stat, _configuration, singleMetricAnomalyDetector, metricMathAnomalyDetector, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates an anomaly detection model for a CloudWatch metric. You can use the model to display a band of expected normal values when the metric is graphed.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Anomaly_Detection.html\&quot;&gt;CloudWatch Anomaly Detection&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param namespace The namespace of the metric to create the anomaly detection model for. (optional)
     * @param metricName The name of the metric to create the anomaly detection model for. (optional)
     * @param dimensions The metric dimensions to create the anomaly detection model for. (optional)
     * @param stat The statistic to use for the metric and the anomaly detection model. (optional)
     * @param _configuration &lt;p&gt;The configuration specifies details about how the anomaly detection model is to be trained, including time ranges to exclude when training and updating the model. You can specify as many as 10 time ranges.&lt;/p&gt; &lt;p&gt;The configuration can also include the time zone to use for the metric.&lt;/p&gt; (optional)
     * @param singleMetricAnomalyDetector &lt;p&gt;A single metric anomaly detector to be created.&lt;/p&gt; &lt;p&gt;When using &lt;code&gt;SingleMetricAnomalyDetector&lt;/code&gt;, you cannot include the following parameters in the same operation:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Dimensions&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MetricName&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Namespace&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Stat&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;the &lt;code&gt;MetricMatchAnomalyDetector&lt;/code&gt; parameters of &lt;code&gt;PutAnomalyDetectorInput&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Instead, specify the single metric anomaly detector attributes as part of the property &lt;code&gt;SingleMetricAnomalyDetector&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param metricMathAnomalyDetector &lt;p&gt;The metric math anomaly detector to be created.&lt;/p&gt; &lt;p&gt;When using &lt;code&gt;MetricMathAnomalyDetector&lt;/code&gt;, you cannot include the following parameters in the same operation:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Dimensions&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MetricName&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Namespace&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Stat&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;the &lt;code&gt;SingleMetricAnomalyDetector&lt;/code&gt; parameters of &lt;code&gt;PutAnomalyDetectorInput&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Instead, specify the metric math anomaly detector attributes as part of the property &lt;code&gt;MetricMathAnomalyDetector&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPutAnomalyDetectorAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String namespace, String metricName, List<Dimension> dimensions, String stat, GETPutAnomalyDetectorConfigurationParameter _configuration, GETDeleteAnomalyDetectorSingleMetricAnomalyDetectorParameter singleMetricAnomalyDetector, GETDeleteAnomalyDetectorMetricMathAnomalyDetectorParameter metricMathAnomalyDetector, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETPutAnomalyDetectorValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, namespace, metricName, dimensions, stat, _configuration, singleMetricAnomalyDetector, metricMathAnomalyDetector, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETPutCompositeAlarm
     * @param alarmName The name for the composite alarm. This name must be unique within the Region. (required)
     * @param alarmRule &lt;p&gt;An expression that specifies which other alarms are to be evaluated to determine this composite alarm&#39;s state. For each alarm that you reference, you designate a function that specifies whether that alarm needs to be in ALARM state, OK state, or INSUFFICIENT_DATA state. You can use operators (AND, OR and NOT) to combine multiple functions in a single expression. You can use parenthesis to logically group the functions in your expression.&lt;/p&gt; &lt;p&gt;You can use either alarm names or ARNs to reference the other alarms that are to be evaluated.&lt;/p&gt; &lt;p&gt;Functions can include the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ALARM(\&quot;&lt;i&gt;alarm-name&lt;/i&gt; or &lt;i&gt;alarm-ARN&lt;/i&gt;\&quot;)&lt;/code&gt; is TRUE if the named alarm is in ALARM state.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;OK(\&quot;&lt;i&gt;alarm-name&lt;/i&gt; or &lt;i&gt;alarm-ARN&lt;/i&gt;\&quot;)&lt;/code&gt; is TRUE if the named alarm is in OK state.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;INSUFFICIENT_DATA(\&quot;&lt;i&gt;alarm-name&lt;/i&gt; or &lt;i&gt;alarm-ARN&lt;/i&gt;\&quot;)&lt;/code&gt; is TRUE if the named alarm is in INSUFFICIENT_DATA state.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TRUE&lt;/code&gt; always evaluates to TRUE.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FALSE&lt;/code&gt; always evaluates to FALSE.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;TRUE and FALSE are useful for testing a complex &lt;code&gt;AlarmRule&lt;/code&gt; structure, and for testing your alarm actions.&lt;/p&gt; &lt;p&gt;Alarm names specified in &lt;code&gt;AlarmRule&lt;/code&gt; can be surrounded with double-quotes (\&quot;), but do not have to be.&lt;/p&gt; &lt;p&gt;The following are some examples of &lt;code&gt;AlarmRule&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ALARM(CPUUtilizationTooHigh) AND ALARM(DiskReadOpsTooHigh)&lt;/code&gt; specifies that the composite alarm goes into ALARM state only if both CPUUtilizationTooHigh and DiskReadOpsTooHigh alarms are in ALARM state.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ALARM(CPUUtilizationTooHigh) AND NOT ALARM(DeploymentInProgress)&lt;/code&gt; specifies that the alarm goes to ALARM state if CPUUtilizationTooHigh is in ALARM state and DeploymentInProgress is not in ALARM state. This example reduces alarm noise during a known deployment window.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;(ALARM(CPUUtilizationTooHigh) OR ALARM(DiskReadOpsTooHigh)) AND OK(NetworkOutTooHigh)&lt;/code&gt; goes into ALARM state if CPUUtilizationTooHigh OR DiskReadOpsTooHigh is in ALARM state, and if NetworkOutTooHigh is in OK state. This provides another example of using a composite alarm to prevent noise. This rule ensures that you are not notified with an alarm action on high CPU or disk usage if a known network problem is also occurring.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The &lt;code&gt;AlarmRule&lt;/code&gt; can specify as many as 100 \&quot;children\&quot; alarms. The &lt;code&gt;AlarmRule&lt;/code&gt; expression can have as many as 500 elements. Elements are child alarms, TRUE or FALSE statements, and parentheses.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param actionsEnabled Indicates whether actions should be executed during any changes to the alarm state of the composite alarm. The default is &lt;code&gt;TRUE&lt;/code&gt;. (optional)
     * @param alarmActions &lt;p&gt;The actions to execute when this alarm transitions to the &lt;code&gt;ALARM&lt;/code&gt; state from any other state. Each action is specified as an Amazon Resource Name (ARN).&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;arn:aws:sns:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:&lt;i&gt;sns-topic-name&lt;/i&gt; &lt;/code&gt; | &lt;code&gt;arn:aws:ssm:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:opsitem:&lt;i&gt;severity&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; (optional)
     * @param alarmDescription The description for the composite alarm. (optional)
     * @param insufficientDataActions &lt;p&gt;The actions to execute when this alarm transitions to the &lt;code&gt;INSUFFICIENT_DATA&lt;/code&gt; state from any other state. Each action is specified as an Amazon Resource Name (ARN).&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;arn:aws:sns:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:&lt;i&gt;sns-topic-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; (optional)
     * @param okActions &lt;p&gt;The actions to execute when this alarm transitions to an &lt;code&gt;OK&lt;/code&gt; state from any other state. Each action is specified as an Amazon Resource Name (ARN).&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;arn:aws:sns:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:&lt;i&gt;sns-topic-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; (optional)
     * @param tags &lt;p&gt;A list of key-value pairs to associate with the composite alarm. You can associate as many as 50 tags with an alarm.&lt;/p&gt; &lt;p&gt;Tags can help you organize and categorize your resources. You can also use them to scope user permissions, by granting a user permission to access or change only resources with certain tag values.&lt;/p&gt; (optional)
     * @param actionsSuppressor  Actions will be suppressed if the suppressor alarm is in the &lt;code&gt;ALARM&lt;/code&gt; state. &lt;code&gt;ActionsSuppressor&lt;/code&gt; can be an AlarmName or an Amazon Resource Name (ARN) from an existing alarm.  (optional)
     * @param actionsSuppressorWaitPeriod &lt;p&gt; The maximum time in seconds that the composite alarm waits for the suppressor alarm to go into the &lt;code&gt;ALARM&lt;/code&gt; state. After this time, the composite alarm performs its actions. &lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;code&gt;WaitPeriod&lt;/code&gt; is required only when &lt;code&gt;ActionsSuppressor&lt;/code&gt; is specified. &lt;/p&gt; &lt;/important&gt; (optional)
     * @param actionsSuppressorExtensionPeriod &lt;p&gt; The maximum time in seconds that the composite alarm waits after suppressor alarm goes out of the &lt;code&gt;ALARM&lt;/code&gt; state. After this time, the composite alarm performs its actions. &lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;code&gt;ExtensionPeriod&lt;/code&gt; is required only when &lt;code&gt;ActionsSuppressor&lt;/code&gt; is specified. &lt;/p&gt; &lt;/important&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPutCompositeAlarmCall(String alarmName, String alarmRule, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean actionsEnabled, List<String> alarmActions, String alarmDescription, List<String> insufficientDataActions, List<String> okActions, List<Tag> tags, String actionsSuppressor, Integer actionsSuppressorWaitPeriod, Integer actionsSuppressorExtensionPeriod, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=PutCompositeAlarm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (actionsEnabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ActionsEnabled", actionsEnabled));
        }

        if (alarmActions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "AlarmActions", alarmActions));
        }

        if (alarmDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AlarmDescription", alarmDescription));
        }

        if (alarmName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AlarmName", alarmName));
        }

        if (alarmRule != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AlarmRule", alarmRule));
        }

        if (insufficientDataActions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "InsufficientDataActions", insufficientDataActions));
        }

        if (okActions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "OKActions", okActions));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (actionsSuppressor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ActionsSuppressor", actionsSuppressor));
        }

        if (actionsSuppressorWaitPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ActionsSuppressorWaitPeriod", actionsSuppressorWaitPeriod));
        }

        if (actionsSuppressorExtensionPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ActionsSuppressorExtensionPeriod", actionsSuppressorExtensionPeriod));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETPutCompositeAlarmValidateBeforeCall(String alarmName, String alarmRule, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean actionsEnabled, List<String> alarmActions, String alarmDescription, List<String> insufficientDataActions, List<String> okActions, List<Tag> tags, String actionsSuppressor, Integer actionsSuppressorWaitPeriod, Integer actionsSuppressorExtensionPeriod, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'alarmName' is set
        if (alarmName == null) {
            throw new ApiException("Missing the required parameter 'alarmName' when calling gETPutCompositeAlarm(Async)");
        }

        // verify the required parameter 'alarmRule' is set
        if (alarmRule == null) {
            throw new ApiException("Missing the required parameter 'alarmRule' when calling gETPutCompositeAlarm(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETPutCompositeAlarm(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETPutCompositeAlarm(Async)");
        }

        return gETPutCompositeAlarmCall(alarmName, alarmRule, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, actionsEnabled, alarmActions, alarmDescription, insufficientDataActions, okActions, tags, actionsSuppressor, actionsSuppressorWaitPeriod, actionsSuppressorExtensionPeriod, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates or updates a &lt;i&gt;composite alarm&lt;/i&gt;. When you create a composite alarm, you specify a rule expression for the alarm that takes into account the alarm states of other alarms that you have created. The composite alarm goes into ALARM state only if all conditions of the rule are met.&lt;/p&gt; &lt;p&gt;The alarms specified in a composite alarm&#39;s rule expression can include metric alarms and other composite alarms. The rule expression of a composite alarm can include as many as 100 underlying alarms. Any single alarm can be included in the rule expressions of as many as 150 composite alarms.&lt;/p&gt; &lt;p&gt;Using composite alarms can reduce alarm noise. You can create multiple metric alarms, and also create a composite alarm and set up alerts only for the composite alarm. For example, you could create a composite alarm that goes into ALARM state only when more than one of the underlying metric alarms are in ALARM state.&lt;/p&gt; &lt;p&gt;Currently, the only alarm actions that can be taken by composite alarms are notifying SNS topics.&lt;/p&gt; &lt;note&gt; &lt;p&gt;It is possible to create a loop or cycle of composite alarms, where composite alarm A depends on composite alarm B, and composite alarm B also depends on composite alarm A. In this scenario, you can&#39;t delete any composite alarm that is part of the cycle because there is always still a composite alarm that depends on that alarm that you want to delete.&lt;/p&gt; &lt;p&gt;To get out of such a situation, you must break the cycle by changing the rule of one of the composite alarms in the cycle to remove a dependency that creates the cycle. The simplest change to make to break a cycle is to change the &lt;code&gt;AlarmRule&lt;/code&gt; of one of the alarms to &lt;code&gt;false&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;Additionally, the evaluation of composite alarms stops if CloudWatch detects a cycle in the evaluation path. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;When this operation creates an alarm, the alarm state is immediately set to &lt;code&gt;INSUFFICIENT_DATA&lt;/code&gt;. The alarm is then evaluated and its state is set appropriately. Any actions associated with the new state are then executed. For a composite alarm, this initial time after creation is the only time that the alarm can be in &lt;code&gt;INSUFFICIENT_DATA&lt;/code&gt; state.&lt;/p&gt; &lt;p&gt;When you update an existing alarm, its state is left unchanged, but the update completely overwrites the previous configuration of the alarm.&lt;/p&gt; &lt;p&gt;To use this operation, you must be signed on with the &lt;code&gt;cloudwatch:PutCompositeAlarm&lt;/code&gt; permission that is scoped to &lt;code&gt;*&lt;/code&gt;. You can&#39;t create a composite alarms if your &lt;code&gt;cloudwatch:PutCompositeAlarm&lt;/code&gt; permission has a narrower scope.&lt;/p&gt; &lt;p&gt;If you are an IAM user, you must have &lt;code&gt;iam:CreateServiceLinkedRole&lt;/code&gt; to create a composite alarm that has Systems Manager OpsItem actions.&lt;/p&gt;
     * @param alarmName The name for the composite alarm. This name must be unique within the Region. (required)
     * @param alarmRule &lt;p&gt;An expression that specifies which other alarms are to be evaluated to determine this composite alarm&#39;s state. For each alarm that you reference, you designate a function that specifies whether that alarm needs to be in ALARM state, OK state, or INSUFFICIENT_DATA state. You can use operators (AND, OR and NOT) to combine multiple functions in a single expression. You can use parenthesis to logically group the functions in your expression.&lt;/p&gt; &lt;p&gt;You can use either alarm names or ARNs to reference the other alarms that are to be evaluated.&lt;/p&gt; &lt;p&gt;Functions can include the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ALARM(\&quot;&lt;i&gt;alarm-name&lt;/i&gt; or &lt;i&gt;alarm-ARN&lt;/i&gt;\&quot;)&lt;/code&gt; is TRUE if the named alarm is in ALARM state.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;OK(\&quot;&lt;i&gt;alarm-name&lt;/i&gt; or &lt;i&gt;alarm-ARN&lt;/i&gt;\&quot;)&lt;/code&gt; is TRUE if the named alarm is in OK state.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;INSUFFICIENT_DATA(\&quot;&lt;i&gt;alarm-name&lt;/i&gt; or &lt;i&gt;alarm-ARN&lt;/i&gt;\&quot;)&lt;/code&gt; is TRUE if the named alarm is in INSUFFICIENT_DATA state.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TRUE&lt;/code&gt; always evaluates to TRUE.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FALSE&lt;/code&gt; always evaluates to FALSE.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;TRUE and FALSE are useful for testing a complex &lt;code&gt;AlarmRule&lt;/code&gt; structure, and for testing your alarm actions.&lt;/p&gt; &lt;p&gt;Alarm names specified in &lt;code&gt;AlarmRule&lt;/code&gt; can be surrounded with double-quotes (\&quot;), but do not have to be.&lt;/p&gt; &lt;p&gt;The following are some examples of &lt;code&gt;AlarmRule&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ALARM(CPUUtilizationTooHigh) AND ALARM(DiskReadOpsTooHigh)&lt;/code&gt; specifies that the composite alarm goes into ALARM state only if both CPUUtilizationTooHigh and DiskReadOpsTooHigh alarms are in ALARM state.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ALARM(CPUUtilizationTooHigh) AND NOT ALARM(DeploymentInProgress)&lt;/code&gt; specifies that the alarm goes to ALARM state if CPUUtilizationTooHigh is in ALARM state and DeploymentInProgress is not in ALARM state. This example reduces alarm noise during a known deployment window.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;(ALARM(CPUUtilizationTooHigh) OR ALARM(DiskReadOpsTooHigh)) AND OK(NetworkOutTooHigh)&lt;/code&gt; goes into ALARM state if CPUUtilizationTooHigh OR DiskReadOpsTooHigh is in ALARM state, and if NetworkOutTooHigh is in OK state. This provides another example of using a composite alarm to prevent noise. This rule ensures that you are not notified with an alarm action on high CPU or disk usage if a known network problem is also occurring.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The &lt;code&gt;AlarmRule&lt;/code&gt; can specify as many as 100 \&quot;children\&quot; alarms. The &lt;code&gt;AlarmRule&lt;/code&gt; expression can have as many as 500 elements. Elements are child alarms, TRUE or FALSE statements, and parentheses.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param actionsEnabled Indicates whether actions should be executed during any changes to the alarm state of the composite alarm. The default is &lt;code&gt;TRUE&lt;/code&gt;. (optional)
     * @param alarmActions &lt;p&gt;The actions to execute when this alarm transitions to the &lt;code&gt;ALARM&lt;/code&gt; state from any other state. Each action is specified as an Amazon Resource Name (ARN).&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;arn:aws:sns:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:&lt;i&gt;sns-topic-name&lt;/i&gt; &lt;/code&gt; | &lt;code&gt;arn:aws:ssm:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:opsitem:&lt;i&gt;severity&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; (optional)
     * @param alarmDescription The description for the composite alarm. (optional)
     * @param insufficientDataActions &lt;p&gt;The actions to execute when this alarm transitions to the &lt;code&gt;INSUFFICIENT_DATA&lt;/code&gt; state from any other state. Each action is specified as an Amazon Resource Name (ARN).&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;arn:aws:sns:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:&lt;i&gt;sns-topic-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; (optional)
     * @param okActions &lt;p&gt;The actions to execute when this alarm transitions to an &lt;code&gt;OK&lt;/code&gt; state from any other state. Each action is specified as an Amazon Resource Name (ARN).&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;arn:aws:sns:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:&lt;i&gt;sns-topic-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; (optional)
     * @param tags &lt;p&gt;A list of key-value pairs to associate with the composite alarm. You can associate as many as 50 tags with an alarm.&lt;/p&gt; &lt;p&gt;Tags can help you organize and categorize your resources. You can also use them to scope user permissions, by granting a user permission to access or change only resources with certain tag values.&lt;/p&gt; (optional)
     * @param actionsSuppressor  Actions will be suppressed if the suppressor alarm is in the &lt;code&gt;ALARM&lt;/code&gt; state. &lt;code&gt;ActionsSuppressor&lt;/code&gt; can be an AlarmName or an Amazon Resource Name (ARN) from an existing alarm.  (optional)
     * @param actionsSuppressorWaitPeriod &lt;p&gt; The maximum time in seconds that the composite alarm waits for the suppressor alarm to go into the &lt;code&gt;ALARM&lt;/code&gt; state. After this time, the composite alarm performs its actions. &lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;code&gt;WaitPeriod&lt;/code&gt; is required only when &lt;code&gt;ActionsSuppressor&lt;/code&gt; is specified. &lt;/p&gt; &lt;/important&gt; (optional)
     * @param actionsSuppressorExtensionPeriod &lt;p&gt; The maximum time in seconds that the composite alarm waits after suppressor alarm goes out of the &lt;code&gt;ALARM&lt;/code&gt; state. After this time, the composite alarm performs its actions. &lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;code&gt;ExtensionPeriod&lt;/code&gt; is required only when &lt;code&gt;ActionsSuppressor&lt;/code&gt; is specified. &lt;/p&gt; &lt;/important&gt; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public void gETPutCompositeAlarm(String alarmName, String alarmRule, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean actionsEnabled, List<String> alarmActions, String alarmDescription, List<String> insufficientDataActions, List<String> okActions, List<Tag> tags, String actionsSuppressor, Integer actionsSuppressorWaitPeriod, Integer actionsSuppressorExtensionPeriod) throws ApiException {
        gETPutCompositeAlarmWithHttpInfo(alarmName, alarmRule, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, actionsEnabled, alarmActions, alarmDescription, insufficientDataActions, okActions, tags, actionsSuppressor, actionsSuppressorWaitPeriod, actionsSuppressorExtensionPeriod);
    }

    /**
     * 
     * &lt;p&gt;Creates or updates a &lt;i&gt;composite alarm&lt;/i&gt;. When you create a composite alarm, you specify a rule expression for the alarm that takes into account the alarm states of other alarms that you have created. The composite alarm goes into ALARM state only if all conditions of the rule are met.&lt;/p&gt; &lt;p&gt;The alarms specified in a composite alarm&#39;s rule expression can include metric alarms and other composite alarms. The rule expression of a composite alarm can include as many as 100 underlying alarms. Any single alarm can be included in the rule expressions of as many as 150 composite alarms.&lt;/p&gt; &lt;p&gt;Using composite alarms can reduce alarm noise. You can create multiple metric alarms, and also create a composite alarm and set up alerts only for the composite alarm. For example, you could create a composite alarm that goes into ALARM state only when more than one of the underlying metric alarms are in ALARM state.&lt;/p&gt; &lt;p&gt;Currently, the only alarm actions that can be taken by composite alarms are notifying SNS topics.&lt;/p&gt; &lt;note&gt; &lt;p&gt;It is possible to create a loop or cycle of composite alarms, where composite alarm A depends on composite alarm B, and composite alarm B also depends on composite alarm A. In this scenario, you can&#39;t delete any composite alarm that is part of the cycle because there is always still a composite alarm that depends on that alarm that you want to delete.&lt;/p&gt; &lt;p&gt;To get out of such a situation, you must break the cycle by changing the rule of one of the composite alarms in the cycle to remove a dependency that creates the cycle. The simplest change to make to break a cycle is to change the &lt;code&gt;AlarmRule&lt;/code&gt; of one of the alarms to &lt;code&gt;false&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;Additionally, the evaluation of composite alarms stops if CloudWatch detects a cycle in the evaluation path. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;When this operation creates an alarm, the alarm state is immediately set to &lt;code&gt;INSUFFICIENT_DATA&lt;/code&gt;. The alarm is then evaluated and its state is set appropriately. Any actions associated with the new state are then executed. For a composite alarm, this initial time after creation is the only time that the alarm can be in &lt;code&gt;INSUFFICIENT_DATA&lt;/code&gt; state.&lt;/p&gt; &lt;p&gt;When you update an existing alarm, its state is left unchanged, but the update completely overwrites the previous configuration of the alarm.&lt;/p&gt; &lt;p&gt;To use this operation, you must be signed on with the &lt;code&gt;cloudwatch:PutCompositeAlarm&lt;/code&gt; permission that is scoped to &lt;code&gt;*&lt;/code&gt;. You can&#39;t create a composite alarms if your &lt;code&gt;cloudwatch:PutCompositeAlarm&lt;/code&gt; permission has a narrower scope.&lt;/p&gt; &lt;p&gt;If you are an IAM user, you must have &lt;code&gt;iam:CreateServiceLinkedRole&lt;/code&gt; to create a composite alarm that has Systems Manager OpsItem actions.&lt;/p&gt;
     * @param alarmName The name for the composite alarm. This name must be unique within the Region. (required)
     * @param alarmRule &lt;p&gt;An expression that specifies which other alarms are to be evaluated to determine this composite alarm&#39;s state. For each alarm that you reference, you designate a function that specifies whether that alarm needs to be in ALARM state, OK state, or INSUFFICIENT_DATA state. You can use operators (AND, OR and NOT) to combine multiple functions in a single expression. You can use parenthesis to logically group the functions in your expression.&lt;/p&gt; &lt;p&gt;You can use either alarm names or ARNs to reference the other alarms that are to be evaluated.&lt;/p&gt; &lt;p&gt;Functions can include the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ALARM(\&quot;&lt;i&gt;alarm-name&lt;/i&gt; or &lt;i&gt;alarm-ARN&lt;/i&gt;\&quot;)&lt;/code&gt; is TRUE if the named alarm is in ALARM state.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;OK(\&quot;&lt;i&gt;alarm-name&lt;/i&gt; or &lt;i&gt;alarm-ARN&lt;/i&gt;\&quot;)&lt;/code&gt; is TRUE if the named alarm is in OK state.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;INSUFFICIENT_DATA(\&quot;&lt;i&gt;alarm-name&lt;/i&gt; or &lt;i&gt;alarm-ARN&lt;/i&gt;\&quot;)&lt;/code&gt; is TRUE if the named alarm is in INSUFFICIENT_DATA state.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TRUE&lt;/code&gt; always evaluates to TRUE.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FALSE&lt;/code&gt; always evaluates to FALSE.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;TRUE and FALSE are useful for testing a complex &lt;code&gt;AlarmRule&lt;/code&gt; structure, and for testing your alarm actions.&lt;/p&gt; &lt;p&gt;Alarm names specified in &lt;code&gt;AlarmRule&lt;/code&gt; can be surrounded with double-quotes (\&quot;), but do not have to be.&lt;/p&gt; &lt;p&gt;The following are some examples of &lt;code&gt;AlarmRule&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ALARM(CPUUtilizationTooHigh) AND ALARM(DiskReadOpsTooHigh)&lt;/code&gt; specifies that the composite alarm goes into ALARM state only if both CPUUtilizationTooHigh and DiskReadOpsTooHigh alarms are in ALARM state.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ALARM(CPUUtilizationTooHigh) AND NOT ALARM(DeploymentInProgress)&lt;/code&gt; specifies that the alarm goes to ALARM state if CPUUtilizationTooHigh is in ALARM state and DeploymentInProgress is not in ALARM state. This example reduces alarm noise during a known deployment window.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;(ALARM(CPUUtilizationTooHigh) OR ALARM(DiskReadOpsTooHigh)) AND OK(NetworkOutTooHigh)&lt;/code&gt; goes into ALARM state if CPUUtilizationTooHigh OR DiskReadOpsTooHigh is in ALARM state, and if NetworkOutTooHigh is in OK state. This provides another example of using a composite alarm to prevent noise. This rule ensures that you are not notified with an alarm action on high CPU or disk usage if a known network problem is also occurring.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The &lt;code&gt;AlarmRule&lt;/code&gt; can specify as many as 100 \&quot;children\&quot; alarms. The &lt;code&gt;AlarmRule&lt;/code&gt; expression can have as many as 500 elements. Elements are child alarms, TRUE or FALSE statements, and parentheses.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param actionsEnabled Indicates whether actions should be executed during any changes to the alarm state of the composite alarm. The default is &lt;code&gt;TRUE&lt;/code&gt;. (optional)
     * @param alarmActions &lt;p&gt;The actions to execute when this alarm transitions to the &lt;code&gt;ALARM&lt;/code&gt; state from any other state. Each action is specified as an Amazon Resource Name (ARN).&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;arn:aws:sns:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:&lt;i&gt;sns-topic-name&lt;/i&gt; &lt;/code&gt; | &lt;code&gt;arn:aws:ssm:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:opsitem:&lt;i&gt;severity&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; (optional)
     * @param alarmDescription The description for the composite alarm. (optional)
     * @param insufficientDataActions &lt;p&gt;The actions to execute when this alarm transitions to the &lt;code&gt;INSUFFICIENT_DATA&lt;/code&gt; state from any other state. Each action is specified as an Amazon Resource Name (ARN).&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;arn:aws:sns:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:&lt;i&gt;sns-topic-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; (optional)
     * @param okActions &lt;p&gt;The actions to execute when this alarm transitions to an &lt;code&gt;OK&lt;/code&gt; state from any other state. Each action is specified as an Amazon Resource Name (ARN).&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;arn:aws:sns:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:&lt;i&gt;sns-topic-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; (optional)
     * @param tags &lt;p&gt;A list of key-value pairs to associate with the composite alarm. You can associate as many as 50 tags with an alarm.&lt;/p&gt; &lt;p&gt;Tags can help you organize and categorize your resources. You can also use them to scope user permissions, by granting a user permission to access or change only resources with certain tag values.&lt;/p&gt; (optional)
     * @param actionsSuppressor  Actions will be suppressed if the suppressor alarm is in the &lt;code&gt;ALARM&lt;/code&gt; state. &lt;code&gt;ActionsSuppressor&lt;/code&gt; can be an AlarmName or an Amazon Resource Name (ARN) from an existing alarm.  (optional)
     * @param actionsSuppressorWaitPeriod &lt;p&gt; The maximum time in seconds that the composite alarm waits for the suppressor alarm to go into the &lt;code&gt;ALARM&lt;/code&gt; state. After this time, the composite alarm performs its actions. &lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;code&gt;WaitPeriod&lt;/code&gt; is required only when &lt;code&gt;ActionsSuppressor&lt;/code&gt; is specified. &lt;/p&gt; &lt;/important&gt; (optional)
     * @param actionsSuppressorExtensionPeriod &lt;p&gt; The maximum time in seconds that the composite alarm waits after suppressor alarm goes out of the &lt;code&gt;ALARM&lt;/code&gt; state. After this time, the composite alarm performs its actions. &lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;code&gt;ExtensionPeriod&lt;/code&gt; is required only when &lt;code&gt;ActionsSuppressor&lt;/code&gt; is specified. &lt;/p&gt; &lt;/important&gt; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETPutCompositeAlarmWithHttpInfo(String alarmName, String alarmRule, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean actionsEnabled, List<String> alarmActions, String alarmDescription, List<String> insufficientDataActions, List<String> okActions, List<Tag> tags, String actionsSuppressor, Integer actionsSuppressorWaitPeriod, Integer actionsSuppressorExtensionPeriod) throws ApiException {
        okhttp3.Call localVarCall = gETPutCompositeAlarmValidateBeforeCall(alarmName, alarmRule, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, actionsEnabled, alarmActions, alarmDescription, insufficientDataActions, okActions, tags, actionsSuppressor, actionsSuppressorWaitPeriod, actionsSuppressorExtensionPeriod, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates or updates a &lt;i&gt;composite alarm&lt;/i&gt;. When you create a composite alarm, you specify a rule expression for the alarm that takes into account the alarm states of other alarms that you have created. The composite alarm goes into ALARM state only if all conditions of the rule are met.&lt;/p&gt; &lt;p&gt;The alarms specified in a composite alarm&#39;s rule expression can include metric alarms and other composite alarms. The rule expression of a composite alarm can include as many as 100 underlying alarms. Any single alarm can be included in the rule expressions of as many as 150 composite alarms.&lt;/p&gt; &lt;p&gt;Using composite alarms can reduce alarm noise. You can create multiple metric alarms, and also create a composite alarm and set up alerts only for the composite alarm. For example, you could create a composite alarm that goes into ALARM state only when more than one of the underlying metric alarms are in ALARM state.&lt;/p&gt; &lt;p&gt;Currently, the only alarm actions that can be taken by composite alarms are notifying SNS topics.&lt;/p&gt; &lt;note&gt; &lt;p&gt;It is possible to create a loop or cycle of composite alarms, where composite alarm A depends on composite alarm B, and composite alarm B also depends on composite alarm A. In this scenario, you can&#39;t delete any composite alarm that is part of the cycle because there is always still a composite alarm that depends on that alarm that you want to delete.&lt;/p&gt; &lt;p&gt;To get out of such a situation, you must break the cycle by changing the rule of one of the composite alarms in the cycle to remove a dependency that creates the cycle. The simplest change to make to break a cycle is to change the &lt;code&gt;AlarmRule&lt;/code&gt; of one of the alarms to &lt;code&gt;false&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;Additionally, the evaluation of composite alarms stops if CloudWatch detects a cycle in the evaluation path. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;When this operation creates an alarm, the alarm state is immediately set to &lt;code&gt;INSUFFICIENT_DATA&lt;/code&gt;. The alarm is then evaluated and its state is set appropriately. Any actions associated with the new state are then executed. For a composite alarm, this initial time after creation is the only time that the alarm can be in &lt;code&gt;INSUFFICIENT_DATA&lt;/code&gt; state.&lt;/p&gt; &lt;p&gt;When you update an existing alarm, its state is left unchanged, but the update completely overwrites the previous configuration of the alarm.&lt;/p&gt; &lt;p&gt;To use this operation, you must be signed on with the &lt;code&gt;cloudwatch:PutCompositeAlarm&lt;/code&gt; permission that is scoped to &lt;code&gt;*&lt;/code&gt;. You can&#39;t create a composite alarms if your &lt;code&gt;cloudwatch:PutCompositeAlarm&lt;/code&gt; permission has a narrower scope.&lt;/p&gt; &lt;p&gt;If you are an IAM user, you must have &lt;code&gt;iam:CreateServiceLinkedRole&lt;/code&gt; to create a composite alarm that has Systems Manager OpsItem actions.&lt;/p&gt;
     * @param alarmName The name for the composite alarm. This name must be unique within the Region. (required)
     * @param alarmRule &lt;p&gt;An expression that specifies which other alarms are to be evaluated to determine this composite alarm&#39;s state. For each alarm that you reference, you designate a function that specifies whether that alarm needs to be in ALARM state, OK state, or INSUFFICIENT_DATA state. You can use operators (AND, OR and NOT) to combine multiple functions in a single expression. You can use parenthesis to logically group the functions in your expression.&lt;/p&gt; &lt;p&gt;You can use either alarm names or ARNs to reference the other alarms that are to be evaluated.&lt;/p&gt; &lt;p&gt;Functions can include the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ALARM(\&quot;&lt;i&gt;alarm-name&lt;/i&gt; or &lt;i&gt;alarm-ARN&lt;/i&gt;\&quot;)&lt;/code&gt; is TRUE if the named alarm is in ALARM state.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;OK(\&quot;&lt;i&gt;alarm-name&lt;/i&gt; or &lt;i&gt;alarm-ARN&lt;/i&gt;\&quot;)&lt;/code&gt; is TRUE if the named alarm is in OK state.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;INSUFFICIENT_DATA(\&quot;&lt;i&gt;alarm-name&lt;/i&gt; or &lt;i&gt;alarm-ARN&lt;/i&gt;\&quot;)&lt;/code&gt; is TRUE if the named alarm is in INSUFFICIENT_DATA state.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TRUE&lt;/code&gt; always evaluates to TRUE.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FALSE&lt;/code&gt; always evaluates to FALSE.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;TRUE and FALSE are useful for testing a complex &lt;code&gt;AlarmRule&lt;/code&gt; structure, and for testing your alarm actions.&lt;/p&gt; &lt;p&gt;Alarm names specified in &lt;code&gt;AlarmRule&lt;/code&gt; can be surrounded with double-quotes (\&quot;), but do not have to be.&lt;/p&gt; &lt;p&gt;The following are some examples of &lt;code&gt;AlarmRule&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ALARM(CPUUtilizationTooHigh) AND ALARM(DiskReadOpsTooHigh)&lt;/code&gt; specifies that the composite alarm goes into ALARM state only if both CPUUtilizationTooHigh and DiskReadOpsTooHigh alarms are in ALARM state.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ALARM(CPUUtilizationTooHigh) AND NOT ALARM(DeploymentInProgress)&lt;/code&gt; specifies that the alarm goes to ALARM state if CPUUtilizationTooHigh is in ALARM state and DeploymentInProgress is not in ALARM state. This example reduces alarm noise during a known deployment window.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;(ALARM(CPUUtilizationTooHigh) OR ALARM(DiskReadOpsTooHigh)) AND OK(NetworkOutTooHigh)&lt;/code&gt; goes into ALARM state if CPUUtilizationTooHigh OR DiskReadOpsTooHigh is in ALARM state, and if NetworkOutTooHigh is in OK state. This provides another example of using a composite alarm to prevent noise. This rule ensures that you are not notified with an alarm action on high CPU or disk usage if a known network problem is also occurring.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The &lt;code&gt;AlarmRule&lt;/code&gt; can specify as many as 100 \&quot;children\&quot; alarms. The &lt;code&gt;AlarmRule&lt;/code&gt; expression can have as many as 500 elements. Elements are child alarms, TRUE or FALSE statements, and parentheses.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param actionsEnabled Indicates whether actions should be executed during any changes to the alarm state of the composite alarm. The default is &lt;code&gt;TRUE&lt;/code&gt;. (optional)
     * @param alarmActions &lt;p&gt;The actions to execute when this alarm transitions to the &lt;code&gt;ALARM&lt;/code&gt; state from any other state. Each action is specified as an Amazon Resource Name (ARN).&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;arn:aws:sns:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:&lt;i&gt;sns-topic-name&lt;/i&gt; &lt;/code&gt; | &lt;code&gt;arn:aws:ssm:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:opsitem:&lt;i&gt;severity&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; (optional)
     * @param alarmDescription The description for the composite alarm. (optional)
     * @param insufficientDataActions &lt;p&gt;The actions to execute when this alarm transitions to the &lt;code&gt;INSUFFICIENT_DATA&lt;/code&gt; state from any other state. Each action is specified as an Amazon Resource Name (ARN).&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;arn:aws:sns:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:&lt;i&gt;sns-topic-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; (optional)
     * @param okActions &lt;p&gt;The actions to execute when this alarm transitions to an &lt;code&gt;OK&lt;/code&gt; state from any other state. Each action is specified as an Amazon Resource Name (ARN).&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;arn:aws:sns:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:&lt;i&gt;sns-topic-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; (optional)
     * @param tags &lt;p&gt;A list of key-value pairs to associate with the composite alarm. You can associate as many as 50 tags with an alarm.&lt;/p&gt; &lt;p&gt;Tags can help you organize and categorize your resources. You can also use them to scope user permissions, by granting a user permission to access or change only resources with certain tag values.&lt;/p&gt; (optional)
     * @param actionsSuppressor  Actions will be suppressed if the suppressor alarm is in the &lt;code&gt;ALARM&lt;/code&gt; state. &lt;code&gt;ActionsSuppressor&lt;/code&gt; can be an AlarmName or an Amazon Resource Name (ARN) from an existing alarm.  (optional)
     * @param actionsSuppressorWaitPeriod &lt;p&gt; The maximum time in seconds that the composite alarm waits for the suppressor alarm to go into the &lt;code&gt;ALARM&lt;/code&gt; state. After this time, the composite alarm performs its actions. &lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;code&gt;WaitPeriod&lt;/code&gt; is required only when &lt;code&gt;ActionsSuppressor&lt;/code&gt; is specified. &lt;/p&gt; &lt;/important&gt; (optional)
     * @param actionsSuppressorExtensionPeriod &lt;p&gt; The maximum time in seconds that the composite alarm waits after suppressor alarm goes out of the &lt;code&gt;ALARM&lt;/code&gt; state. After this time, the composite alarm performs its actions. &lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;code&gt;ExtensionPeriod&lt;/code&gt; is required only when &lt;code&gt;ActionsSuppressor&lt;/code&gt; is specified. &lt;/p&gt; &lt;/important&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPutCompositeAlarmAsync(String alarmName, String alarmRule, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean actionsEnabled, List<String> alarmActions, String alarmDescription, List<String> insufficientDataActions, List<String> okActions, List<Tag> tags, String actionsSuppressor, Integer actionsSuppressorWaitPeriod, Integer actionsSuppressorExtensionPeriod, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETPutCompositeAlarmValidateBeforeCall(alarmName, alarmRule, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, actionsEnabled, alarmActions, alarmDescription, insufficientDataActions, okActions, tags, actionsSuppressor, actionsSuppressorWaitPeriod, actionsSuppressorExtensionPeriod, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETPutDashboard
     * @param dashboardName The name of the dashboard. If a dashboard with this name already exists, this call modifies that dashboard, replacing its current contents. Otherwise, a new dashboard is created. The maximum length is 255, and valid characters are A-Z, a-z, 0-9, \&quot;-\&quot;, and \&quot;_\&quot;. This parameter is required. (required)
     * @param dashboardBody &lt;p&gt;The detailed information about the dashboard in JSON format, including the widgets to include and their location on the dashboard. This parameter is required.&lt;/p&gt; &lt;p&gt;For more information about the syntax, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html\&quot;&gt;Dashboard Body Structure and Syntax&lt;/a&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DashboardInvalidInputError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPutDashboardCall(String dashboardName, String dashboardBody, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=PutDashboard";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dashboardName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DashboardName", dashboardName));
        }

        if (dashboardBody != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DashboardBody", dashboardBody));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETPutDashboardValidateBeforeCall(String dashboardName, String dashboardBody, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardName' is set
        if (dashboardName == null) {
            throw new ApiException("Missing the required parameter 'dashboardName' when calling gETPutDashboard(Async)");
        }

        // verify the required parameter 'dashboardBody' is set
        if (dashboardBody == null) {
            throw new ApiException("Missing the required parameter 'dashboardBody' when calling gETPutDashboard(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETPutDashboard(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETPutDashboard(Async)");
        }

        return gETPutDashboardCall(dashboardName, dashboardBody, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a dashboard if it does not already exist, or updates an existing dashboard. If you update a dashboard, the entire contents are replaced with what you specify here.&lt;/p&gt; &lt;p&gt;All dashboards in your account are global, not region-specific.&lt;/p&gt; &lt;p&gt;A simple way to create a dashboard using &lt;code&gt;PutDashboard&lt;/code&gt; is to copy an existing dashboard. To copy an existing dashboard using the console, you can load the dashboard and then use the View/edit source command in the Actions menu to display the JSON block for that dashboard. Another way to copy a dashboard is to use &lt;code&gt;GetDashboard&lt;/code&gt;, and then use the data returned within &lt;code&gt;DashboardBody&lt;/code&gt; as the template for the new dashboard when you call &lt;code&gt;PutDashboard&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;When you create a dashboard with &lt;code&gt;PutDashboard&lt;/code&gt;, a good practice is to add a text widget at the top of the dashboard with a message that the dashboard was created by script and should not be changed in the console. This message could also point console users to the location of the &lt;code&gt;DashboardBody&lt;/code&gt; script or the CloudFormation template used to create the dashboard.&lt;/p&gt;
     * @param dashboardName The name of the dashboard. If a dashboard with this name already exists, this call modifies that dashboard, replacing its current contents. Otherwise, a new dashboard is created. The maximum length is 255, and valid characters are A-Z, a-z, 0-9, \&quot;-\&quot;, and \&quot;_\&quot;. This parameter is required. (required)
     * @param dashboardBody &lt;p&gt;The detailed information about the dashboard in JSON format, including the widgets to include and their location on the dashboard. This parameter is required.&lt;/p&gt; &lt;p&gt;For more information about the syntax, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html\&quot;&gt;Dashboard Body Structure and Syntax&lt;/a&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PutDashboardOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DashboardInvalidInputError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public PutDashboardOutput gETPutDashboard(String dashboardName, String dashboardBody, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PutDashboardOutput> localVarResp = gETPutDashboardWithHttpInfo(dashboardName, dashboardBody, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a dashboard if it does not already exist, or updates an existing dashboard. If you update a dashboard, the entire contents are replaced with what you specify here.&lt;/p&gt; &lt;p&gt;All dashboards in your account are global, not region-specific.&lt;/p&gt; &lt;p&gt;A simple way to create a dashboard using &lt;code&gt;PutDashboard&lt;/code&gt; is to copy an existing dashboard. To copy an existing dashboard using the console, you can load the dashboard and then use the View/edit source command in the Actions menu to display the JSON block for that dashboard. Another way to copy a dashboard is to use &lt;code&gt;GetDashboard&lt;/code&gt;, and then use the data returned within &lt;code&gt;DashboardBody&lt;/code&gt; as the template for the new dashboard when you call &lt;code&gt;PutDashboard&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;When you create a dashboard with &lt;code&gt;PutDashboard&lt;/code&gt;, a good practice is to add a text widget at the top of the dashboard with a message that the dashboard was created by script and should not be changed in the console. This message could also point console users to the location of the &lt;code&gt;DashboardBody&lt;/code&gt; script or the CloudFormation template used to create the dashboard.&lt;/p&gt;
     * @param dashboardName The name of the dashboard. If a dashboard with this name already exists, this call modifies that dashboard, replacing its current contents. Otherwise, a new dashboard is created. The maximum length is 255, and valid characters are A-Z, a-z, 0-9, \&quot;-\&quot;, and \&quot;_\&quot;. This parameter is required. (required)
     * @param dashboardBody &lt;p&gt;The detailed information about the dashboard in JSON format, including the widgets to include and their location on the dashboard. This parameter is required.&lt;/p&gt; &lt;p&gt;For more information about the syntax, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html\&quot;&gt;Dashboard Body Structure and Syntax&lt;/a&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PutDashboardOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DashboardInvalidInputError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PutDashboardOutput> gETPutDashboardWithHttpInfo(String dashboardName, String dashboardBody, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETPutDashboardValidateBeforeCall(dashboardName, dashboardBody, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PutDashboardOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a dashboard if it does not already exist, or updates an existing dashboard. If you update a dashboard, the entire contents are replaced with what you specify here.&lt;/p&gt; &lt;p&gt;All dashboards in your account are global, not region-specific.&lt;/p&gt; &lt;p&gt;A simple way to create a dashboard using &lt;code&gt;PutDashboard&lt;/code&gt; is to copy an existing dashboard. To copy an existing dashboard using the console, you can load the dashboard and then use the View/edit source command in the Actions menu to display the JSON block for that dashboard. Another way to copy a dashboard is to use &lt;code&gt;GetDashboard&lt;/code&gt;, and then use the data returned within &lt;code&gt;DashboardBody&lt;/code&gt; as the template for the new dashboard when you call &lt;code&gt;PutDashboard&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;When you create a dashboard with &lt;code&gt;PutDashboard&lt;/code&gt;, a good practice is to add a text widget at the top of the dashboard with a message that the dashboard was created by script and should not be changed in the console. This message could also point console users to the location of the &lt;code&gt;DashboardBody&lt;/code&gt; script or the CloudFormation template used to create the dashboard.&lt;/p&gt;
     * @param dashboardName The name of the dashboard. If a dashboard with this name already exists, this call modifies that dashboard, replacing its current contents. Otherwise, a new dashboard is created. The maximum length is 255, and valid characters are A-Z, a-z, 0-9, \&quot;-\&quot;, and \&quot;_\&quot;. This parameter is required. (required)
     * @param dashboardBody &lt;p&gt;The detailed information about the dashboard in JSON format, including the widgets to include and their location on the dashboard. This parameter is required.&lt;/p&gt; &lt;p&gt;For more information about the syntax, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html\&quot;&gt;Dashboard Body Structure and Syntax&lt;/a&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DashboardInvalidInputError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPutDashboardAsync(String dashboardName, String dashboardBody, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PutDashboardOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETPutDashboardValidateBeforeCall(dashboardName, dashboardBody, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PutDashboardOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETPutInsightRule
     * @param ruleName A unique name for the rule. (required)
     * @param ruleDefinition The definition of the rule, as a JSON object. For details on the valid syntax, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights-RuleSyntax.html\&quot;&gt;Contributor Insights Rule Syntax&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ruleState The state of the rule. Valid values are ENABLED and DISABLED. (optional)
     * @param tags &lt;p&gt;A list of key-value pairs to associate with the Contributor Insights rule. You can associate as many as 50 tags with a rule.&lt;/p&gt; &lt;p&gt;Tags can help you organize and categorize your resources. You can also use them to scope user permissions, by granting a user permission to access or change only the resources that have certain tag values.&lt;/p&gt; &lt;p&gt;To be able to associate tags with a rule, you must have the &lt;code&gt;cloudwatch:TagResource&lt;/code&gt; permission in addition to the &lt;code&gt;cloudwatch:PutInsightRule&lt;/code&gt; permission.&lt;/p&gt; &lt;p&gt;If you are using this operation to update an existing Contributor Insights rule, any tags you specify in this parameter are ignored. To change the tags of an existing rule, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_TagResource.html\&quot;&gt;TagResource&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPutInsightRuleCall(String ruleName, String ruleDefinition, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ruleState, List<Tag> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=PutInsightRule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ruleName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RuleName", ruleName));
        }

        if (ruleState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RuleState", ruleState));
        }

        if (ruleDefinition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RuleDefinition", ruleDefinition));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETPutInsightRuleValidateBeforeCall(String ruleName, String ruleDefinition, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ruleState, List<Tag> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleName' is set
        if (ruleName == null) {
            throw new ApiException("Missing the required parameter 'ruleName' when calling gETPutInsightRule(Async)");
        }

        // verify the required parameter 'ruleDefinition' is set
        if (ruleDefinition == null) {
            throw new ApiException("Missing the required parameter 'ruleDefinition' when calling gETPutInsightRule(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETPutInsightRule(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETPutInsightRule(Async)");
        }

        return gETPutInsightRuleCall(ruleName, ruleDefinition, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ruleState, tags, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a Contributor Insights rule. Rules evaluate log events in a CloudWatch Logs log group, enabling you to find contributor data for the log events in that log group. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights.html\&quot;&gt;Using Contributor Insights to Analyze High-Cardinality Data&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you create a rule, delete it, and then re-create it with the same name, historical data from the first time the rule was created might not be available.&lt;/p&gt;
     * @param ruleName A unique name for the rule. (required)
     * @param ruleDefinition The definition of the rule, as a JSON object. For details on the valid syntax, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights-RuleSyntax.html\&quot;&gt;Contributor Insights Rule Syntax&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ruleState The state of the rule. Valid values are ENABLED and DISABLED. (optional)
     * @param tags &lt;p&gt;A list of key-value pairs to associate with the Contributor Insights rule. You can associate as many as 50 tags with a rule.&lt;/p&gt; &lt;p&gt;Tags can help you organize and categorize your resources. You can also use them to scope user permissions, by granting a user permission to access or change only the resources that have certain tag values.&lt;/p&gt; &lt;p&gt;To be able to associate tags with a rule, you must have the &lt;code&gt;cloudwatch:TagResource&lt;/code&gt; permission in addition to the &lt;code&gt;cloudwatch:PutInsightRule&lt;/code&gt; permission.&lt;/p&gt; &lt;p&gt;If you are using this operation to update an existing Contributor Insights rule, any tags you specify in this parameter are ignored. To change the tags of an existing rule, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_TagResource.html\&quot;&gt;TagResource&lt;/a&gt;.&lt;/p&gt; (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETPutInsightRule(String ruleName, String ruleDefinition, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ruleState, List<Tag> tags) throws ApiException {
        ApiResponse<Object> localVarResp = gETPutInsightRuleWithHttpInfo(ruleName, ruleDefinition, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ruleState, tags);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a Contributor Insights rule. Rules evaluate log events in a CloudWatch Logs log group, enabling you to find contributor data for the log events in that log group. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights.html\&quot;&gt;Using Contributor Insights to Analyze High-Cardinality Data&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you create a rule, delete it, and then re-create it with the same name, historical data from the first time the rule was created might not be available.&lt;/p&gt;
     * @param ruleName A unique name for the rule. (required)
     * @param ruleDefinition The definition of the rule, as a JSON object. For details on the valid syntax, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights-RuleSyntax.html\&quot;&gt;Contributor Insights Rule Syntax&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ruleState The state of the rule. Valid values are ENABLED and DISABLED. (optional)
     * @param tags &lt;p&gt;A list of key-value pairs to associate with the Contributor Insights rule. You can associate as many as 50 tags with a rule.&lt;/p&gt; &lt;p&gt;Tags can help you organize and categorize your resources. You can also use them to scope user permissions, by granting a user permission to access or change only the resources that have certain tag values.&lt;/p&gt; &lt;p&gt;To be able to associate tags with a rule, you must have the &lt;code&gt;cloudwatch:TagResource&lt;/code&gt; permission in addition to the &lt;code&gt;cloudwatch:PutInsightRule&lt;/code&gt; permission.&lt;/p&gt; &lt;p&gt;If you are using this operation to update an existing Contributor Insights rule, any tags you specify in this parameter are ignored. To change the tags of an existing rule, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_TagResource.html\&quot;&gt;TagResource&lt;/a&gt;.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETPutInsightRuleWithHttpInfo(String ruleName, String ruleDefinition, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ruleState, List<Tag> tags) throws ApiException {
        okhttp3.Call localVarCall = gETPutInsightRuleValidateBeforeCall(ruleName, ruleDefinition, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ruleState, tags, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a Contributor Insights rule. Rules evaluate log events in a CloudWatch Logs log group, enabling you to find contributor data for the log events in that log group. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights.html\&quot;&gt;Using Contributor Insights to Analyze High-Cardinality Data&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you create a rule, delete it, and then re-create it with the same name, historical data from the first time the rule was created might not be available.&lt;/p&gt;
     * @param ruleName A unique name for the rule. (required)
     * @param ruleDefinition The definition of the rule, as a JSON object. For details on the valid syntax, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights-RuleSyntax.html\&quot;&gt;Contributor Insights Rule Syntax&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ruleState The state of the rule. Valid values are ENABLED and DISABLED. (optional)
     * @param tags &lt;p&gt;A list of key-value pairs to associate with the Contributor Insights rule. You can associate as many as 50 tags with a rule.&lt;/p&gt; &lt;p&gt;Tags can help you organize and categorize your resources. You can also use them to scope user permissions, by granting a user permission to access or change only the resources that have certain tag values.&lt;/p&gt; &lt;p&gt;To be able to associate tags with a rule, you must have the &lt;code&gt;cloudwatch:TagResource&lt;/code&gt; permission in addition to the &lt;code&gt;cloudwatch:PutInsightRule&lt;/code&gt; permission.&lt;/p&gt; &lt;p&gt;If you are using this operation to update an existing Contributor Insights rule, any tags you specify in this parameter are ignored. To change the tags of an existing rule, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_TagResource.html\&quot;&gt;TagResource&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPutInsightRuleAsync(String ruleName, String ruleDefinition, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ruleState, List<Tag> tags, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETPutInsightRuleValidateBeforeCall(ruleName, ruleDefinition, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ruleState, tags, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETPutManagedInsightRules
     * @param managedRules  A list of &lt;code&gt;ManagedRules&lt;/code&gt; to enable.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPutManagedInsightRulesCall(List<ManagedRule> managedRules, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=PutManagedInsightRules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (managedRules != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ManagedRules", managedRules));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETPutManagedInsightRulesValidateBeforeCall(List<ManagedRule> managedRules, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'managedRules' is set
        if (managedRules == null) {
            throw new ApiException("Missing the required parameter 'managedRules' when calling gETPutManagedInsightRules(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETPutManagedInsightRules(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETPutManagedInsightRules(Async)");
        }

        return gETPutManagedInsightRulesCall(managedRules, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     *  Creates a managed Contributor Insights rule for a specified Amazon Web Services resource. When you enable a managed rule, you create a Contributor Insights rule that collects data from Amazon Web Services services. You cannot edit these rules with &lt;code&gt;PutInsightRule&lt;/code&gt;. The rules can be enabled, disabled, and deleted using &lt;code&gt;EnableInsightRules&lt;/code&gt;, &lt;code&gt;DisableInsightRules&lt;/code&gt;, and &lt;code&gt;DeleteInsightRules&lt;/code&gt;. If a previously created managed rule is currently disabled, a subsequent call to this API will re-enable it. Use &lt;code&gt;ListManagedInsightRules&lt;/code&gt; to describe all available rules. 
     * @param managedRules  A list of &lt;code&gt;ManagedRules&lt;/code&gt; to enable.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PutManagedInsightRulesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public PutManagedInsightRulesOutput gETPutManagedInsightRules(List<ManagedRule> managedRules, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PutManagedInsightRulesOutput> localVarResp = gETPutManagedInsightRulesWithHttpInfo(managedRules, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     *  Creates a managed Contributor Insights rule for a specified Amazon Web Services resource. When you enable a managed rule, you create a Contributor Insights rule that collects data from Amazon Web Services services. You cannot edit these rules with &lt;code&gt;PutInsightRule&lt;/code&gt;. The rules can be enabled, disabled, and deleted using &lt;code&gt;EnableInsightRules&lt;/code&gt;, &lt;code&gt;DisableInsightRules&lt;/code&gt;, and &lt;code&gt;DeleteInsightRules&lt;/code&gt;. If a previously created managed rule is currently disabled, a subsequent call to this API will re-enable it. Use &lt;code&gt;ListManagedInsightRules&lt;/code&gt; to describe all available rules. 
     * @param managedRules  A list of &lt;code&gt;ManagedRules&lt;/code&gt; to enable.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PutManagedInsightRulesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PutManagedInsightRulesOutput> gETPutManagedInsightRulesWithHttpInfo(List<ManagedRule> managedRules, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETPutManagedInsightRulesValidateBeforeCall(managedRules, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PutManagedInsightRulesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Creates a managed Contributor Insights rule for a specified Amazon Web Services resource. When you enable a managed rule, you create a Contributor Insights rule that collects data from Amazon Web Services services. You cannot edit these rules with &lt;code&gt;PutInsightRule&lt;/code&gt;. The rules can be enabled, disabled, and deleted using &lt;code&gt;EnableInsightRules&lt;/code&gt;, &lt;code&gt;DisableInsightRules&lt;/code&gt;, and &lt;code&gt;DeleteInsightRules&lt;/code&gt;. If a previously created managed rule is currently disabled, a subsequent call to this API will re-enable it. Use &lt;code&gt;ListManagedInsightRules&lt;/code&gt; to describe all available rules. 
     * @param managedRules  A list of &lt;code&gt;ManagedRules&lt;/code&gt; to enable.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPutManagedInsightRulesAsync(List<ManagedRule> managedRules, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PutManagedInsightRulesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETPutManagedInsightRulesValidateBeforeCall(managedRules, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PutManagedInsightRulesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETPutMetricAlarm
     * @param alarmName &lt;p&gt;The name for the alarm. This name must be unique within the Region.&lt;/p&gt; &lt;p&gt;The name must contain only UTF-8 characters, and can&#39;t contain ASCII control characters&lt;/p&gt; (required)
     * @param evaluationPeriods &lt;p&gt;The number of periods over which data is compared to the specified threshold. If you are setting an alarm that requires that a number of consecutive data points be breaching to trigger the alarm, this value specifies that number. If you are setting an \&quot;M out of N\&quot; alarm, this value is the N.&lt;/p&gt; &lt;p&gt;An alarm&#39;s total current evaluation period can be no longer than one day, so this number multiplied by &lt;code&gt;Period&lt;/code&gt; cannot be more than 86,400 seconds.&lt;/p&gt; (required)
     * @param comparisonOperator &lt;p&gt; The arithmetic operation to use when comparing the specified statistic and threshold. The specified statistic value is used as the first operand.&lt;/p&gt; &lt;p&gt;The values &lt;code&gt;LessThanLowerOrGreaterThanUpperThreshold&lt;/code&gt;, &lt;code&gt;LessThanLowerThreshold&lt;/code&gt;, and &lt;code&gt;GreaterThanUpperThreshold&lt;/code&gt; are used only for alarms based on anomaly detection models.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param alarmDescription The description for the alarm. (optional)
     * @param actionsEnabled Indicates whether actions should be executed during any changes to the alarm state. The default is &lt;code&gt;TRUE&lt;/code&gt;. (optional)
     * @param okActions &lt;p&gt;The actions to execute when this alarm transitions to an &lt;code&gt;OK&lt;/code&gt; state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid values:&lt;/p&gt; &lt;p&gt; &lt;b&gt;EC2 actions:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:stop&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:terminate&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:reboot&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:recover&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Stop/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Terminate/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Reboot/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Recover/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Autoscaling action:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:autoscaling:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:scalingPolicy:&lt;i&gt;policy-id&lt;/i&gt;:autoScalingGroupName/&lt;i&gt;group-friendly-name&lt;/i&gt;:policyName/&lt;i&gt;policy-friendly-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;SNS notification action:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:sns:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:&lt;i&gt;sns-topic-name&lt;/i&gt;:autoScalingGroupName/&lt;i&gt;group-friendly-name&lt;/i&gt;:policyName/&lt;i&gt;policy-friendly-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;SSM integration actions:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:ssm:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:opsitem:&lt;i&gt;severity&lt;/i&gt;#CATEGORY&#x3D;&lt;i&gt;category-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:ssm-incidents::&lt;i&gt;account-id&lt;/i&gt;:responseplan/&lt;i&gt;response-plan-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param alarmActions &lt;p&gt;The actions to execute when this alarm transitions to the &lt;code&gt;ALARM&lt;/code&gt; state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid values:&lt;/p&gt; &lt;p&gt; &lt;b&gt;EC2 actions:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:stop&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:terminate&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:reboot&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:recover&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Stop/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Terminate/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Reboot/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Recover/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Autoscaling action:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:autoscaling:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:scalingPolicy:&lt;i&gt;policy-id&lt;/i&gt;:autoScalingGroupName/&lt;i&gt;group-friendly-name&lt;/i&gt;:policyName/&lt;i&gt;policy-friendly-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;SNS notification action:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:sns:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:&lt;i&gt;sns-topic-name&lt;/i&gt;:autoScalingGroupName/&lt;i&gt;group-friendly-name&lt;/i&gt;:policyName/&lt;i&gt;policy-friendly-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;SSM integration actions:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:ssm:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:opsitem:&lt;i&gt;severity&lt;/i&gt;#CATEGORY&#x3D;&lt;i&gt;category-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:ssm-incidents::&lt;i&gt;account-id&lt;/i&gt;:responseplan/&lt;i&gt;response-plan-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param insufficientDataActions &lt;p&gt;The actions to execute when this alarm transitions to the &lt;code&gt;INSUFFICIENT_DATA&lt;/code&gt; state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid values:&lt;/p&gt; &lt;p&gt; &lt;b&gt;EC2 actions:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:stop&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:terminate&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:reboot&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:recover&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Stop/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Terminate/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Reboot/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Recover/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Autoscaling action:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:autoscaling:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:scalingPolicy:&lt;i&gt;policy-id&lt;/i&gt;:autoScalingGroupName/&lt;i&gt;group-friendly-name&lt;/i&gt;:policyName/&lt;i&gt;policy-friendly-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;SNS notification action:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:sns:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:&lt;i&gt;sns-topic-name&lt;/i&gt;:autoScalingGroupName/&lt;i&gt;group-friendly-name&lt;/i&gt;:policyName/&lt;i&gt;policy-friendly-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;SSM integration actions:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:ssm:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:opsitem:&lt;i&gt;severity&lt;/i&gt;#CATEGORY&#x3D;&lt;i&gt;category-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:ssm-incidents::&lt;i&gt;account-id&lt;/i&gt;:responseplan/&lt;i&gt;response-plan-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param metricName &lt;p&gt;The name for the metric associated with the alarm. For each &lt;code&gt;PutMetricAlarm&lt;/code&gt; operation, you must specify either &lt;code&gt;MetricName&lt;/code&gt; or a &lt;code&gt;Metrics&lt;/code&gt; array.&lt;/p&gt; &lt;p&gt;If you are creating an alarm based on a math expression, you cannot specify this parameter, or any of the &lt;code&gt;Dimensions&lt;/code&gt;, &lt;code&gt;Period&lt;/code&gt;, &lt;code&gt;Namespace&lt;/code&gt;, &lt;code&gt;Statistic&lt;/code&gt;, or &lt;code&gt;ExtendedStatistic&lt;/code&gt; parameters. Instead, you specify all this information in the &lt;code&gt;Metrics&lt;/code&gt; array.&lt;/p&gt; (optional)
     * @param namespace The namespace for the metric associated specified in &lt;code&gt;MetricName&lt;/code&gt;. (optional)
     * @param statistic The statistic for the metric specified in &lt;code&gt;MetricName&lt;/code&gt;, other than percentile. For percentile statistics, use &lt;code&gt;ExtendedStatistic&lt;/code&gt;. When you call &lt;code&gt;PutMetricAlarm&lt;/code&gt; and specify a &lt;code&gt;MetricName&lt;/code&gt;, you must specify either &lt;code&gt;Statistic&lt;/code&gt; or &lt;code&gt;ExtendedStatistic,&lt;/code&gt; but not both. (optional)
     * @param extendedStatistic The percentile statistic for the metric specified in &lt;code&gt;MetricName&lt;/code&gt;. Specify a value between p0.0 and p100. When you call &lt;code&gt;PutMetricAlarm&lt;/code&gt; and specify a &lt;code&gt;MetricName&lt;/code&gt;, you must specify either &lt;code&gt;Statistic&lt;/code&gt; or &lt;code&gt;ExtendedStatistic,&lt;/code&gt; but not both. (optional)
     * @param dimensions The dimensions for the metric specified in &lt;code&gt;MetricName&lt;/code&gt;. (optional)
     * @param period &lt;p&gt;The length, in seconds, used each time the metric specified in &lt;code&gt;MetricName&lt;/code&gt; is evaluated. Valid values are 10, 30, and any multiple of 60.&lt;/p&gt; &lt;p&gt; &lt;code&gt;Period&lt;/code&gt; is required for alarms based on static thresholds. If you are creating an alarm based on a metric math expression, you specify the period for each metric within the objects in the &lt;code&gt;Metrics&lt;/code&gt; array.&lt;/p&gt; &lt;p&gt;Be sure to specify 10 or 30 only for metrics that are stored by a &lt;code&gt;PutMetricData&lt;/code&gt; call with a &lt;code&gt;StorageResolution&lt;/code&gt; of 1. If you specify a period of 10 or 30 for a metric that does not have sub-minute resolution, the alarm still attempts to gather data at the period rate that you specify. In this case, it does not receive data for the attempts that do not correspond to a one-minute data resolution, and the alarm might often lapse into INSUFFICENT_DATA status. Specifying 10 or 30 also sets this alarm as a high-resolution alarm, which has a higher charge than other alarms. For more information about pricing, see &lt;a href&#x3D;\&quot;https://aws.amazon.com/cloudwatch/pricing/\&quot;&gt;Amazon CloudWatch Pricing&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;An alarm&#39;s total current evaluation period can be no longer than one day, so &lt;code&gt;Period&lt;/code&gt; multiplied by &lt;code&gt;EvaluationPeriods&lt;/code&gt; cannot be more than 86,400 seconds.&lt;/p&gt; (optional)
     * @param unit &lt;p&gt;The unit of measure for the statistic. For example, the units for the Amazon EC2 NetworkIn metric are Bytes because NetworkIn tracks the number of bytes that an instance receives on all network interfaces. You can also specify a unit when you create a custom metric. Units help provide conceptual meaning to your data. Metric data points that specify a unit of measure, such as Percent, are aggregated separately.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify &lt;code&gt;Unit&lt;/code&gt;, CloudWatch retrieves all unit types that have been published for the metric and attempts to evaluate the alarm. Usually, metrics are published with only one unit, so the alarm works as intended.&lt;/p&gt; &lt;p&gt;However, if the metric is published with multiple types of units and you don&#39;t specify a unit, the alarm&#39;s behavior is not defined and it behaves unpredictably.&lt;/p&gt; &lt;p&gt;We recommend omitting &lt;code&gt;Unit&lt;/code&gt; so that you don&#39;t inadvertently specify an incorrect unit that is not published for this metric. Doing so causes the alarm to be stuck in the &lt;code&gt;INSUFFICIENT DATA&lt;/code&gt; state.&lt;/p&gt; (optional)
     * @param datapointsToAlarm The number of data points that must be breaching to trigger the alarm. This is used only if you are setting an \&quot;M out of N\&quot; alarm. In that case, this value is the M. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarm-evaluation\&quot;&gt;Evaluating an Alarm&lt;/a&gt; in the &lt;i&gt;Amazon CloudWatch User Guide&lt;/i&gt;. (optional)
     * @param threshold &lt;p&gt;The value against which the specified statistic is compared.&lt;/p&gt; &lt;p&gt;This parameter is required for alarms based on static thresholds, but should not be used for alarms based on anomaly detection models.&lt;/p&gt; (optional)
     * @param treatMissingData &lt;p&gt; Sets how this alarm is to handle missing data points. If &lt;code&gt;TreatMissingData&lt;/code&gt; is omitted, the default behavior of &lt;code&gt;missing&lt;/code&gt; is used. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarms-and-missing-data\&quot;&gt;Configuring How CloudWatch Alarms Treats Missing Data&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;breaching | notBreaching | ignore | missing&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;Alarms that evaluate metrics in the &lt;code&gt;AWS/DynamoDB&lt;/code&gt; namespace always &lt;code&gt;ignore&lt;/code&gt; missing data even if you choose a different option for &lt;code&gt;TreatMissingData&lt;/code&gt;. When an &lt;code&gt;AWS/DynamoDB&lt;/code&gt; metric has missing data, alarms that evaluate that metric remain in their current state.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param evaluateLowSampleCountPercentile &lt;p&gt; Used only for alarms based on percentiles. If you specify &lt;code&gt;ignore&lt;/code&gt;, the alarm state does not change during periods with too few data points to be statistically significant. If you specify &lt;code&gt;evaluate&lt;/code&gt; or omit this parameter, the alarm is always evaluated and possibly changes state no matter how many data points are available. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#percentiles-with-low-samples\&quot;&gt;Percentile-Based CloudWatch Alarms and Low Data Samples&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;evaluate | ignore&lt;/code&gt; &lt;/p&gt; (optional)
     * @param metrics &lt;p&gt;An array of &lt;code&gt;MetricDataQuery&lt;/code&gt; structures that enable you to create an alarm based on the result of a metric math expression. For each &lt;code&gt;PutMetricAlarm&lt;/code&gt; operation, you must specify either &lt;code&gt;MetricName&lt;/code&gt; or a &lt;code&gt;Metrics&lt;/code&gt; array.&lt;/p&gt; &lt;p&gt;Each item in the &lt;code&gt;Metrics&lt;/code&gt; array either retrieves a metric or performs a math expression.&lt;/p&gt; &lt;p&gt;One item in the &lt;code&gt;Metrics&lt;/code&gt; array is the expression that the alarm watches. You designate this expression by setting &lt;code&gt;ReturnData&lt;/code&gt; to true for this object in the array. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_MetricDataQuery.html\&quot;&gt;MetricDataQuery&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you use the &lt;code&gt;Metrics&lt;/code&gt; parameter, you cannot include the &lt;code&gt;MetricName&lt;/code&gt;, &lt;code&gt;Dimensions&lt;/code&gt;, &lt;code&gt;Period&lt;/code&gt;, &lt;code&gt;Namespace&lt;/code&gt;, &lt;code&gt;Statistic&lt;/code&gt;, or &lt;code&gt;ExtendedStatistic&lt;/code&gt; parameters of &lt;code&gt;PutMetricAlarm&lt;/code&gt; in the same operation. Instead, you retrieve the metrics you are using in your math expression as part of the &lt;code&gt;Metrics&lt;/code&gt; array.&lt;/p&gt; (optional)
     * @param tags &lt;p&gt;A list of key-value pairs to associate with the alarm. You can associate as many as 50 tags with an alarm.&lt;/p&gt; &lt;p&gt;Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.&lt;/p&gt; &lt;p&gt;If you are using this operation to update an existing alarm, any tags you specify in this parameter are ignored. To change the tags of an existing alarm, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_TagResource.html\&quot;&gt;TagResource&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_UntagResource.html\&quot;&gt;UntagResource&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param thresholdMetricId &lt;p&gt;If this is an alarm based on an anomaly detection model, make this value match the ID of the &lt;code&gt;ANOMALY_DETECTION_BAND&lt;/code&gt; function.&lt;/p&gt; &lt;p&gt;For an example of how to use this parameter, see the &lt;b&gt;Anomaly Detection Model Alarm&lt;/b&gt; example on this page.&lt;/p&gt; &lt;p&gt;If your alarm uses this parameter, it cannot have Auto Scaling actions.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPutMetricAlarmCall(String alarmName, Integer evaluationPeriods, String comparisonOperator, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String alarmDescription, Boolean actionsEnabled, List<String> okActions, List<String> alarmActions, List<String> insufficientDataActions, String metricName, String namespace, String statistic, String extendedStatistic, List<Dimension> dimensions, Integer period, String unit, Integer datapointsToAlarm, Double threshold, String treatMissingData, String evaluateLowSampleCountPercentile, List<MetricDataQuery> metrics, List<Tag> tags, String thresholdMetricId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=PutMetricAlarm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alarmName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AlarmName", alarmName));
        }

        if (alarmDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AlarmDescription", alarmDescription));
        }

        if (actionsEnabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ActionsEnabled", actionsEnabled));
        }

        if (okActions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "OKActions", okActions));
        }

        if (alarmActions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "AlarmActions", alarmActions));
        }

        if (insufficientDataActions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "InsufficientDataActions", insufficientDataActions));
        }

        if (metricName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MetricName", metricName));
        }

        if (namespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Namespace", namespace));
        }

        if (statistic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Statistic", statistic));
        }

        if (extendedStatistic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExtendedStatistic", extendedStatistic));
        }

        if (dimensions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Dimensions", dimensions));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (unit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Unit", unit));
        }

        if (evaluationPeriods != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EvaluationPeriods", evaluationPeriods));
        }

        if (datapointsToAlarm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DatapointsToAlarm", datapointsToAlarm));
        }

        if (threshold != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Threshold", threshold));
        }

        if (comparisonOperator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ComparisonOperator", comparisonOperator));
        }

        if (treatMissingData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TreatMissingData", treatMissingData));
        }

        if (evaluateLowSampleCountPercentile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EvaluateLowSampleCountPercentile", evaluateLowSampleCountPercentile));
        }

        if (metrics != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Metrics", metrics));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (thresholdMetricId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ThresholdMetricId", thresholdMetricId));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETPutMetricAlarmValidateBeforeCall(String alarmName, Integer evaluationPeriods, String comparisonOperator, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String alarmDescription, Boolean actionsEnabled, List<String> okActions, List<String> alarmActions, List<String> insufficientDataActions, String metricName, String namespace, String statistic, String extendedStatistic, List<Dimension> dimensions, Integer period, String unit, Integer datapointsToAlarm, Double threshold, String treatMissingData, String evaluateLowSampleCountPercentile, List<MetricDataQuery> metrics, List<Tag> tags, String thresholdMetricId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'alarmName' is set
        if (alarmName == null) {
            throw new ApiException("Missing the required parameter 'alarmName' when calling gETPutMetricAlarm(Async)");
        }

        // verify the required parameter 'evaluationPeriods' is set
        if (evaluationPeriods == null) {
            throw new ApiException("Missing the required parameter 'evaluationPeriods' when calling gETPutMetricAlarm(Async)");
        }

        // verify the required parameter 'comparisonOperator' is set
        if (comparisonOperator == null) {
            throw new ApiException("Missing the required parameter 'comparisonOperator' when calling gETPutMetricAlarm(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETPutMetricAlarm(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETPutMetricAlarm(Async)");
        }

        return gETPutMetricAlarmCall(alarmName, evaluationPeriods, comparisonOperator, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, alarmDescription, actionsEnabled, okActions, alarmActions, insufficientDataActions, metricName, namespace, statistic, extendedStatistic, dimensions, period, unit, datapointsToAlarm, threshold, treatMissingData, evaluateLowSampleCountPercentile, metrics, tags, thresholdMetricId, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates or updates an alarm and associates it with the specified metric, metric math expression, anomaly detection model, or Metrics Insights query. For more information about using a Metrics Insights query for an alarm, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Create_Metrics_Insights_Alarm.html\&quot;&gt;Create alarms on Metrics Insights queries&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Alarms based on anomaly detection models cannot have Auto Scaling actions.&lt;/p&gt; &lt;p&gt;When this operation creates an alarm, the alarm state is immediately set to &lt;code&gt;INSUFFICIENT_DATA&lt;/code&gt;. The alarm is then evaluated and its state is set appropriately. Any actions associated with the new state are then executed.&lt;/p&gt; &lt;p&gt;When you update an existing alarm, its state is left unchanged, but the update completely overwrites the previous configuration of the alarm.&lt;/p&gt; &lt;p&gt;If you are an IAM user, you must have Amazon EC2 permissions for some alarm operations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;iam:CreateServiceLinkedRole&lt;/code&gt; permission for all alarms with EC2 actions&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;iam:CreateServiceLinkedRole&lt;/code&gt; permissions to create an alarm with Systems Manager OpsItem or response plan actions.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The first time you create an alarm in the Amazon Web Services Management Console, the CLI, or by using the PutMetricAlarm API, CloudWatch creates the necessary service-linked role for you. The service-linked roles are called &lt;code&gt;AWSServiceRoleForCloudWatchEvents&lt;/code&gt; and &lt;code&gt;AWSServiceRoleForCloudWatchAlarms_ActionSSM&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role\&quot;&gt;Amazon Web Services service-linked role&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Each &lt;code&gt;PutMetricAlarm&lt;/code&gt; action has a maximum uncompressed payload of 120 KB.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Cross-account alarms&lt;/b&gt; &lt;/p&gt; &lt;p&gt;You can set an alarm on metrics in the current account, or in another account. To create a cross-account alarm that watches a metric in a different account, you must have completed the following pre-requisites:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The account where the metrics are located (the &lt;i&gt;sharing account&lt;/i&gt;) must already have a sharing role named &lt;b&gt;CloudWatch-CrossAccountSharingRole&lt;/b&gt;. If it does not already have this role, you must create it using the instructions in &lt;b&gt;Set up a sharing account&lt;/b&gt; in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Cross-Account-Cross-Region.html#enable-cross-account-cross-Region\&quot;&gt; Cross-account cross-Region CloudWatch console&lt;/a&gt;. The policy for that role must grant access to the ID of the account where you are creating the alarm. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The account where you are creating the alarm (the &lt;i&gt;monitoring account&lt;/i&gt;) must already have a service-linked role named &lt;b&gt;AWSServiceRoleForCloudWatchCrossAccount&lt;/b&gt; to allow CloudWatch to assume the sharing role in the sharing account. If it does not, you must create it following the directions in &lt;b&gt;Set up a monitoring account&lt;/b&gt; in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Cross-Account-Cross-Region.html#enable-cross-account-cross-Region\&quot;&gt; Cross-account cross-Region CloudWatch console&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param alarmName &lt;p&gt;The name for the alarm. This name must be unique within the Region.&lt;/p&gt; &lt;p&gt;The name must contain only UTF-8 characters, and can&#39;t contain ASCII control characters&lt;/p&gt; (required)
     * @param evaluationPeriods &lt;p&gt;The number of periods over which data is compared to the specified threshold. If you are setting an alarm that requires that a number of consecutive data points be breaching to trigger the alarm, this value specifies that number. If you are setting an \&quot;M out of N\&quot; alarm, this value is the N.&lt;/p&gt; &lt;p&gt;An alarm&#39;s total current evaluation period can be no longer than one day, so this number multiplied by &lt;code&gt;Period&lt;/code&gt; cannot be more than 86,400 seconds.&lt;/p&gt; (required)
     * @param comparisonOperator &lt;p&gt; The arithmetic operation to use when comparing the specified statistic and threshold. The specified statistic value is used as the first operand.&lt;/p&gt; &lt;p&gt;The values &lt;code&gt;LessThanLowerOrGreaterThanUpperThreshold&lt;/code&gt;, &lt;code&gt;LessThanLowerThreshold&lt;/code&gt;, and &lt;code&gt;GreaterThanUpperThreshold&lt;/code&gt; are used only for alarms based on anomaly detection models.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param alarmDescription The description for the alarm. (optional)
     * @param actionsEnabled Indicates whether actions should be executed during any changes to the alarm state. The default is &lt;code&gt;TRUE&lt;/code&gt;. (optional)
     * @param okActions &lt;p&gt;The actions to execute when this alarm transitions to an &lt;code&gt;OK&lt;/code&gt; state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid values:&lt;/p&gt; &lt;p&gt; &lt;b&gt;EC2 actions:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:stop&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:terminate&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:reboot&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:recover&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Stop/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Terminate/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Reboot/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Recover/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Autoscaling action:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:autoscaling:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:scalingPolicy:&lt;i&gt;policy-id&lt;/i&gt;:autoScalingGroupName/&lt;i&gt;group-friendly-name&lt;/i&gt;:policyName/&lt;i&gt;policy-friendly-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;SNS notification action:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:sns:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:&lt;i&gt;sns-topic-name&lt;/i&gt;:autoScalingGroupName/&lt;i&gt;group-friendly-name&lt;/i&gt;:policyName/&lt;i&gt;policy-friendly-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;SSM integration actions:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:ssm:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:opsitem:&lt;i&gt;severity&lt;/i&gt;#CATEGORY&#x3D;&lt;i&gt;category-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:ssm-incidents::&lt;i&gt;account-id&lt;/i&gt;:responseplan/&lt;i&gt;response-plan-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param alarmActions &lt;p&gt;The actions to execute when this alarm transitions to the &lt;code&gt;ALARM&lt;/code&gt; state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid values:&lt;/p&gt; &lt;p&gt; &lt;b&gt;EC2 actions:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:stop&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:terminate&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:reboot&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:recover&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Stop/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Terminate/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Reboot/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Recover/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Autoscaling action:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:autoscaling:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:scalingPolicy:&lt;i&gt;policy-id&lt;/i&gt;:autoScalingGroupName/&lt;i&gt;group-friendly-name&lt;/i&gt;:policyName/&lt;i&gt;policy-friendly-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;SNS notification action:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:sns:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:&lt;i&gt;sns-topic-name&lt;/i&gt;:autoScalingGroupName/&lt;i&gt;group-friendly-name&lt;/i&gt;:policyName/&lt;i&gt;policy-friendly-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;SSM integration actions:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:ssm:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:opsitem:&lt;i&gt;severity&lt;/i&gt;#CATEGORY&#x3D;&lt;i&gt;category-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:ssm-incidents::&lt;i&gt;account-id&lt;/i&gt;:responseplan/&lt;i&gt;response-plan-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param insufficientDataActions &lt;p&gt;The actions to execute when this alarm transitions to the &lt;code&gt;INSUFFICIENT_DATA&lt;/code&gt; state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid values:&lt;/p&gt; &lt;p&gt; &lt;b&gt;EC2 actions:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:stop&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:terminate&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:reboot&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:recover&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Stop/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Terminate/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Reboot/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Recover/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Autoscaling action:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:autoscaling:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:scalingPolicy:&lt;i&gt;policy-id&lt;/i&gt;:autoScalingGroupName/&lt;i&gt;group-friendly-name&lt;/i&gt;:policyName/&lt;i&gt;policy-friendly-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;SNS notification action:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:sns:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:&lt;i&gt;sns-topic-name&lt;/i&gt;:autoScalingGroupName/&lt;i&gt;group-friendly-name&lt;/i&gt;:policyName/&lt;i&gt;policy-friendly-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;SSM integration actions:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:ssm:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:opsitem:&lt;i&gt;severity&lt;/i&gt;#CATEGORY&#x3D;&lt;i&gt;category-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:ssm-incidents::&lt;i&gt;account-id&lt;/i&gt;:responseplan/&lt;i&gt;response-plan-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param metricName &lt;p&gt;The name for the metric associated with the alarm. For each &lt;code&gt;PutMetricAlarm&lt;/code&gt; operation, you must specify either &lt;code&gt;MetricName&lt;/code&gt; or a &lt;code&gt;Metrics&lt;/code&gt; array.&lt;/p&gt; &lt;p&gt;If you are creating an alarm based on a math expression, you cannot specify this parameter, or any of the &lt;code&gt;Dimensions&lt;/code&gt;, &lt;code&gt;Period&lt;/code&gt;, &lt;code&gt;Namespace&lt;/code&gt;, &lt;code&gt;Statistic&lt;/code&gt;, or &lt;code&gt;ExtendedStatistic&lt;/code&gt; parameters. Instead, you specify all this information in the &lt;code&gt;Metrics&lt;/code&gt; array.&lt;/p&gt; (optional)
     * @param namespace The namespace for the metric associated specified in &lt;code&gt;MetricName&lt;/code&gt;. (optional)
     * @param statistic The statistic for the metric specified in &lt;code&gt;MetricName&lt;/code&gt;, other than percentile. For percentile statistics, use &lt;code&gt;ExtendedStatistic&lt;/code&gt;. When you call &lt;code&gt;PutMetricAlarm&lt;/code&gt; and specify a &lt;code&gt;MetricName&lt;/code&gt;, you must specify either &lt;code&gt;Statistic&lt;/code&gt; or &lt;code&gt;ExtendedStatistic,&lt;/code&gt; but not both. (optional)
     * @param extendedStatistic The percentile statistic for the metric specified in &lt;code&gt;MetricName&lt;/code&gt;. Specify a value between p0.0 and p100. When you call &lt;code&gt;PutMetricAlarm&lt;/code&gt; and specify a &lt;code&gt;MetricName&lt;/code&gt;, you must specify either &lt;code&gt;Statistic&lt;/code&gt; or &lt;code&gt;ExtendedStatistic,&lt;/code&gt; but not both. (optional)
     * @param dimensions The dimensions for the metric specified in &lt;code&gt;MetricName&lt;/code&gt;. (optional)
     * @param period &lt;p&gt;The length, in seconds, used each time the metric specified in &lt;code&gt;MetricName&lt;/code&gt; is evaluated. Valid values are 10, 30, and any multiple of 60.&lt;/p&gt; &lt;p&gt; &lt;code&gt;Period&lt;/code&gt; is required for alarms based on static thresholds. If you are creating an alarm based on a metric math expression, you specify the period for each metric within the objects in the &lt;code&gt;Metrics&lt;/code&gt; array.&lt;/p&gt; &lt;p&gt;Be sure to specify 10 or 30 only for metrics that are stored by a &lt;code&gt;PutMetricData&lt;/code&gt; call with a &lt;code&gt;StorageResolution&lt;/code&gt; of 1. If you specify a period of 10 or 30 for a metric that does not have sub-minute resolution, the alarm still attempts to gather data at the period rate that you specify. In this case, it does not receive data for the attempts that do not correspond to a one-minute data resolution, and the alarm might often lapse into INSUFFICENT_DATA status. Specifying 10 or 30 also sets this alarm as a high-resolution alarm, which has a higher charge than other alarms. For more information about pricing, see &lt;a href&#x3D;\&quot;https://aws.amazon.com/cloudwatch/pricing/\&quot;&gt;Amazon CloudWatch Pricing&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;An alarm&#39;s total current evaluation period can be no longer than one day, so &lt;code&gt;Period&lt;/code&gt; multiplied by &lt;code&gt;EvaluationPeriods&lt;/code&gt; cannot be more than 86,400 seconds.&lt;/p&gt; (optional)
     * @param unit &lt;p&gt;The unit of measure for the statistic. For example, the units for the Amazon EC2 NetworkIn metric are Bytes because NetworkIn tracks the number of bytes that an instance receives on all network interfaces. You can also specify a unit when you create a custom metric. Units help provide conceptual meaning to your data. Metric data points that specify a unit of measure, such as Percent, are aggregated separately.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify &lt;code&gt;Unit&lt;/code&gt;, CloudWatch retrieves all unit types that have been published for the metric and attempts to evaluate the alarm. Usually, metrics are published with only one unit, so the alarm works as intended.&lt;/p&gt; &lt;p&gt;However, if the metric is published with multiple types of units and you don&#39;t specify a unit, the alarm&#39;s behavior is not defined and it behaves unpredictably.&lt;/p&gt; &lt;p&gt;We recommend omitting &lt;code&gt;Unit&lt;/code&gt; so that you don&#39;t inadvertently specify an incorrect unit that is not published for this metric. Doing so causes the alarm to be stuck in the &lt;code&gt;INSUFFICIENT DATA&lt;/code&gt; state.&lt;/p&gt; (optional)
     * @param datapointsToAlarm The number of data points that must be breaching to trigger the alarm. This is used only if you are setting an \&quot;M out of N\&quot; alarm. In that case, this value is the M. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarm-evaluation\&quot;&gt;Evaluating an Alarm&lt;/a&gt; in the &lt;i&gt;Amazon CloudWatch User Guide&lt;/i&gt;. (optional)
     * @param threshold &lt;p&gt;The value against which the specified statistic is compared.&lt;/p&gt; &lt;p&gt;This parameter is required for alarms based on static thresholds, but should not be used for alarms based on anomaly detection models.&lt;/p&gt; (optional)
     * @param treatMissingData &lt;p&gt; Sets how this alarm is to handle missing data points. If &lt;code&gt;TreatMissingData&lt;/code&gt; is omitted, the default behavior of &lt;code&gt;missing&lt;/code&gt; is used. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarms-and-missing-data\&quot;&gt;Configuring How CloudWatch Alarms Treats Missing Data&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;breaching | notBreaching | ignore | missing&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;Alarms that evaluate metrics in the &lt;code&gt;AWS/DynamoDB&lt;/code&gt; namespace always &lt;code&gt;ignore&lt;/code&gt; missing data even if you choose a different option for &lt;code&gt;TreatMissingData&lt;/code&gt;. When an &lt;code&gt;AWS/DynamoDB&lt;/code&gt; metric has missing data, alarms that evaluate that metric remain in their current state.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param evaluateLowSampleCountPercentile &lt;p&gt; Used only for alarms based on percentiles. If you specify &lt;code&gt;ignore&lt;/code&gt;, the alarm state does not change during periods with too few data points to be statistically significant. If you specify &lt;code&gt;evaluate&lt;/code&gt; or omit this parameter, the alarm is always evaluated and possibly changes state no matter how many data points are available. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#percentiles-with-low-samples\&quot;&gt;Percentile-Based CloudWatch Alarms and Low Data Samples&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;evaluate | ignore&lt;/code&gt; &lt;/p&gt; (optional)
     * @param metrics &lt;p&gt;An array of &lt;code&gt;MetricDataQuery&lt;/code&gt; structures that enable you to create an alarm based on the result of a metric math expression. For each &lt;code&gt;PutMetricAlarm&lt;/code&gt; operation, you must specify either &lt;code&gt;MetricName&lt;/code&gt; or a &lt;code&gt;Metrics&lt;/code&gt; array.&lt;/p&gt; &lt;p&gt;Each item in the &lt;code&gt;Metrics&lt;/code&gt; array either retrieves a metric or performs a math expression.&lt;/p&gt; &lt;p&gt;One item in the &lt;code&gt;Metrics&lt;/code&gt; array is the expression that the alarm watches. You designate this expression by setting &lt;code&gt;ReturnData&lt;/code&gt; to true for this object in the array. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_MetricDataQuery.html\&quot;&gt;MetricDataQuery&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you use the &lt;code&gt;Metrics&lt;/code&gt; parameter, you cannot include the &lt;code&gt;MetricName&lt;/code&gt;, &lt;code&gt;Dimensions&lt;/code&gt;, &lt;code&gt;Period&lt;/code&gt;, &lt;code&gt;Namespace&lt;/code&gt;, &lt;code&gt;Statistic&lt;/code&gt;, or &lt;code&gt;ExtendedStatistic&lt;/code&gt; parameters of &lt;code&gt;PutMetricAlarm&lt;/code&gt; in the same operation. Instead, you retrieve the metrics you are using in your math expression as part of the &lt;code&gt;Metrics&lt;/code&gt; array.&lt;/p&gt; (optional)
     * @param tags &lt;p&gt;A list of key-value pairs to associate with the alarm. You can associate as many as 50 tags with an alarm.&lt;/p&gt; &lt;p&gt;Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.&lt;/p&gt; &lt;p&gt;If you are using this operation to update an existing alarm, any tags you specify in this parameter are ignored. To change the tags of an existing alarm, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_TagResource.html\&quot;&gt;TagResource&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_UntagResource.html\&quot;&gt;UntagResource&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param thresholdMetricId &lt;p&gt;If this is an alarm based on an anomaly detection model, make this value match the ID of the &lt;code&gt;ANOMALY_DETECTION_BAND&lt;/code&gt; function.&lt;/p&gt; &lt;p&gt;For an example of how to use this parameter, see the &lt;b&gt;Anomaly Detection Model Alarm&lt;/b&gt; example on this page.&lt;/p&gt; &lt;p&gt;If your alarm uses this parameter, it cannot have Auto Scaling actions.&lt;/p&gt; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public void gETPutMetricAlarm(String alarmName, Integer evaluationPeriods, String comparisonOperator, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String alarmDescription, Boolean actionsEnabled, List<String> okActions, List<String> alarmActions, List<String> insufficientDataActions, String metricName, String namespace, String statistic, String extendedStatistic, List<Dimension> dimensions, Integer period, String unit, Integer datapointsToAlarm, Double threshold, String treatMissingData, String evaluateLowSampleCountPercentile, List<MetricDataQuery> metrics, List<Tag> tags, String thresholdMetricId) throws ApiException {
        gETPutMetricAlarmWithHttpInfo(alarmName, evaluationPeriods, comparisonOperator, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, alarmDescription, actionsEnabled, okActions, alarmActions, insufficientDataActions, metricName, namespace, statistic, extendedStatistic, dimensions, period, unit, datapointsToAlarm, threshold, treatMissingData, evaluateLowSampleCountPercentile, metrics, tags, thresholdMetricId);
    }

    /**
     * 
     * &lt;p&gt;Creates or updates an alarm and associates it with the specified metric, metric math expression, anomaly detection model, or Metrics Insights query. For more information about using a Metrics Insights query for an alarm, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Create_Metrics_Insights_Alarm.html\&quot;&gt;Create alarms on Metrics Insights queries&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Alarms based on anomaly detection models cannot have Auto Scaling actions.&lt;/p&gt; &lt;p&gt;When this operation creates an alarm, the alarm state is immediately set to &lt;code&gt;INSUFFICIENT_DATA&lt;/code&gt;. The alarm is then evaluated and its state is set appropriately. Any actions associated with the new state are then executed.&lt;/p&gt; &lt;p&gt;When you update an existing alarm, its state is left unchanged, but the update completely overwrites the previous configuration of the alarm.&lt;/p&gt; &lt;p&gt;If you are an IAM user, you must have Amazon EC2 permissions for some alarm operations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;iam:CreateServiceLinkedRole&lt;/code&gt; permission for all alarms with EC2 actions&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;iam:CreateServiceLinkedRole&lt;/code&gt; permissions to create an alarm with Systems Manager OpsItem or response plan actions.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The first time you create an alarm in the Amazon Web Services Management Console, the CLI, or by using the PutMetricAlarm API, CloudWatch creates the necessary service-linked role for you. The service-linked roles are called &lt;code&gt;AWSServiceRoleForCloudWatchEvents&lt;/code&gt; and &lt;code&gt;AWSServiceRoleForCloudWatchAlarms_ActionSSM&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role\&quot;&gt;Amazon Web Services service-linked role&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Each &lt;code&gt;PutMetricAlarm&lt;/code&gt; action has a maximum uncompressed payload of 120 KB.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Cross-account alarms&lt;/b&gt; &lt;/p&gt; &lt;p&gt;You can set an alarm on metrics in the current account, or in another account. To create a cross-account alarm that watches a metric in a different account, you must have completed the following pre-requisites:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The account where the metrics are located (the &lt;i&gt;sharing account&lt;/i&gt;) must already have a sharing role named &lt;b&gt;CloudWatch-CrossAccountSharingRole&lt;/b&gt;. If it does not already have this role, you must create it using the instructions in &lt;b&gt;Set up a sharing account&lt;/b&gt; in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Cross-Account-Cross-Region.html#enable-cross-account-cross-Region\&quot;&gt; Cross-account cross-Region CloudWatch console&lt;/a&gt;. The policy for that role must grant access to the ID of the account where you are creating the alarm. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The account where you are creating the alarm (the &lt;i&gt;monitoring account&lt;/i&gt;) must already have a service-linked role named &lt;b&gt;AWSServiceRoleForCloudWatchCrossAccount&lt;/b&gt; to allow CloudWatch to assume the sharing role in the sharing account. If it does not, you must create it following the directions in &lt;b&gt;Set up a monitoring account&lt;/b&gt; in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Cross-Account-Cross-Region.html#enable-cross-account-cross-Region\&quot;&gt; Cross-account cross-Region CloudWatch console&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param alarmName &lt;p&gt;The name for the alarm. This name must be unique within the Region.&lt;/p&gt; &lt;p&gt;The name must contain only UTF-8 characters, and can&#39;t contain ASCII control characters&lt;/p&gt; (required)
     * @param evaluationPeriods &lt;p&gt;The number of periods over which data is compared to the specified threshold. If you are setting an alarm that requires that a number of consecutive data points be breaching to trigger the alarm, this value specifies that number. If you are setting an \&quot;M out of N\&quot; alarm, this value is the N.&lt;/p&gt; &lt;p&gt;An alarm&#39;s total current evaluation period can be no longer than one day, so this number multiplied by &lt;code&gt;Period&lt;/code&gt; cannot be more than 86,400 seconds.&lt;/p&gt; (required)
     * @param comparisonOperator &lt;p&gt; The arithmetic operation to use when comparing the specified statistic and threshold. The specified statistic value is used as the first operand.&lt;/p&gt; &lt;p&gt;The values &lt;code&gt;LessThanLowerOrGreaterThanUpperThreshold&lt;/code&gt;, &lt;code&gt;LessThanLowerThreshold&lt;/code&gt;, and &lt;code&gt;GreaterThanUpperThreshold&lt;/code&gt; are used only for alarms based on anomaly detection models.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param alarmDescription The description for the alarm. (optional)
     * @param actionsEnabled Indicates whether actions should be executed during any changes to the alarm state. The default is &lt;code&gt;TRUE&lt;/code&gt;. (optional)
     * @param okActions &lt;p&gt;The actions to execute when this alarm transitions to an &lt;code&gt;OK&lt;/code&gt; state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid values:&lt;/p&gt; &lt;p&gt; &lt;b&gt;EC2 actions:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:stop&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:terminate&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:reboot&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:recover&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Stop/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Terminate/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Reboot/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Recover/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Autoscaling action:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:autoscaling:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:scalingPolicy:&lt;i&gt;policy-id&lt;/i&gt;:autoScalingGroupName/&lt;i&gt;group-friendly-name&lt;/i&gt;:policyName/&lt;i&gt;policy-friendly-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;SNS notification action:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:sns:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:&lt;i&gt;sns-topic-name&lt;/i&gt;:autoScalingGroupName/&lt;i&gt;group-friendly-name&lt;/i&gt;:policyName/&lt;i&gt;policy-friendly-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;SSM integration actions:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:ssm:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:opsitem:&lt;i&gt;severity&lt;/i&gt;#CATEGORY&#x3D;&lt;i&gt;category-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:ssm-incidents::&lt;i&gt;account-id&lt;/i&gt;:responseplan/&lt;i&gt;response-plan-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param alarmActions &lt;p&gt;The actions to execute when this alarm transitions to the &lt;code&gt;ALARM&lt;/code&gt; state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid values:&lt;/p&gt; &lt;p&gt; &lt;b&gt;EC2 actions:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:stop&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:terminate&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:reboot&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:recover&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Stop/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Terminate/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Reboot/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Recover/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Autoscaling action:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:autoscaling:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:scalingPolicy:&lt;i&gt;policy-id&lt;/i&gt;:autoScalingGroupName/&lt;i&gt;group-friendly-name&lt;/i&gt;:policyName/&lt;i&gt;policy-friendly-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;SNS notification action:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:sns:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:&lt;i&gt;sns-topic-name&lt;/i&gt;:autoScalingGroupName/&lt;i&gt;group-friendly-name&lt;/i&gt;:policyName/&lt;i&gt;policy-friendly-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;SSM integration actions:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:ssm:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:opsitem:&lt;i&gt;severity&lt;/i&gt;#CATEGORY&#x3D;&lt;i&gt;category-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:ssm-incidents::&lt;i&gt;account-id&lt;/i&gt;:responseplan/&lt;i&gt;response-plan-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param insufficientDataActions &lt;p&gt;The actions to execute when this alarm transitions to the &lt;code&gt;INSUFFICIENT_DATA&lt;/code&gt; state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid values:&lt;/p&gt; &lt;p&gt; &lt;b&gt;EC2 actions:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:stop&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:terminate&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:reboot&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:recover&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Stop/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Terminate/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Reboot/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Recover/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Autoscaling action:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:autoscaling:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:scalingPolicy:&lt;i&gt;policy-id&lt;/i&gt;:autoScalingGroupName/&lt;i&gt;group-friendly-name&lt;/i&gt;:policyName/&lt;i&gt;policy-friendly-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;SNS notification action:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:sns:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:&lt;i&gt;sns-topic-name&lt;/i&gt;:autoScalingGroupName/&lt;i&gt;group-friendly-name&lt;/i&gt;:policyName/&lt;i&gt;policy-friendly-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;SSM integration actions:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:ssm:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:opsitem:&lt;i&gt;severity&lt;/i&gt;#CATEGORY&#x3D;&lt;i&gt;category-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:ssm-incidents::&lt;i&gt;account-id&lt;/i&gt;:responseplan/&lt;i&gt;response-plan-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param metricName &lt;p&gt;The name for the metric associated with the alarm. For each &lt;code&gt;PutMetricAlarm&lt;/code&gt; operation, you must specify either &lt;code&gt;MetricName&lt;/code&gt; or a &lt;code&gt;Metrics&lt;/code&gt; array.&lt;/p&gt; &lt;p&gt;If you are creating an alarm based on a math expression, you cannot specify this parameter, or any of the &lt;code&gt;Dimensions&lt;/code&gt;, &lt;code&gt;Period&lt;/code&gt;, &lt;code&gt;Namespace&lt;/code&gt;, &lt;code&gt;Statistic&lt;/code&gt;, or &lt;code&gt;ExtendedStatistic&lt;/code&gt; parameters. Instead, you specify all this information in the &lt;code&gt;Metrics&lt;/code&gt; array.&lt;/p&gt; (optional)
     * @param namespace The namespace for the metric associated specified in &lt;code&gt;MetricName&lt;/code&gt;. (optional)
     * @param statistic The statistic for the metric specified in &lt;code&gt;MetricName&lt;/code&gt;, other than percentile. For percentile statistics, use &lt;code&gt;ExtendedStatistic&lt;/code&gt;. When you call &lt;code&gt;PutMetricAlarm&lt;/code&gt; and specify a &lt;code&gt;MetricName&lt;/code&gt;, you must specify either &lt;code&gt;Statistic&lt;/code&gt; or &lt;code&gt;ExtendedStatistic,&lt;/code&gt; but not both. (optional)
     * @param extendedStatistic The percentile statistic for the metric specified in &lt;code&gt;MetricName&lt;/code&gt;. Specify a value between p0.0 and p100. When you call &lt;code&gt;PutMetricAlarm&lt;/code&gt; and specify a &lt;code&gt;MetricName&lt;/code&gt;, you must specify either &lt;code&gt;Statistic&lt;/code&gt; or &lt;code&gt;ExtendedStatistic,&lt;/code&gt; but not both. (optional)
     * @param dimensions The dimensions for the metric specified in &lt;code&gt;MetricName&lt;/code&gt;. (optional)
     * @param period &lt;p&gt;The length, in seconds, used each time the metric specified in &lt;code&gt;MetricName&lt;/code&gt; is evaluated. Valid values are 10, 30, and any multiple of 60.&lt;/p&gt; &lt;p&gt; &lt;code&gt;Period&lt;/code&gt; is required for alarms based on static thresholds. If you are creating an alarm based on a metric math expression, you specify the period for each metric within the objects in the &lt;code&gt;Metrics&lt;/code&gt; array.&lt;/p&gt; &lt;p&gt;Be sure to specify 10 or 30 only for metrics that are stored by a &lt;code&gt;PutMetricData&lt;/code&gt; call with a &lt;code&gt;StorageResolution&lt;/code&gt; of 1. If you specify a period of 10 or 30 for a metric that does not have sub-minute resolution, the alarm still attempts to gather data at the period rate that you specify. In this case, it does not receive data for the attempts that do not correspond to a one-minute data resolution, and the alarm might often lapse into INSUFFICENT_DATA status. Specifying 10 or 30 also sets this alarm as a high-resolution alarm, which has a higher charge than other alarms. For more information about pricing, see &lt;a href&#x3D;\&quot;https://aws.amazon.com/cloudwatch/pricing/\&quot;&gt;Amazon CloudWatch Pricing&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;An alarm&#39;s total current evaluation period can be no longer than one day, so &lt;code&gt;Period&lt;/code&gt; multiplied by &lt;code&gt;EvaluationPeriods&lt;/code&gt; cannot be more than 86,400 seconds.&lt;/p&gt; (optional)
     * @param unit &lt;p&gt;The unit of measure for the statistic. For example, the units for the Amazon EC2 NetworkIn metric are Bytes because NetworkIn tracks the number of bytes that an instance receives on all network interfaces. You can also specify a unit when you create a custom metric. Units help provide conceptual meaning to your data. Metric data points that specify a unit of measure, such as Percent, are aggregated separately.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify &lt;code&gt;Unit&lt;/code&gt;, CloudWatch retrieves all unit types that have been published for the metric and attempts to evaluate the alarm. Usually, metrics are published with only one unit, so the alarm works as intended.&lt;/p&gt; &lt;p&gt;However, if the metric is published with multiple types of units and you don&#39;t specify a unit, the alarm&#39;s behavior is not defined and it behaves unpredictably.&lt;/p&gt; &lt;p&gt;We recommend omitting &lt;code&gt;Unit&lt;/code&gt; so that you don&#39;t inadvertently specify an incorrect unit that is not published for this metric. Doing so causes the alarm to be stuck in the &lt;code&gt;INSUFFICIENT DATA&lt;/code&gt; state.&lt;/p&gt; (optional)
     * @param datapointsToAlarm The number of data points that must be breaching to trigger the alarm. This is used only if you are setting an \&quot;M out of N\&quot; alarm. In that case, this value is the M. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarm-evaluation\&quot;&gt;Evaluating an Alarm&lt;/a&gt; in the &lt;i&gt;Amazon CloudWatch User Guide&lt;/i&gt;. (optional)
     * @param threshold &lt;p&gt;The value against which the specified statistic is compared.&lt;/p&gt; &lt;p&gt;This parameter is required for alarms based on static thresholds, but should not be used for alarms based on anomaly detection models.&lt;/p&gt; (optional)
     * @param treatMissingData &lt;p&gt; Sets how this alarm is to handle missing data points. If &lt;code&gt;TreatMissingData&lt;/code&gt; is omitted, the default behavior of &lt;code&gt;missing&lt;/code&gt; is used. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarms-and-missing-data\&quot;&gt;Configuring How CloudWatch Alarms Treats Missing Data&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;breaching | notBreaching | ignore | missing&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;Alarms that evaluate metrics in the &lt;code&gt;AWS/DynamoDB&lt;/code&gt; namespace always &lt;code&gt;ignore&lt;/code&gt; missing data even if you choose a different option for &lt;code&gt;TreatMissingData&lt;/code&gt;. When an &lt;code&gt;AWS/DynamoDB&lt;/code&gt; metric has missing data, alarms that evaluate that metric remain in their current state.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param evaluateLowSampleCountPercentile &lt;p&gt; Used only for alarms based on percentiles. If you specify &lt;code&gt;ignore&lt;/code&gt;, the alarm state does not change during periods with too few data points to be statistically significant. If you specify &lt;code&gt;evaluate&lt;/code&gt; or omit this parameter, the alarm is always evaluated and possibly changes state no matter how many data points are available. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#percentiles-with-low-samples\&quot;&gt;Percentile-Based CloudWatch Alarms and Low Data Samples&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;evaluate | ignore&lt;/code&gt; &lt;/p&gt; (optional)
     * @param metrics &lt;p&gt;An array of &lt;code&gt;MetricDataQuery&lt;/code&gt; structures that enable you to create an alarm based on the result of a metric math expression. For each &lt;code&gt;PutMetricAlarm&lt;/code&gt; operation, you must specify either &lt;code&gt;MetricName&lt;/code&gt; or a &lt;code&gt;Metrics&lt;/code&gt; array.&lt;/p&gt; &lt;p&gt;Each item in the &lt;code&gt;Metrics&lt;/code&gt; array either retrieves a metric or performs a math expression.&lt;/p&gt; &lt;p&gt;One item in the &lt;code&gt;Metrics&lt;/code&gt; array is the expression that the alarm watches. You designate this expression by setting &lt;code&gt;ReturnData&lt;/code&gt; to true for this object in the array. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_MetricDataQuery.html\&quot;&gt;MetricDataQuery&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you use the &lt;code&gt;Metrics&lt;/code&gt; parameter, you cannot include the &lt;code&gt;MetricName&lt;/code&gt;, &lt;code&gt;Dimensions&lt;/code&gt;, &lt;code&gt;Period&lt;/code&gt;, &lt;code&gt;Namespace&lt;/code&gt;, &lt;code&gt;Statistic&lt;/code&gt;, or &lt;code&gt;ExtendedStatistic&lt;/code&gt; parameters of &lt;code&gt;PutMetricAlarm&lt;/code&gt; in the same operation. Instead, you retrieve the metrics you are using in your math expression as part of the &lt;code&gt;Metrics&lt;/code&gt; array.&lt;/p&gt; (optional)
     * @param tags &lt;p&gt;A list of key-value pairs to associate with the alarm. You can associate as many as 50 tags with an alarm.&lt;/p&gt; &lt;p&gt;Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.&lt;/p&gt; &lt;p&gt;If you are using this operation to update an existing alarm, any tags you specify in this parameter are ignored. To change the tags of an existing alarm, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_TagResource.html\&quot;&gt;TagResource&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_UntagResource.html\&quot;&gt;UntagResource&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param thresholdMetricId &lt;p&gt;If this is an alarm based on an anomaly detection model, make this value match the ID of the &lt;code&gt;ANOMALY_DETECTION_BAND&lt;/code&gt; function.&lt;/p&gt; &lt;p&gt;For an example of how to use this parameter, see the &lt;b&gt;Anomaly Detection Model Alarm&lt;/b&gt; example on this page.&lt;/p&gt; &lt;p&gt;If your alarm uses this parameter, it cannot have Auto Scaling actions.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETPutMetricAlarmWithHttpInfo(String alarmName, Integer evaluationPeriods, String comparisonOperator, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String alarmDescription, Boolean actionsEnabled, List<String> okActions, List<String> alarmActions, List<String> insufficientDataActions, String metricName, String namespace, String statistic, String extendedStatistic, List<Dimension> dimensions, Integer period, String unit, Integer datapointsToAlarm, Double threshold, String treatMissingData, String evaluateLowSampleCountPercentile, List<MetricDataQuery> metrics, List<Tag> tags, String thresholdMetricId) throws ApiException {
        okhttp3.Call localVarCall = gETPutMetricAlarmValidateBeforeCall(alarmName, evaluationPeriods, comparisonOperator, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, alarmDescription, actionsEnabled, okActions, alarmActions, insufficientDataActions, metricName, namespace, statistic, extendedStatistic, dimensions, period, unit, datapointsToAlarm, threshold, treatMissingData, evaluateLowSampleCountPercentile, metrics, tags, thresholdMetricId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates or updates an alarm and associates it with the specified metric, metric math expression, anomaly detection model, or Metrics Insights query. For more information about using a Metrics Insights query for an alarm, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Create_Metrics_Insights_Alarm.html\&quot;&gt;Create alarms on Metrics Insights queries&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Alarms based on anomaly detection models cannot have Auto Scaling actions.&lt;/p&gt; &lt;p&gt;When this operation creates an alarm, the alarm state is immediately set to &lt;code&gt;INSUFFICIENT_DATA&lt;/code&gt;. The alarm is then evaluated and its state is set appropriately. Any actions associated with the new state are then executed.&lt;/p&gt; &lt;p&gt;When you update an existing alarm, its state is left unchanged, but the update completely overwrites the previous configuration of the alarm.&lt;/p&gt; &lt;p&gt;If you are an IAM user, you must have Amazon EC2 permissions for some alarm operations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;iam:CreateServiceLinkedRole&lt;/code&gt; permission for all alarms with EC2 actions&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;iam:CreateServiceLinkedRole&lt;/code&gt; permissions to create an alarm with Systems Manager OpsItem or response plan actions.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The first time you create an alarm in the Amazon Web Services Management Console, the CLI, or by using the PutMetricAlarm API, CloudWatch creates the necessary service-linked role for you. The service-linked roles are called &lt;code&gt;AWSServiceRoleForCloudWatchEvents&lt;/code&gt; and &lt;code&gt;AWSServiceRoleForCloudWatchAlarms_ActionSSM&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role\&quot;&gt;Amazon Web Services service-linked role&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Each &lt;code&gt;PutMetricAlarm&lt;/code&gt; action has a maximum uncompressed payload of 120 KB.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Cross-account alarms&lt;/b&gt; &lt;/p&gt; &lt;p&gt;You can set an alarm on metrics in the current account, or in another account. To create a cross-account alarm that watches a metric in a different account, you must have completed the following pre-requisites:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The account where the metrics are located (the &lt;i&gt;sharing account&lt;/i&gt;) must already have a sharing role named &lt;b&gt;CloudWatch-CrossAccountSharingRole&lt;/b&gt;. If it does not already have this role, you must create it using the instructions in &lt;b&gt;Set up a sharing account&lt;/b&gt; in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Cross-Account-Cross-Region.html#enable-cross-account-cross-Region\&quot;&gt; Cross-account cross-Region CloudWatch console&lt;/a&gt;. The policy for that role must grant access to the ID of the account where you are creating the alarm. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The account where you are creating the alarm (the &lt;i&gt;monitoring account&lt;/i&gt;) must already have a service-linked role named &lt;b&gt;AWSServiceRoleForCloudWatchCrossAccount&lt;/b&gt; to allow CloudWatch to assume the sharing role in the sharing account. If it does not, you must create it following the directions in &lt;b&gt;Set up a monitoring account&lt;/b&gt; in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Cross-Account-Cross-Region.html#enable-cross-account-cross-Region\&quot;&gt; Cross-account cross-Region CloudWatch console&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param alarmName &lt;p&gt;The name for the alarm. This name must be unique within the Region.&lt;/p&gt; &lt;p&gt;The name must contain only UTF-8 characters, and can&#39;t contain ASCII control characters&lt;/p&gt; (required)
     * @param evaluationPeriods &lt;p&gt;The number of periods over which data is compared to the specified threshold. If you are setting an alarm that requires that a number of consecutive data points be breaching to trigger the alarm, this value specifies that number. If you are setting an \&quot;M out of N\&quot; alarm, this value is the N.&lt;/p&gt; &lt;p&gt;An alarm&#39;s total current evaluation period can be no longer than one day, so this number multiplied by &lt;code&gt;Period&lt;/code&gt; cannot be more than 86,400 seconds.&lt;/p&gt; (required)
     * @param comparisonOperator &lt;p&gt; The arithmetic operation to use when comparing the specified statistic and threshold. The specified statistic value is used as the first operand.&lt;/p&gt; &lt;p&gt;The values &lt;code&gt;LessThanLowerOrGreaterThanUpperThreshold&lt;/code&gt;, &lt;code&gt;LessThanLowerThreshold&lt;/code&gt;, and &lt;code&gt;GreaterThanUpperThreshold&lt;/code&gt; are used only for alarms based on anomaly detection models.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param alarmDescription The description for the alarm. (optional)
     * @param actionsEnabled Indicates whether actions should be executed during any changes to the alarm state. The default is &lt;code&gt;TRUE&lt;/code&gt;. (optional)
     * @param okActions &lt;p&gt;The actions to execute when this alarm transitions to an &lt;code&gt;OK&lt;/code&gt; state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid values:&lt;/p&gt; &lt;p&gt; &lt;b&gt;EC2 actions:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:stop&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:terminate&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:reboot&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:recover&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Stop/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Terminate/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Reboot/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Recover/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Autoscaling action:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:autoscaling:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:scalingPolicy:&lt;i&gt;policy-id&lt;/i&gt;:autoScalingGroupName/&lt;i&gt;group-friendly-name&lt;/i&gt;:policyName/&lt;i&gt;policy-friendly-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;SNS notification action:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:sns:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:&lt;i&gt;sns-topic-name&lt;/i&gt;:autoScalingGroupName/&lt;i&gt;group-friendly-name&lt;/i&gt;:policyName/&lt;i&gt;policy-friendly-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;SSM integration actions:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:ssm:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:opsitem:&lt;i&gt;severity&lt;/i&gt;#CATEGORY&#x3D;&lt;i&gt;category-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:ssm-incidents::&lt;i&gt;account-id&lt;/i&gt;:responseplan/&lt;i&gt;response-plan-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param alarmActions &lt;p&gt;The actions to execute when this alarm transitions to the &lt;code&gt;ALARM&lt;/code&gt; state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid values:&lt;/p&gt; &lt;p&gt; &lt;b&gt;EC2 actions:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:stop&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:terminate&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:reboot&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:recover&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Stop/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Terminate/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Reboot/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Recover/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Autoscaling action:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:autoscaling:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:scalingPolicy:&lt;i&gt;policy-id&lt;/i&gt;:autoScalingGroupName/&lt;i&gt;group-friendly-name&lt;/i&gt;:policyName/&lt;i&gt;policy-friendly-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;SNS notification action:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:sns:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:&lt;i&gt;sns-topic-name&lt;/i&gt;:autoScalingGroupName/&lt;i&gt;group-friendly-name&lt;/i&gt;:policyName/&lt;i&gt;policy-friendly-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;SSM integration actions:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:ssm:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:opsitem:&lt;i&gt;severity&lt;/i&gt;#CATEGORY&#x3D;&lt;i&gt;category-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:ssm-incidents::&lt;i&gt;account-id&lt;/i&gt;:responseplan/&lt;i&gt;response-plan-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param insufficientDataActions &lt;p&gt;The actions to execute when this alarm transitions to the &lt;code&gt;INSUFFICIENT_DATA&lt;/code&gt; state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid values:&lt;/p&gt; &lt;p&gt; &lt;b&gt;EC2 actions:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:stop&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:terminate&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:reboot&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:automate:&lt;i&gt;region&lt;/i&gt;:ec2:recover&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Stop/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Terminate/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Reboot/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:swf:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:action/actions/AWS_EC2.InstanceId.Recover/1.0&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Autoscaling action:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:autoscaling:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:scalingPolicy:&lt;i&gt;policy-id&lt;/i&gt;:autoScalingGroupName/&lt;i&gt;group-friendly-name&lt;/i&gt;:policyName/&lt;i&gt;policy-friendly-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;SNS notification action:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:sns:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:&lt;i&gt;sns-topic-name&lt;/i&gt;:autoScalingGroupName/&lt;i&gt;group-friendly-name&lt;/i&gt;:policyName/&lt;i&gt;policy-friendly-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;SSM integration actions:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:ssm:&lt;i&gt;region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:opsitem:&lt;i&gt;severity&lt;/i&gt;#CATEGORY&#x3D;&lt;i&gt;category-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;arn:aws:ssm-incidents::&lt;i&gt;account-id&lt;/i&gt;:responseplan/&lt;i&gt;response-plan-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param metricName &lt;p&gt;The name for the metric associated with the alarm. For each &lt;code&gt;PutMetricAlarm&lt;/code&gt; operation, you must specify either &lt;code&gt;MetricName&lt;/code&gt; or a &lt;code&gt;Metrics&lt;/code&gt; array.&lt;/p&gt; &lt;p&gt;If you are creating an alarm based on a math expression, you cannot specify this parameter, or any of the &lt;code&gt;Dimensions&lt;/code&gt;, &lt;code&gt;Period&lt;/code&gt;, &lt;code&gt;Namespace&lt;/code&gt;, &lt;code&gt;Statistic&lt;/code&gt;, or &lt;code&gt;ExtendedStatistic&lt;/code&gt; parameters. Instead, you specify all this information in the &lt;code&gt;Metrics&lt;/code&gt; array.&lt;/p&gt; (optional)
     * @param namespace The namespace for the metric associated specified in &lt;code&gt;MetricName&lt;/code&gt;. (optional)
     * @param statistic The statistic for the metric specified in &lt;code&gt;MetricName&lt;/code&gt;, other than percentile. For percentile statistics, use &lt;code&gt;ExtendedStatistic&lt;/code&gt;. When you call &lt;code&gt;PutMetricAlarm&lt;/code&gt; and specify a &lt;code&gt;MetricName&lt;/code&gt;, you must specify either &lt;code&gt;Statistic&lt;/code&gt; or &lt;code&gt;ExtendedStatistic,&lt;/code&gt; but not both. (optional)
     * @param extendedStatistic The percentile statistic for the metric specified in &lt;code&gt;MetricName&lt;/code&gt;. Specify a value between p0.0 and p100. When you call &lt;code&gt;PutMetricAlarm&lt;/code&gt; and specify a &lt;code&gt;MetricName&lt;/code&gt;, you must specify either &lt;code&gt;Statistic&lt;/code&gt; or &lt;code&gt;ExtendedStatistic,&lt;/code&gt; but not both. (optional)
     * @param dimensions The dimensions for the metric specified in &lt;code&gt;MetricName&lt;/code&gt;. (optional)
     * @param period &lt;p&gt;The length, in seconds, used each time the metric specified in &lt;code&gt;MetricName&lt;/code&gt; is evaluated. Valid values are 10, 30, and any multiple of 60.&lt;/p&gt; &lt;p&gt; &lt;code&gt;Period&lt;/code&gt; is required for alarms based on static thresholds. If you are creating an alarm based on a metric math expression, you specify the period for each metric within the objects in the &lt;code&gt;Metrics&lt;/code&gt; array.&lt;/p&gt; &lt;p&gt;Be sure to specify 10 or 30 only for metrics that are stored by a &lt;code&gt;PutMetricData&lt;/code&gt; call with a &lt;code&gt;StorageResolution&lt;/code&gt; of 1. If you specify a period of 10 or 30 for a metric that does not have sub-minute resolution, the alarm still attempts to gather data at the period rate that you specify. In this case, it does not receive data for the attempts that do not correspond to a one-minute data resolution, and the alarm might often lapse into INSUFFICENT_DATA status. Specifying 10 or 30 also sets this alarm as a high-resolution alarm, which has a higher charge than other alarms. For more information about pricing, see &lt;a href&#x3D;\&quot;https://aws.amazon.com/cloudwatch/pricing/\&quot;&gt;Amazon CloudWatch Pricing&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;An alarm&#39;s total current evaluation period can be no longer than one day, so &lt;code&gt;Period&lt;/code&gt; multiplied by &lt;code&gt;EvaluationPeriods&lt;/code&gt; cannot be more than 86,400 seconds.&lt;/p&gt; (optional)
     * @param unit &lt;p&gt;The unit of measure for the statistic. For example, the units for the Amazon EC2 NetworkIn metric are Bytes because NetworkIn tracks the number of bytes that an instance receives on all network interfaces. You can also specify a unit when you create a custom metric. Units help provide conceptual meaning to your data. Metric data points that specify a unit of measure, such as Percent, are aggregated separately.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify &lt;code&gt;Unit&lt;/code&gt;, CloudWatch retrieves all unit types that have been published for the metric and attempts to evaluate the alarm. Usually, metrics are published with only one unit, so the alarm works as intended.&lt;/p&gt; &lt;p&gt;However, if the metric is published with multiple types of units and you don&#39;t specify a unit, the alarm&#39;s behavior is not defined and it behaves unpredictably.&lt;/p&gt; &lt;p&gt;We recommend omitting &lt;code&gt;Unit&lt;/code&gt; so that you don&#39;t inadvertently specify an incorrect unit that is not published for this metric. Doing so causes the alarm to be stuck in the &lt;code&gt;INSUFFICIENT DATA&lt;/code&gt; state.&lt;/p&gt; (optional)
     * @param datapointsToAlarm The number of data points that must be breaching to trigger the alarm. This is used only if you are setting an \&quot;M out of N\&quot; alarm. In that case, this value is the M. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarm-evaluation\&quot;&gt;Evaluating an Alarm&lt;/a&gt; in the &lt;i&gt;Amazon CloudWatch User Guide&lt;/i&gt;. (optional)
     * @param threshold &lt;p&gt;The value against which the specified statistic is compared.&lt;/p&gt; &lt;p&gt;This parameter is required for alarms based on static thresholds, but should not be used for alarms based on anomaly detection models.&lt;/p&gt; (optional)
     * @param treatMissingData &lt;p&gt; Sets how this alarm is to handle missing data points. If &lt;code&gt;TreatMissingData&lt;/code&gt; is omitted, the default behavior of &lt;code&gt;missing&lt;/code&gt; is used. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarms-and-missing-data\&quot;&gt;Configuring How CloudWatch Alarms Treats Missing Data&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;breaching | notBreaching | ignore | missing&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;Alarms that evaluate metrics in the &lt;code&gt;AWS/DynamoDB&lt;/code&gt; namespace always &lt;code&gt;ignore&lt;/code&gt; missing data even if you choose a different option for &lt;code&gt;TreatMissingData&lt;/code&gt;. When an &lt;code&gt;AWS/DynamoDB&lt;/code&gt; metric has missing data, alarms that evaluate that metric remain in their current state.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param evaluateLowSampleCountPercentile &lt;p&gt; Used only for alarms based on percentiles. If you specify &lt;code&gt;ignore&lt;/code&gt;, the alarm state does not change during periods with too few data points to be statistically significant. If you specify &lt;code&gt;evaluate&lt;/code&gt; or omit this parameter, the alarm is always evaluated and possibly changes state no matter how many data points are available. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#percentiles-with-low-samples\&quot;&gt;Percentile-Based CloudWatch Alarms and Low Data Samples&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;evaluate | ignore&lt;/code&gt; &lt;/p&gt; (optional)
     * @param metrics &lt;p&gt;An array of &lt;code&gt;MetricDataQuery&lt;/code&gt; structures that enable you to create an alarm based on the result of a metric math expression. For each &lt;code&gt;PutMetricAlarm&lt;/code&gt; operation, you must specify either &lt;code&gt;MetricName&lt;/code&gt; or a &lt;code&gt;Metrics&lt;/code&gt; array.&lt;/p&gt; &lt;p&gt;Each item in the &lt;code&gt;Metrics&lt;/code&gt; array either retrieves a metric or performs a math expression.&lt;/p&gt; &lt;p&gt;One item in the &lt;code&gt;Metrics&lt;/code&gt; array is the expression that the alarm watches. You designate this expression by setting &lt;code&gt;ReturnData&lt;/code&gt; to true for this object in the array. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_MetricDataQuery.html\&quot;&gt;MetricDataQuery&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you use the &lt;code&gt;Metrics&lt;/code&gt; parameter, you cannot include the &lt;code&gt;MetricName&lt;/code&gt;, &lt;code&gt;Dimensions&lt;/code&gt;, &lt;code&gt;Period&lt;/code&gt;, &lt;code&gt;Namespace&lt;/code&gt;, &lt;code&gt;Statistic&lt;/code&gt;, or &lt;code&gt;ExtendedStatistic&lt;/code&gt; parameters of &lt;code&gt;PutMetricAlarm&lt;/code&gt; in the same operation. Instead, you retrieve the metrics you are using in your math expression as part of the &lt;code&gt;Metrics&lt;/code&gt; array.&lt;/p&gt; (optional)
     * @param tags &lt;p&gt;A list of key-value pairs to associate with the alarm. You can associate as many as 50 tags with an alarm.&lt;/p&gt; &lt;p&gt;Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.&lt;/p&gt; &lt;p&gt;If you are using this operation to update an existing alarm, any tags you specify in this parameter are ignored. To change the tags of an existing alarm, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_TagResource.html\&quot;&gt;TagResource&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_UntagResource.html\&quot;&gt;UntagResource&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param thresholdMetricId &lt;p&gt;If this is an alarm based on an anomaly detection model, make this value match the ID of the &lt;code&gt;ANOMALY_DETECTION_BAND&lt;/code&gt; function.&lt;/p&gt; &lt;p&gt;For an example of how to use this parameter, see the &lt;b&gt;Anomaly Detection Model Alarm&lt;/b&gt; example on this page.&lt;/p&gt; &lt;p&gt;If your alarm uses this parameter, it cannot have Auto Scaling actions.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPutMetricAlarmAsync(String alarmName, Integer evaluationPeriods, String comparisonOperator, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String alarmDescription, Boolean actionsEnabled, List<String> okActions, List<String> alarmActions, List<String> insufficientDataActions, String metricName, String namespace, String statistic, String extendedStatistic, List<Dimension> dimensions, Integer period, String unit, Integer datapointsToAlarm, Double threshold, String treatMissingData, String evaluateLowSampleCountPercentile, List<MetricDataQuery> metrics, List<Tag> tags, String thresholdMetricId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETPutMetricAlarmValidateBeforeCall(alarmName, evaluationPeriods, comparisonOperator, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, alarmDescription, actionsEnabled, okActions, alarmActions, insufficientDataActions, metricName, namespace, statistic, extendedStatistic, dimensions, period, unit, datapointsToAlarm, threshold, treatMissingData, evaluateLowSampleCountPercentile, metrics, tags, thresholdMetricId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETPutMetricData
     * @param namespace &lt;p&gt;The namespace for the metric data. You can use ASCII characters for the namespace, except for control characters which are not supported.&lt;/p&gt; &lt;p&gt;To avoid conflicts with Amazon Web Services service namespaces, you should not specify a namespace that begins with &lt;code&gt;AWS/&lt;/code&gt; &lt;/p&gt; (required)
     * @param metricData The data for the metric. The array can include no more than 1000 metrics per call. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPutMetricDataCall(String namespace, List<MetricDatum> metricData, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=PutMetricData";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (namespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Namespace", namespace));
        }

        if (metricData != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "MetricData", metricData));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETPutMetricDataValidateBeforeCall(String namespace, List<MetricDatum> metricData, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling gETPutMetricData(Async)");
        }

        // verify the required parameter 'metricData' is set
        if (metricData == null) {
            throw new ApiException("Missing the required parameter 'metricData' when calling gETPutMetricData(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETPutMetricData(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETPutMetricData(Async)");
        }

        return gETPutMetricDataCall(namespace, metricData, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Publishes metric data points to Amazon CloudWatch. CloudWatch associates the data points with the specified metric. If the specified metric does not exist, CloudWatch creates the metric. When CloudWatch creates a metric, it can take up to fifteen minutes for the metric to appear in calls to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_ListMetrics.html\&quot;&gt;ListMetrics&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can publish either individual data points in the &lt;code&gt;Value&lt;/code&gt; field, or arrays of values and the number of times each value occurred during the period by using the &lt;code&gt;Values&lt;/code&gt; and &lt;code&gt;Counts&lt;/code&gt; fields in the &lt;code&gt;MetricDatum&lt;/code&gt; structure. Using the &lt;code&gt;Values&lt;/code&gt; and &lt;code&gt;Counts&lt;/code&gt; method enables you to publish up to 150 values per metric with one &lt;code&gt;PutMetricData&lt;/code&gt; request, and supports retrieving percentile statistics on this data.&lt;/p&gt; &lt;p&gt;Each &lt;code&gt;PutMetricData&lt;/code&gt; request is limited to 1 MB in size for HTTP POST requests. You can send a payload compressed by gzip. Each request is also limited to no more than 1000 different metrics.&lt;/p&gt; &lt;p&gt;Although the &lt;code&gt;Value&lt;/code&gt; parameter accepts numbers of type &lt;code&gt;Double&lt;/code&gt;, CloudWatch rejects values that are either too small or too large. Values must be in the range of -2^360 to 2^360. In addition, special values (for example, NaN, +Infinity, -Infinity) are not supported.&lt;/p&gt; &lt;p&gt;You can use up to 30 dimensions per metric to further clarify what data the metric collects. Each dimension consists of a Name and Value pair. For more information about specifying dimensions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html\&quot;&gt;Publishing Metrics&lt;/a&gt; in the &lt;i&gt;Amazon CloudWatch User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You specify the time stamp to be associated with each data point. You can specify time stamps that are as much as two weeks before the current date, and as much as 2 hours after the current day and time.&lt;/p&gt; &lt;p&gt;Data points with time stamps from 24 hours ago or longer can take at least 48 hours to become available for &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html\&quot;&gt;GetMetricData&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html\&quot;&gt;GetMetricStatistics&lt;/a&gt; from the time they are submitted. Data points with time stamps between 3 and 24 hours ago can take as much as 2 hours to become available for for &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html\&quot;&gt;GetMetricData&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html\&quot;&gt;GetMetricStatistics&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;CloudWatch needs raw data points to calculate percentile statistics. If you publish data using a statistic set instead, you can only retrieve percentile statistics for this data if one of the following conditions is true:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;SampleCount&lt;/code&gt; value of the statistic set is 1 and &lt;code&gt;Min&lt;/code&gt;, &lt;code&gt;Max&lt;/code&gt;, and &lt;code&gt;Sum&lt;/code&gt; are all equal.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;Min&lt;/code&gt; and &lt;code&gt;Max&lt;/code&gt; are equal, and &lt;code&gt;Sum&lt;/code&gt; is equal to &lt;code&gt;Min&lt;/code&gt; multiplied by &lt;code&gt;SampleCount&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param namespace &lt;p&gt;The namespace for the metric data. You can use ASCII characters for the namespace, except for control characters which are not supported.&lt;/p&gt; &lt;p&gt;To avoid conflicts with Amazon Web Services service namespaces, you should not specify a namespace that begins with &lt;code&gt;AWS/&lt;/code&gt; &lt;/p&gt; (required)
     * @param metricData The data for the metric. The array can include no more than 1000 metrics per call. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public void gETPutMetricData(String namespace, List<MetricDatum> metricData, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETPutMetricDataWithHttpInfo(namespace, metricData, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Publishes metric data points to Amazon CloudWatch. CloudWatch associates the data points with the specified metric. If the specified metric does not exist, CloudWatch creates the metric. When CloudWatch creates a metric, it can take up to fifteen minutes for the metric to appear in calls to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_ListMetrics.html\&quot;&gt;ListMetrics&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can publish either individual data points in the &lt;code&gt;Value&lt;/code&gt; field, or arrays of values and the number of times each value occurred during the period by using the &lt;code&gt;Values&lt;/code&gt; and &lt;code&gt;Counts&lt;/code&gt; fields in the &lt;code&gt;MetricDatum&lt;/code&gt; structure. Using the &lt;code&gt;Values&lt;/code&gt; and &lt;code&gt;Counts&lt;/code&gt; method enables you to publish up to 150 values per metric with one &lt;code&gt;PutMetricData&lt;/code&gt; request, and supports retrieving percentile statistics on this data.&lt;/p&gt; &lt;p&gt;Each &lt;code&gt;PutMetricData&lt;/code&gt; request is limited to 1 MB in size for HTTP POST requests. You can send a payload compressed by gzip. Each request is also limited to no more than 1000 different metrics.&lt;/p&gt; &lt;p&gt;Although the &lt;code&gt;Value&lt;/code&gt; parameter accepts numbers of type &lt;code&gt;Double&lt;/code&gt;, CloudWatch rejects values that are either too small or too large. Values must be in the range of -2^360 to 2^360. In addition, special values (for example, NaN, +Infinity, -Infinity) are not supported.&lt;/p&gt; &lt;p&gt;You can use up to 30 dimensions per metric to further clarify what data the metric collects. Each dimension consists of a Name and Value pair. For more information about specifying dimensions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html\&quot;&gt;Publishing Metrics&lt;/a&gt; in the &lt;i&gt;Amazon CloudWatch User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You specify the time stamp to be associated with each data point. You can specify time stamps that are as much as two weeks before the current date, and as much as 2 hours after the current day and time.&lt;/p&gt; &lt;p&gt;Data points with time stamps from 24 hours ago or longer can take at least 48 hours to become available for &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html\&quot;&gt;GetMetricData&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html\&quot;&gt;GetMetricStatistics&lt;/a&gt; from the time they are submitted. Data points with time stamps between 3 and 24 hours ago can take as much as 2 hours to become available for for &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html\&quot;&gt;GetMetricData&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html\&quot;&gt;GetMetricStatistics&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;CloudWatch needs raw data points to calculate percentile statistics. If you publish data using a statistic set instead, you can only retrieve percentile statistics for this data if one of the following conditions is true:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;SampleCount&lt;/code&gt; value of the statistic set is 1 and &lt;code&gt;Min&lt;/code&gt;, &lt;code&gt;Max&lt;/code&gt;, and &lt;code&gt;Sum&lt;/code&gt; are all equal.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;Min&lt;/code&gt; and &lt;code&gt;Max&lt;/code&gt; are equal, and &lt;code&gt;Sum&lt;/code&gt; is equal to &lt;code&gt;Min&lt;/code&gt; multiplied by &lt;code&gt;SampleCount&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param namespace &lt;p&gt;The namespace for the metric data. You can use ASCII characters for the namespace, except for control characters which are not supported.&lt;/p&gt; &lt;p&gt;To avoid conflicts with Amazon Web Services service namespaces, you should not specify a namespace that begins with &lt;code&gt;AWS/&lt;/code&gt; &lt;/p&gt; (required)
     * @param metricData The data for the metric. The array can include no more than 1000 metrics per call. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETPutMetricDataWithHttpInfo(String namespace, List<MetricDatum> metricData, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETPutMetricDataValidateBeforeCall(namespace, metricData, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Publishes metric data points to Amazon CloudWatch. CloudWatch associates the data points with the specified metric. If the specified metric does not exist, CloudWatch creates the metric. When CloudWatch creates a metric, it can take up to fifteen minutes for the metric to appear in calls to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_ListMetrics.html\&quot;&gt;ListMetrics&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can publish either individual data points in the &lt;code&gt;Value&lt;/code&gt; field, or arrays of values and the number of times each value occurred during the period by using the &lt;code&gt;Values&lt;/code&gt; and &lt;code&gt;Counts&lt;/code&gt; fields in the &lt;code&gt;MetricDatum&lt;/code&gt; structure. Using the &lt;code&gt;Values&lt;/code&gt; and &lt;code&gt;Counts&lt;/code&gt; method enables you to publish up to 150 values per metric with one &lt;code&gt;PutMetricData&lt;/code&gt; request, and supports retrieving percentile statistics on this data.&lt;/p&gt; &lt;p&gt;Each &lt;code&gt;PutMetricData&lt;/code&gt; request is limited to 1 MB in size for HTTP POST requests. You can send a payload compressed by gzip. Each request is also limited to no more than 1000 different metrics.&lt;/p&gt; &lt;p&gt;Although the &lt;code&gt;Value&lt;/code&gt; parameter accepts numbers of type &lt;code&gt;Double&lt;/code&gt;, CloudWatch rejects values that are either too small or too large. Values must be in the range of -2^360 to 2^360. In addition, special values (for example, NaN, +Infinity, -Infinity) are not supported.&lt;/p&gt; &lt;p&gt;You can use up to 30 dimensions per metric to further clarify what data the metric collects. Each dimension consists of a Name and Value pair. For more information about specifying dimensions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html\&quot;&gt;Publishing Metrics&lt;/a&gt; in the &lt;i&gt;Amazon CloudWatch User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You specify the time stamp to be associated with each data point. You can specify time stamps that are as much as two weeks before the current date, and as much as 2 hours after the current day and time.&lt;/p&gt; &lt;p&gt;Data points with time stamps from 24 hours ago or longer can take at least 48 hours to become available for &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html\&quot;&gt;GetMetricData&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html\&quot;&gt;GetMetricStatistics&lt;/a&gt; from the time they are submitted. Data points with time stamps between 3 and 24 hours ago can take as much as 2 hours to become available for for &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html\&quot;&gt;GetMetricData&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html\&quot;&gt;GetMetricStatistics&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;CloudWatch needs raw data points to calculate percentile statistics. If you publish data using a statistic set instead, you can only retrieve percentile statistics for this data if one of the following conditions is true:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;SampleCount&lt;/code&gt; value of the statistic set is 1 and &lt;code&gt;Min&lt;/code&gt;, &lt;code&gt;Max&lt;/code&gt;, and &lt;code&gt;Sum&lt;/code&gt; are all equal.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;Min&lt;/code&gt; and &lt;code&gt;Max&lt;/code&gt; are equal, and &lt;code&gt;Sum&lt;/code&gt; is equal to &lt;code&gt;Min&lt;/code&gt; multiplied by &lt;code&gt;SampleCount&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param namespace &lt;p&gt;The namespace for the metric data. You can use ASCII characters for the namespace, except for control characters which are not supported.&lt;/p&gt; &lt;p&gt;To avoid conflicts with Amazon Web Services service namespaces, you should not specify a namespace that begins with &lt;code&gt;AWS/&lt;/code&gt; &lt;/p&gt; (required)
     * @param metricData The data for the metric. The array can include no more than 1000 metrics per call. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPutMetricDataAsync(String namespace, List<MetricDatum> metricData, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETPutMetricDataValidateBeforeCall(namespace, metricData, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETPutMetricStream
     * @param name &lt;p&gt;If you are creating a new metric stream, this is the name for the new stream. The name must be different than the names of other metric streams in this account and Region.&lt;/p&gt; &lt;p&gt;If you are updating a metric stream, specify the name of that stream here.&lt;/p&gt; &lt;p&gt;Valid characters are A-Z, a-z, 0-9, \&quot;-\&quot; and \&quot;_\&quot;.&lt;/p&gt; (required)
     * @param firehoseArn The ARN of the Amazon Kinesis Data Firehose delivery stream to use for this metric stream. This Amazon Kinesis Data Firehose delivery stream must already exist and must be in the same account as the metric stream. (required)
     * @param roleArn &lt;p&gt;The ARN of an IAM role that this metric stream will use to access Amazon Kinesis Data Firehose resources. This IAM role must already exist and must be in the same account as the metric stream. This IAM role must include the following permissions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;firehose:PutRecord&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;firehose:PutRecordBatch&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param outputFormat The output format for the stream. Valid values are &lt;code&gt;json&lt;/code&gt; and &lt;code&gt;opentelemetry0.7&lt;/code&gt;. For more information about metric stream output formats, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-metric-streams-formats.html\&quot;&gt; Metric streams output formats&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param includeFilters &lt;p&gt;If you specify this parameter, the stream sends only the metrics from the metric namespaces that you specify here.&lt;/p&gt; &lt;p&gt;You cannot include &lt;code&gt;IncludeFilters&lt;/code&gt; and &lt;code&gt;ExcludeFilters&lt;/code&gt; in the same operation.&lt;/p&gt; (optional)
     * @param excludeFilters &lt;p&gt;If you specify this parameter, the stream sends metrics from all metric namespaces except for the namespaces that you specify here.&lt;/p&gt; &lt;p&gt;You cannot include &lt;code&gt;ExcludeFilters&lt;/code&gt; and &lt;code&gt;IncludeFilters&lt;/code&gt; in the same operation.&lt;/p&gt; (optional)
     * @param tags &lt;p&gt;A list of key-value pairs to associate with the metric stream. You can associate as many as 50 tags with a metric stream.&lt;/p&gt; &lt;p&gt;Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.&lt;/p&gt; &lt;p&gt;You can use this parameter only when you are creating a new metric stream. If you are using this operation to update an existing metric stream, any tags you specify in this parameter are ignored. To change the tags of an existing metric stream, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_TagResource.html\&quot;&gt;TagResource&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_UntagResource.html\&quot;&gt;UntagResource&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param statisticsConfigurations &lt;p&gt;By default, a metric stream always sends the &lt;code&gt;MAX&lt;/code&gt;, &lt;code&gt;MIN&lt;/code&gt;, &lt;code&gt;SUM&lt;/code&gt;, and &lt;code&gt;SAMPLECOUNT&lt;/code&gt; statistics for each metric that is streamed. You can use this parameter to have the metric stream also send additional statistics in the stream. This array can have up to 100 members.&lt;/p&gt; &lt;p&gt;For each entry in this array, you specify one or more metrics and the list of additional statistics to stream for those metrics. The additional statistics that you can stream depend on the stream&#39;s &lt;code&gt;OutputFormat&lt;/code&gt;. If the &lt;code&gt;OutputFormat&lt;/code&gt; is &lt;code&gt;json&lt;/code&gt;, you can stream any additional statistic that is supported by CloudWatch, listed in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html.html\&quot;&gt; CloudWatch statistics definitions&lt;/a&gt;. If the &lt;code&gt;OutputFormat&lt;/code&gt; is &lt;code&gt;opentelemetry0.7&lt;/code&gt;, you can stream percentile statistics such as p95, p99.9, and so on.&lt;/p&gt; (optional)
     * @param includeLinkedAccountsMetrics If you are creating a metric stream in a monitoring account, specify &lt;code&gt;true&lt;/code&gt; to include metrics from source accounts in the metric stream. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPutMetricStreamCall(String name, String firehoseArn, String roleArn, String outputFormat, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<MetricStreamFilter> includeFilters, List<MetricStreamFilter> excludeFilters, List<Tag> tags, List<MetricStreamStatisticsConfiguration> statisticsConfigurations, Boolean includeLinkedAccountsMetrics, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=PutMetricStream";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Name", name));
        }

        if (includeFilters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "IncludeFilters", includeFilters));
        }

        if (excludeFilters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ExcludeFilters", excludeFilters));
        }

        if (firehoseArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("FirehoseArn", firehoseArn));
        }

        if (roleArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RoleArn", roleArn));
        }

        if (outputFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OutputFormat", outputFormat));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (statisticsConfigurations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "StatisticsConfigurations", statisticsConfigurations));
        }

        if (includeLinkedAccountsMetrics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IncludeLinkedAccountsMetrics", includeLinkedAccountsMetrics));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETPutMetricStreamValidateBeforeCall(String name, String firehoseArn, String roleArn, String outputFormat, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<MetricStreamFilter> includeFilters, List<MetricStreamFilter> excludeFilters, List<Tag> tags, List<MetricStreamStatisticsConfiguration> statisticsConfigurations, Boolean includeLinkedAccountsMetrics, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling gETPutMetricStream(Async)");
        }

        // verify the required parameter 'firehoseArn' is set
        if (firehoseArn == null) {
            throw new ApiException("Missing the required parameter 'firehoseArn' when calling gETPutMetricStream(Async)");
        }

        // verify the required parameter 'roleArn' is set
        if (roleArn == null) {
            throw new ApiException("Missing the required parameter 'roleArn' when calling gETPutMetricStream(Async)");
        }

        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling gETPutMetricStream(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETPutMetricStream(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETPutMetricStream(Async)");
        }

        return gETPutMetricStreamCall(name, firehoseArn, roleArn, outputFormat, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, includeFilters, excludeFilters, tags, statisticsConfigurations, includeLinkedAccountsMetrics, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates or updates a metric stream. Metric streams can automatically stream CloudWatch metrics to Amazon Web Services destinations, including Amazon S3, and to many third-party solutions.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Metric-Streams.html\&quot;&gt; Using Metric Streams&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To create a metric stream, you must be signed in to an account that has the &lt;code&gt;iam:PassRole&lt;/code&gt; permission and either the &lt;code&gt;CloudWatchFullAccess&lt;/code&gt; policy or the &lt;code&gt;cloudwatch:PutMetricStream&lt;/code&gt; permission.&lt;/p&gt; &lt;p&gt;When you create or update a metric stream, you choose one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Stream metrics from all metric namespaces in the account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Stream metrics from all metric namespaces in the account, except for the namespaces that you list in &lt;code&gt;ExcludeFilters&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Stream metrics from only the metric namespaces that you list in &lt;code&gt;IncludeFilters&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;By default, a metric stream always sends the &lt;code&gt;MAX&lt;/code&gt;, &lt;code&gt;MIN&lt;/code&gt;, &lt;code&gt;SUM&lt;/code&gt;, and &lt;code&gt;SAMPLECOUNT&lt;/code&gt; statistics for each metric that is streamed. You can use the &lt;code&gt;StatisticsConfigurations&lt;/code&gt; parameter to have the metric stream send additional statistics in the stream. Streaming additional statistics incurs additional costs. For more information, see &lt;a href&#x3D;\&quot;https://aws.amazon.com/cloudwatch/pricing/\&quot;&gt;Amazon CloudWatch Pricing&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;When you use &lt;code&gt;PutMetricStream&lt;/code&gt; to create a new metric stream, the stream is created in the &lt;code&gt;running&lt;/code&gt; state. If you use it to update an existing stream, the state of the stream is not changed.&lt;/p&gt; &lt;p&gt;If you are using CloudWatch cross-account observability and you create a metric stream in a monitoring account, you can choose whether to include metrics from source accounts in the stream. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Unified-Cross-Account.html\&quot;&gt;CloudWatch cross-account observability&lt;/a&gt;.&lt;/p&gt;
     * @param name &lt;p&gt;If you are creating a new metric stream, this is the name for the new stream. The name must be different than the names of other metric streams in this account and Region.&lt;/p&gt; &lt;p&gt;If you are updating a metric stream, specify the name of that stream here.&lt;/p&gt; &lt;p&gt;Valid characters are A-Z, a-z, 0-9, \&quot;-\&quot; and \&quot;_\&quot;.&lt;/p&gt; (required)
     * @param firehoseArn The ARN of the Amazon Kinesis Data Firehose delivery stream to use for this metric stream. This Amazon Kinesis Data Firehose delivery stream must already exist and must be in the same account as the metric stream. (required)
     * @param roleArn &lt;p&gt;The ARN of an IAM role that this metric stream will use to access Amazon Kinesis Data Firehose resources. This IAM role must already exist and must be in the same account as the metric stream. This IAM role must include the following permissions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;firehose:PutRecord&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;firehose:PutRecordBatch&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param outputFormat The output format for the stream. Valid values are &lt;code&gt;json&lt;/code&gt; and &lt;code&gt;opentelemetry0.7&lt;/code&gt;. For more information about metric stream output formats, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-metric-streams-formats.html\&quot;&gt; Metric streams output formats&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param includeFilters &lt;p&gt;If you specify this parameter, the stream sends only the metrics from the metric namespaces that you specify here.&lt;/p&gt; &lt;p&gt;You cannot include &lt;code&gt;IncludeFilters&lt;/code&gt; and &lt;code&gt;ExcludeFilters&lt;/code&gt; in the same operation.&lt;/p&gt; (optional)
     * @param excludeFilters &lt;p&gt;If you specify this parameter, the stream sends metrics from all metric namespaces except for the namespaces that you specify here.&lt;/p&gt; &lt;p&gt;You cannot include &lt;code&gt;ExcludeFilters&lt;/code&gt; and &lt;code&gt;IncludeFilters&lt;/code&gt; in the same operation.&lt;/p&gt; (optional)
     * @param tags &lt;p&gt;A list of key-value pairs to associate with the metric stream. You can associate as many as 50 tags with a metric stream.&lt;/p&gt; &lt;p&gt;Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.&lt;/p&gt; &lt;p&gt;You can use this parameter only when you are creating a new metric stream. If you are using this operation to update an existing metric stream, any tags you specify in this parameter are ignored. To change the tags of an existing metric stream, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_TagResource.html\&quot;&gt;TagResource&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_UntagResource.html\&quot;&gt;UntagResource&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param statisticsConfigurations &lt;p&gt;By default, a metric stream always sends the &lt;code&gt;MAX&lt;/code&gt;, &lt;code&gt;MIN&lt;/code&gt;, &lt;code&gt;SUM&lt;/code&gt;, and &lt;code&gt;SAMPLECOUNT&lt;/code&gt; statistics for each metric that is streamed. You can use this parameter to have the metric stream also send additional statistics in the stream. This array can have up to 100 members.&lt;/p&gt; &lt;p&gt;For each entry in this array, you specify one or more metrics and the list of additional statistics to stream for those metrics. The additional statistics that you can stream depend on the stream&#39;s &lt;code&gt;OutputFormat&lt;/code&gt;. If the &lt;code&gt;OutputFormat&lt;/code&gt; is &lt;code&gt;json&lt;/code&gt;, you can stream any additional statistic that is supported by CloudWatch, listed in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html.html\&quot;&gt; CloudWatch statistics definitions&lt;/a&gt;. If the &lt;code&gt;OutputFormat&lt;/code&gt; is &lt;code&gt;opentelemetry0.7&lt;/code&gt;, you can stream percentile statistics such as p95, p99.9, and so on.&lt;/p&gt; (optional)
     * @param includeLinkedAccountsMetrics If you are creating a metric stream in a monitoring account, specify &lt;code&gt;true&lt;/code&gt; to include metrics from source accounts in the metric stream. (optional)
     * @return PutMetricStreamOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public PutMetricStreamOutput gETPutMetricStream(String name, String firehoseArn, String roleArn, String outputFormat, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<MetricStreamFilter> includeFilters, List<MetricStreamFilter> excludeFilters, List<Tag> tags, List<MetricStreamStatisticsConfiguration> statisticsConfigurations, Boolean includeLinkedAccountsMetrics) throws ApiException {
        ApiResponse<PutMetricStreamOutput> localVarResp = gETPutMetricStreamWithHttpInfo(name, firehoseArn, roleArn, outputFormat, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, includeFilters, excludeFilters, tags, statisticsConfigurations, includeLinkedAccountsMetrics);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates or updates a metric stream. Metric streams can automatically stream CloudWatch metrics to Amazon Web Services destinations, including Amazon S3, and to many third-party solutions.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Metric-Streams.html\&quot;&gt; Using Metric Streams&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To create a metric stream, you must be signed in to an account that has the &lt;code&gt;iam:PassRole&lt;/code&gt; permission and either the &lt;code&gt;CloudWatchFullAccess&lt;/code&gt; policy or the &lt;code&gt;cloudwatch:PutMetricStream&lt;/code&gt; permission.&lt;/p&gt; &lt;p&gt;When you create or update a metric stream, you choose one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Stream metrics from all metric namespaces in the account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Stream metrics from all metric namespaces in the account, except for the namespaces that you list in &lt;code&gt;ExcludeFilters&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Stream metrics from only the metric namespaces that you list in &lt;code&gt;IncludeFilters&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;By default, a metric stream always sends the &lt;code&gt;MAX&lt;/code&gt;, &lt;code&gt;MIN&lt;/code&gt;, &lt;code&gt;SUM&lt;/code&gt;, and &lt;code&gt;SAMPLECOUNT&lt;/code&gt; statistics for each metric that is streamed. You can use the &lt;code&gt;StatisticsConfigurations&lt;/code&gt; parameter to have the metric stream send additional statistics in the stream. Streaming additional statistics incurs additional costs. For more information, see &lt;a href&#x3D;\&quot;https://aws.amazon.com/cloudwatch/pricing/\&quot;&gt;Amazon CloudWatch Pricing&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;When you use &lt;code&gt;PutMetricStream&lt;/code&gt; to create a new metric stream, the stream is created in the &lt;code&gt;running&lt;/code&gt; state. If you use it to update an existing stream, the state of the stream is not changed.&lt;/p&gt; &lt;p&gt;If you are using CloudWatch cross-account observability and you create a metric stream in a monitoring account, you can choose whether to include metrics from source accounts in the stream. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Unified-Cross-Account.html\&quot;&gt;CloudWatch cross-account observability&lt;/a&gt;.&lt;/p&gt;
     * @param name &lt;p&gt;If you are creating a new metric stream, this is the name for the new stream. The name must be different than the names of other metric streams in this account and Region.&lt;/p&gt; &lt;p&gt;If you are updating a metric stream, specify the name of that stream here.&lt;/p&gt; &lt;p&gt;Valid characters are A-Z, a-z, 0-9, \&quot;-\&quot; and \&quot;_\&quot;.&lt;/p&gt; (required)
     * @param firehoseArn The ARN of the Amazon Kinesis Data Firehose delivery stream to use for this metric stream. This Amazon Kinesis Data Firehose delivery stream must already exist and must be in the same account as the metric stream. (required)
     * @param roleArn &lt;p&gt;The ARN of an IAM role that this metric stream will use to access Amazon Kinesis Data Firehose resources. This IAM role must already exist and must be in the same account as the metric stream. This IAM role must include the following permissions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;firehose:PutRecord&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;firehose:PutRecordBatch&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param outputFormat The output format for the stream. Valid values are &lt;code&gt;json&lt;/code&gt; and &lt;code&gt;opentelemetry0.7&lt;/code&gt;. For more information about metric stream output formats, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-metric-streams-formats.html\&quot;&gt; Metric streams output formats&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param includeFilters &lt;p&gt;If you specify this parameter, the stream sends only the metrics from the metric namespaces that you specify here.&lt;/p&gt; &lt;p&gt;You cannot include &lt;code&gt;IncludeFilters&lt;/code&gt; and &lt;code&gt;ExcludeFilters&lt;/code&gt; in the same operation.&lt;/p&gt; (optional)
     * @param excludeFilters &lt;p&gt;If you specify this parameter, the stream sends metrics from all metric namespaces except for the namespaces that you specify here.&lt;/p&gt; &lt;p&gt;You cannot include &lt;code&gt;ExcludeFilters&lt;/code&gt; and &lt;code&gt;IncludeFilters&lt;/code&gt; in the same operation.&lt;/p&gt; (optional)
     * @param tags &lt;p&gt;A list of key-value pairs to associate with the metric stream. You can associate as many as 50 tags with a metric stream.&lt;/p&gt; &lt;p&gt;Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.&lt;/p&gt; &lt;p&gt;You can use this parameter only when you are creating a new metric stream. If you are using this operation to update an existing metric stream, any tags you specify in this parameter are ignored. To change the tags of an existing metric stream, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_TagResource.html\&quot;&gt;TagResource&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_UntagResource.html\&quot;&gt;UntagResource&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param statisticsConfigurations &lt;p&gt;By default, a metric stream always sends the &lt;code&gt;MAX&lt;/code&gt;, &lt;code&gt;MIN&lt;/code&gt;, &lt;code&gt;SUM&lt;/code&gt;, and &lt;code&gt;SAMPLECOUNT&lt;/code&gt; statistics for each metric that is streamed. You can use this parameter to have the metric stream also send additional statistics in the stream. This array can have up to 100 members.&lt;/p&gt; &lt;p&gt;For each entry in this array, you specify one or more metrics and the list of additional statistics to stream for those metrics. The additional statistics that you can stream depend on the stream&#39;s &lt;code&gt;OutputFormat&lt;/code&gt;. If the &lt;code&gt;OutputFormat&lt;/code&gt; is &lt;code&gt;json&lt;/code&gt;, you can stream any additional statistic that is supported by CloudWatch, listed in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html.html\&quot;&gt; CloudWatch statistics definitions&lt;/a&gt;. If the &lt;code&gt;OutputFormat&lt;/code&gt; is &lt;code&gt;opentelemetry0.7&lt;/code&gt;, you can stream percentile statistics such as p95, p99.9, and so on.&lt;/p&gt; (optional)
     * @param includeLinkedAccountsMetrics If you are creating a metric stream in a monitoring account, specify &lt;code&gt;true&lt;/code&gt; to include metrics from source accounts in the metric stream. (optional)
     * @return ApiResponse&lt;PutMetricStreamOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PutMetricStreamOutput> gETPutMetricStreamWithHttpInfo(String name, String firehoseArn, String roleArn, String outputFormat, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<MetricStreamFilter> includeFilters, List<MetricStreamFilter> excludeFilters, List<Tag> tags, List<MetricStreamStatisticsConfiguration> statisticsConfigurations, Boolean includeLinkedAccountsMetrics) throws ApiException {
        okhttp3.Call localVarCall = gETPutMetricStreamValidateBeforeCall(name, firehoseArn, roleArn, outputFormat, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, includeFilters, excludeFilters, tags, statisticsConfigurations, includeLinkedAccountsMetrics, null);
        Type localVarReturnType = new TypeToken<PutMetricStreamOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates or updates a metric stream. Metric streams can automatically stream CloudWatch metrics to Amazon Web Services destinations, including Amazon S3, and to many third-party solutions.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Metric-Streams.html\&quot;&gt; Using Metric Streams&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To create a metric stream, you must be signed in to an account that has the &lt;code&gt;iam:PassRole&lt;/code&gt; permission and either the &lt;code&gt;CloudWatchFullAccess&lt;/code&gt; policy or the &lt;code&gt;cloudwatch:PutMetricStream&lt;/code&gt; permission.&lt;/p&gt; &lt;p&gt;When you create or update a metric stream, you choose one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Stream metrics from all metric namespaces in the account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Stream metrics from all metric namespaces in the account, except for the namespaces that you list in &lt;code&gt;ExcludeFilters&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Stream metrics from only the metric namespaces that you list in &lt;code&gt;IncludeFilters&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;By default, a metric stream always sends the &lt;code&gt;MAX&lt;/code&gt;, &lt;code&gt;MIN&lt;/code&gt;, &lt;code&gt;SUM&lt;/code&gt;, and &lt;code&gt;SAMPLECOUNT&lt;/code&gt; statistics for each metric that is streamed. You can use the &lt;code&gt;StatisticsConfigurations&lt;/code&gt; parameter to have the metric stream send additional statistics in the stream. Streaming additional statistics incurs additional costs. For more information, see &lt;a href&#x3D;\&quot;https://aws.amazon.com/cloudwatch/pricing/\&quot;&gt;Amazon CloudWatch Pricing&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;When you use &lt;code&gt;PutMetricStream&lt;/code&gt; to create a new metric stream, the stream is created in the &lt;code&gt;running&lt;/code&gt; state. If you use it to update an existing stream, the state of the stream is not changed.&lt;/p&gt; &lt;p&gt;If you are using CloudWatch cross-account observability and you create a metric stream in a monitoring account, you can choose whether to include metrics from source accounts in the stream. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Unified-Cross-Account.html\&quot;&gt;CloudWatch cross-account observability&lt;/a&gt;.&lt;/p&gt;
     * @param name &lt;p&gt;If you are creating a new metric stream, this is the name for the new stream. The name must be different than the names of other metric streams in this account and Region.&lt;/p&gt; &lt;p&gt;If you are updating a metric stream, specify the name of that stream here.&lt;/p&gt; &lt;p&gt;Valid characters are A-Z, a-z, 0-9, \&quot;-\&quot; and \&quot;_\&quot;.&lt;/p&gt; (required)
     * @param firehoseArn The ARN of the Amazon Kinesis Data Firehose delivery stream to use for this metric stream. This Amazon Kinesis Data Firehose delivery stream must already exist and must be in the same account as the metric stream. (required)
     * @param roleArn &lt;p&gt;The ARN of an IAM role that this metric stream will use to access Amazon Kinesis Data Firehose resources. This IAM role must already exist and must be in the same account as the metric stream. This IAM role must include the following permissions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;firehose:PutRecord&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;firehose:PutRecordBatch&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param outputFormat The output format for the stream. Valid values are &lt;code&gt;json&lt;/code&gt; and &lt;code&gt;opentelemetry0.7&lt;/code&gt;. For more information about metric stream output formats, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-metric-streams-formats.html\&quot;&gt; Metric streams output formats&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param includeFilters &lt;p&gt;If you specify this parameter, the stream sends only the metrics from the metric namespaces that you specify here.&lt;/p&gt; &lt;p&gt;You cannot include &lt;code&gt;IncludeFilters&lt;/code&gt; and &lt;code&gt;ExcludeFilters&lt;/code&gt; in the same operation.&lt;/p&gt; (optional)
     * @param excludeFilters &lt;p&gt;If you specify this parameter, the stream sends metrics from all metric namespaces except for the namespaces that you specify here.&lt;/p&gt; &lt;p&gt;You cannot include &lt;code&gt;ExcludeFilters&lt;/code&gt; and &lt;code&gt;IncludeFilters&lt;/code&gt; in the same operation.&lt;/p&gt; (optional)
     * @param tags &lt;p&gt;A list of key-value pairs to associate with the metric stream. You can associate as many as 50 tags with a metric stream.&lt;/p&gt; &lt;p&gt;Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.&lt;/p&gt; &lt;p&gt;You can use this parameter only when you are creating a new metric stream. If you are using this operation to update an existing metric stream, any tags you specify in this parameter are ignored. To change the tags of an existing metric stream, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_TagResource.html\&quot;&gt;TagResource&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_UntagResource.html\&quot;&gt;UntagResource&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param statisticsConfigurations &lt;p&gt;By default, a metric stream always sends the &lt;code&gt;MAX&lt;/code&gt;, &lt;code&gt;MIN&lt;/code&gt;, &lt;code&gt;SUM&lt;/code&gt;, and &lt;code&gt;SAMPLECOUNT&lt;/code&gt; statistics for each metric that is streamed. You can use this parameter to have the metric stream also send additional statistics in the stream. This array can have up to 100 members.&lt;/p&gt; &lt;p&gt;For each entry in this array, you specify one or more metrics and the list of additional statistics to stream for those metrics. The additional statistics that you can stream depend on the stream&#39;s &lt;code&gt;OutputFormat&lt;/code&gt;. If the &lt;code&gt;OutputFormat&lt;/code&gt; is &lt;code&gt;json&lt;/code&gt;, you can stream any additional statistic that is supported by CloudWatch, listed in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html.html\&quot;&gt; CloudWatch statistics definitions&lt;/a&gt;. If the &lt;code&gt;OutputFormat&lt;/code&gt; is &lt;code&gt;opentelemetry0.7&lt;/code&gt;, you can stream percentile statistics such as p95, p99.9, and so on.&lt;/p&gt; (optional)
     * @param includeLinkedAccountsMetrics If you are creating a metric stream in a monitoring account, specify &lt;code&gt;true&lt;/code&gt; to include metrics from source accounts in the metric stream. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPutMetricStreamAsync(String name, String firehoseArn, String roleArn, String outputFormat, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<MetricStreamFilter> includeFilters, List<MetricStreamFilter> excludeFilters, List<Tag> tags, List<MetricStreamStatisticsConfiguration> statisticsConfigurations, Boolean includeLinkedAccountsMetrics, final ApiCallback<PutMetricStreamOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETPutMetricStreamValidateBeforeCall(name, firehoseArn, roleArn, outputFormat, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, includeFilters, excludeFilters, tags, statisticsConfigurations, includeLinkedAccountsMetrics, _callback);
        Type localVarReturnType = new TypeToken<PutMetricStreamOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETSetAlarmState
     * @param alarmName The name of the alarm. (required)
     * @param stateValue The value of the state. (required)
     * @param stateReason The reason that this alarm is set to this specific state, in text format. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stateReasonData &lt;p&gt;The reason that this alarm is set to this specific state, in JSON format.&lt;/p&gt; &lt;p&gt;For SNS or EC2 alarm actions, this is just informational. But for EC2 Auto Scaling or application Auto Scaling alarm actions, the Auto Scaling policy uses the information in this field to take the correct action.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidFormatFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetAlarmStateCall(String alarmName, String stateValue, String stateReason, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stateReasonData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=SetAlarmState";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alarmName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AlarmName", alarmName));
        }

        if (stateValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StateValue", stateValue));
        }

        if (stateReason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StateReason", stateReason));
        }

        if (stateReasonData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StateReasonData", stateReasonData));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETSetAlarmStateValidateBeforeCall(String alarmName, String stateValue, String stateReason, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stateReasonData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'alarmName' is set
        if (alarmName == null) {
            throw new ApiException("Missing the required parameter 'alarmName' when calling gETSetAlarmState(Async)");
        }

        // verify the required parameter 'stateValue' is set
        if (stateValue == null) {
            throw new ApiException("Missing the required parameter 'stateValue' when calling gETSetAlarmState(Async)");
        }

        // verify the required parameter 'stateReason' is set
        if (stateReason == null) {
            throw new ApiException("Missing the required parameter 'stateReason' when calling gETSetAlarmState(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETSetAlarmState(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETSetAlarmState(Async)");
        }

        return gETSetAlarmStateCall(alarmName, stateValue, stateReason, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stateReasonData, _callback);

    }

    /**
     * 
     * &lt;p&gt;Temporarily sets the state of an alarm for testing purposes. When the updated state differs from the previous value, the action configured for the appropriate state is invoked. For example, if your alarm is configured to send an Amazon SNS message when an alarm is triggered, temporarily changing the alarm state to &lt;code&gt;ALARM&lt;/code&gt; sends an SNS message.&lt;/p&gt; &lt;p&gt;Metric alarms returns to their actual state quickly, often within seconds. Because the metric alarm state change happens quickly, it is typically only visible in the alarm&#39;s &lt;b&gt;History&lt;/b&gt; tab in the Amazon CloudWatch console or through &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeAlarmHistory.html\&quot;&gt;DescribeAlarmHistory&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you use &lt;code&gt;SetAlarmState&lt;/code&gt; on a composite alarm, the composite alarm is not guaranteed to return to its actual state. It returns to its actual state only once any of its children alarms change state. It is also reevaluated if you update its configuration.&lt;/p&gt; &lt;p&gt;If an alarm triggers EC2 Auto Scaling policies or application Auto Scaling policies, you must include information in the &lt;code&gt;StateReasonData&lt;/code&gt; parameter to enable the policy to take the correct action.&lt;/p&gt;
     * @param alarmName The name of the alarm. (required)
     * @param stateValue The value of the state. (required)
     * @param stateReason The reason that this alarm is set to this specific state, in text format. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stateReasonData &lt;p&gt;The reason that this alarm is set to this specific state, in JSON format.&lt;/p&gt; &lt;p&gt;For SNS or EC2 alarm actions, this is just informational. But for EC2 Auto Scaling or application Auto Scaling alarm actions, the Auto Scaling policy uses the information in this field to take the correct action.&lt;/p&gt; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidFormatFault </td><td>  -  </td></tr>
     </table>
     */
    public void gETSetAlarmState(String alarmName, String stateValue, String stateReason, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stateReasonData) throws ApiException {
        gETSetAlarmStateWithHttpInfo(alarmName, stateValue, stateReason, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stateReasonData);
    }

    /**
     * 
     * &lt;p&gt;Temporarily sets the state of an alarm for testing purposes. When the updated state differs from the previous value, the action configured for the appropriate state is invoked. For example, if your alarm is configured to send an Amazon SNS message when an alarm is triggered, temporarily changing the alarm state to &lt;code&gt;ALARM&lt;/code&gt; sends an SNS message.&lt;/p&gt; &lt;p&gt;Metric alarms returns to their actual state quickly, often within seconds. Because the metric alarm state change happens quickly, it is typically only visible in the alarm&#39;s &lt;b&gt;History&lt;/b&gt; tab in the Amazon CloudWatch console or through &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeAlarmHistory.html\&quot;&gt;DescribeAlarmHistory&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you use &lt;code&gt;SetAlarmState&lt;/code&gt; on a composite alarm, the composite alarm is not guaranteed to return to its actual state. It returns to its actual state only once any of its children alarms change state. It is also reevaluated if you update its configuration.&lt;/p&gt; &lt;p&gt;If an alarm triggers EC2 Auto Scaling policies or application Auto Scaling policies, you must include information in the &lt;code&gt;StateReasonData&lt;/code&gt; parameter to enable the policy to take the correct action.&lt;/p&gt;
     * @param alarmName The name of the alarm. (required)
     * @param stateValue The value of the state. (required)
     * @param stateReason The reason that this alarm is set to this specific state, in text format. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stateReasonData &lt;p&gt;The reason that this alarm is set to this specific state, in JSON format.&lt;/p&gt; &lt;p&gt;For SNS or EC2 alarm actions, this is just informational. But for EC2 Auto Scaling or application Auto Scaling alarm actions, the Auto Scaling policy uses the information in this field to take the correct action.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidFormatFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETSetAlarmStateWithHttpInfo(String alarmName, String stateValue, String stateReason, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stateReasonData) throws ApiException {
        okhttp3.Call localVarCall = gETSetAlarmStateValidateBeforeCall(alarmName, stateValue, stateReason, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stateReasonData, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Temporarily sets the state of an alarm for testing purposes. When the updated state differs from the previous value, the action configured for the appropriate state is invoked. For example, if your alarm is configured to send an Amazon SNS message when an alarm is triggered, temporarily changing the alarm state to &lt;code&gt;ALARM&lt;/code&gt; sends an SNS message.&lt;/p&gt; &lt;p&gt;Metric alarms returns to their actual state quickly, often within seconds. Because the metric alarm state change happens quickly, it is typically only visible in the alarm&#39;s &lt;b&gt;History&lt;/b&gt; tab in the Amazon CloudWatch console or through &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeAlarmHistory.html\&quot;&gt;DescribeAlarmHistory&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you use &lt;code&gt;SetAlarmState&lt;/code&gt; on a composite alarm, the composite alarm is not guaranteed to return to its actual state. It returns to its actual state only once any of its children alarms change state. It is also reevaluated if you update its configuration.&lt;/p&gt; &lt;p&gt;If an alarm triggers EC2 Auto Scaling policies or application Auto Scaling policies, you must include information in the &lt;code&gt;StateReasonData&lt;/code&gt; parameter to enable the policy to take the correct action.&lt;/p&gt;
     * @param alarmName The name of the alarm. (required)
     * @param stateValue The value of the state. (required)
     * @param stateReason The reason that this alarm is set to this specific state, in text format. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stateReasonData &lt;p&gt;The reason that this alarm is set to this specific state, in JSON format.&lt;/p&gt; &lt;p&gt;For SNS or EC2 alarm actions, this is just informational. But for EC2 Auto Scaling or application Auto Scaling alarm actions, the Auto Scaling policy uses the information in this field to take the correct action.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidFormatFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetAlarmStateAsync(String alarmName, String stateValue, String stateReason, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stateReasonData, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETSetAlarmStateValidateBeforeCall(alarmName, stateValue, stateReason, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stateReasonData, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETStartMetricStreams
     * @param names &lt;p&gt;The array of the names of metric streams to start streaming.&lt;/p&gt; &lt;p&gt;This is an \&quot;all or nothing\&quot; operation. If you do not have permission to access all of the metric streams that you list here, then none of the streams that you list in the operation will start streaming.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETStartMetricStreamsCall(List<String> names, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=StartMetricStreams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (names != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Names", names));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETStartMetricStreamsValidateBeforeCall(List<String> names, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'names' is set
        if (names == null) {
            throw new ApiException("Missing the required parameter 'names' when calling gETStartMetricStreams(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETStartMetricStreams(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETStartMetricStreams(Async)");
        }

        return gETStartMetricStreamsCall(names, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Starts the streaming of metrics for one or more of your metric streams.
     * @param names &lt;p&gt;The array of the names of metric streams to start streaming.&lt;/p&gt; &lt;p&gt;This is an \&quot;all or nothing\&quot; operation. If you do not have permission to access all of the metric streams that you list here, then none of the streams that you list in the operation will start streaming.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETStartMetricStreams(List<String> names, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETStartMetricStreamsWithHttpInfo(names, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Starts the streaming of metrics for one or more of your metric streams.
     * @param names &lt;p&gt;The array of the names of metric streams to start streaming.&lt;/p&gt; &lt;p&gt;This is an \&quot;all or nothing\&quot; operation. If you do not have permission to access all of the metric streams that you list here, then none of the streams that you list in the operation will start streaming.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETStartMetricStreamsWithHttpInfo(List<String> names, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETStartMetricStreamsValidateBeforeCall(names, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Starts the streaming of metrics for one or more of your metric streams.
     * @param names &lt;p&gt;The array of the names of metric streams to start streaming.&lt;/p&gt; &lt;p&gt;This is an \&quot;all or nothing\&quot; operation. If you do not have permission to access all of the metric streams that you list here, then none of the streams that you list in the operation will start streaming.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETStartMetricStreamsAsync(List<String> names, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETStartMetricStreamsValidateBeforeCall(names, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETStopMetricStreams
     * @param names &lt;p&gt;The array of the names of metric streams to stop streaming.&lt;/p&gt; &lt;p&gt;This is an \&quot;all or nothing\&quot; operation. If you do not have permission to access all of the metric streams that you list here, then none of the streams that you list in the operation will stop streaming.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETStopMetricStreamsCall(List<String> names, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=StopMetricStreams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (names != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Names", names));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETStopMetricStreamsValidateBeforeCall(List<String> names, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'names' is set
        if (names == null) {
            throw new ApiException("Missing the required parameter 'names' when calling gETStopMetricStreams(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETStopMetricStreams(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETStopMetricStreams(Async)");
        }

        return gETStopMetricStreamsCall(names, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Stops the streaming of metrics for one or more of your metric streams.
     * @param names &lt;p&gt;The array of the names of metric streams to stop streaming.&lt;/p&gt; &lt;p&gt;This is an \&quot;all or nothing\&quot; operation. If you do not have permission to access all of the metric streams that you list here, then none of the streams that you list in the operation will stop streaming.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETStopMetricStreams(List<String> names, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETStopMetricStreamsWithHttpInfo(names, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Stops the streaming of metrics for one or more of your metric streams.
     * @param names &lt;p&gt;The array of the names of metric streams to stop streaming.&lt;/p&gt; &lt;p&gt;This is an \&quot;all or nothing\&quot; operation. If you do not have permission to access all of the metric streams that you list here, then none of the streams that you list in the operation will stop streaming.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETStopMetricStreamsWithHttpInfo(List<String> names, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETStopMetricStreamsValidateBeforeCall(names, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Stops the streaming of metrics for one or more of your metric streams.
     * @param names &lt;p&gt;The array of the names of metric streams to stop streaming.&lt;/p&gt; &lt;p&gt;This is an \&quot;all or nothing\&quot; operation. If you do not have permission to access all of the metric streams that you list here, then none of the streams that you list in the operation will stop streaming.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETStopMetricStreamsAsync(List<String> names, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETStopMetricStreamsValidateBeforeCall(names, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETTagResource
     * @param resourceARN &lt;p&gt;The ARN of the CloudWatch resource that you&#39;re adding tags to.&lt;/p&gt; &lt;p&gt;The ARN format of an alarm is &lt;code&gt;arn:aws:cloudwatch:&lt;i&gt;Region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:alarm:&lt;i&gt;alarm-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;p&gt;The ARN format of a Contributor Insights rule is &lt;code&gt;arn:aws:cloudwatch:&lt;i&gt;Region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:insight-rule:&lt;i&gt;insight-rule-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;p&gt;For more information about ARN format, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncloudwatch.html#amazoncloudwatch-resources-for-iam-policies\&quot;&gt; Resource Types Defined by Amazon CloudWatch&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.&lt;/p&gt; (required)
     * @param tags The list of key-value pairs to associate with the alarm. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETTagResourceCall(String resourceARN, List<Tag> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=TagResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resourceARN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ResourceARN", resourceARN));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETTagResourceValidateBeforeCall(String resourceARN, List<Tag> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceARN' is set
        if (resourceARN == null) {
            throw new ApiException("Missing the required parameter 'resourceARN' when calling gETTagResource(Async)");
        }

        // verify the required parameter 'tags' is set
        if (tags == null) {
            throw new ApiException("Missing the required parameter 'tags' when calling gETTagResource(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETTagResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETTagResource(Async)");
        }

        return gETTagResourceCall(resourceARN, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Assigns one or more tags (key-value pairs) to the specified CloudWatch resource. Currently, the only CloudWatch resources that can be tagged are alarms and Contributor Insights rules.&lt;/p&gt; &lt;p&gt;Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.&lt;/p&gt; &lt;p&gt;Tags don&#39;t have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;TagResource&lt;/code&gt; action with an alarm that already has tags. If you specify a new tag key for the alarm, this tag is appended to the list of tags associated with the alarm. If you specify a tag key that is already associated with the alarm, the new tag value that you specify replaces the previous value for that tag.&lt;/p&gt; &lt;p&gt;You can associate as many as 50 tags with a CloudWatch resource.&lt;/p&gt;
     * @param resourceARN &lt;p&gt;The ARN of the CloudWatch resource that you&#39;re adding tags to.&lt;/p&gt; &lt;p&gt;The ARN format of an alarm is &lt;code&gt;arn:aws:cloudwatch:&lt;i&gt;Region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:alarm:&lt;i&gt;alarm-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;p&gt;The ARN format of a Contributor Insights rule is &lt;code&gt;arn:aws:cloudwatch:&lt;i&gt;Region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:insight-rule:&lt;i&gt;insight-rule-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;p&gt;For more information about ARN format, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncloudwatch.html#amazoncloudwatch-resources-for-iam-policies\&quot;&gt; Resource Types Defined by Amazon CloudWatch&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.&lt;/p&gt; (required)
     * @param tags The list of key-value pairs to associate with the alarm. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public Object gETTagResource(String resourceARN, List<Tag> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETTagResourceWithHttpInfo(resourceARN, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Assigns one or more tags (key-value pairs) to the specified CloudWatch resource. Currently, the only CloudWatch resources that can be tagged are alarms and Contributor Insights rules.&lt;/p&gt; &lt;p&gt;Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.&lt;/p&gt; &lt;p&gt;Tags don&#39;t have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;TagResource&lt;/code&gt; action with an alarm that already has tags. If you specify a new tag key for the alarm, this tag is appended to the list of tags associated with the alarm. If you specify a tag key that is already associated with the alarm, the new tag value that you specify replaces the previous value for that tag.&lt;/p&gt; &lt;p&gt;You can associate as many as 50 tags with a CloudWatch resource.&lt;/p&gt;
     * @param resourceARN &lt;p&gt;The ARN of the CloudWatch resource that you&#39;re adding tags to.&lt;/p&gt; &lt;p&gt;The ARN format of an alarm is &lt;code&gt;arn:aws:cloudwatch:&lt;i&gt;Region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:alarm:&lt;i&gt;alarm-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;p&gt;The ARN format of a Contributor Insights rule is &lt;code&gt;arn:aws:cloudwatch:&lt;i&gt;Region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:insight-rule:&lt;i&gt;insight-rule-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;p&gt;For more information about ARN format, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncloudwatch.html#amazoncloudwatch-resources-for-iam-policies\&quot;&gt; Resource Types Defined by Amazon CloudWatch&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.&lt;/p&gt; (required)
     * @param tags The list of key-value pairs to associate with the alarm. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETTagResourceWithHttpInfo(String resourceARN, List<Tag> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETTagResourceValidateBeforeCall(resourceARN, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Assigns one or more tags (key-value pairs) to the specified CloudWatch resource. Currently, the only CloudWatch resources that can be tagged are alarms and Contributor Insights rules.&lt;/p&gt; &lt;p&gt;Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.&lt;/p&gt; &lt;p&gt;Tags don&#39;t have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;TagResource&lt;/code&gt; action with an alarm that already has tags. If you specify a new tag key for the alarm, this tag is appended to the list of tags associated with the alarm. If you specify a tag key that is already associated with the alarm, the new tag value that you specify replaces the previous value for that tag.&lt;/p&gt; &lt;p&gt;You can associate as many as 50 tags with a CloudWatch resource.&lt;/p&gt;
     * @param resourceARN &lt;p&gt;The ARN of the CloudWatch resource that you&#39;re adding tags to.&lt;/p&gt; &lt;p&gt;The ARN format of an alarm is &lt;code&gt;arn:aws:cloudwatch:&lt;i&gt;Region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:alarm:&lt;i&gt;alarm-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;p&gt;The ARN format of a Contributor Insights rule is &lt;code&gt;arn:aws:cloudwatch:&lt;i&gt;Region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:insight-rule:&lt;i&gt;insight-rule-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;p&gt;For more information about ARN format, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncloudwatch.html#amazoncloudwatch-resources-for-iam-policies\&quot;&gt; Resource Types Defined by Amazon CloudWatch&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.&lt;/p&gt; (required)
     * @param tags The list of key-value pairs to associate with the alarm. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETTagResourceAsync(String resourceARN, List<Tag> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETTagResourceValidateBeforeCall(resourceARN, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETUntagResource
     * @param resourceARN &lt;p&gt;The ARN of the CloudWatch resource that you&#39;re removing tags from.&lt;/p&gt; &lt;p&gt;The ARN format of an alarm is &lt;code&gt;arn:aws:cloudwatch:&lt;i&gt;Region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:alarm:&lt;i&gt;alarm-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;p&gt;The ARN format of a Contributor Insights rule is &lt;code&gt;arn:aws:cloudwatch:&lt;i&gt;Region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:insight-rule:&lt;i&gt;insight-rule-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;p&gt;For more information about ARN format, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncloudwatch.html#amazoncloudwatch-resources-for-iam-policies\&quot;&gt; Resource Types Defined by Amazon CloudWatch&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.&lt;/p&gt; (required)
     * @param tagKeys The list of tag keys to remove from the resource. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETUntagResourceCall(String resourceARN, List<String> tagKeys, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=UntagResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resourceARN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ResourceARN", resourceARN));
        }

        if (tagKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "TagKeys", tagKeys));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETUntagResourceValidateBeforeCall(String resourceARN, List<String> tagKeys, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceARN' is set
        if (resourceARN == null) {
            throw new ApiException("Missing the required parameter 'resourceARN' when calling gETUntagResource(Async)");
        }

        // verify the required parameter 'tagKeys' is set
        if (tagKeys == null) {
            throw new ApiException("Missing the required parameter 'tagKeys' when calling gETUntagResource(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETUntagResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETUntagResource(Async)");
        }

        return gETUntagResourceCall(resourceARN, tagKeys, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Removes one or more tags from the specified resource.
     * @param resourceARN &lt;p&gt;The ARN of the CloudWatch resource that you&#39;re removing tags from.&lt;/p&gt; &lt;p&gt;The ARN format of an alarm is &lt;code&gt;arn:aws:cloudwatch:&lt;i&gt;Region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:alarm:&lt;i&gt;alarm-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;p&gt;The ARN format of a Contributor Insights rule is &lt;code&gt;arn:aws:cloudwatch:&lt;i&gt;Region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:insight-rule:&lt;i&gt;insight-rule-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;p&gt;For more information about ARN format, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncloudwatch.html#amazoncloudwatch-resources-for-iam-policies\&quot;&gt; Resource Types Defined by Amazon CloudWatch&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.&lt;/p&gt; (required)
     * @param tagKeys The list of tag keys to remove from the resource. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public Object gETUntagResource(String resourceARN, List<String> tagKeys, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETUntagResourceWithHttpInfo(resourceARN, tagKeys, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes one or more tags from the specified resource.
     * @param resourceARN &lt;p&gt;The ARN of the CloudWatch resource that you&#39;re removing tags from.&lt;/p&gt; &lt;p&gt;The ARN format of an alarm is &lt;code&gt;arn:aws:cloudwatch:&lt;i&gt;Region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:alarm:&lt;i&gt;alarm-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;p&gt;The ARN format of a Contributor Insights rule is &lt;code&gt;arn:aws:cloudwatch:&lt;i&gt;Region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:insight-rule:&lt;i&gt;insight-rule-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;p&gt;For more information about ARN format, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncloudwatch.html#amazoncloudwatch-resources-for-iam-policies\&quot;&gt; Resource Types Defined by Amazon CloudWatch&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.&lt;/p&gt; (required)
     * @param tagKeys The list of tag keys to remove from the resource. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETUntagResourceWithHttpInfo(String resourceARN, List<String> tagKeys, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETUntagResourceValidateBeforeCall(resourceARN, tagKeys, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes one or more tags from the specified resource.
     * @param resourceARN &lt;p&gt;The ARN of the CloudWatch resource that you&#39;re removing tags from.&lt;/p&gt; &lt;p&gt;The ARN format of an alarm is &lt;code&gt;arn:aws:cloudwatch:&lt;i&gt;Region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:alarm:&lt;i&gt;alarm-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;p&gt;The ARN format of a Contributor Insights rule is &lt;code&gt;arn:aws:cloudwatch:&lt;i&gt;Region&lt;/i&gt;:&lt;i&gt;account-id&lt;/i&gt;:insight-rule:&lt;i&gt;insight-rule-name&lt;/i&gt; &lt;/code&gt; &lt;/p&gt; &lt;p&gt;For more information about ARN format, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncloudwatch.html#amazoncloudwatch-resources-for-iam-policies\&quot;&gt; Resource Types Defined by Amazon CloudWatch&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.&lt;/p&gt; (required)
     * @param tagKeys The list of tag keys to remove from the resource. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETUntagResourceAsync(String resourceARN, List<String> tagKeys, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETUntagResourceValidateBeforeCall(resourceARN, tagKeys, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteAlarms
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteAlarmsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteAlarmsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteAlarmsInput deleteAlarmsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteAlarmsInput;

        // create path and map variables
        String localVarPath = "/#Action=DeleteAlarms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteAlarmsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteAlarmsInput deleteAlarmsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteAlarms(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteAlarms(Async)");
        }

        return pOSTDeleteAlarmsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteAlarmsInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified alarms. You can delete up to 100 alarms in one operation. However, this total can include no more than one composite alarm. For example, you could delete 99 metric alarms and one composite alarms with one operation, but you can&#39;t delete two composite alarms with one operation.&lt;/p&gt; &lt;p&gt; If you specify an incorrect alarm name or make any other error in the operation, no alarms are deleted. To confirm that alarms were deleted successfully, you can use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeAlarms.html\&quot;&gt;DescribeAlarms&lt;/a&gt; operation after using &lt;code&gt;DeleteAlarms&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;It is possible to create a loop or cycle of composite alarms, where composite alarm A depends on composite alarm B, and composite alarm B also depends on composite alarm A. In this scenario, you can&#39;t delete any composite alarm that is part of the cycle because there is always still a composite alarm that depends on that alarm that you want to delete.&lt;/p&gt; &lt;p&gt;To get out of such a situation, you must break the cycle by changing the rule of one of the composite alarms in the cycle to remove a dependency that creates the cycle. The simplest change to make to break a cycle is to change the &lt;code&gt;AlarmRule&lt;/code&gt; of one of the alarms to &lt;code&gt;false&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;Additionally, the evaluation of composite alarms stops if CloudWatch detects a cycle in the evaluation path. &lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteAlarmsInput  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFound </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTDeleteAlarms(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteAlarmsInput deleteAlarmsInput) throws ApiException {
        pOSTDeleteAlarmsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteAlarmsInput);
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified alarms. You can delete up to 100 alarms in one operation. However, this total can include no more than one composite alarm. For example, you could delete 99 metric alarms and one composite alarms with one operation, but you can&#39;t delete two composite alarms with one operation.&lt;/p&gt; &lt;p&gt; If you specify an incorrect alarm name or make any other error in the operation, no alarms are deleted. To confirm that alarms were deleted successfully, you can use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeAlarms.html\&quot;&gt;DescribeAlarms&lt;/a&gt; operation after using &lt;code&gt;DeleteAlarms&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;It is possible to create a loop or cycle of composite alarms, where composite alarm A depends on composite alarm B, and composite alarm B also depends on composite alarm A. In this scenario, you can&#39;t delete any composite alarm that is part of the cycle because there is always still a composite alarm that depends on that alarm that you want to delete.&lt;/p&gt; &lt;p&gt;To get out of such a situation, you must break the cycle by changing the rule of one of the composite alarms in the cycle to remove a dependency that creates the cycle. The simplest change to make to break a cycle is to change the &lt;code&gt;AlarmRule&lt;/code&gt; of one of the alarms to &lt;code&gt;false&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;Additionally, the evaluation of composite alarms stops if CloudWatch detects a cycle in the evaluation path. &lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteAlarmsInput  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTDeleteAlarmsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteAlarmsInput deleteAlarmsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteAlarmsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteAlarmsInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified alarms. You can delete up to 100 alarms in one operation. However, this total can include no more than one composite alarm. For example, you could delete 99 metric alarms and one composite alarms with one operation, but you can&#39;t delete two composite alarms with one operation.&lt;/p&gt; &lt;p&gt; If you specify an incorrect alarm name or make any other error in the operation, no alarms are deleted. To confirm that alarms were deleted successfully, you can use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeAlarms.html\&quot;&gt;DescribeAlarms&lt;/a&gt; operation after using &lt;code&gt;DeleteAlarms&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;It is possible to create a loop or cycle of composite alarms, where composite alarm A depends on composite alarm B, and composite alarm B also depends on composite alarm A. In this scenario, you can&#39;t delete any composite alarm that is part of the cycle because there is always still a composite alarm that depends on that alarm that you want to delete.&lt;/p&gt; &lt;p&gt;To get out of such a situation, you must break the cycle by changing the rule of one of the composite alarms in the cycle to remove a dependency that creates the cycle. The simplest change to make to break a cycle is to change the &lt;code&gt;AlarmRule&lt;/code&gt; of one of the alarms to &lt;code&gt;false&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;Additionally, the evaluation of composite alarms stops if CloudWatch detects a cycle in the evaluation path. &lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteAlarmsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteAlarmsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteAlarmsInput deleteAlarmsInput, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteAlarmsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteAlarmsInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteAnomalyDetector
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteAnomalyDetectorInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteAnomalyDetectorCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteAnomalyDetectorInput deleteAnomalyDetectorInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteAnomalyDetectorInput;

        // create path and map variables
        String localVarPath = "/#Action=DeleteAnomalyDetector";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteAnomalyDetectorValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteAnomalyDetectorInput deleteAnomalyDetectorInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteAnomalyDetector(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteAnomalyDetector(Async)");
        }

        return pOSTDeleteAnomalyDetectorCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteAnomalyDetectorInput, _callback);

    }

    /**
     * 
     *  Deletes the specified anomaly detection model from your account. For more information about how to delete an anomaly detection model, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Create_Anomaly_Detection_Alarm.html#Delete_Anomaly_Detection_Model\&quot;&gt;Deleting an anomaly detection model&lt;/a&gt; in the &lt;i&gt;CloudWatch User Guide&lt;/i&gt;. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteAnomalyDetectorInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTDeleteAnomalyDetector(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteAnomalyDetectorInput deleteAnomalyDetectorInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTDeleteAnomalyDetectorWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteAnomalyDetectorInput);
        return localVarResp.getData();
    }

    /**
     * 
     *  Deletes the specified anomaly detection model from your account. For more information about how to delete an anomaly detection model, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Create_Anomaly_Detection_Alarm.html#Delete_Anomaly_Detection_Model\&quot;&gt;Deleting an anomaly detection model&lt;/a&gt; in the &lt;i&gt;CloudWatch User Guide&lt;/i&gt;. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteAnomalyDetectorInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTDeleteAnomalyDetectorWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteAnomalyDetectorInput deleteAnomalyDetectorInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteAnomalyDetectorValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteAnomalyDetectorInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Deletes the specified anomaly detection model from your account. For more information about how to delete an anomaly detection model, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Create_Anomaly_Detection_Alarm.html#Delete_Anomaly_Detection_Model\&quot;&gt;Deleting an anomaly detection model&lt;/a&gt; in the &lt;i&gt;CloudWatch User Guide&lt;/i&gt;. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteAnomalyDetectorInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteAnomalyDetectorAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteAnomalyDetectorInput deleteAnomalyDetectorInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteAnomalyDetectorValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteAnomalyDetectorInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteDashboards
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDashboardsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DashboardNotFoundError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteDashboardsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDashboardsInput deleteDashboardsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteDashboardsInput;

        // create path and map variables
        String localVarPath = "/#Action=DeleteDashboards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteDashboardsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDashboardsInput deleteDashboardsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteDashboards(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteDashboards(Async)");
        }

        return pOSTDeleteDashboardsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDashboardsInput, _callback);

    }

    /**
     * 
     * Deletes all dashboards that you specify. You can specify up to 100 dashboards to delete. If there is an error during this call, no dashboards are deleted.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDashboardsInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DashboardNotFoundError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTDeleteDashboards(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDashboardsInput deleteDashboardsInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTDeleteDashboardsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDashboardsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes all dashboards that you specify. You can specify up to 100 dashboards to delete. If there is an error during this call, no dashboards are deleted.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDashboardsInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DashboardNotFoundError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTDeleteDashboardsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDashboardsInput deleteDashboardsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteDashboardsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDashboardsInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes all dashboards that you specify. You can specify up to 100 dashboards to delete. If there is an error during this call, no dashboards are deleted.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDashboardsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DashboardNotFoundError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteDashboardsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDashboardsInput deleteDashboardsInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteDashboardsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDashboardsInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteInsightRules
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteInsightRulesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteInsightRulesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteInsightRulesInput deleteInsightRulesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteInsightRulesInput;

        // create path and map variables
        String localVarPath = "/#Action=DeleteInsightRules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteInsightRulesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteInsightRulesInput deleteInsightRulesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteInsightRules(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteInsightRules(Async)");
        }

        return pOSTDeleteInsightRulesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteInsightRulesInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Permanently deletes the specified Contributor Insights rules.&lt;/p&gt; &lt;p&gt;If you create a rule, delete it, and then re-create it with the same name, historical data from the first time the rule was created might not be available.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteInsightRulesInput  (optional)
     * @return DeleteInsightRulesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteInsightRulesOutput pOSTDeleteInsightRules(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteInsightRulesInput deleteInsightRulesInput) throws ApiException {
        ApiResponse<DeleteInsightRulesOutput> localVarResp = pOSTDeleteInsightRulesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteInsightRulesInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Permanently deletes the specified Contributor Insights rules.&lt;/p&gt; &lt;p&gt;If you create a rule, delete it, and then re-create it with the same name, historical data from the first time the rule was created might not be available.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteInsightRulesInput  (optional)
     * @return ApiResponse&lt;DeleteInsightRulesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteInsightRulesOutput> pOSTDeleteInsightRulesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteInsightRulesInput deleteInsightRulesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteInsightRulesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteInsightRulesInput, null);
        Type localVarReturnType = new TypeToken<DeleteInsightRulesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Permanently deletes the specified Contributor Insights rules.&lt;/p&gt; &lt;p&gt;If you create a rule, delete it, and then re-create it with the same name, historical data from the first time the rule was created might not be available.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteInsightRulesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteInsightRulesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteInsightRulesInput deleteInsightRulesInput, final ApiCallback<DeleteInsightRulesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteInsightRulesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteInsightRulesInput, _callback);
        Type localVarReturnType = new TypeToken<DeleteInsightRulesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteMetricStream
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteMetricStreamInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteMetricStreamCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteMetricStreamInput deleteMetricStreamInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteMetricStreamInput;

        // create path and map variables
        String localVarPath = "/#Action=DeleteMetricStream";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteMetricStreamValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteMetricStreamInput deleteMetricStreamInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteMetricStream(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteMetricStream(Async)");
        }

        return pOSTDeleteMetricStreamCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteMetricStreamInput, _callback);

    }

    /**
     * 
     * Permanently deletes the metric stream that you specify.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteMetricStreamInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTDeleteMetricStream(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteMetricStreamInput deleteMetricStreamInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTDeleteMetricStreamWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteMetricStreamInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Permanently deletes the metric stream that you specify.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteMetricStreamInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTDeleteMetricStreamWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteMetricStreamInput deleteMetricStreamInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteMetricStreamValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteMetricStreamInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Permanently deletes the metric stream that you specify.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteMetricStreamInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteMetricStreamAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteMetricStreamInput deleteMetricStreamInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteMetricStreamValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteMetricStreamInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeAlarmHistory
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeAlarmHistoryInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeAlarmHistoryCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeAlarmHistoryInput describeAlarmHistoryInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeAlarmHistoryInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeAlarmHistory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeAlarmHistoryValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeAlarmHistoryInput describeAlarmHistoryInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeAlarmHistory(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeAlarmHistory(Async)");
        }

        return pOSTDescribeAlarmHistoryCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeAlarmHistoryInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Retrieves the history for the specified alarm. You can filter the results by date range or item type. If an alarm name is not specified, the histories for either all metric alarms or all composite alarms are returned.&lt;/p&gt; &lt;p&gt;CloudWatch retains the history of an alarm even if you delete the alarm.&lt;/p&gt; &lt;p&gt;To use this operation and return information about a composite alarm, you must be signed on with the &lt;code&gt;cloudwatch:DescribeAlarmHistory&lt;/code&gt; permission that is scoped to &lt;code&gt;*&lt;/code&gt;. You can&#39;t return information about composite alarms if your &lt;code&gt;cloudwatch:DescribeAlarmHistory&lt;/code&gt; permission has a narrower scope.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeAlarmHistoryInput  (optional)
     * @return DescribeAlarmHistoryOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public DescribeAlarmHistoryOutput pOSTDescribeAlarmHistory(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeAlarmHistoryInput describeAlarmHistoryInput) throws ApiException {
        ApiResponse<DescribeAlarmHistoryOutput> localVarResp = pOSTDescribeAlarmHistoryWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeAlarmHistoryInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Retrieves the history for the specified alarm. You can filter the results by date range or item type. If an alarm name is not specified, the histories for either all metric alarms or all composite alarms are returned.&lt;/p&gt; &lt;p&gt;CloudWatch retains the history of an alarm even if you delete the alarm.&lt;/p&gt; &lt;p&gt;To use this operation and return information about a composite alarm, you must be signed on with the &lt;code&gt;cloudwatch:DescribeAlarmHistory&lt;/code&gt; permission that is scoped to &lt;code&gt;*&lt;/code&gt;. You can&#39;t return information about composite alarms if your &lt;code&gt;cloudwatch:DescribeAlarmHistory&lt;/code&gt; permission has a narrower scope.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeAlarmHistoryInput  (optional)
     * @return ApiResponse&lt;DescribeAlarmHistoryOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeAlarmHistoryOutput> pOSTDescribeAlarmHistoryWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeAlarmHistoryInput describeAlarmHistoryInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeAlarmHistoryValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeAlarmHistoryInput, null);
        Type localVarReturnType = new TypeToken<DescribeAlarmHistoryOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Retrieves the history for the specified alarm. You can filter the results by date range or item type. If an alarm name is not specified, the histories for either all metric alarms or all composite alarms are returned.&lt;/p&gt; &lt;p&gt;CloudWatch retains the history of an alarm even if you delete the alarm.&lt;/p&gt; &lt;p&gt;To use this operation and return information about a composite alarm, you must be signed on with the &lt;code&gt;cloudwatch:DescribeAlarmHistory&lt;/code&gt; permission that is scoped to &lt;code&gt;*&lt;/code&gt;. You can&#39;t return information about composite alarms if your &lt;code&gt;cloudwatch:DescribeAlarmHistory&lt;/code&gt; permission has a narrower scope.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeAlarmHistoryInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeAlarmHistoryAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeAlarmHistoryInput describeAlarmHistoryInput, final ApiCallback<DescribeAlarmHistoryOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeAlarmHistoryValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeAlarmHistoryInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeAlarmHistoryOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeAlarms
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeAlarmsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeAlarmsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeAlarmsInput describeAlarmsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeAlarmsInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeAlarms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeAlarmsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeAlarmsInput describeAlarmsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeAlarms(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeAlarms(Async)");
        }

        return pOSTDescribeAlarmsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeAlarmsInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Retrieves the specified alarms. You can filter the results by specifying a prefix for the alarm name, the alarm state, or a prefix for any action.&lt;/p&gt; &lt;p&gt;To use this operation and return information about composite alarms, you must be signed on with the &lt;code&gt;cloudwatch:DescribeAlarms&lt;/code&gt; permission that is scoped to &lt;code&gt;*&lt;/code&gt;. You can&#39;t return information about composite alarms if your &lt;code&gt;cloudwatch:DescribeAlarms&lt;/code&gt; permission has a narrower scope.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeAlarmsInput  (optional)
     * @return DescribeAlarmsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public DescribeAlarmsOutput pOSTDescribeAlarms(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeAlarmsInput describeAlarmsInput) throws ApiException {
        ApiResponse<DescribeAlarmsOutput> localVarResp = pOSTDescribeAlarmsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeAlarmsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Retrieves the specified alarms. You can filter the results by specifying a prefix for the alarm name, the alarm state, or a prefix for any action.&lt;/p&gt; &lt;p&gt;To use this operation and return information about composite alarms, you must be signed on with the &lt;code&gt;cloudwatch:DescribeAlarms&lt;/code&gt; permission that is scoped to &lt;code&gt;*&lt;/code&gt;. You can&#39;t return information about composite alarms if your &lt;code&gt;cloudwatch:DescribeAlarms&lt;/code&gt; permission has a narrower scope.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeAlarmsInput  (optional)
     * @return ApiResponse&lt;DescribeAlarmsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeAlarmsOutput> pOSTDescribeAlarmsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeAlarmsInput describeAlarmsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeAlarmsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeAlarmsInput, null);
        Type localVarReturnType = new TypeToken<DescribeAlarmsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Retrieves the specified alarms. You can filter the results by specifying a prefix for the alarm name, the alarm state, or a prefix for any action.&lt;/p&gt; &lt;p&gt;To use this operation and return information about composite alarms, you must be signed on with the &lt;code&gt;cloudwatch:DescribeAlarms&lt;/code&gt; permission that is scoped to &lt;code&gt;*&lt;/code&gt;. You can&#39;t return information about composite alarms if your &lt;code&gt;cloudwatch:DescribeAlarms&lt;/code&gt; permission has a narrower scope.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeAlarmsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeAlarmsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeAlarmsInput describeAlarmsInput, final ApiCallback<DescribeAlarmsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeAlarmsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeAlarmsInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeAlarmsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeAlarmsForMetric
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeAlarmsForMetricInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeAlarmsForMetricCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeAlarmsForMetricInput describeAlarmsForMetricInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeAlarmsForMetricInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeAlarmsForMetric";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeAlarmsForMetricValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeAlarmsForMetricInput describeAlarmsForMetricInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeAlarmsForMetric(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeAlarmsForMetric(Async)");
        }

        return pOSTDescribeAlarmsForMetricCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeAlarmsForMetricInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Retrieves the alarms for the specified metric. To filter the results, specify a statistic, period, or unit.&lt;/p&gt; &lt;p&gt;This operation retrieves only standard alarms that are based on the specified metric. It does not return alarms based on math expressions that use the specified metric, or composite alarms that use the specified metric.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeAlarmsForMetricInput  (optional)
     * @return DescribeAlarmsForMetricOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DescribeAlarmsForMetricOutput pOSTDescribeAlarmsForMetric(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeAlarmsForMetricInput describeAlarmsForMetricInput) throws ApiException {
        ApiResponse<DescribeAlarmsForMetricOutput> localVarResp = pOSTDescribeAlarmsForMetricWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeAlarmsForMetricInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Retrieves the alarms for the specified metric. To filter the results, specify a statistic, period, or unit.&lt;/p&gt; &lt;p&gt;This operation retrieves only standard alarms that are based on the specified metric. It does not return alarms based on math expressions that use the specified metric, or composite alarms that use the specified metric.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeAlarmsForMetricInput  (optional)
     * @return ApiResponse&lt;DescribeAlarmsForMetricOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeAlarmsForMetricOutput> pOSTDescribeAlarmsForMetricWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeAlarmsForMetricInput describeAlarmsForMetricInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeAlarmsForMetricValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeAlarmsForMetricInput, null);
        Type localVarReturnType = new TypeToken<DescribeAlarmsForMetricOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Retrieves the alarms for the specified metric. To filter the results, specify a statistic, period, or unit.&lt;/p&gt; &lt;p&gt;This operation retrieves only standard alarms that are based on the specified metric. It does not return alarms based on math expressions that use the specified metric, or composite alarms that use the specified metric.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeAlarmsForMetricInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeAlarmsForMetricAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeAlarmsForMetricInput describeAlarmsForMetricInput, final ApiCallback<DescribeAlarmsForMetricOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeAlarmsForMetricValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeAlarmsForMetricInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeAlarmsForMetricOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeAnomalyDetectors
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeAnomalyDetectorsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeAnomalyDetectorsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, DescribeAnomalyDetectorsInput describeAnomalyDetectorsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeAnomalyDetectorsInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeAnomalyDetectors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeAnomalyDetectorsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, DescribeAnomalyDetectorsInput describeAnomalyDetectorsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeAnomalyDetectors(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeAnomalyDetectors(Async)");
        }

        return pOSTDescribeAnomalyDetectorsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, describeAnomalyDetectorsInput, _callback);

    }

    /**
     * 
     * Lists the anomaly detection models that you have created in your account. For single metric anomaly detectors, you can list all of the models in your account or filter the results to only the models that are related to a certain namespace, metric name, or metric dimension. For metric math anomaly detectors, you can list them by adding &lt;code&gt;METRIC_MATH&lt;/code&gt; to the &lt;code&gt;AnomalyDetectorTypes&lt;/code&gt; array. This will return all metric math anomaly detectors in your account.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeAnomalyDetectorsInput  (optional)
     * @return DescribeAnomalyDetectorsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeAnomalyDetectorsOutput pOSTDescribeAnomalyDetectors(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, DescribeAnomalyDetectorsInput describeAnomalyDetectorsInput) throws ApiException {
        ApiResponse<DescribeAnomalyDetectorsOutput> localVarResp = pOSTDescribeAnomalyDetectorsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, describeAnomalyDetectorsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the anomaly detection models that you have created in your account. For single metric anomaly detectors, you can list all of the models in your account or filter the results to only the models that are related to a certain namespace, metric name, or metric dimension. For metric math anomaly detectors, you can list them by adding &lt;code&gt;METRIC_MATH&lt;/code&gt; to the &lt;code&gt;AnomalyDetectorTypes&lt;/code&gt; array. This will return all metric math anomaly detectors in your account.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeAnomalyDetectorsInput  (optional)
     * @return ApiResponse&lt;DescribeAnomalyDetectorsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeAnomalyDetectorsOutput> pOSTDescribeAnomalyDetectorsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, DescribeAnomalyDetectorsInput describeAnomalyDetectorsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeAnomalyDetectorsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, describeAnomalyDetectorsInput, null);
        Type localVarReturnType = new TypeToken<DescribeAnomalyDetectorsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the anomaly detection models that you have created in your account. For single metric anomaly detectors, you can list all of the models in your account or filter the results to only the models that are related to a certain namespace, metric name, or metric dimension. For metric math anomaly detectors, you can list them by adding &lt;code&gt;METRIC_MATH&lt;/code&gt; to the &lt;code&gt;AnomalyDetectorTypes&lt;/code&gt; array. This will return all metric math anomaly detectors in your account.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeAnomalyDetectorsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeAnomalyDetectorsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, DescribeAnomalyDetectorsInput describeAnomalyDetectorsInput, final ApiCallback<DescribeAnomalyDetectorsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeAnomalyDetectorsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, describeAnomalyDetectorsInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeAnomalyDetectorsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeInsightRules
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeInsightRulesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeInsightRulesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, DescribeInsightRulesInput describeInsightRulesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeInsightRulesInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeInsightRules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeInsightRulesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, DescribeInsightRulesInput describeInsightRulesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeInsightRules(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeInsightRules(Async)");
        }

        return pOSTDescribeInsightRulesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, describeInsightRulesInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns a list of all the Contributor Insights rules in your account.&lt;/p&gt; &lt;p&gt;For more information about Contributor Insights, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights.html\&quot;&gt;Using Contributor Insights to Analyze High-Cardinality Data&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeInsightRulesInput  (optional)
     * @return DescribeInsightRulesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public DescribeInsightRulesOutput pOSTDescribeInsightRules(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, DescribeInsightRulesInput describeInsightRulesInput) throws ApiException {
        ApiResponse<DescribeInsightRulesOutput> localVarResp = pOSTDescribeInsightRulesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, describeInsightRulesInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns a list of all the Contributor Insights rules in your account.&lt;/p&gt; &lt;p&gt;For more information about Contributor Insights, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights.html\&quot;&gt;Using Contributor Insights to Analyze High-Cardinality Data&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeInsightRulesInput  (optional)
     * @return ApiResponse&lt;DescribeInsightRulesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeInsightRulesOutput> pOSTDescribeInsightRulesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, DescribeInsightRulesInput describeInsightRulesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeInsightRulesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, describeInsightRulesInput, null);
        Type localVarReturnType = new TypeToken<DescribeInsightRulesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns a list of all the Contributor Insights rules in your account.&lt;/p&gt; &lt;p&gt;For more information about Contributor Insights, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights.html\&quot;&gt;Using Contributor Insights to Analyze High-Cardinality Data&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeInsightRulesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeInsightRulesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, DescribeInsightRulesInput describeInsightRulesInput, final ApiCallback<DescribeInsightRulesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeInsightRulesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, describeInsightRulesInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeInsightRulesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDisableAlarmActions
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param disableAlarmActionsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDisableAlarmActionsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DisableAlarmActionsInput disableAlarmActionsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disableAlarmActionsInput;

        // create path and map variables
        String localVarPath = "/#Action=DisableAlarmActions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDisableAlarmActionsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DisableAlarmActionsInput disableAlarmActionsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDisableAlarmActions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDisableAlarmActions(Async)");
        }

        return pOSTDisableAlarmActionsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, disableAlarmActionsInput, _callback);

    }

    /**
     * 
     * Disables the actions for the specified alarms. When an alarm&#39;s actions are disabled, the alarm actions do not execute when the alarm state changes.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param disableAlarmActionsInput  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTDisableAlarmActions(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DisableAlarmActionsInput disableAlarmActionsInput) throws ApiException {
        pOSTDisableAlarmActionsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, disableAlarmActionsInput);
    }

    /**
     * 
     * Disables the actions for the specified alarms. When an alarm&#39;s actions are disabled, the alarm actions do not execute when the alarm state changes.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param disableAlarmActionsInput  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTDisableAlarmActionsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DisableAlarmActionsInput disableAlarmActionsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDisableAlarmActionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, disableAlarmActionsInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Disables the actions for the specified alarms. When an alarm&#39;s actions are disabled, the alarm actions do not execute when the alarm state changes.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param disableAlarmActionsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDisableAlarmActionsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DisableAlarmActionsInput disableAlarmActionsInput, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDisableAlarmActionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, disableAlarmActionsInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDisableInsightRules
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param disableInsightRulesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDisableInsightRulesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DisableInsightRulesInput disableInsightRulesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disableInsightRulesInput;

        // create path and map variables
        String localVarPath = "/#Action=DisableInsightRules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDisableInsightRulesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DisableInsightRulesInput disableInsightRulesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDisableInsightRules(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDisableInsightRules(Async)");
        }

        return pOSTDisableInsightRulesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, disableInsightRulesInput, _callback);

    }

    /**
     * 
     * Disables the specified Contributor Insights rules. When rules are disabled, they do not analyze log groups and do not incur costs.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param disableInsightRulesInput  (optional)
     * @return DisableInsightRulesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public DisableInsightRulesOutput pOSTDisableInsightRules(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DisableInsightRulesInput disableInsightRulesInput) throws ApiException {
        ApiResponse<DisableInsightRulesOutput> localVarResp = pOSTDisableInsightRulesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, disableInsightRulesInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Disables the specified Contributor Insights rules. When rules are disabled, they do not analyze log groups and do not incur costs.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param disableInsightRulesInput  (optional)
     * @return ApiResponse&lt;DisableInsightRulesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DisableInsightRulesOutput> pOSTDisableInsightRulesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DisableInsightRulesInput disableInsightRulesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDisableInsightRulesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, disableInsightRulesInput, null);
        Type localVarReturnType = new TypeToken<DisableInsightRulesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Disables the specified Contributor Insights rules. When rules are disabled, they do not analyze log groups and do not incur costs.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param disableInsightRulesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDisableInsightRulesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DisableInsightRulesInput disableInsightRulesInput, final ApiCallback<DisableInsightRulesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDisableInsightRulesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, disableInsightRulesInput, _callback);
        Type localVarReturnType = new TypeToken<DisableInsightRulesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTEnableAlarmActions
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param enableAlarmActionsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTEnableAlarmActionsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, EnableAlarmActionsInput enableAlarmActionsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enableAlarmActionsInput;

        // create path and map variables
        String localVarPath = "/#Action=EnableAlarmActions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTEnableAlarmActionsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, EnableAlarmActionsInput enableAlarmActionsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTEnableAlarmActions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTEnableAlarmActions(Async)");
        }

        return pOSTEnableAlarmActionsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, enableAlarmActionsInput, _callback);

    }

    /**
     * 
     * Enables the actions for the specified alarms.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param enableAlarmActionsInput  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTEnableAlarmActions(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, EnableAlarmActionsInput enableAlarmActionsInput) throws ApiException {
        pOSTEnableAlarmActionsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, enableAlarmActionsInput);
    }

    /**
     * 
     * Enables the actions for the specified alarms.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param enableAlarmActionsInput  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTEnableAlarmActionsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, EnableAlarmActionsInput enableAlarmActionsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTEnableAlarmActionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, enableAlarmActionsInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Enables the actions for the specified alarms.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param enableAlarmActionsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTEnableAlarmActionsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, EnableAlarmActionsInput enableAlarmActionsInput, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTEnableAlarmActionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, enableAlarmActionsInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTEnableInsightRules
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param enableInsightRulesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTEnableInsightRulesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, EnableInsightRulesInput enableInsightRulesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enableInsightRulesInput;

        // create path and map variables
        String localVarPath = "/#Action=EnableInsightRules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTEnableInsightRulesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, EnableInsightRulesInput enableInsightRulesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTEnableInsightRules(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTEnableInsightRules(Async)");
        }

        return pOSTEnableInsightRulesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, enableInsightRulesInput, _callback);

    }

    /**
     * 
     * Enables the specified Contributor Insights rules. When rules are enabled, they immediately begin analyzing log data.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param enableInsightRulesInput  (optional)
     * @return EnableInsightRulesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public EnableInsightRulesOutput pOSTEnableInsightRules(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, EnableInsightRulesInput enableInsightRulesInput) throws ApiException {
        ApiResponse<EnableInsightRulesOutput> localVarResp = pOSTEnableInsightRulesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, enableInsightRulesInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Enables the specified Contributor Insights rules. When rules are enabled, they immediately begin analyzing log data.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param enableInsightRulesInput  (optional)
     * @return ApiResponse&lt;EnableInsightRulesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnableInsightRulesOutput> pOSTEnableInsightRulesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, EnableInsightRulesInput enableInsightRulesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTEnableInsightRulesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, enableInsightRulesInput, null);
        Type localVarReturnType = new TypeToken<EnableInsightRulesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Enables the specified Contributor Insights rules. When rules are enabled, they immediately begin analyzing log data.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param enableInsightRulesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTEnableInsightRulesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, EnableInsightRulesInput enableInsightRulesInput, final ApiCallback<EnableInsightRulesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTEnableInsightRulesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, enableInsightRulesInput, _callback);
        Type localVarReturnType = new TypeToken<EnableInsightRulesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTGetDashboard
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getDashboardInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DashboardNotFoundError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetDashboardCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetDashboardInput getDashboardInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getDashboardInput;

        // create path and map variables
        String localVarPath = "/#Action=GetDashboard";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTGetDashboardValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetDashboardInput getDashboardInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTGetDashboard(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTGetDashboard(Async)");
        }

        return pOSTGetDashboardCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getDashboardInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Displays the details of the dashboard that you specify.&lt;/p&gt; &lt;p&gt;To copy an existing dashboard, use &lt;code&gt;GetDashboard&lt;/code&gt;, and then use the data returned within &lt;code&gt;DashboardBody&lt;/code&gt; as the template for the new dashboard when you call &lt;code&gt;PutDashboard&lt;/code&gt; to create the copy.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getDashboardInput  (optional)
     * @return GetDashboardOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DashboardNotFoundError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public GetDashboardOutput pOSTGetDashboard(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetDashboardInput getDashboardInput) throws ApiException {
        ApiResponse<GetDashboardOutput> localVarResp = pOSTGetDashboardWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getDashboardInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Displays the details of the dashboard that you specify.&lt;/p&gt; &lt;p&gt;To copy an existing dashboard, use &lt;code&gt;GetDashboard&lt;/code&gt;, and then use the data returned within &lt;code&gt;DashboardBody&lt;/code&gt; as the template for the new dashboard when you call &lt;code&gt;PutDashboard&lt;/code&gt; to create the copy.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getDashboardInput  (optional)
     * @return ApiResponse&lt;GetDashboardOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DashboardNotFoundError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDashboardOutput> pOSTGetDashboardWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetDashboardInput getDashboardInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTGetDashboardValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getDashboardInput, null);
        Type localVarReturnType = new TypeToken<GetDashboardOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Displays the details of the dashboard that you specify.&lt;/p&gt; &lt;p&gt;To copy an existing dashboard, use &lt;code&gt;GetDashboard&lt;/code&gt;, and then use the data returned within &lt;code&gt;DashboardBody&lt;/code&gt; as the template for the new dashboard when you call &lt;code&gt;PutDashboard&lt;/code&gt; to create the copy.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getDashboardInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DashboardNotFoundError </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetDashboardAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetDashboardInput getDashboardInput, final ApiCallback<GetDashboardOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTGetDashboardValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getDashboardInput, _callback);
        Type localVarReturnType = new TypeToken<GetDashboardOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTGetInsightRuleReport
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getInsightRuleReportInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetInsightRuleReportCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetInsightRuleReportInput getInsightRuleReportInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getInsightRuleReportInput;

        // create path and map variables
        String localVarPath = "/#Action=GetInsightRuleReport";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTGetInsightRuleReportValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetInsightRuleReportInput getInsightRuleReportInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTGetInsightRuleReport(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTGetInsightRuleReport(Async)");
        }

        return pOSTGetInsightRuleReportCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getInsightRuleReportInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;This operation returns the time series data collected by a Contributor Insights rule. The data includes the identity and number of contributors to the log group.&lt;/p&gt; &lt;p&gt;You can also optionally return one or more statistics about each data point in the time series. These statistics can include the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UniqueContributors&lt;/code&gt; -- the number of unique contributors for each data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MaxContributorValue&lt;/code&gt; -- the value of the top contributor for each data point. The identity of the contributor might change for each data point in the graph.&lt;/p&gt; &lt;p&gt;If this rule aggregates by COUNT, the top contributor for each data point is the contributor with the most occurrences in that period. If the rule aggregates by SUM, the top contributor is the contributor with the highest sum in the log field specified by the rule&#39;s &lt;code&gt;Value&lt;/code&gt;, during that period.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SampleCount&lt;/code&gt; -- the number of data points matched by the rule.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Sum&lt;/code&gt; -- the sum of the values from all contributors during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Minimum&lt;/code&gt; -- the minimum value from a single observation during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Maximum&lt;/code&gt; -- the maximum value from a single observation during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Average&lt;/code&gt; -- the average value from all contributors during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getInsightRuleReportInput  (optional)
     * @return GetInsightRuleReportOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public GetInsightRuleReportOutput pOSTGetInsightRuleReport(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetInsightRuleReportInput getInsightRuleReportInput) throws ApiException {
        ApiResponse<GetInsightRuleReportOutput> localVarResp = pOSTGetInsightRuleReportWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getInsightRuleReportInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;This operation returns the time series data collected by a Contributor Insights rule. The data includes the identity and number of contributors to the log group.&lt;/p&gt; &lt;p&gt;You can also optionally return one or more statistics about each data point in the time series. These statistics can include the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UniqueContributors&lt;/code&gt; -- the number of unique contributors for each data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MaxContributorValue&lt;/code&gt; -- the value of the top contributor for each data point. The identity of the contributor might change for each data point in the graph.&lt;/p&gt; &lt;p&gt;If this rule aggregates by COUNT, the top contributor for each data point is the contributor with the most occurrences in that period. If the rule aggregates by SUM, the top contributor is the contributor with the highest sum in the log field specified by the rule&#39;s &lt;code&gt;Value&lt;/code&gt;, during that period.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SampleCount&lt;/code&gt; -- the number of data points matched by the rule.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Sum&lt;/code&gt; -- the sum of the values from all contributors during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Minimum&lt;/code&gt; -- the minimum value from a single observation during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Maximum&lt;/code&gt; -- the maximum value from a single observation during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Average&lt;/code&gt; -- the average value from all contributors during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getInsightRuleReportInput  (optional)
     * @return ApiResponse&lt;GetInsightRuleReportOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetInsightRuleReportOutput> pOSTGetInsightRuleReportWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetInsightRuleReportInput getInsightRuleReportInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTGetInsightRuleReportValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getInsightRuleReportInput, null);
        Type localVarReturnType = new TypeToken<GetInsightRuleReportOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;This operation returns the time series data collected by a Contributor Insights rule. The data includes the identity and number of contributors to the log group.&lt;/p&gt; &lt;p&gt;You can also optionally return one or more statistics about each data point in the time series. These statistics can include the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UniqueContributors&lt;/code&gt; -- the number of unique contributors for each data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MaxContributorValue&lt;/code&gt; -- the value of the top contributor for each data point. The identity of the contributor might change for each data point in the graph.&lt;/p&gt; &lt;p&gt;If this rule aggregates by COUNT, the top contributor for each data point is the contributor with the most occurrences in that period. If the rule aggregates by SUM, the top contributor is the contributor with the highest sum in the log field specified by the rule&#39;s &lt;code&gt;Value&lt;/code&gt;, during that period.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SampleCount&lt;/code&gt; -- the number of data points matched by the rule.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Sum&lt;/code&gt; -- the sum of the values from all contributors during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Minimum&lt;/code&gt; -- the minimum value from a single observation during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Maximum&lt;/code&gt; -- the maximum value from a single observation during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Average&lt;/code&gt; -- the average value from all contributors during the time period represented by that data point.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getInsightRuleReportInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetInsightRuleReportAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetInsightRuleReportInput getInsightRuleReportInput, final ApiCallback<GetInsightRuleReportOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTGetInsightRuleReportValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getInsightRuleReportInput, _callback);
        Type localVarReturnType = new TypeToken<GetInsightRuleReportOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTGetMetricData
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxDatapoints Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param getMetricDataInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetMetricDataCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxDatapoints, String nextToken, GetMetricDataInput getMetricDataInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getMetricDataInput;

        // create path and map variables
        String localVarPath = "/#Action=GetMetricData";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxDatapoints != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxDatapoints", maxDatapoints));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTGetMetricDataValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxDatapoints, String nextToken, GetMetricDataInput getMetricDataInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTGetMetricData(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTGetMetricData(Async)");
        }

        return pOSTGetMetricDataCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxDatapoints, nextToken, getMetricDataInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;You can use the &lt;code&gt;GetMetricData&lt;/code&gt; API to retrieve CloudWatch metric values. The operation can also include a CloudWatch Metrics Insights query, and one or more metric math functions.&lt;/p&gt; &lt;p&gt;A &lt;code&gt;GetMetricData&lt;/code&gt; operation that does not include a query can retrieve as many as 500 different metrics in a single request, with a total of as many as 100,800 data points. You can also optionally perform metric math expressions on the values of the returned statistics, to create new time series that represent new insights into your data. For example, using Lambda metrics, you could divide the Errors metric by the Invocations metric to get an error rate time series. For more information about metric math expressions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax\&quot;&gt;Metric Math Syntax and Functions&lt;/a&gt; in the &lt;i&gt;Amazon CloudWatch User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you include a Metrics Insights query, each &lt;code&gt;GetMetricData&lt;/code&gt; operation can include only one query. But the same &lt;code&gt;GetMetricData&lt;/code&gt; operation can also retrieve other metrics. Metrics Insights queries can query only the most recent three hours of metric data. For more information about Metrics Insights, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/query_with_cloudwatch-metrics-insights.html\&quot;&gt;Query your metrics with CloudWatch Metrics Insights&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Calls to the &lt;code&gt;GetMetricData&lt;/code&gt; API have a different pricing structure than calls to &lt;code&gt;GetMetricStatistics&lt;/code&gt;. For more information about pricing, see &lt;a href&#x3D;\&quot;https://aws.amazon.com/cloudwatch/pricing/\&quot;&gt;Amazon CloudWatch Pricing&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Amazon CloudWatch retains metric data as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Data points with a period of less than 60 seconds are available for 3 hours. These data points are high-resolution metrics and are available only for custom metrics that have been defined with a &lt;code&gt;StorageResolution&lt;/code&gt; of 1.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data points with a period of 60 seconds (1-minute) are available for 15 days.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data points with a period of 300 seconds (5-minute) are available for 63 days.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data points with a period of 3600 seconds (1 hour) are available for 455 days (15 months).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Data points that are initially published with a shorter period are aggregated together for long-term storage. For example, if you collect data using a period of 1 minute, the data remains available for 15 days with 1-minute resolution. After 15 days, this data is still available, but is aggregated and retrievable only with a resolution of 5 minutes. After 63 days, the data is further aggregated and is available with a resolution of 1 hour.&lt;/p&gt; &lt;p&gt;If you omit &lt;code&gt;Unit&lt;/code&gt; in your request, all data that was collected with any unit is returned, along with the corresponding units that were specified when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified. If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Using Metrics Insights queries with metric math&lt;/b&gt; &lt;/p&gt; &lt;p&gt;You can&#39;t mix a Metric Insights query and metric math syntax in the same expression, but you can reference results from a Metrics Insights query within other Metric math expressions. A Metrics Insights query without a &lt;b&gt;GROUP BY&lt;/b&gt; clause returns a single time-series (TS), and can be used as input for a metric math expression that expects a single time series. A Metrics Insights query with a &lt;b&gt;GROUP BY&lt;/b&gt; clause returns an array of time-series (TS[]), and can be used as input for a metric math expression that expects an array of time series. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxDatapoints Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param getMetricDataInput  (optional)
     * @return GetMetricDataOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public GetMetricDataOutput pOSTGetMetricData(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxDatapoints, String nextToken, GetMetricDataInput getMetricDataInput) throws ApiException {
        ApiResponse<GetMetricDataOutput> localVarResp = pOSTGetMetricDataWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxDatapoints, nextToken, getMetricDataInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;You can use the &lt;code&gt;GetMetricData&lt;/code&gt; API to retrieve CloudWatch metric values. The operation can also include a CloudWatch Metrics Insights query, and one or more metric math functions.&lt;/p&gt; &lt;p&gt;A &lt;code&gt;GetMetricData&lt;/code&gt; operation that does not include a query can retrieve as many as 500 different metrics in a single request, with a total of as many as 100,800 data points. You can also optionally perform metric math expressions on the values of the returned statistics, to create new time series that represent new insights into your data. For example, using Lambda metrics, you could divide the Errors metric by the Invocations metric to get an error rate time series. For more information about metric math expressions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax\&quot;&gt;Metric Math Syntax and Functions&lt;/a&gt; in the &lt;i&gt;Amazon CloudWatch User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you include a Metrics Insights query, each &lt;code&gt;GetMetricData&lt;/code&gt; operation can include only one query. But the same &lt;code&gt;GetMetricData&lt;/code&gt; operation can also retrieve other metrics. Metrics Insights queries can query only the most recent three hours of metric data. For more information about Metrics Insights, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/query_with_cloudwatch-metrics-insights.html\&quot;&gt;Query your metrics with CloudWatch Metrics Insights&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Calls to the &lt;code&gt;GetMetricData&lt;/code&gt; API have a different pricing structure than calls to &lt;code&gt;GetMetricStatistics&lt;/code&gt;. For more information about pricing, see &lt;a href&#x3D;\&quot;https://aws.amazon.com/cloudwatch/pricing/\&quot;&gt;Amazon CloudWatch Pricing&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Amazon CloudWatch retains metric data as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Data points with a period of less than 60 seconds are available for 3 hours. These data points are high-resolution metrics and are available only for custom metrics that have been defined with a &lt;code&gt;StorageResolution&lt;/code&gt; of 1.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data points with a period of 60 seconds (1-minute) are available for 15 days.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data points with a period of 300 seconds (5-minute) are available for 63 days.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data points with a period of 3600 seconds (1 hour) are available for 455 days (15 months).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Data points that are initially published with a shorter period are aggregated together for long-term storage. For example, if you collect data using a period of 1 minute, the data remains available for 15 days with 1-minute resolution. After 15 days, this data is still available, but is aggregated and retrievable only with a resolution of 5 minutes. After 63 days, the data is further aggregated and is available with a resolution of 1 hour.&lt;/p&gt; &lt;p&gt;If you omit &lt;code&gt;Unit&lt;/code&gt; in your request, all data that was collected with any unit is returned, along with the corresponding units that were specified when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified. If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Using Metrics Insights queries with metric math&lt;/b&gt; &lt;/p&gt; &lt;p&gt;You can&#39;t mix a Metric Insights query and metric math syntax in the same expression, but you can reference results from a Metrics Insights query within other Metric math expressions. A Metrics Insights query without a &lt;b&gt;GROUP BY&lt;/b&gt; clause returns a single time-series (TS), and can be used as input for a metric math expression that expects a single time series. A Metrics Insights query with a &lt;b&gt;GROUP BY&lt;/b&gt; clause returns an array of time-series (TS[]), and can be used as input for a metric math expression that expects an array of time series. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxDatapoints Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param getMetricDataInput  (optional)
     * @return ApiResponse&lt;GetMetricDataOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMetricDataOutput> pOSTGetMetricDataWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxDatapoints, String nextToken, GetMetricDataInput getMetricDataInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTGetMetricDataValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxDatapoints, nextToken, getMetricDataInput, null);
        Type localVarReturnType = new TypeToken<GetMetricDataOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;You can use the &lt;code&gt;GetMetricData&lt;/code&gt; API to retrieve CloudWatch metric values. The operation can also include a CloudWatch Metrics Insights query, and one or more metric math functions.&lt;/p&gt; &lt;p&gt;A &lt;code&gt;GetMetricData&lt;/code&gt; operation that does not include a query can retrieve as many as 500 different metrics in a single request, with a total of as many as 100,800 data points. You can also optionally perform metric math expressions on the values of the returned statistics, to create new time series that represent new insights into your data. For example, using Lambda metrics, you could divide the Errors metric by the Invocations metric to get an error rate time series. For more information about metric math expressions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax\&quot;&gt;Metric Math Syntax and Functions&lt;/a&gt; in the &lt;i&gt;Amazon CloudWatch User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you include a Metrics Insights query, each &lt;code&gt;GetMetricData&lt;/code&gt; operation can include only one query. But the same &lt;code&gt;GetMetricData&lt;/code&gt; operation can also retrieve other metrics. Metrics Insights queries can query only the most recent three hours of metric data. For more information about Metrics Insights, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/query_with_cloudwatch-metrics-insights.html\&quot;&gt;Query your metrics with CloudWatch Metrics Insights&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Calls to the &lt;code&gt;GetMetricData&lt;/code&gt; API have a different pricing structure than calls to &lt;code&gt;GetMetricStatistics&lt;/code&gt;. For more information about pricing, see &lt;a href&#x3D;\&quot;https://aws.amazon.com/cloudwatch/pricing/\&quot;&gt;Amazon CloudWatch Pricing&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Amazon CloudWatch retains metric data as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Data points with a period of less than 60 seconds are available for 3 hours. These data points are high-resolution metrics and are available only for custom metrics that have been defined with a &lt;code&gt;StorageResolution&lt;/code&gt; of 1.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data points with a period of 60 seconds (1-minute) are available for 15 days.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data points with a period of 300 seconds (5-minute) are available for 63 days.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data points with a period of 3600 seconds (1 hour) are available for 455 days (15 months).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Data points that are initially published with a shorter period are aggregated together for long-term storage. For example, if you collect data using a period of 1 minute, the data remains available for 15 days with 1-minute resolution. After 15 days, this data is still available, but is aggregated and retrievable only with a resolution of 5 minutes. After 63 days, the data is further aggregated and is available with a resolution of 1 hour.&lt;/p&gt; &lt;p&gt;If you omit &lt;code&gt;Unit&lt;/code&gt; in your request, all data that was collected with any unit is returned, along with the corresponding units that were specified when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified. If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Using Metrics Insights queries with metric math&lt;/b&gt; &lt;/p&gt; &lt;p&gt;You can&#39;t mix a Metric Insights query and metric math syntax in the same expression, but you can reference results from a Metrics Insights query within other Metric math expressions. A Metrics Insights query without a &lt;b&gt;GROUP BY&lt;/b&gt; clause returns a single time-series (TS), and can be used as input for a metric math expression that expects a single time series. A Metrics Insights query with a &lt;b&gt;GROUP BY&lt;/b&gt; clause returns an array of time-series (TS[]), and can be used as input for a metric math expression that expects an array of time series. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxDatapoints Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param getMetricDataInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetMetricDataAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxDatapoints, String nextToken, GetMetricDataInput getMetricDataInput, final ApiCallback<GetMetricDataOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTGetMetricDataValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxDatapoints, nextToken, getMetricDataInput, _callback);
        Type localVarReturnType = new TypeToken<GetMetricDataOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTGetMetricStatistics
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getMetricStatisticsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetMetricStatisticsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetMetricStatisticsInput getMetricStatisticsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getMetricStatisticsInput;

        // create path and map variables
        String localVarPath = "/#Action=GetMetricStatistics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTGetMetricStatisticsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetMetricStatisticsInput getMetricStatisticsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTGetMetricStatistics(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTGetMetricStatistics(Async)");
        }

        return pOSTGetMetricStatisticsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getMetricStatisticsInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets statistics for the specified metric.&lt;/p&gt; &lt;p&gt;The maximum number of data points returned from a single call is 1,440. If you request more than 1,440 data points, CloudWatch returns an error. To reduce the number of data points, you can narrow the specified time range and make multiple requests across adjacent time ranges, or you can increase the specified period. Data points are not returned in chronological order.&lt;/p&gt; &lt;p&gt;CloudWatch aggregates data points based on the length of the period that you specify. For example, if you request statistics with a one-hour period, CloudWatch aggregates all data points with time stamps that fall within each one-hour period. Therefore, the number of values aggregated by CloudWatch is larger than the number of data points returned.&lt;/p&gt; &lt;p&gt;CloudWatch needs raw data points to calculate percentile statistics. If you publish data using a statistic set instead, you can only retrieve percentile statistics for this data if one of the following conditions is true:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The SampleCount value of the statistic set is 1.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Min and the Max values of the statistic set are equal.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Percentile statistics are not available for metrics when any of the metric values are negative numbers.&lt;/p&gt; &lt;p&gt;Amazon CloudWatch retains metric data as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Data points with a period of less than 60 seconds are available for 3 hours. These data points are high-resolution metrics and are available only for custom metrics that have been defined with a &lt;code&gt;StorageResolution&lt;/code&gt; of 1.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data points with a period of 60 seconds (1-minute) are available for 15 days.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data points with a period of 300 seconds (5-minute) are available for 63 days.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data points with a period of 3600 seconds (1 hour) are available for 455 days (15 months).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Data points that are initially published with a shorter period are aggregated together for long-term storage. For example, if you collect data using a period of 1 minute, the data remains available for 15 days with 1-minute resolution. After 15 days, this data is still available, but is aggregated and retrievable only with a resolution of 5 minutes. After 63 days, the data is further aggregated and is available with a resolution of 1 hour.&lt;/p&gt; &lt;p&gt;CloudWatch started retaining 5-minute and 1-hour metric data as of July 9, 2016.&lt;/p&gt; &lt;p&gt;For information about metrics and dimensions supported by Amazon Web Services services, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CW_Support_For_AWS.html\&quot;&gt;Amazon CloudWatch Metrics and Dimensions Reference&lt;/a&gt; in the &lt;i&gt;Amazon CloudWatch User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getMetricStatisticsInput  (optional)
     * @return GetMetricStatisticsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public GetMetricStatisticsOutput pOSTGetMetricStatistics(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetMetricStatisticsInput getMetricStatisticsInput) throws ApiException {
        ApiResponse<GetMetricStatisticsOutput> localVarResp = pOSTGetMetricStatisticsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getMetricStatisticsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets statistics for the specified metric.&lt;/p&gt; &lt;p&gt;The maximum number of data points returned from a single call is 1,440. If you request more than 1,440 data points, CloudWatch returns an error. To reduce the number of data points, you can narrow the specified time range and make multiple requests across adjacent time ranges, or you can increase the specified period. Data points are not returned in chronological order.&lt;/p&gt; &lt;p&gt;CloudWatch aggregates data points based on the length of the period that you specify. For example, if you request statistics with a one-hour period, CloudWatch aggregates all data points with time stamps that fall within each one-hour period. Therefore, the number of values aggregated by CloudWatch is larger than the number of data points returned.&lt;/p&gt; &lt;p&gt;CloudWatch needs raw data points to calculate percentile statistics. If you publish data using a statistic set instead, you can only retrieve percentile statistics for this data if one of the following conditions is true:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The SampleCount value of the statistic set is 1.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Min and the Max values of the statistic set are equal.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Percentile statistics are not available for metrics when any of the metric values are negative numbers.&lt;/p&gt; &lt;p&gt;Amazon CloudWatch retains metric data as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Data points with a period of less than 60 seconds are available for 3 hours. These data points are high-resolution metrics and are available only for custom metrics that have been defined with a &lt;code&gt;StorageResolution&lt;/code&gt; of 1.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data points with a period of 60 seconds (1-minute) are available for 15 days.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data points with a period of 300 seconds (5-minute) are available for 63 days.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data points with a period of 3600 seconds (1 hour) are available for 455 days (15 months).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Data points that are initially published with a shorter period are aggregated together for long-term storage. For example, if you collect data using a period of 1 minute, the data remains available for 15 days with 1-minute resolution. After 15 days, this data is still available, but is aggregated and retrievable only with a resolution of 5 minutes. After 63 days, the data is further aggregated and is available with a resolution of 1 hour.&lt;/p&gt; &lt;p&gt;CloudWatch started retaining 5-minute and 1-hour metric data as of July 9, 2016.&lt;/p&gt; &lt;p&gt;For information about metrics and dimensions supported by Amazon Web Services services, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CW_Support_For_AWS.html\&quot;&gt;Amazon CloudWatch Metrics and Dimensions Reference&lt;/a&gt; in the &lt;i&gt;Amazon CloudWatch User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getMetricStatisticsInput  (optional)
     * @return ApiResponse&lt;GetMetricStatisticsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMetricStatisticsOutput> pOSTGetMetricStatisticsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetMetricStatisticsInput getMetricStatisticsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTGetMetricStatisticsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getMetricStatisticsInput, null);
        Type localVarReturnType = new TypeToken<GetMetricStatisticsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets statistics for the specified metric.&lt;/p&gt; &lt;p&gt;The maximum number of data points returned from a single call is 1,440. If you request more than 1,440 data points, CloudWatch returns an error. To reduce the number of data points, you can narrow the specified time range and make multiple requests across adjacent time ranges, or you can increase the specified period. Data points are not returned in chronological order.&lt;/p&gt; &lt;p&gt;CloudWatch aggregates data points based on the length of the period that you specify. For example, if you request statistics with a one-hour period, CloudWatch aggregates all data points with time stamps that fall within each one-hour period. Therefore, the number of values aggregated by CloudWatch is larger than the number of data points returned.&lt;/p&gt; &lt;p&gt;CloudWatch needs raw data points to calculate percentile statistics. If you publish data using a statistic set instead, you can only retrieve percentile statistics for this data if one of the following conditions is true:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The SampleCount value of the statistic set is 1.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Min and the Max values of the statistic set are equal.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Percentile statistics are not available for metrics when any of the metric values are negative numbers.&lt;/p&gt; &lt;p&gt;Amazon CloudWatch retains metric data as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Data points with a period of less than 60 seconds are available for 3 hours. These data points are high-resolution metrics and are available only for custom metrics that have been defined with a &lt;code&gt;StorageResolution&lt;/code&gt; of 1.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data points with a period of 60 seconds (1-minute) are available for 15 days.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data points with a period of 300 seconds (5-minute) are available for 63 days.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data points with a period of 3600 seconds (1 hour) are available for 455 days (15 months).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Data points that are initially published with a shorter period are aggregated together for long-term storage. For example, if you collect data using a period of 1 minute, the data remains available for 15 days with 1-minute resolution. After 15 days, this data is still available, but is aggregated and retrievable only with a resolution of 5 minutes. After 63 days, the data is further aggregated and is available with a resolution of 1 hour.&lt;/p&gt; &lt;p&gt;CloudWatch started retaining 5-minute and 1-hour metric data as of July 9, 2016.&lt;/p&gt; &lt;p&gt;For information about metrics and dimensions supported by Amazon Web Services services, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CW_Support_For_AWS.html\&quot;&gt;Amazon CloudWatch Metrics and Dimensions Reference&lt;/a&gt; in the &lt;i&gt;Amazon CloudWatch User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getMetricStatisticsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetMetricStatisticsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetMetricStatisticsInput getMetricStatisticsInput, final ApiCallback<GetMetricStatisticsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTGetMetricStatisticsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getMetricStatisticsInput, _callback);
        Type localVarReturnType = new TypeToken<GetMetricStatisticsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTGetMetricStream
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getMetricStreamInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetMetricStreamCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetMetricStreamInput getMetricStreamInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getMetricStreamInput;

        // create path and map variables
        String localVarPath = "/#Action=GetMetricStream";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTGetMetricStreamValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetMetricStreamInput getMetricStreamInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTGetMetricStream(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTGetMetricStream(Async)");
        }

        return pOSTGetMetricStreamCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getMetricStreamInput, _callback);

    }

    /**
     * 
     * Returns information about the metric stream that you specify.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getMetricStreamInput  (optional)
     * @return GetMetricStreamOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public GetMetricStreamOutput pOSTGetMetricStream(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetMetricStreamInput getMetricStreamInput) throws ApiException {
        ApiResponse<GetMetricStreamOutput> localVarResp = pOSTGetMetricStreamWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getMetricStreamInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about the metric stream that you specify.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getMetricStreamInput  (optional)
     * @return ApiResponse&lt;GetMetricStreamOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMetricStreamOutput> pOSTGetMetricStreamWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetMetricStreamInput getMetricStreamInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTGetMetricStreamValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getMetricStreamInput, null);
        Type localVarReturnType = new TypeToken<GetMetricStreamOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about the metric stream that you specify.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getMetricStreamInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetMetricStreamAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetMetricStreamInput getMetricStreamInput, final ApiCallback<GetMetricStreamOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTGetMetricStreamValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getMetricStreamInput, _callback);
        Type localVarReturnType = new TypeToken<GetMetricStreamOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTGetMetricWidgetImage
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getMetricWidgetImageInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetMetricWidgetImageCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetMetricWidgetImageInput getMetricWidgetImageInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getMetricWidgetImageInput;

        // create path and map variables
        String localVarPath = "/#Action=GetMetricWidgetImage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTGetMetricWidgetImageValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetMetricWidgetImageInput getMetricWidgetImageInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTGetMetricWidgetImage(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTGetMetricWidgetImage(Async)");
        }

        return pOSTGetMetricWidgetImageCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getMetricWidgetImageInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;You can use the &lt;code&gt;GetMetricWidgetImage&lt;/code&gt; API to retrieve a snapshot graph of one or more Amazon CloudWatch metrics as a bitmap image. You can then embed this image into your services and products, such as wiki pages, reports, and documents. You could also retrieve images regularly, such as every minute, and create your own custom live dashboard.&lt;/p&gt; &lt;p&gt;The graph you retrieve can include all CloudWatch metric graph features, including metric math and horizontal and vertical annotations.&lt;/p&gt; &lt;p&gt;There is a limit of 20 transactions per second for this API. Each &lt;code&gt;GetMetricWidgetImage&lt;/code&gt; action has the following limits:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;As many as 100 metrics in the graph.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Up to 100 KB uncompressed payload.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getMetricWidgetImageInput  (optional)
     * @return GetMetricWidgetImageOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetMetricWidgetImageOutput pOSTGetMetricWidgetImage(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetMetricWidgetImageInput getMetricWidgetImageInput) throws ApiException {
        ApiResponse<GetMetricWidgetImageOutput> localVarResp = pOSTGetMetricWidgetImageWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getMetricWidgetImageInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;You can use the &lt;code&gt;GetMetricWidgetImage&lt;/code&gt; API to retrieve a snapshot graph of one or more Amazon CloudWatch metrics as a bitmap image. You can then embed this image into your services and products, such as wiki pages, reports, and documents. You could also retrieve images regularly, such as every minute, and create your own custom live dashboard.&lt;/p&gt; &lt;p&gt;The graph you retrieve can include all CloudWatch metric graph features, including metric math and horizontal and vertical annotations.&lt;/p&gt; &lt;p&gt;There is a limit of 20 transactions per second for this API. Each &lt;code&gt;GetMetricWidgetImage&lt;/code&gt; action has the following limits:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;As many as 100 metrics in the graph.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Up to 100 KB uncompressed payload.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getMetricWidgetImageInput  (optional)
     * @return ApiResponse&lt;GetMetricWidgetImageOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMetricWidgetImageOutput> pOSTGetMetricWidgetImageWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetMetricWidgetImageInput getMetricWidgetImageInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTGetMetricWidgetImageValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getMetricWidgetImageInput, null);
        Type localVarReturnType = new TypeToken<GetMetricWidgetImageOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;You can use the &lt;code&gt;GetMetricWidgetImage&lt;/code&gt; API to retrieve a snapshot graph of one or more Amazon CloudWatch metrics as a bitmap image. You can then embed this image into your services and products, such as wiki pages, reports, and documents. You could also retrieve images regularly, such as every minute, and create your own custom live dashboard.&lt;/p&gt; &lt;p&gt;The graph you retrieve can include all CloudWatch metric graph features, including metric math and horizontal and vertical annotations.&lt;/p&gt; &lt;p&gt;There is a limit of 20 transactions per second for this API. Each &lt;code&gt;GetMetricWidgetImage&lt;/code&gt; action has the following limits:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;As many as 100 metrics in the graph.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Up to 100 KB uncompressed payload.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getMetricWidgetImageInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetMetricWidgetImageAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetMetricWidgetImageInput getMetricWidgetImageInput, final ApiCallback<GetMetricWidgetImageOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTGetMetricWidgetImageValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getMetricWidgetImageInput, _callback);
        Type localVarReturnType = new TypeToken<GetMetricWidgetImageOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListDashboards
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listDashboardsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListDashboardsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListDashboardsInput listDashboardsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listDashboardsInput;

        // create path and map variables
        String localVarPath = "/#Action=ListDashboards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListDashboardsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListDashboardsInput listDashboardsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListDashboards(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListDashboards(Async)");
        }

        return pOSTListDashboardsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listDashboardsInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns a list of the dashboards for your account. If you include &lt;code&gt;DashboardNamePrefix&lt;/code&gt;, only those dashboards with names starting with the prefix are listed. Otherwise, all dashboards in your account are listed. &lt;/p&gt; &lt;p&gt; &lt;code&gt;ListDashboards&lt;/code&gt; returns up to 1000 results on one page. If there are more than 1000 dashboards, you can call &lt;code&gt;ListDashboards&lt;/code&gt; again and include the value you received for &lt;code&gt;NextToken&lt;/code&gt; in the first call, to receive the next 1000 results.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listDashboardsInput  (optional)
     * @return ListDashboardsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public ListDashboardsOutput pOSTListDashboards(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListDashboardsInput listDashboardsInput) throws ApiException {
        ApiResponse<ListDashboardsOutput> localVarResp = pOSTListDashboardsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listDashboardsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns a list of the dashboards for your account. If you include &lt;code&gt;DashboardNamePrefix&lt;/code&gt;, only those dashboards with names starting with the prefix are listed. Otherwise, all dashboards in your account are listed. &lt;/p&gt; &lt;p&gt; &lt;code&gt;ListDashboards&lt;/code&gt; returns up to 1000 results on one page. If there are more than 1000 dashboards, you can call &lt;code&gt;ListDashboards&lt;/code&gt; again and include the value you received for &lt;code&gt;NextToken&lt;/code&gt; in the first call, to receive the next 1000 results.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listDashboardsInput  (optional)
     * @return ApiResponse&lt;ListDashboardsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListDashboardsOutput> pOSTListDashboardsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListDashboardsInput listDashboardsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTListDashboardsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listDashboardsInput, null);
        Type localVarReturnType = new TypeToken<ListDashboardsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns a list of the dashboards for your account. If you include &lt;code&gt;DashboardNamePrefix&lt;/code&gt;, only those dashboards with names starting with the prefix are listed. Otherwise, all dashboards in your account are listed. &lt;/p&gt; &lt;p&gt; &lt;code&gt;ListDashboards&lt;/code&gt; returns up to 1000 results on one page. If there are more than 1000 dashboards, you can call &lt;code&gt;ListDashboards&lt;/code&gt; again and include the value you received for &lt;code&gt;NextToken&lt;/code&gt; in the first call, to receive the next 1000 results.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listDashboardsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListDashboardsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListDashboardsInput listDashboardsInput, final ApiCallback<ListDashboardsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListDashboardsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listDashboardsInput, _callback);
        Type localVarReturnType = new TypeToken<ListDashboardsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListManagedInsightRules
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listManagedInsightRulesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListManagedInsightRulesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListManagedInsightRulesInput listManagedInsightRulesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listManagedInsightRulesInput;

        // create path and map variables
        String localVarPath = "/#Action=ListManagedInsightRules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListManagedInsightRulesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListManagedInsightRulesInput listManagedInsightRulesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListManagedInsightRules(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListManagedInsightRules(Async)");
        }

        return pOSTListManagedInsightRulesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listManagedInsightRulesInput, _callback);

    }

    /**
     * 
     *  Returns a list that contains the number of managed Contributor Insights rules in your account. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listManagedInsightRulesInput  (optional)
     * @return ListManagedInsightRulesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public ListManagedInsightRulesOutput pOSTListManagedInsightRules(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListManagedInsightRulesInput listManagedInsightRulesInput) throws ApiException {
        ApiResponse<ListManagedInsightRulesOutput> localVarResp = pOSTListManagedInsightRulesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listManagedInsightRulesInput);
        return localVarResp.getData();
    }

    /**
     * 
     *  Returns a list that contains the number of managed Contributor Insights rules in your account. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listManagedInsightRulesInput  (optional)
     * @return ApiResponse&lt;ListManagedInsightRulesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListManagedInsightRulesOutput> pOSTListManagedInsightRulesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListManagedInsightRulesInput listManagedInsightRulesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTListManagedInsightRulesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listManagedInsightRulesInput, null);
        Type localVarReturnType = new TypeToken<ListManagedInsightRulesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Returns a list that contains the number of managed Contributor Insights rules in your account. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listManagedInsightRulesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListManagedInsightRulesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListManagedInsightRulesInput listManagedInsightRulesInput, final ApiCallback<ListManagedInsightRulesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListManagedInsightRulesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listManagedInsightRulesInput, _callback);
        Type localVarReturnType = new TypeToken<ListManagedInsightRulesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListMetricStreams
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listMetricStreamsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListMetricStreamsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListMetricStreamsInput listMetricStreamsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listMetricStreamsInput;

        // create path and map variables
        String localVarPath = "/#Action=ListMetricStreams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListMetricStreamsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListMetricStreamsInput listMetricStreamsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListMetricStreams(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListMetricStreams(Async)");
        }

        return pOSTListMetricStreamsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listMetricStreamsInput, _callback);

    }

    /**
     * 
     * Returns a list of metric streams in this account.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listMetricStreamsInput  (optional)
     * @return ListMetricStreamsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ListMetricStreamsOutput pOSTListMetricStreams(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListMetricStreamsInput listMetricStreamsInput) throws ApiException {
        ApiResponse<ListMetricStreamsOutput> localVarResp = pOSTListMetricStreamsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listMetricStreamsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of metric streams in this account.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listMetricStreamsInput  (optional)
     * @return ApiResponse&lt;ListMetricStreamsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListMetricStreamsOutput> pOSTListMetricStreamsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListMetricStreamsInput listMetricStreamsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTListMetricStreamsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listMetricStreamsInput, null);
        Type localVarReturnType = new TypeToken<ListMetricStreamsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of metric streams in this account.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listMetricStreamsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListMetricStreamsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListMetricStreamsInput listMetricStreamsInput, final ApiCallback<ListMetricStreamsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListMetricStreamsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listMetricStreamsInput, _callback);
        Type localVarReturnType = new TypeToken<ListMetricStreamsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListMetrics
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listMetricsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListMetricsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListMetricsInput listMetricsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listMetricsInput;

        // create path and map variables
        String localVarPath = "/#Action=ListMetrics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListMetricsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListMetricsInput listMetricsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListMetrics(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListMetrics(Async)");
        }

        return pOSTListMetricsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listMetricsInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;List the specified metrics. You can use the returned metrics with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html\&quot;&gt;GetMetricData&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html\&quot;&gt;GetMetricStatistics&lt;/a&gt; to get statistical data.&lt;/p&gt; &lt;p&gt;Up to 500 results are returned for any one call. To retrieve additional results, use the returned token with subsequent calls.&lt;/p&gt; &lt;p&gt;After you create a metric, allow up to 15 minutes for the metric to appear. To see metric statistics sooner, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html\&quot;&gt;GetMetricData&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html\&quot;&gt;GetMetricStatistics&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you are using CloudWatch cross-account observability, you can use this operation in a monitoring account and view metrics from the linked source accounts. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Unified-Cross-Account.html\&quot;&gt;CloudWatch cross-account observability&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;ListMetrics&lt;/code&gt; doesn&#39;t return information about metrics if those metrics haven&#39;t reported data in the past two weeks. To retrieve those metrics, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html\&quot;&gt;GetMetricData&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html\&quot;&gt;GetMetricStatistics&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listMetricsInput  (optional)
     * @return ListMetricsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public ListMetricsOutput pOSTListMetrics(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListMetricsInput listMetricsInput) throws ApiException {
        ApiResponse<ListMetricsOutput> localVarResp = pOSTListMetricsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listMetricsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;List the specified metrics. You can use the returned metrics with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html\&quot;&gt;GetMetricData&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html\&quot;&gt;GetMetricStatistics&lt;/a&gt; to get statistical data.&lt;/p&gt; &lt;p&gt;Up to 500 results are returned for any one call. To retrieve additional results, use the returned token with subsequent calls.&lt;/p&gt; &lt;p&gt;After you create a metric, allow up to 15 minutes for the metric to appear. To see metric statistics sooner, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html\&quot;&gt;GetMetricData&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html\&quot;&gt;GetMetricStatistics&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you are using CloudWatch cross-account observability, you can use this operation in a monitoring account and view metrics from the linked source accounts. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Unified-Cross-Account.html\&quot;&gt;CloudWatch cross-account observability&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;ListMetrics&lt;/code&gt; doesn&#39;t return information about metrics if those metrics haven&#39;t reported data in the past two weeks. To retrieve those metrics, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html\&quot;&gt;GetMetricData&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html\&quot;&gt;GetMetricStatistics&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listMetricsInput  (optional)
     * @return ApiResponse&lt;ListMetricsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListMetricsOutput> pOSTListMetricsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListMetricsInput listMetricsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTListMetricsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listMetricsInput, null);
        Type localVarReturnType = new TypeToken<ListMetricsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;List the specified metrics. You can use the returned metrics with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html\&quot;&gt;GetMetricData&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html\&quot;&gt;GetMetricStatistics&lt;/a&gt; to get statistical data.&lt;/p&gt; &lt;p&gt;Up to 500 results are returned for any one call. To retrieve additional results, use the returned token with subsequent calls.&lt;/p&gt; &lt;p&gt;After you create a metric, allow up to 15 minutes for the metric to appear. To see metric statistics sooner, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html\&quot;&gt;GetMetricData&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html\&quot;&gt;GetMetricStatistics&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you are using CloudWatch cross-account observability, you can use this operation in a monitoring account and view metrics from the linked source accounts. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Unified-Cross-Account.html\&quot;&gt;CloudWatch cross-account observability&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;ListMetrics&lt;/code&gt; doesn&#39;t return information about metrics if those metrics haven&#39;t reported data in the past two weeks. To retrieve those metrics, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html\&quot;&gt;GetMetricData&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html\&quot;&gt;GetMetricStatistics&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listMetricsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListMetricsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListMetricsInput listMetricsInput, final ApiCallback<ListMetricsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListMetricsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listMetricsInput, _callback);
        Type localVarReturnType = new TypeToken<ListMetricsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListTagsForResource
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listTagsForResourceInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListTagsForResourceCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListTagsForResourceInput listTagsForResourceInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listTagsForResourceInput;

        // create path and map variables
        String localVarPath = "/#Action=ListTagsForResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListTagsForResourceValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListTagsForResourceInput listTagsForResourceInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListTagsForResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListTagsForResource(Async)");
        }

        return pOSTListTagsForResourceCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listTagsForResourceInput, _callback);

    }

    /**
     * 
     * Displays the tags associated with a CloudWatch resource. Currently, alarms and Contributor Insights rules support tagging.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listTagsForResourceInput  (optional)
     * @return ListTagsForResourceOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public ListTagsForResourceOutput pOSTListTagsForResource(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListTagsForResourceInput listTagsForResourceInput) throws ApiException {
        ApiResponse<ListTagsForResourceOutput> localVarResp = pOSTListTagsForResourceWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listTagsForResourceInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Displays the tags associated with a CloudWatch resource. Currently, alarms and Contributor Insights rules support tagging.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listTagsForResourceInput  (optional)
     * @return ApiResponse&lt;ListTagsForResourceOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTagsForResourceOutput> pOSTListTagsForResourceWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListTagsForResourceInput listTagsForResourceInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTListTagsForResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listTagsForResourceInput, null);
        Type localVarReturnType = new TypeToken<ListTagsForResourceOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Displays the tags associated with a CloudWatch resource. Currently, alarms and Contributor Insights rules support tagging.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listTagsForResourceInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListTagsForResourceAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListTagsForResourceInput listTagsForResourceInput, final ApiCallback<ListTagsForResourceOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListTagsForResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listTagsForResourceInput, _callback);
        Type localVarReturnType = new TypeToken<ListTagsForResourceOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTPutAnomalyDetector
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putAnomalyDetectorInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPutAnomalyDetectorCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutAnomalyDetectorInput putAnomalyDetectorInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putAnomalyDetectorInput;

        // create path and map variables
        String localVarPath = "/#Action=PutAnomalyDetector";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTPutAnomalyDetectorValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutAnomalyDetectorInput putAnomalyDetectorInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTPutAnomalyDetector(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTPutAnomalyDetector(Async)");
        }

        return pOSTPutAnomalyDetectorCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putAnomalyDetectorInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates an anomaly detection model for a CloudWatch metric. You can use the model to display a band of expected normal values when the metric is graphed.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Anomaly_Detection.html\&quot;&gt;CloudWatch Anomaly Detection&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putAnomalyDetectorInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTPutAnomalyDetector(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutAnomalyDetectorInput putAnomalyDetectorInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTPutAnomalyDetectorWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putAnomalyDetectorInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates an anomaly detection model for a CloudWatch metric. You can use the model to display a band of expected normal values when the metric is graphed.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Anomaly_Detection.html\&quot;&gt;CloudWatch Anomaly Detection&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putAnomalyDetectorInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTPutAnomalyDetectorWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutAnomalyDetectorInput putAnomalyDetectorInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTPutAnomalyDetectorValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putAnomalyDetectorInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates an anomaly detection model for a CloudWatch metric. You can use the model to display a band of expected normal values when the metric is graphed.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Anomaly_Detection.html\&quot;&gt;CloudWatch Anomaly Detection&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putAnomalyDetectorInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPutAnomalyDetectorAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutAnomalyDetectorInput putAnomalyDetectorInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTPutAnomalyDetectorValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putAnomalyDetectorInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTPutCompositeAlarm
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putCompositeAlarmInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPutCompositeAlarmCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutCompositeAlarmInput putCompositeAlarmInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putCompositeAlarmInput;

        // create path and map variables
        String localVarPath = "/#Action=PutCompositeAlarm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTPutCompositeAlarmValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutCompositeAlarmInput putCompositeAlarmInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTPutCompositeAlarm(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTPutCompositeAlarm(Async)");
        }

        return pOSTPutCompositeAlarmCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putCompositeAlarmInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates or updates a &lt;i&gt;composite alarm&lt;/i&gt;. When you create a composite alarm, you specify a rule expression for the alarm that takes into account the alarm states of other alarms that you have created. The composite alarm goes into ALARM state only if all conditions of the rule are met.&lt;/p&gt; &lt;p&gt;The alarms specified in a composite alarm&#39;s rule expression can include metric alarms and other composite alarms. The rule expression of a composite alarm can include as many as 100 underlying alarms. Any single alarm can be included in the rule expressions of as many as 150 composite alarms.&lt;/p&gt; &lt;p&gt;Using composite alarms can reduce alarm noise. You can create multiple metric alarms, and also create a composite alarm and set up alerts only for the composite alarm. For example, you could create a composite alarm that goes into ALARM state only when more than one of the underlying metric alarms are in ALARM state.&lt;/p&gt; &lt;p&gt;Currently, the only alarm actions that can be taken by composite alarms are notifying SNS topics.&lt;/p&gt; &lt;note&gt; &lt;p&gt;It is possible to create a loop or cycle of composite alarms, where composite alarm A depends on composite alarm B, and composite alarm B also depends on composite alarm A. In this scenario, you can&#39;t delete any composite alarm that is part of the cycle because there is always still a composite alarm that depends on that alarm that you want to delete.&lt;/p&gt; &lt;p&gt;To get out of such a situation, you must break the cycle by changing the rule of one of the composite alarms in the cycle to remove a dependency that creates the cycle. The simplest change to make to break a cycle is to change the &lt;code&gt;AlarmRule&lt;/code&gt; of one of the alarms to &lt;code&gt;false&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;Additionally, the evaluation of composite alarms stops if CloudWatch detects a cycle in the evaluation path. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;When this operation creates an alarm, the alarm state is immediately set to &lt;code&gt;INSUFFICIENT_DATA&lt;/code&gt;. The alarm is then evaluated and its state is set appropriately. Any actions associated with the new state are then executed. For a composite alarm, this initial time after creation is the only time that the alarm can be in &lt;code&gt;INSUFFICIENT_DATA&lt;/code&gt; state.&lt;/p&gt; &lt;p&gt;When you update an existing alarm, its state is left unchanged, but the update completely overwrites the previous configuration of the alarm.&lt;/p&gt; &lt;p&gt;To use this operation, you must be signed on with the &lt;code&gt;cloudwatch:PutCompositeAlarm&lt;/code&gt; permission that is scoped to &lt;code&gt;*&lt;/code&gt;. You can&#39;t create a composite alarms if your &lt;code&gt;cloudwatch:PutCompositeAlarm&lt;/code&gt; permission has a narrower scope.&lt;/p&gt; &lt;p&gt;If you are an IAM user, you must have &lt;code&gt;iam:CreateServiceLinkedRole&lt;/code&gt; to create a composite alarm that has Systems Manager OpsItem actions.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putCompositeAlarmInput  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTPutCompositeAlarm(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutCompositeAlarmInput putCompositeAlarmInput) throws ApiException {
        pOSTPutCompositeAlarmWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putCompositeAlarmInput);
    }

    /**
     * 
     * &lt;p&gt;Creates or updates a &lt;i&gt;composite alarm&lt;/i&gt;. When you create a composite alarm, you specify a rule expression for the alarm that takes into account the alarm states of other alarms that you have created. The composite alarm goes into ALARM state only if all conditions of the rule are met.&lt;/p&gt; &lt;p&gt;The alarms specified in a composite alarm&#39;s rule expression can include metric alarms and other composite alarms. The rule expression of a composite alarm can include as many as 100 underlying alarms. Any single alarm can be included in the rule expressions of as many as 150 composite alarms.&lt;/p&gt; &lt;p&gt;Using composite alarms can reduce alarm noise. You can create multiple metric alarms, and also create a composite alarm and set up alerts only for the composite alarm. For example, you could create a composite alarm that goes into ALARM state only when more than one of the underlying metric alarms are in ALARM state.&lt;/p&gt; &lt;p&gt;Currently, the only alarm actions that can be taken by composite alarms are notifying SNS topics.&lt;/p&gt; &lt;note&gt; &lt;p&gt;It is possible to create a loop or cycle of composite alarms, where composite alarm A depends on composite alarm B, and composite alarm B also depends on composite alarm A. In this scenario, you can&#39;t delete any composite alarm that is part of the cycle because there is always still a composite alarm that depends on that alarm that you want to delete.&lt;/p&gt; &lt;p&gt;To get out of such a situation, you must break the cycle by changing the rule of one of the composite alarms in the cycle to remove a dependency that creates the cycle. The simplest change to make to break a cycle is to change the &lt;code&gt;AlarmRule&lt;/code&gt; of one of the alarms to &lt;code&gt;false&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;Additionally, the evaluation of composite alarms stops if CloudWatch detects a cycle in the evaluation path. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;When this operation creates an alarm, the alarm state is immediately set to &lt;code&gt;INSUFFICIENT_DATA&lt;/code&gt;. The alarm is then evaluated and its state is set appropriately. Any actions associated with the new state are then executed. For a composite alarm, this initial time after creation is the only time that the alarm can be in &lt;code&gt;INSUFFICIENT_DATA&lt;/code&gt; state.&lt;/p&gt; &lt;p&gt;When you update an existing alarm, its state is left unchanged, but the update completely overwrites the previous configuration of the alarm.&lt;/p&gt; &lt;p&gt;To use this operation, you must be signed on with the &lt;code&gt;cloudwatch:PutCompositeAlarm&lt;/code&gt; permission that is scoped to &lt;code&gt;*&lt;/code&gt;. You can&#39;t create a composite alarms if your &lt;code&gt;cloudwatch:PutCompositeAlarm&lt;/code&gt; permission has a narrower scope.&lt;/p&gt; &lt;p&gt;If you are an IAM user, you must have &lt;code&gt;iam:CreateServiceLinkedRole&lt;/code&gt; to create a composite alarm that has Systems Manager OpsItem actions.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putCompositeAlarmInput  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTPutCompositeAlarmWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutCompositeAlarmInput putCompositeAlarmInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTPutCompositeAlarmValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putCompositeAlarmInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates or updates a &lt;i&gt;composite alarm&lt;/i&gt;. When you create a composite alarm, you specify a rule expression for the alarm that takes into account the alarm states of other alarms that you have created. The composite alarm goes into ALARM state only if all conditions of the rule are met.&lt;/p&gt; &lt;p&gt;The alarms specified in a composite alarm&#39;s rule expression can include metric alarms and other composite alarms. The rule expression of a composite alarm can include as many as 100 underlying alarms. Any single alarm can be included in the rule expressions of as many as 150 composite alarms.&lt;/p&gt; &lt;p&gt;Using composite alarms can reduce alarm noise. You can create multiple metric alarms, and also create a composite alarm and set up alerts only for the composite alarm. For example, you could create a composite alarm that goes into ALARM state only when more than one of the underlying metric alarms are in ALARM state.&lt;/p&gt; &lt;p&gt;Currently, the only alarm actions that can be taken by composite alarms are notifying SNS topics.&lt;/p&gt; &lt;note&gt; &lt;p&gt;It is possible to create a loop or cycle of composite alarms, where composite alarm A depends on composite alarm B, and composite alarm B also depends on composite alarm A. In this scenario, you can&#39;t delete any composite alarm that is part of the cycle because there is always still a composite alarm that depends on that alarm that you want to delete.&lt;/p&gt; &lt;p&gt;To get out of such a situation, you must break the cycle by changing the rule of one of the composite alarms in the cycle to remove a dependency that creates the cycle. The simplest change to make to break a cycle is to change the &lt;code&gt;AlarmRule&lt;/code&gt; of one of the alarms to &lt;code&gt;false&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;Additionally, the evaluation of composite alarms stops if CloudWatch detects a cycle in the evaluation path. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;When this operation creates an alarm, the alarm state is immediately set to &lt;code&gt;INSUFFICIENT_DATA&lt;/code&gt;. The alarm is then evaluated and its state is set appropriately. Any actions associated with the new state are then executed. For a composite alarm, this initial time after creation is the only time that the alarm can be in &lt;code&gt;INSUFFICIENT_DATA&lt;/code&gt; state.&lt;/p&gt; &lt;p&gt;When you update an existing alarm, its state is left unchanged, but the update completely overwrites the previous configuration of the alarm.&lt;/p&gt; &lt;p&gt;To use this operation, you must be signed on with the &lt;code&gt;cloudwatch:PutCompositeAlarm&lt;/code&gt; permission that is scoped to &lt;code&gt;*&lt;/code&gt;. You can&#39;t create a composite alarms if your &lt;code&gt;cloudwatch:PutCompositeAlarm&lt;/code&gt; permission has a narrower scope.&lt;/p&gt; &lt;p&gt;If you are an IAM user, you must have &lt;code&gt;iam:CreateServiceLinkedRole&lt;/code&gt; to create a composite alarm that has Systems Manager OpsItem actions.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putCompositeAlarmInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPutCompositeAlarmAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutCompositeAlarmInput putCompositeAlarmInput, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTPutCompositeAlarmValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putCompositeAlarmInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTPutDashboard
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putDashboardInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DashboardInvalidInputError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPutDashboardCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutDashboardInput putDashboardInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putDashboardInput;

        // create path and map variables
        String localVarPath = "/#Action=PutDashboard";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTPutDashboardValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutDashboardInput putDashboardInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTPutDashboard(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTPutDashboard(Async)");
        }

        return pOSTPutDashboardCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putDashboardInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a dashboard if it does not already exist, or updates an existing dashboard. If you update a dashboard, the entire contents are replaced with what you specify here.&lt;/p&gt; &lt;p&gt;All dashboards in your account are global, not region-specific.&lt;/p&gt; &lt;p&gt;A simple way to create a dashboard using &lt;code&gt;PutDashboard&lt;/code&gt; is to copy an existing dashboard. To copy an existing dashboard using the console, you can load the dashboard and then use the View/edit source command in the Actions menu to display the JSON block for that dashboard. Another way to copy a dashboard is to use &lt;code&gt;GetDashboard&lt;/code&gt;, and then use the data returned within &lt;code&gt;DashboardBody&lt;/code&gt; as the template for the new dashboard when you call &lt;code&gt;PutDashboard&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;When you create a dashboard with &lt;code&gt;PutDashboard&lt;/code&gt;, a good practice is to add a text widget at the top of the dashboard with a message that the dashboard was created by script and should not be changed in the console. This message could also point console users to the location of the &lt;code&gt;DashboardBody&lt;/code&gt; script or the CloudFormation template used to create the dashboard.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putDashboardInput  (optional)
     * @return PutDashboardOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DashboardInvalidInputError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public PutDashboardOutput pOSTPutDashboard(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutDashboardInput putDashboardInput) throws ApiException {
        ApiResponse<PutDashboardOutput> localVarResp = pOSTPutDashboardWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putDashboardInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a dashboard if it does not already exist, or updates an existing dashboard. If you update a dashboard, the entire contents are replaced with what you specify here.&lt;/p&gt; &lt;p&gt;All dashboards in your account are global, not region-specific.&lt;/p&gt; &lt;p&gt;A simple way to create a dashboard using &lt;code&gt;PutDashboard&lt;/code&gt; is to copy an existing dashboard. To copy an existing dashboard using the console, you can load the dashboard and then use the View/edit source command in the Actions menu to display the JSON block for that dashboard. Another way to copy a dashboard is to use &lt;code&gt;GetDashboard&lt;/code&gt;, and then use the data returned within &lt;code&gt;DashboardBody&lt;/code&gt; as the template for the new dashboard when you call &lt;code&gt;PutDashboard&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;When you create a dashboard with &lt;code&gt;PutDashboard&lt;/code&gt;, a good practice is to add a text widget at the top of the dashboard with a message that the dashboard was created by script and should not be changed in the console. This message could also point console users to the location of the &lt;code&gt;DashboardBody&lt;/code&gt; script or the CloudFormation template used to create the dashboard.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putDashboardInput  (optional)
     * @return ApiResponse&lt;PutDashboardOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DashboardInvalidInputError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PutDashboardOutput> pOSTPutDashboardWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutDashboardInput putDashboardInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTPutDashboardValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putDashboardInput, null);
        Type localVarReturnType = new TypeToken<PutDashboardOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a dashboard if it does not already exist, or updates an existing dashboard. If you update a dashboard, the entire contents are replaced with what you specify here.&lt;/p&gt; &lt;p&gt;All dashboards in your account are global, not region-specific.&lt;/p&gt; &lt;p&gt;A simple way to create a dashboard using &lt;code&gt;PutDashboard&lt;/code&gt; is to copy an existing dashboard. To copy an existing dashboard using the console, you can load the dashboard and then use the View/edit source command in the Actions menu to display the JSON block for that dashboard. Another way to copy a dashboard is to use &lt;code&gt;GetDashboard&lt;/code&gt;, and then use the data returned within &lt;code&gt;DashboardBody&lt;/code&gt; as the template for the new dashboard when you call &lt;code&gt;PutDashboard&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;When you create a dashboard with &lt;code&gt;PutDashboard&lt;/code&gt;, a good practice is to add a text widget at the top of the dashboard with a message that the dashboard was created by script and should not be changed in the console. This message could also point console users to the location of the &lt;code&gt;DashboardBody&lt;/code&gt; script or the CloudFormation template used to create the dashboard.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putDashboardInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DashboardInvalidInputError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPutDashboardAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutDashboardInput putDashboardInput, final ApiCallback<PutDashboardOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTPutDashboardValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putDashboardInput, _callback);
        Type localVarReturnType = new TypeToken<PutDashboardOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTPutInsightRule
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putInsightRuleInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPutInsightRuleCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutInsightRuleInput putInsightRuleInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putInsightRuleInput;

        // create path and map variables
        String localVarPath = "/#Action=PutInsightRule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTPutInsightRuleValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutInsightRuleInput putInsightRuleInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTPutInsightRule(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTPutInsightRule(Async)");
        }

        return pOSTPutInsightRuleCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putInsightRuleInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a Contributor Insights rule. Rules evaluate log events in a CloudWatch Logs log group, enabling you to find contributor data for the log events in that log group. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights.html\&quot;&gt;Using Contributor Insights to Analyze High-Cardinality Data&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you create a rule, delete it, and then re-create it with the same name, historical data from the first time the rule was created might not be available.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putInsightRuleInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTPutInsightRule(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutInsightRuleInput putInsightRuleInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTPutInsightRuleWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putInsightRuleInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a Contributor Insights rule. Rules evaluate log events in a CloudWatch Logs log group, enabling you to find contributor data for the log events in that log group. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights.html\&quot;&gt;Using Contributor Insights to Analyze High-Cardinality Data&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you create a rule, delete it, and then re-create it with the same name, historical data from the first time the rule was created might not be available.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putInsightRuleInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTPutInsightRuleWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutInsightRuleInput putInsightRuleInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTPutInsightRuleValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putInsightRuleInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a Contributor Insights rule. Rules evaluate log events in a CloudWatch Logs log group, enabling you to find contributor data for the log events in that log group. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights.html\&quot;&gt;Using Contributor Insights to Analyze High-Cardinality Data&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you create a rule, delete it, and then re-create it with the same name, historical data from the first time the rule was created might not be available.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putInsightRuleInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPutInsightRuleAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutInsightRuleInput putInsightRuleInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTPutInsightRuleValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putInsightRuleInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTPutManagedInsightRules
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putManagedInsightRulesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPutManagedInsightRulesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutManagedInsightRulesInput putManagedInsightRulesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putManagedInsightRulesInput;

        // create path and map variables
        String localVarPath = "/#Action=PutManagedInsightRules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTPutManagedInsightRulesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutManagedInsightRulesInput putManagedInsightRulesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTPutManagedInsightRules(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTPutManagedInsightRules(Async)");
        }

        return pOSTPutManagedInsightRulesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putManagedInsightRulesInput, _callback);

    }

    /**
     * 
     *  Creates a managed Contributor Insights rule for a specified Amazon Web Services resource. When you enable a managed rule, you create a Contributor Insights rule that collects data from Amazon Web Services services. You cannot edit these rules with &lt;code&gt;PutInsightRule&lt;/code&gt;. The rules can be enabled, disabled, and deleted using &lt;code&gt;EnableInsightRules&lt;/code&gt;, &lt;code&gt;DisableInsightRules&lt;/code&gt;, and &lt;code&gt;DeleteInsightRules&lt;/code&gt;. If a previously created managed rule is currently disabled, a subsequent call to this API will re-enable it. Use &lt;code&gt;ListManagedInsightRules&lt;/code&gt; to describe all available rules. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putManagedInsightRulesInput  (optional)
     * @return PutManagedInsightRulesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public PutManagedInsightRulesOutput pOSTPutManagedInsightRules(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutManagedInsightRulesInput putManagedInsightRulesInput) throws ApiException {
        ApiResponse<PutManagedInsightRulesOutput> localVarResp = pOSTPutManagedInsightRulesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putManagedInsightRulesInput);
        return localVarResp.getData();
    }

    /**
     * 
     *  Creates a managed Contributor Insights rule for a specified Amazon Web Services resource. When you enable a managed rule, you create a Contributor Insights rule that collects data from Amazon Web Services services. You cannot edit these rules with &lt;code&gt;PutInsightRule&lt;/code&gt;. The rules can be enabled, disabled, and deleted using &lt;code&gt;EnableInsightRules&lt;/code&gt;, &lt;code&gt;DisableInsightRules&lt;/code&gt;, and &lt;code&gt;DeleteInsightRules&lt;/code&gt;. If a previously created managed rule is currently disabled, a subsequent call to this API will re-enable it. Use &lt;code&gt;ListManagedInsightRules&lt;/code&gt; to describe all available rules. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putManagedInsightRulesInput  (optional)
     * @return ApiResponse&lt;PutManagedInsightRulesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PutManagedInsightRulesOutput> pOSTPutManagedInsightRulesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutManagedInsightRulesInput putManagedInsightRulesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTPutManagedInsightRulesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putManagedInsightRulesInput, null);
        Type localVarReturnType = new TypeToken<PutManagedInsightRulesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Creates a managed Contributor Insights rule for a specified Amazon Web Services resource. When you enable a managed rule, you create a Contributor Insights rule that collects data from Amazon Web Services services. You cannot edit these rules with &lt;code&gt;PutInsightRule&lt;/code&gt;. The rules can be enabled, disabled, and deleted using &lt;code&gt;EnableInsightRules&lt;/code&gt;, &lt;code&gt;DisableInsightRules&lt;/code&gt;, and &lt;code&gt;DeleteInsightRules&lt;/code&gt;. If a previously created managed rule is currently disabled, a subsequent call to this API will re-enable it. Use &lt;code&gt;ListManagedInsightRules&lt;/code&gt; to describe all available rules. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putManagedInsightRulesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPutManagedInsightRulesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutManagedInsightRulesInput putManagedInsightRulesInput, final ApiCallback<PutManagedInsightRulesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTPutManagedInsightRulesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putManagedInsightRulesInput, _callback);
        Type localVarReturnType = new TypeToken<PutManagedInsightRulesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTPutMetricAlarm
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putMetricAlarmInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPutMetricAlarmCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutMetricAlarmInput putMetricAlarmInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putMetricAlarmInput;

        // create path and map variables
        String localVarPath = "/#Action=PutMetricAlarm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTPutMetricAlarmValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutMetricAlarmInput putMetricAlarmInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTPutMetricAlarm(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTPutMetricAlarm(Async)");
        }

        return pOSTPutMetricAlarmCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putMetricAlarmInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates or updates an alarm and associates it with the specified metric, metric math expression, anomaly detection model, or Metrics Insights query. For more information about using a Metrics Insights query for an alarm, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Create_Metrics_Insights_Alarm.html\&quot;&gt;Create alarms on Metrics Insights queries&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Alarms based on anomaly detection models cannot have Auto Scaling actions.&lt;/p&gt; &lt;p&gt;When this operation creates an alarm, the alarm state is immediately set to &lt;code&gt;INSUFFICIENT_DATA&lt;/code&gt;. The alarm is then evaluated and its state is set appropriately. Any actions associated with the new state are then executed.&lt;/p&gt; &lt;p&gt;When you update an existing alarm, its state is left unchanged, but the update completely overwrites the previous configuration of the alarm.&lt;/p&gt; &lt;p&gt;If you are an IAM user, you must have Amazon EC2 permissions for some alarm operations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;iam:CreateServiceLinkedRole&lt;/code&gt; permission for all alarms with EC2 actions&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;iam:CreateServiceLinkedRole&lt;/code&gt; permissions to create an alarm with Systems Manager OpsItem or response plan actions.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The first time you create an alarm in the Amazon Web Services Management Console, the CLI, or by using the PutMetricAlarm API, CloudWatch creates the necessary service-linked role for you. The service-linked roles are called &lt;code&gt;AWSServiceRoleForCloudWatchEvents&lt;/code&gt; and &lt;code&gt;AWSServiceRoleForCloudWatchAlarms_ActionSSM&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role\&quot;&gt;Amazon Web Services service-linked role&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Each &lt;code&gt;PutMetricAlarm&lt;/code&gt; action has a maximum uncompressed payload of 120 KB.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Cross-account alarms&lt;/b&gt; &lt;/p&gt; &lt;p&gt;You can set an alarm on metrics in the current account, or in another account. To create a cross-account alarm that watches a metric in a different account, you must have completed the following pre-requisites:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The account where the metrics are located (the &lt;i&gt;sharing account&lt;/i&gt;) must already have a sharing role named &lt;b&gt;CloudWatch-CrossAccountSharingRole&lt;/b&gt;. If it does not already have this role, you must create it using the instructions in &lt;b&gt;Set up a sharing account&lt;/b&gt; in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Cross-Account-Cross-Region.html#enable-cross-account-cross-Region\&quot;&gt; Cross-account cross-Region CloudWatch console&lt;/a&gt;. The policy for that role must grant access to the ID of the account where you are creating the alarm. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The account where you are creating the alarm (the &lt;i&gt;monitoring account&lt;/i&gt;) must already have a service-linked role named &lt;b&gt;AWSServiceRoleForCloudWatchCrossAccount&lt;/b&gt; to allow CloudWatch to assume the sharing role in the sharing account. If it does not, you must create it following the directions in &lt;b&gt;Set up a monitoring account&lt;/b&gt; in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Cross-Account-Cross-Region.html#enable-cross-account-cross-Region\&quot;&gt; Cross-account cross-Region CloudWatch console&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putMetricAlarmInput  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTPutMetricAlarm(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutMetricAlarmInput putMetricAlarmInput) throws ApiException {
        pOSTPutMetricAlarmWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putMetricAlarmInput);
    }

    /**
     * 
     * &lt;p&gt;Creates or updates an alarm and associates it with the specified metric, metric math expression, anomaly detection model, or Metrics Insights query. For more information about using a Metrics Insights query for an alarm, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Create_Metrics_Insights_Alarm.html\&quot;&gt;Create alarms on Metrics Insights queries&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Alarms based on anomaly detection models cannot have Auto Scaling actions.&lt;/p&gt; &lt;p&gt;When this operation creates an alarm, the alarm state is immediately set to &lt;code&gt;INSUFFICIENT_DATA&lt;/code&gt;. The alarm is then evaluated and its state is set appropriately. Any actions associated with the new state are then executed.&lt;/p&gt; &lt;p&gt;When you update an existing alarm, its state is left unchanged, but the update completely overwrites the previous configuration of the alarm.&lt;/p&gt; &lt;p&gt;If you are an IAM user, you must have Amazon EC2 permissions for some alarm operations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;iam:CreateServiceLinkedRole&lt;/code&gt; permission for all alarms with EC2 actions&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;iam:CreateServiceLinkedRole&lt;/code&gt; permissions to create an alarm with Systems Manager OpsItem or response plan actions.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The first time you create an alarm in the Amazon Web Services Management Console, the CLI, or by using the PutMetricAlarm API, CloudWatch creates the necessary service-linked role for you. The service-linked roles are called &lt;code&gt;AWSServiceRoleForCloudWatchEvents&lt;/code&gt; and &lt;code&gt;AWSServiceRoleForCloudWatchAlarms_ActionSSM&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role\&quot;&gt;Amazon Web Services service-linked role&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Each &lt;code&gt;PutMetricAlarm&lt;/code&gt; action has a maximum uncompressed payload of 120 KB.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Cross-account alarms&lt;/b&gt; &lt;/p&gt; &lt;p&gt;You can set an alarm on metrics in the current account, or in another account. To create a cross-account alarm that watches a metric in a different account, you must have completed the following pre-requisites:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The account where the metrics are located (the &lt;i&gt;sharing account&lt;/i&gt;) must already have a sharing role named &lt;b&gt;CloudWatch-CrossAccountSharingRole&lt;/b&gt;. If it does not already have this role, you must create it using the instructions in &lt;b&gt;Set up a sharing account&lt;/b&gt; in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Cross-Account-Cross-Region.html#enable-cross-account-cross-Region\&quot;&gt; Cross-account cross-Region CloudWatch console&lt;/a&gt;. The policy for that role must grant access to the ID of the account where you are creating the alarm. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The account where you are creating the alarm (the &lt;i&gt;monitoring account&lt;/i&gt;) must already have a service-linked role named &lt;b&gt;AWSServiceRoleForCloudWatchCrossAccount&lt;/b&gt; to allow CloudWatch to assume the sharing role in the sharing account. If it does not, you must create it following the directions in &lt;b&gt;Set up a monitoring account&lt;/b&gt; in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Cross-Account-Cross-Region.html#enable-cross-account-cross-Region\&quot;&gt; Cross-account cross-Region CloudWatch console&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putMetricAlarmInput  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTPutMetricAlarmWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutMetricAlarmInput putMetricAlarmInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTPutMetricAlarmValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putMetricAlarmInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates or updates an alarm and associates it with the specified metric, metric math expression, anomaly detection model, or Metrics Insights query. For more information about using a Metrics Insights query for an alarm, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Create_Metrics_Insights_Alarm.html\&quot;&gt;Create alarms on Metrics Insights queries&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Alarms based on anomaly detection models cannot have Auto Scaling actions.&lt;/p&gt; &lt;p&gt;When this operation creates an alarm, the alarm state is immediately set to &lt;code&gt;INSUFFICIENT_DATA&lt;/code&gt;. The alarm is then evaluated and its state is set appropriately. Any actions associated with the new state are then executed.&lt;/p&gt; &lt;p&gt;When you update an existing alarm, its state is left unchanged, but the update completely overwrites the previous configuration of the alarm.&lt;/p&gt; &lt;p&gt;If you are an IAM user, you must have Amazon EC2 permissions for some alarm operations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;iam:CreateServiceLinkedRole&lt;/code&gt; permission for all alarms with EC2 actions&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;iam:CreateServiceLinkedRole&lt;/code&gt; permissions to create an alarm with Systems Manager OpsItem or response plan actions.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The first time you create an alarm in the Amazon Web Services Management Console, the CLI, or by using the PutMetricAlarm API, CloudWatch creates the necessary service-linked role for you. The service-linked roles are called &lt;code&gt;AWSServiceRoleForCloudWatchEvents&lt;/code&gt; and &lt;code&gt;AWSServiceRoleForCloudWatchAlarms_ActionSSM&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role\&quot;&gt;Amazon Web Services service-linked role&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Each &lt;code&gt;PutMetricAlarm&lt;/code&gt; action has a maximum uncompressed payload of 120 KB.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Cross-account alarms&lt;/b&gt; &lt;/p&gt; &lt;p&gt;You can set an alarm on metrics in the current account, or in another account. To create a cross-account alarm that watches a metric in a different account, you must have completed the following pre-requisites:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The account where the metrics are located (the &lt;i&gt;sharing account&lt;/i&gt;) must already have a sharing role named &lt;b&gt;CloudWatch-CrossAccountSharingRole&lt;/b&gt;. If it does not already have this role, you must create it using the instructions in &lt;b&gt;Set up a sharing account&lt;/b&gt; in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Cross-Account-Cross-Region.html#enable-cross-account-cross-Region\&quot;&gt; Cross-account cross-Region CloudWatch console&lt;/a&gt;. The policy for that role must grant access to the ID of the account where you are creating the alarm. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The account where you are creating the alarm (the &lt;i&gt;monitoring account&lt;/i&gt;) must already have a service-linked role named &lt;b&gt;AWSServiceRoleForCloudWatchCrossAccount&lt;/b&gt; to allow CloudWatch to assume the sharing role in the sharing account. If it does not, you must create it following the directions in &lt;b&gt;Set up a monitoring account&lt;/b&gt; in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Cross-Account-Cross-Region.html#enable-cross-account-cross-Region\&quot;&gt; Cross-account cross-Region CloudWatch console&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putMetricAlarmInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPutMetricAlarmAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutMetricAlarmInput putMetricAlarmInput, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTPutMetricAlarmValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putMetricAlarmInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTPutMetricData
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putMetricDataInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPutMetricDataCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutMetricDataInput putMetricDataInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putMetricDataInput;

        // create path and map variables
        String localVarPath = "/#Action=PutMetricData";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTPutMetricDataValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutMetricDataInput putMetricDataInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTPutMetricData(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTPutMetricData(Async)");
        }

        return pOSTPutMetricDataCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putMetricDataInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Publishes metric data points to Amazon CloudWatch. CloudWatch associates the data points with the specified metric. If the specified metric does not exist, CloudWatch creates the metric. When CloudWatch creates a metric, it can take up to fifteen minutes for the metric to appear in calls to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_ListMetrics.html\&quot;&gt;ListMetrics&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can publish either individual data points in the &lt;code&gt;Value&lt;/code&gt; field, or arrays of values and the number of times each value occurred during the period by using the &lt;code&gt;Values&lt;/code&gt; and &lt;code&gt;Counts&lt;/code&gt; fields in the &lt;code&gt;MetricDatum&lt;/code&gt; structure. Using the &lt;code&gt;Values&lt;/code&gt; and &lt;code&gt;Counts&lt;/code&gt; method enables you to publish up to 150 values per metric with one &lt;code&gt;PutMetricData&lt;/code&gt; request, and supports retrieving percentile statistics on this data.&lt;/p&gt; &lt;p&gt;Each &lt;code&gt;PutMetricData&lt;/code&gt; request is limited to 1 MB in size for HTTP POST requests. You can send a payload compressed by gzip. Each request is also limited to no more than 1000 different metrics.&lt;/p&gt; &lt;p&gt;Although the &lt;code&gt;Value&lt;/code&gt; parameter accepts numbers of type &lt;code&gt;Double&lt;/code&gt;, CloudWatch rejects values that are either too small or too large. Values must be in the range of -2^360 to 2^360. In addition, special values (for example, NaN, +Infinity, -Infinity) are not supported.&lt;/p&gt; &lt;p&gt;You can use up to 30 dimensions per metric to further clarify what data the metric collects. Each dimension consists of a Name and Value pair. For more information about specifying dimensions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html\&quot;&gt;Publishing Metrics&lt;/a&gt; in the &lt;i&gt;Amazon CloudWatch User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You specify the time stamp to be associated with each data point. You can specify time stamps that are as much as two weeks before the current date, and as much as 2 hours after the current day and time.&lt;/p&gt; &lt;p&gt;Data points with time stamps from 24 hours ago or longer can take at least 48 hours to become available for &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html\&quot;&gt;GetMetricData&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html\&quot;&gt;GetMetricStatistics&lt;/a&gt; from the time they are submitted. Data points with time stamps between 3 and 24 hours ago can take as much as 2 hours to become available for for &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html\&quot;&gt;GetMetricData&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html\&quot;&gt;GetMetricStatistics&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;CloudWatch needs raw data points to calculate percentile statistics. If you publish data using a statistic set instead, you can only retrieve percentile statistics for this data if one of the following conditions is true:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;SampleCount&lt;/code&gt; value of the statistic set is 1 and &lt;code&gt;Min&lt;/code&gt;, &lt;code&gt;Max&lt;/code&gt;, and &lt;code&gt;Sum&lt;/code&gt; are all equal.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;Min&lt;/code&gt; and &lt;code&gt;Max&lt;/code&gt; are equal, and &lt;code&gt;Sum&lt;/code&gt; is equal to &lt;code&gt;Min&lt;/code&gt; multiplied by &lt;code&gt;SampleCount&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putMetricDataInput  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTPutMetricData(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutMetricDataInput putMetricDataInput) throws ApiException {
        pOSTPutMetricDataWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putMetricDataInput);
    }

    /**
     * 
     * &lt;p&gt;Publishes metric data points to Amazon CloudWatch. CloudWatch associates the data points with the specified metric. If the specified metric does not exist, CloudWatch creates the metric. When CloudWatch creates a metric, it can take up to fifteen minutes for the metric to appear in calls to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_ListMetrics.html\&quot;&gt;ListMetrics&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can publish either individual data points in the &lt;code&gt;Value&lt;/code&gt; field, or arrays of values and the number of times each value occurred during the period by using the &lt;code&gt;Values&lt;/code&gt; and &lt;code&gt;Counts&lt;/code&gt; fields in the &lt;code&gt;MetricDatum&lt;/code&gt; structure. Using the &lt;code&gt;Values&lt;/code&gt; and &lt;code&gt;Counts&lt;/code&gt; method enables you to publish up to 150 values per metric with one &lt;code&gt;PutMetricData&lt;/code&gt; request, and supports retrieving percentile statistics on this data.&lt;/p&gt; &lt;p&gt;Each &lt;code&gt;PutMetricData&lt;/code&gt; request is limited to 1 MB in size for HTTP POST requests. You can send a payload compressed by gzip. Each request is also limited to no more than 1000 different metrics.&lt;/p&gt; &lt;p&gt;Although the &lt;code&gt;Value&lt;/code&gt; parameter accepts numbers of type &lt;code&gt;Double&lt;/code&gt;, CloudWatch rejects values that are either too small or too large. Values must be in the range of -2^360 to 2^360. In addition, special values (for example, NaN, +Infinity, -Infinity) are not supported.&lt;/p&gt; &lt;p&gt;You can use up to 30 dimensions per metric to further clarify what data the metric collects. Each dimension consists of a Name and Value pair. For more information about specifying dimensions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html\&quot;&gt;Publishing Metrics&lt;/a&gt; in the &lt;i&gt;Amazon CloudWatch User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You specify the time stamp to be associated with each data point. You can specify time stamps that are as much as two weeks before the current date, and as much as 2 hours after the current day and time.&lt;/p&gt; &lt;p&gt;Data points with time stamps from 24 hours ago or longer can take at least 48 hours to become available for &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html\&quot;&gt;GetMetricData&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html\&quot;&gt;GetMetricStatistics&lt;/a&gt; from the time they are submitted. Data points with time stamps between 3 and 24 hours ago can take as much as 2 hours to become available for for &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html\&quot;&gt;GetMetricData&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html\&quot;&gt;GetMetricStatistics&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;CloudWatch needs raw data points to calculate percentile statistics. If you publish data using a statistic set instead, you can only retrieve percentile statistics for this data if one of the following conditions is true:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;SampleCount&lt;/code&gt; value of the statistic set is 1 and &lt;code&gt;Min&lt;/code&gt;, &lt;code&gt;Max&lt;/code&gt;, and &lt;code&gt;Sum&lt;/code&gt; are all equal.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;Min&lt;/code&gt; and &lt;code&gt;Max&lt;/code&gt; are equal, and &lt;code&gt;Sum&lt;/code&gt; is equal to &lt;code&gt;Min&lt;/code&gt; multiplied by &lt;code&gt;SampleCount&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putMetricDataInput  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTPutMetricDataWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutMetricDataInput putMetricDataInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTPutMetricDataValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putMetricDataInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Publishes metric data points to Amazon CloudWatch. CloudWatch associates the data points with the specified metric. If the specified metric does not exist, CloudWatch creates the metric. When CloudWatch creates a metric, it can take up to fifteen minutes for the metric to appear in calls to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_ListMetrics.html\&quot;&gt;ListMetrics&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can publish either individual data points in the &lt;code&gt;Value&lt;/code&gt; field, or arrays of values and the number of times each value occurred during the period by using the &lt;code&gt;Values&lt;/code&gt; and &lt;code&gt;Counts&lt;/code&gt; fields in the &lt;code&gt;MetricDatum&lt;/code&gt; structure. Using the &lt;code&gt;Values&lt;/code&gt; and &lt;code&gt;Counts&lt;/code&gt; method enables you to publish up to 150 values per metric with one &lt;code&gt;PutMetricData&lt;/code&gt; request, and supports retrieving percentile statistics on this data.&lt;/p&gt; &lt;p&gt;Each &lt;code&gt;PutMetricData&lt;/code&gt; request is limited to 1 MB in size for HTTP POST requests. You can send a payload compressed by gzip. Each request is also limited to no more than 1000 different metrics.&lt;/p&gt; &lt;p&gt;Although the &lt;code&gt;Value&lt;/code&gt; parameter accepts numbers of type &lt;code&gt;Double&lt;/code&gt;, CloudWatch rejects values that are either too small or too large. Values must be in the range of -2^360 to 2^360. In addition, special values (for example, NaN, +Infinity, -Infinity) are not supported.&lt;/p&gt; &lt;p&gt;You can use up to 30 dimensions per metric to further clarify what data the metric collects. Each dimension consists of a Name and Value pair. For more information about specifying dimensions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html\&quot;&gt;Publishing Metrics&lt;/a&gt; in the &lt;i&gt;Amazon CloudWatch User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You specify the time stamp to be associated with each data point. You can specify time stamps that are as much as two weeks before the current date, and as much as 2 hours after the current day and time.&lt;/p&gt; &lt;p&gt;Data points with time stamps from 24 hours ago or longer can take at least 48 hours to become available for &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html\&quot;&gt;GetMetricData&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html\&quot;&gt;GetMetricStatistics&lt;/a&gt; from the time they are submitted. Data points with time stamps between 3 and 24 hours ago can take as much as 2 hours to become available for for &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html\&quot;&gt;GetMetricData&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html\&quot;&gt;GetMetricStatistics&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;CloudWatch needs raw data points to calculate percentile statistics. If you publish data using a statistic set instead, you can only retrieve percentile statistics for this data if one of the following conditions is true:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;SampleCount&lt;/code&gt; value of the statistic set is 1 and &lt;code&gt;Min&lt;/code&gt;, &lt;code&gt;Max&lt;/code&gt;, and &lt;code&gt;Sum&lt;/code&gt; are all equal.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;Min&lt;/code&gt; and &lt;code&gt;Max&lt;/code&gt; are equal, and &lt;code&gt;Sum&lt;/code&gt; is equal to &lt;code&gt;Min&lt;/code&gt; multiplied by &lt;code&gt;SampleCount&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putMetricDataInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPutMetricDataAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutMetricDataInput putMetricDataInput, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTPutMetricDataValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putMetricDataInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTPutMetricStream
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putMetricStreamInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPutMetricStreamCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutMetricStreamInput putMetricStreamInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putMetricStreamInput;

        // create path and map variables
        String localVarPath = "/#Action=PutMetricStream";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTPutMetricStreamValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutMetricStreamInput putMetricStreamInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTPutMetricStream(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTPutMetricStream(Async)");
        }

        return pOSTPutMetricStreamCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putMetricStreamInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates or updates a metric stream. Metric streams can automatically stream CloudWatch metrics to Amazon Web Services destinations, including Amazon S3, and to many third-party solutions.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Metric-Streams.html\&quot;&gt; Using Metric Streams&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To create a metric stream, you must be signed in to an account that has the &lt;code&gt;iam:PassRole&lt;/code&gt; permission and either the &lt;code&gt;CloudWatchFullAccess&lt;/code&gt; policy or the &lt;code&gt;cloudwatch:PutMetricStream&lt;/code&gt; permission.&lt;/p&gt; &lt;p&gt;When you create or update a metric stream, you choose one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Stream metrics from all metric namespaces in the account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Stream metrics from all metric namespaces in the account, except for the namespaces that you list in &lt;code&gt;ExcludeFilters&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Stream metrics from only the metric namespaces that you list in &lt;code&gt;IncludeFilters&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;By default, a metric stream always sends the &lt;code&gt;MAX&lt;/code&gt;, &lt;code&gt;MIN&lt;/code&gt;, &lt;code&gt;SUM&lt;/code&gt;, and &lt;code&gt;SAMPLECOUNT&lt;/code&gt; statistics for each metric that is streamed. You can use the &lt;code&gt;StatisticsConfigurations&lt;/code&gt; parameter to have the metric stream send additional statistics in the stream. Streaming additional statistics incurs additional costs. For more information, see &lt;a href&#x3D;\&quot;https://aws.amazon.com/cloudwatch/pricing/\&quot;&gt;Amazon CloudWatch Pricing&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;When you use &lt;code&gt;PutMetricStream&lt;/code&gt; to create a new metric stream, the stream is created in the &lt;code&gt;running&lt;/code&gt; state. If you use it to update an existing stream, the state of the stream is not changed.&lt;/p&gt; &lt;p&gt;If you are using CloudWatch cross-account observability and you create a metric stream in a monitoring account, you can choose whether to include metrics from source accounts in the stream. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Unified-Cross-Account.html\&quot;&gt;CloudWatch cross-account observability&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putMetricStreamInput  (optional)
     * @return PutMetricStreamOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public PutMetricStreamOutput pOSTPutMetricStream(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutMetricStreamInput putMetricStreamInput) throws ApiException {
        ApiResponse<PutMetricStreamOutput> localVarResp = pOSTPutMetricStreamWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putMetricStreamInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates or updates a metric stream. Metric streams can automatically stream CloudWatch metrics to Amazon Web Services destinations, including Amazon S3, and to many third-party solutions.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Metric-Streams.html\&quot;&gt; Using Metric Streams&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To create a metric stream, you must be signed in to an account that has the &lt;code&gt;iam:PassRole&lt;/code&gt; permission and either the &lt;code&gt;CloudWatchFullAccess&lt;/code&gt; policy or the &lt;code&gt;cloudwatch:PutMetricStream&lt;/code&gt; permission.&lt;/p&gt; &lt;p&gt;When you create or update a metric stream, you choose one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Stream metrics from all metric namespaces in the account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Stream metrics from all metric namespaces in the account, except for the namespaces that you list in &lt;code&gt;ExcludeFilters&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Stream metrics from only the metric namespaces that you list in &lt;code&gt;IncludeFilters&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;By default, a metric stream always sends the &lt;code&gt;MAX&lt;/code&gt;, &lt;code&gt;MIN&lt;/code&gt;, &lt;code&gt;SUM&lt;/code&gt;, and &lt;code&gt;SAMPLECOUNT&lt;/code&gt; statistics for each metric that is streamed. You can use the &lt;code&gt;StatisticsConfigurations&lt;/code&gt; parameter to have the metric stream send additional statistics in the stream. Streaming additional statistics incurs additional costs. For more information, see &lt;a href&#x3D;\&quot;https://aws.amazon.com/cloudwatch/pricing/\&quot;&gt;Amazon CloudWatch Pricing&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;When you use &lt;code&gt;PutMetricStream&lt;/code&gt; to create a new metric stream, the stream is created in the &lt;code&gt;running&lt;/code&gt; state. If you use it to update an existing stream, the state of the stream is not changed.&lt;/p&gt; &lt;p&gt;If you are using CloudWatch cross-account observability and you create a metric stream in a monitoring account, you can choose whether to include metrics from source accounts in the stream. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Unified-Cross-Account.html\&quot;&gt;CloudWatch cross-account observability&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putMetricStreamInput  (optional)
     * @return ApiResponse&lt;PutMetricStreamOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PutMetricStreamOutput> pOSTPutMetricStreamWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutMetricStreamInput putMetricStreamInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTPutMetricStreamValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putMetricStreamInput, null);
        Type localVarReturnType = new TypeToken<PutMetricStreamOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates or updates a metric stream. Metric streams can automatically stream CloudWatch metrics to Amazon Web Services destinations, including Amazon S3, and to many third-party solutions.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Metric-Streams.html\&quot;&gt; Using Metric Streams&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To create a metric stream, you must be signed in to an account that has the &lt;code&gt;iam:PassRole&lt;/code&gt; permission and either the &lt;code&gt;CloudWatchFullAccess&lt;/code&gt; policy or the &lt;code&gt;cloudwatch:PutMetricStream&lt;/code&gt; permission.&lt;/p&gt; &lt;p&gt;When you create or update a metric stream, you choose one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Stream metrics from all metric namespaces in the account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Stream metrics from all metric namespaces in the account, except for the namespaces that you list in &lt;code&gt;ExcludeFilters&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Stream metrics from only the metric namespaces that you list in &lt;code&gt;IncludeFilters&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;By default, a metric stream always sends the &lt;code&gt;MAX&lt;/code&gt;, &lt;code&gt;MIN&lt;/code&gt;, &lt;code&gt;SUM&lt;/code&gt;, and &lt;code&gt;SAMPLECOUNT&lt;/code&gt; statistics for each metric that is streamed. You can use the &lt;code&gt;StatisticsConfigurations&lt;/code&gt; parameter to have the metric stream send additional statistics in the stream. Streaming additional statistics incurs additional costs. For more information, see &lt;a href&#x3D;\&quot;https://aws.amazon.com/cloudwatch/pricing/\&quot;&gt;Amazon CloudWatch Pricing&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;When you use &lt;code&gt;PutMetricStream&lt;/code&gt; to create a new metric stream, the stream is created in the &lt;code&gt;running&lt;/code&gt; state. If you use it to update an existing stream, the state of the stream is not changed.&lt;/p&gt; &lt;p&gt;If you are using CloudWatch cross-account observability and you create a metric stream in a monitoring account, you can choose whether to include metrics from source accounts in the stream. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Unified-Cross-Account.html\&quot;&gt;CloudWatch cross-account observability&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putMetricStreamInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPutMetricStreamAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutMetricStreamInput putMetricStreamInput, final ApiCallback<PutMetricStreamOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTPutMetricStreamValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putMetricStreamInput, _callback);
        Type localVarReturnType = new TypeToken<PutMetricStreamOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTSetAlarmState
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setAlarmStateInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidFormatFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetAlarmStateCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetAlarmStateInput setAlarmStateInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setAlarmStateInput;

        // create path and map variables
        String localVarPath = "/#Action=SetAlarmState";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTSetAlarmStateValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetAlarmStateInput setAlarmStateInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTSetAlarmState(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTSetAlarmState(Async)");
        }

        return pOSTSetAlarmStateCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setAlarmStateInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Temporarily sets the state of an alarm for testing purposes. When the updated state differs from the previous value, the action configured for the appropriate state is invoked. For example, if your alarm is configured to send an Amazon SNS message when an alarm is triggered, temporarily changing the alarm state to &lt;code&gt;ALARM&lt;/code&gt; sends an SNS message.&lt;/p&gt; &lt;p&gt;Metric alarms returns to their actual state quickly, often within seconds. Because the metric alarm state change happens quickly, it is typically only visible in the alarm&#39;s &lt;b&gt;History&lt;/b&gt; tab in the Amazon CloudWatch console or through &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeAlarmHistory.html\&quot;&gt;DescribeAlarmHistory&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you use &lt;code&gt;SetAlarmState&lt;/code&gt; on a composite alarm, the composite alarm is not guaranteed to return to its actual state. It returns to its actual state only once any of its children alarms change state. It is also reevaluated if you update its configuration.&lt;/p&gt; &lt;p&gt;If an alarm triggers EC2 Auto Scaling policies or application Auto Scaling policies, you must include information in the &lt;code&gt;StateReasonData&lt;/code&gt; parameter to enable the policy to take the correct action.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setAlarmStateInput  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidFormatFault </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTSetAlarmState(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetAlarmStateInput setAlarmStateInput) throws ApiException {
        pOSTSetAlarmStateWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setAlarmStateInput);
    }

    /**
     * 
     * &lt;p&gt;Temporarily sets the state of an alarm for testing purposes. When the updated state differs from the previous value, the action configured for the appropriate state is invoked. For example, if your alarm is configured to send an Amazon SNS message when an alarm is triggered, temporarily changing the alarm state to &lt;code&gt;ALARM&lt;/code&gt; sends an SNS message.&lt;/p&gt; &lt;p&gt;Metric alarms returns to their actual state quickly, often within seconds. Because the metric alarm state change happens quickly, it is typically only visible in the alarm&#39;s &lt;b&gt;History&lt;/b&gt; tab in the Amazon CloudWatch console or through &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeAlarmHistory.html\&quot;&gt;DescribeAlarmHistory&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you use &lt;code&gt;SetAlarmState&lt;/code&gt; on a composite alarm, the composite alarm is not guaranteed to return to its actual state. It returns to its actual state only once any of its children alarms change state. It is also reevaluated if you update its configuration.&lt;/p&gt; &lt;p&gt;If an alarm triggers EC2 Auto Scaling policies or application Auto Scaling policies, you must include information in the &lt;code&gt;StateReasonData&lt;/code&gt; parameter to enable the policy to take the correct action.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setAlarmStateInput  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidFormatFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTSetAlarmStateWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetAlarmStateInput setAlarmStateInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTSetAlarmStateValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setAlarmStateInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Temporarily sets the state of an alarm for testing purposes. When the updated state differs from the previous value, the action configured for the appropriate state is invoked. For example, if your alarm is configured to send an Amazon SNS message when an alarm is triggered, temporarily changing the alarm state to &lt;code&gt;ALARM&lt;/code&gt; sends an SNS message.&lt;/p&gt; &lt;p&gt;Metric alarms returns to their actual state quickly, often within seconds. Because the metric alarm state change happens quickly, it is typically only visible in the alarm&#39;s &lt;b&gt;History&lt;/b&gt; tab in the Amazon CloudWatch console or through &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeAlarmHistory.html\&quot;&gt;DescribeAlarmHistory&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you use &lt;code&gt;SetAlarmState&lt;/code&gt; on a composite alarm, the composite alarm is not guaranteed to return to its actual state. It returns to its actual state only once any of its children alarms change state. It is also reevaluated if you update its configuration.&lt;/p&gt; &lt;p&gt;If an alarm triggers EC2 Auto Scaling policies or application Auto Scaling policies, you must include information in the &lt;code&gt;StateReasonData&lt;/code&gt; parameter to enable the policy to take the correct action.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setAlarmStateInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidFormatFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetAlarmStateAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetAlarmStateInput setAlarmStateInput, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTSetAlarmStateValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setAlarmStateInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTStartMetricStreams
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param startMetricStreamsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTStartMetricStreamsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StartMetricStreamsInput startMetricStreamsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startMetricStreamsInput;

        // create path and map variables
        String localVarPath = "/#Action=StartMetricStreams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTStartMetricStreamsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StartMetricStreamsInput startMetricStreamsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTStartMetricStreams(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTStartMetricStreams(Async)");
        }

        return pOSTStartMetricStreamsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, startMetricStreamsInput, _callback);

    }

    /**
     * 
     * Starts the streaming of metrics for one or more of your metric streams.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param startMetricStreamsInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTStartMetricStreams(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StartMetricStreamsInput startMetricStreamsInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTStartMetricStreamsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, startMetricStreamsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Starts the streaming of metrics for one or more of your metric streams.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param startMetricStreamsInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTStartMetricStreamsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StartMetricStreamsInput startMetricStreamsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTStartMetricStreamsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, startMetricStreamsInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Starts the streaming of metrics for one or more of your metric streams.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param startMetricStreamsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTStartMetricStreamsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StartMetricStreamsInput startMetricStreamsInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTStartMetricStreamsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, startMetricStreamsInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTStopMetricStreams
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stopMetricStreamsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTStopMetricStreamsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StopMetricStreamsInput stopMetricStreamsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = stopMetricStreamsInput;

        // create path and map variables
        String localVarPath = "/#Action=StopMetricStreams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTStopMetricStreamsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StopMetricStreamsInput stopMetricStreamsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTStopMetricStreams(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTStopMetricStreams(Async)");
        }

        return pOSTStopMetricStreamsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stopMetricStreamsInput, _callback);

    }

    /**
     * 
     * Stops the streaming of metrics for one or more of your metric streams.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stopMetricStreamsInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTStopMetricStreams(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StopMetricStreamsInput stopMetricStreamsInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTStopMetricStreamsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stopMetricStreamsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Stops the streaming of metrics for one or more of your metric streams.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stopMetricStreamsInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTStopMetricStreamsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StopMetricStreamsInput stopMetricStreamsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTStopMetricStreamsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stopMetricStreamsInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Stops the streaming of metrics for one or more of your metric streams.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stopMetricStreamsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> MissingRequiredParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTStopMetricStreamsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StopMetricStreamsInput stopMetricStreamsInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTStopMetricStreamsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stopMetricStreamsInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTTagResource
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tagResourceInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTTagResourceCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, TagResourceInput tagResourceInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagResourceInput;

        // create path and map variables
        String localVarPath = "/#Action=TagResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTTagResourceValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, TagResourceInput tagResourceInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTTagResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTTagResource(Async)");
        }

        return pOSTTagResourceCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tagResourceInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Assigns one or more tags (key-value pairs) to the specified CloudWatch resource. Currently, the only CloudWatch resources that can be tagged are alarms and Contributor Insights rules.&lt;/p&gt; &lt;p&gt;Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.&lt;/p&gt; &lt;p&gt;Tags don&#39;t have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;TagResource&lt;/code&gt; action with an alarm that already has tags. If you specify a new tag key for the alarm, this tag is appended to the list of tags associated with the alarm. If you specify a tag key that is already associated with the alarm, the new tag value that you specify replaces the previous value for that tag.&lt;/p&gt; &lt;p&gt;You can associate as many as 50 tags with a CloudWatch resource.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tagResourceInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTTagResource(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, TagResourceInput tagResourceInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTTagResourceWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tagResourceInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Assigns one or more tags (key-value pairs) to the specified CloudWatch resource. Currently, the only CloudWatch resources that can be tagged are alarms and Contributor Insights rules.&lt;/p&gt; &lt;p&gt;Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.&lt;/p&gt; &lt;p&gt;Tags don&#39;t have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;TagResource&lt;/code&gt; action with an alarm that already has tags. If you specify a new tag key for the alarm, this tag is appended to the list of tags associated with the alarm. If you specify a tag key that is already associated with the alarm, the new tag value that you specify replaces the previous value for that tag.&lt;/p&gt; &lt;p&gt;You can associate as many as 50 tags with a CloudWatch resource.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tagResourceInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTTagResourceWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, TagResourceInput tagResourceInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTTagResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tagResourceInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Assigns one or more tags (key-value pairs) to the specified CloudWatch resource. Currently, the only CloudWatch resources that can be tagged are alarms and Contributor Insights rules.&lt;/p&gt; &lt;p&gt;Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.&lt;/p&gt; &lt;p&gt;Tags don&#39;t have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;TagResource&lt;/code&gt; action with an alarm that already has tags. If you specify a new tag key for the alarm, this tag is appended to the list of tags associated with the alarm. If you specify a tag key that is already associated with the alarm, the new tag value that you specify replaces the previous value for that tag.&lt;/p&gt; &lt;p&gt;You can associate as many as 50 tags with a CloudWatch resource.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tagResourceInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTTagResourceAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, TagResourceInput tagResourceInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTTagResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tagResourceInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTUntagResource
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param untagResourceInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTUntagResourceCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UntagResourceInput untagResourceInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = untagResourceInput;

        // create path and map variables
        String localVarPath = "/#Action=UntagResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTUntagResourceValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UntagResourceInput untagResourceInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTUntagResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTUntagResource(Async)");
        }

        return pOSTUntagResourceCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, untagResourceInput, _callback);

    }

    /**
     * 
     * Removes one or more tags from the specified resource.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param untagResourceInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTUntagResource(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UntagResourceInput untagResourceInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTUntagResourceWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, untagResourceInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes one or more tags from the specified resource.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param untagResourceInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTUntagResourceWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UntagResourceInput untagResourceInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTUntagResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, untagResourceInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes one or more tags from the specified resource.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param untagResourceInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalServiceFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTUntagResourceAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UntagResourceInput untagResourceInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTUntagResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, untagResourceInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
