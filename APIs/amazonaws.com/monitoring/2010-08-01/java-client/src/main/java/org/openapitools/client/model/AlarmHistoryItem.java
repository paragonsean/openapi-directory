/*
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.AlarmType;
import org.openapitools.client.model.HistoryItemType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the history of a specific alarm.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:23.972078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AlarmHistoryItem {
  public static final String SERIALIZED_NAME_ALARM_NAME = "AlarmName";
  @SerializedName(SERIALIZED_NAME_ALARM_NAME)
  private String alarmName;

  public static final String SERIALIZED_NAME_ALARM_TYPE = "AlarmType";
  @SerializedName(SERIALIZED_NAME_ALARM_TYPE)
  private AlarmType alarmType;

  public static final String SERIALIZED_NAME_TIMESTAMP = "Timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_HISTORY_ITEM_TYPE = "HistoryItemType";
  @SerializedName(SERIALIZED_NAME_HISTORY_ITEM_TYPE)
  private HistoryItemType historyItemType;

  public static final String SERIALIZED_NAME_HISTORY_SUMMARY = "HistorySummary";
  @SerializedName(SERIALIZED_NAME_HISTORY_SUMMARY)
  private String historySummary;

  public static final String SERIALIZED_NAME_HISTORY_DATA = "HistoryData";
  @SerializedName(SERIALIZED_NAME_HISTORY_DATA)
  private String historyData;

  public AlarmHistoryItem() {
  }

  public AlarmHistoryItem alarmName(String alarmName) {
    this.alarmName = alarmName;
    return this;
  }

  /**
   * Get alarmName
   * @return alarmName
   */
  @javax.annotation.Nullable
  public String getAlarmName() {
    return alarmName;
  }

  public void setAlarmName(String alarmName) {
    this.alarmName = alarmName;
  }


  public AlarmHistoryItem alarmType(AlarmType alarmType) {
    this.alarmType = alarmType;
    return this;
  }

  /**
   * Get alarmType
   * @return alarmType
   */
  @javax.annotation.Nullable
  public AlarmType getAlarmType() {
    return alarmType;
  }

  public void setAlarmType(AlarmType alarmType) {
    this.alarmType = alarmType;
  }


  public AlarmHistoryItem timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public AlarmHistoryItem historyItemType(HistoryItemType historyItemType) {
    this.historyItemType = historyItemType;
    return this;
  }

  /**
   * Get historyItemType
   * @return historyItemType
   */
  @javax.annotation.Nullable
  public HistoryItemType getHistoryItemType() {
    return historyItemType;
  }

  public void setHistoryItemType(HistoryItemType historyItemType) {
    this.historyItemType = historyItemType;
  }


  public AlarmHistoryItem historySummary(String historySummary) {
    this.historySummary = historySummary;
    return this;
  }

  /**
   * Get historySummary
   * @return historySummary
   */
  @javax.annotation.Nullable
  public String getHistorySummary() {
    return historySummary;
  }

  public void setHistorySummary(String historySummary) {
    this.historySummary = historySummary;
  }


  public AlarmHistoryItem historyData(String historyData) {
    this.historyData = historyData;
    return this;
  }

  /**
   * Get historyData
   * @return historyData
   */
  @javax.annotation.Nullable
  public String getHistoryData() {
    return historyData;
  }

  public void setHistoryData(String historyData) {
    this.historyData = historyData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlarmHistoryItem alarmHistoryItem = (AlarmHistoryItem) o;
    return Objects.equals(this.alarmName, alarmHistoryItem.alarmName) &&
        Objects.equals(this.alarmType, alarmHistoryItem.alarmType) &&
        Objects.equals(this.timestamp, alarmHistoryItem.timestamp) &&
        Objects.equals(this.historyItemType, alarmHistoryItem.historyItemType) &&
        Objects.equals(this.historySummary, alarmHistoryItem.historySummary) &&
        Objects.equals(this.historyData, alarmHistoryItem.historyData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alarmName, alarmType, timestamp, historyItemType, historySummary, historyData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlarmHistoryItem {\n");
    sb.append("    alarmName: ").append(toIndentedString(alarmName)).append("\n");
    sb.append("    alarmType: ").append(toIndentedString(alarmType)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    historyItemType: ").append(toIndentedString(historyItemType)).append("\n");
    sb.append("    historySummary: ").append(toIndentedString(historySummary)).append("\n");
    sb.append("    historyData: ").append(toIndentedString(historyData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AlarmName");
    openapiFields.add("AlarmType");
    openapiFields.add("Timestamp");
    openapiFields.add("HistoryItemType");
    openapiFields.add("HistorySummary");
    openapiFields.add("HistoryData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AlarmHistoryItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlarmHistoryItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlarmHistoryItem is not found in the empty JSON string", AlarmHistoryItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AlarmHistoryItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlarmHistoryItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AlarmName`
      if (jsonObj.get("AlarmName") != null && !jsonObj.get("AlarmName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AlarmName"));
      }
      // validate the optional field `AlarmType`
      if (jsonObj.get("AlarmType") != null && !jsonObj.get("AlarmType").isJsonNull()) {
        AlarmType.validateJsonElement(jsonObj.get("AlarmType"));
      }
      // validate the optional field `Timestamp`
      if (jsonObj.get("Timestamp") != null && !jsonObj.get("Timestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("Timestamp"));
      }
      // validate the optional field `HistoryItemType`
      if (jsonObj.get("HistoryItemType") != null && !jsonObj.get("HistoryItemType").isJsonNull()) {
        HistoryItemType.validateJsonElement(jsonObj.get("HistoryItemType"));
      }
      // validate the optional field `HistorySummary`
      if (jsonObj.get("HistorySummary") != null && !jsonObj.get("HistorySummary").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("HistorySummary"));
      }
      // validate the optional field `HistoryData`
      if (jsonObj.get("HistoryData") != null && !jsonObj.get("HistoryData").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("HistoryData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlarmHistoryItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlarmHistoryItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlarmHistoryItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlarmHistoryItem.class));

       return (TypeAdapter<T>) new TypeAdapter<AlarmHistoryItem>() {
           @Override
           public void write(JsonWriter out, AlarmHistoryItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlarmHistoryItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AlarmHistoryItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AlarmHistoryItem
   * @throws IOException if the JSON string is invalid with respect to AlarmHistoryItem
   */
  public static AlarmHistoryItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlarmHistoryItem.class);
  }

  /**
   * Convert an instance of AlarmHistoryItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

