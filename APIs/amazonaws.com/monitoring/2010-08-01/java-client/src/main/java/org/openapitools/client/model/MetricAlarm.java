/*
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ComparisonOperator;
import org.openapitools.client.model.EvaluationState;
import org.openapitools.client.model.StandardUnit;
import org.openapitools.client.model.StateValue;
import org.openapitools.client.model.Statistic;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The details about a metric alarm.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:23.972078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MetricAlarm {
  public static final String SERIALIZED_NAME_ALARM_NAME = "AlarmName";
  @SerializedName(SERIALIZED_NAME_ALARM_NAME)
  private String alarmName;

  public static final String SERIALIZED_NAME_ALARM_ARN = "AlarmArn";
  @SerializedName(SERIALIZED_NAME_ALARM_ARN)
  private String alarmArn;

  public static final String SERIALIZED_NAME_ALARM_DESCRIPTION = "AlarmDescription";
  @SerializedName(SERIALIZED_NAME_ALARM_DESCRIPTION)
  private String alarmDescription;

  public static final String SERIALIZED_NAME_ALARM_CONFIGURATION_UPDATED_TIMESTAMP = "AlarmConfigurationUpdatedTimestamp";
  @SerializedName(SERIALIZED_NAME_ALARM_CONFIGURATION_UPDATED_TIMESTAMP)
  private OffsetDateTime alarmConfigurationUpdatedTimestamp;

  public static final String SERIALIZED_NAME_ACTIONS_ENABLED = "ActionsEnabled";
  @SerializedName(SERIALIZED_NAME_ACTIONS_ENABLED)
  private Boolean actionsEnabled;

  public static final String SERIALIZED_NAME_OK_ACTIONS = "OKActions";
  @SerializedName(SERIALIZED_NAME_OK_ACTIONS)
  private List okActions;

  public static final String SERIALIZED_NAME_ALARM_ACTIONS = "AlarmActions";
  @SerializedName(SERIALIZED_NAME_ALARM_ACTIONS)
  private List alarmActions;

  public static final String SERIALIZED_NAME_INSUFFICIENT_DATA_ACTIONS = "InsufficientDataActions";
  @SerializedName(SERIALIZED_NAME_INSUFFICIENT_DATA_ACTIONS)
  private List insufficientDataActions;

  public static final String SERIALIZED_NAME_STATE_VALUE = "StateValue";
  @SerializedName(SERIALIZED_NAME_STATE_VALUE)
  private StateValue stateValue;

  public static final String SERIALIZED_NAME_STATE_REASON = "StateReason";
  @SerializedName(SERIALIZED_NAME_STATE_REASON)
  private String stateReason;

  public static final String SERIALIZED_NAME_STATE_REASON_DATA = "StateReasonData";
  @SerializedName(SERIALIZED_NAME_STATE_REASON_DATA)
  private String stateReasonData;

  public static final String SERIALIZED_NAME_STATE_UPDATED_TIMESTAMP = "StateUpdatedTimestamp";
  @SerializedName(SERIALIZED_NAME_STATE_UPDATED_TIMESTAMP)
  private OffsetDateTime stateUpdatedTimestamp;

  public static final String SERIALIZED_NAME_METRIC_NAME = "MetricName";
  @SerializedName(SERIALIZED_NAME_METRIC_NAME)
  private String metricName;

  public static final String SERIALIZED_NAME_NAMESPACE = "Namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public static final String SERIALIZED_NAME_STATISTIC = "Statistic";
  @SerializedName(SERIALIZED_NAME_STATISTIC)
  private Statistic statistic;

  public static final String SERIALIZED_NAME_EXTENDED_STATISTIC = "ExtendedStatistic";
  @SerializedName(SERIALIZED_NAME_EXTENDED_STATISTIC)
  private String extendedStatistic;

  public static final String SERIALIZED_NAME_DIMENSIONS = "Dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private List dimensions;

  public static final String SERIALIZED_NAME_PERIOD = "Period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private Integer period;

  public static final String SERIALIZED_NAME_UNIT = "Unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private StandardUnit unit;

  public static final String SERIALIZED_NAME_EVALUATION_PERIODS = "EvaluationPeriods";
  @SerializedName(SERIALIZED_NAME_EVALUATION_PERIODS)
  private Integer evaluationPeriods;

  public static final String SERIALIZED_NAME_DATAPOINTS_TO_ALARM = "DatapointsToAlarm";
  @SerializedName(SERIALIZED_NAME_DATAPOINTS_TO_ALARM)
  private Integer datapointsToAlarm;

  public static final String SERIALIZED_NAME_THRESHOLD = "Threshold";
  @SerializedName(SERIALIZED_NAME_THRESHOLD)
  private Double threshold;

  public static final String SERIALIZED_NAME_COMPARISON_OPERATOR = "ComparisonOperator";
  @SerializedName(SERIALIZED_NAME_COMPARISON_OPERATOR)
  private ComparisonOperator comparisonOperator;

  public static final String SERIALIZED_NAME_TREAT_MISSING_DATA = "TreatMissingData";
  @SerializedName(SERIALIZED_NAME_TREAT_MISSING_DATA)
  private String treatMissingData;

  public static final String SERIALIZED_NAME_EVALUATE_LOW_SAMPLE_COUNT_PERCENTILE = "EvaluateLowSampleCountPercentile";
  @SerializedName(SERIALIZED_NAME_EVALUATE_LOW_SAMPLE_COUNT_PERCENTILE)
  private String evaluateLowSampleCountPercentile;

  public static final String SERIALIZED_NAME_METRICS = "Metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private List metrics;

  public static final String SERIALIZED_NAME_THRESHOLD_METRIC_ID = "ThresholdMetricId";
  @SerializedName(SERIALIZED_NAME_THRESHOLD_METRIC_ID)
  private String thresholdMetricId;

  public static final String SERIALIZED_NAME_EVALUATION_STATE = "EvaluationState";
  @SerializedName(SERIALIZED_NAME_EVALUATION_STATE)
  private EvaluationState evaluationState;

  public static final String SERIALIZED_NAME_STATE_TRANSITIONED_TIMESTAMP = "StateTransitionedTimestamp";
  @SerializedName(SERIALIZED_NAME_STATE_TRANSITIONED_TIMESTAMP)
  private OffsetDateTime stateTransitionedTimestamp;

  public MetricAlarm() {
  }

  public MetricAlarm alarmName(String alarmName) {
    this.alarmName = alarmName;
    return this;
  }

  /**
   * Get alarmName
   * @return alarmName
   */
  @javax.annotation.Nullable
  public String getAlarmName() {
    return alarmName;
  }

  public void setAlarmName(String alarmName) {
    this.alarmName = alarmName;
  }


  public MetricAlarm alarmArn(String alarmArn) {
    this.alarmArn = alarmArn;
    return this;
  }

  /**
   * Get alarmArn
   * @return alarmArn
   */
  @javax.annotation.Nullable
  public String getAlarmArn() {
    return alarmArn;
  }

  public void setAlarmArn(String alarmArn) {
    this.alarmArn = alarmArn;
  }


  public MetricAlarm alarmDescription(String alarmDescription) {
    this.alarmDescription = alarmDescription;
    return this;
  }

  /**
   * Get alarmDescription
   * @return alarmDescription
   */
  @javax.annotation.Nullable
  public String getAlarmDescription() {
    return alarmDescription;
  }

  public void setAlarmDescription(String alarmDescription) {
    this.alarmDescription = alarmDescription;
  }


  public MetricAlarm alarmConfigurationUpdatedTimestamp(OffsetDateTime alarmConfigurationUpdatedTimestamp) {
    this.alarmConfigurationUpdatedTimestamp = alarmConfigurationUpdatedTimestamp;
    return this;
  }

  /**
   * Get alarmConfigurationUpdatedTimestamp
   * @return alarmConfigurationUpdatedTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAlarmConfigurationUpdatedTimestamp() {
    return alarmConfigurationUpdatedTimestamp;
  }

  public void setAlarmConfigurationUpdatedTimestamp(OffsetDateTime alarmConfigurationUpdatedTimestamp) {
    this.alarmConfigurationUpdatedTimestamp = alarmConfigurationUpdatedTimestamp;
  }


  public MetricAlarm actionsEnabled(Boolean actionsEnabled) {
    this.actionsEnabled = actionsEnabled;
    return this;
  }

  /**
   * Get actionsEnabled
   * @return actionsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getActionsEnabled() {
    return actionsEnabled;
  }

  public void setActionsEnabled(Boolean actionsEnabled) {
    this.actionsEnabled = actionsEnabled;
  }


  public MetricAlarm okActions(List okActions) {
    this.okActions = okActions;
    return this;
  }

  /**
   * Get okActions
   * @return okActions
   */
  @javax.annotation.Nullable
  public List getOkActions() {
    return okActions;
  }

  public void setOkActions(List okActions) {
    this.okActions = okActions;
  }


  public MetricAlarm alarmActions(List alarmActions) {
    this.alarmActions = alarmActions;
    return this;
  }

  /**
   * Get alarmActions
   * @return alarmActions
   */
  @javax.annotation.Nullable
  public List getAlarmActions() {
    return alarmActions;
  }

  public void setAlarmActions(List alarmActions) {
    this.alarmActions = alarmActions;
  }


  public MetricAlarm insufficientDataActions(List insufficientDataActions) {
    this.insufficientDataActions = insufficientDataActions;
    return this;
  }

  /**
   * Get insufficientDataActions
   * @return insufficientDataActions
   */
  @javax.annotation.Nullable
  public List getInsufficientDataActions() {
    return insufficientDataActions;
  }

  public void setInsufficientDataActions(List insufficientDataActions) {
    this.insufficientDataActions = insufficientDataActions;
  }


  public MetricAlarm stateValue(StateValue stateValue) {
    this.stateValue = stateValue;
    return this;
  }

  /**
   * Get stateValue
   * @return stateValue
   */
  @javax.annotation.Nullable
  public StateValue getStateValue() {
    return stateValue;
  }

  public void setStateValue(StateValue stateValue) {
    this.stateValue = stateValue;
  }


  public MetricAlarm stateReason(String stateReason) {
    this.stateReason = stateReason;
    return this;
  }

  /**
   * Get stateReason
   * @return stateReason
   */
  @javax.annotation.Nullable
  public String getStateReason() {
    return stateReason;
  }

  public void setStateReason(String stateReason) {
    this.stateReason = stateReason;
  }


  public MetricAlarm stateReasonData(String stateReasonData) {
    this.stateReasonData = stateReasonData;
    return this;
  }

  /**
   * Get stateReasonData
   * @return stateReasonData
   */
  @javax.annotation.Nullable
  public String getStateReasonData() {
    return stateReasonData;
  }

  public void setStateReasonData(String stateReasonData) {
    this.stateReasonData = stateReasonData;
  }


  public MetricAlarm stateUpdatedTimestamp(OffsetDateTime stateUpdatedTimestamp) {
    this.stateUpdatedTimestamp = stateUpdatedTimestamp;
    return this;
  }

  /**
   * Get stateUpdatedTimestamp
   * @return stateUpdatedTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStateUpdatedTimestamp() {
    return stateUpdatedTimestamp;
  }

  public void setStateUpdatedTimestamp(OffsetDateTime stateUpdatedTimestamp) {
    this.stateUpdatedTimestamp = stateUpdatedTimestamp;
  }


  public MetricAlarm metricName(String metricName) {
    this.metricName = metricName;
    return this;
  }

  /**
   * Get metricName
   * @return metricName
   */
  @javax.annotation.Nullable
  public String getMetricName() {
    return metricName;
  }

  public void setMetricName(String metricName) {
    this.metricName = metricName;
  }


  public MetricAlarm namespace(String namespace) {
    this.namespace = namespace;
    return this;
  }

  /**
   * Get namespace
   * @return namespace
   */
  @javax.annotation.Nullable
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  public MetricAlarm statistic(Statistic statistic) {
    this.statistic = statistic;
    return this;
  }

  /**
   * Get statistic
   * @return statistic
   */
  @javax.annotation.Nullable
  public Statistic getStatistic() {
    return statistic;
  }

  public void setStatistic(Statistic statistic) {
    this.statistic = statistic;
  }


  public MetricAlarm extendedStatistic(String extendedStatistic) {
    this.extendedStatistic = extendedStatistic;
    return this;
  }

  /**
   * Get extendedStatistic
   * @return extendedStatistic
   */
  @javax.annotation.Nullable
  public String getExtendedStatistic() {
    return extendedStatistic;
  }

  public void setExtendedStatistic(String extendedStatistic) {
    this.extendedStatistic = extendedStatistic;
  }


  public MetricAlarm dimensions(List dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  /**
   * Get dimensions
   * @return dimensions
   */
  @javax.annotation.Nullable
  public List getDimensions() {
    return dimensions;
  }

  public void setDimensions(List dimensions) {
    this.dimensions = dimensions;
  }


  public MetricAlarm period(Integer period) {
    this.period = period;
    return this;
  }

  /**
   * Get period
   * @return period
   */
  @javax.annotation.Nullable
  public Integer getPeriod() {
    return period;
  }

  public void setPeriod(Integer period) {
    this.period = period;
  }


  public MetricAlarm unit(StandardUnit unit) {
    this.unit = unit;
    return this;
  }

  /**
   * Get unit
   * @return unit
   */
  @javax.annotation.Nullable
  public StandardUnit getUnit() {
    return unit;
  }

  public void setUnit(StandardUnit unit) {
    this.unit = unit;
  }


  public MetricAlarm evaluationPeriods(Integer evaluationPeriods) {
    this.evaluationPeriods = evaluationPeriods;
    return this;
  }

  /**
   * Get evaluationPeriods
   * @return evaluationPeriods
   */
  @javax.annotation.Nullable
  public Integer getEvaluationPeriods() {
    return evaluationPeriods;
  }

  public void setEvaluationPeriods(Integer evaluationPeriods) {
    this.evaluationPeriods = evaluationPeriods;
  }


  public MetricAlarm datapointsToAlarm(Integer datapointsToAlarm) {
    this.datapointsToAlarm = datapointsToAlarm;
    return this;
  }

  /**
   * Get datapointsToAlarm
   * @return datapointsToAlarm
   */
  @javax.annotation.Nullable
  public Integer getDatapointsToAlarm() {
    return datapointsToAlarm;
  }

  public void setDatapointsToAlarm(Integer datapointsToAlarm) {
    this.datapointsToAlarm = datapointsToAlarm;
  }


  public MetricAlarm threshold(Double threshold) {
    this.threshold = threshold;
    return this;
  }

  /**
   * Get threshold
   * @return threshold
   */
  @javax.annotation.Nullable
  public Double getThreshold() {
    return threshold;
  }

  public void setThreshold(Double threshold) {
    this.threshold = threshold;
  }


  public MetricAlarm comparisonOperator(ComparisonOperator comparisonOperator) {
    this.comparisonOperator = comparisonOperator;
    return this;
  }

  /**
   * Get comparisonOperator
   * @return comparisonOperator
   */
  @javax.annotation.Nullable
  public ComparisonOperator getComparisonOperator() {
    return comparisonOperator;
  }

  public void setComparisonOperator(ComparisonOperator comparisonOperator) {
    this.comparisonOperator = comparisonOperator;
  }


  public MetricAlarm treatMissingData(String treatMissingData) {
    this.treatMissingData = treatMissingData;
    return this;
  }

  /**
   * Get treatMissingData
   * @return treatMissingData
   */
  @javax.annotation.Nullable
  public String getTreatMissingData() {
    return treatMissingData;
  }

  public void setTreatMissingData(String treatMissingData) {
    this.treatMissingData = treatMissingData;
  }


  public MetricAlarm evaluateLowSampleCountPercentile(String evaluateLowSampleCountPercentile) {
    this.evaluateLowSampleCountPercentile = evaluateLowSampleCountPercentile;
    return this;
  }

  /**
   * Get evaluateLowSampleCountPercentile
   * @return evaluateLowSampleCountPercentile
   */
  @javax.annotation.Nullable
  public String getEvaluateLowSampleCountPercentile() {
    return evaluateLowSampleCountPercentile;
  }

  public void setEvaluateLowSampleCountPercentile(String evaluateLowSampleCountPercentile) {
    this.evaluateLowSampleCountPercentile = evaluateLowSampleCountPercentile;
  }


  public MetricAlarm metrics(List metrics) {
    this.metrics = metrics;
    return this;
  }

  /**
   * Get metrics
   * @return metrics
   */
  @javax.annotation.Nullable
  public List getMetrics() {
    return metrics;
  }

  public void setMetrics(List metrics) {
    this.metrics = metrics;
  }


  public MetricAlarm thresholdMetricId(String thresholdMetricId) {
    this.thresholdMetricId = thresholdMetricId;
    return this;
  }

  /**
   * Get thresholdMetricId
   * @return thresholdMetricId
   */
  @javax.annotation.Nullable
  public String getThresholdMetricId() {
    return thresholdMetricId;
  }

  public void setThresholdMetricId(String thresholdMetricId) {
    this.thresholdMetricId = thresholdMetricId;
  }


  public MetricAlarm evaluationState(EvaluationState evaluationState) {
    this.evaluationState = evaluationState;
    return this;
  }

  /**
   * Get evaluationState
   * @return evaluationState
   */
  @javax.annotation.Nullable
  public EvaluationState getEvaluationState() {
    return evaluationState;
  }

  public void setEvaluationState(EvaluationState evaluationState) {
    this.evaluationState = evaluationState;
  }


  public MetricAlarm stateTransitionedTimestamp(OffsetDateTime stateTransitionedTimestamp) {
    this.stateTransitionedTimestamp = stateTransitionedTimestamp;
    return this;
  }

  /**
   * Get stateTransitionedTimestamp
   * @return stateTransitionedTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStateTransitionedTimestamp() {
    return stateTransitionedTimestamp;
  }

  public void setStateTransitionedTimestamp(OffsetDateTime stateTransitionedTimestamp) {
    this.stateTransitionedTimestamp = stateTransitionedTimestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricAlarm metricAlarm = (MetricAlarm) o;
    return Objects.equals(this.alarmName, metricAlarm.alarmName) &&
        Objects.equals(this.alarmArn, metricAlarm.alarmArn) &&
        Objects.equals(this.alarmDescription, metricAlarm.alarmDescription) &&
        Objects.equals(this.alarmConfigurationUpdatedTimestamp, metricAlarm.alarmConfigurationUpdatedTimestamp) &&
        Objects.equals(this.actionsEnabled, metricAlarm.actionsEnabled) &&
        Objects.equals(this.okActions, metricAlarm.okActions) &&
        Objects.equals(this.alarmActions, metricAlarm.alarmActions) &&
        Objects.equals(this.insufficientDataActions, metricAlarm.insufficientDataActions) &&
        Objects.equals(this.stateValue, metricAlarm.stateValue) &&
        Objects.equals(this.stateReason, metricAlarm.stateReason) &&
        Objects.equals(this.stateReasonData, metricAlarm.stateReasonData) &&
        Objects.equals(this.stateUpdatedTimestamp, metricAlarm.stateUpdatedTimestamp) &&
        Objects.equals(this.metricName, metricAlarm.metricName) &&
        Objects.equals(this.namespace, metricAlarm.namespace) &&
        Objects.equals(this.statistic, metricAlarm.statistic) &&
        Objects.equals(this.extendedStatistic, metricAlarm.extendedStatistic) &&
        Objects.equals(this.dimensions, metricAlarm.dimensions) &&
        Objects.equals(this.period, metricAlarm.period) &&
        Objects.equals(this.unit, metricAlarm.unit) &&
        Objects.equals(this.evaluationPeriods, metricAlarm.evaluationPeriods) &&
        Objects.equals(this.datapointsToAlarm, metricAlarm.datapointsToAlarm) &&
        Objects.equals(this.threshold, metricAlarm.threshold) &&
        Objects.equals(this.comparisonOperator, metricAlarm.comparisonOperator) &&
        Objects.equals(this.treatMissingData, metricAlarm.treatMissingData) &&
        Objects.equals(this.evaluateLowSampleCountPercentile, metricAlarm.evaluateLowSampleCountPercentile) &&
        Objects.equals(this.metrics, metricAlarm.metrics) &&
        Objects.equals(this.thresholdMetricId, metricAlarm.thresholdMetricId) &&
        Objects.equals(this.evaluationState, metricAlarm.evaluationState) &&
        Objects.equals(this.stateTransitionedTimestamp, metricAlarm.stateTransitionedTimestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alarmName, alarmArn, alarmDescription, alarmConfigurationUpdatedTimestamp, actionsEnabled, okActions, alarmActions, insufficientDataActions, stateValue, stateReason, stateReasonData, stateUpdatedTimestamp, metricName, namespace, statistic, extendedStatistic, dimensions, period, unit, evaluationPeriods, datapointsToAlarm, threshold, comparisonOperator, treatMissingData, evaluateLowSampleCountPercentile, metrics, thresholdMetricId, evaluationState, stateTransitionedTimestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricAlarm {\n");
    sb.append("    alarmName: ").append(toIndentedString(alarmName)).append("\n");
    sb.append("    alarmArn: ").append(toIndentedString(alarmArn)).append("\n");
    sb.append("    alarmDescription: ").append(toIndentedString(alarmDescription)).append("\n");
    sb.append("    alarmConfigurationUpdatedTimestamp: ").append(toIndentedString(alarmConfigurationUpdatedTimestamp)).append("\n");
    sb.append("    actionsEnabled: ").append(toIndentedString(actionsEnabled)).append("\n");
    sb.append("    okActions: ").append(toIndentedString(okActions)).append("\n");
    sb.append("    alarmActions: ").append(toIndentedString(alarmActions)).append("\n");
    sb.append("    insufficientDataActions: ").append(toIndentedString(insufficientDataActions)).append("\n");
    sb.append("    stateValue: ").append(toIndentedString(stateValue)).append("\n");
    sb.append("    stateReason: ").append(toIndentedString(stateReason)).append("\n");
    sb.append("    stateReasonData: ").append(toIndentedString(stateReasonData)).append("\n");
    sb.append("    stateUpdatedTimestamp: ").append(toIndentedString(stateUpdatedTimestamp)).append("\n");
    sb.append("    metricName: ").append(toIndentedString(metricName)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    statistic: ").append(toIndentedString(statistic)).append("\n");
    sb.append("    extendedStatistic: ").append(toIndentedString(extendedStatistic)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    evaluationPeriods: ").append(toIndentedString(evaluationPeriods)).append("\n");
    sb.append("    datapointsToAlarm: ").append(toIndentedString(datapointsToAlarm)).append("\n");
    sb.append("    threshold: ").append(toIndentedString(threshold)).append("\n");
    sb.append("    comparisonOperator: ").append(toIndentedString(comparisonOperator)).append("\n");
    sb.append("    treatMissingData: ").append(toIndentedString(treatMissingData)).append("\n");
    sb.append("    evaluateLowSampleCountPercentile: ").append(toIndentedString(evaluateLowSampleCountPercentile)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    thresholdMetricId: ").append(toIndentedString(thresholdMetricId)).append("\n");
    sb.append("    evaluationState: ").append(toIndentedString(evaluationState)).append("\n");
    sb.append("    stateTransitionedTimestamp: ").append(toIndentedString(stateTransitionedTimestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AlarmName");
    openapiFields.add("AlarmArn");
    openapiFields.add("AlarmDescription");
    openapiFields.add("AlarmConfigurationUpdatedTimestamp");
    openapiFields.add("ActionsEnabled");
    openapiFields.add("OKActions");
    openapiFields.add("AlarmActions");
    openapiFields.add("InsufficientDataActions");
    openapiFields.add("StateValue");
    openapiFields.add("StateReason");
    openapiFields.add("StateReasonData");
    openapiFields.add("StateUpdatedTimestamp");
    openapiFields.add("MetricName");
    openapiFields.add("Namespace");
    openapiFields.add("Statistic");
    openapiFields.add("ExtendedStatistic");
    openapiFields.add("Dimensions");
    openapiFields.add("Period");
    openapiFields.add("Unit");
    openapiFields.add("EvaluationPeriods");
    openapiFields.add("DatapointsToAlarm");
    openapiFields.add("Threshold");
    openapiFields.add("ComparisonOperator");
    openapiFields.add("TreatMissingData");
    openapiFields.add("EvaluateLowSampleCountPercentile");
    openapiFields.add("Metrics");
    openapiFields.add("ThresholdMetricId");
    openapiFields.add("EvaluationState");
    openapiFields.add("StateTransitionedTimestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MetricAlarm
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetricAlarm.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetricAlarm is not found in the empty JSON string", MetricAlarm.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetricAlarm.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetricAlarm` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AlarmName`
      if (jsonObj.get("AlarmName") != null && !jsonObj.get("AlarmName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AlarmName"));
      }
      // validate the optional field `AlarmArn`
      if (jsonObj.get("AlarmArn") != null && !jsonObj.get("AlarmArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AlarmArn"));
      }
      // validate the optional field `AlarmDescription`
      if (jsonObj.get("AlarmDescription") != null && !jsonObj.get("AlarmDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AlarmDescription"));
      }
      // validate the optional field `AlarmConfigurationUpdatedTimestamp`
      if (jsonObj.get("AlarmConfigurationUpdatedTimestamp") != null && !jsonObj.get("AlarmConfigurationUpdatedTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("AlarmConfigurationUpdatedTimestamp"));
      }
      // validate the optional field `ActionsEnabled`
      if (jsonObj.get("ActionsEnabled") != null && !jsonObj.get("ActionsEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ActionsEnabled"));
      }
      // validate the optional field `OKActions`
      if (jsonObj.get("OKActions") != null && !jsonObj.get("OKActions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("OKActions"));
      }
      // validate the optional field `AlarmActions`
      if (jsonObj.get("AlarmActions") != null && !jsonObj.get("AlarmActions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AlarmActions"));
      }
      // validate the optional field `InsufficientDataActions`
      if (jsonObj.get("InsufficientDataActions") != null && !jsonObj.get("InsufficientDataActions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("InsufficientDataActions"));
      }
      // validate the optional field `StateValue`
      if (jsonObj.get("StateValue") != null && !jsonObj.get("StateValue").isJsonNull()) {
        StateValue.validateJsonElement(jsonObj.get("StateValue"));
      }
      // validate the optional field `StateReason`
      if (jsonObj.get("StateReason") != null && !jsonObj.get("StateReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StateReason"));
      }
      // validate the optional field `StateReasonData`
      if (jsonObj.get("StateReasonData") != null && !jsonObj.get("StateReasonData").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StateReasonData"));
      }
      // validate the optional field `StateUpdatedTimestamp`
      if (jsonObj.get("StateUpdatedTimestamp") != null && !jsonObj.get("StateUpdatedTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StateUpdatedTimestamp"));
      }
      // validate the optional field `MetricName`
      if (jsonObj.get("MetricName") != null && !jsonObj.get("MetricName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MetricName"));
      }
      // validate the optional field `Namespace`
      if (jsonObj.get("Namespace") != null && !jsonObj.get("Namespace").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Namespace"));
      }
      // validate the optional field `Statistic`
      if (jsonObj.get("Statistic") != null && !jsonObj.get("Statistic").isJsonNull()) {
        Statistic.validateJsonElement(jsonObj.get("Statistic"));
      }
      // validate the optional field `ExtendedStatistic`
      if (jsonObj.get("ExtendedStatistic") != null && !jsonObj.get("ExtendedStatistic").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ExtendedStatistic"));
      }
      // validate the optional field `Dimensions`
      if (jsonObj.get("Dimensions") != null && !jsonObj.get("Dimensions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Dimensions"));
      }
      // validate the optional field `Period`
      if (jsonObj.get("Period") != null && !jsonObj.get("Period").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Period"));
      }
      // validate the optional field `Unit`
      if (jsonObj.get("Unit") != null && !jsonObj.get("Unit").isJsonNull()) {
        StandardUnit.validateJsonElement(jsonObj.get("Unit"));
      }
      // validate the optional field `EvaluationPeriods`
      if (jsonObj.get("EvaluationPeriods") != null && !jsonObj.get("EvaluationPeriods").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("EvaluationPeriods"));
      }
      // validate the optional field `DatapointsToAlarm`
      if (jsonObj.get("DatapointsToAlarm") != null && !jsonObj.get("DatapointsToAlarm").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("DatapointsToAlarm"));
      }
      // validate the optional field `Threshold`
      if (jsonObj.get("Threshold") != null && !jsonObj.get("Threshold").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Threshold"));
      }
      // validate the optional field `ComparisonOperator`
      if (jsonObj.get("ComparisonOperator") != null && !jsonObj.get("ComparisonOperator").isJsonNull()) {
        ComparisonOperator.validateJsonElement(jsonObj.get("ComparisonOperator"));
      }
      // validate the optional field `TreatMissingData`
      if (jsonObj.get("TreatMissingData") != null && !jsonObj.get("TreatMissingData").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TreatMissingData"));
      }
      // validate the optional field `EvaluateLowSampleCountPercentile`
      if (jsonObj.get("EvaluateLowSampleCountPercentile") != null && !jsonObj.get("EvaluateLowSampleCountPercentile").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EvaluateLowSampleCountPercentile"));
      }
      // validate the optional field `Metrics`
      if (jsonObj.get("Metrics") != null && !jsonObj.get("Metrics").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Metrics"));
      }
      // validate the optional field `ThresholdMetricId`
      if (jsonObj.get("ThresholdMetricId") != null && !jsonObj.get("ThresholdMetricId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ThresholdMetricId"));
      }
      // validate the optional field `EvaluationState`
      if (jsonObj.get("EvaluationState") != null && !jsonObj.get("EvaluationState").isJsonNull()) {
        EvaluationState.validateJsonElement(jsonObj.get("EvaluationState"));
      }
      // validate the optional field `StateTransitionedTimestamp`
      if (jsonObj.get("StateTransitionedTimestamp") != null && !jsonObj.get("StateTransitionedTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StateTransitionedTimestamp"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetricAlarm.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetricAlarm' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetricAlarm> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetricAlarm.class));

       return (TypeAdapter<T>) new TypeAdapter<MetricAlarm>() {
           @Override
           public void write(JsonWriter out, MetricAlarm value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetricAlarm read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MetricAlarm given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MetricAlarm
   * @throws IOException if the JSON string is invalid with respect to MetricAlarm
   */
  public static MetricAlarm fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetricAlarm.class);
  }

  /**
   * Convert an instance of MetricAlarm to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

