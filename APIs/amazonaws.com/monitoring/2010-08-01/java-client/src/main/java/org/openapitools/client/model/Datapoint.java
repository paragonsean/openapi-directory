/*
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.StandardUnit;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Encapsulates the statistical data that CloudWatch computes from metric data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:23.972078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Datapoint {
  public static final String SERIALIZED_NAME_TIMESTAMP = "Timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_SAMPLE_COUNT = "SampleCount";
  @SerializedName(SERIALIZED_NAME_SAMPLE_COUNT)
  private Double sampleCount;

  public static final String SERIALIZED_NAME_AVERAGE = "Average";
  @SerializedName(SERIALIZED_NAME_AVERAGE)
  private Double average;

  public static final String SERIALIZED_NAME_SUM = "Sum";
  @SerializedName(SERIALIZED_NAME_SUM)
  private Double sum;

  public static final String SERIALIZED_NAME_MINIMUM = "Minimum";
  @SerializedName(SERIALIZED_NAME_MINIMUM)
  private Double minimum;

  public static final String SERIALIZED_NAME_MAXIMUM = "Maximum";
  @SerializedName(SERIALIZED_NAME_MAXIMUM)
  private Double maximum;

  public static final String SERIALIZED_NAME_UNIT = "Unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private StandardUnit unit;

  public static final String SERIALIZED_NAME_EXTENDED_STATISTICS = "ExtendedStatistics";
  @SerializedName(SERIALIZED_NAME_EXTENDED_STATISTICS)
  private Map extendedStatistics;

  public Datapoint() {
  }

  public Datapoint timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public Datapoint sampleCount(Double sampleCount) {
    this.sampleCount = sampleCount;
    return this;
  }

  /**
   * Get sampleCount
   * @return sampleCount
   */
  @javax.annotation.Nullable
  public Double getSampleCount() {
    return sampleCount;
  }

  public void setSampleCount(Double sampleCount) {
    this.sampleCount = sampleCount;
  }


  public Datapoint average(Double average) {
    this.average = average;
    return this;
  }

  /**
   * Get average
   * @return average
   */
  @javax.annotation.Nullable
  public Double getAverage() {
    return average;
  }

  public void setAverage(Double average) {
    this.average = average;
  }


  public Datapoint sum(Double sum) {
    this.sum = sum;
    return this;
  }

  /**
   * Get sum
   * @return sum
   */
  @javax.annotation.Nullable
  public Double getSum() {
    return sum;
  }

  public void setSum(Double sum) {
    this.sum = sum;
  }


  public Datapoint minimum(Double minimum) {
    this.minimum = minimum;
    return this;
  }

  /**
   * Get minimum
   * @return minimum
   */
  @javax.annotation.Nullable
  public Double getMinimum() {
    return minimum;
  }

  public void setMinimum(Double minimum) {
    this.minimum = minimum;
  }


  public Datapoint maximum(Double maximum) {
    this.maximum = maximum;
    return this;
  }

  /**
   * Get maximum
   * @return maximum
   */
  @javax.annotation.Nullable
  public Double getMaximum() {
    return maximum;
  }

  public void setMaximum(Double maximum) {
    this.maximum = maximum;
  }


  public Datapoint unit(StandardUnit unit) {
    this.unit = unit;
    return this;
  }

  /**
   * Get unit
   * @return unit
   */
  @javax.annotation.Nullable
  public StandardUnit getUnit() {
    return unit;
  }

  public void setUnit(StandardUnit unit) {
    this.unit = unit;
  }


  public Datapoint extendedStatistics(Map extendedStatistics) {
    this.extendedStatistics = extendedStatistics;
    return this;
  }

  /**
   * Get extendedStatistics
   * @return extendedStatistics
   */
  @javax.annotation.Nullable
  public Map getExtendedStatistics() {
    return extendedStatistics;
  }

  public void setExtendedStatistics(Map extendedStatistics) {
    this.extendedStatistics = extendedStatistics;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Datapoint datapoint = (Datapoint) o;
    return Objects.equals(this.timestamp, datapoint.timestamp) &&
        Objects.equals(this.sampleCount, datapoint.sampleCount) &&
        Objects.equals(this.average, datapoint.average) &&
        Objects.equals(this.sum, datapoint.sum) &&
        Objects.equals(this.minimum, datapoint.minimum) &&
        Objects.equals(this.maximum, datapoint.maximum) &&
        Objects.equals(this.unit, datapoint.unit) &&
        Objects.equals(this.extendedStatistics, datapoint.extendedStatistics);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timestamp, sampleCount, average, sum, minimum, maximum, unit, extendedStatistics);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Datapoint {\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    sampleCount: ").append(toIndentedString(sampleCount)).append("\n");
    sb.append("    average: ").append(toIndentedString(average)).append("\n");
    sb.append("    sum: ").append(toIndentedString(sum)).append("\n");
    sb.append("    minimum: ").append(toIndentedString(minimum)).append("\n");
    sb.append("    maximum: ").append(toIndentedString(maximum)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    extendedStatistics: ").append(toIndentedString(extendedStatistics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Timestamp");
    openapiFields.add("SampleCount");
    openapiFields.add("Average");
    openapiFields.add("Sum");
    openapiFields.add("Minimum");
    openapiFields.add("Maximum");
    openapiFields.add("Unit");
    openapiFields.add("ExtendedStatistics");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Datapoint
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Datapoint.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Datapoint is not found in the empty JSON string", Datapoint.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Datapoint.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Datapoint` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Timestamp`
      if (jsonObj.get("Timestamp") != null && !jsonObj.get("Timestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("Timestamp"));
      }
      // validate the optional field `SampleCount`
      if (jsonObj.get("SampleCount") != null && !jsonObj.get("SampleCount").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("SampleCount"));
      }
      // validate the optional field `Average`
      if (jsonObj.get("Average") != null && !jsonObj.get("Average").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Average"));
      }
      // validate the optional field `Sum`
      if (jsonObj.get("Sum") != null && !jsonObj.get("Sum").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Sum"));
      }
      // validate the optional field `Minimum`
      if (jsonObj.get("Minimum") != null && !jsonObj.get("Minimum").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Minimum"));
      }
      // validate the optional field `Maximum`
      if (jsonObj.get("Maximum") != null && !jsonObj.get("Maximum").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Maximum"));
      }
      // validate the optional field `Unit`
      if (jsonObj.get("Unit") != null && !jsonObj.get("Unit").isJsonNull()) {
        StandardUnit.validateJsonElement(jsonObj.get("Unit"));
      }
      // validate the optional field `ExtendedStatistics`
      if (jsonObj.get("ExtendedStatistics") != null && !jsonObj.get("ExtendedStatistics").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("ExtendedStatistics"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Datapoint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Datapoint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Datapoint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Datapoint.class));

       return (TypeAdapter<T>) new TypeAdapter<Datapoint>() {
           @Override
           public void write(JsonWriter out, Datapoint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Datapoint read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Datapoint given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Datapoint
   * @throws IOException if the JSON string is invalid with respect to Datapoint
   */
  public static Datapoint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Datapoint.class);
  }

  /**
   * Convert an instance of Datapoint to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

