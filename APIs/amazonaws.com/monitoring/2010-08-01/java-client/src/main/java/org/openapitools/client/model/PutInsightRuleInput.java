/*
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutInsightRuleInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:23.972078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutInsightRuleInput {
  public static final String SERIALIZED_NAME_RULE_NAME = "RuleName";
  @SerializedName(SERIALIZED_NAME_RULE_NAME)
  private String ruleName;

  public static final String SERIALIZED_NAME_RULE_STATE = "RuleState";
  @SerializedName(SERIALIZED_NAME_RULE_STATE)
  private String ruleState;

  public static final String SERIALIZED_NAME_RULE_DEFINITION = "RuleDefinition";
  @SerializedName(SERIALIZED_NAME_RULE_DEFINITION)
  private String ruleDefinition;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public PutInsightRuleInput() {
  }

  public PutInsightRuleInput ruleName(String ruleName) {
    this.ruleName = ruleName;
    return this;
  }

  /**
   * Get ruleName
   * @return ruleName
   */
  @javax.annotation.Nonnull
  public String getRuleName() {
    return ruleName;
  }

  public void setRuleName(String ruleName) {
    this.ruleName = ruleName;
  }


  public PutInsightRuleInput ruleState(String ruleState) {
    this.ruleState = ruleState;
    return this;
  }

  /**
   * Get ruleState
   * @return ruleState
   */
  @javax.annotation.Nullable
  public String getRuleState() {
    return ruleState;
  }

  public void setRuleState(String ruleState) {
    this.ruleState = ruleState;
  }


  public PutInsightRuleInput ruleDefinition(String ruleDefinition) {
    this.ruleDefinition = ruleDefinition;
    return this;
  }

  /**
   * Get ruleDefinition
   * @return ruleDefinition
   */
  @javax.annotation.Nonnull
  public String getRuleDefinition() {
    return ruleDefinition;
  }

  public void setRuleDefinition(String ruleDefinition) {
    this.ruleDefinition = ruleDefinition;
  }


  public PutInsightRuleInput tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutInsightRuleInput putInsightRuleInput = (PutInsightRuleInput) o;
    return Objects.equals(this.ruleName, putInsightRuleInput.ruleName) &&
        Objects.equals(this.ruleState, putInsightRuleInput.ruleState) &&
        Objects.equals(this.ruleDefinition, putInsightRuleInput.ruleDefinition) &&
        Objects.equals(this.tags, putInsightRuleInput.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ruleName, ruleState, ruleDefinition, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutInsightRuleInput {\n");
    sb.append("    ruleName: ").append(toIndentedString(ruleName)).append("\n");
    sb.append("    ruleState: ").append(toIndentedString(ruleState)).append("\n");
    sb.append("    ruleDefinition: ").append(toIndentedString(ruleDefinition)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("RuleName");
    openapiFields.add("RuleState");
    openapiFields.add("RuleDefinition");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("RuleName");
    openapiRequiredFields.add("RuleDefinition");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutInsightRuleInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutInsightRuleInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutInsightRuleInput is not found in the empty JSON string", PutInsightRuleInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutInsightRuleInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutInsightRuleInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PutInsightRuleInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `RuleName`
      String.validateJsonElement(jsonObj.get("RuleName"));
      // validate the optional field `RuleState`
      if (jsonObj.get("RuleState") != null && !jsonObj.get("RuleState").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RuleState"));
      }
      // validate the required field `RuleDefinition`
      String.validateJsonElement(jsonObj.get("RuleDefinition"));
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutInsightRuleInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutInsightRuleInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutInsightRuleInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutInsightRuleInput.class));

       return (TypeAdapter<T>) new TypeAdapter<PutInsightRuleInput>() {
           @Override
           public void write(JsonWriter out, PutInsightRuleInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutInsightRuleInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutInsightRuleInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutInsightRuleInput
   * @throws IOException if the JSON string is invalid with respect to PutInsightRuleInput
   */
  public static PutInsightRuleInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutInsightRuleInput.class);
  }

  /**
   * Convert an instance of PutInsightRuleInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

