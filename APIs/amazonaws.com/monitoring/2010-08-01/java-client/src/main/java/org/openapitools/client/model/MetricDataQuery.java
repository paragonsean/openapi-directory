/*
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MetricDataQueryMetricStat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;This structure is used in both &lt;code&gt;GetMetricData&lt;/code&gt; and &lt;code&gt;PutMetricAlarm&lt;/code&gt;. The supported use of this structure is different for those two operations.&lt;/p&gt; &lt;p&gt;When used in &lt;code&gt;GetMetricData&lt;/code&gt;, it indicates the metric data to return, and whether this call is just retrieving a batch set of data for one metric, or is performing a Metrics Insights query or a math expression. A single &lt;code&gt;GetMetricData&lt;/code&gt; call can include up to 500 &lt;code&gt;MetricDataQuery&lt;/code&gt; structures.&lt;/p&gt; &lt;p&gt;When used in &lt;code&gt;PutMetricAlarm&lt;/code&gt;, it enables you to create an alarm based on a metric math expression. Each &lt;code&gt;MetricDataQuery&lt;/code&gt; in the array specifies either a metric to retrieve, or a math expression to be performed on retrieved metrics. A single &lt;code&gt;PutMetricAlarm&lt;/code&gt; call can include up to 20 &lt;code&gt;MetricDataQuery&lt;/code&gt; structures in the array. The 20 structures can include as many as 10 structures that contain a &lt;code&gt;MetricStat&lt;/code&gt; parameter to retrieve a metric, and as many as 10 structures that contain the &lt;code&gt;Expression&lt;/code&gt; parameter to perform a math expression. Of those &lt;code&gt;Expression&lt;/code&gt; structures, one must have &lt;code&gt;true&lt;/code&gt; as the value for &lt;code&gt;ReturnData&lt;/code&gt;. The result of this expression is the value the alarm watches.&lt;/p&gt; &lt;p&gt;Any expression used in a &lt;code&gt;PutMetricAlarm&lt;/code&gt; operation must return a single time series. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax\&quot;&gt;Metric Math Syntax and Functions&lt;/a&gt; in the &lt;i&gt;Amazon CloudWatch User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Some of the parameters of this structure also have different uses whether you are using this structure in a &lt;code&gt;GetMetricData&lt;/code&gt; operation or a &lt;code&gt;PutMetricAlarm&lt;/code&gt; operation. These differences are explained in the following parameter list.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:23.972078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MetricDataQuery {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_METRIC_STAT = "MetricStat";
  @SerializedName(SERIALIZED_NAME_METRIC_STAT)
  private MetricDataQueryMetricStat metricStat;

  public static final String SERIALIZED_NAME_EXPRESSION = "Expression";
  @SerializedName(SERIALIZED_NAME_EXPRESSION)
  private String expression;

  public static final String SERIALIZED_NAME_LABEL = "Label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_RETURN_DATA = "ReturnData";
  @SerializedName(SERIALIZED_NAME_RETURN_DATA)
  private Boolean returnData;

  public static final String SERIALIZED_NAME_PERIOD = "Period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private Integer period;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "AccountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public MetricDataQuery() {
  }

  public MetricDataQuery id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public MetricDataQuery metricStat(MetricDataQueryMetricStat metricStat) {
    this.metricStat = metricStat;
    return this;
  }

  /**
   * Get metricStat
   * @return metricStat
   */
  @javax.annotation.Nullable
  public MetricDataQueryMetricStat getMetricStat() {
    return metricStat;
  }

  public void setMetricStat(MetricDataQueryMetricStat metricStat) {
    this.metricStat = metricStat;
  }


  public MetricDataQuery expression(String expression) {
    this.expression = expression;
    return this;
  }

  /**
   * Get expression
   * @return expression
   */
  @javax.annotation.Nullable
  public String getExpression() {
    return expression;
  }

  public void setExpression(String expression) {
    this.expression = expression;
  }


  public MetricDataQuery label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Get label
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public MetricDataQuery returnData(Boolean returnData) {
    this.returnData = returnData;
    return this;
  }

  /**
   * Get returnData
   * @return returnData
   */
  @javax.annotation.Nullable
  public Boolean getReturnData() {
    return returnData;
  }

  public void setReturnData(Boolean returnData) {
    this.returnData = returnData;
  }


  public MetricDataQuery period(Integer period) {
    this.period = period;
    return this;
  }

  /**
   * Get period
   * @return period
   */
  @javax.annotation.Nullable
  public Integer getPeriod() {
    return period;
  }

  public void setPeriod(Integer period) {
    this.period = period;
  }


  public MetricDataQuery accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricDataQuery metricDataQuery = (MetricDataQuery) o;
    return Objects.equals(this.id, metricDataQuery.id) &&
        Objects.equals(this.metricStat, metricDataQuery.metricStat) &&
        Objects.equals(this.expression, metricDataQuery.expression) &&
        Objects.equals(this.label, metricDataQuery.label) &&
        Objects.equals(this.returnData, metricDataQuery.returnData) &&
        Objects.equals(this.period, metricDataQuery.period) &&
        Objects.equals(this.accountId, metricDataQuery.accountId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, metricStat, expression, label, returnData, period, accountId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricDataQuery {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    metricStat: ").append(toIndentedString(metricStat)).append("\n");
    sb.append("    expression: ").append(toIndentedString(expression)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    returnData: ").append(toIndentedString(returnData)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("MetricStat");
    openapiFields.add("Expression");
    openapiFields.add("Label");
    openapiFields.add("ReturnData");
    openapiFields.add("Period");
    openapiFields.add("AccountId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MetricDataQuery
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetricDataQuery.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetricDataQuery is not found in the empty JSON string", MetricDataQuery.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetricDataQuery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetricDataQuery` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MetricDataQuery.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Id`
      String.validateJsonElement(jsonObj.get("Id"));
      // validate the optional field `MetricStat`
      if (jsonObj.get("MetricStat") != null && !jsonObj.get("MetricStat").isJsonNull()) {
        MetricDataQueryMetricStat.validateJsonElement(jsonObj.get("MetricStat"));
      }
      // validate the optional field `Expression`
      if (jsonObj.get("Expression") != null && !jsonObj.get("Expression").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Expression"));
      }
      // validate the optional field `Label`
      if (jsonObj.get("Label") != null && !jsonObj.get("Label").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Label"));
      }
      // validate the optional field `ReturnData`
      if (jsonObj.get("ReturnData") != null && !jsonObj.get("ReturnData").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ReturnData"));
      }
      // validate the optional field `Period`
      if (jsonObj.get("Period") != null && !jsonObj.get("Period").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Period"));
      }
      // validate the optional field `AccountId`
      if (jsonObj.get("AccountId") != null && !jsonObj.get("AccountId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AccountId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetricDataQuery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetricDataQuery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetricDataQuery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetricDataQuery.class));

       return (TypeAdapter<T>) new TypeAdapter<MetricDataQuery>() {
           @Override
           public void write(JsonWriter out, MetricDataQuery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetricDataQuery read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MetricDataQuery given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MetricDataQuery
   * @throws IOException if the JSON string is invalid with respect to MetricDataQuery
   */
  public static MetricDataQuery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetricDataQuery.class);
  }

  /**
   * Convert an instance of MetricDataQuery to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

