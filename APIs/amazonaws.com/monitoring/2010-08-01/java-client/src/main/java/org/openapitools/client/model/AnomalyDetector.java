/*
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AnomalyDetectorConfiguration;
import org.openapitools.client.model.AnomalyDetectorMetricMathAnomalyDetector;
import org.openapitools.client.model.AnomalyDetectorSingleMetricAnomalyDetector;
import org.openapitools.client.model.AnomalyDetectorStateValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An anomaly detection model associated with a particular CloudWatch metric, statistic, or metric math expression. You can use the model to display a band of expected, normal values when the metric is graphed.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:23.972078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AnomalyDetector {
  public static final String SERIALIZED_NAME_NAMESPACE = "Namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public static final String SERIALIZED_NAME_METRIC_NAME = "MetricName";
  @SerializedName(SERIALIZED_NAME_METRIC_NAME)
  private String metricName;

  public static final String SERIALIZED_NAME_DIMENSIONS = "Dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private List dimensions;

  public static final String SERIALIZED_NAME_STAT = "Stat";
  @SerializedName(SERIALIZED_NAME_STAT)
  private String stat;

  public static final String SERIALIZED_NAME_CONFIGURATION = "Configuration";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION)
  private AnomalyDetectorConfiguration _configuration;

  public static final String SERIALIZED_NAME_STATE_VALUE = "StateValue";
  @SerializedName(SERIALIZED_NAME_STATE_VALUE)
  private AnomalyDetectorStateValue stateValue;

  public static final String SERIALIZED_NAME_SINGLE_METRIC_ANOMALY_DETECTOR = "SingleMetricAnomalyDetector";
  @SerializedName(SERIALIZED_NAME_SINGLE_METRIC_ANOMALY_DETECTOR)
  private AnomalyDetectorSingleMetricAnomalyDetector singleMetricAnomalyDetector;

  public static final String SERIALIZED_NAME_METRIC_MATH_ANOMALY_DETECTOR = "MetricMathAnomalyDetector";
  @SerializedName(SERIALIZED_NAME_METRIC_MATH_ANOMALY_DETECTOR)
  private AnomalyDetectorMetricMathAnomalyDetector metricMathAnomalyDetector;

  public AnomalyDetector() {
  }

  public AnomalyDetector namespace(String namespace) {
    this.namespace = namespace;
    return this;
  }

  /**
   * Get namespace
   * @return namespace
   */
  @javax.annotation.Nullable
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  public AnomalyDetector metricName(String metricName) {
    this.metricName = metricName;
    return this;
  }

  /**
   * Get metricName
   * @return metricName
   */
  @javax.annotation.Nullable
  public String getMetricName() {
    return metricName;
  }

  public void setMetricName(String metricName) {
    this.metricName = metricName;
  }


  public AnomalyDetector dimensions(List dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  /**
   * Get dimensions
   * @return dimensions
   */
  @javax.annotation.Nullable
  public List getDimensions() {
    return dimensions;
  }

  public void setDimensions(List dimensions) {
    this.dimensions = dimensions;
  }


  public AnomalyDetector stat(String stat) {
    this.stat = stat;
    return this;
  }

  /**
   * Get stat
   * @return stat
   */
  @javax.annotation.Nullable
  public String getStat() {
    return stat;
  }

  public void setStat(String stat) {
    this.stat = stat;
  }


  public AnomalyDetector _configuration(AnomalyDetectorConfiguration _configuration) {
    this._configuration = _configuration;
    return this;
  }

  /**
   * Get _configuration
   * @return _configuration
   */
  @javax.annotation.Nullable
  public AnomalyDetectorConfiguration getConfiguration() {
    return _configuration;
  }

  public void setConfiguration(AnomalyDetectorConfiguration _configuration) {
    this._configuration = _configuration;
  }


  public AnomalyDetector stateValue(AnomalyDetectorStateValue stateValue) {
    this.stateValue = stateValue;
    return this;
  }

  /**
   * Get stateValue
   * @return stateValue
   */
  @javax.annotation.Nullable
  public AnomalyDetectorStateValue getStateValue() {
    return stateValue;
  }

  public void setStateValue(AnomalyDetectorStateValue stateValue) {
    this.stateValue = stateValue;
  }


  public AnomalyDetector singleMetricAnomalyDetector(AnomalyDetectorSingleMetricAnomalyDetector singleMetricAnomalyDetector) {
    this.singleMetricAnomalyDetector = singleMetricAnomalyDetector;
    return this;
  }

  /**
   * Get singleMetricAnomalyDetector
   * @return singleMetricAnomalyDetector
   */
  @javax.annotation.Nullable
  public AnomalyDetectorSingleMetricAnomalyDetector getSingleMetricAnomalyDetector() {
    return singleMetricAnomalyDetector;
  }

  public void setSingleMetricAnomalyDetector(AnomalyDetectorSingleMetricAnomalyDetector singleMetricAnomalyDetector) {
    this.singleMetricAnomalyDetector = singleMetricAnomalyDetector;
  }


  public AnomalyDetector metricMathAnomalyDetector(AnomalyDetectorMetricMathAnomalyDetector metricMathAnomalyDetector) {
    this.metricMathAnomalyDetector = metricMathAnomalyDetector;
    return this;
  }

  /**
   * Get metricMathAnomalyDetector
   * @return metricMathAnomalyDetector
   */
  @javax.annotation.Nullable
  public AnomalyDetectorMetricMathAnomalyDetector getMetricMathAnomalyDetector() {
    return metricMathAnomalyDetector;
  }

  public void setMetricMathAnomalyDetector(AnomalyDetectorMetricMathAnomalyDetector metricMathAnomalyDetector) {
    this.metricMathAnomalyDetector = metricMathAnomalyDetector;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnomalyDetector anomalyDetector = (AnomalyDetector) o;
    return Objects.equals(this.namespace, anomalyDetector.namespace) &&
        Objects.equals(this.metricName, anomalyDetector.metricName) &&
        Objects.equals(this.dimensions, anomalyDetector.dimensions) &&
        Objects.equals(this.stat, anomalyDetector.stat) &&
        Objects.equals(this._configuration, anomalyDetector._configuration) &&
        Objects.equals(this.stateValue, anomalyDetector.stateValue) &&
        Objects.equals(this.singleMetricAnomalyDetector, anomalyDetector.singleMetricAnomalyDetector) &&
        Objects.equals(this.metricMathAnomalyDetector, anomalyDetector.metricMathAnomalyDetector);
  }

  @Override
  public int hashCode() {
    return Objects.hash(namespace, metricName, dimensions, stat, _configuration, stateValue, singleMetricAnomalyDetector, metricMathAnomalyDetector);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnomalyDetector {\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    metricName: ").append(toIndentedString(metricName)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    stat: ").append(toIndentedString(stat)).append("\n");
    sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
    sb.append("    stateValue: ").append(toIndentedString(stateValue)).append("\n");
    sb.append("    singleMetricAnomalyDetector: ").append(toIndentedString(singleMetricAnomalyDetector)).append("\n");
    sb.append("    metricMathAnomalyDetector: ").append(toIndentedString(metricMathAnomalyDetector)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Namespace");
    openapiFields.add("MetricName");
    openapiFields.add("Dimensions");
    openapiFields.add("Stat");
    openapiFields.add("Configuration");
    openapiFields.add("StateValue");
    openapiFields.add("SingleMetricAnomalyDetector");
    openapiFields.add("MetricMathAnomalyDetector");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnomalyDetector
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnomalyDetector.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnomalyDetector is not found in the empty JSON string", AnomalyDetector.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnomalyDetector.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnomalyDetector` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Namespace`
      if (jsonObj.get("Namespace") != null && !jsonObj.get("Namespace").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Namespace"));
      }
      // validate the optional field `MetricName`
      if (jsonObj.get("MetricName") != null && !jsonObj.get("MetricName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MetricName"));
      }
      // validate the optional field `Dimensions`
      if (jsonObj.get("Dimensions") != null && !jsonObj.get("Dimensions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Dimensions"));
      }
      // validate the optional field `Stat`
      if (jsonObj.get("Stat") != null && !jsonObj.get("Stat").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Stat"));
      }
      // validate the optional field `Configuration`
      if (jsonObj.get("Configuration") != null && !jsonObj.get("Configuration").isJsonNull()) {
        AnomalyDetectorConfiguration.validateJsonElement(jsonObj.get("Configuration"));
      }
      // validate the optional field `StateValue`
      if (jsonObj.get("StateValue") != null && !jsonObj.get("StateValue").isJsonNull()) {
        AnomalyDetectorStateValue.validateJsonElement(jsonObj.get("StateValue"));
      }
      // validate the optional field `SingleMetricAnomalyDetector`
      if (jsonObj.get("SingleMetricAnomalyDetector") != null && !jsonObj.get("SingleMetricAnomalyDetector").isJsonNull()) {
        AnomalyDetectorSingleMetricAnomalyDetector.validateJsonElement(jsonObj.get("SingleMetricAnomalyDetector"));
      }
      // validate the optional field `MetricMathAnomalyDetector`
      if (jsonObj.get("MetricMathAnomalyDetector") != null && !jsonObj.get("MetricMathAnomalyDetector").isJsonNull()) {
        AnomalyDetectorMetricMathAnomalyDetector.validateJsonElement(jsonObj.get("MetricMathAnomalyDetector"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnomalyDetector.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnomalyDetector' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnomalyDetector> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnomalyDetector.class));

       return (TypeAdapter<T>) new TypeAdapter<AnomalyDetector>() {
           @Override
           public void write(JsonWriter out, AnomalyDetector value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnomalyDetector read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnomalyDetector given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnomalyDetector
   * @throws IOException if the JSON string is invalid with respect to AnomalyDetector
   */
  public static AnomalyDetector fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnomalyDetector.class);
  }

  /**
   * Convert an instance of AnomalyDetector to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

