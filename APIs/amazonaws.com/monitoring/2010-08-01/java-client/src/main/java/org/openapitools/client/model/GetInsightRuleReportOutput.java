/*
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetInsightRuleReportOutput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:23.972078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetInsightRuleReportOutput {
  public static final String SERIALIZED_NAME_KEY_LABELS = "KeyLabels";
  @SerializedName(SERIALIZED_NAME_KEY_LABELS)
  private List keyLabels;

  public static final String SERIALIZED_NAME_AGGREGATION_STATISTIC = "AggregationStatistic";
  @SerializedName(SERIALIZED_NAME_AGGREGATION_STATISTIC)
  private String aggregationStatistic;

  public static final String SERIALIZED_NAME_AGGREGATE_VALUE = "AggregateValue";
  @SerializedName(SERIALIZED_NAME_AGGREGATE_VALUE)
  private Double aggregateValue;

  public static final String SERIALIZED_NAME_APPROXIMATE_UNIQUE_COUNT = "ApproximateUniqueCount";
  @SerializedName(SERIALIZED_NAME_APPROXIMATE_UNIQUE_COUNT)
  private Integer approximateUniqueCount;

  public static final String SERIALIZED_NAME_CONTRIBUTORS = "Contributors";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTORS)
  private List contributors;

  public static final String SERIALIZED_NAME_METRIC_DATAPOINTS = "MetricDatapoints";
  @SerializedName(SERIALIZED_NAME_METRIC_DATAPOINTS)
  private List metricDatapoints;

  public GetInsightRuleReportOutput() {
  }

  public GetInsightRuleReportOutput keyLabels(List keyLabels) {
    this.keyLabels = keyLabels;
    return this;
  }

  /**
   * Get keyLabels
   * @return keyLabels
   */
  @javax.annotation.Nullable
  public List getKeyLabels() {
    return keyLabels;
  }

  public void setKeyLabels(List keyLabels) {
    this.keyLabels = keyLabels;
  }


  public GetInsightRuleReportOutput aggregationStatistic(String aggregationStatistic) {
    this.aggregationStatistic = aggregationStatistic;
    return this;
  }

  /**
   * Get aggregationStatistic
   * @return aggregationStatistic
   */
  @javax.annotation.Nullable
  public String getAggregationStatistic() {
    return aggregationStatistic;
  }

  public void setAggregationStatistic(String aggregationStatistic) {
    this.aggregationStatistic = aggregationStatistic;
  }


  public GetInsightRuleReportOutput aggregateValue(Double aggregateValue) {
    this.aggregateValue = aggregateValue;
    return this;
  }

  /**
   * Get aggregateValue
   * @return aggregateValue
   */
  @javax.annotation.Nullable
  public Double getAggregateValue() {
    return aggregateValue;
  }

  public void setAggregateValue(Double aggregateValue) {
    this.aggregateValue = aggregateValue;
  }


  public GetInsightRuleReportOutput approximateUniqueCount(Integer approximateUniqueCount) {
    this.approximateUniqueCount = approximateUniqueCount;
    return this;
  }

  /**
   * Get approximateUniqueCount
   * @return approximateUniqueCount
   */
  @javax.annotation.Nullable
  public Integer getApproximateUniqueCount() {
    return approximateUniqueCount;
  }

  public void setApproximateUniqueCount(Integer approximateUniqueCount) {
    this.approximateUniqueCount = approximateUniqueCount;
  }


  public GetInsightRuleReportOutput contributors(List contributors) {
    this.contributors = contributors;
    return this;
  }

  /**
   * Get contributors
   * @return contributors
   */
  @javax.annotation.Nullable
  public List getContributors() {
    return contributors;
  }

  public void setContributors(List contributors) {
    this.contributors = contributors;
  }


  public GetInsightRuleReportOutput metricDatapoints(List metricDatapoints) {
    this.metricDatapoints = metricDatapoints;
    return this;
  }

  /**
   * Get metricDatapoints
   * @return metricDatapoints
   */
  @javax.annotation.Nullable
  public List getMetricDatapoints() {
    return metricDatapoints;
  }

  public void setMetricDatapoints(List metricDatapoints) {
    this.metricDatapoints = metricDatapoints;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetInsightRuleReportOutput getInsightRuleReportOutput = (GetInsightRuleReportOutput) o;
    return Objects.equals(this.keyLabels, getInsightRuleReportOutput.keyLabels) &&
        Objects.equals(this.aggregationStatistic, getInsightRuleReportOutput.aggregationStatistic) &&
        Objects.equals(this.aggregateValue, getInsightRuleReportOutput.aggregateValue) &&
        Objects.equals(this.approximateUniqueCount, getInsightRuleReportOutput.approximateUniqueCount) &&
        Objects.equals(this.contributors, getInsightRuleReportOutput.contributors) &&
        Objects.equals(this.metricDatapoints, getInsightRuleReportOutput.metricDatapoints);
  }

  @Override
  public int hashCode() {
    return Objects.hash(keyLabels, aggregationStatistic, aggregateValue, approximateUniqueCount, contributors, metricDatapoints);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetInsightRuleReportOutput {\n");
    sb.append("    keyLabels: ").append(toIndentedString(keyLabels)).append("\n");
    sb.append("    aggregationStatistic: ").append(toIndentedString(aggregationStatistic)).append("\n");
    sb.append("    aggregateValue: ").append(toIndentedString(aggregateValue)).append("\n");
    sb.append("    approximateUniqueCount: ").append(toIndentedString(approximateUniqueCount)).append("\n");
    sb.append("    contributors: ").append(toIndentedString(contributors)).append("\n");
    sb.append("    metricDatapoints: ").append(toIndentedString(metricDatapoints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("KeyLabels");
    openapiFields.add("AggregationStatistic");
    openapiFields.add("AggregateValue");
    openapiFields.add("ApproximateUniqueCount");
    openapiFields.add("Contributors");
    openapiFields.add("MetricDatapoints");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetInsightRuleReportOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetInsightRuleReportOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetInsightRuleReportOutput is not found in the empty JSON string", GetInsightRuleReportOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetInsightRuleReportOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetInsightRuleReportOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `KeyLabels`
      if (jsonObj.get("KeyLabels") != null && !jsonObj.get("KeyLabels").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("KeyLabels"));
      }
      // validate the optional field `AggregationStatistic`
      if (jsonObj.get("AggregationStatistic") != null && !jsonObj.get("AggregationStatistic").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AggregationStatistic"));
      }
      // validate the optional field `AggregateValue`
      if (jsonObj.get("AggregateValue") != null && !jsonObj.get("AggregateValue").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("AggregateValue"));
      }
      // validate the optional field `ApproximateUniqueCount`
      if (jsonObj.get("ApproximateUniqueCount") != null && !jsonObj.get("ApproximateUniqueCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ApproximateUniqueCount"));
      }
      // validate the optional field `Contributors`
      if (jsonObj.get("Contributors") != null && !jsonObj.get("Contributors").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Contributors"));
      }
      // validate the optional field `MetricDatapoints`
      if (jsonObj.get("MetricDatapoints") != null && !jsonObj.get("MetricDatapoints").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("MetricDatapoints"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetInsightRuleReportOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetInsightRuleReportOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetInsightRuleReportOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetInsightRuleReportOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<GetInsightRuleReportOutput>() {
           @Override
           public void write(JsonWriter out, GetInsightRuleReportOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetInsightRuleReportOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetInsightRuleReportOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetInsightRuleReportOutput
   * @throws IOException if the JSON string is invalid with respect to GetInsightRuleReportOutput
   */
  public static GetInsightRuleReportOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetInsightRuleReportOutput.class);
  }

  /**
   * Convert an instance of GetInsightRuleReportOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

