/*
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MetricStreamOutputFormat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetMetricStreamOutput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:23.972078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetMetricStreamOutput {
  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_INCLUDE_FILTERS = "IncludeFilters";
  @SerializedName(SERIALIZED_NAME_INCLUDE_FILTERS)
  private List includeFilters;

  public static final String SERIALIZED_NAME_EXCLUDE_FILTERS = "ExcludeFilters";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_FILTERS)
  private List excludeFilters;

  public static final String SERIALIZED_NAME_FIREHOSE_ARN = "FirehoseArn";
  @SerializedName(SERIALIZED_NAME_FIREHOSE_ARN)
  private String firehoseArn;

  public static final String SERIALIZED_NAME_ROLE_ARN = "RoleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_CREATION_DATE = "CreationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_LAST_UPDATE_DATE = "LastUpdateDate";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_DATE)
  private OffsetDateTime lastUpdateDate;

  public static final String SERIALIZED_NAME_OUTPUT_FORMAT = "OutputFormat";
  @SerializedName(SERIALIZED_NAME_OUTPUT_FORMAT)
  private MetricStreamOutputFormat outputFormat;

  public static final String SERIALIZED_NAME_STATISTICS_CONFIGURATIONS = "StatisticsConfigurations";
  @SerializedName(SERIALIZED_NAME_STATISTICS_CONFIGURATIONS)
  private List statisticsConfigurations;

  public static final String SERIALIZED_NAME_INCLUDE_LINKED_ACCOUNTS_METRICS = "IncludeLinkedAccountsMetrics";
  @SerializedName(SERIALIZED_NAME_INCLUDE_LINKED_ACCOUNTS_METRICS)
  private Boolean includeLinkedAccountsMetrics;

  public GetMetricStreamOutput() {
  }

  public GetMetricStreamOutput arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public GetMetricStreamOutput name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetMetricStreamOutput includeFilters(List includeFilters) {
    this.includeFilters = includeFilters;
    return this;
  }

  /**
   * Get includeFilters
   * @return includeFilters
   */
  @javax.annotation.Nullable
  public List getIncludeFilters() {
    return includeFilters;
  }

  public void setIncludeFilters(List includeFilters) {
    this.includeFilters = includeFilters;
  }


  public GetMetricStreamOutput excludeFilters(List excludeFilters) {
    this.excludeFilters = excludeFilters;
    return this;
  }

  /**
   * Get excludeFilters
   * @return excludeFilters
   */
  @javax.annotation.Nullable
  public List getExcludeFilters() {
    return excludeFilters;
  }

  public void setExcludeFilters(List excludeFilters) {
    this.excludeFilters = excludeFilters;
  }


  public GetMetricStreamOutput firehoseArn(String firehoseArn) {
    this.firehoseArn = firehoseArn;
    return this;
  }

  /**
   * Get firehoseArn
   * @return firehoseArn
   */
  @javax.annotation.Nullable
  public String getFirehoseArn() {
    return firehoseArn;
  }

  public void setFirehoseArn(String firehoseArn) {
    this.firehoseArn = firehoseArn;
  }


  public GetMetricStreamOutput roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * Get roleArn
   * @return roleArn
   */
  @javax.annotation.Nullable
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public GetMetricStreamOutput state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public GetMetricStreamOutput creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public GetMetricStreamOutput lastUpdateDate(OffsetDateTime lastUpdateDate) {
    this.lastUpdateDate = lastUpdateDate;
    return this;
  }

  /**
   * Get lastUpdateDate
   * @return lastUpdateDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdateDate() {
    return lastUpdateDate;
  }

  public void setLastUpdateDate(OffsetDateTime lastUpdateDate) {
    this.lastUpdateDate = lastUpdateDate;
  }


  public GetMetricStreamOutput outputFormat(MetricStreamOutputFormat outputFormat) {
    this.outputFormat = outputFormat;
    return this;
  }

  /**
   * Get outputFormat
   * @return outputFormat
   */
  @javax.annotation.Nullable
  public MetricStreamOutputFormat getOutputFormat() {
    return outputFormat;
  }

  public void setOutputFormat(MetricStreamOutputFormat outputFormat) {
    this.outputFormat = outputFormat;
  }


  public GetMetricStreamOutput statisticsConfigurations(List statisticsConfigurations) {
    this.statisticsConfigurations = statisticsConfigurations;
    return this;
  }

  /**
   * Get statisticsConfigurations
   * @return statisticsConfigurations
   */
  @javax.annotation.Nullable
  public List getStatisticsConfigurations() {
    return statisticsConfigurations;
  }

  public void setStatisticsConfigurations(List statisticsConfigurations) {
    this.statisticsConfigurations = statisticsConfigurations;
  }


  public GetMetricStreamOutput includeLinkedAccountsMetrics(Boolean includeLinkedAccountsMetrics) {
    this.includeLinkedAccountsMetrics = includeLinkedAccountsMetrics;
    return this;
  }

  /**
   * Get includeLinkedAccountsMetrics
   * @return includeLinkedAccountsMetrics
   */
  @javax.annotation.Nullable
  public Boolean getIncludeLinkedAccountsMetrics() {
    return includeLinkedAccountsMetrics;
  }

  public void setIncludeLinkedAccountsMetrics(Boolean includeLinkedAccountsMetrics) {
    this.includeLinkedAccountsMetrics = includeLinkedAccountsMetrics;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetMetricStreamOutput getMetricStreamOutput = (GetMetricStreamOutput) o;
    return Objects.equals(this.arn, getMetricStreamOutput.arn) &&
        Objects.equals(this.name, getMetricStreamOutput.name) &&
        Objects.equals(this.includeFilters, getMetricStreamOutput.includeFilters) &&
        Objects.equals(this.excludeFilters, getMetricStreamOutput.excludeFilters) &&
        Objects.equals(this.firehoseArn, getMetricStreamOutput.firehoseArn) &&
        Objects.equals(this.roleArn, getMetricStreamOutput.roleArn) &&
        Objects.equals(this.state, getMetricStreamOutput.state) &&
        Objects.equals(this.creationDate, getMetricStreamOutput.creationDate) &&
        Objects.equals(this.lastUpdateDate, getMetricStreamOutput.lastUpdateDate) &&
        Objects.equals(this.outputFormat, getMetricStreamOutput.outputFormat) &&
        Objects.equals(this.statisticsConfigurations, getMetricStreamOutput.statisticsConfigurations) &&
        Objects.equals(this.includeLinkedAccountsMetrics, getMetricStreamOutput.includeLinkedAccountsMetrics);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, name, includeFilters, excludeFilters, firehoseArn, roleArn, state, creationDate, lastUpdateDate, outputFormat, statisticsConfigurations, includeLinkedAccountsMetrics);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetMetricStreamOutput {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    includeFilters: ").append(toIndentedString(includeFilters)).append("\n");
    sb.append("    excludeFilters: ").append(toIndentedString(excludeFilters)).append("\n");
    sb.append("    firehoseArn: ").append(toIndentedString(firehoseArn)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    lastUpdateDate: ").append(toIndentedString(lastUpdateDate)).append("\n");
    sb.append("    outputFormat: ").append(toIndentedString(outputFormat)).append("\n");
    sb.append("    statisticsConfigurations: ").append(toIndentedString(statisticsConfigurations)).append("\n");
    sb.append("    includeLinkedAccountsMetrics: ").append(toIndentedString(includeLinkedAccountsMetrics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Arn");
    openapiFields.add("Name");
    openapiFields.add("IncludeFilters");
    openapiFields.add("ExcludeFilters");
    openapiFields.add("FirehoseArn");
    openapiFields.add("RoleArn");
    openapiFields.add("State");
    openapiFields.add("CreationDate");
    openapiFields.add("LastUpdateDate");
    openapiFields.add("OutputFormat");
    openapiFields.add("StatisticsConfigurations");
    openapiFields.add("IncludeLinkedAccountsMetrics");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetMetricStreamOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetMetricStreamOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetMetricStreamOutput is not found in the empty JSON string", GetMetricStreamOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetMetricStreamOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetMetricStreamOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Arn`
      if (jsonObj.get("Arn") != null && !jsonObj.get("Arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Arn"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `IncludeFilters`
      if (jsonObj.get("IncludeFilters") != null && !jsonObj.get("IncludeFilters").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("IncludeFilters"));
      }
      // validate the optional field `ExcludeFilters`
      if (jsonObj.get("ExcludeFilters") != null && !jsonObj.get("ExcludeFilters").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ExcludeFilters"));
      }
      // validate the optional field `FirehoseArn`
      if (jsonObj.get("FirehoseArn") != null && !jsonObj.get("FirehoseArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FirehoseArn"));
      }
      // validate the optional field `RoleArn`
      if (jsonObj.get("RoleArn") != null && !jsonObj.get("RoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RoleArn"));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("State"));
      }
      // validate the optional field `CreationDate`
      if (jsonObj.get("CreationDate") != null && !jsonObj.get("CreationDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationDate"));
      }
      // validate the optional field `LastUpdateDate`
      if (jsonObj.get("LastUpdateDate") != null && !jsonObj.get("LastUpdateDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdateDate"));
      }
      // validate the optional field `OutputFormat`
      if (jsonObj.get("OutputFormat") != null && !jsonObj.get("OutputFormat").isJsonNull()) {
        MetricStreamOutputFormat.validateJsonElement(jsonObj.get("OutputFormat"));
      }
      // validate the optional field `StatisticsConfigurations`
      if (jsonObj.get("StatisticsConfigurations") != null && !jsonObj.get("StatisticsConfigurations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("StatisticsConfigurations"));
      }
      // validate the optional field `IncludeLinkedAccountsMetrics`
      if (jsonObj.get("IncludeLinkedAccountsMetrics") != null && !jsonObj.get("IncludeLinkedAccountsMetrics").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IncludeLinkedAccountsMetrics"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetMetricStreamOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetMetricStreamOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetMetricStreamOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetMetricStreamOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<GetMetricStreamOutput>() {
           @Override
           public void write(JsonWriter out, GetMetricStreamOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetMetricStreamOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetMetricStreamOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetMetricStreamOutput
   * @throws IOException if the JSON string is invalid with respect to GetMetricStreamOutput
   */
  public static GetMetricStreamOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetMetricStreamOutput.class);
  }

  /**
   * Convert an instance of GetMetricStreamOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

