/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeAlarmHistoryInput.h
 *
 * 
 */

#ifndef OAIDescribeAlarmHistoryInput_H
#define OAIDescribeAlarmHistoryInput_H

#include <QJsonObject>

#include "OAIHistoryItemType.h"
#include "OAIScanBy.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDescribeAlarmHistoryInput : public OAIObject {
public:
    OAIDescribeAlarmHistoryInput();
    OAIDescribeAlarmHistoryInput(QString json);
    ~OAIDescribeAlarmHistoryInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAlarmName() const;
    void setAlarmName(const QString &alarm_name);
    bool is_alarm_name_Set() const;
    bool is_alarm_name_Valid() const;

    QList getAlarmTypes() const;
    void setAlarmTypes(const QList &alarm_types);
    bool is_alarm_types_Set() const;
    bool is_alarm_types_Valid() const;

    OAIHistoryItemType getHistoryItemType() const;
    void setHistoryItemType(const OAIHistoryItemType &history_item_type);
    bool is_history_item_type_Set() const;
    bool is_history_item_type_Valid() const;

    QDateTime getStartDate() const;
    void setStartDate(const QDateTime &start_date);
    bool is_start_date_Set() const;
    bool is_start_date_Valid() const;

    QDateTime getEndDate() const;
    void setEndDate(const QDateTime &end_date);
    bool is_end_date_Set() const;
    bool is_end_date_Valid() const;

    qint32 getMaxRecords() const;
    void setMaxRecords(const qint32 &max_records);
    bool is_max_records_Set() const;
    bool is_max_records_Valid() const;

    QString getNextToken() const;
    void setNextToken(const QString &next_token);
    bool is_next_token_Set() const;
    bool is_next_token_Valid() const;

    OAIScanBy getScanBy() const;
    void setScanBy(const OAIScanBy &scan_by);
    bool is_scan_by_Set() const;
    bool is_scan_by_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_alarm_name;
    bool m_alarm_name_isSet;
    bool m_alarm_name_isValid;

    QList m_alarm_types;
    bool m_alarm_types_isSet;
    bool m_alarm_types_isValid;

    OAIHistoryItemType m_history_item_type;
    bool m_history_item_type_isSet;
    bool m_history_item_type_isValid;

    QDateTime m_start_date;
    bool m_start_date_isSet;
    bool m_start_date_isValid;

    QDateTime m_end_date;
    bool m_end_date_isSet;
    bool m_end_date_isValid;

    qint32 m_max_records;
    bool m_max_records_isSet;
    bool m_max_records_isValid;

    QString m_next_token;
    bool m_next_token_isSet;
    bool m_next_token_isValid;

    OAIScanBy m_scan_by;
    bool m_scan_by_isSet;
    bool m_scan_by_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeAlarmHistoryInput)

#endif // OAIDescribeAlarmHistoryInput_H
