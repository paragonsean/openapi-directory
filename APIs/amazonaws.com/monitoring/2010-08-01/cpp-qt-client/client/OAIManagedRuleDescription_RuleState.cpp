/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagedRuleDescription_RuleState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagedRuleDescription_RuleState::OAIManagedRuleDescription_RuleState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagedRuleDescription_RuleState::OAIManagedRuleDescription_RuleState() {
    this->initializeModel();
}

OAIManagedRuleDescription_RuleState::~OAIManagedRuleDescription_RuleState() {}

void OAIManagedRuleDescription_RuleState::initializeModel() {

    m_rule_name_isSet = false;
    m_rule_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIManagedRuleDescription_RuleState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagedRuleDescription_RuleState::fromJsonObject(QJsonObject json) {

    m_rule_name_isValid = ::OpenAPI::fromJsonValue(m_rule_name, json[QString("RuleName")]);
    m_rule_name_isSet = !json[QString("RuleName")].isNull() && m_rule_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;
}

QString OAIManagedRuleDescription_RuleState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagedRuleDescription_RuleState::asJsonObject() const {
    QJsonObject obj;
    if (m_rule_name_isSet) {
        obj.insert(QString("RuleName"), ::OpenAPI::toJsonValue(m_rule_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIManagedRuleDescription_RuleState::getRuleName() const {
    return m_rule_name;
}
void OAIManagedRuleDescription_RuleState::setRuleName(const QString &rule_name) {
    m_rule_name = rule_name;
    m_rule_name_isSet = true;
}

bool OAIManagedRuleDescription_RuleState::is_rule_name_Set() const{
    return m_rule_name_isSet;
}

bool OAIManagedRuleDescription_RuleState::is_rule_name_Valid() const{
    return m_rule_name_isValid;
}

QString OAIManagedRuleDescription_RuleState::getState() const {
    return m_state;
}
void OAIManagedRuleDescription_RuleState::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIManagedRuleDescription_RuleState::is_state_Set() const{
    return m_state_isSet;
}

bool OAIManagedRuleDescription_RuleState::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIManagedRuleDescription_RuleState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rule_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagedRuleDescription_RuleState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rule_name_isValid && m_state_isValid && true;
}

} // namespace OpenAPI
