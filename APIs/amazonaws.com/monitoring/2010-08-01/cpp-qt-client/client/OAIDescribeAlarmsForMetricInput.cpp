/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAlarmsForMetricInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAlarmsForMetricInput::OAIDescribeAlarmsForMetricInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAlarmsForMetricInput::OAIDescribeAlarmsForMetricInput() {
    this->initializeModel();
}

OAIDescribeAlarmsForMetricInput::~OAIDescribeAlarmsForMetricInput() {}

void OAIDescribeAlarmsForMetricInput::initializeModel() {

    m_metric_name_isSet = false;
    m_metric_name_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_statistic_isSet = false;
    m_statistic_isValid = false;

    m_extended_statistic_isSet = false;
    m_extended_statistic_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;
}

void OAIDescribeAlarmsForMetricInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAlarmsForMetricInput::fromJsonObject(QJsonObject json) {

    m_metric_name_isValid = ::OpenAPI::fromJsonValue(m_metric_name, json[QString("MetricName")]);
    m_metric_name_isSet = !json[QString("MetricName")].isNull() && m_metric_name_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("Namespace")]);
    m_r_namespace_isSet = !json[QString("Namespace")].isNull() && m_r_namespace_isValid;

    m_statistic_isValid = ::OpenAPI::fromJsonValue(m_statistic, json[QString("Statistic")]);
    m_statistic_isSet = !json[QString("Statistic")].isNull() && m_statistic_isValid;

    m_extended_statistic_isValid = ::OpenAPI::fromJsonValue(m_extended_statistic, json[QString("ExtendedStatistic")]);
    m_extended_statistic_isSet = !json[QString("ExtendedStatistic")].isNull() && m_extended_statistic_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("Dimensions")]);
    m_dimensions_isSet = !json[QString("Dimensions")].isNull() && m_dimensions_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("Period")]);
    m_period_isSet = !json[QString("Period")].isNull() && m_period_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("Unit")]);
    m_unit_isSet = !json[QString("Unit")].isNull() && m_unit_isValid;
}

QString OAIDescribeAlarmsForMetricInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAlarmsForMetricInput::asJsonObject() const {
    QJsonObject obj;
    if (m_metric_name_isSet) {
        obj.insert(QString("MetricName"), ::OpenAPI::toJsonValue(m_metric_name));
    }
    if (m_r_namespace_isSet) {
        obj.insert(QString("Namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_statistic.isSet()) {
        obj.insert(QString("Statistic"), ::OpenAPI::toJsonValue(m_statistic));
    }
    if (m_extended_statistic_isSet) {
        obj.insert(QString("ExtendedStatistic"), ::OpenAPI::toJsonValue(m_extended_statistic));
    }
    if (m_dimensions.isSet()) {
        obj.insert(QString("Dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_period_isSet) {
        obj.insert(QString("Period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_unit.isSet()) {
        obj.insert(QString("Unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    return obj;
}

QString OAIDescribeAlarmsForMetricInput::getMetricName() const {
    return m_metric_name;
}
void OAIDescribeAlarmsForMetricInput::setMetricName(const QString &metric_name) {
    m_metric_name = metric_name;
    m_metric_name_isSet = true;
}

bool OAIDescribeAlarmsForMetricInput::is_metric_name_Set() const{
    return m_metric_name_isSet;
}

bool OAIDescribeAlarmsForMetricInput::is_metric_name_Valid() const{
    return m_metric_name_isValid;
}

QString OAIDescribeAlarmsForMetricInput::getRNamespace() const {
    return m_r_namespace;
}
void OAIDescribeAlarmsForMetricInput::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIDescribeAlarmsForMetricInput::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIDescribeAlarmsForMetricInput::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

OAIStatistic OAIDescribeAlarmsForMetricInput::getStatistic() const {
    return m_statistic;
}
void OAIDescribeAlarmsForMetricInput::setStatistic(const OAIStatistic &statistic) {
    m_statistic = statistic;
    m_statistic_isSet = true;
}

bool OAIDescribeAlarmsForMetricInput::is_statistic_Set() const{
    return m_statistic_isSet;
}

bool OAIDescribeAlarmsForMetricInput::is_statistic_Valid() const{
    return m_statistic_isValid;
}

QString OAIDescribeAlarmsForMetricInput::getExtendedStatistic() const {
    return m_extended_statistic;
}
void OAIDescribeAlarmsForMetricInput::setExtendedStatistic(const QString &extended_statistic) {
    m_extended_statistic = extended_statistic;
    m_extended_statistic_isSet = true;
}

bool OAIDescribeAlarmsForMetricInput::is_extended_statistic_Set() const{
    return m_extended_statistic_isSet;
}

bool OAIDescribeAlarmsForMetricInput::is_extended_statistic_Valid() const{
    return m_extended_statistic_isValid;
}

QList OAIDescribeAlarmsForMetricInput::getDimensions() const {
    return m_dimensions;
}
void OAIDescribeAlarmsForMetricInput::setDimensions(const QList &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIDescribeAlarmsForMetricInput::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIDescribeAlarmsForMetricInput::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

qint32 OAIDescribeAlarmsForMetricInput::getPeriod() const {
    return m_period;
}
void OAIDescribeAlarmsForMetricInput::setPeriod(const qint32 &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAIDescribeAlarmsForMetricInput::is_period_Set() const{
    return m_period_isSet;
}

bool OAIDescribeAlarmsForMetricInput::is_period_Valid() const{
    return m_period_isValid;
}

OAIStandardUnit OAIDescribeAlarmsForMetricInput::getUnit() const {
    return m_unit;
}
void OAIDescribeAlarmsForMetricInput::setUnit(const OAIStandardUnit &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIDescribeAlarmsForMetricInput::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIDescribeAlarmsForMetricInput::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAIDescribeAlarmsForMetricInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metric_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistic.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_statistic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAlarmsForMetricInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_metric_name_isValid && m_r_namespace_isValid && true;
}

} // namespace OpenAPI
