/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeAlarmsInput.h
 *
 * 
 */

#ifndef OAIDescribeAlarmsInput_H
#define OAIDescribeAlarmsInput_H

#include <QJsonObject>

#include "OAIStateValue.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDescribeAlarmsInput : public OAIObject {
public:
    OAIDescribeAlarmsInput();
    OAIDescribeAlarmsInput(QString json);
    ~OAIDescribeAlarmsInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getAlarmNames() const;
    void setAlarmNames(const QList &alarm_names);
    bool is_alarm_names_Set() const;
    bool is_alarm_names_Valid() const;

    QString getAlarmNamePrefix() const;
    void setAlarmNamePrefix(const QString &alarm_name_prefix);
    bool is_alarm_name_prefix_Set() const;
    bool is_alarm_name_prefix_Valid() const;

    QList getAlarmTypes() const;
    void setAlarmTypes(const QList &alarm_types);
    bool is_alarm_types_Set() const;
    bool is_alarm_types_Valid() const;

    QString getChildrenOfAlarmName() const;
    void setChildrenOfAlarmName(const QString &children_of_alarm_name);
    bool is_children_of_alarm_name_Set() const;
    bool is_children_of_alarm_name_Valid() const;

    QString getParentsOfAlarmName() const;
    void setParentsOfAlarmName(const QString &parents_of_alarm_name);
    bool is_parents_of_alarm_name_Set() const;
    bool is_parents_of_alarm_name_Valid() const;

    OAIStateValue getStateValue() const;
    void setStateValue(const OAIStateValue &state_value);
    bool is_state_value_Set() const;
    bool is_state_value_Valid() const;

    QString getActionPrefix() const;
    void setActionPrefix(const QString &action_prefix);
    bool is_action_prefix_Set() const;
    bool is_action_prefix_Valid() const;

    qint32 getMaxRecords() const;
    void setMaxRecords(const qint32 &max_records);
    bool is_max_records_Set() const;
    bool is_max_records_Valid() const;

    QString getNextToken() const;
    void setNextToken(const QString &next_token);
    bool is_next_token_Set() const;
    bool is_next_token_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_alarm_names;
    bool m_alarm_names_isSet;
    bool m_alarm_names_isValid;

    QString m_alarm_name_prefix;
    bool m_alarm_name_prefix_isSet;
    bool m_alarm_name_prefix_isValid;

    QList m_alarm_types;
    bool m_alarm_types_isSet;
    bool m_alarm_types_isValid;

    QString m_children_of_alarm_name;
    bool m_children_of_alarm_name_isSet;
    bool m_children_of_alarm_name_isValid;

    QString m_parents_of_alarm_name;
    bool m_parents_of_alarm_name_isSet;
    bool m_parents_of_alarm_name_isValid;

    OAIStateValue m_state_value;
    bool m_state_value_isSet;
    bool m_state_value_isValid;

    QString m_action_prefix;
    bool m_action_prefix_isSet;
    bool m_action_prefix_isValid;

    qint32 m_max_records;
    bool m_max_records_isSet;
    bool m_max_records_isValid;

    QString m_next_token;
    bool m_next_token_isSet;
    bool m_next_token_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeAlarmsInput)

#endif // OAIDescribeAlarmsInput_H
