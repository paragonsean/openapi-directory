/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAlarmHistoryInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAlarmHistoryInput::OAIDescribeAlarmHistoryInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAlarmHistoryInput::OAIDescribeAlarmHistoryInput() {
    this->initializeModel();
}

OAIDescribeAlarmHistoryInput::~OAIDescribeAlarmHistoryInput() {}

void OAIDescribeAlarmHistoryInput::initializeModel() {

    m_alarm_name_isSet = false;
    m_alarm_name_isValid = false;

    m_alarm_types_isSet = false;
    m_alarm_types_isValid = false;

    m_history_item_type_isSet = false;
    m_history_item_type_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_max_records_isSet = false;
    m_max_records_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_scan_by_isSet = false;
    m_scan_by_isValid = false;
}

void OAIDescribeAlarmHistoryInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAlarmHistoryInput::fromJsonObject(QJsonObject json) {

    m_alarm_name_isValid = ::OpenAPI::fromJsonValue(m_alarm_name, json[QString("AlarmName")]);
    m_alarm_name_isSet = !json[QString("AlarmName")].isNull() && m_alarm_name_isValid;

    m_alarm_types_isValid = ::OpenAPI::fromJsonValue(m_alarm_types, json[QString("AlarmTypes")]);
    m_alarm_types_isSet = !json[QString("AlarmTypes")].isNull() && m_alarm_types_isValid;

    m_history_item_type_isValid = ::OpenAPI::fromJsonValue(m_history_item_type, json[QString("HistoryItemType")]);
    m_history_item_type_isSet = !json[QString("HistoryItemType")].isNull() && m_history_item_type_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("StartDate")]);
    m_start_date_isSet = !json[QString("StartDate")].isNull() && m_start_date_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("EndDate")]);
    m_end_date_isSet = !json[QString("EndDate")].isNull() && m_end_date_isValid;

    m_max_records_isValid = ::OpenAPI::fromJsonValue(m_max_records, json[QString("MaxRecords")]);
    m_max_records_isSet = !json[QString("MaxRecords")].isNull() && m_max_records_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_scan_by_isValid = ::OpenAPI::fromJsonValue(m_scan_by, json[QString("ScanBy")]);
    m_scan_by_isSet = !json[QString("ScanBy")].isNull() && m_scan_by_isValid;
}

QString OAIDescribeAlarmHistoryInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAlarmHistoryInput::asJsonObject() const {
    QJsonObject obj;
    if (m_alarm_name_isSet) {
        obj.insert(QString("AlarmName"), ::OpenAPI::toJsonValue(m_alarm_name));
    }
    if (m_alarm_types.isSet()) {
        obj.insert(QString("AlarmTypes"), ::OpenAPI::toJsonValue(m_alarm_types));
    }
    if (m_history_item_type.isSet()) {
        obj.insert(QString("HistoryItemType"), ::OpenAPI::toJsonValue(m_history_item_type));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("StartDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("EndDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_max_records_isSet) {
        obj.insert(QString("MaxRecords"), ::OpenAPI::toJsonValue(m_max_records));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_scan_by.isSet()) {
        obj.insert(QString("ScanBy"), ::OpenAPI::toJsonValue(m_scan_by));
    }
    return obj;
}

QString OAIDescribeAlarmHistoryInput::getAlarmName() const {
    return m_alarm_name;
}
void OAIDescribeAlarmHistoryInput::setAlarmName(const QString &alarm_name) {
    m_alarm_name = alarm_name;
    m_alarm_name_isSet = true;
}

bool OAIDescribeAlarmHistoryInput::is_alarm_name_Set() const{
    return m_alarm_name_isSet;
}

bool OAIDescribeAlarmHistoryInput::is_alarm_name_Valid() const{
    return m_alarm_name_isValid;
}

QList OAIDescribeAlarmHistoryInput::getAlarmTypes() const {
    return m_alarm_types;
}
void OAIDescribeAlarmHistoryInput::setAlarmTypes(const QList &alarm_types) {
    m_alarm_types = alarm_types;
    m_alarm_types_isSet = true;
}

bool OAIDescribeAlarmHistoryInput::is_alarm_types_Set() const{
    return m_alarm_types_isSet;
}

bool OAIDescribeAlarmHistoryInput::is_alarm_types_Valid() const{
    return m_alarm_types_isValid;
}

OAIHistoryItemType OAIDescribeAlarmHistoryInput::getHistoryItemType() const {
    return m_history_item_type;
}
void OAIDescribeAlarmHistoryInput::setHistoryItemType(const OAIHistoryItemType &history_item_type) {
    m_history_item_type = history_item_type;
    m_history_item_type_isSet = true;
}

bool OAIDescribeAlarmHistoryInput::is_history_item_type_Set() const{
    return m_history_item_type_isSet;
}

bool OAIDescribeAlarmHistoryInput::is_history_item_type_Valid() const{
    return m_history_item_type_isValid;
}

QDateTime OAIDescribeAlarmHistoryInput::getStartDate() const {
    return m_start_date;
}
void OAIDescribeAlarmHistoryInput::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIDescribeAlarmHistoryInput::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIDescribeAlarmHistoryInput::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QDateTime OAIDescribeAlarmHistoryInput::getEndDate() const {
    return m_end_date;
}
void OAIDescribeAlarmHistoryInput::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIDescribeAlarmHistoryInput::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIDescribeAlarmHistoryInput::is_end_date_Valid() const{
    return m_end_date_isValid;
}

qint32 OAIDescribeAlarmHistoryInput::getMaxRecords() const {
    return m_max_records;
}
void OAIDescribeAlarmHistoryInput::setMaxRecords(const qint32 &max_records) {
    m_max_records = max_records;
    m_max_records_isSet = true;
}

bool OAIDescribeAlarmHistoryInput::is_max_records_Set() const{
    return m_max_records_isSet;
}

bool OAIDescribeAlarmHistoryInput::is_max_records_Valid() const{
    return m_max_records_isValid;
}

QString OAIDescribeAlarmHistoryInput::getNextToken() const {
    return m_next_token;
}
void OAIDescribeAlarmHistoryInput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeAlarmHistoryInput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeAlarmHistoryInput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

OAIScanBy OAIDescribeAlarmHistoryInput::getScanBy() const {
    return m_scan_by;
}
void OAIDescribeAlarmHistoryInput::setScanBy(const OAIScanBy &scan_by) {
    m_scan_by = scan_by;
    m_scan_by_isSet = true;
}

bool OAIDescribeAlarmHistoryInput::is_scan_by_Set() const{
    return m_scan_by_isSet;
}

bool OAIDescribeAlarmHistoryInput::is_scan_by_Valid() const{
    return m_scan_by_isValid;
}

bool OAIDescribeAlarmHistoryInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alarm_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alarm_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_history_item_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_records_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_by.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAlarmHistoryInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
