/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetInsightRuleReportOutput.h
 *
 * 
 */

#ifndef OAIGetInsightRuleReportOutput_H
#define OAIGetInsightRuleReportOutput_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetInsightRuleReportOutput : public OAIObject {
public:
    OAIGetInsightRuleReportOutput();
    OAIGetInsightRuleReportOutput(QString json);
    ~OAIGetInsightRuleReportOutput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getKeyLabels() const;
    void setKeyLabels(const QList &key_labels);
    bool is_key_labels_Set() const;
    bool is_key_labels_Valid() const;

    QString getAggregationStatistic() const;
    void setAggregationStatistic(const QString &aggregation_statistic);
    bool is_aggregation_statistic_Set() const;
    bool is_aggregation_statistic_Valid() const;

    double getAggregateValue() const;
    void setAggregateValue(const double &aggregate_value);
    bool is_aggregate_value_Set() const;
    bool is_aggregate_value_Valid() const;

    qint32 getApproximateUniqueCount() const;
    void setApproximateUniqueCount(const qint32 &approximate_unique_count);
    bool is_approximate_unique_count_Set() const;
    bool is_approximate_unique_count_Valid() const;

    QList getContributors() const;
    void setContributors(const QList &contributors);
    bool is_contributors_Set() const;
    bool is_contributors_Valid() const;

    QList getMetricDatapoints() const;
    void setMetricDatapoints(const QList &metric_datapoints);
    bool is_metric_datapoints_Set() const;
    bool is_metric_datapoints_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_key_labels;
    bool m_key_labels_isSet;
    bool m_key_labels_isValid;

    QString m_aggregation_statistic;
    bool m_aggregation_statistic_isSet;
    bool m_aggregation_statistic_isValid;

    double m_aggregate_value;
    bool m_aggregate_value_isSet;
    bool m_aggregate_value_isValid;

    qint32 m_approximate_unique_count;
    bool m_approximate_unique_count_isSet;
    bool m_approximate_unique_count_isValid;

    QList m_contributors;
    bool m_contributors_isSet;
    bool m_contributors_isValid;

    QList m_metric_datapoints;
    bool m_metric_datapoints_isSet;
    bool m_metric_datapoints_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetInsightRuleReportOutput)

#endif // OAIGetInsightRuleReportOutput_H
