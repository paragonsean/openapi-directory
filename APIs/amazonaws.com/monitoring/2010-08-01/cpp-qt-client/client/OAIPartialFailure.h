/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPartialFailure.h
 *
 * This array is empty if the API operation was successful for all the rules specified in the request. If the operation could not process one of the rules, the following data is returned for each of those rules.
 */

#ifndef OAIPartialFailure_H
#define OAIPartialFailure_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPartialFailure : public OAIObject {
public:
    OAIPartialFailure();
    OAIPartialFailure(QString json);
    ~OAIPartialFailure() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFailureResource() const;
    void setFailureResource(const QString &failure_resource);
    bool is_failure_resource_Set() const;
    bool is_failure_resource_Valid() const;

    QString getExceptionType() const;
    void setExceptionType(const QString &exception_type);
    bool is_exception_type_Set() const;
    bool is_exception_type_Valid() const;

    QString getFailureCode() const;
    void setFailureCode(const QString &failure_code);
    bool is_failure_code_Set() const;
    bool is_failure_code_Valid() const;

    QString getFailureDescription() const;
    void setFailureDescription(const QString &failure_description);
    bool is_failure_description_Set() const;
    bool is_failure_description_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_failure_resource;
    bool m_failure_resource_isSet;
    bool m_failure_resource_isValid;

    QString m_exception_type;
    bool m_exception_type_isSet;
    bool m_exception_type_isValid;

    QString m_failure_code;
    bool m_failure_code_isSet;
    bool m_failure_code_isValid;

    QString m_failure_description;
    bool m_failure_description_isSet;
    bool m_failure_description_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPartialFailure)

#endif // OAIPartialFailure_H
