/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetMetricDataInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetMetricDataInput::OAIGetMetricDataInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetMetricDataInput::OAIGetMetricDataInput() {
    this->initializeModel();
}

OAIGetMetricDataInput::~OAIGetMetricDataInput() {}

void OAIGetMetricDataInput::initializeModel() {

    m_metric_data_queries_isSet = false;
    m_metric_data_queries_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_scan_by_isSet = false;
    m_scan_by_isValid = false;

    m_max_datapoints_isSet = false;
    m_max_datapoints_isValid = false;

    m_label_options_isSet = false;
    m_label_options_isValid = false;
}

void OAIGetMetricDataInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetMetricDataInput::fromJsonObject(QJsonObject json) {

    m_metric_data_queries_isValid = ::OpenAPI::fromJsonValue(m_metric_data_queries, json[QString("MetricDataQueries")]);
    m_metric_data_queries_isSet = !json[QString("MetricDataQueries")].isNull() && m_metric_data_queries_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_scan_by_isValid = ::OpenAPI::fromJsonValue(m_scan_by, json[QString("ScanBy")]);
    m_scan_by_isSet = !json[QString("ScanBy")].isNull() && m_scan_by_isValid;

    m_max_datapoints_isValid = ::OpenAPI::fromJsonValue(m_max_datapoints, json[QString("MaxDatapoints")]);
    m_max_datapoints_isSet = !json[QString("MaxDatapoints")].isNull() && m_max_datapoints_isValid;

    m_label_options_isValid = ::OpenAPI::fromJsonValue(m_label_options, json[QString("LabelOptions")]);
    m_label_options_isSet = !json[QString("LabelOptions")].isNull() && m_label_options_isValid;
}

QString OAIGetMetricDataInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetMetricDataInput::asJsonObject() const {
    QJsonObject obj;
    if (m_metric_data_queries.isSet()) {
        obj.insert(QString("MetricDataQueries"), ::OpenAPI::toJsonValue(m_metric_data_queries));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_scan_by.isSet()) {
        obj.insert(QString("ScanBy"), ::OpenAPI::toJsonValue(m_scan_by));
    }
    if (m_max_datapoints_isSet) {
        obj.insert(QString("MaxDatapoints"), ::OpenAPI::toJsonValue(m_max_datapoints));
    }
    if (m_label_options.isSet()) {
        obj.insert(QString("LabelOptions"), ::OpenAPI::toJsonValue(m_label_options));
    }
    return obj;
}

QList OAIGetMetricDataInput::getMetricDataQueries() const {
    return m_metric_data_queries;
}
void OAIGetMetricDataInput::setMetricDataQueries(const QList &metric_data_queries) {
    m_metric_data_queries = metric_data_queries;
    m_metric_data_queries_isSet = true;
}

bool OAIGetMetricDataInput::is_metric_data_queries_Set() const{
    return m_metric_data_queries_isSet;
}

bool OAIGetMetricDataInput::is_metric_data_queries_Valid() const{
    return m_metric_data_queries_isValid;
}

QDateTime OAIGetMetricDataInput::getStartTime() const {
    return m_start_time;
}
void OAIGetMetricDataInput::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGetMetricDataInput::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGetMetricDataInput::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIGetMetricDataInput::getEndTime() const {
    return m_end_time;
}
void OAIGetMetricDataInput::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIGetMetricDataInput::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIGetMetricDataInput::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIGetMetricDataInput::getNextToken() const {
    return m_next_token;
}
void OAIGetMetricDataInput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetMetricDataInput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetMetricDataInput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

OAIScanBy OAIGetMetricDataInput::getScanBy() const {
    return m_scan_by;
}
void OAIGetMetricDataInput::setScanBy(const OAIScanBy &scan_by) {
    m_scan_by = scan_by;
    m_scan_by_isSet = true;
}

bool OAIGetMetricDataInput::is_scan_by_Set() const{
    return m_scan_by_isSet;
}

bool OAIGetMetricDataInput::is_scan_by_Valid() const{
    return m_scan_by_isValid;
}

qint32 OAIGetMetricDataInput::getMaxDatapoints() const {
    return m_max_datapoints;
}
void OAIGetMetricDataInput::setMaxDatapoints(const qint32 &max_datapoints) {
    m_max_datapoints = max_datapoints;
    m_max_datapoints_isSet = true;
}

bool OAIGetMetricDataInput::is_max_datapoints_Set() const{
    return m_max_datapoints_isSet;
}

bool OAIGetMetricDataInput::is_max_datapoints_Valid() const{
    return m_max_datapoints_isValid;
}

OAIGetMetricDataInput_LabelOptions OAIGetMetricDataInput::getLabelOptions() const {
    return m_label_options;
}
void OAIGetMetricDataInput::setLabelOptions(const OAIGetMetricDataInput_LabelOptions &label_options) {
    m_label_options = label_options;
    m_label_options_isSet = true;
}

bool OAIGetMetricDataInput::is_label_options_Set() const{
    return m_label_options_isSet;
}

bool OAIGetMetricDataInput::is_label_options_Valid() const{
    return m_label_options_isValid;
}

bool OAIGetMetricDataInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metric_data_queries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_datapoints_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetMetricDataInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_metric_data_queries_isValid && m_start_time_isValid && m_end_time_isValid && true;
}

} // namespace OpenAPI
