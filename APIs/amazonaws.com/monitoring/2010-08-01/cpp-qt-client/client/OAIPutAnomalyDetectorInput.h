/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPutAnomalyDetectorInput.h
 *
 * 
 */

#ifndef OAIPutAnomalyDetectorInput_H
#define OAIPutAnomalyDetectorInput_H

#include <QJsonObject>

#include "OAIPutAnomalyDetectorInput_Configuration.h"
#include "OAIPutAnomalyDetectorInput_MetricMathAnomalyDetector.h"
#include "OAIPutAnomalyDetectorInput_SingleMetricAnomalyDetector.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPutAnomalyDetectorInput_Configuration;
class OAIPutAnomalyDetectorInput_SingleMetricAnomalyDetector;
class OAIPutAnomalyDetectorInput_MetricMathAnomalyDetector;

class OAIPutAnomalyDetectorInput : public OAIObject {
public:
    OAIPutAnomalyDetectorInput();
    OAIPutAnomalyDetectorInput(QString json);
    ~OAIPutAnomalyDetectorInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getRNamespace() const;
    void setRNamespace(const QString &r_namespace);
    bool is_r_namespace_Set() const;
    bool is_r_namespace_Valid() const;

    QString getMetricName() const;
    void setMetricName(const QString &metric_name);
    bool is_metric_name_Set() const;
    bool is_metric_name_Valid() const;

    QList getDimensions() const;
    void setDimensions(const QList &dimensions);
    bool is_dimensions_Set() const;
    bool is_dimensions_Valid() const;

    QString getStat() const;
    void setStat(const QString &stat);
    bool is_stat_Set() const;
    bool is_stat_Valid() const;

    OAIPutAnomalyDetectorInput_Configuration getConfiguration() const;
    void setConfiguration(const OAIPutAnomalyDetectorInput_Configuration &configuration);
    bool is_configuration_Set() const;
    bool is_configuration_Valid() const;

    OAIPutAnomalyDetectorInput_SingleMetricAnomalyDetector getSingleMetricAnomalyDetector() const;
    void setSingleMetricAnomalyDetector(const OAIPutAnomalyDetectorInput_SingleMetricAnomalyDetector &single_metric_anomaly_detector);
    bool is_single_metric_anomaly_detector_Set() const;
    bool is_single_metric_anomaly_detector_Valid() const;

    OAIPutAnomalyDetectorInput_MetricMathAnomalyDetector getMetricMathAnomalyDetector() const;
    void setMetricMathAnomalyDetector(const OAIPutAnomalyDetectorInput_MetricMathAnomalyDetector &metric_math_anomaly_detector);
    bool is_metric_math_anomaly_detector_Set() const;
    bool is_metric_math_anomaly_detector_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_r_namespace;
    bool m_r_namespace_isSet;
    bool m_r_namespace_isValid;

    QString m_metric_name;
    bool m_metric_name_isSet;
    bool m_metric_name_isValid;

    QList m_dimensions;
    bool m_dimensions_isSet;
    bool m_dimensions_isValid;

    QString m_stat;
    bool m_stat_isSet;
    bool m_stat_isValid;

    OAIPutAnomalyDetectorInput_Configuration m_configuration;
    bool m_configuration_isSet;
    bool m_configuration_isValid;

    OAIPutAnomalyDetectorInput_SingleMetricAnomalyDetector m_single_metric_anomaly_detector;
    bool m_single_metric_anomaly_detector_isSet;
    bool m_single_metric_anomaly_detector_isValid;

    OAIPutAnomalyDetectorInput_MetricMathAnomalyDetector m_metric_math_anomaly_detector;
    bool m_metric_math_anomaly_detector_isSet;
    bool m_metric_math_anomaly_detector_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPutAnomalyDetectorInput)

#endif // OAIPutAnomalyDetectorInput_H
