/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISetAlarmStateInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISetAlarmStateInput::OAISetAlarmStateInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISetAlarmStateInput::OAISetAlarmStateInput() {
    this->initializeModel();
}

OAISetAlarmStateInput::~OAISetAlarmStateInput() {}

void OAISetAlarmStateInput::initializeModel() {

    m_alarm_name_isSet = false;
    m_alarm_name_isValid = false;

    m_state_value_isSet = false;
    m_state_value_isValid = false;

    m_state_reason_isSet = false;
    m_state_reason_isValid = false;

    m_state_reason_data_isSet = false;
    m_state_reason_data_isValid = false;
}

void OAISetAlarmStateInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISetAlarmStateInput::fromJsonObject(QJsonObject json) {

    m_alarm_name_isValid = ::OpenAPI::fromJsonValue(m_alarm_name, json[QString("AlarmName")]);
    m_alarm_name_isSet = !json[QString("AlarmName")].isNull() && m_alarm_name_isValid;

    m_state_value_isValid = ::OpenAPI::fromJsonValue(m_state_value, json[QString("StateValue")]);
    m_state_value_isSet = !json[QString("StateValue")].isNull() && m_state_value_isValid;

    m_state_reason_isValid = ::OpenAPI::fromJsonValue(m_state_reason, json[QString("StateReason")]);
    m_state_reason_isSet = !json[QString("StateReason")].isNull() && m_state_reason_isValid;

    m_state_reason_data_isValid = ::OpenAPI::fromJsonValue(m_state_reason_data, json[QString("StateReasonData")]);
    m_state_reason_data_isSet = !json[QString("StateReasonData")].isNull() && m_state_reason_data_isValid;
}

QString OAISetAlarmStateInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISetAlarmStateInput::asJsonObject() const {
    QJsonObject obj;
    if (m_alarm_name_isSet) {
        obj.insert(QString("AlarmName"), ::OpenAPI::toJsonValue(m_alarm_name));
    }
    if (m_state_value.isSet()) {
        obj.insert(QString("StateValue"), ::OpenAPI::toJsonValue(m_state_value));
    }
    if (m_state_reason_isSet) {
        obj.insert(QString("StateReason"), ::OpenAPI::toJsonValue(m_state_reason));
    }
    if (m_state_reason_data_isSet) {
        obj.insert(QString("StateReasonData"), ::OpenAPI::toJsonValue(m_state_reason_data));
    }
    return obj;
}

QString OAISetAlarmStateInput::getAlarmName() const {
    return m_alarm_name;
}
void OAISetAlarmStateInput::setAlarmName(const QString &alarm_name) {
    m_alarm_name = alarm_name;
    m_alarm_name_isSet = true;
}

bool OAISetAlarmStateInput::is_alarm_name_Set() const{
    return m_alarm_name_isSet;
}

bool OAISetAlarmStateInput::is_alarm_name_Valid() const{
    return m_alarm_name_isValid;
}

OAIStateValue OAISetAlarmStateInput::getStateValue() const {
    return m_state_value;
}
void OAISetAlarmStateInput::setStateValue(const OAIStateValue &state_value) {
    m_state_value = state_value;
    m_state_value_isSet = true;
}

bool OAISetAlarmStateInput::is_state_value_Set() const{
    return m_state_value_isSet;
}

bool OAISetAlarmStateInput::is_state_value_Valid() const{
    return m_state_value_isValid;
}

QString OAISetAlarmStateInput::getStateReason() const {
    return m_state_reason;
}
void OAISetAlarmStateInput::setStateReason(const QString &state_reason) {
    m_state_reason = state_reason;
    m_state_reason_isSet = true;
}

bool OAISetAlarmStateInput::is_state_reason_Set() const{
    return m_state_reason_isSet;
}

bool OAISetAlarmStateInput::is_state_reason_Valid() const{
    return m_state_reason_isValid;
}

QString OAISetAlarmStateInput::getStateReasonData() const {
    return m_state_reason_data;
}
void OAISetAlarmStateInput::setStateReasonData(const QString &state_reason_data) {
    m_state_reason_data = state_reason_data;
    m_state_reason_data_isSet = true;
}

bool OAISetAlarmStateInput::is_state_reason_data_Set() const{
    return m_state_reason_data_isSet;
}

bool OAISetAlarmStateInput::is_state_reason_data_Valid() const{
    return m_state_reason_data_isValid;
}

bool OAISetAlarmStateInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alarm_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_reason_data_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISetAlarmStateInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_alarm_name_isValid && m_state_value_isValid && m_state_reason_isValid && true;
}

} // namespace OpenAPI
