/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutMetricStreamInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutMetricStreamInput::OAIPutMetricStreamInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutMetricStreamInput::OAIPutMetricStreamInput() {
    this->initializeModel();
}

OAIPutMetricStreamInput::~OAIPutMetricStreamInput() {}

void OAIPutMetricStreamInput::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_include_filters_isSet = false;
    m_include_filters_isValid = false;

    m_exclude_filters_isSet = false;
    m_exclude_filters_isValid = false;

    m_firehose_arn_isSet = false;
    m_firehose_arn_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_output_format_isSet = false;
    m_output_format_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_statistics_configurations_isSet = false;
    m_statistics_configurations_isValid = false;

    m_include_linked_accounts_metrics_isSet = false;
    m_include_linked_accounts_metrics_isValid = false;
}

void OAIPutMetricStreamInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutMetricStreamInput::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_include_filters_isValid = ::OpenAPI::fromJsonValue(m_include_filters, json[QString("IncludeFilters")]);
    m_include_filters_isSet = !json[QString("IncludeFilters")].isNull() && m_include_filters_isValid;

    m_exclude_filters_isValid = ::OpenAPI::fromJsonValue(m_exclude_filters, json[QString("ExcludeFilters")]);
    m_exclude_filters_isSet = !json[QString("ExcludeFilters")].isNull() && m_exclude_filters_isValid;

    m_firehose_arn_isValid = ::OpenAPI::fromJsonValue(m_firehose_arn, json[QString("FirehoseArn")]);
    m_firehose_arn_isSet = !json[QString("FirehoseArn")].isNull() && m_firehose_arn_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_output_format_isValid = ::OpenAPI::fromJsonValue(m_output_format, json[QString("OutputFormat")]);
    m_output_format_isSet = !json[QString("OutputFormat")].isNull() && m_output_format_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_statistics_configurations_isValid = ::OpenAPI::fromJsonValue(m_statistics_configurations, json[QString("StatisticsConfigurations")]);
    m_statistics_configurations_isSet = !json[QString("StatisticsConfigurations")].isNull() && m_statistics_configurations_isValid;

    m_include_linked_accounts_metrics_isValid = ::OpenAPI::fromJsonValue(m_include_linked_accounts_metrics, json[QString("IncludeLinkedAccountsMetrics")]);
    m_include_linked_accounts_metrics_isSet = !json[QString("IncludeLinkedAccountsMetrics")].isNull() && m_include_linked_accounts_metrics_isValid;
}

QString OAIPutMetricStreamInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutMetricStreamInput::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_include_filters.isSet()) {
        obj.insert(QString("IncludeFilters"), ::OpenAPI::toJsonValue(m_include_filters));
    }
    if (m_exclude_filters.isSet()) {
        obj.insert(QString("ExcludeFilters"), ::OpenAPI::toJsonValue(m_exclude_filters));
    }
    if (m_firehose_arn_isSet) {
        obj.insert(QString("FirehoseArn"), ::OpenAPI::toJsonValue(m_firehose_arn));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_output_format.isSet()) {
        obj.insert(QString("OutputFormat"), ::OpenAPI::toJsonValue(m_output_format));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_statistics_configurations.isSet()) {
        obj.insert(QString("StatisticsConfigurations"), ::OpenAPI::toJsonValue(m_statistics_configurations));
    }
    if (m_include_linked_accounts_metrics_isSet) {
        obj.insert(QString("IncludeLinkedAccountsMetrics"), ::OpenAPI::toJsonValue(m_include_linked_accounts_metrics));
    }
    return obj;
}

QString OAIPutMetricStreamInput::getName() const {
    return m_name;
}
void OAIPutMetricStreamInput::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPutMetricStreamInput::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPutMetricStreamInput::is_name_Valid() const{
    return m_name_isValid;
}

QList OAIPutMetricStreamInput::getIncludeFilters() const {
    return m_include_filters;
}
void OAIPutMetricStreamInput::setIncludeFilters(const QList &include_filters) {
    m_include_filters = include_filters;
    m_include_filters_isSet = true;
}

bool OAIPutMetricStreamInput::is_include_filters_Set() const{
    return m_include_filters_isSet;
}

bool OAIPutMetricStreamInput::is_include_filters_Valid() const{
    return m_include_filters_isValid;
}

QList OAIPutMetricStreamInput::getExcludeFilters() const {
    return m_exclude_filters;
}
void OAIPutMetricStreamInput::setExcludeFilters(const QList &exclude_filters) {
    m_exclude_filters = exclude_filters;
    m_exclude_filters_isSet = true;
}

bool OAIPutMetricStreamInput::is_exclude_filters_Set() const{
    return m_exclude_filters_isSet;
}

bool OAIPutMetricStreamInput::is_exclude_filters_Valid() const{
    return m_exclude_filters_isValid;
}

QString OAIPutMetricStreamInput::getFirehoseArn() const {
    return m_firehose_arn;
}
void OAIPutMetricStreamInput::setFirehoseArn(const QString &firehose_arn) {
    m_firehose_arn = firehose_arn;
    m_firehose_arn_isSet = true;
}

bool OAIPutMetricStreamInput::is_firehose_arn_Set() const{
    return m_firehose_arn_isSet;
}

bool OAIPutMetricStreamInput::is_firehose_arn_Valid() const{
    return m_firehose_arn_isValid;
}

QString OAIPutMetricStreamInput::getRoleArn() const {
    return m_role_arn;
}
void OAIPutMetricStreamInput::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIPutMetricStreamInput::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIPutMetricStreamInput::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

OAIMetricStreamOutputFormat OAIPutMetricStreamInput::getOutputFormat() const {
    return m_output_format;
}
void OAIPutMetricStreamInput::setOutputFormat(const OAIMetricStreamOutputFormat &output_format) {
    m_output_format = output_format;
    m_output_format_isSet = true;
}

bool OAIPutMetricStreamInput::is_output_format_Set() const{
    return m_output_format_isSet;
}

bool OAIPutMetricStreamInput::is_output_format_Valid() const{
    return m_output_format_isValid;
}

QList OAIPutMetricStreamInput::getTags() const {
    return m_tags;
}
void OAIPutMetricStreamInput::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIPutMetricStreamInput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIPutMetricStreamInput::is_tags_Valid() const{
    return m_tags_isValid;
}

QList OAIPutMetricStreamInput::getStatisticsConfigurations() const {
    return m_statistics_configurations;
}
void OAIPutMetricStreamInput::setStatisticsConfigurations(const QList &statistics_configurations) {
    m_statistics_configurations = statistics_configurations;
    m_statistics_configurations_isSet = true;
}

bool OAIPutMetricStreamInput::is_statistics_configurations_Set() const{
    return m_statistics_configurations_isSet;
}

bool OAIPutMetricStreamInput::is_statistics_configurations_Valid() const{
    return m_statistics_configurations_isValid;
}

bool OAIPutMetricStreamInput::getIncludeLinkedAccountsMetrics() const {
    return m_include_linked_accounts_metrics;
}
void OAIPutMetricStreamInput::setIncludeLinkedAccountsMetrics(const bool &include_linked_accounts_metrics) {
    m_include_linked_accounts_metrics = include_linked_accounts_metrics;
    m_include_linked_accounts_metrics_isSet = true;
}

bool OAIPutMetricStreamInput::is_include_linked_accounts_metrics_Set() const{
    return m_include_linked_accounts_metrics_isSet;
}

bool OAIPutMetricStreamInput::is_include_linked_accounts_metrics_Valid() const{
    return m_include_linked_accounts_metrics_isValid;
}

bool OAIPutMetricStreamInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_firehose_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistics_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_linked_accounts_metrics_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutMetricStreamInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_firehose_arn_isValid && m_role_arn_isValid && m_output_format_isValid && true;
}

} // namespace OpenAPI
