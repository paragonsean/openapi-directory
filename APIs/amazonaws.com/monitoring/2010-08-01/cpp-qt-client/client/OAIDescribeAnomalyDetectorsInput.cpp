/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAnomalyDetectorsInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAnomalyDetectorsInput::OAIDescribeAnomalyDetectorsInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAnomalyDetectorsInput::OAIDescribeAnomalyDetectorsInput() {
    this->initializeModel();
}

OAIDescribeAnomalyDetectorsInput::~OAIDescribeAnomalyDetectorsInput() {}

void OAIDescribeAnomalyDetectorsInput::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_metric_name_isSet = false;
    m_metric_name_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_anomaly_detector_types_isSet = false;
    m_anomaly_detector_types_isValid = false;
}

void OAIDescribeAnomalyDetectorsInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAnomalyDetectorsInput::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("Namespace")]);
    m_r_namespace_isSet = !json[QString("Namespace")].isNull() && m_r_namespace_isValid;

    m_metric_name_isValid = ::OpenAPI::fromJsonValue(m_metric_name, json[QString("MetricName")]);
    m_metric_name_isSet = !json[QString("MetricName")].isNull() && m_metric_name_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("Dimensions")]);
    m_dimensions_isSet = !json[QString("Dimensions")].isNull() && m_dimensions_isValid;

    m_anomaly_detector_types_isValid = ::OpenAPI::fromJsonValue(m_anomaly_detector_types, json[QString("AnomalyDetectorTypes")]);
    m_anomaly_detector_types_isSet = !json[QString("AnomalyDetectorTypes")].isNull() && m_anomaly_detector_types_isValid;
}

QString OAIDescribeAnomalyDetectorsInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAnomalyDetectorsInput::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_r_namespace_isSet) {
        obj.insert(QString("Namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_metric_name_isSet) {
        obj.insert(QString("MetricName"), ::OpenAPI::toJsonValue(m_metric_name));
    }
    if (m_dimensions.isSet()) {
        obj.insert(QString("Dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_anomaly_detector_types.isSet()) {
        obj.insert(QString("AnomalyDetectorTypes"), ::OpenAPI::toJsonValue(m_anomaly_detector_types));
    }
    return obj;
}

QString OAIDescribeAnomalyDetectorsInput::getNextToken() const {
    return m_next_token;
}
void OAIDescribeAnomalyDetectorsInput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeAnomalyDetectorsInput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeAnomalyDetectorsInput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIDescribeAnomalyDetectorsInput::getMaxResults() const {
    return m_max_results;
}
void OAIDescribeAnomalyDetectorsInput::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIDescribeAnomalyDetectorsInput::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIDescribeAnomalyDetectorsInput::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIDescribeAnomalyDetectorsInput::getRNamespace() const {
    return m_r_namespace;
}
void OAIDescribeAnomalyDetectorsInput::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIDescribeAnomalyDetectorsInput::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIDescribeAnomalyDetectorsInput::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QString OAIDescribeAnomalyDetectorsInput::getMetricName() const {
    return m_metric_name;
}
void OAIDescribeAnomalyDetectorsInput::setMetricName(const QString &metric_name) {
    m_metric_name = metric_name;
    m_metric_name_isSet = true;
}

bool OAIDescribeAnomalyDetectorsInput::is_metric_name_Set() const{
    return m_metric_name_isSet;
}

bool OAIDescribeAnomalyDetectorsInput::is_metric_name_Valid() const{
    return m_metric_name_isValid;
}

QList OAIDescribeAnomalyDetectorsInput::getDimensions() const {
    return m_dimensions;
}
void OAIDescribeAnomalyDetectorsInput::setDimensions(const QList &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIDescribeAnomalyDetectorsInput::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIDescribeAnomalyDetectorsInput::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QList OAIDescribeAnomalyDetectorsInput::getAnomalyDetectorTypes() const {
    return m_anomaly_detector_types;
}
void OAIDescribeAnomalyDetectorsInput::setAnomalyDetectorTypes(const QList &anomaly_detector_types) {
    m_anomaly_detector_types = anomaly_detector_types;
    m_anomaly_detector_types_isSet = true;
}

bool OAIDescribeAnomalyDetectorsInput::is_anomaly_detector_types_Set() const{
    return m_anomaly_detector_types_isSet;
}

bool OAIDescribeAnomalyDetectorsInput::is_anomaly_detector_types_Valid() const{
    return m_anomaly_detector_types_isValid;
}

bool OAIDescribeAnomalyDetectorsInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_anomaly_detector_types.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAnomalyDetectorsInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
