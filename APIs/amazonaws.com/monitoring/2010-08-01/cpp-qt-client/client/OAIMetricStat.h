/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMetricStat.h
 *
 * This structure defines the metric to be returned, along with the statistics, period, and units.
 */

#ifndef OAIMetricStat_H
#define OAIMetricStat_H

#include <QJsonObject>

#include "OAIMetricStat_Metric.h"
#include "OAIStandardUnit.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMetricStat_Metric;

class OAIMetricStat : public OAIObject {
public:
    OAIMetricStat();
    OAIMetricStat(QString json);
    ~OAIMetricStat() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIMetricStat_Metric getMetric() const;
    void setMetric(const OAIMetricStat_Metric &metric);
    bool is_metric_Set() const;
    bool is_metric_Valid() const;

    qint32 getPeriod() const;
    void setPeriod(const qint32 &period);
    bool is_period_Set() const;
    bool is_period_Valid() const;

    QString getStat() const;
    void setStat(const QString &stat);
    bool is_stat_Set() const;
    bool is_stat_Valid() const;

    OAIStandardUnit getUnit() const;
    void setUnit(const OAIStandardUnit &unit);
    bool is_unit_Set() const;
    bool is_unit_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIMetricStat_Metric m_metric;
    bool m_metric_isSet;
    bool m_metric_isValid;

    qint32 m_period;
    bool m_period_isSet;
    bool m_period_isValid;

    QString m_stat;
    bool m_stat_isSet;
    bool m_stat_isValid;

    OAIStandardUnit m_unit;
    bool m_unit_isSet;
    bool m_unit_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMetricStat)

#endif // OAIMetricStat_H
