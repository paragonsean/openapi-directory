/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricStat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricStat::OAIMetricStat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricStat::OAIMetricStat() {
    this->initializeModel();
}

OAIMetricStat::~OAIMetricStat() {}

void OAIMetricStat::initializeModel() {

    m_metric_isSet = false;
    m_metric_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_stat_isSet = false;
    m_stat_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;
}

void OAIMetricStat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricStat::fromJsonObject(QJsonObject json) {

    m_metric_isValid = ::OpenAPI::fromJsonValue(m_metric, json[QString("Metric")]);
    m_metric_isSet = !json[QString("Metric")].isNull() && m_metric_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("Period")]);
    m_period_isSet = !json[QString("Period")].isNull() && m_period_isValid;

    m_stat_isValid = ::OpenAPI::fromJsonValue(m_stat, json[QString("Stat")]);
    m_stat_isSet = !json[QString("Stat")].isNull() && m_stat_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("Unit")]);
    m_unit_isSet = !json[QString("Unit")].isNull() && m_unit_isValid;
}

QString OAIMetricStat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricStat::asJsonObject() const {
    QJsonObject obj;
    if (m_metric.isSet()) {
        obj.insert(QString("Metric"), ::OpenAPI::toJsonValue(m_metric));
    }
    if (m_period_isSet) {
        obj.insert(QString("Period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_stat_isSet) {
        obj.insert(QString("Stat"), ::OpenAPI::toJsonValue(m_stat));
    }
    if (m_unit.isSet()) {
        obj.insert(QString("Unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    return obj;
}

OAIMetricStat_Metric OAIMetricStat::getMetric() const {
    return m_metric;
}
void OAIMetricStat::setMetric(const OAIMetricStat_Metric &metric) {
    m_metric = metric;
    m_metric_isSet = true;
}

bool OAIMetricStat::is_metric_Set() const{
    return m_metric_isSet;
}

bool OAIMetricStat::is_metric_Valid() const{
    return m_metric_isValid;
}

qint32 OAIMetricStat::getPeriod() const {
    return m_period;
}
void OAIMetricStat::setPeriod(const qint32 &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAIMetricStat::is_period_Set() const{
    return m_period_isSet;
}

bool OAIMetricStat::is_period_Valid() const{
    return m_period_isValid;
}

QString OAIMetricStat::getStat() const {
    return m_stat;
}
void OAIMetricStat::setStat(const QString &stat) {
    m_stat = stat;
    m_stat_isSet = true;
}

bool OAIMetricStat::is_stat_Set() const{
    return m_stat_isSet;
}

bool OAIMetricStat::is_stat_Valid() const{
    return m_stat_isValid;
}

OAIStandardUnit OAIMetricStat::getUnit() const {
    return m_unit;
}
void OAIMetricStat::setUnit(const OAIStandardUnit &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIMetricStat::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIMetricStat::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAIMetricStat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metric.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricStat::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_metric_isValid && m_period_isValid && m_stat_isValid && true;
}

} // namespace OpenAPI
