/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMetricDataResult.h
 *
 * A &lt;code&gt;GetMetricData&lt;/code&gt; call returns an array of &lt;code&gt;MetricDataResult&lt;/code&gt; structures. Each of these structures includes the data points for that metric, along with the timestamps of those data points and other identifying information.
 */

#ifndef OAIMetricDataResult_H
#define OAIMetricDataResult_H

#include <QJsonObject>

#include "OAIStatusCode.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMetricDataResult : public OAIObject {
public:
    OAIMetricDataResult();
    OAIMetricDataResult(QString json);
    ~OAIMetricDataResult() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getLabel() const;
    void setLabel(const QString &label);
    bool is_label_Set() const;
    bool is_label_Valid() const;

    QList getTimestamps() const;
    void setTimestamps(const QList &timestamps);
    bool is_timestamps_Set() const;
    bool is_timestamps_Valid() const;

    QList getValues() const;
    void setValues(const QList &values);
    bool is_values_Set() const;
    bool is_values_Valid() const;

    OAIStatusCode getStatusCode() const;
    void setStatusCode(const OAIStatusCode &status_code);
    bool is_status_code_Set() const;
    bool is_status_code_Valid() const;

    QList getMessages() const;
    void setMessages(const QList &messages);
    bool is_messages_Set() const;
    bool is_messages_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_label;
    bool m_label_isSet;
    bool m_label_isValid;

    QList m_timestamps;
    bool m_timestamps_isSet;
    bool m_timestamps_isValid;

    QList m_values;
    bool m_values_isSet;
    bool m_values_isValid;

    OAIStatusCode m_status_code;
    bool m_status_code_isSet;
    bool m_status_code_isValid;

    QList m_messages;
    bool m_messages_isSet;
    bool m_messages_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMetricDataResult)

#endif // OAIMetricDataResult_H
