/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetInsightRuleReportInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetInsightRuleReportInput::OAIGetInsightRuleReportInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetInsightRuleReportInput::OAIGetInsightRuleReportInput() {
    this->initializeModel();
}

OAIGetInsightRuleReportInput::~OAIGetInsightRuleReportInput() {}

void OAIGetInsightRuleReportInput::initializeModel() {

    m_rule_name_isSet = false;
    m_rule_name_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_max_contributor_count_isSet = false;
    m_max_contributor_count_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_order_by_isSet = false;
    m_order_by_isValid = false;
}

void OAIGetInsightRuleReportInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetInsightRuleReportInput::fromJsonObject(QJsonObject json) {

    m_rule_name_isValid = ::OpenAPI::fromJsonValue(m_rule_name, json[QString("RuleName")]);
    m_rule_name_isSet = !json[QString("RuleName")].isNull() && m_rule_name_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("Period")]);
    m_period_isSet = !json[QString("Period")].isNull() && m_period_isValid;

    m_max_contributor_count_isValid = ::OpenAPI::fromJsonValue(m_max_contributor_count, json[QString("MaxContributorCount")]);
    m_max_contributor_count_isSet = !json[QString("MaxContributorCount")].isNull() && m_max_contributor_count_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("Metrics")]);
    m_metrics_isSet = !json[QString("Metrics")].isNull() && m_metrics_isValid;

    m_order_by_isValid = ::OpenAPI::fromJsonValue(m_order_by, json[QString("OrderBy")]);
    m_order_by_isSet = !json[QString("OrderBy")].isNull() && m_order_by_isValid;
}

QString OAIGetInsightRuleReportInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetInsightRuleReportInput::asJsonObject() const {
    QJsonObject obj;
    if (m_rule_name_isSet) {
        obj.insert(QString("RuleName"), ::OpenAPI::toJsonValue(m_rule_name));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_period_isSet) {
        obj.insert(QString("Period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_max_contributor_count_isSet) {
        obj.insert(QString("MaxContributorCount"), ::OpenAPI::toJsonValue(m_max_contributor_count));
    }
    if (m_metrics.isSet()) {
        obj.insert(QString("Metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_order_by_isSet) {
        obj.insert(QString("OrderBy"), ::OpenAPI::toJsonValue(m_order_by));
    }
    return obj;
}

QString OAIGetInsightRuleReportInput::getRuleName() const {
    return m_rule_name;
}
void OAIGetInsightRuleReportInput::setRuleName(const QString &rule_name) {
    m_rule_name = rule_name;
    m_rule_name_isSet = true;
}

bool OAIGetInsightRuleReportInput::is_rule_name_Set() const{
    return m_rule_name_isSet;
}

bool OAIGetInsightRuleReportInput::is_rule_name_Valid() const{
    return m_rule_name_isValid;
}

QDateTime OAIGetInsightRuleReportInput::getStartTime() const {
    return m_start_time;
}
void OAIGetInsightRuleReportInput::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGetInsightRuleReportInput::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGetInsightRuleReportInput::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIGetInsightRuleReportInput::getEndTime() const {
    return m_end_time;
}
void OAIGetInsightRuleReportInput::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIGetInsightRuleReportInput::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIGetInsightRuleReportInput::is_end_time_Valid() const{
    return m_end_time_isValid;
}

qint32 OAIGetInsightRuleReportInput::getPeriod() const {
    return m_period;
}
void OAIGetInsightRuleReportInput::setPeriod(const qint32 &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAIGetInsightRuleReportInput::is_period_Set() const{
    return m_period_isSet;
}

bool OAIGetInsightRuleReportInput::is_period_Valid() const{
    return m_period_isValid;
}

qint32 OAIGetInsightRuleReportInput::getMaxContributorCount() const {
    return m_max_contributor_count;
}
void OAIGetInsightRuleReportInput::setMaxContributorCount(const qint32 &max_contributor_count) {
    m_max_contributor_count = max_contributor_count;
    m_max_contributor_count_isSet = true;
}

bool OAIGetInsightRuleReportInput::is_max_contributor_count_Set() const{
    return m_max_contributor_count_isSet;
}

bool OAIGetInsightRuleReportInput::is_max_contributor_count_Valid() const{
    return m_max_contributor_count_isValid;
}

QList OAIGetInsightRuleReportInput::getMetrics() const {
    return m_metrics;
}
void OAIGetInsightRuleReportInput::setMetrics(const QList &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIGetInsightRuleReportInput::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIGetInsightRuleReportInput::is_metrics_Valid() const{
    return m_metrics_isValid;
}

QString OAIGetInsightRuleReportInput::getOrderBy() const {
    return m_order_by;
}
void OAIGetInsightRuleReportInput::setOrderBy(const QString &order_by) {
    m_order_by = order_by;
    m_order_by_isSet = true;
}

bool OAIGetInsightRuleReportInput::is_order_by_Set() const{
    return m_order_by_isSet;
}

bool OAIGetInsightRuleReportInput::is_order_by_Valid() const{
    return m_order_by_isValid;
}

bool OAIGetInsightRuleReportInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rule_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_contributor_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_by_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetInsightRuleReportInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rule_name_isValid && m_start_time_isValid && m_end_time_isValid && m_period_isValid && true;
}

} // namespace OpenAPI
