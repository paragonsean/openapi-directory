/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetMetricStatisticsInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetMetricStatisticsInput::OAIGetMetricStatisticsInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetMetricStatisticsInput::OAIGetMetricStatisticsInput() {
    this->initializeModel();
}

OAIGetMetricStatisticsInput::~OAIGetMetricStatisticsInput() {}

void OAIGetMetricStatisticsInput::initializeModel() {

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_metric_name_isSet = false;
    m_metric_name_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_statistics_isSet = false;
    m_statistics_isValid = false;

    m_extended_statistics_isSet = false;
    m_extended_statistics_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;
}

void OAIGetMetricStatisticsInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetMetricStatisticsInput::fromJsonObject(QJsonObject json) {

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("Namespace")]);
    m_r_namespace_isSet = !json[QString("Namespace")].isNull() && m_r_namespace_isValid;

    m_metric_name_isValid = ::OpenAPI::fromJsonValue(m_metric_name, json[QString("MetricName")]);
    m_metric_name_isSet = !json[QString("MetricName")].isNull() && m_metric_name_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("Dimensions")]);
    m_dimensions_isSet = !json[QString("Dimensions")].isNull() && m_dimensions_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("Period")]);
    m_period_isSet = !json[QString("Period")].isNull() && m_period_isValid;

    m_statistics_isValid = ::OpenAPI::fromJsonValue(m_statistics, json[QString("Statistics")]);
    m_statistics_isSet = !json[QString("Statistics")].isNull() && m_statistics_isValid;

    m_extended_statistics_isValid = ::OpenAPI::fromJsonValue(m_extended_statistics, json[QString("ExtendedStatistics")]);
    m_extended_statistics_isSet = !json[QString("ExtendedStatistics")].isNull() && m_extended_statistics_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("Unit")]);
    m_unit_isSet = !json[QString("Unit")].isNull() && m_unit_isValid;
}

QString OAIGetMetricStatisticsInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetMetricStatisticsInput::asJsonObject() const {
    QJsonObject obj;
    if (m_r_namespace_isSet) {
        obj.insert(QString("Namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_metric_name_isSet) {
        obj.insert(QString("MetricName"), ::OpenAPI::toJsonValue(m_metric_name));
    }
    if (m_dimensions.isSet()) {
        obj.insert(QString("Dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_period_isSet) {
        obj.insert(QString("Period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_statistics.isSet()) {
        obj.insert(QString("Statistics"), ::OpenAPI::toJsonValue(m_statistics));
    }
    if (m_extended_statistics.isSet()) {
        obj.insert(QString("ExtendedStatistics"), ::OpenAPI::toJsonValue(m_extended_statistics));
    }
    if (m_unit.isSet()) {
        obj.insert(QString("Unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    return obj;
}

QString OAIGetMetricStatisticsInput::getRNamespace() const {
    return m_r_namespace;
}
void OAIGetMetricStatisticsInput::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIGetMetricStatisticsInput::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIGetMetricStatisticsInput::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QString OAIGetMetricStatisticsInput::getMetricName() const {
    return m_metric_name;
}
void OAIGetMetricStatisticsInput::setMetricName(const QString &metric_name) {
    m_metric_name = metric_name;
    m_metric_name_isSet = true;
}

bool OAIGetMetricStatisticsInput::is_metric_name_Set() const{
    return m_metric_name_isSet;
}

bool OAIGetMetricStatisticsInput::is_metric_name_Valid() const{
    return m_metric_name_isValid;
}

QList OAIGetMetricStatisticsInput::getDimensions() const {
    return m_dimensions;
}
void OAIGetMetricStatisticsInput::setDimensions(const QList &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIGetMetricStatisticsInput::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIGetMetricStatisticsInput::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QDateTime OAIGetMetricStatisticsInput::getStartTime() const {
    return m_start_time;
}
void OAIGetMetricStatisticsInput::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGetMetricStatisticsInput::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGetMetricStatisticsInput::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIGetMetricStatisticsInput::getEndTime() const {
    return m_end_time;
}
void OAIGetMetricStatisticsInput::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIGetMetricStatisticsInput::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIGetMetricStatisticsInput::is_end_time_Valid() const{
    return m_end_time_isValid;
}

qint32 OAIGetMetricStatisticsInput::getPeriod() const {
    return m_period;
}
void OAIGetMetricStatisticsInput::setPeriod(const qint32 &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAIGetMetricStatisticsInput::is_period_Set() const{
    return m_period_isSet;
}

bool OAIGetMetricStatisticsInput::is_period_Valid() const{
    return m_period_isValid;
}

QList OAIGetMetricStatisticsInput::getStatistics() const {
    return m_statistics;
}
void OAIGetMetricStatisticsInput::setStatistics(const QList &statistics) {
    m_statistics = statistics;
    m_statistics_isSet = true;
}

bool OAIGetMetricStatisticsInput::is_statistics_Set() const{
    return m_statistics_isSet;
}

bool OAIGetMetricStatisticsInput::is_statistics_Valid() const{
    return m_statistics_isValid;
}

QList OAIGetMetricStatisticsInput::getExtendedStatistics() const {
    return m_extended_statistics;
}
void OAIGetMetricStatisticsInput::setExtendedStatistics(const QList &extended_statistics) {
    m_extended_statistics = extended_statistics;
    m_extended_statistics_isSet = true;
}

bool OAIGetMetricStatisticsInput::is_extended_statistics_Set() const{
    return m_extended_statistics_isSet;
}

bool OAIGetMetricStatisticsInput::is_extended_statistics_Valid() const{
    return m_extended_statistics_isValid;
}

OAIStandardUnit OAIGetMetricStatisticsInput::getUnit() const {
    return m_unit;
}
void OAIGetMetricStatisticsInput::setUnit(const OAIStandardUnit &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIGetMetricStatisticsInput::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIGetMetricStatisticsInput::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAIGetMetricStatisticsInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetMetricStatisticsInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_r_namespace_isValid && m_metric_name_isValid && m_start_time_isValid && m_end_time_isValid && m_period_isValid && true;
}

} // namespace OpenAPI
