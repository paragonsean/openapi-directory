/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricDataQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricDataQuery::OAIMetricDataQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricDataQuery::OAIMetricDataQuery() {
    this->initializeModel();
}

OAIMetricDataQuery::~OAIMetricDataQuery() {}

void OAIMetricDataQuery::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_metric_stat_isSet = false;
    m_metric_stat_isValid = false;

    m_expression_isSet = false;
    m_expression_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_return_data_isSet = false;
    m_return_data_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;
}

void OAIMetricDataQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricDataQuery::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_metric_stat_isValid = ::OpenAPI::fromJsonValue(m_metric_stat, json[QString("MetricStat")]);
    m_metric_stat_isSet = !json[QString("MetricStat")].isNull() && m_metric_stat_isValid;

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("Expression")]);
    m_expression_isSet = !json[QString("Expression")].isNull() && m_expression_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("Label")]);
    m_label_isSet = !json[QString("Label")].isNull() && m_label_isValid;

    m_return_data_isValid = ::OpenAPI::fromJsonValue(m_return_data, json[QString("ReturnData")]);
    m_return_data_isSet = !json[QString("ReturnData")].isNull() && m_return_data_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("Period")]);
    m_period_isSet = !json[QString("Period")].isNull() && m_period_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("AccountId")]);
    m_account_id_isSet = !json[QString("AccountId")].isNull() && m_account_id_isValid;
}

QString OAIMetricDataQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricDataQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_metric_stat.isSet()) {
        obj.insert(QString("MetricStat"), ::OpenAPI::toJsonValue(m_metric_stat));
    }
    if (m_expression_isSet) {
        obj.insert(QString("Expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    if (m_label_isSet) {
        obj.insert(QString("Label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_return_data_isSet) {
        obj.insert(QString("ReturnData"), ::OpenAPI::toJsonValue(m_return_data));
    }
    if (m_period_isSet) {
        obj.insert(QString("Period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("AccountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    return obj;
}

QString OAIMetricDataQuery::getId() const {
    return m_id;
}
void OAIMetricDataQuery::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMetricDataQuery::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMetricDataQuery::is_id_Valid() const{
    return m_id_isValid;
}

OAIMetricDataQuery_MetricStat OAIMetricDataQuery::getMetricStat() const {
    return m_metric_stat;
}
void OAIMetricDataQuery::setMetricStat(const OAIMetricDataQuery_MetricStat &metric_stat) {
    m_metric_stat = metric_stat;
    m_metric_stat_isSet = true;
}

bool OAIMetricDataQuery::is_metric_stat_Set() const{
    return m_metric_stat_isSet;
}

bool OAIMetricDataQuery::is_metric_stat_Valid() const{
    return m_metric_stat_isValid;
}

QString OAIMetricDataQuery::getExpression() const {
    return m_expression;
}
void OAIMetricDataQuery::setExpression(const QString &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAIMetricDataQuery::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAIMetricDataQuery::is_expression_Valid() const{
    return m_expression_isValid;
}

QString OAIMetricDataQuery::getLabel() const {
    return m_label;
}
void OAIMetricDataQuery::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIMetricDataQuery::is_label_Set() const{
    return m_label_isSet;
}

bool OAIMetricDataQuery::is_label_Valid() const{
    return m_label_isValid;
}

bool OAIMetricDataQuery::getReturnData() const {
    return m_return_data;
}
void OAIMetricDataQuery::setReturnData(const bool &return_data) {
    m_return_data = return_data;
    m_return_data_isSet = true;
}

bool OAIMetricDataQuery::is_return_data_Set() const{
    return m_return_data_isSet;
}

bool OAIMetricDataQuery::is_return_data_Valid() const{
    return m_return_data_isValid;
}

qint32 OAIMetricDataQuery::getPeriod() const {
    return m_period;
}
void OAIMetricDataQuery::setPeriod(const qint32 &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAIMetricDataQuery::is_period_Set() const{
    return m_period_isSet;
}

bool OAIMetricDataQuery::is_period_Valid() const{
    return m_period_isValid;
}

QString OAIMetricDataQuery::getAccountId() const {
    return m_account_id;
}
void OAIMetricDataQuery::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIMetricDataQuery::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIMetricDataQuery::is_account_id_Valid() const{
    return m_account_id_isValid;
}

bool OAIMetricDataQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_stat.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricDataQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
