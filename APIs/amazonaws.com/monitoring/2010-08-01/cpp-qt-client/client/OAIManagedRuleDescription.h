/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIManagedRuleDescription.h
 *
 *  Contains information about managed Contributor Insights rules, as returned by &lt;code&gt;ListManagedInsightRules&lt;/code&gt;. 
 */

#ifndef OAIManagedRuleDescription_H
#define OAIManagedRuleDescription_H

#include <QJsonObject>

#include "OAIManagedRuleDescription_RuleState.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIManagedRuleDescription_RuleState;

class OAIManagedRuleDescription : public OAIObject {
public:
    OAIManagedRuleDescription();
    OAIManagedRuleDescription(QString json);
    ~OAIManagedRuleDescription() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getTemplateName() const;
    void setTemplateName(const QString &template_name);
    bool is_template_name_Set() const;
    bool is_template_name_Valid() const;

    QString getResourceArn() const;
    void setResourceArn(const QString &resource_arn);
    bool is_resource_arn_Set() const;
    bool is_resource_arn_Valid() const;

    OAIManagedRuleDescription_RuleState getRuleState() const;
    void setRuleState(const OAIManagedRuleDescription_RuleState &rule_state);
    bool is_rule_state_Set() const;
    bool is_rule_state_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_template_name;
    bool m_template_name_isSet;
    bool m_template_name_isValid;

    QString m_resource_arn;
    bool m_resource_arn_isSet;
    bool m_resource_arn_isValid;

    OAIManagedRuleDescription_RuleState m_rule_state;
    bool m_rule_state_isSet;
    bool m_rule_state_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIManagedRuleDescription)

#endif // OAIManagedRuleDescription_H
