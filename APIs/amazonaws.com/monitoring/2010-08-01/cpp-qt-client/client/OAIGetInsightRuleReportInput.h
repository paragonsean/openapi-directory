/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetInsightRuleReportInput.h
 *
 * 
 */

#ifndef OAIGetInsightRuleReportInput_H
#define OAIGetInsightRuleReportInput_H

#include <QJsonObject>

#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetInsightRuleReportInput : public OAIObject {
public:
    OAIGetInsightRuleReportInput();
    OAIGetInsightRuleReportInput(QString json);
    ~OAIGetInsightRuleReportInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getRuleName() const;
    void setRuleName(const QString &rule_name);
    bool is_rule_name_Set() const;
    bool is_rule_name_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    qint32 getPeriod() const;
    void setPeriod(const qint32 &period);
    bool is_period_Set() const;
    bool is_period_Valid() const;

    qint32 getMaxContributorCount() const;
    void setMaxContributorCount(const qint32 &max_contributor_count);
    bool is_max_contributor_count_Set() const;
    bool is_max_contributor_count_Valid() const;

    QList getMetrics() const;
    void setMetrics(const QList &metrics);
    bool is_metrics_Set() const;
    bool is_metrics_Valid() const;

    QString getOrderBy() const;
    void setOrderBy(const QString &order_by);
    bool is_order_by_Set() const;
    bool is_order_by_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_rule_name;
    bool m_rule_name_isSet;
    bool m_rule_name_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    qint32 m_period;
    bool m_period_isSet;
    bool m_period_isValid;

    qint32 m_max_contributor_count;
    bool m_max_contributor_count_isSet;
    bool m_max_contributor_count_isValid;

    QList m_metrics;
    bool m_metrics_isSet;
    bool m_metrics_isValid;

    QString m_order_by;
    bool m_order_by_isSet;
    bool m_order_by_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetInsightRuleReportInput)

#endif // OAIGetInsightRuleReportInput_H
