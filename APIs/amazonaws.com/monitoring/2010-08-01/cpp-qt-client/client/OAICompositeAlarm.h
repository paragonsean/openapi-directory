/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICompositeAlarm.h
 *
 * The details about a composite alarm.
 */

#ifndef OAICompositeAlarm_H
#define OAICompositeAlarm_H

#include <QJsonObject>

#include "OAIActionsSuppressedBy.h"
#include "OAIStateValue.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICompositeAlarm : public OAIObject {
public:
    OAICompositeAlarm();
    OAICompositeAlarm(QString json);
    ~OAICompositeAlarm() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool getActionsEnabled() const;
    void setActionsEnabled(const bool &actions_enabled);
    bool is_actions_enabled_Set() const;
    bool is_actions_enabled_Valid() const;

    QList getAlarmActions() const;
    void setAlarmActions(const QList &alarm_actions);
    bool is_alarm_actions_Set() const;
    bool is_alarm_actions_Valid() const;

    QString getAlarmArn() const;
    void setAlarmArn(const QString &alarm_arn);
    bool is_alarm_arn_Set() const;
    bool is_alarm_arn_Valid() const;

    QDateTime getAlarmConfigurationUpdatedTimestamp() const;
    void setAlarmConfigurationUpdatedTimestamp(const QDateTime &alarm_configuration_updated_timestamp);
    bool is_alarm_configuration_updated_timestamp_Set() const;
    bool is_alarm_configuration_updated_timestamp_Valid() const;

    QString getAlarmDescription() const;
    void setAlarmDescription(const QString &alarm_description);
    bool is_alarm_description_Set() const;
    bool is_alarm_description_Valid() const;

    QString getAlarmName() const;
    void setAlarmName(const QString &alarm_name);
    bool is_alarm_name_Set() const;
    bool is_alarm_name_Valid() const;

    QString getAlarmRule() const;
    void setAlarmRule(const QString &alarm_rule);
    bool is_alarm_rule_Set() const;
    bool is_alarm_rule_Valid() const;

    QList getInsufficientDataActions() const;
    void setInsufficientDataActions(const QList &insufficient_data_actions);
    bool is_insufficient_data_actions_Set() const;
    bool is_insufficient_data_actions_Valid() const;

    QList getOkActions() const;
    void setOkActions(const QList &ok_actions);
    bool is_ok_actions_Set() const;
    bool is_ok_actions_Valid() const;

    QString getStateReason() const;
    void setStateReason(const QString &state_reason);
    bool is_state_reason_Set() const;
    bool is_state_reason_Valid() const;

    QString getStateReasonData() const;
    void setStateReasonData(const QString &state_reason_data);
    bool is_state_reason_data_Set() const;
    bool is_state_reason_data_Valid() const;

    QDateTime getStateUpdatedTimestamp() const;
    void setStateUpdatedTimestamp(const QDateTime &state_updated_timestamp);
    bool is_state_updated_timestamp_Set() const;
    bool is_state_updated_timestamp_Valid() const;

    OAIStateValue getStateValue() const;
    void setStateValue(const OAIStateValue &state_value);
    bool is_state_value_Set() const;
    bool is_state_value_Valid() const;

    QDateTime getStateTransitionedTimestamp() const;
    void setStateTransitionedTimestamp(const QDateTime &state_transitioned_timestamp);
    bool is_state_transitioned_timestamp_Set() const;
    bool is_state_transitioned_timestamp_Valid() const;

    OAIActionsSuppressedBy getActionsSuppressedBy() const;
    void setActionsSuppressedBy(const OAIActionsSuppressedBy &actions_suppressed_by);
    bool is_actions_suppressed_by_Set() const;
    bool is_actions_suppressed_by_Valid() const;

    QString getActionsSuppressedReason() const;
    void setActionsSuppressedReason(const QString &actions_suppressed_reason);
    bool is_actions_suppressed_reason_Set() const;
    bool is_actions_suppressed_reason_Valid() const;

    QString getActionsSuppressor() const;
    void setActionsSuppressor(const QString &actions_suppressor);
    bool is_actions_suppressor_Set() const;
    bool is_actions_suppressor_Valid() const;

    qint32 getActionsSuppressorWaitPeriod() const;
    void setActionsSuppressorWaitPeriod(const qint32 &actions_suppressor_wait_period);
    bool is_actions_suppressor_wait_period_Set() const;
    bool is_actions_suppressor_wait_period_Valid() const;

    qint32 getActionsSuppressorExtensionPeriod() const;
    void setActionsSuppressorExtensionPeriod(const qint32 &actions_suppressor_extension_period);
    bool is_actions_suppressor_extension_period_Set() const;
    bool is_actions_suppressor_extension_period_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_actions_enabled;
    bool m_actions_enabled_isSet;
    bool m_actions_enabled_isValid;

    QList m_alarm_actions;
    bool m_alarm_actions_isSet;
    bool m_alarm_actions_isValid;

    QString m_alarm_arn;
    bool m_alarm_arn_isSet;
    bool m_alarm_arn_isValid;

    QDateTime m_alarm_configuration_updated_timestamp;
    bool m_alarm_configuration_updated_timestamp_isSet;
    bool m_alarm_configuration_updated_timestamp_isValid;

    QString m_alarm_description;
    bool m_alarm_description_isSet;
    bool m_alarm_description_isValid;

    QString m_alarm_name;
    bool m_alarm_name_isSet;
    bool m_alarm_name_isValid;

    QString m_alarm_rule;
    bool m_alarm_rule_isSet;
    bool m_alarm_rule_isValid;

    QList m_insufficient_data_actions;
    bool m_insufficient_data_actions_isSet;
    bool m_insufficient_data_actions_isValid;

    QList m_ok_actions;
    bool m_ok_actions_isSet;
    bool m_ok_actions_isValid;

    QString m_state_reason;
    bool m_state_reason_isSet;
    bool m_state_reason_isValid;

    QString m_state_reason_data;
    bool m_state_reason_data_isSet;
    bool m_state_reason_data_isValid;

    QDateTime m_state_updated_timestamp;
    bool m_state_updated_timestamp_isSet;
    bool m_state_updated_timestamp_isValid;

    OAIStateValue m_state_value;
    bool m_state_value_isSet;
    bool m_state_value_isValid;

    QDateTime m_state_transitioned_timestamp;
    bool m_state_transitioned_timestamp_isSet;
    bool m_state_transitioned_timestamp_isValid;

    OAIActionsSuppressedBy m_actions_suppressed_by;
    bool m_actions_suppressed_by_isSet;
    bool m_actions_suppressed_by_isValid;

    QString m_actions_suppressed_reason;
    bool m_actions_suppressed_reason_isSet;
    bool m_actions_suppressed_reason_isValid;

    QString m_actions_suppressor;
    bool m_actions_suppressor_isSet;
    bool m_actions_suppressor_isValid;

    qint32 m_actions_suppressor_wait_period;
    bool m_actions_suppressor_wait_period_isSet;
    bool m_actions_suppressor_wait_period_isValid;

    qint32 m_actions_suppressor_extension_period;
    bool m_actions_suppressor_extension_period_isSet;
    bool m_actions_suppressor_extension_period_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICompositeAlarm)

#endif // OAICompositeAlarm_H
