/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricStreamEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricStreamEntry::OAIMetricStreamEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricStreamEntry::OAIMetricStreamEntry() {
    this->initializeModel();
}

OAIMetricStreamEntry::~OAIMetricStreamEntry() {}

void OAIMetricStreamEntry::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_last_update_date_isSet = false;
    m_last_update_date_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_firehose_arn_isSet = false;
    m_firehose_arn_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_output_format_isSet = false;
    m_output_format_isValid = false;
}

void OAIMetricStreamEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricStreamEntry::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_last_update_date_isValid = ::OpenAPI::fromJsonValue(m_last_update_date, json[QString("LastUpdateDate")]);
    m_last_update_date_isSet = !json[QString("LastUpdateDate")].isNull() && m_last_update_date_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_firehose_arn_isValid = ::OpenAPI::fromJsonValue(m_firehose_arn, json[QString("FirehoseArn")]);
    m_firehose_arn_isSet = !json[QString("FirehoseArn")].isNull() && m_firehose_arn_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_output_format_isValid = ::OpenAPI::fromJsonValue(m_output_format, json[QString("OutputFormat")]);
    m_output_format_isSet = !json[QString("OutputFormat")].isNull() && m_output_format_isValid;
}

QString OAIMetricStreamEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricStreamEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_last_update_date_isSet) {
        obj.insert(QString("LastUpdateDate"), ::OpenAPI::toJsonValue(m_last_update_date));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_firehose_arn_isSet) {
        obj.insert(QString("FirehoseArn"), ::OpenAPI::toJsonValue(m_firehose_arn));
    }
    if (m_state_isSet) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_output_format.isSet()) {
        obj.insert(QString("OutputFormat"), ::OpenAPI::toJsonValue(m_output_format));
    }
    return obj;
}

QString OAIMetricStreamEntry::getArn() const {
    return m_arn;
}
void OAIMetricStreamEntry::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIMetricStreamEntry::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIMetricStreamEntry::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIMetricStreamEntry::getCreationDate() const {
    return m_creation_date;
}
void OAIMetricStreamEntry::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIMetricStreamEntry::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIMetricStreamEntry::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QDateTime OAIMetricStreamEntry::getLastUpdateDate() const {
    return m_last_update_date;
}
void OAIMetricStreamEntry::setLastUpdateDate(const QDateTime &last_update_date) {
    m_last_update_date = last_update_date;
    m_last_update_date_isSet = true;
}

bool OAIMetricStreamEntry::is_last_update_date_Set() const{
    return m_last_update_date_isSet;
}

bool OAIMetricStreamEntry::is_last_update_date_Valid() const{
    return m_last_update_date_isValid;
}

QString OAIMetricStreamEntry::getName() const {
    return m_name;
}
void OAIMetricStreamEntry::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMetricStreamEntry::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMetricStreamEntry::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMetricStreamEntry::getFirehoseArn() const {
    return m_firehose_arn;
}
void OAIMetricStreamEntry::setFirehoseArn(const QString &firehose_arn) {
    m_firehose_arn = firehose_arn;
    m_firehose_arn_isSet = true;
}

bool OAIMetricStreamEntry::is_firehose_arn_Set() const{
    return m_firehose_arn_isSet;
}

bool OAIMetricStreamEntry::is_firehose_arn_Valid() const{
    return m_firehose_arn_isValid;
}

QString OAIMetricStreamEntry::getState() const {
    return m_state;
}
void OAIMetricStreamEntry::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIMetricStreamEntry::is_state_Set() const{
    return m_state_isSet;
}

bool OAIMetricStreamEntry::is_state_Valid() const{
    return m_state_isValid;
}

OAIMetricStreamOutputFormat OAIMetricStreamEntry::getOutputFormat() const {
    return m_output_format;
}
void OAIMetricStreamEntry::setOutputFormat(const OAIMetricStreamOutputFormat &output_format) {
    m_output_format = output_format;
    m_output_format_isSet = true;
}

bool OAIMetricStreamEntry::is_output_format_Set() const{
    return m_output_format_isSet;
}

bool OAIMetricStreamEntry::is_output_format_Valid() const{
    return m_output_format_isValid;
}

bool OAIMetricStreamEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firehose_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_format.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricStreamEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
