/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPutInsightRuleInput.h
 *
 * 
 */

#ifndef OAIPutInsightRuleInput_H
#define OAIPutInsightRuleInput_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPutInsightRuleInput : public OAIObject {
public:
    OAIPutInsightRuleInput();
    OAIPutInsightRuleInput(QString json);
    ~OAIPutInsightRuleInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getRuleName() const;
    void setRuleName(const QString &rule_name);
    bool is_rule_name_Set() const;
    bool is_rule_name_Valid() const;

    QString getRuleState() const;
    void setRuleState(const QString &rule_state);
    bool is_rule_state_Set() const;
    bool is_rule_state_Valid() const;

    QString getRuleDefinition() const;
    void setRuleDefinition(const QString &rule_definition);
    bool is_rule_definition_Set() const;
    bool is_rule_definition_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_rule_name;
    bool m_rule_name_isSet;
    bool m_rule_name_isValid;

    QString m_rule_state;
    bool m_rule_state_isSet;
    bool m_rule_state_isValid;

    QString m_rule_definition;
    bool m_rule_definition_isSet;
    bool m_rule_definition_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPutInsightRuleInput)

#endif // OAIPutInsightRuleInput_H
