/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListMetricsInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListMetricsInput::OAIListMetricsInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListMetricsInput::OAIListMetricsInput() {
    this->initializeModel();
}

OAIListMetricsInput::~OAIListMetricsInput() {}

void OAIListMetricsInput::initializeModel() {

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_metric_name_isSet = false;
    m_metric_name_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_recently_active_isSet = false;
    m_recently_active_isValid = false;

    m_include_linked_accounts_isSet = false;
    m_include_linked_accounts_isValid = false;

    m_owning_account_isSet = false;
    m_owning_account_isValid = false;
}

void OAIListMetricsInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListMetricsInput::fromJsonObject(QJsonObject json) {

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("Namespace")]);
    m_r_namespace_isSet = !json[QString("Namespace")].isNull() && m_r_namespace_isValid;

    m_metric_name_isValid = ::OpenAPI::fromJsonValue(m_metric_name, json[QString("MetricName")]);
    m_metric_name_isSet = !json[QString("MetricName")].isNull() && m_metric_name_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("Dimensions")]);
    m_dimensions_isSet = !json[QString("Dimensions")].isNull() && m_dimensions_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_recently_active_isValid = ::OpenAPI::fromJsonValue(m_recently_active, json[QString("RecentlyActive")]);
    m_recently_active_isSet = !json[QString("RecentlyActive")].isNull() && m_recently_active_isValid;

    m_include_linked_accounts_isValid = ::OpenAPI::fromJsonValue(m_include_linked_accounts, json[QString("IncludeLinkedAccounts")]);
    m_include_linked_accounts_isSet = !json[QString("IncludeLinkedAccounts")].isNull() && m_include_linked_accounts_isValid;

    m_owning_account_isValid = ::OpenAPI::fromJsonValue(m_owning_account, json[QString("OwningAccount")]);
    m_owning_account_isSet = !json[QString("OwningAccount")].isNull() && m_owning_account_isValid;
}

QString OAIListMetricsInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListMetricsInput::asJsonObject() const {
    QJsonObject obj;
    if (m_r_namespace_isSet) {
        obj.insert(QString("Namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_metric_name_isSet) {
        obj.insert(QString("MetricName"), ::OpenAPI::toJsonValue(m_metric_name));
    }
    if (m_dimensions.isSet()) {
        obj.insert(QString("Dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_recently_active.isSet()) {
        obj.insert(QString("RecentlyActive"), ::OpenAPI::toJsonValue(m_recently_active));
    }
    if (m_include_linked_accounts_isSet) {
        obj.insert(QString("IncludeLinkedAccounts"), ::OpenAPI::toJsonValue(m_include_linked_accounts));
    }
    if (m_owning_account_isSet) {
        obj.insert(QString("OwningAccount"), ::OpenAPI::toJsonValue(m_owning_account));
    }
    return obj;
}

QString OAIListMetricsInput::getRNamespace() const {
    return m_r_namespace;
}
void OAIListMetricsInput::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIListMetricsInput::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIListMetricsInput::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QString OAIListMetricsInput::getMetricName() const {
    return m_metric_name;
}
void OAIListMetricsInput::setMetricName(const QString &metric_name) {
    m_metric_name = metric_name;
    m_metric_name_isSet = true;
}

bool OAIListMetricsInput::is_metric_name_Set() const{
    return m_metric_name_isSet;
}

bool OAIListMetricsInput::is_metric_name_Valid() const{
    return m_metric_name_isValid;
}

QList OAIListMetricsInput::getDimensions() const {
    return m_dimensions;
}
void OAIListMetricsInput::setDimensions(const QList &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIListMetricsInput::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIListMetricsInput::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QString OAIListMetricsInput::getNextToken() const {
    return m_next_token;
}
void OAIListMetricsInput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListMetricsInput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListMetricsInput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

OAIRecentlyActive OAIListMetricsInput::getRecentlyActive() const {
    return m_recently_active;
}
void OAIListMetricsInput::setRecentlyActive(const OAIRecentlyActive &recently_active) {
    m_recently_active = recently_active;
    m_recently_active_isSet = true;
}

bool OAIListMetricsInput::is_recently_active_Set() const{
    return m_recently_active_isSet;
}

bool OAIListMetricsInput::is_recently_active_Valid() const{
    return m_recently_active_isValid;
}

bool OAIListMetricsInput::getIncludeLinkedAccounts() const {
    return m_include_linked_accounts;
}
void OAIListMetricsInput::setIncludeLinkedAccounts(const bool &include_linked_accounts) {
    m_include_linked_accounts = include_linked_accounts;
    m_include_linked_accounts_isSet = true;
}

bool OAIListMetricsInput::is_include_linked_accounts_Set() const{
    return m_include_linked_accounts_isSet;
}

bool OAIListMetricsInput::is_include_linked_accounts_Valid() const{
    return m_include_linked_accounts_isValid;
}

QString OAIListMetricsInput::getOwningAccount() const {
    return m_owning_account;
}
void OAIListMetricsInput::setOwningAccount(const QString &owning_account) {
    m_owning_account = owning_account;
    m_owning_account_isSet = true;
}

bool OAIListMetricsInput::is_owning_account_Set() const{
    return m_owning_account_isSet;
}

bool OAIListMetricsInput::is_owning_account_Valid() const{
    return m_owning_account_isValid;
}

bool OAIListMetricsInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recently_active.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_linked_accounts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owning_account_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListMetricsInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
