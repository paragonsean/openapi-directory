/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeAlarmsForMetricInput.h
 *
 * 
 */

#ifndef OAIDescribeAlarmsForMetricInput_H
#define OAIDescribeAlarmsForMetricInput_H

#include <QJsonObject>

#include "OAIStandardUnit.h"
#include "OAIStatistic.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDescribeAlarmsForMetricInput : public OAIObject {
public:
    OAIDescribeAlarmsForMetricInput();
    OAIDescribeAlarmsForMetricInput(QString json);
    ~OAIDescribeAlarmsForMetricInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getMetricName() const;
    void setMetricName(const QString &metric_name);
    bool is_metric_name_Set() const;
    bool is_metric_name_Valid() const;

    QString getRNamespace() const;
    void setRNamespace(const QString &r_namespace);
    bool is_r_namespace_Set() const;
    bool is_r_namespace_Valid() const;

    OAIStatistic getStatistic() const;
    void setStatistic(const OAIStatistic &statistic);
    bool is_statistic_Set() const;
    bool is_statistic_Valid() const;

    QString getExtendedStatistic() const;
    void setExtendedStatistic(const QString &extended_statistic);
    bool is_extended_statistic_Set() const;
    bool is_extended_statistic_Valid() const;

    QList getDimensions() const;
    void setDimensions(const QList &dimensions);
    bool is_dimensions_Set() const;
    bool is_dimensions_Valid() const;

    qint32 getPeriod() const;
    void setPeriod(const qint32 &period);
    bool is_period_Set() const;
    bool is_period_Valid() const;

    OAIStandardUnit getUnit() const;
    void setUnit(const OAIStandardUnit &unit);
    bool is_unit_Set() const;
    bool is_unit_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_metric_name;
    bool m_metric_name_isSet;
    bool m_metric_name_isValid;

    QString m_r_namespace;
    bool m_r_namespace_isSet;
    bool m_r_namespace_isValid;

    OAIStatistic m_statistic;
    bool m_statistic_isSet;
    bool m_statistic_isValid;

    QString m_extended_statistic;
    bool m_extended_statistic_isSet;
    bool m_extended_statistic_isValid;

    QList m_dimensions;
    bool m_dimensions_isSet;
    bool m_dimensions_isValid;

    qint32 m_period;
    bool m_period_isSet;
    bool m_period_isValid;

    OAIStandardUnit m_unit;
    bool m_unit_isSet;
    bool m_unit_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeAlarmsForMetricInput)

#endif // OAIDescribeAlarmsForMetricInput_H
