/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetInsightRuleReportOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetInsightRuleReportOutput::OAIGetInsightRuleReportOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetInsightRuleReportOutput::OAIGetInsightRuleReportOutput() {
    this->initializeModel();
}

OAIGetInsightRuleReportOutput::~OAIGetInsightRuleReportOutput() {}

void OAIGetInsightRuleReportOutput::initializeModel() {

    m_key_labels_isSet = false;
    m_key_labels_isValid = false;

    m_aggregation_statistic_isSet = false;
    m_aggregation_statistic_isValid = false;

    m_aggregate_value_isSet = false;
    m_aggregate_value_isValid = false;

    m_approximate_unique_count_isSet = false;
    m_approximate_unique_count_isValid = false;

    m_contributors_isSet = false;
    m_contributors_isValid = false;

    m_metric_datapoints_isSet = false;
    m_metric_datapoints_isValid = false;
}

void OAIGetInsightRuleReportOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetInsightRuleReportOutput::fromJsonObject(QJsonObject json) {

    m_key_labels_isValid = ::OpenAPI::fromJsonValue(m_key_labels, json[QString("KeyLabels")]);
    m_key_labels_isSet = !json[QString("KeyLabels")].isNull() && m_key_labels_isValid;

    m_aggregation_statistic_isValid = ::OpenAPI::fromJsonValue(m_aggregation_statistic, json[QString("AggregationStatistic")]);
    m_aggregation_statistic_isSet = !json[QString("AggregationStatistic")].isNull() && m_aggregation_statistic_isValid;

    m_aggregate_value_isValid = ::OpenAPI::fromJsonValue(m_aggregate_value, json[QString("AggregateValue")]);
    m_aggregate_value_isSet = !json[QString("AggregateValue")].isNull() && m_aggregate_value_isValid;

    m_approximate_unique_count_isValid = ::OpenAPI::fromJsonValue(m_approximate_unique_count, json[QString("ApproximateUniqueCount")]);
    m_approximate_unique_count_isSet = !json[QString("ApproximateUniqueCount")].isNull() && m_approximate_unique_count_isValid;

    m_contributors_isValid = ::OpenAPI::fromJsonValue(m_contributors, json[QString("Contributors")]);
    m_contributors_isSet = !json[QString("Contributors")].isNull() && m_contributors_isValid;

    m_metric_datapoints_isValid = ::OpenAPI::fromJsonValue(m_metric_datapoints, json[QString("MetricDatapoints")]);
    m_metric_datapoints_isSet = !json[QString("MetricDatapoints")].isNull() && m_metric_datapoints_isValid;
}

QString OAIGetInsightRuleReportOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetInsightRuleReportOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_key_labels.isSet()) {
        obj.insert(QString("KeyLabels"), ::OpenAPI::toJsonValue(m_key_labels));
    }
    if (m_aggregation_statistic_isSet) {
        obj.insert(QString("AggregationStatistic"), ::OpenAPI::toJsonValue(m_aggregation_statistic));
    }
    if (m_aggregate_value_isSet) {
        obj.insert(QString("AggregateValue"), ::OpenAPI::toJsonValue(m_aggregate_value));
    }
    if (m_approximate_unique_count_isSet) {
        obj.insert(QString("ApproximateUniqueCount"), ::OpenAPI::toJsonValue(m_approximate_unique_count));
    }
    if (m_contributors.isSet()) {
        obj.insert(QString("Contributors"), ::OpenAPI::toJsonValue(m_contributors));
    }
    if (m_metric_datapoints.isSet()) {
        obj.insert(QString("MetricDatapoints"), ::OpenAPI::toJsonValue(m_metric_datapoints));
    }
    return obj;
}

QList OAIGetInsightRuleReportOutput::getKeyLabels() const {
    return m_key_labels;
}
void OAIGetInsightRuleReportOutput::setKeyLabels(const QList &key_labels) {
    m_key_labels = key_labels;
    m_key_labels_isSet = true;
}

bool OAIGetInsightRuleReportOutput::is_key_labels_Set() const{
    return m_key_labels_isSet;
}

bool OAIGetInsightRuleReportOutput::is_key_labels_Valid() const{
    return m_key_labels_isValid;
}

QString OAIGetInsightRuleReportOutput::getAggregationStatistic() const {
    return m_aggregation_statistic;
}
void OAIGetInsightRuleReportOutput::setAggregationStatistic(const QString &aggregation_statistic) {
    m_aggregation_statistic = aggregation_statistic;
    m_aggregation_statistic_isSet = true;
}

bool OAIGetInsightRuleReportOutput::is_aggregation_statistic_Set() const{
    return m_aggregation_statistic_isSet;
}

bool OAIGetInsightRuleReportOutput::is_aggregation_statistic_Valid() const{
    return m_aggregation_statistic_isValid;
}

double OAIGetInsightRuleReportOutput::getAggregateValue() const {
    return m_aggregate_value;
}
void OAIGetInsightRuleReportOutput::setAggregateValue(const double &aggregate_value) {
    m_aggregate_value = aggregate_value;
    m_aggregate_value_isSet = true;
}

bool OAIGetInsightRuleReportOutput::is_aggregate_value_Set() const{
    return m_aggregate_value_isSet;
}

bool OAIGetInsightRuleReportOutput::is_aggregate_value_Valid() const{
    return m_aggregate_value_isValid;
}

qint32 OAIGetInsightRuleReportOutput::getApproximateUniqueCount() const {
    return m_approximate_unique_count;
}
void OAIGetInsightRuleReportOutput::setApproximateUniqueCount(const qint32 &approximate_unique_count) {
    m_approximate_unique_count = approximate_unique_count;
    m_approximate_unique_count_isSet = true;
}

bool OAIGetInsightRuleReportOutput::is_approximate_unique_count_Set() const{
    return m_approximate_unique_count_isSet;
}

bool OAIGetInsightRuleReportOutput::is_approximate_unique_count_Valid() const{
    return m_approximate_unique_count_isValid;
}

QList OAIGetInsightRuleReportOutput::getContributors() const {
    return m_contributors;
}
void OAIGetInsightRuleReportOutput::setContributors(const QList &contributors) {
    m_contributors = contributors;
    m_contributors_isSet = true;
}

bool OAIGetInsightRuleReportOutput::is_contributors_Set() const{
    return m_contributors_isSet;
}

bool OAIGetInsightRuleReportOutput::is_contributors_Valid() const{
    return m_contributors_isValid;
}

QList OAIGetInsightRuleReportOutput::getMetricDatapoints() const {
    return m_metric_datapoints;
}
void OAIGetInsightRuleReportOutput::setMetricDatapoints(const QList &metric_datapoints) {
    m_metric_datapoints = metric_datapoints;
    m_metric_datapoints_isSet = true;
}

bool OAIGetInsightRuleReportOutput::is_metric_datapoints_Set() const{
    return m_metric_datapoints_isSet;
}

bool OAIGetInsightRuleReportOutput::is_metric_datapoints_Valid() const{
    return m_metric_datapoints_isValid;
}

bool OAIGetInsightRuleReportOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_aggregation_statistic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aggregate_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approximate_unique_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_datapoints.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetInsightRuleReportOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
