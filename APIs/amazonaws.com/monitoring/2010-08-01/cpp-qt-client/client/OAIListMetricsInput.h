/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIListMetricsInput.h
 *
 * 
 */

#ifndef OAIListMetricsInput_H
#define OAIListMetricsInput_H

#include <QJsonObject>

#include "OAIRecentlyActive.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIListMetricsInput : public OAIObject {
public:
    OAIListMetricsInput();
    OAIListMetricsInput(QString json);
    ~OAIListMetricsInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getRNamespace() const;
    void setRNamespace(const QString &r_namespace);
    bool is_r_namespace_Set() const;
    bool is_r_namespace_Valid() const;

    QString getMetricName() const;
    void setMetricName(const QString &metric_name);
    bool is_metric_name_Set() const;
    bool is_metric_name_Valid() const;

    QList getDimensions() const;
    void setDimensions(const QList &dimensions);
    bool is_dimensions_Set() const;
    bool is_dimensions_Valid() const;

    QString getNextToken() const;
    void setNextToken(const QString &next_token);
    bool is_next_token_Set() const;
    bool is_next_token_Valid() const;

    OAIRecentlyActive getRecentlyActive() const;
    void setRecentlyActive(const OAIRecentlyActive &recently_active);
    bool is_recently_active_Set() const;
    bool is_recently_active_Valid() const;

    bool getIncludeLinkedAccounts() const;
    void setIncludeLinkedAccounts(const bool &include_linked_accounts);
    bool is_include_linked_accounts_Set() const;
    bool is_include_linked_accounts_Valid() const;

    QString getOwningAccount() const;
    void setOwningAccount(const QString &owning_account);
    bool is_owning_account_Set() const;
    bool is_owning_account_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_r_namespace;
    bool m_r_namespace_isSet;
    bool m_r_namespace_isValid;

    QString m_metric_name;
    bool m_metric_name_isSet;
    bool m_metric_name_isValid;

    QList m_dimensions;
    bool m_dimensions_isSet;
    bool m_dimensions_isValid;

    QString m_next_token;
    bool m_next_token_isSet;
    bool m_next_token_isValid;

    OAIRecentlyActive m_recently_active;
    bool m_recently_active_isSet;
    bool m_recently_active_isValid;

    bool m_include_linked_accounts;
    bool m_include_linked_accounts_isSet;
    bool m_include_linked_accounts_isValid;

    QString m_owning_account;
    bool m_owning_account_isSet;
    bool m_owning_account_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIListMetricsInput)

#endif // OAIListMetricsInput_H
