/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInsightRuleMetricDatapoint.h
 *
 * &lt;p&gt;One data point from the metric time series returned in a Contributor Insights rule report.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetInsightRuleReport.html\&quot;&gt;GetInsightRuleReport&lt;/a&gt;.&lt;/p&gt;
 */

#ifndef OAIInsightRuleMetricDatapoint_H
#define OAIInsightRuleMetricDatapoint_H

#include <QJsonObject>

#include <QDateTime>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIInsightRuleMetricDatapoint : public OAIObject {
public:
    OAIInsightRuleMetricDatapoint();
    OAIInsightRuleMetricDatapoint(QString json);
    ~OAIInsightRuleMetricDatapoint() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getTimestamp() const;
    void setTimestamp(const QDateTime &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    double getUniqueContributors() const;
    void setUniqueContributors(const double &unique_contributors);
    bool is_unique_contributors_Set() const;
    bool is_unique_contributors_Valid() const;

    double getMaxContributorValue() const;
    void setMaxContributorValue(const double &max_contributor_value);
    bool is_max_contributor_value_Set() const;
    bool is_max_contributor_value_Valid() const;

    double getSampleCount() const;
    void setSampleCount(const double &sample_count);
    bool is_sample_count_Set() const;
    bool is_sample_count_Valid() const;

    double getAverage() const;
    void setAverage(const double &average);
    bool is_average_Set() const;
    bool is_average_Valid() const;

    double getSum() const;
    void setSum(const double &sum);
    bool is_sum_Set() const;
    bool is_sum_Valid() const;

    double getMinimum() const;
    void setMinimum(const double &minimum);
    bool is_minimum_Set() const;
    bool is_minimum_Valid() const;

    double getMaximum() const;
    void setMaximum(const double &maximum);
    bool is_maximum_Set() const;
    bool is_maximum_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;

    double m_unique_contributors;
    bool m_unique_contributors_isSet;
    bool m_unique_contributors_isValid;

    double m_max_contributor_value;
    bool m_max_contributor_value_isSet;
    bool m_max_contributor_value_isValid;

    double m_sample_count;
    bool m_sample_count_isSet;
    bool m_sample_count_isValid;

    double m_average;
    bool m_average_isSet;
    bool m_average_isValid;

    double m_sum;
    bool m_sum_isSet;
    bool m_sum_isValid;

    double m_minimum;
    bool m_minimum_isSet;
    bool m_minimum_isValid;

    double m_maximum;
    bool m_maximum_isSet;
    bool m_maximum_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInsightRuleMetricDatapoint)

#endif // OAIInsightRuleMetricDatapoint_H
