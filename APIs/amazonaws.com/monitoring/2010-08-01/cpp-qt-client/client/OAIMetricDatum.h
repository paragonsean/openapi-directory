/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMetricDatum.h
 *
 * Encapsulates the information sent to either create a metric or add new values to be aggregated into an existing metric.
 */

#ifndef OAIMetricDatum_H
#define OAIMetricDatum_H

#include <QJsonObject>

#include "OAIMetricDatum_StatisticValues.h"
#include "OAIStandardUnit.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMetricDatum_StatisticValues;

class OAIMetricDatum : public OAIObject {
public:
    OAIMetricDatum();
    OAIMetricDatum(QString json);
    ~OAIMetricDatum() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getMetricName() const;
    void setMetricName(const QString &metric_name);
    bool is_metric_name_Set() const;
    bool is_metric_name_Valid() const;

    QList getDimensions() const;
    void setDimensions(const QList &dimensions);
    bool is_dimensions_Set() const;
    bool is_dimensions_Valid() const;

    QDateTime getTimestamp() const;
    void setTimestamp(const QDateTime &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    double getValue() const;
    void setValue(const double &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    OAIMetricDatum_StatisticValues getStatisticValues() const;
    void setStatisticValues(const OAIMetricDatum_StatisticValues &statistic_values);
    bool is_statistic_values_Set() const;
    bool is_statistic_values_Valid() const;

    QList getValues() const;
    void setValues(const QList &values);
    bool is_values_Set() const;
    bool is_values_Valid() const;

    QList getCounts() const;
    void setCounts(const QList &counts);
    bool is_counts_Set() const;
    bool is_counts_Valid() const;

    OAIStandardUnit getUnit() const;
    void setUnit(const OAIStandardUnit &unit);
    bool is_unit_Set() const;
    bool is_unit_Valid() const;

    qint32 getStorageResolution() const;
    void setStorageResolution(const qint32 &storage_resolution);
    bool is_storage_resolution_Set() const;
    bool is_storage_resolution_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_metric_name;
    bool m_metric_name_isSet;
    bool m_metric_name_isValid;

    QList m_dimensions;
    bool m_dimensions_isSet;
    bool m_dimensions_isValid;

    QDateTime m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;

    double m_value;
    bool m_value_isSet;
    bool m_value_isValid;

    OAIMetricDatum_StatisticValues m_statistic_values;
    bool m_statistic_values_isSet;
    bool m_statistic_values_isValid;

    QList m_values;
    bool m_values_isSet;
    bool m_values_isValid;

    QList m_counts;
    bool m_counts_isSet;
    bool m_counts_isValid;

    OAIStandardUnit m_unit;
    bool m_unit_isSet;
    bool m_unit_isValid;

    qint32 m_storage_resolution;
    bool m_storage_resolution_isSet;
    bool m_storage_resolution_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMetricDatum)

#endif // OAIMetricDatum_H
