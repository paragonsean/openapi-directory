/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISetAlarmStateInput.h
 *
 * 
 */

#ifndef OAISetAlarmStateInput_H
#define OAISetAlarmStateInput_H

#include <QJsonObject>

#include "OAIStateValue.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISetAlarmStateInput : public OAIObject {
public:
    OAISetAlarmStateInput();
    OAISetAlarmStateInput(QString json);
    ~OAISetAlarmStateInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAlarmName() const;
    void setAlarmName(const QString &alarm_name);
    bool is_alarm_name_Set() const;
    bool is_alarm_name_Valid() const;

    OAIStateValue getStateValue() const;
    void setStateValue(const OAIStateValue &state_value);
    bool is_state_value_Set() const;
    bool is_state_value_Valid() const;

    QString getStateReason() const;
    void setStateReason(const QString &state_reason);
    bool is_state_reason_Set() const;
    bool is_state_reason_Valid() const;

    QString getStateReasonData() const;
    void setStateReasonData(const QString &state_reason_data);
    bool is_state_reason_data_Set() const;
    bool is_state_reason_data_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_alarm_name;
    bool m_alarm_name_isSet;
    bool m_alarm_name_isValid;

    OAIStateValue m_state_value;
    bool m_state_value_isSet;
    bool m_state_value_isValid;

    QString m_state_reason;
    bool m_state_reason_isSet;
    bool m_state_reason_isValid;

    QString m_state_reason_data;
    bool m_state_reason_data_isSet;
    bool m_state_reason_data_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISetAlarmStateInput)

#endif // OAISetAlarmStateInput_H
