/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutAnomalyDetectorInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutAnomalyDetectorInput::OAIPutAnomalyDetectorInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutAnomalyDetectorInput::OAIPutAnomalyDetectorInput() {
    this->initializeModel();
}

OAIPutAnomalyDetectorInput::~OAIPutAnomalyDetectorInput() {}

void OAIPutAnomalyDetectorInput::initializeModel() {

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_metric_name_isSet = false;
    m_metric_name_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_stat_isSet = false;
    m_stat_isValid = false;

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_single_metric_anomaly_detector_isSet = false;
    m_single_metric_anomaly_detector_isValid = false;

    m_metric_math_anomaly_detector_isSet = false;
    m_metric_math_anomaly_detector_isValid = false;
}

void OAIPutAnomalyDetectorInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutAnomalyDetectorInput::fromJsonObject(QJsonObject json) {

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("Namespace")]);
    m_r_namespace_isSet = !json[QString("Namespace")].isNull() && m_r_namespace_isValid;

    m_metric_name_isValid = ::OpenAPI::fromJsonValue(m_metric_name, json[QString("MetricName")]);
    m_metric_name_isSet = !json[QString("MetricName")].isNull() && m_metric_name_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("Dimensions")]);
    m_dimensions_isSet = !json[QString("Dimensions")].isNull() && m_dimensions_isValid;

    m_stat_isValid = ::OpenAPI::fromJsonValue(m_stat, json[QString("Stat")]);
    m_stat_isSet = !json[QString("Stat")].isNull() && m_stat_isValid;

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("Configuration")]);
    m_configuration_isSet = !json[QString("Configuration")].isNull() && m_configuration_isValid;

    m_single_metric_anomaly_detector_isValid = ::OpenAPI::fromJsonValue(m_single_metric_anomaly_detector, json[QString("SingleMetricAnomalyDetector")]);
    m_single_metric_anomaly_detector_isSet = !json[QString("SingleMetricAnomalyDetector")].isNull() && m_single_metric_anomaly_detector_isValid;

    m_metric_math_anomaly_detector_isValid = ::OpenAPI::fromJsonValue(m_metric_math_anomaly_detector, json[QString("MetricMathAnomalyDetector")]);
    m_metric_math_anomaly_detector_isSet = !json[QString("MetricMathAnomalyDetector")].isNull() && m_metric_math_anomaly_detector_isValid;
}

QString OAIPutAnomalyDetectorInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutAnomalyDetectorInput::asJsonObject() const {
    QJsonObject obj;
    if (m_r_namespace_isSet) {
        obj.insert(QString("Namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_metric_name_isSet) {
        obj.insert(QString("MetricName"), ::OpenAPI::toJsonValue(m_metric_name));
    }
    if (m_dimensions.isSet()) {
        obj.insert(QString("Dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_stat_isSet) {
        obj.insert(QString("Stat"), ::OpenAPI::toJsonValue(m_stat));
    }
    if (m_configuration.isSet()) {
        obj.insert(QString("Configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_single_metric_anomaly_detector.isSet()) {
        obj.insert(QString("SingleMetricAnomalyDetector"), ::OpenAPI::toJsonValue(m_single_metric_anomaly_detector));
    }
    if (m_metric_math_anomaly_detector.isSet()) {
        obj.insert(QString("MetricMathAnomalyDetector"), ::OpenAPI::toJsonValue(m_metric_math_anomaly_detector));
    }
    return obj;
}

QString OAIPutAnomalyDetectorInput::getRNamespace() const {
    return m_r_namespace;
}
void OAIPutAnomalyDetectorInput::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIPutAnomalyDetectorInput::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIPutAnomalyDetectorInput::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QString OAIPutAnomalyDetectorInput::getMetricName() const {
    return m_metric_name;
}
void OAIPutAnomalyDetectorInput::setMetricName(const QString &metric_name) {
    m_metric_name = metric_name;
    m_metric_name_isSet = true;
}

bool OAIPutAnomalyDetectorInput::is_metric_name_Set() const{
    return m_metric_name_isSet;
}

bool OAIPutAnomalyDetectorInput::is_metric_name_Valid() const{
    return m_metric_name_isValid;
}

QList OAIPutAnomalyDetectorInput::getDimensions() const {
    return m_dimensions;
}
void OAIPutAnomalyDetectorInput::setDimensions(const QList &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIPutAnomalyDetectorInput::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIPutAnomalyDetectorInput::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QString OAIPutAnomalyDetectorInput::getStat() const {
    return m_stat;
}
void OAIPutAnomalyDetectorInput::setStat(const QString &stat) {
    m_stat = stat;
    m_stat_isSet = true;
}

bool OAIPutAnomalyDetectorInput::is_stat_Set() const{
    return m_stat_isSet;
}

bool OAIPutAnomalyDetectorInput::is_stat_Valid() const{
    return m_stat_isValid;
}

OAIPutAnomalyDetectorInput_Configuration OAIPutAnomalyDetectorInput::getConfiguration() const {
    return m_configuration;
}
void OAIPutAnomalyDetectorInput::setConfiguration(const OAIPutAnomalyDetectorInput_Configuration &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAIPutAnomalyDetectorInput::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAIPutAnomalyDetectorInput::is_configuration_Valid() const{
    return m_configuration_isValid;
}

OAIPutAnomalyDetectorInput_SingleMetricAnomalyDetector OAIPutAnomalyDetectorInput::getSingleMetricAnomalyDetector() const {
    return m_single_metric_anomaly_detector;
}
void OAIPutAnomalyDetectorInput::setSingleMetricAnomalyDetector(const OAIPutAnomalyDetectorInput_SingleMetricAnomalyDetector &single_metric_anomaly_detector) {
    m_single_metric_anomaly_detector = single_metric_anomaly_detector;
    m_single_metric_anomaly_detector_isSet = true;
}

bool OAIPutAnomalyDetectorInput::is_single_metric_anomaly_detector_Set() const{
    return m_single_metric_anomaly_detector_isSet;
}

bool OAIPutAnomalyDetectorInput::is_single_metric_anomaly_detector_Valid() const{
    return m_single_metric_anomaly_detector_isValid;
}

OAIPutAnomalyDetectorInput_MetricMathAnomalyDetector OAIPutAnomalyDetectorInput::getMetricMathAnomalyDetector() const {
    return m_metric_math_anomaly_detector;
}
void OAIPutAnomalyDetectorInput::setMetricMathAnomalyDetector(const OAIPutAnomalyDetectorInput_MetricMathAnomalyDetector &metric_math_anomaly_detector) {
    m_metric_math_anomaly_detector = metric_math_anomaly_detector;
    m_metric_math_anomaly_detector_isSet = true;
}

bool OAIPutAnomalyDetectorInput::is_metric_math_anomaly_detector_Set() const{
    return m_metric_math_anomaly_detector_isSet;
}

bool OAIPutAnomalyDetectorInput::is_metric_math_anomaly_detector_Valid() const{
    return m_metric_math_anomaly_detector_isValid;
}

bool OAIPutAnomalyDetectorInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_metric_anomaly_detector.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_math_anomaly_detector.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutAnomalyDetectorInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
