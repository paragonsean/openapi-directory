/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricStreamFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricStreamFilter::OAIMetricStreamFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricStreamFilter::OAIMetricStreamFilter() {
    this->initializeModel();
}

OAIMetricStreamFilter::~OAIMetricStreamFilter() {}

void OAIMetricStreamFilter::initializeModel() {

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_metric_names_isSet = false;
    m_metric_names_isValid = false;
}

void OAIMetricStreamFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricStreamFilter::fromJsonObject(QJsonObject json) {

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("Namespace")]);
    m_r_namespace_isSet = !json[QString("Namespace")].isNull() && m_r_namespace_isValid;

    m_metric_names_isValid = ::OpenAPI::fromJsonValue(m_metric_names, json[QString("MetricNames")]);
    m_metric_names_isSet = !json[QString("MetricNames")].isNull() && m_metric_names_isValid;
}

QString OAIMetricStreamFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricStreamFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_r_namespace_isSet) {
        obj.insert(QString("Namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_metric_names.isSet()) {
        obj.insert(QString("MetricNames"), ::OpenAPI::toJsonValue(m_metric_names));
    }
    return obj;
}

QString OAIMetricStreamFilter::getRNamespace() const {
    return m_r_namespace;
}
void OAIMetricStreamFilter::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIMetricStreamFilter::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIMetricStreamFilter::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QList OAIMetricStreamFilter::getMetricNames() const {
    return m_metric_names;
}
void OAIMetricStreamFilter::setMetricNames(const QList &metric_names) {
    m_metric_names = metric_names;
    m_metric_names_isSet = true;
}

bool OAIMetricStreamFilter::is_metric_names_Set() const{
    return m_metric_names_isSet;
}

bool OAIMetricStreamFilter::is_metric_names_Valid() const{
    return m_metric_names_isValid;
}

bool OAIMetricStreamFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_names.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricStreamFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
