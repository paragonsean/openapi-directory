/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMetricStreamEntry.h
 *
 * This structure contains the configuration information about one metric stream.
 */

#ifndef OAIMetricStreamEntry_H
#define OAIMetricStreamEntry_H

#include <QJsonObject>

#include "OAIMetricStreamOutputFormat.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMetricStreamEntry : public OAIObject {
public:
    OAIMetricStreamEntry();
    OAIMetricStreamEntry(QString json);
    ~OAIMetricStreamEntry() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QDateTime getCreationDate() const;
    void setCreationDate(const QDateTime &creation_date);
    bool is_creation_date_Set() const;
    bool is_creation_date_Valid() const;

    QDateTime getLastUpdateDate() const;
    void setLastUpdateDate(const QDateTime &last_update_date);
    bool is_last_update_date_Set() const;
    bool is_last_update_date_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getFirehoseArn() const;
    void setFirehoseArn(const QString &firehose_arn);
    bool is_firehose_arn_Set() const;
    bool is_firehose_arn_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    OAIMetricStreamOutputFormat getOutputFormat() const;
    void setOutputFormat(const OAIMetricStreamOutputFormat &output_format);
    bool is_output_format_Set() const;
    bool is_output_format_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QDateTime m_creation_date;
    bool m_creation_date_isSet;
    bool m_creation_date_isValid;

    QDateTime m_last_update_date;
    bool m_last_update_date_isSet;
    bool m_last_update_date_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_firehose_arn;
    bool m_firehose_arn_isSet;
    bool m_firehose_arn_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    OAIMetricStreamOutputFormat m_output_format;
    bool m_output_format_isSet;
    bool m_output_format_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMetricStreamEntry)

#endif // OAIMetricStreamEntry_H
