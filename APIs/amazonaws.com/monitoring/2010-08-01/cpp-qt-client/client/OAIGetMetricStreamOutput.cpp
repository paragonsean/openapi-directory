/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetMetricStreamOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetMetricStreamOutput::OAIGetMetricStreamOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetMetricStreamOutput::OAIGetMetricStreamOutput() {
    this->initializeModel();
}

OAIGetMetricStreamOutput::~OAIGetMetricStreamOutput() {}

void OAIGetMetricStreamOutput::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_include_filters_isSet = false;
    m_include_filters_isValid = false;

    m_exclude_filters_isSet = false;
    m_exclude_filters_isValid = false;

    m_firehose_arn_isSet = false;
    m_firehose_arn_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_last_update_date_isSet = false;
    m_last_update_date_isValid = false;

    m_output_format_isSet = false;
    m_output_format_isValid = false;

    m_statistics_configurations_isSet = false;
    m_statistics_configurations_isValid = false;

    m_include_linked_accounts_metrics_isSet = false;
    m_include_linked_accounts_metrics_isValid = false;
}

void OAIGetMetricStreamOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetMetricStreamOutput::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_include_filters_isValid = ::OpenAPI::fromJsonValue(m_include_filters, json[QString("IncludeFilters")]);
    m_include_filters_isSet = !json[QString("IncludeFilters")].isNull() && m_include_filters_isValid;

    m_exclude_filters_isValid = ::OpenAPI::fromJsonValue(m_exclude_filters, json[QString("ExcludeFilters")]);
    m_exclude_filters_isSet = !json[QString("ExcludeFilters")].isNull() && m_exclude_filters_isValid;

    m_firehose_arn_isValid = ::OpenAPI::fromJsonValue(m_firehose_arn, json[QString("FirehoseArn")]);
    m_firehose_arn_isSet = !json[QString("FirehoseArn")].isNull() && m_firehose_arn_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_last_update_date_isValid = ::OpenAPI::fromJsonValue(m_last_update_date, json[QString("LastUpdateDate")]);
    m_last_update_date_isSet = !json[QString("LastUpdateDate")].isNull() && m_last_update_date_isValid;

    m_output_format_isValid = ::OpenAPI::fromJsonValue(m_output_format, json[QString("OutputFormat")]);
    m_output_format_isSet = !json[QString("OutputFormat")].isNull() && m_output_format_isValid;

    m_statistics_configurations_isValid = ::OpenAPI::fromJsonValue(m_statistics_configurations, json[QString("StatisticsConfigurations")]);
    m_statistics_configurations_isSet = !json[QString("StatisticsConfigurations")].isNull() && m_statistics_configurations_isValid;

    m_include_linked_accounts_metrics_isValid = ::OpenAPI::fromJsonValue(m_include_linked_accounts_metrics, json[QString("IncludeLinkedAccountsMetrics")]);
    m_include_linked_accounts_metrics_isSet = !json[QString("IncludeLinkedAccountsMetrics")].isNull() && m_include_linked_accounts_metrics_isValid;
}

QString OAIGetMetricStreamOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetMetricStreamOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_include_filters.isSet()) {
        obj.insert(QString("IncludeFilters"), ::OpenAPI::toJsonValue(m_include_filters));
    }
    if (m_exclude_filters.isSet()) {
        obj.insert(QString("ExcludeFilters"), ::OpenAPI::toJsonValue(m_exclude_filters));
    }
    if (m_firehose_arn_isSet) {
        obj.insert(QString("FirehoseArn"), ::OpenAPI::toJsonValue(m_firehose_arn));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_state_isSet) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_last_update_date_isSet) {
        obj.insert(QString("LastUpdateDate"), ::OpenAPI::toJsonValue(m_last_update_date));
    }
    if (m_output_format.isSet()) {
        obj.insert(QString("OutputFormat"), ::OpenAPI::toJsonValue(m_output_format));
    }
    if (m_statistics_configurations.isSet()) {
        obj.insert(QString("StatisticsConfigurations"), ::OpenAPI::toJsonValue(m_statistics_configurations));
    }
    if (m_include_linked_accounts_metrics_isSet) {
        obj.insert(QString("IncludeLinkedAccountsMetrics"), ::OpenAPI::toJsonValue(m_include_linked_accounts_metrics));
    }
    return obj;
}

QString OAIGetMetricStreamOutput::getArn() const {
    return m_arn;
}
void OAIGetMetricStreamOutput::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIGetMetricStreamOutput::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIGetMetricStreamOutput::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIGetMetricStreamOutput::getName() const {
    return m_name;
}
void OAIGetMetricStreamOutput::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetMetricStreamOutput::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetMetricStreamOutput::is_name_Valid() const{
    return m_name_isValid;
}

QList OAIGetMetricStreamOutput::getIncludeFilters() const {
    return m_include_filters;
}
void OAIGetMetricStreamOutput::setIncludeFilters(const QList &include_filters) {
    m_include_filters = include_filters;
    m_include_filters_isSet = true;
}

bool OAIGetMetricStreamOutput::is_include_filters_Set() const{
    return m_include_filters_isSet;
}

bool OAIGetMetricStreamOutput::is_include_filters_Valid() const{
    return m_include_filters_isValid;
}

QList OAIGetMetricStreamOutput::getExcludeFilters() const {
    return m_exclude_filters;
}
void OAIGetMetricStreamOutput::setExcludeFilters(const QList &exclude_filters) {
    m_exclude_filters = exclude_filters;
    m_exclude_filters_isSet = true;
}

bool OAIGetMetricStreamOutput::is_exclude_filters_Set() const{
    return m_exclude_filters_isSet;
}

bool OAIGetMetricStreamOutput::is_exclude_filters_Valid() const{
    return m_exclude_filters_isValid;
}

QString OAIGetMetricStreamOutput::getFirehoseArn() const {
    return m_firehose_arn;
}
void OAIGetMetricStreamOutput::setFirehoseArn(const QString &firehose_arn) {
    m_firehose_arn = firehose_arn;
    m_firehose_arn_isSet = true;
}

bool OAIGetMetricStreamOutput::is_firehose_arn_Set() const{
    return m_firehose_arn_isSet;
}

bool OAIGetMetricStreamOutput::is_firehose_arn_Valid() const{
    return m_firehose_arn_isValid;
}

QString OAIGetMetricStreamOutput::getRoleArn() const {
    return m_role_arn;
}
void OAIGetMetricStreamOutput::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIGetMetricStreamOutput::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIGetMetricStreamOutput::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QString OAIGetMetricStreamOutput::getState() const {
    return m_state;
}
void OAIGetMetricStreamOutput::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGetMetricStreamOutput::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGetMetricStreamOutput::is_state_Valid() const{
    return m_state_isValid;
}

QDateTime OAIGetMetricStreamOutput::getCreationDate() const {
    return m_creation_date;
}
void OAIGetMetricStreamOutput::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIGetMetricStreamOutput::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIGetMetricStreamOutput::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QDateTime OAIGetMetricStreamOutput::getLastUpdateDate() const {
    return m_last_update_date;
}
void OAIGetMetricStreamOutput::setLastUpdateDate(const QDateTime &last_update_date) {
    m_last_update_date = last_update_date;
    m_last_update_date_isSet = true;
}

bool OAIGetMetricStreamOutput::is_last_update_date_Set() const{
    return m_last_update_date_isSet;
}

bool OAIGetMetricStreamOutput::is_last_update_date_Valid() const{
    return m_last_update_date_isValid;
}

OAIMetricStreamOutputFormat OAIGetMetricStreamOutput::getOutputFormat() const {
    return m_output_format;
}
void OAIGetMetricStreamOutput::setOutputFormat(const OAIMetricStreamOutputFormat &output_format) {
    m_output_format = output_format;
    m_output_format_isSet = true;
}

bool OAIGetMetricStreamOutput::is_output_format_Set() const{
    return m_output_format_isSet;
}

bool OAIGetMetricStreamOutput::is_output_format_Valid() const{
    return m_output_format_isValid;
}

QList OAIGetMetricStreamOutput::getStatisticsConfigurations() const {
    return m_statistics_configurations;
}
void OAIGetMetricStreamOutput::setStatisticsConfigurations(const QList &statistics_configurations) {
    m_statistics_configurations = statistics_configurations;
    m_statistics_configurations_isSet = true;
}

bool OAIGetMetricStreamOutput::is_statistics_configurations_Set() const{
    return m_statistics_configurations_isSet;
}

bool OAIGetMetricStreamOutput::is_statistics_configurations_Valid() const{
    return m_statistics_configurations_isValid;
}

bool OAIGetMetricStreamOutput::getIncludeLinkedAccountsMetrics() const {
    return m_include_linked_accounts_metrics;
}
void OAIGetMetricStreamOutput::setIncludeLinkedAccountsMetrics(const bool &include_linked_accounts_metrics) {
    m_include_linked_accounts_metrics = include_linked_accounts_metrics;
    m_include_linked_accounts_metrics_isSet = true;
}

bool OAIGetMetricStreamOutput::is_include_linked_accounts_metrics_Set() const{
    return m_include_linked_accounts_metrics_isSet;
}

bool OAIGetMetricStreamOutput::is_include_linked_accounts_metrics_Valid() const{
    return m_include_linked_accounts_metrics_isValid;
}

bool OAIGetMetricStreamOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_firehose_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistics_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_linked_accounts_metrics_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetMetricStreamOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
