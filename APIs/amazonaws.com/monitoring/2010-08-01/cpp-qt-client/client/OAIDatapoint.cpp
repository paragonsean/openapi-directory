/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatapoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatapoint::OAIDatapoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatapoint::OAIDatapoint() {
    this->initializeModel();
}

OAIDatapoint::~OAIDatapoint() {}

void OAIDatapoint::initializeModel() {

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_sample_count_isSet = false;
    m_sample_count_isValid = false;

    m_average_isSet = false;
    m_average_isValid = false;

    m_sum_isSet = false;
    m_sum_isValid = false;

    m_minimum_isSet = false;
    m_minimum_isValid = false;

    m_maximum_isSet = false;
    m_maximum_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_extended_statistics_isSet = false;
    m_extended_statistics_isValid = false;
}

void OAIDatapoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatapoint::fromJsonObject(QJsonObject json) {

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("Timestamp")]);
    m_timestamp_isSet = !json[QString("Timestamp")].isNull() && m_timestamp_isValid;

    m_sample_count_isValid = ::OpenAPI::fromJsonValue(m_sample_count, json[QString("SampleCount")]);
    m_sample_count_isSet = !json[QString("SampleCount")].isNull() && m_sample_count_isValid;

    m_average_isValid = ::OpenAPI::fromJsonValue(m_average, json[QString("Average")]);
    m_average_isSet = !json[QString("Average")].isNull() && m_average_isValid;

    m_sum_isValid = ::OpenAPI::fromJsonValue(m_sum, json[QString("Sum")]);
    m_sum_isSet = !json[QString("Sum")].isNull() && m_sum_isValid;

    m_minimum_isValid = ::OpenAPI::fromJsonValue(m_minimum, json[QString("Minimum")]);
    m_minimum_isSet = !json[QString("Minimum")].isNull() && m_minimum_isValid;

    m_maximum_isValid = ::OpenAPI::fromJsonValue(m_maximum, json[QString("Maximum")]);
    m_maximum_isSet = !json[QString("Maximum")].isNull() && m_maximum_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("Unit")]);
    m_unit_isSet = !json[QString("Unit")].isNull() && m_unit_isValid;

    m_extended_statistics_isValid = ::OpenAPI::fromJsonValue(m_extended_statistics, json[QString("ExtendedStatistics")]);
    m_extended_statistics_isSet = !json[QString("ExtendedStatistics")].isNull() && m_extended_statistics_isValid;
}

QString OAIDatapoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatapoint::asJsonObject() const {
    QJsonObject obj;
    if (m_timestamp_isSet) {
        obj.insert(QString("Timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_sample_count_isSet) {
        obj.insert(QString("SampleCount"), ::OpenAPI::toJsonValue(m_sample_count));
    }
    if (m_average_isSet) {
        obj.insert(QString("Average"), ::OpenAPI::toJsonValue(m_average));
    }
    if (m_sum_isSet) {
        obj.insert(QString("Sum"), ::OpenAPI::toJsonValue(m_sum));
    }
    if (m_minimum_isSet) {
        obj.insert(QString("Minimum"), ::OpenAPI::toJsonValue(m_minimum));
    }
    if (m_maximum_isSet) {
        obj.insert(QString("Maximum"), ::OpenAPI::toJsonValue(m_maximum));
    }
    if (m_unit.isSet()) {
        obj.insert(QString("Unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    if (m_extended_statistics.isSet()) {
        obj.insert(QString("ExtendedStatistics"), ::OpenAPI::toJsonValue(m_extended_statistics));
    }
    return obj;
}

QDateTime OAIDatapoint::getTimestamp() const {
    return m_timestamp;
}
void OAIDatapoint::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIDatapoint::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIDatapoint::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

double OAIDatapoint::getSampleCount() const {
    return m_sample_count;
}
void OAIDatapoint::setSampleCount(const double &sample_count) {
    m_sample_count = sample_count;
    m_sample_count_isSet = true;
}

bool OAIDatapoint::is_sample_count_Set() const{
    return m_sample_count_isSet;
}

bool OAIDatapoint::is_sample_count_Valid() const{
    return m_sample_count_isValid;
}

double OAIDatapoint::getAverage() const {
    return m_average;
}
void OAIDatapoint::setAverage(const double &average) {
    m_average = average;
    m_average_isSet = true;
}

bool OAIDatapoint::is_average_Set() const{
    return m_average_isSet;
}

bool OAIDatapoint::is_average_Valid() const{
    return m_average_isValid;
}

double OAIDatapoint::getSum() const {
    return m_sum;
}
void OAIDatapoint::setSum(const double &sum) {
    m_sum = sum;
    m_sum_isSet = true;
}

bool OAIDatapoint::is_sum_Set() const{
    return m_sum_isSet;
}

bool OAIDatapoint::is_sum_Valid() const{
    return m_sum_isValid;
}

double OAIDatapoint::getMinimum() const {
    return m_minimum;
}
void OAIDatapoint::setMinimum(const double &minimum) {
    m_minimum = minimum;
    m_minimum_isSet = true;
}

bool OAIDatapoint::is_minimum_Set() const{
    return m_minimum_isSet;
}

bool OAIDatapoint::is_minimum_Valid() const{
    return m_minimum_isValid;
}

double OAIDatapoint::getMaximum() const {
    return m_maximum;
}
void OAIDatapoint::setMaximum(const double &maximum) {
    m_maximum = maximum;
    m_maximum_isSet = true;
}

bool OAIDatapoint::is_maximum_Set() const{
    return m_maximum_isSet;
}

bool OAIDatapoint::is_maximum_Valid() const{
    return m_maximum_isValid;
}

OAIStandardUnit OAIDatapoint::getUnit() const {
    return m_unit;
}
void OAIDatapoint::setUnit(const OAIStandardUnit &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIDatapoint::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIDatapoint::is_unit_Valid() const{
    return m_unit_isValid;
}

QMap OAIDatapoint::getExtendedStatistics() const {
    return m_extended_statistics;
}
void OAIDatapoint::setExtendedStatistics(const QMap &extended_statistics) {
    m_extended_statistics = extended_statistics;
    m_extended_statistics_isSet = true;
}

bool OAIDatapoint::is_extended_statistics_Set() const{
    return m_extended_statistics_isSet;
}

bool OAIDatapoint::is_extended_statistics_Valid() const{
    return m_extended_statistics_isValid;
}

bool OAIDatapoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatapoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
