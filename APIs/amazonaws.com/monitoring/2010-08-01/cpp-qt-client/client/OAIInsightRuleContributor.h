/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInsightRuleContributor.h
 *
 * &lt;p&gt;One of the unique contributors found by a Contributor Insights rule. If the rule contains multiple keys, then a unique contributor is a unique combination of values from all the keys in the rule.&lt;/p&gt; &lt;p&gt;If the rule contains a single key, then each unique contributor is each unique value for this key.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetInsightRuleReport.html\&quot;&gt;GetInsightRuleReport&lt;/a&gt;.&lt;/p&gt;
 */

#ifndef OAIInsightRuleContributor_H
#define OAIInsightRuleContributor_H

#include <QJsonObject>

#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIInsightRuleContributor : public OAIObject {
public:
    OAIInsightRuleContributor();
    OAIInsightRuleContributor(QString json);
    ~OAIInsightRuleContributor() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getKeys() const;
    void setKeys(const QList &keys);
    bool is_keys_Set() const;
    bool is_keys_Valid() const;

    double getApproximateAggregateValue() const;
    void setApproximateAggregateValue(const double &approximate_aggregate_value);
    bool is_approximate_aggregate_value_Set() const;
    bool is_approximate_aggregate_value_Valid() const;

    QList getDatapoints() const;
    void setDatapoints(const QList &datapoints);
    bool is_datapoints_Set() const;
    bool is_datapoints_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_keys;
    bool m_keys_isSet;
    bool m_keys_isValid;

    double m_approximate_aggregate_value;
    bool m_approximate_aggregate_value_isSet;
    bool m_approximate_aggregate_value_isValid;

    QList m_datapoints;
    bool m_datapoints_isSet;
    bool m_datapoints_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInsightRuleContributor)

#endif // OAIInsightRuleContributor_H
