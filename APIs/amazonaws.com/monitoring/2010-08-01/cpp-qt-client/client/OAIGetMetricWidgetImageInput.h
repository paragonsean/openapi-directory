/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetMetricWidgetImageInput.h
 *
 * 
 */

#ifndef OAIGetMetricWidgetImageInput_H
#define OAIGetMetricWidgetImageInput_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetMetricWidgetImageInput : public OAIObject {
public:
    OAIGetMetricWidgetImageInput();
    OAIGetMetricWidgetImageInput(QString json);
    ~OAIGetMetricWidgetImageInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getMetricWidget() const;
    void setMetricWidget(const QString &metric_widget);
    bool is_metric_widget_Set() const;
    bool is_metric_widget_Valid() const;

    QString getOutputFormat() const;
    void setOutputFormat(const QString &output_format);
    bool is_output_format_Set() const;
    bool is_output_format_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_metric_widget;
    bool m_metric_widget_isSet;
    bool m_metric_widget_isValid;

    QString m_output_format;
    bool m_output_format_isSet;
    bool m_output_format_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetMetricWidgetImageInput)

#endif // OAIGetMetricWidgetImageInput_H
