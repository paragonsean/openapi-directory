/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricDatum_StatisticValues.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricDatum_StatisticValues::OAIMetricDatum_StatisticValues(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricDatum_StatisticValues::OAIMetricDatum_StatisticValues() {
    this->initializeModel();
}

OAIMetricDatum_StatisticValues::~OAIMetricDatum_StatisticValues() {}

void OAIMetricDatum_StatisticValues::initializeModel() {

    m_sample_count_isSet = false;
    m_sample_count_isValid = false;

    m_sum_isSet = false;
    m_sum_isValid = false;

    m_minimum_isSet = false;
    m_minimum_isValid = false;

    m_maximum_isSet = false;
    m_maximum_isValid = false;
}

void OAIMetricDatum_StatisticValues::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricDatum_StatisticValues::fromJsonObject(QJsonObject json) {

    m_sample_count_isValid = ::OpenAPI::fromJsonValue(m_sample_count, json[QString("SampleCount")]);
    m_sample_count_isSet = !json[QString("SampleCount")].isNull() && m_sample_count_isValid;

    m_sum_isValid = ::OpenAPI::fromJsonValue(m_sum, json[QString("Sum")]);
    m_sum_isSet = !json[QString("Sum")].isNull() && m_sum_isValid;

    m_minimum_isValid = ::OpenAPI::fromJsonValue(m_minimum, json[QString("Minimum")]);
    m_minimum_isSet = !json[QString("Minimum")].isNull() && m_minimum_isValid;

    m_maximum_isValid = ::OpenAPI::fromJsonValue(m_maximum, json[QString("Maximum")]);
    m_maximum_isSet = !json[QString("Maximum")].isNull() && m_maximum_isValid;
}

QString OAIMetricDatum_StatisticValues::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricDatum_StatisticValues::asJsonObject() const {
    QJsonObject obj;
    if (m_sample_count_isSet) {
        obj.insert(QString("SampleCount"), ::OpenAPI::toJsonValue(m_sample_count));
    }
    if (m_sum_isSet) {
        obj.insert(QString("Sum"), ::OpenAPI::toJsonValue(m_sum));
    }
    if (m_minimum_isSet) {
        obj.insert(QString("Minimum"), ::OpenAPI::toJsonValue(m_minimum));
    }
    if (m_maximum_isSet) {
        obj.insert(QString("Maximum"), ::OpenAPI::toJsonValue(m_maximum));
    }
    return obj;
}

double OAIMetricDatum_StatisticValues::getSampleCount() const {
    return m_sample_count;
}
void OAIMetricDatum_StatisticValues::setSampleCount(const double &sample_count) {
    m_sample_count = sample_count;
    m_sample_count_isSet = true;
}

bool OAIMetricDatum_StatisticValues::is_sample_count_Set() const{
    return m_sample_count_isSet;
}

bool OAIMetricDatum_StatisticValues::is_sample_count_Valid() const{
    return m_sample_count_isValid;
}

double OAIMetricDatum_StatisticValues::getSum() const {
    return m_sum;
}
void OAIMetricDatum_StatisticValues::setSum(const double &sum) {
    m_sum = sum;
    m_sum_isSet = true;
}

bool OAIMetricDatum_StatisticValues::is_sum_Set() const{
    return m_sum_isSet;
}

bool OAIMetricDatum_StatisticValues::is_sum_Valid() const{
    return m_sum_isValid;
}

double OAIMetricDatum_StatisticValues::getMinimum() const {
    return m_minimum;
}
void OAIMetricDatum_StatisticValues::setMinimum(const double &minimum) {
    m_minimum = minimum;
    m_minimum_isSet = true;
}

bool OAIMetricDatum_StatisticValues::is_minimum_Set() const{
    return m_minimum_isSet;
}

bool OAIMetricDatum_StatisticValues::is_minimum_Valid() const{
    return m_minimum_isValid;
}

double OAIMetricDatum_StatisticValues::getMaximum() const {
    return m_maximum;
}
void OAIMetricDatum_StatisticValues::setMaximum(const double &maximum) {
    m_maximum = maximum;
    m_maximum_isSet = true;
}

bool OAIMetricDatum_StatisticValues::is_maximum_Set() const{
    return m_maximum_isSet;
}

bool OAIMetricDatum_StatisticValues::is_maximum_Valid() const{
    return m_maximum_isValid;
}

bool OAIMetricDatum_StatisticValues::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sample_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricDatum_StatisticValues::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sample_count_isValid && m_sum_isValid && m_minimum_isValid && m_maximum_isValid && true;
}

} // namespace OpenAPI
