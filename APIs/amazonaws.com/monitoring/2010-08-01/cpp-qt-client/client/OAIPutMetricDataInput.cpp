/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutMetricDataInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutMetricDataInput::OAIPutMetricDataInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutMetricDataInput::OAIPutMetricDataInput() {
    this->initializeModel();
}

OAIPutMetricDataInput::~OAIPutMetricDataInput() {}

void OAIPutMetricDataInput::initializeModel() {

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_metric_data_isSet = false;
    m_metric_data_isValid = false;
}

void OAIPutMetricDataInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutMetricDataInput::fromJsonObject(QJsonObject json) {

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("Namespace")]);
    m_r_namespace_isSet = !json[QString("Namespace")].isNull() && m_r_namespace_isValid;

    m_metric_data_isValid = ::OpenAPI::fromJsonValue(m_metric_data, json[QString("MetricData")]);
    m_metric_data_isSet = !json[QString("MetricData")].isNull() && m_metric_data_isValid;
}

QString OAIPutMetricDataInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutMetricDataInput::asJsonObject() const {
    QJsonObject obj;
    if (m_r_namespace_isSet) {
        obj.insert(QString("Namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_metric_data.isSet()) {
        obj.insert(QString("MetricData"), ::OpenAPI::toJsonValue(m_metric_data));
    }
    return obj;
}

QString OAIPutMetricDataInput::getRNamespace() const {
    return m_r_namespace;
}
void OAIPutMetricDataInput::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIPutMetricDataInput::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIPutMetricDataInput::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QList OAIPutMetricDataInput::getMetricData() const {
    return m_metric_data;
}
void OAIPutMetricDataInput::setMetricData(const QList &metric_data) {
    m_metric_data = metric_data;
    m_metric_data_isSet = true;
}

bool OAIPutMetricDataInput::is_metric_data_Set() const{
    return m_metric_data_isSet;
}

bool OAIPutMetricDataInput::is_metric_data_Valid() const{
    return m_metric_data_isValid;
}

bool OAIPutMetricDataInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutMetricDataInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_r_namespace_isValid && m_metric_data_isValid && true;
}

} // namespace OpenAPI
