/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInsightRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInsightRule::OAIInsightRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInsightRule::OAIInsightRule() {
    this->initializeModel();
}

OAIInsightRule::~OAIInsightRule() {}

void OAIInsightRule::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_definition_isSet = false;
    m_definition_isValid = false;

    m_managed_rule_isSet = false;
    m_managed_rule_isValid = false;
}

void OAIInsightRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInsightRule::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("Schema")]);
    m_schema_isSet = !json[QString("Schema")].isNull() && m_schema_isValid;

    m_definition_isValid = ::OpenAPI::fromJsonValue(m_definition, json[QString("Definition")]);
    m_definition_isSet = !json[QString("Definition")].isNull() && m_definition_isValid;

    m_managed_rule_isValid = ::OpenAPI::fromJsonValue(m_managed_rule, json[QString("ManagedRule")]);
    m_managed_rule_isSet = !json[QString("ManagedRule")].isNull() && m_managed_rule_isValid;
}

QString OAIInsightRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInsightRule::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_schema_isSet) {
        obj.insert(QString("Schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_definition_isSet) {
        obj.insert(QString("Definition"), ::OpenAPI::toJsonValue(m_definition));
    }
    if (m_managed_rule_isSet) {
        obj.insert(QString("ManagedRule"), ::OpenAPI::toJsonValue(m_managed_rule));
    }
    return obj;
}

QString OAIInsightRule::getName() const {
    return m_name;
}
void OAIInsightRule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInsightRule::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInsightRule::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIInsightRule::getState() const {
    return m_state;
}
void OAIInsightRule::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIInsightRule::is_state_Set() const{
    return m_state_isSet;
}

bool OAIInsightRule::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIInsightRule::getSchema() const {
    return m_schema;
}
void OAIInsightRule::setSchema(const QString &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIInsightRule::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIInsightRule::is_schema_Valid() const{
    return m_schema_isValid;
}

QString OAIInsightRule::getDefinition() const {
    return m_definition;
}
void OAIInsightRule::setDefinition(const QString &definition) {
    m_definition = definition;
    m_definition_isSet = true;
}

bool OAIInsightRule::is_definition_Set() const{
    return m_definition_isSet;
}

bool OAIInsightRule::is_definition_Valid() const{
    return m_definition_isValid;
}

bool OAIInsightRule::getManagedRule() const {
    return m_managed_rule;
}
void OAIInsightRule::setManagedRule(const bool &managed_rule) {
    m_managed_rule = managed_rule;
    m_managed_rule_isSet = true;
}

bool OAIInsightRule::is_managed_rule_Set() const{
    return m_managed_rule_isSet;
}

bool OAIInsightRule::is_managed_rule_Valid() const{
    return m_managed_rule_isValid;
}

bool OAIInsightRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_rule_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInsightRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_state_isValid && m_schema_isValid && m_definition_isValid && true;
}

} // namespace OpenAPI
