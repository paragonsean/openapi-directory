/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetMetricDataInput.h
 *
 * 
 */

#ifndef OAIGetMetricDataInput_H
#define OAIGetMetricDataInput_H

#include <QJsonObject>

#include "OAIGetMetricDataInput_LabelOptions.h"
#include "OAIScanBy.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetMetricDataInput_LabelOptions;

class OAIGetMetricDataInput : public OAIObject {
public:
    OAIGetMetricDataInput();
    OAIGetMetricDataInput(QString json);
    ~OAIGetMetricDataInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getMetricDataQueries() const;
    void setMetricDataQueries(const QList &metric_data_queries);
    bool is_metric_data_queries_Set() const;
    bool is_metric_data_queries_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    QString getNextToken() const;
    void setNextToken(const QString &next_token);
    bool is_next_token_Set() const;
    bool is_next_token_Valid() const;

    OAIScanBy getScanBy() const;
    void setScanBy(const OAIScanBy &scan_by);
    bool is_scan_by_Set() const;
    bool is_scan_by_Valid() const;

    qint32 getMaxDatapoints() const;
    void setMaxDatapoints(const qint32 &max_datapoints);
    bool is_max_datapoints_Set() const;
    bool is_max_datapoints_Valid() const;

    OAIGetMetricDataInput_LabelOptions getLabelOptions() const;
    void setLabelOptions(const OAIGetMetricDataInput_LabelOptions &label_options);
    bool is_label_options_Set() const;
    bool is_label_options_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_metric_data_queries;
    bool m_metric_data_queries_isSet;
    bool m_metric_data_queries_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    QString m_next_token;
    bool m_next_token_isSet;
    bool m_next_token_isValid;

    OAIScanBy m_scan_by;
    bool m_scan_by_isSet;
    bool m_scan_by_isValid;

    qint32 m_max_datapoints;
    bool m_max_datapoints_isSet;
    bool m_max_datapoints_isValid;

    OAIGetMetricDataInput_LabelOptions m_label_options;
    bool m_label_options_isSet;
    bool m_label_options_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetMetricDataInput)

#endif // OAIGetMetricDataInput_H
