/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlarmHistoryItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlarmHistoryItem::OAIAlarmHistoryItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlarmHistoryItem::OAIAlarmHistoryItem() {
    this->initializeModel();
}

OAIAlarmHistoryItem::~OAIAlarmHistoryItem() {}

void OAIAlarmHistoryItem::initializeModel() {

    m_alarm_name_isSet = false;
    m_alarm_name_isValid = false;

    m_alarm_type_isSet = false;
    m_alarm_type_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_history_item_type_isSet = false;
    m_history_item_type_isValid = false;

    m_history_summary_isSet = false;
    m_history_summary_isValid = false;

    m_history_data_isSet = false;
    m_history_data_isValid = false;
}

void OAIAlarmHistoryItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlarmHistoryItem::fromJsonObject(QJsonObject json) {

    m_alarm_name_isValid = ::OpenAPI::fromJsonValue(m_alarm_name, json[QString("AlarmName")]);
    m_alarm_name_isSet = !json[QString("AlarmName")].isNull() && m_alarm_name_isValid;

    m_alarm_type_isValid = ::OpenAPI::fromJsonValue(m_alarm_type, json[QString("AlarmType")]);
    m_alarm_type_isSet = !json[QString("AlarmType")].isNull() && m_alarm_type_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("Timestamp")]);
    m_timestamp_isSet = !json[QString("Timestamp")].isNull() && m_timestamp_isValid;

    m_history_item_type_isValid = ::OpenAPI::fromJsonValue(m_history_item_type, json[QString("HistoryItemType")]);
    m_history_item_type_isSet = !json[QString("HistoryItemType")].isNull() && m_history_item_type_isValid;

    m_history_summary_isValid = ::OpenAPI::fromJsonValue(m_history_summary, json[QString("HistorySummary")]);
    m_history_summary_isSet = !json[QString("HistorySummary")].isNull() && m_history_summary_isValid;

    m_history_data_isValid = ::OpenAPI::fromJsonValue(m_history_data, json[QString("HistoryData")]);
    m_history_data_isSet = !json[QString("HistoryData")].isNull() && m_history_data_isValid;
}

QString OAIAlarmHistoryItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlarmHistoryItem::asJsonObject() const {
    QJsonObject obj;
    if (m_alarm_name_isSet) {
        obj.insert(QString("AlarmName"), ::OpenAPI::toJsonValue(m_alarm_name));
    }
    if (m_alarm_type.isSet()) {
        obj.insert(QString("AlarmType"), ::OpenAPI::toJsonValue(m_alarm_type));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("Timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_history_item_type.isSet()) {
        obj.insert(QString("HistoryItemType"), ::OpenAPI::toJsonValue(m_history_item_type));
    }
    if (m_history_summary_isSet) {
        obj.insert(QString("HistorySummary"), ::OpenAPI::toJsonValue(m_history_summary));
    }
    if (m_history_data_isSet) {
        obj.insert(QString("HistoryData"), ::OpenAPI::toJsonValue(m_history_data));
    }
    return obj;
}

QString OAIAlarmHistoryItem::getAlarmName() const {
    return m_alarm_name;
}
void OAIAlarmHistoryItem::setAlarmName(const QString &alarm_name) {
    m_alarm_name = alarm_name;
    m_alarm_name_isSet = true;
}

bool OAIAlarmHistoryItem::is_alarm_name_Set() const{
    return m_alarm_name_isSet;
}

bool OAIAlarmHistoryItem::is_alarm_name_Valid() const{
    return m_alarm_name_isValid;
}

OAIAlarmType OAIAlarmHistoryItem::getAlarmType() const {
    return m_alarm_type;
}
void OAIAlarmHistoryItem::setAlarmType(const OAIAlarmType &alarm_type) {
    m_alarm_type = alarm_type;
    m_alarm_type_isSet = true;
}

bool OAIAlarmHistoryItem::is_alarm_type_Set() const{
    return m_alarm_type_isSet;
}

bool OAIAlarmHistoryItem::is_alarm_type_Valid() const{
    return m_alarm_type_isValid;
}

QDateTime OAIAlarmHistoryItem::getTimestamp() const {
    return m_timestamp;
}
void OAIAlarmHistoryItem::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIAlarmHistoryItem::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIAlarmHistoryItem::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

OAIHistoryItemType OAIAlarmHistoryItem::getHistoryItemType() const {
    return m_history_item_type;
}
void OAIAlarmHistoryItem::setHistoryItemType(const OAIHistoryItemType &history_item_type) {
    m_history_item_type = history_item_type;
    m_history_item_type_isSet = true;
}

bool OAIAlarmHistoryItem::is_history_item_type_Set() const{
    return m_history_item_type_isSet;
}

bool OAIAlarmHistoryItem::is_history_item_type_Valid() const{
    return m_history_item_type_isValid;
}

QString OAIAlarmHistoryItem::getHistorySummary() const {
    return m_history_summary;
}
void OAIAlarmHistoryItem::setHistorySummary(const QString &history_summary) {
    m_history_summary = history_summary;
    m_history_summary_isSet = true;
}

bool OAIAlarmHistoryItem::is_history_summary_Set() const{
    return m_history_summary_isSet;
}

bool OAIAlarmHistoryItem::is_history_summary_Valid() const{
    return m_history_summary_isValid;
}

QString OAIAlarmHistoryItem::getHistoryData() const {
    return m_history_data;
}
void OAIAlarmHistoryItem::setHistoryData(const QString &history_data) {
    m_history_data = history_data;
    m_history_data_isSet = true;
}

bool OAIAlarmHistoryItem::is_history_data_Set() const{
    return m_history_data_isSet;
}

bool OAIAlarmHistoryItem::is_history_data_Valid() const{
    return m_history_data_isValid;
}

bool OAIAlarmHistoryItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alarm_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alarm_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_history_item_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_history_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_history_data_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlarmHistoryItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
