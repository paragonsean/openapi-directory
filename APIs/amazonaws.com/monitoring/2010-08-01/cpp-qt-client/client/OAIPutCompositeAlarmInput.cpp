/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutCompositeAlarmInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutCompositeAlarmInput::OAIPutCompositeAlarmInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutCompositeAlarmInput::OAIPutCompositeAlarmInput() {
    this->initializeModel();
}

OAIPutCompositeAlarmInput::~OAIPutCompositeAlarmInput() {}

void OAIPutCompositeAlarmInput::initializeModel() {

    m_actions_enabled_isSet = false;
    m_actions_enabled_isValid = false;

    m_alarm_actions_isSet = false;
    m_alarm_actions_isValid = false;

    m_alarm_description_isSet = false;
    m_alarm_description_isValid = false;

    m_alarm_name_isSet = false;
    m_alarm_name_isValid = false;

    m_alarm_rule_isSet = false;
    m_alarm_rule_isValid = false;

    m_insufficient_data_actions_isSet = false;
    m_insufficient_data_actions_isValid = false;

    m_ok_actions_isSet = false;
    m_ok_actions_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_actions_suppressor_isSet = false;
    m_actions_suppressor_isValid = false;

    m_actions_suppressor_wait_period_isSet = false;
    m_actions_suppressor_wait_period_isValid = false;

    m_actions_suppressor_extension_period_isSet = false;
    m_actions_suppressor_extension_period_isValid = false;
}

void OAIPutCompositeAlarmInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutCompositeAlarmInput::fromJsonObject(QJsonObject json) {

    m_actions_enabled_isValid = ::OpenAPI::fromJsonValue(m_actions_enabled, json[QString("ActionsEnabled")]);
    m_actions_enabled_isSet = !json[QString("ActionsEnabled")].isNull() && m_actions_enabled_isValid;

    m_alarm_actions_isValid = ::OpenAPI::fromJsonValue(m_alarm_actions, json[QString("AlarmActions")]);
    m_alarm_actions_isSet = !json[QString("AlarmActions")].isNull() && m_alarm_actions_isValid;

    m_alarm_description_isValid = ::OpenAPI::fromJsonValue(m_alarm_description, json[QString("AlarmDescription")]);
    m_alarm_description_isSet = !json[QString("AlarmDescription")].isNull() && m_alarm_description_isValid;

    m_alarm_name_isValid = ::OpenAPI::fromJsonValue(m_alarm_name, json[QString("AlarmName")]);
    m_alarm_name_isSet = !json[QString("AlarmName")].isNull() && m_alarm_name_isValid;

    m_alarm_rule_isValid = ::OpenAPI::fromJsonValue(m_alarm_rule, json[QString("AlarmRule")]);
    m_alarm_rule_isSet = !json[QString("AlarmRule")].isNull() && m_alarm_rule_isValid;

    m_insufficient_data_actions_isValid = ::OpenAPI::fromJsonValue(m_insufficient_data_actions, json[QString("InsufficientDataActions")]);
    m_insufficient_data_actions_isSet = !json[QString("InsufficientDataActions")].isNull() && m_insufficient_data_actions_isValid;

    m_ok_actions_isValid = ::OpenAPI::fromJsonValue(m_ok_actions, json[QString("OKActions")]);
    m_ok_actions_isSet = !json[QString("OKActions")].isNull() && m_ok_actions_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_actions_suppressor_isValid = ::OpenAPI::fromJsonValue(m_actions_suppressor, json[QString("ActionsSuppressor")]);
    m_actions_suppressor_isSet = !json[QString("ActionsSuppressor")].isNull() && m_actions_suppressor_isValid;

    m_actions_suppressor_wait_period_isValid = ::OpenAPI::fromJsonValue(m_actions_suppressor_wait_period, json[QString("ActionsSuppressorWaitPeriod")]);
    m_actions_suppressor_wait_period_isSet = !json[QString("ActionsSuppressorWaitPeriod")].isNull() && m_actions_suppressor_wait_period_isValid;

    m_actions_suppressor_extension_period_isValid = ::OpenAPI::fromJsonValue(m_actions_suppressor_extension_period, json[QString("ActionsSuppressorExtensionPeriod")]);
    m_actions_suppressor_extension_period_isSet = !json[QString("ActionsSuppressorExtensionPeriod")].isNull() && m_actions_suppressor_extension_period_isValid;
}

QString OAIPutCompositeAlarmInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutCompositeAlarmInput::asJsonObject() const {
    QJsonObject obj;
    if (m_actions_enabled_isSet) {
        obj.insert(QString("ActionsEnabled"), ::OpenAPI::toJsonValue(m_actions_enabled));
    }
    if (m_alarm_actions.isSet()) {
        obj.insert(QString("AlarmActions"), ::OpenAPI::toJsonValue(m_alarm_actions));
    }
    if (m_alarm_description_isSet) {
        obj.insert(QString("AlarmDescription"), ::OpenAPI::toJsonValue(m_alarm_description));
    }
    if (m_alarm_name_isSet) {
        obj.insert(QString("AlarmName"), ::OpenAPI::toJsonValue(m_alarm_name));
    }
    if (m_alarm_rule_isSet) {
        obj.insert(QString("AlarmRule"), ::OpenAPI::toJsonValue(m_alarm_rule));
    }
    if (m_insufficient_data_actions.isSet()) {
        obj.insert(QString("InsufficientDataActions"), ::OpenAPI::toJsonValue(m_insufficient_data_actions));
    }
    if (m_ok_actions.isSet()) {
        obj.insert(QString("OKActions"), ::OpenAPI::toJsonValue(m_ok_actions));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_actions_suppressor_isSet) {
        obj.insert(QString("ActionsSuppressor"), ::OpenAPI::toJsonValue(m_actions_suppressor));
    }
    if (m_actions_suppressor_wait_period_isSet) {
        obj.insert(QString("ActionsSuppressorWaitPeriod"), ::OpenAPI::toJsonValue(m_actions_suppressor_wait_period));
    }
    if (m_actions_suppressor_extension_period_isSet) {
        obj.insert(QString("ActionsSuppressorExtensionPeriod"), ::OpenAPI::toJsonValue(m_actions_suppressor_extension_period));
    }
    return obj;
}

bool OAIPutCompositeAlarmInput::getActionsEnabled() const {
    return m_actions_enabled;
}
void OAIPutCompositeAlarmInput::setActionsEnabled(const bool &actions_enabled) {
    m_actions_enabled = actions_enabled;
    m_actions_enabled_isSet = true;
}

bool OAIPutCompositeAlarmInput::is_actions_enabled_Set() const{
    return m_actions_enabled_isSet;
}

bool OAIPutCompositeAlarmInput::is_actions_enabled_Valid() const{
    return m_actions_enabled_isValid;
}

QList OAIPutCompositeAlarmInput::getAlarmActions() const {
    return m_alarm_actions;
}
void OAIPutCompositeAlarmInput::setAlarmActions(const QList &alarm_actions) {
    m_alarm_actions = alarm_actions;
    m_alarm_actions_isSet = true;
}

bool OAIPutCompositeAlarmInput::is_alarm_actions_Set() const{
    return m_alarm_actions_isSet;
}

bool OAIPutCompositeAlarmInput::is_alarm_actions_Valid() const{
    return m_alarm_actions_isValid;
}

QString OAIPutCompositeAlarmInput::getAlarmDescription() const {
    return m_alarm_description;
}
void OAIPutCompositeAlarmInput::setAlarmDescription(const QString &alarm_description) {
    m_alarm_description = alarm_description;
    m_alarm_description_isSet = true;
}

bool OAIPutCompositeAlarmInput::is_alarm_description_Set() const{
    return m_alarm_description_isSet;
}

bool OAIPutCompositeAlarmInput::is_alarm_description_Valid() const{
    return m_alarm_description_isValid;
}

QString OAIPutCompositeAlarmInput::getAlarmName() const {
    return m_alarm_name;
}
void OAIPutCompositeAlarmInput::setAlarmName(const QString &alarm_name) {
    m_alarm_name = alarm_name;
    m_alarm_name_isSet = true;
}

bool OAIPutCompositeAlarmInput::is_alarm_name_Set() const{
    return m_alarm_name_isSet;
}

bool OAIPutCompositeAlarmInput::is_alarm_name_Valid() const{
    return m_alarm_name_isValid;
}

QString OAIPutCompositeAlarmInput::getAlarmRule() const {
    return m_alarm_rule;
}
void OAIPutCompositeAlarmInput::setAlarmRule(const QString &alarm_rule) {
    m_alarm_rule = alarm_rule;
    m_alarm_rule_isSet = true;
}

bool OAIPutCompositeAlarmInput::is_alarm_rule_Set() const{
    return m_alarm_rule_isSet;
}

bool OAIPutCompositeAlarmInput::is_alarm_rule_Valid() const{
    return m_alarm_rule_isValid;
}

QList OAIPutCompositeAlarmInput::getInsufficientDataActions() const {
    return m_insufficient_data_actions;
}
void OAIPutCompositeAlarmInput::setInsufficientDataActions(const QList &insufficient_data_actions) {
    m_insufficient_data_actions = insufficient_data_actions;
    m_insufficient_data_actions_isSet = true;
}

bool OAIPutCompositeAlarmInput::is_insufficient_data_actions_Set() const{
    return m_insufficient_data_actions_isSet;
}

bool OAIPutCompositeAlarmInput::is_insufficient_data_actions_Valid() const{
    return m_insufficient_data_actions_isValid;
}

QList OAIPutCompositeAlarmInput::getOkActions() const {
    return m_ok_actions;
}
void OAIPutCompositeAlarmInput::setOkActions(const QList &ok_actions) {
    m_ok_actions = ok_actions;
    m_ok_actions_isSet = true;
}

bool OAIPutCompositeAlarmInput::is_ok_actions_Set() const{
    return m_ok_actions_isSet;
}

bool OAIPutCompositeAlarmInput::is_ok_actions_Valid() const{
    return m_ok_actions_isValid;
}

QList OAIPutCompositeAlarmInput::getTags() const {
    return m_tags;
}
void OAIPutCompositeAlarmInput::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIPutCompositeAlarmInput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIPutCompositeAlarmInput::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIPutCompositeAlarmInput::getActionsSuppressor() const {
    return m_actions_suppressor;
}
void OAIPutCompositeAlarmInput::setActionsSuppressor(const QString &actions_suppressor) {
    m_actions_suppressor = actions_suppressor;
    m_actions_suppressor_isSet = true;
}

bool OAIPutCompositeAlarmInput::is_actions_suppressor_Set() const{
    return m_actions_suppressor_isSet;
}

bool OAIPutCompositeAlarmInput::is_actions_suppressor_Valid() const{
    return m_actions_suppressor_isValid;
}

qint32 OAIPutCompositeAlarmInput::getActionsSuppressorWaitPeriod() const {
    return m_actions_suppressor_wait_period;
}
void OAIPutCompositeAlarmInput::setActionsSuppressorWaitPeriod(const qint32 &actions_suppressor_wait_period) {
    m_actions_suppressor_wait_period = actions_suppressor_wait_period;
    m_actions_suppressor_wait_period_isSet = true;
}

bool OAIPutCompositeAlarmInput::is_actions_suppressor_wait_period_Set() const{
    return m_actions_suppressor_wait_period_isSet;
}

bool OAIPutCompositeAlarmInput::is_actions_suppressor_wait_period_Valid() const{
    return m_actions_suppressor_wait_period_isValid;
}

qint32 OAIPutCompositeAlarmInput::getActionsSuppressorExtensionPeriod() const {
    return m_actions_suppressor_extension_period;
}
void OAIPutCompositeAlarmInput::setActionsSuppressorExtensionPeriod(const qint32 &actions_suppressor_extension_period) {
    m_actions_suppressor_extension_period = actions_suppressor_extension_period;
    m_actions_suppressor_extension_period_isSet = true;
}

bool OAIPutCompositeAlarmInput::is_actions_suppressor_extension_period_Set() const{
    return m_actions_suppressor_extension_period_isSet;
}

bool OAIPutCompositeAlarmInput::is_actions_suppressor_extension_period_Valid() const{
    return m_actions_suppressor_extension_period_isValid;
}

bool OAIPutCompositeAlarmInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alarm_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alarm_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alarm_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alarm_rule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insufficient_data_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ok_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_actions_suppressor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actions_suppressor_wait_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actions_suppressor_extension_period_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutCompositeAlarmInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_alarm_name_isValid && m_alarm_rule_isValid && true;
}

} // namespace OpenAPI
