/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAlarmHistoryItem.h
 *
 * Represents the history of a specific alarm.
 */

#ifndef OAIAlarmHistoryItem_H
#define OAIAlarmHistoryItem_H

#include <QJsonObject>

#include "OAIAlarmType.h"
#include "OAIHistoryItemType.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAlarmHistoryItem : public OAIObject {
public:
    OAIAlarmHistoryItem();
    OAIAlarmHistoryItem(QString json);
    ~OAIAlarmHistoryItem() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAlarmName() const;
    void setAlarmName(const QString &alarm_name);
    bool is_alarm_name_Set() const;
    bool is_alarm_name_Valid() const;

    OAIAlarmType getAlarmType() const;
    void setAlarmType(const OAIAlarmType &alarm_type);
    bool is_alarm_type_Set() const;
    bool is_alarm_type_Valid() const;

    QDateTime getTimestamp() const;
    void setTimestamp(const QDateTime &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    OAIHistoryItemType getHistoryItemType() const;
    void setHistoryItemType(const OAIHistoryItemType &history_item_type);
    bool is_history_item_type_Set() const;
    bool is_history_item_type_Valid() const;

    QString getHistorySummary() const;
    void setHistorySummary(const QString &history_summary);
    bool is_history_summary_Set() const;
    bool is_history_summary_Valid() const;

    QString getHistoryData() const;
    void setHistoryData(const QString &history_data);
    bool is_history_data_Set() const;
    bool is_history_data_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_alarm_name;
    bool m_alarm_name_isSet;
    bool m_alarm_name_isValid;

    OAIAlarmType m_alarm_type;
    bool m_alarm_type_isSet;
    bool m_alarm_type_isValid;

    QDateTime m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;

    OAIHistoryItemType m_history_item_type;
    bool m_history_item_type_isSet;
    bool m_history_item_type_isValid;

    QString m_history_summary;
    bool m_history_summary_isSet;
    bool m_history_summary_isValid;

    QString m_history_data;
    bool m_history_data_isSet;
    bool m_history_data_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAlarmHistoryItem)

#endif // OAIAlarmHistoryItem_H
