/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAlarmType.h"
#include "OAIAnomalyDetectorType.h"
#include "OAIDeleteAlarmsInput.h"
#include "OAIDeleteAnomalyDetectorInput.h"
#include "OAIDeleteDashboardsInput.h"
#include "OAIDeleteInsightRulesInput.h"
#include "OAIDeleteInsightRulesOutput.h"
#include "OAIDeleteMetricStreamInput.h"
#include "OAIDescribeAlarmHistoryInput.h"
#include "OAIDescribeAlarmHistoryOutput.h"
#include "OAIDescribeAlarmsForMetricInput.h"
#include "OAIDescribeAlarmsForMetricOutput.h"
#include "OAIDescribeAlarmsInput.h"
#include "OAIDescribeAlarmsOutput.h"
#include "OAIDescribeAnomalyDetectorsInput.h"
#include "OAIDescribeAnomalyDetectorsOutput.h"
#include "OAIDescribeInsightRulesInput.h"
#include "OAIDescribeInsightRulesOutput.h"
#include "OAIDimension.h"
#include "OAIDimensionFilter.h"
#include "OAIDisableAlarmActionsInput.h"
#include "OAIDisableInsightRulesInput.h"
#include "OAIDisableInsightRulesOutput.h"
#include "OAIEnableAlarmActionsInput.h"
#include "OAIEnableInsightRulesInput.h"
#include "OAIEnableInsightRulesOutput.h"
#include "OAIGET_DeleteAnomalyDetector_MetricMathAnomalyDetector_parameter.h"
#include "OAIGET_DeleteAnomalyDetector_SingleMetricAnomalyDetector_parameter.h"
#include "OAIGET_GetMetricData_LabelOptions_parameter.h"
#include "OAIGET_PutAnomalyDetector_Configuration_parameter.h"
#include "OAIGetDashboardInput.h"
#include "OAIGetDashboardOutput.h"
#include "OAIGetInsightRuleReportInput.h"
#include "OAIGetInsightRuleReportOutput.h"
#include "OAIGetMetricDataInput.h"
#include "OAIGetMetricDataOutput.h"
#include "OAIGetMetricStatisticsInput.h"
#include "OAIGetMetricStatisticsOutput.h"
#include "OAIGetMetricStreamInput.h"
#include "OAIGetMetricStreamOutput.h"
#include "OAIGetMetricWidgetImageInput.h"
#include "OAIGetMetricWidgetImageOutput.h"
#include "OAIListDashboardsInput.h"
#include "OAIListDashboardsOutput.h"
#include "OAIListManagedInsightRulesInput.h"
#include "OAIListManagedInsightRulesOutput.h"
#include "OAIListMetricStreamsInput.h"
#include "OAIListMetricStreamsOutput.h"
#include "OAIListMetricsInput.h"
#include "OAIListMetricsOutput.h"
#include "OAIListTagsForResourceInput.h"
#include "OAIListTagsForResourceOutput.h"
#include "OAIManagedRule.h"
#include "OAIMetricDataQuery.h"
#include "OAIMetricDatum.h"
#include "OAIMetricStreamFilter.h"
#include "OAIMetricStreamStatisticsConfiguration.h"
#include "OAIObject.h"
#include "OAIPutAnomalyDetectorInput.h"
#include "OAIPutCompositeAlarmInput.h"
#include "OAIPutDashboardInput.h"
#include "OAIPutDashboardOutput.h"
#include "OAIPutInsightRuleInput.h"
#include "OAIPutManagedInsightRulesInput.h"
#include "OAIPutManagedInsightRulesOutput.h"
#include "OAIPutMetricAlarmInput.h"
#include "OAIPutMetricDataInput.h"
#include "OAIPutMetricStreamInput.h"
#include "OAIPutMetricStreamOutput.h"
#include "OAISetAlarmStateInput.h"
#include "OAIStartMetricStreamsInput.h"
#include "OAIStatistic.h"
#include "OAIStopMetricStreamsInput.h"
#include "OAITag.h"
#include "OAITagResourceInput.h"
#include "OAIUntagResourceInput.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  alarm_names QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteAlarms(const QList<QString> &alarm_names, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  r_namespace QString [optional]
    * @param[in]  metric_name QString [optional]
    * @param[in]  dimensions QList<OAIDimension> [optional]
    * @param[in]  stat QString [optional]
    * @param[in]  single_metric_anomaly_detector OAIGET_DeleteAnomalyDetector_SingleMetricAnomalyDetector_parameter [optional]
    * @param[in]  metric_math_anomaly_detector OAIGET_DeleteAnomalyDetector_MetricMathAnomalyDetector_parameter [optional]
    */
    virtual void gETDeleteAnomalyDetector(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &r_namespace = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &metric_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIDimension>> &dimensions = ::OpenAPI::OptionalParam<QList<OAIDimension>>(), const ::OpenAPI::OptionalParam<QString> &stat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGET_DeleteAnomalyDetector_SingleMetricAnomalyDetector_parameter> &single_metric_anomaly_detector = ::OpenAPI::OptionalParam<OAIGET_DeleteAnomalyDetector_SingleMetricAnomalyDetector_parameter>(), const ::OpenAPI::OptionalParam<OAIGET_DeleteAnomalyDetector_MetricMathAnomalyDetector_parameter> &metric_math_anomaly_detector = ::OpenAPI::OptionalParam<OAIGET_DeleteAnomalyDetector_MetricMathAnomalyDetector_parameter>());

    /**
    * @param[in]  dashboard_names QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteDashboards(const QList<QString> &dashboard_names, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  rule_names QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteInsightRules(const QList<QString> &rule_names, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteMetricStream(const QString &name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  alarm_name QString [optional]
    * @param[in]  alarm_types QList<OAIAlarmType> [optional]
    * @param[in]  history_item_type QString [optional]
    * @param[in]  start_date QDateTime [optional]
    * @param[in]  end_date QDateTime [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  scan_by QString [optional]
    */
    virtual void gETDescribeAlarmHistory(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alarm_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIAlarmType>> &alarm_types = ::OpenAPI::OptionalParam<QList<OAIAlarmType>>(), const ::OpenAPI::OptionalParam<QString> &history_item_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &scan_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  alarm_names QList<QString> [optional]
    * @param[in]  alarm_name_prefix QString [optional]
    * @param[in]  alarm_types QList<OAIAlarmType> [optional]
    * @param[in]  children_of_alarm_name QString [optional]
    * @param[in]  parents_of_alarm_name QString [optional]
    * @param[in]  state_value QString [optional]
    * @param[in]  action_prefix QString [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void gETDescribeAlarms(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &alarm_names = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &alarm_name_prefix = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIAlarmType>> &alarm_types = ::OpenAPI::OptionalParam<QList<OAIAlarmType>>(), const ::OpenAPI::OptionalParam<QString> &children_of_alarm_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parents_of_alarm_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &action_prefix = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  metric_name QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  statistic QString [optional]
    * @param[in]  extended_statistic QString [optional]
    * @param[in]  dimensions QList<OAIDimension> [optional]
    * @param[in]  period qint32 [optional]
    * @param[in]  unit QString [optional]
    */
    virtual void gETDescribeAlarmsForMetric(const QString &metric_name, const QString &r_namespace, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &statistic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &extended_statistic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIDimension>> &dimensions = ::OpenAPI::OptionalParam<QList<OAIDimension>>(), const ::OpenAPI::OptionalParam<qint32> &period = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &unit = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  r_namespace QString [optional]
    * @param[in]  metric_name QString [optional]
    * @param[in]  dimensions QList<OAIDimension> [optional]
    * @param[in]  anomaly_detector_types QList<OAIAnomalyDetectorType> [optional]
    */
    virtual void gETDescribeAnomalyDetectors(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &r_namespace = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &metric_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIDimension>> &dimensions = ::OpenAPI::OptionalParam<QList<OAIDimension>>(), const ::OpenAPI::OptionalParam<QList<OAIAnomalyDetectorType>> &anomaly_detector_types = ::OpenAPI::OptionalParam<QList<OAIAnomalyDetectorType>>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void gETDescribeInsightRules(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  alarm_names QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDisableAlarmActions(const QList<QString> &alarm_names, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  rule_names QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDisableInsightRules(const QList<QString> &rule_names, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  alarm_names QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETEnableAlarmActions(const QList<QString> &alarm_names, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  rule_names QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETEnableInsightRules(const QList<QString> &rule_names, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  dashboard_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETGetDashboard(const QString &dashboard_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  rule_name QString [required]
    * @param[in]  start_time QDateTime [required]
    * @param[in]  end_time QDateTime [required]
    * @param[in]  period qint32 [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_contributor_count qint32 [optional]
    * @param[in]  metrics QList<QString> [optional]
    * @param[in]  order_by QString [optional]
    */
    virtual void gETGetInsightRuleReport(const QString &rule_name, const QDateTime &start_time, const QDateTime &end_time, const qint32 &period, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_contributor_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &metrics = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  metric_data_queries QList<OAIMetricDataQuery> [required]
    * @param[in]  start_time QDateTime [required]
    * @param[in]  end_time QDateTime [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  scan_by QString [optional]
    * @param[in]  max_datapoints qint32 [optional]
    * @param[in]  label_options OAIGET_GetMetricData_LabelOptions_parameter [optional]
    */
    virtual void gETGetMetricData(const QList<OAIMetricDataQuery> &metric_data_queries, const QDateTime &start_time, const QDateTime &end_time, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &scan_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_datapoints = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIGET_GetMetricData_LabelOptions_parameter> &label_options = ::OpenAPI::OptionalParam<OAIGET_GetMetricData_LabelOptions_parameter>());

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  metric_name QString [required]
    * @param[in]  start_time QDateTime [required]
    * @param[in]  end_time QDateTime [required]
    * @param[in]  period qint32 [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  dimensions QList<OAIDimension> [optional]
    * @param[in]  statistics QList<OAIStatistic> [optional]
    * @param[in]  extended_statistics QList<QString> [optional]
    * @param[in]  unit QString [optional]
    */
    virtual void gETGetMetricStatistics(const QString &r_namespace, const QString &metric_name, const QDateTime &start_time, const QDateTime &end_time, const qint32 &period, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIDimension>> &dimensions = ::OpenAPI::OptionalParam<QList<OAIDimension>>(), const ::OpenAPI::OptionalParam<QList<OAIStatistic>> &statistics = ::OpenAPI::OptionalParam<QList<OAIStatistic>>(), const ::OpenAPI::OptionalParam<QList<QString>> &extended_statistics = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &unit = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETGetMetricStream(const QString &name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  metric_widget QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  output_format QString [optional]
    */
    virtual void gETGetMetricWidgetImage(const QString &metric_widget, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &output_format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  dashboard_name_prefix QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void gETListDashboards(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dashboard_name_prefix = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_arn QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void gETListManagedInsightRules(const QString &resource_arn, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void gETListMetricStreams(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  r_namespace QString [optional]
    * @param[in]  metric_name QString [optional]
    * @param[in]  dimensions QList<OAIDimensionFilter> [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  recently_active QString [optional]
    * @param[in]  include_linked_accounts bool [optional]
    * @param[in]  owning_account QString [optional]
    */
    virtual void gETListMetrics(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &r_namespace = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &metric_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIDimensionFilter>> &dimensions = ::OpenAPI::OptionalParam<QList<OAIDimensionFilter>>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recently_active = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_linked_accounts = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &owning_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_arn QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETListTagsForResource(const QString &resource_arn, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  r_namespace QString [optional]
    * @param[in]  metric_name QString [optional]
    * @param[in]  dimensions QList<OAIDimension> [optional]
    * @param[in]  stat QString [optional]
    * @param[in]  configuration OAIGET_PutAnomalyDetector_Configuration_parameter [optional]
    * @param[in]  single_metric_anomaly_detector OAIGET_DeleteAnomalyDetector_SingleMetricAnomalyDetector_parameter [optional]
    * @param[in]  metric_math_anomaly_detector OAIGET_DeleteAnomalyDetector_MetricMathAnomalyDetector_parameter [optional]
    */
    virtual void gETPutAnomalyDetector(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &r_namespace = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &metric_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIDimension>> &dimensions = ::OpenAPI::OptionalParam<QList<OAIDimension>>(), const ::OpenAPI::OptionalParam<QString> &stat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGET_PutAnomalyDetector_Configuration_parameter> &configuration = ::OpenAPI::OptionalParam<OAIGET_PutAnomalyDetector_Configuration_parameter>(), const ::OpenAPI::OptionalParam<OAIGET_DeleteAnomalyDetector_SingleMetricAnomalyDetector_parameter> &single_metric_anomaly_detector = ::OpenAPI::OptionalParam<OAIGET_DeleteAnomalyDetector_SingleMetricAnomalyDetector_parameter>(), const ::OpenAPI::OptionalParam<OAIGET_DeleteAnomalyDetector_MetricMathAnomalyDetector_parameter> &metric_math_anomaly_detector = ::OpenAPI::OptionalParam<OAIGET_DeleteAnomalyDetector_MetricMathAnomalyDetector_parameter>());

    /**
    * @param[in]  alarm_name QString [required]
    * @param[in]  alarm_rule QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  actions_enabled bool [optional]
    * @param[in]  alarm_actions QList<QString> [optional]
    * @param[in]  alarm_description QString [optional]
    * @param[in]  insufficient_data_actions QList<QString> [optional]
    * @param[in]  ok_actions QList<QString> [optional]
    * @param[in]  tags QList<OAITag> [optional]
    * @param[in]  actions_suppressor QString [optional]
    * @param[in]  actions_suppressor_wait_period qint32 [optional]
    * @param[in]  actions_suppressor_extension_period qint32 [optional]
    */
    virtual void gETPutCompositeAlarm(const QString &alarm_name, const QString &alarm_rule, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &actions_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &alarm_actions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &alarm_description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &insufficient_data_actions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &ok_actions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<OAITag>> &tags = ::OpenAPI::OptionalParam<QList<OAITag>>(), const ::OpenAPI::OptionalParam<QString> &actions_suppressor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &actions_suppressor_wait_period = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &actions_suppressor_extension_period = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  dashboard_name QString [required]
    * @param[in]  dashboard_body QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETPutDashboard(const QString &dashboard_name, const QString &dashboard_body, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  rule_name QString [required]
    * @param[in]  rule_definition QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  rule_state QString [optional]
    * @param[in]  tags QList<OAITag> [optional]
    */
    virtual void gETPutInsightRule(const QString &rule_name, const QString &rule_definition, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rule_state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAITag>> &tags = ::OpenAPI::OptionalParam<QList<OAITag>>());

    /**
    * @param[in]  managed_rules QList<OAIManagedRule> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETPutManagedInsightRules(const QList<OAIManagedRule> &managed_rules, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  alarm_name QString [required]
    * @param[in]  evaluation_periods qint32 [required]
    * @param[in]  comparison_operator QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  alarm_description QString [optional]
    * @param[in]  actions_enabled bool [optional]
    * @param[in]  ok_actions QList<QString> [optional]
    * @param[in]  alarm_actions QList<QString> [optional]
    * @param[in]  insufficient_data_actions QList<QString> [optional]
    * @param[in]  metric_name QString [optional]
    * @param[in]  r_namespace QString [optional]
    * @param[in]  statistic QString [optional]
    * @param[in]  extended_statistic QString [optional]
    * @param[in]  dimensions QList<OAIDimension> [optional]
    * @param[in]  period qint32 [optional]
    * @param[in]  unit QString [optional]
    * @param[in]  datapoints_to_alarm qint32 [optional]
    * @param[in]  threshold double [optional]
    * @param[in]  treat_missing_data QString [optional]
    * @param[in]  evaluate_low_sample_count_percentile QString [optional]
    * @param[in]  metrics QList<OAIMetricDataQuery> [optional]
    * @param[in]  tags QList<OAITag> [optional]
    * @param[in]  threshold_metric_id QString [optional]
    */
    virtual void gETPutMetricAlarm(const QString &alarm_name, const qint32 &evaluation_periods, const QString &comparison_operator, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alarm_description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &actions_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &ok_actions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &alarm_actions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &insufficient_data_actions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &metric_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &r_namespace = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &statistic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &extended_statistic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIDimension>> &dimensions = ::OpenAPI::OptionalParam<QList<OAIDimension>>(), const ::OpenAPI::OptionalParam<qint32> &period = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &unit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &datapoints_to_alarm = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &threshold = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &treat_missing_data = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &evaluate_low_sample_count_percentile = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIMetricDataQuery>> &metrics = ::OpenAPI::OptionalParam<QList<OAIMetricDataQuery>>(), const ::OpenAPI::OptionalParam<QList<OAITag>> &tags = ::OpenAPI::OptionalParam<QList<OAITag>>(), const ::OpenAPI::OptionalParam<QString> &threshold_metric_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  metric_data QList<OAIMetricDatum> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETPutMetricData(const QString &r_namespace, const QList<OAIMetricDatum> &metric_data, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  firehose_arn QString [required]
    * @param[in]  role_arn QString [required]
    * @param[in]  output_format QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  include_filters QList<OAIMetricStreamFilter> [optional]
    * @param[in]  exclude_filters QList<OAIMetricStreamFilter> [optional]
    * @param[in]  tags QList<OAITag> [optional]
    * @param[in]  statistics_configurations QList<OAIMetricStreamStatisticsConfiguration> [optional]
    * @param[in]  include_linked_accounts_metrics bool [optional]
    */
    virtual void gETPutMetricStream(const QString &name, const QString &firehose_arn, const QString &role_arn, const QString &output_format, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIMetricStreamFilter>> &include_filters = ::OpenAPI::OptionalParam<QList<OAIMetricStreamFilter>>(), const ::OpenAPI::OptionalParam<QList<OAIMetricStreamFilter>> &exclude_filters = ::OpenAPI::OptionalParam<QList<OAIMetricStreamFilter>>(), const ::OpenAPI::OptionalParam<QList<OAITag>> &tags = ::OpenAPI::OptionalParam<QList<OAITag>>(), const ::OpenAPI::OptionalParam<QList<OAIMetricStreamStatisticsConfiguration>> &statistics_configurations = ::OpenAPI::OptionalParam<QList<OAIMetricStreamStatisticsConfiguration>>(), const ::OpenAPI::OptionalParam<bool> &include_linked_accounts_metrics = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  alarm_name QString [required]
    * @param[in]  state_value QString [required]
    * @param[in]  state_reason QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  state_reason_data QString [optional]
    */
    virtual void gETSetAlarmState(const QString &alarm_name, const QString &state_value, const QString &state_reason, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state_reason_data = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  names QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETStartMetricStreams(const QList<QString> &names, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  names QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETStopMetricStreams(const QList<QString> &names, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_arn QString [required]
    * @param[in]  tags QList<OAITag> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETTagResource(const QString &resource_arn, const QList<OAITag> &tags, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_arn QString [required]
    * @param[in]  tag_keys QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETUntagResource(const QString &resource_arn, const QList<QString> &tag_keys, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_alarms_input OAIDeleteAlarmsInput [optional]
    */
    virtual void pOSTDeleteAlarms(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteAlarmsInput> &oai_delete_alarms_input = ::OpenAPI::OptionalParam<OAIDeleteAlarmsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_anomaly_detector_input OAIDeleteAnomalyDetectorInput [optional]
    */
    virtual void pOSTDeleteAnomalyDetector(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteAnomalyDetectorInput> &oai_delete_anomaly_detector_input = ::OpenAPI::OptionalParam<OAIDeleteAnomalyDetectorInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_dashboards_input OAIDeleteDashboardsInput [optional]
    */
    virtual void pOSTDeleteDashboards(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteDashboardsInput> &oai_delete_dashboards_input = ::OpenAPI::OptionalParam<OAIDeleteDashboardsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_insight_rules_input OAIDeleteInsightRulesInput [optional]
    */
    virtual void pOSTDeleteInsightRules(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteInsightRulesInput> &oai_delete_insight_rules_input = ::OpenAPI::OptionalParam<OAIDeleteInsightRulesInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_metric_stream_input OAIDeleteMetricStreamInput [optional]
    */
    virtual void pOSTDeleteMetricStream(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteMetricStreamInput> &oai_delete_metric_stream_input = ::OpenAPI::OptionalParam<OAIDeleteMetricStreamInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_describe_alarm_history_input OAIDescribeAlarmHistoryInput [optional]
    */
    virtual void pOSTDescribeAlarmHistory(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeAlarmHistoryInput> &oai_describe_alarm_history_input = ::OpenAPI::OptionalParam<OAIDescribeAlarmHistoryInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_describe_alarms_input OAIDescribeAlarmsInput [optional]
    */
    virtual void pOSTDescribeAlarms(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeAlarmsInput> &oai_describe_alarms_input = ::OpenAPI::OptionalParam<OAIDescribeAlarmsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_alarms_for_metric_input OAIDescribeAlarmsForMetricInput [optional]
    */
    virtual void pOSTDescribeAlarmsForMetric(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeAlarmsForMetricInput> &oai_describe_alarms_for_metric_input = ::OpenAPI::OptionalParam<OAIDescribeAlarmsForMetricInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_describe_anomaly_detectors_input OAIDescribeAnomalyDetectorsInput [optional]
    */
    virtual void pOSTDescribeAnomalyDetectors(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeAnomalyDetectorsInput> &oai_describe_anomaly_detectors_input = ::OpenAPI::OptionalParam<OAIDescribeAnomalyDetectorsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_describe_insight_rules_input OAIDescribeInsightRulesInput [optional]
    */
    virtual void pOSTDescribeInsightRules(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeInsightRulesInput> &oai_describe_insight_rules_input = ::OpenAPI::OptionalParam<OAIDescribeInsightRulesInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_disable_alarm_actions_input OAIDisableAlarmActionsInput [optional]
    */
    virtual void pOSTDisableAlarmActions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDisableAlarmActionsInput> &oai_disable_alarm_actions_input = ::OpenAPI::OptionalParam<OAIDisableAlarmActionsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_disable_insight_rules_input OAIDisableInsightRulesInput [optional]
    */
    virtual void pOSTDisableInsightRules(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDisableInsightRulesInput> &oai_disable_insight_rules_input = ::OpenAPI::OptionalParam<OAIDisableInsightRulesInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_enable_alarm_actions_input OAIEnableAlarmActionsInput [optional]
    */
    virtual void pOSTEnableAlarmActions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIEnableAlarmActionsInput> &oai_enable_alarm_actions_input = ::OpenAPI::OptionalParam<OAIEnableAlarmActionsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_enable_insight_rules_input OAIEnableInsightRulesInput [optional]
    */
    virtual void pOSTEnableInsightRules(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIEnableInsightRulesInput> &oai_enable_insight_rules_input = ::OpenAPI::OptionalParam<OAIEnableInsightRulesInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_get_dashboard_input OAIGetDashboardInput [optional]
    */
    virtual void pOSTGetDashboard(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGetDashboardInput> &oai_get_dashboard_input = ::OpenAPI::OptionalParam<OAIGetDashboardInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_get_insight_rule_report_input OAIGetInsightRuleReportInput [optional]
    */
    virtual void pOSTGetInsightRuleReport(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGetInsightRuleReportInput> &oai_get_insight_rule_report_input = ::OpenAPI::OptionalParam<OAIGetInsightRuleReportInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_datapoints QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_get_metric_data_input OAIGetMetricDataInput [optional]
    */
    virtual void pOSTGetMetricData(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_datapoints = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGetMetricDataInput> &oai_get_metric_data_input = ::OpenAPI::OptionalParam<OAIGetMetricDataInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_get_metric_statistics_input OAIGetMetricStatisticsInput [optional]
    */
    virtual void pOSTGetMetricStatistics(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGetMetricStatisticsInput> &oai_get_metric_statistics_input = ::OpenAPI::OptionalParam<OAIGetMetricStatisticsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_get_metric_stream_input OAIGetMetricStreamInput [optional]
    */
    virtual void pOSTGetMetricStream(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGetMetricStreamInput> &oai_get_metric_stream_input = ::OpenAPI::OptionalParam<OAIGetMetricStreamInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_get_metric_widget_image_input OAIGetMetricWidgetImageInput [optional]
    */
    virtual void pOSTGetMetricWidgetImage(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGetMetricWidgetImageInput> &oai_get_metric_widget_image_input = ::OpenAPI::OptionalParam<OAIGetMetricWidgetImageInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_list_dashboards_input OAIListDashboardsInput [optional]
    */
    virtual void pOSTListDashboards(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIListDashboardsInput> &oai_list_dashboards_input = ::OpenAPI::OptionalParam<OAIListDashboardsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_list_managed_insight_rules_input OAIListManagedInsightRulesInput [optional]
    */
    virtual void pOSTListManagedInsightRules(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIListManagedInsightRulesInput> &oai_list_managed_insight_rules_input = ::OpenAPI::OptionalParam<OAIListManagedInsightRulesInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_list_metric_streams_input OAIListMetricStreamsInput [optional]
    */
    virtual void pOSTListMetricStreams(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIListMetricStreamsInput> &oai_list_metric_streams_input = ::OpenAPI::OptionalParam<OAIListMetricStreamsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_list_metrics_input OAIListMetricsInput [optional]
    */
    virtual void pOSTListMetrics(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIListMetricsInput> &oai_list_metrics_input = ::OpenAPI::OptionalParam<OAIListMetricsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_list_tags_for_resource_input OAIListTagsForResourceInput [optional]
    */
    virtual void pOSTListTagsForResource(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIListTagsForResourceInput> &oai_list_tags_for_resource_input = ::OpenAPI::OptionalParam<OAIListTagsForResourceInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_put_anomaly_detector_input OAIPutAnomalyDetectorInput [optional]
    */
    virtual void pOSTPutAnomalyDetector(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPutAnomalyDetectorInput> &oai_put_anomaly_detector_input = ::OpenAPI::OptionalParam<OAIPutAnomalyDetectorInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_put_composite_alarm_input OAIPutCompositeAlarmInput [optional]
    */
    virtual void pOSTPutCompositeAlarm(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPutCompositeAlarmInput> &oai_put_composite_alarm_input = ::OpenAPI::OptionalParam<OAIPutCompositeAlarmInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_put_dashboard_input OAIPutDashboardInput [optional]
    */
    virtual void pOSTPutDashboard(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPutDashboardInput> &oai_put_dashboard_input = ::OpenAPI::OptionalParam<OAIPutDashboardInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_put_insight_rule_input OAIPutInsightRuleInput [optional]
    */
    virtual void pOSTPutInsightRule(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPutInsightRuleInput> &oai_put_insight_rule_input = ::OpenAPI::OptionalParam<OAIPutInsightRuleInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_put_managed_insight_rules_input OAIPutManagedInsightRulesInput [optional]
    */
    virtual void pOSTPutManagedInsightRules(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPutManagedInsightRulesInput> &oai_put_managed_insight_rules_input = ::OpenAPI::OptionalParam<OAIPutManagedInsightRulesInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_put_metric_alarm_input OAIPutMetricAlarmInput [optional]
    */
    virtual void pOSTPutMetricAlarm(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPutMetricAlarmInput> &oai_put_metric_alarm_input = ::OpenAPI::OptionalParam<OAIPutMetricAlarmInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_put_metric_data_input OAIPutMetricDataInput [optional]
    */
    virtual void pOSTPutMetricData(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPutMetricDataInput> &oai_put_metric_data_input = ::OpenAPI::OptionalParam<OAIPutMetricDataInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_put_metric_stream_input OAIPutMetricStreamInput [optional]
    */
    virtual void pOSTPutMetricStream(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPutMetricStreamInput> &oai_put_metric_stream_input = ::OpenAPI::OptionalParam<OAIPutMetricStreamInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_set_alarm_state_input OAISetAlarmStateInput [optional]
    */
    virtual void pOSTSetAlarmState(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetAlarmStateInput> &oai_set_alarm_state_input = ::OpenAPI::OptionalParam<OAISetAlarmStateInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_start_metric_streams_input OAIStartMetricStreamsInput [optional]
    */
    virtual void pOSTStartMetricStreams(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIStartMetricStreamsInput> &oai_start_metric_streams_input = ::OpenAPI::OptionalParam<OAIStartMetricStreamsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_stop_metric_streams_input OAIStopMetricStreamsInput [optional]
    */
    virtual void pOSTStopMetricStreams(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIStopMetricStreamsInput> &oai_stop_metric_streams_input = ::OpenAPI::OptionalParam<OAIStopMetricStreamsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_tag_resource_input OAITagResourceInput [optional]
    */
    virtual void pOSTTagResource(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAITagResourceInput> &oai_tag_resource_input = ::OpenAPI::OptionalParam<OAITagResourceInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_untag_resource_input OAIUntagResourceInput [optional]
    */
    virtual void pOSTUntagResource(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUntagResourceInput> &oai_untag_resource_input = ::OpenAPI::OptionalParam<OAIUntagResourceInput>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void gETDeleteAlarmsCallback(OAIHttpRequestWorker *worker);
    void gETDeleteAnomalyDetectorCallback(OAIHttpRequestWorker *worker);
    void gETDeleteDashboardsCallback(OAIHttpRequestWorker *worker);
    void gETDeleteInsightRulesCallback(OAIHttpRequestWorker *worker);
    void gETDeleteMetricStreamCallback(OAIHttpRequestWorker *worker);
    void gETDescribeAlarmHistoryCallback(OAIHttpRequestWorker *worker);
    void gETDescribeAlarmsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeAlarmsForMetricCallback(OAIHttpRequestWorker *worker);
    void gETDescribeAnomalyDetectorsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeInsightRulesCallback(OAIHttpRequestWorker *worker);
    void gETDisableAlarmActionsCallback(OAIHttpRequestWorker *worker);
    void gETDisableInsightRulesCallback(OAIHttpRequestWorker *worker);
    void gETEnableAlarmActionsCallback(OAIHttpRequestWorker *worker);
    void gETEnableInsightRulesCallback(OAIHttpRequestWorker *worker);
    void gETGetDashboardCallback(OAIHttpRequestWorker *worker);
    void gETGetInsightRuleReportCallback(OAIHttpRequestWorker *worker);
    void gETGetMetricDataCallback(OAIHttpRequestWorker *worker);
    void gETGetMetricStatisticsCallback(OAIHttpRequestWorker *worker);
    void gETGetMetricStreamCallback(OAIHttpRequestWorker *worker);
    void gETGetMetricWidgetImageCallback(OAIHttpRequestWorker *worker);
    void gETListDashboardsCallback(OAIHttpRequestWorker *worker);
    void gETListManagedInsightRulesCallback(OAIHttpRequestWorker *worker);
    void gETListMetricStreamsCallback(OAIHttpRequestWorker *worker);
    void gETListMetricsCallback(OAIHttpRequestWorker *worker);
    void gETListTagsForResourceCallback(OAIHttpRequestWorker *worker);
    void gETPutAnomalyDetectorCallback(OAIHttpRequestWorker *worker);
    void gETPutCompositeAlarmCallback(OAIHttpRequestWorker *worker);
    void gETPutDashboardCallback(OAIHttpRequestWorker *worker);
    void gETPutInsightRuleCallback(OAIHttpRequestWorker *worker);
    void gETPutManagedInsightRulesCallback(OAIHttpRequestWorker *worker);
    void gETPutMetricAlarmCallback(OAIHttpRequestWorker *worker);
    void gETPutMetricDataCallback(OAIHttpRequestWorker *worker);
    void gETPutMetricStreamCallback(OAIHttpRequestWorker *worker);
    void gETSetAlarmStateCallback(OAIHttpRequestWorker *worker);
    void gETStartMetricStreamsCallback(OAIHttpRequestWorker *worker);
    void gETStopMetricStreamsCallback(OAIHttpRequestWorker *worker);
    void gETTagResourceCallback(OAIHttpRequestWorker *worker);
    void gETUntagResourceCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteAlarmsCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteAnomalyDetectorCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteDashboardsCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteInsightRulesCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteMetricStreamCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeAlarmHistoryCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeAlarmsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeAlarmsForMetricCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeAnomalyDetectorsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeInsightRulesCallback(OAIHttpRequestWorker *worker);
    void pOSTDisableAlarmActionsCallback(OAIHttpRequestWorker *worker);
    void pOSTDisableInsightRulesCallback(OAIHttpRequestWorker *worker);
    void pOSTEnableAlarmActionsCallback(OAIHttpRequestWorker *worker);
    void pOSTEnableInsightRulesCallback(OAIHttpRequestWorker *worker);
    void pOSTGetDashboardCallback(OAIHttpRequestWorker *worker);
    void pOSTGetInsightRuleReportCallback(OAIHttpRequestWorker *worker);
    void pOSTGetMetricDataCallback(OAIHttpRequestWorker *worker);
    void pOSTGetMetricStatisticsCallback(OAIHttpRequestWorker *worker);
    void pOSTGetMetricStreamCallback(OAIHttpRequestWorker *worker);
    void pOSTGetMetricWidgetImageCallback(OAIHttpRequestWorker *worker);
    void pOSTListDashboardsCallback(OAIHttpRequestWorker *worker);
    void pOSTListManagedInsightRulesCallback(OAIHttpRequestWorker *worker);
    void pOSTListMetricStreamsCallback(OAIHttpRequestWorker *worker);
    void pOSTListMetricsCallback(OAIHttpRequestWorker *worker);
    void pOSTListTagsForResourceCallback(OAIHttpRequestWorker *worker);
    void pOSTPutAnomalyDetectorCallback(OAIHttpRequestWorker *worker);
    void pOSTPutCompositeAlarmCallback(OAIHttpRequestWorker *worker);
    void pOSTPutDashboardCallback(OAIHttpRequestWorker *worker);
    void pOSTPutInsightRuleCallback(OAIHttpRequestWorker *worker);
    void pOSTPutManagedInsightRulesCallback(OAIHttpRequestWorker *worker);
    void pOSTPutMetricAlarmCallback(OAIHttpRequestWorker *worker);
    void pOSTPutMetricDataCallback(OAIHttpRequestWorker *worker);
    void pOSTPutMetricStreamCallback(OAIHttpRequestWorker *worker);
    void pOSTSetAlarmStateCallback(OAIHttpRequestWorker *worker);
    void pOSTStartMetricStreamsCallback(OAIHttpRequestWorker *worker);
    void pOSTStopMetricStreamsCallback(OAIHttpRequestWorker *worker);
    void pOSTTagResourceCallback(OAIHttpRequestWorker *worker);
    void pOSTUntagResourceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void gETDeleteAlarmsSignal();
    void gETDeleteAnomalyDetectorSignal(OAIObject summary);
    void gETDeleteDashboardsSignal(OAIObject summary);
    void gETDeleteInsightRulesSignal(OAIDeleteInsightRulesOutput summary);
    void gETDeleteMetricStreamSignal(OAIObject summary);
    void gETDescribeAlarmHistorySignal(OAIDescribeAlarmHistoryOutput summary);
    void gETDescribeAlarmsSignal(OAIDescribeAlarmsOutput summary);
    void gETDescribeAlarmsForMetricSignal(OAIDescribeAlarmsForMetricOutput summary);
    void gETDescribeAnomalyDetectorsSignal(OAIDescribeAnomalyDetectorsOutput summary);
    void gETDescribeInsightRulesSignal(OAIDescribeInsightRulesOutput summary);
    void gETDisableAlarmActionsSignal();
    void gETDisableInsightRulesSignal(OAIDisableInsightRulesOutput summary);
    void gETEnableAlarmActionsSignal();
    void gETEnableInsightRulesSignal(OAIEnableInsightRulesOutput summary);
    void gETGetDashboardSignal(OAIGetDashboardOutput summary);
    void gETGetInsightRuleReportSignal(OAIGetInsightRuleReportOutput summary);
    void gETGetMetricDataSignal(OAIGetMetricDataOutput summary);
    void gETGetMetricStatisticsSignal(OAIGetMetricStatisticsOutput summary);
    void gETGetMetricStreamSignal(OAIGetMetricStreamOutput summary);
    void gETGetMetricWidgetImageSignal(OAIGetMetricWidgetImageOutput summary);
    void gETListDashboardsSignal(OAIListDashboardsOutput summary);
    void gETListManagedInsightRulesSignal(OAIListManagedInsightRulesOutput summary);
    void gETListMetricStreamsSignal(OAIListMetricStreamsOutput summary);
    void gETListMetricsSignal(OAIListMetricsOutput summary);
    void gETListTagsForResourceSignal(OAIListTagsForResourceOutput summary);
    void gETPutAnomalyDetectorSignal(OAIObject summary);
    void gETPutCompositeAlarmSignal();
    void gETPutDashboardSignal(OAIPutDashboardOutput summary);
    void gETPutInsightRuleSignal(OAIObject summary);
    void gETPutManagedInsightRulesSignal(OAIPutManagedInsightRulesOutput summary);
    void gETPutMetricAlarmSignal();
    void gETPutMetricDataSignal();
    void gETPutMetricStreamSignal(OAIPutMetricStreamOutput summary);
    void gETSetAlarmStateSignal();
    void gETStartMetricStreamsSignal(OAIObject summary);
    void gETStopMetricStreamsSignal(OAIObject summary);
    void gETTagResourceSignal(OAIObject summary);
    void gETUntagResourceSignal(OAIObject summary);
    void pOSTDeleteAlarmsSignal();
    void pOSTDeleteAnomalyDetectorSignal(OAIObject summary);
    void pOSTDeleteDashboardsSignal(OAIObject summary);
    void pOSTDeleteInsightRulesSignal(OAIDeleteInsightRulesOutput summary);
    void pOSTDeleteMetricStreamSignal(OAIObject summary);
    void pOSTDescribeAlarmHistorySignal(OAIDescribeAlarmHistoryOutput summary);
    void pOSTDescribeAlarmsSignal(OAIDescribeAlarmsOutput summary);
    void pOSTDescribeAlarmsForMetricSignal(OAIDescribeAlarmsForMetricOutput summary);
    void pOSTDescribeAnomalyDetectorsSignal(OAIDescribeAnomalyDetectorsOutput summary);
    void pOSTDescribeInsightRulesSignal(OAIDescribeInsightRulesOutput summary);
    void pOSTDisableAlarmActionsSignal();
    void pOSTDisableInsightRulesSignal(OAIDisableInsightRulesOutput summary);
    void pOSTEnableAlarmActionsSignal();
    void pOSTEnableInsightRulesSignal(OAIEnableInsightRulesOutput summary);
    void pOSTGetDashboardSignal(OAIGetDashboardOutput summary);
    void pOSTGetInsightRuleReportSignal(OAIGetInsightRuleReportOutput summary);
    void pOSTGetMetricDataSignal(OAIGetMetricDataOutput summary);
    void pOSTGetMetricStatisticsSignal(OAIGetMetricStatisticsOutput summary);
    void pOSTGetMetricStreamSignal(OAIGetMetricStreamOutput summary);
    void pOSTGetMetricWidgetImageSignal(OAIGetMetricWidgetImageOutput summary);
    void pOSTListDashboardsSignal(OAIListDashboardsOutput summary);
    void pOSTListManagedInsightRulesSignal(OAIListManagedInsightRulesOutput summary);
    void pOSTListMetricStreamsSignal(OAIListMetricStreamsOutput summary);
    void pOSTListMetricsSignal(OAIListMetricsOutput summary);
    void pOSTListTagsForResourceSignal(OAIListTagsForResourceOutput summary);
    void pOSTPutAnomalyDetectorSignal(OAIObject summary);
    void pOSTPutCompositeAlarmSignal();
    void pOSTPutDashboardSignal(OAIPutDashboardOutput summary);
    void pOSTPutInsightRuleSignal(OAIObject summary);
    void pOSTPutManagedInsightRulesSignal(OAIPutManagedInsightRulesOutput summary);
    void pOSTPutMetricAlarmSignal();
    void pOSTPutMetricDataSignal();
    void pOSTPutMetricStreamSignal(OAIPutMetricStreamOutput summary);
    void pOSTSetAlarmStateSignal();
    void pOSTStartMetricStreamsSignal(OAIObject summary);
    void pOSTStopMetricStreamsSignal(OAIObject summary);
    void pOSTTagResourceSignal(OAIObject summary);
    void pOSTUntagResourceSignal(OAIObject summary);


    void gETDeleteAlarmsSignalFull(OAIHttpRequestWorker *worker);
    void gETDeleteAnomalyDetectorSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETDeleteDashboardsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETDeleteInsightRulesSignalFull(OAIHttpRequestWorker *worker, OAIDeleteInsightRulesOutput summary);
    void gETDeleteMetricStreamSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETDescribeAlarmHistorySignalFull(OAIHttpRequestWorker *worker, OAIDescribeAlarmHistoryOutput summary);
    void gETDescribeAlarmsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAlarmsOutput summary);
    void gETDescribeAlarmsForMetricSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAlarmsForMetricOutput summary);
    void gETDescribeAnomalyDetectorsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAnomalyDetectorsOutput summary);
    void gETDescribeInsightRulesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeInsightRulesOutput summary);
    void gETDisableAlarmActionsSignalFull(OAIHttpRequestWorker *worker);
    void gETDisableInsightRulesSignalFull(OAIHttpRequestWorker *worker, OAIDisableInsightRulesOutput summary);
    void gETEnableAlarmActionsSignalFull(OAIHttpRequestWorker *worker);
    void gETEnableInsightRulesSignalFull(OAIHttpRequestWorker *worker, OAIEnableInsightRulesOutput summary);
    void gETGetDashboardSignalFull(OAIHttpRequestWorker *worker, OAIGetDashboardOutput summary);
    void gETGetInsightRuleReportSignalFull(OAIHttpRequestWorker *worker, OAIGetInsightRuleReportOutput summary);
    void gETGetMetricDataSignalFull(OAIHttpRequestWorker *worker, OAIGetMetricDataOutput summary);
    void gETGetMetricStatisticsSignalFull(OAIHttpRequestWorker *worker, OAIGetMetricStatisticsOutput summary);
    void gETGetMetricStreamSignalFull(OAIHttpRequestWorker *worker, OAIGetMetricStreamOutput summary);
    void gETGetMetricWidgetImageSignalFull(OAIHttpRequestWorker *worker, OAIGetMetricWidgetImageOutput summary);
    void gETListDashboardsSignalFull(OAIHttpRequestWorker *worker, OAIListDashboardsOutput summary);
    void gETListManagedInsightRulesSignalFull(OAIHttpRequestWorker *worker, OAIListManagedInsightRulesOutput summary);
    void gETListMetricStreamsSignalFull(OAIHttpRequestWorker *worker, OAIListMetricStreamsOutput summary);
    void gETListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIListMetricsOutput summary);
    void gETListTagsForResourceSignalFull(OAIHttpRequestWorker *worker, OAIListTagsForResourceOutput summary);
    void gETPutAnomalyDetectorSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETPutCompositeAlarmSignalFull(OAIHttpRequestWorker *worker);
    void gETPutDashboardSignalFull(OAIHttpRequestWorker *worker, OAIPutDashboardOutput summary);
    void gETPutInsightRuleSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETPutManagedInsightRulesSignalFull(OAIHttpRequestWorker *worker, OAIPutManagedInsightRulesOutput summary);
    void gETPutMetricAlarmSignalFull(OAIHttpRequestWorker *worker);
    void gETPutMetricDataSignalFull(OAIHttpRequestWorker *worker);
    void gETPutMetricStreamSignalFull(OAIHttpRequestWorker *worker, OAIPutMetricStreamOutput summary);
    void gETSetAlarmStateSignalFull(OAIHttpRequestWorker *worker);
    void gETStartMetricStreamsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETStopMetricStreamsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETTagResourceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETUntagResourceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTDeleteAlarmsSignalFull(OAIHttpRequestWorker *worker);
    void pOSTDeleteAnomalyDetectorSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTDeleteDashboardsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTDeleteInsightRulesSignalFull(OAIHttpRequestWorker *worker, OAIDeleteInsightRulesOutput summary);
    void pOSTDeleteMetricStreamSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTDescribeAlarmHistorySignalFull(OAIHttpRequestWorker *worker, OAIDescribeAlarmHistoryOutput summary);
    void pOSTDescribeAlarmsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAlarmsOutput summary);
    void pOSTDescribeAlarmsForMetricSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAlarmsForMetricOutput summary);
    void pOSTDescribeAnomalyDetectorsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAnomalyDetectorsOutput summary);
    void pOSTDescribeInsightRulesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeInsightRulesOutput summary);
    void pOSTDisableAlarmActionsSignalFull(OAIHttpRequestWorker *worker);
    void pOSTDisableInsightRulesSignalFull(OAIHttpRequestWorker *worker, OAIDisableInsightRulesOutput summary);
    void pOSTEnableAlarmActionsSignalFull(OAIHttpRequestWorker *worker);
    void pOSTEnableInsightRulesSignalFull(OAIHttpRequestWorker *worker, OAIEnableInsightRulesOutput summary);
    void pOSTGetDashboardSignalFull(OAIHttpRequestWorker *worker, OAIGetDashboardOutput summary);
    void pOSTGetInsightRuleReportSignalFull(OAIHttpRequestWorker *worker, OAIGetInsightRuleReportOutput summary);
    void pOSTGetMetricDataSignalFull(OAIHttpRequestWorker *worker, OAIGetMetricDataOutput summary);
    void pOSTGetMetricStatisticsSignalFull(OAIHttpRequestWorker *worker, OAIGetMetricStatisticsOutput summary);
    void pOSTGetMetricStreamSignalFull(OAIHttpRequestWorker *worker, OAIGetMetricStreamOutput summary);
    void pOSTGetMetricWidgetImageSignalFull(OAIHttpRequestWorker *worker, OAIGetMetricWidgetImageOutput summary);
    void pOSTListDashboardsSignalFull(OAIHttpRequestWorker *worker, OAIListDashboardsOutput summary);
    void pOSTListManagedInsightRulesSignalFull(OAIHttpRequestWorker *worker, OAIListManagedInsightRulesOutput summary);
    void pOSTListMetricStreamsSignalFull(OAIHttpRequestWorker *worker, OAIListMetricStreamsOutput summary);
    void pOSTListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIListMetricsOutput summary);
    void pOSTListTagsForResourceSignalFull(OAIHttpRequestWorker *worker, OAIListTagsForResourceOutput summary);
    void pOSTPutAnomalyDetectorSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTPutCompositeAlarmSignalFull(OAIHttpRequestWorker *worker);
    void pOSTPutDashboardSignalFull(OAIHttpRequestWorker *worker, OAIPutDashboardOutput summary);
    void pOSTPutInsightRuleSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTPutManagedInsightRulesSignalFull(OAIHttpRequestWorker *worker, OAIPutManagedInsightRulesOutput summary);
    void pOSTPutMetricAlarmSignalFull(OAIHttpRequestWorker *worker);
    void pOSTPutMetricDataSignalFull(OAIHttpRequestWorker *worker);
    void pOSTPutMetricStreamSignalFull(OAIHttpRequestWorker *worker, OAIPutMetricStreamOutput summary);
    void pOSTSetAlarmStateSignalFull(OAIHttpRequestWorker *worker);
    void pOSTStartMetricStreamsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTStopMetricStreamsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTTagResourceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTUntagResourceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use gETDeleteAlarmsSignalError() instead")
    void gETDeleteAlarmsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteAlarmsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteAnomalyDetectorSignalError() instead")
    void gETDeleteAnomalyDetectorSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteAnomalyDetectorSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteDashboardsSignalError() instead")
    void gETDeleteDashboardsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteDashboardsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteInsightRulesSignalError() instead")
    void gETDeleteInsightRulesSignalE(OAIDeleteInsightRulesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteInsightRulesSignalError(OAIDeleteInsightRulesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteMetricStreamSignalError() instead")
    void gETDeleteMetricStreamSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteMetricStreamSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeAlarmHistorySignalError() instead")
    void gETDescribeAlarmHistorySignalE(OAIDescribeAlarmHistoryOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeAlarmHistorySignalError(OAIDescribeAlarmHistoryOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeAlarmsSignalError() instead")
    void gETDescribeAlarmsSignalE(OAIDescribeAlarmsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeAlarmsSignalError(OAIDescribeAlarmsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeAlarmsForMetricSignalError() instead")
    void gETDescribeAlarmsForMetricSignalE(OAIDescribeAlarmsForMetricOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeAlarmsForMetricSignalError(OAIDescribeAlarmsForMetricOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeAnomalyDetectorsSignalError() instead")
    void gETDescribeAnomalyDetectorsSignalE(OAIDescribeAnomalyDetectorsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeAnomalyDetectorsSignalError(OAIDescribeAnomalyDetectorsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeInsightRulesSignalError() instead")
    void gETDescribeInsightRulesSignalE(OAIDescribeInsightRulesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeInsightRulesSignalError(OAIDescribeInsightRulesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDisableAlarmActionsSignalError() instead")
    void gETDisableAlarmActionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETDisableAlarmActionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDisableInsightRulesSignalError() instead")
    void gETDisableInsightRulesSignalE(OAIDisableInsightRulesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDisableInsightRulesSignalError(OAIDisableInsightRulesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETEnableAlarmActionsSignalError() instead")
    void gETEnableAlarmActionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETEnableAlarmActionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETEnableInsightRulesSignalError() instead")
    void gETEnableInsightRulesSignalE(OAIEnableInsightRulesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETEnableInsightRulesSignalError(OAIEnableInsightRulesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetDashboardSignalError() instead")
    void gETGetDashboardSignalE(OAIGetDashboardOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetDashboardSignalError(OAIGetDashboardOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetInsightRuleReportSignalError() instead")
    void gETGetInsightRuleReportSignalE(OAIGetInsightRuleReportOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetInsightRuleReportSignalError(OAIGetInsightRuleReportOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetMetricDataSignalError() instead")
    void gETGetMetricDataSignalE(OAIGetMetricDataOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetMetricDataSignalError(OAIGetMetricDataOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetMetricStatisticsSignalError() instead")
    void gETGetMetricStatisticsSignalE(OAIGetMetricStatisticsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetMetricStatisticsSignalError(OAIGetMetricStatisticsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetMetricStreamSignalError() instead")
    void gETGetMetricStreamSignalE(OAIGetMetricStreamOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetMetricStreamSignalError(OAIGetMetricStreamOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetMetricWidgetImageSignalError() instead")
    void gETGetMetricWidgetImageSignalE(OAIGetMetricWidgetImageOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetMetricWidgetImageSignalError(OAIGetMetricWidgetImageOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListDashboardsSignalError() instead")
    void gETListDashboardsSignalE(OAIListDashboardsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListDashboardsSignalError(OAIListDashboardsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListManagedInsightRulesSignalError() instead")
    void gETListManagedInsightRulesSignalE(OAIListManagedInsightRulesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListManagedInsightRulesSignalError(OAIListManagedInsightRulesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListMetricStreamsSignalError() instead")
    void gETListMetricStreamsSignalE(OAIListMetricStreamsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListMetricStreamsSignalError(OAIListMetricStreamsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListMetricsSignalError() instead")
    void gETListMetricsSignalE(OAIListMetricsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListMetricsSignalError(OAIListMetricsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListTagsForResourceSignalError() instead")
    void gETListTagsForResourceSignalE(OAIListTagsForResourceOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListTagsForResourceSignalError(OAIListTagsForResourceOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPutAnomalyDetectorSignalError() instead")
    void gETPutAnomalyDetectorSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETPutAnomalyDetectorSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPutCompositeAlarmSignalError() instead")
    void gETPutCompositeAlarmSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETPutCompositeAlarmSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPutDashboardSignalError() instead")
    void gETPutDashboardSignalE(OAIPutDashboardOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETPutDashboardSignalError(OAIPutDashboardOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPutInsightRuleSignalError() instead")
    void gETPutInsightRuleSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETPutInsightRuleSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPutManagedInsightRulesSignalError() instead")
    void gETPutManagedInsightRulesSignalE(OAIPutManagedInsightRulesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETPutManagedInsightRulesSignalError(OAIPutManagedInsightRulesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPutMetricAlarmSignalError() instead")
    void gETPutMetricAlarmSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETPutMetricAlarmSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPutMetricDataSignalError() instead")
    void gETPutMetricDataSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETPutMetricDataSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPutMetricStreamSignalError() instead")
    void gETPutMetricStreamSignalE(OAIPutMetricStreamOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETPutMetricStreamSignalError(OAIPutMetricStreamOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetAlarmStateSignalError() instead")
    void gETSetAlarmStateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetAlarmStateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETStartMetricStreamsSignalError() instead")
    void gETStartMetricStreamsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETStartMetricStreamsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETStopMetricStreamsSignalError() instead")
    void gETStopMetricStreamsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETStopMetricStreamsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETTagResourceSignalError() instead")
    void gETTagResourceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETTagResourceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUntagResourceSignalError() instead")
    void gETUntagResourceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUntagResourceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteAlarmsSignalError() instead")
    void pOSTDeleteAlarmsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteAlarmsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteAnomalyDetectorSignalError() instead")
    void pOSTDeleteAnomalyDetectorSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteAnomalyDetectorSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteDashboardsSignalError() instead")
    void pOSTDeleteDashboardsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteDashboardsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteInsightRulesSignalError() instead")
    void pOSTDeleteInsightRulesSignalE(OAIDeleteInsightRulesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteInsightRulesSignalError(OAIDeleteInsightRulesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteMetricStreamSignalError() instead")
    void pOSTDeleteMetricStreamSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteMetricStreamSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeAlarmHistorySignalError() instead")
    void pOSTDescribeAlarmHistorySignalE(OAIDescribeAlarmHistoryOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeAlarmHistorySignalError(OAIDescribeAlarmHistoryOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeAlarmsSignalError() instead")
    void pOSTDescribeAlarmsSignalE(OAIDescribeAlarmsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeAlarmsSignalError(OAIDescribeAlarmsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeAlarmsForMetricSignalError() instead")
    void pOSTDescribeAlarmsForMetricSignalE(OAIDescribeAlarmsForMetricOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeAlarmsForMetricSignalError(OAIDescribeAlarmsForMetricOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeAnomalyDetectorsSignalError() instead")
    void pOSTDescribeAnomalyDetectorsSignalE(OAIDescribeAnomalyDetectorsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeAnomalyDetectorsSignalError(OAIDescribeAnomalyDetectorsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeInsightRulesSignalError() instead")
    void pOSTDescribeInsightRulesSignalE(OAIDescribeInsightRulesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeInsightRulesSignalError(OAIDescribeInsightRulesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDisableAlarmActionsSignalError() instead")
    void pOSTDisableAlarmActionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDisableAlarmActionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDisableInsightRulesSignalError() instead")
    void pOSTDisableInsightRulesSignalE(OAIDisableInsightRulesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDisableInsightRulesSignalError(OAIDisableInsightRulesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTEnableAlarmActionsSignalError() instead")
    void pOSTEnableAlarmActionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTEnableAlarmActionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTEnableInsightRulesSignalError() instead")
    void pOSTEnableInsightRulesSignalE(OAIEnableInsightRulesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTEnableInsightRulesSignalError(OAIEnableInsightRulesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetDashboardSignalError() instead")
    void pOSTGetDashboardSignalE(OAIGetDashboardOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetDashboardSignalError(OAIGetDashboardOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetInsightRuleReportSignalError() instead")
    void pOSTGetInsightRuleReportSignalE(OAIGetInsightRuleReportOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetInsightRuleReportSignalError(OAIGetInsightRuleReportOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetMetricDataSignalError() instead")
    void pOSTGetMetricDataSignalE(OAIGetMetricDataOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetMetricDataSignalError(OAIGetMetricDataOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetMetricStatisticsSignalError() instead")
    void pOSTGetMetricStatisticsSignalE(OAIGetMetricStatisticsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetMetricStatisticsSignalError(OAIGetMetricStatisticsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetMetricStreamSignalError() instead")
    void pOSTGetMetricStreamSignalE(OAIGetMetricStreamOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetMetricStreamSignalError(OAIGetMetricStreamOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetMetricWidgetImageSignalError() instead")
    void pOSTGetMetricWidgetImageSignalE(OAIGetMetricWidgetImageOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetMetricWidgetImageSignalError(OAIGetMetricWidgetImageOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListDashboardsSignalError() instead")
    void pOSTListDashboardsSignalE(OAIListDashboardsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListDashboardsSignalError(OAIListDashboardsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListManagedInsightRulesSignalError() instead")
    void pOSTListManagedInsightRulesSignalE(OAIListManagedInsightRulesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListManagedInsightRulesSignalError(OAIListManagedInsightRulesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListMetricStreamsSignalError() instead")
    void pOSTListMetricStreamsSignalE(OAIListMetricStreamsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListMetricStreamsSignalError(OAIListMetricStreamsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListMetricsSignalError() instead")
    void pOSTListMetricsSignalE(OAIListMetricsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListMetricsSignalError(OAIListMetricsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListTagsForResourceSignalError() instead")
    void pOSTListTagsForResourceSignalE(OAIListTagsForResourceOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListTagsForResourceSignalError(OAIListTagsForResourceOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPutAnomalyDetectorSignalError() instead")
    void pOSTPutAnomalyDetectorSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPutAnomalyDetectorSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPutCompositeAlarmSignalError() instead")
    void pOSTPutCompositeAlarmSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPutCompositeAlarmSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPutDashboardSignalError() instead")
    void pOSTPutDashboardSignalE(OAIPutDashboardOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPutDashboardSignalError(OAIPutDashboardOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPutInsightRuleSignalError() instead")
    void pOSTPutInsightRuleSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPutInsightRuleSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPutManagedInsightRulesSignalError() instead")
    void pOSTPutManagedInsightRulesSignalE(OAIPutManagedInsightRulesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPutManagedInsightRulesSignalError(OAIPutManagedInsightRulesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPutMetricAlarmSignalError() instead")
    void pOSTPutMetricAlarmSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPutMetricAlarmSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPutMetricDataSignalError() instead")
    void pOSTPutMetricDataSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPutMetricDataSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPutMetricStreamSignalError() instead")
    void pOSTPutMetricStreamSignalE(OAIPutMetricStreamOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPutMetricStreamSignalError(OAIPutMetricStreamOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetAlarmStateSignalError() instead")
    void pOSTSetAlarmStateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetAlarmStateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTStartMetricStreamsSignalError() instead")
    void pOSTStartMetricStreamsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTStartMetricStreamsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTStopMetricStreamsSignalError() instead")
    void pOSTStopMetricStreamsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTStopMetricStreamsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTTagResourceSignalError() instead")
    void pOSTTagResourceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTTagResourceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUntagResourceSignalError() instead")
    void pOSTUntagResourceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUntagResourceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use gETDeleteAlarmsSignalErrorFull() instead")
    void gETDeleteAlarmsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteAlarmsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteAnomalyDetectorSignalErrorFull() instead")
    void gETDeleteAnomalyDetectorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteAnomalyDetectorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteDashboardsSignalErrorFull() instead")
    void gETDeleteDashboardsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteDashboardsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteInsightRulesSignalErrorFull() instead")
    void gETDeleteInsightRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteInsightRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteMetricStreamSignalErrorFull() instead")
    void gETDeleteMetricStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteMetricStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeAlarmHistorySignalErrorFull() instead")
    void gETDescribeAlarmHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeAlarmHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeAlarmsSignalErrorFull() instead")
    void gETDescribeAlarmsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeAlarmsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeAlarmsForMetricSignalErrorFull() instead")
    void gETDescribeAlarmsForMetricSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeAlarmsForMetricSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeAnomalyDetectorsSignalErrorFull() instead")
    void gETDescribeAnomalyDetectorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeAnomalyDetectorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeInsightRulesSignalErrorFull() instead")
    void gETDescribeInsightRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeInsightRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDisableAlarmActionsSignalErrorFull() instead")
    void gETDisableAlarmActionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDisableAlarmActionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDisableInsightRulesSignalErrorFull() instead")
    void gETDisableInsightRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDisableInsightRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETEnableAlarmActionsSignalErrorFull() instead")
    void gETEnableAlarmActionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETEnableAlarmActionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETEnableInsightRulesSignalErrorFull() instead")
    void gETEnableInsightRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETEnableInsightRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetDashboardSignalErrorFull() instead")
    void gETGetDashboardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetDashboardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetInsightRuleReportSignalErrorFull() instead")
    void gETGetInsightRuleReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetInsightRuleReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetMetricDataSignalErrorFull() instead")
    void gETGetMetricDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetMetricDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetMetricStatisticsSignalErrorFull() instead")
    void gETGetMetricStatisticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetMetricStatisticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetMetricStreamSignalErrorFull() instead")
    void gETGetMetricStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetMetricStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetMetricWidgetImageSignalErrorFull() instead")
    void gETGetMetricWidgetImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetMetricWidgetImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListDashboardsSignalErrorFull() instead")
    void gETListDashboardsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListDashboardsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListManagedInsightRulesSignalErrorFull() instead")
    void gETListManagedInsightRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListManagedInsightRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListMetricStreamsSignalErrorFull() instead")
    void gETListMetricStreamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListMetricStreamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListMetricsSignalErrorFull() instead")
    void gETListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListTagsForResourceSignalErrorFull() instead")
    void gETListTagsForResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListTagsForResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPutAnomalyDetectorSignalErrorFull() instead")
    void gETPutAnomalyDetectorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETPutAnomalyDetectorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPutCompositeAlarmSignalErrorFull() instead")
    void gETPutCompositeAlarmSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETPutCompositeAlarmSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPutDashboardSignalErrorFull() instead")
    void gETPutDashboardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETPutDashboardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPutInsightRuleSignalErrorFull() instead")
    void gETPutInsightRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETPutInsightRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPutManagedInsightRulesSignalErrorFull() instead")
    void gETPutManagedInsightRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETPutManagedInsightRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPutMetricAlarmSignalErrorFull() instead")
    void gETPutMetricAlarmSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETPutMetricAlarmSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPutMetricDataSignalErrorFull() instead")
    void gETPutMetricDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETPutMetricDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPutMetricStreamSignalErrorFull() instead")
    void gETPutMetricStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETPutMetricStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetAlarmStateSignalErrorFull() instead")
    void gETSetAlarmStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetAlarmStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETStartMetricStreamsSignalErrorFull() instead")
    void gETStartMetricStreamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETStartMetricStreamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETStopMetricStreamsSignalErrorFull() instead")
    void gETStopMetricStreamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETStopMetricStreamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETTagResourceSignalErrorFull() instead")
    void gETTagResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETTagResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUntagResourceSignalErrorFull() instead")
    void gETUntagResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUntagResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteAlarmsSignalErrorFull() instead")
    void pOSTDeleteAlarmsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteAlarmsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteAnomalyDetectorSignalErrorFull() instead")
    void pOSTDeleteAnomalyDetectorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteAnomalyDetectorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteDashboardsSignalErrorFull() instead")
    void pOSTDeleteDashboardsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteDashboardsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteInsightRulesSignalErrorFull() instead")
    void pOSTDeleteInsightRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteInsightRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteMetricStreamSignalErrorFull() instead")
    void pOSTDeleteMetricStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteMetricStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeAlarmHistorySignalErrorFull() instead")
    void pOSTDescribeAlarmHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeAlarmHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeAlarmsSignalErrorFull() instead")
    void pOSTDescribeAlarmsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeAlarmsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeAlarmsForMetricSignalErrorFull() instead")
    void pOSTDescribeAlarmsForMetricSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeAlarmsForMetricSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeAnomalyDetectorsSignalErrorFull() instead")
    void pOSTDescribeAnomalyDetectorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeAnomalyDetectorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeInsightRulesSignalErrorFull() instead")
    void pOSTDescribeInsightRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeInsightRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDisableAlarmActionsSignalErrorFull() instead")
    void pOSTDisableAlarmActionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDisableAlarmActionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDisableInsightRulesSignalErrorFull() instead")
    void pOSTDisableInsightRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDisableInsightRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTEnableAlarmActionsSignalErrorFull() instead")
    void pOSTEnableAlarmActionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTEnableAlarmActionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTEnableInsightRulesSignalErrorFull() instead")
    void pOSTEnableInsightRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTEnableInsightRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetDashboardSignalErrorFull() instead")
    void pOSTGetDashboardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetDashboardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetInsightRuleReportSignalErrorFull() instead")
    void pOSTGetInsightRuleReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetInsightRuleReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetMetricDataSignalErrorFull() instead")
    void pOSTGetMetricDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetMetricDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetMetricStatisticsSignalErrorFull() instead")
    void pOSTGetMetricStatisticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetMetricStatisticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetMetricStreamSignalErrorFull() instead")
    void pOSTGetMetricStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetMetricStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetMetricWidgetImageSignalErrorFull() instead")
    void pOSTGetMetricWidgetImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetMetricWidgetImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListDashboardsSignalErrorFull() instead")
    void pOSTListDashboardsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListDashboardsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListManagedInsightRulesSignalErrorFull() instead")
    void pOSTListManagedInsightRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListManagedInsightRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListMetricStreamsSignalErrorFull() instead")
    void pOSTListMetricStreamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListMetricStreamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListMetricsSignalErrorFull() instead")
    void pOSTListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListTagsForResourceSignalErrorFull() instead")
    void pOSTListTagsForResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListTagsForResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPutAnomalyDetectorSignalErrorFull() instead")
    void pOSTPutAnomalyDetectorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPutAnomalyDetectorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPutCompositeAlarmSignalErrorFull() instead")
    void pOSTPutCompositeAlarmSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPutCompositeAlarmSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPutDashboardSignalErrorFull() instead")
    void pOSTPutDashboardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPutDashboardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPutInsightRuleSignalErrorFull() instead")
    void pOSTPutInsightRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPutInsightRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPutManagedInsightRulesSignalErrorFull() instead")
    void pOSTPutManagedInsightRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPutManagedInsightRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPutMetricAlarmSignalErrorFull() instead")
    void pOSTPutMetricAlarmSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPutMetricAlarmSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPutMetricDataSignalErrorFull() instead")
    void pOSTPutMetricDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPutMetricDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPutMetricStreamSignalErrorFull() instead")
    void pOSTPutMetricStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPutMetricStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetAlarmStateSignalErrorFull() instead")
    void pOSTSetAlarmStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetAlarmStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTStartMetricStreamsSignalErrorFull() instead")
    void pOSTStartMetricStreamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTStartMetricStreamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTStopMetricStreamsSignalErrorFull() instead")
    void pOSTStopMetricStreamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTStopMetricStreamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTTagResourceSignalErrorFull() instead")
    void pOSTTagResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTTagResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUntagResourceSignalErrorFull() instead")
    void pOSTUntagResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUntagResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
