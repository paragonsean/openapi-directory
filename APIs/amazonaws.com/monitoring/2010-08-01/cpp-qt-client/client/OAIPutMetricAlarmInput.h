/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPutMetricAlarmInput.h
 *
 * 
 */

#ifndef OAIPutMetricAlarmInput_H
#define OAIPutMetricAlarmInput_H

#include <QJsonObject>

#include "OAIComparisonOperator.h"
#include "OAIStandardUnit.h"
#include "OAIStatistic.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPutMetricAlarmInput : public OAIObject {
public:
    OAIPutMetricAlarmInput();
    OAIPutMetricAlarmInput(QString json);
    ~OAIPutMetricAlarmInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAlarmName() const;
    void setAlarmName(const QString &alarm_name);
    bool is_alarm_name_Set() const;
    bool is_alarm_name_Valid() const;

    QString getAlarmDescription() const;
    void setAlarmDescription(const QString &alarm_description);
    bool is_alarm_description_Set() const;
    bool is_alarm_description_Valid() const;

    bool getActionsEnabled() const;
    void setActionsEnabled(const bool &actions_enabled);
    bool is_actions_enabled_Set() const;
    bool is_actions_enabled_Valid() const;

    QList getOkActions() const;
    void setOkActions(const QList &ok_actions);
    bool is_ok_actions_Set() const;
    bool is_ok_actions_Valid() const;

    QList getAlarmActions() const;
    void setAlarmActions(const QList &alarm_actions);
    bool is_alarm_actions_Set() const;
    bool is_alarm_actions_Valid() const;

    QList getInsufficientDataActions() const;
    void setInsufficientDataActions(const QList &insufficient_data_actions);
    bool is_insufficient_data_actions_Set() const;
    bool is_insufficient_data_actions_Valid() const;

    QString getMetricName() const;
    void setMetricName(const QString &metric_name);
    bool is_metric_name_Set() const;
    bool is_metric_name_Valid() const;

    QString getRNamespace() const;
    void setRNamespace(const QString &r_namespace);
    bool is_r_namespace_Set() const;
    bool is_r_namespace_Valid() const;

    OAIStatistic getStatistic() const;
    void setStatistic(const OAIStatistic &statistic);
    bool is_statistic_Set() const;
    bool is_statistic_Valid() const;

    QString getExtendedStatistic() const;
    void setExtendedStatistic(const QString &extended_statistic);
    bool is_extended_statistic_Set() const;
    bool is_extended_statistic_Valid() const;

    QList getDimensions() const;
    void setDimensions(const QList &dimensions);
    bool is_dimensions_Set() const;
    bool is_dimensions_Valid() const;

    qint32 getPeriod() const;
    void setPeriod(const qint32 &period);
    bool is_period_Set() const;
    bool is_period_Valid() const;

    OAIStandardUnit getUnit() const;
    void setUnit(const OAIStandardUnit &unit);
    bool is_unit_Set() const;
    bool is_unit_Valid() const;

    qint32 getEvaluationPeriods() const;
    void setEvaluationPeriods(const qint32 &evaluation_periods);
    bool is_evaluation_periods_Set() const;
    bool is_evaluation_periods_Valid() const;

    qint32 getDatapointsToAlarm() const;
    void setDatapointsToAlarm(const qint32 &datapoints_to_alarm);
    bool is_datapoints_to_alarm_Set() const;
    bool is_datapoints_to_alarm_Valid() const;

    double getThreshold() const;
    void setThreshold(const double &threshold);
    bool is_threshold_Set() const;
    bool is_threshold_Valid() const;

    OAIComparisonOperator getComparisonOperator() const;
    void setComparisonOperator(const OAIComparisonOperator &comparison_operator);
    bool is_comparison_operator_Set() const;
    bool is_comparison_operator_Valid() const;

    QString getTreatMissingData() const;
    void setTreatMissingData(const QString &treat_missing_data);
    bool is_treat_missing_data_Set() const;
    bool is_treat_missing_data_Valid() const;

    QString getEvaluateLowSampleCountPercentile() const;
    void setEvaluateLowSampleCountPercentile(const QString &evaluate_low_sample_count_percentile);
    bool is_evaluate_low_sample_count_percentile_Set() const;
    bool is_evaluate_low_sample_count_percentile_Valid() const;

    QList getMetrics() const;
    void setMetrics(const QList &metrics);
    bool is_metrics_Set() const;
    bool is_metrics_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getThresholdMetricId() const;
    void setThresholdMetricId(const QString &threshold_metric_id);
    bool is_threshold_metric_id_Set() const;
    bool is_threshold_metric_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_alarm_name;
    bool m_alarm_name_isSet;
    bool m_alarm_name_isValid;

    QString m_alarm_description;
    bool m_alarm_description_isSet;
    bool m_alarm_description_isValid;

    bool m_actions_enabled;
    bool m_actions_enabled_isSet;
    bool m_actions_enabled_isValid;

    QList m_ok_actions;
    bool m_ok_actions_isSet;
    bool m_ok_actions_isValid;

    QList m_alarm_actions;
    bool m_alarm_actions_isSet;
    bool m_alarm_actions_isValid;

    QList m_insufficient_data_actions;
    bool m_insufficient_data_actions_isSet;
    bool m_insufficient_data_actions_isValid;

    QString m_metric_name;
    bool m_metric_name_isSet;
    bool m_metric_name_isValid;

    QString m_r_namespace;
    bool m_r_namespace_isSet;
    bool m_r_namespace_isValid;

    OAIStatistic m_statistic;
    bool m_statistic_isSet;
    bool m_statistic_isValid;

    QString m_extended_statistic;
    bool m_extended_statistic_isSet;
    bool m_extended_statistic_isValid;

    QList m_dimensions;
    bool m_dimensions_isSet;
    bool m_dimensions_isValid;

    qint32 m_period;
    bool m_period_isSet;
    bool m_period_isValid;

    OAIStandardUnit m_unit;
    bool m_unit_isSet;
    bool m_unit_isValid;

    qint32 m_evaluation_periods;
    bool m_evaluation_periods_isSet;
    bool m_evaluation_periods_isValid;

    qint32 m_datapoints_to_alarm;
    bool m_datapoints_to_alarm_isSet;
    bool m_datapoints_to_alarm_isValid;

    double m_threshold;
    bool m_threshold_isSet;
    bool m_threshold_isValid;

    OAIComparisonOperator m_comparison_operator;
    bool m_comparison_operator_isSet;
    bool m_comparison_operator_isValid;

    QString m_treat_missing_data;
    bool m_treat_missing_data_isSet;
    bool m_treat_missing_data_isValid;

    QString m_evaluate_low_sample_count_percentile;
    bool m_evaluate_low_sample_count_percentile_isSet;
    bool m_evaluate_low_sample_count_percentile_isValid;

    QList m_metrics;
    bool m_metrics_isSet;
    bool m_metrics_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_threshold_metric_id;
    bool m_threshold_metric_id_isSet;
    bool m_threshold_metric_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPutMetricAlarmInput)

#endif // OAIPutMetricAlarmInput_H
