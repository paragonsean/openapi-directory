/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInsightRuleMetricDatapoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInsightRuleMetricDatapoint::OAIInsightRuleMetricDatapoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInsightRuleMetricDatapoint::OAIInsightRuleMetricDatapoint() {
    this->initializeModel();
}

OAIInsightRuleMetricDatapoint::~OAIInsightRuleMetricDatapoint() {}

void OAIInsightRuleMetricDatapoint::initializeModel() {

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_unique_contributors_isSet = false;
    m_unique_contributors_isValid = false;

    m_max_contributor_value_isSet = false;
    m_max_contributor_value_isValid = false;

    m_sample_count_isSet = false;
    m_sample_count_isValid = false;

    m_average_isSet = false;
    m_average_isValid = false;

    m_sum_isSet = false;
    m_sum_isValid = false;

    m_minimum_isSet = false;
    m_minimum_isValid = false;

    m_maximum_isSet = false;
    m_maximum_isValid = false;
}

void OAIInsightRuleMetricDatapoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInsightRuleMetricDatapoint::fromJsonObject(QJsonObject json) {

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("Timestamp")]);
    m_timestamp_isSet = !json[QString("Timestamp")].isNull() && m_timestamp_isValid;

    m_unique_contributors_isValid = ::OpenAPI::fromJsonValue(m_unique_contributors, json[QString("UniqueContributors")]);
    m_unique_contributors_isSet = !json[QString("UniqueContributors")].isNull() && m_unique_contributors_isValid;

    m_max_contributor_value_isValid = ::OpenAPI::fromJsonValue(m_max_contributor_value, json[QString("MaxContributorValue")]);
    m_max_contributor_value_isSet = !json[QString("MaxContributorValue")].isNull() && m_max_contributor_value_isValid;

    m_sample_count_isValid = ::OpenAPI::fromJsonValue(m_sample_count, json[QString("SampleCount")]);
    m_sample_count_isSet = !json[QString("SampleCount")].isNull() && m_sample_count_isValid;

    m_average_isValid = ::OpenAPI::fromJsonValue(m_average, json[QString("Average")]);
    m_average_isSet = !json[QString("Average")].isNull() && m_average_isValid;

    m_sum_isValid = ::OpenAPI::fromJsonValue(m_sum, json[QString("Sum")]);
    m_sum_isSet = !json[QString("Sum")].isNull() && m_sum_isValid;

    m_minimum_isValid = ::OpenAPI::fromJsonValue(m_minimum, json[QString("Minimum")]);
    m_minimum_isSet = !json[QString("Minimum")].isNull() && m_minimum_isValid;

    m_maximum_isValid = ::OpenAPI::fromJsonValue(m_maximum, json[QString("Maximum")]);
    m_maximum_isSet = !json[QString("Maximum")].isNull() && m_maximum_isValid;
}

QString OAIInsightRuleMetricDatapoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInsightRuleMetricDatapoint::asJsonObject() const {
    QJsonObject obj;
    if (m_timestamp_isSet) {
        obj.insert(QString("Timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_unique_contributors_isSet) {
        obj.insert(QString("UniqueContributors"), ::OpenAPI::toJsonValue(m_unique_contributors));
    }
    if (m_max_contributor_value_isSet) {
        obj.insert(QString("MaxContributorValue"), ::OpenAPI::toJsonValue(m_max_contributor_value));
    }
    if (m_sample_count_isSet) {
        obj.insert(QString("SampleCount"), ::OpenAPI::toJsonValue(m_sample_count));
    }
    if (m_average_isSet) {
        obj.insert(QString("Average"), ::OpenAPI::toJsonValue(m_average));
    }
    if (m_sum_isSet) {
        obj.insert(QString("Sum"), ::OpenAPI::toJsonValue(m_sum));
    }
    if (m_minimum_isSet) {
        obj.insert(QString("Minimum"), ::OpenAPI::toJsonValue(m_minimum));
    }
    if (m_maximum_isSet) {
        obj.insert(QString("Maximum"), ::OpenAPI::toJsonValue(m_maximum));
    }
    return obj;
}

QDateTime OAIInsightRuleMetricDatapoint::getTimestamp() const {
    return m_timestamp;
}
void OAIInsightRuleMetricDatapoint::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIInsightRuleMetricDatapoint::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIInsightRuleMetricDatapoint::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

double OAIInsightRuleMetricDatapoint::getUniqueContributors() const {
    return m_unique_contributors;
}
void OAIInsightRuleMetricDatapoint::setUniqueContributors(const double &unique_contributors) {
    m_unique_contributors = unique_contributors;
    m_unique_contributors_isSet = true;
}

bool OAIInsightRuleMetricDatapoint::is_unique_contributors_Set() const{
    return m_unique_contributors_isSet;
}

bool OAIInsightRuleMetricDatapoint::is_unique_contributors_Valid() const{
    return m_unique_contributors_isValid;
}

double OAIInsightRuleMetricDatapoint::getMaxContributorValue() const {
    return m_max_contributor_value;
}
void OAIInsightRuleMetricDatapoint::setMaxContributorValue(const double &max_contributor_value) {
    m_max_contributor_value = max_contributor_value;
    m_max_contributor_value_isSet = true;
}

bool OAIInsightRuleMetricDatapoint::is_max_contributor_value_Set() const{
    return m_max_contributor_value_isSet;
}

bool OAIInsightRuleMetricDatapoint::is_max_contributor_value_Valid() const{
    return m_max_contributor_value_isValid;
}

double OAIInsightRuleMetricDatapoint::getSampleCount() const {
    return m_sample_count;
}
void OAIInsightRuleMetricDatapoint::setSampleCount(const double &sample_count) {
    m_sample_count = sample_count;
    m_sample_count_isSet = true;
}

bool OAIInsightRuleMetricDatapoint::is_sample_count_Set() const{
    return m_sample_count_isSet;
}

bool OAIInsightRuleMetricDatapoint::is_sample_count_Valid() const{
    return m_sample_count_isValid;
}

double OAIInsightRuleMetricDatapoint::getAverage() const {
    return m_average;
}
void OAIInsightRuleMetricDatapoint::setAverage(const double &average) {
    m_average = average;
    m_average_isSet = true;
}

bool OAIInsightRuleMetricDatapoint::is_average_Set() const{
    return m_average_isSet;
}

bool OAIInsightRuleMetricDatapoint::is_average_Valid() const{
    return m_average_isValid;
}

double OAIInsightRuleMetricDatapoint::getSum() const {
    return m_sum;
}
void OAIInsightRuleMetricDatapoint::setSum(const double &sum) {
    m_sum = sum;
    m_sum_isSet = true;
}

bool OAIInsightRuleMetricDatapoint::is_sum_Set() const{
    return m_sum_isSet;
}

bool OAIInsightRuleMetricDatapoint::is_sum_Valid() const{
    return m_sum_isValid;
}

double OAIInsightRuleMetricDatapoint::getMinimum() const {
    return m_minimum;
}
void OAIInsightRuleMetricDatapoint::setMinimum(const double &minimum) {
    m_minimum = minimum;
    m_minimum_isSet = true;
}

bool OAIInsightRuleMetricDatapoint::is_minimum_Set() const{
    return m_minimum_isSet;
}

bool OAIInsightRuleMetricDatapoint::is_minimum_Valid() const{
    return m_minimum_isValid;
}

double OAIInsightRuleMetricDatapoint::getMaximum() const {
    return m_maximum;
}
void OAIInsightRuleMetricDatapoint::setMaximum(const double &maximum) {
    m_maximum = maximum;
    m_maximum_isSet = true;
}

bool OAIInsightRuleMetricDatapoint::is_maximum_Set() const{
    return m_maximum_isSet;
}

bool OAIInsightRuleMetricDatapoint::is_maximum_Valid() const{
    return m_maximum_isValid;
}

bool OAIInsightRuleMetricDatapoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_contributors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_contributor_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInsightRuleMetricDatapoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_timestamp_isValid && true;
}

} // namespace OpenAPI
