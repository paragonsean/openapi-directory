/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAlarmsInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAlarmsInput::OAIDescribeAlarmsInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAlarmsInput::OAIDescribeAlarmsInput() {
    this->initializeModel();
}

OAIDescribeAlarmsInput::~OAIDescribeAlarmsInput() {}

void OAIDescribeAlarmsInput::initializeModel() {

    m_alarm_names_isSet = false;
    m_alarm_names_isValid = false;

    m_alarm_name_prefix_isSet = false;
    m_alarm_name_prefix_isValid = false;

    m_alarm_types_isSet = false;
    m_alarm_types_isValid = false;

    m_children_of_alarm_name_isSet = false;
    m_children_of_alarm_name_isValid = false;

    m_parents_of_alarm_name_isSet = false;
    m_parents_of_alarm_name_isValid = false;

    m_state_value_isSet = false;
    m_state_value_isValid = false;

    m_action_prefix_isSet = false;
    m_action_prefix_isValid = false;

    m_max_records_isSet = false;
    m_max_records_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIDescribeAlarmsInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAlarmsInput::fromJsonObject(QJsonObject json) {

    m_alarm_names_isValid = ::OpenAPI::fromJsonValue(m_alarm_names, json[QString("AlarmNames")]);
    m_alarm_names_isSet = !json[QString("AlarmNames")].isNull() && m_alarm_names_isValid;

    m_alarm_name_prefix_isValid = ::OpenAPI::fromJsonValue(m_alarm_name_prefix, json[QString("AlarmNamePrefix")]);
    m_alarm_name_prefix_isSet = !json[QString("AlarmNamePrefix")].isNull() && m_alarm_name_prefix_isValid;

    m_alarm_types_isValid = ::OpenAPI::fromJsonValue(m_alarm_types, json[QString("AlarmTypes")]);
    m_alarm_types_isSet = !json[QString("AlarmTypes")].isNull() && m_alarm_types_isValid;

    m_children_of_alarm_name_isValid = ::OpenAPI::fromJsonValue(m_children_of_alarm_name, json[QString("ChildrenOfAlarmName")]);
    m_children_of_alarm_name_isSet = !json[QString("ChildrenOfAlarmName")].isNull() && m_children_of_alarm_name_isValid;

    m_parents_of_alarm_name_isValid = ::OpenAPI::fromJsonValue(m_parents_of_alarm_name, json[QString("ParentsOfAlarmName")]);
    m_parents_of_alarm_name_isSet = !json[QString("ParentsOfAlarmName")].isNull() && m_parents_of_alarm_name_isValid;

    m_state_value_isValid = ::OpenAPI::fromJsonValue(m_state_value, json[QString("StateValue")]);
    m_state_value_isSet = !json[QString("StateValue")].isNull() && m_state_value_isValid;

    m_action_prefix_isValid = ::OpenAPI::fromJsonValue(m_action_prefix, json[QString("ActionPrefix")]);
    m_action_prefix_isSet = !json[QString("ActionPrefix")].isNull() && m_action_prefix_isValid;

    m_max_records_isValid = ::OpenAPI::fromJsonValue(m_max_records, json[QString("MaxRecords")]);
    m_max_records_isSet = !json[QString("MaxRecords")].isNull() && m_max_records_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIDescribeAlarmsInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAlarmsInput::asJsonObject() const {
    QJsonObject obj;
    if (m_alarm_names.isSet()) {
        obj.insert(QString("AlarmNames"), ::OpenAPI::toJsonValue(m_alarm_names));
    }
    if (m_alarm_name_prefix_isSet) {
        obj.insert(QString("AlarmNamePrefix"), ::OpenAPI::toJsonValue(m_alarm_name_prefix));
    }
    if (m_alarm_types.isSet()) {
        obj.insert(QString("AlarmTypes"), ::OpenAPI::toJsonValue(m_alarm_types));
    }
    if (m_children_of_alarm_name_isSet) {
        obj.insert(QString("ChildrenOfAlarmName"), ::OpenAPI::toJsonValue(m_children_of_alarm_name));
    }
    if (m_parents_of_alarm_name_isSet) {
        obj.insert(QString("ParentsOfAlarmName"), ::OpenAPI::toJsonValue(m_parents_of_alarm_name));
    }
    if (m_state_value.isSet()) {
        obj.insert(QString("StateValue"), ::OpenAPI::toJsonValue(m_state_value));
    }
    if (m_action_prefix_isSet) {
        obj.insert(QString("ActionPrefix"), ::OpenAPI::toJsonValue(m_action_prefix));
    }
    if (m_max_records_isSet) {
        obj.insert(QString("MaxRecords"), ::OpenAPI::toJsonValue(m_max_records));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIDescribeAlarmsInput::getAlarmNames() const {
    return m_alarm_names;
}
void OAIDescribeAlarmsInput::setAlarmNames(const QList &alarm_names) {
    m_alarm_names = alarm_names;
    m_alarm_names_isSet = true;
}

bool OAIDescribeAlarmsInput::is_alarm_names_Set() const{
    return m_alarm_names_isSet;
}

bool OAIDescribeAlarmsInput::is_alarm_names_Valid() const{
    return m_alarm_names_isValid;
}

QString OAIDescribeAlarmsInput::getAlarmNamePrefix() const {
    return m_alarm_name_prefix;
}
void OAIDescribeAlarmsInput::setAlarmNamePrefix(const QString &alarm_name_prefix) {
    m_alarm_name_prefix = alarm_name_prefix;
    m_alarm_name_prefix_isSet = true;
}

bool OAIDescribeAlarmsInput::is_alarm_name_prefix_Set() const{
    return m_alarm_name_prefix_isSet;
}

bool OAIDescribeAlarmsInput::is_alarm_name_prefix_Valid() const{
    return m_alarm_name_prefix_isValid;
}

QList OAIDescribeAlarmsInput::getAlarmTypes() const {
    return m_alarm_types;
}
void OAIDescribeAlarmsInput::setAlarmTypes(const QList &alarm_types) {
    m_alarm_types = alarm_types;
    m_alarm_types_isSet = true;
}

bool OAIDescribeAlarmsInput::is_alarm_types_Set() const{
    return m_alarm_types_isSet;
}

bool OAIDescribeAlarmsInput::is_alarm_types_Valid() const{
    return m_alarm_types_isValid;
}

QString OAIDescribeAlarmsInput::getChildrenOfAlarmName() const {
    return m_children_of_alarm_name;
}
void OAIDescribeAlarmsInput::setChildrenOfAlarmName(const QString &children_of_alarm_name) {
    m_children_of_alarm_name = children_of_alarm_name;
    m_children_of_alarm_name_isSet = true;
}

bool OAIDescribeAlarmsInput::is_children_of_alarm_name_Set() const{
    return m_children_of_alarm_name_isSet;
}

bool OAIDescribeAlarmsInput::is_children_of_alarm_name_Valid() const{
    return m_children_of_alarm_name_isValid;
}

QString OAIDescribeAlarmsInput::getParentsOfAlarmName() const {
    return m_parents_of_alarm_name;
}
void OAIDescribeAlarmsInput::setParentsOfAlarmName(const QString &parents_of_alarm_name) {
    m_parents_of_alarm_name = parents_of_alarm_name;
    m_parents_of_alarm_name_isSet = true;
}

bool OAIDescribeAlarmsInput::is_parents_of_alarm_name_Set() const{
    return m_parents_of_alarm_name_isSet;
}

bool OAIDescribeAlarmsInput::is_parents_of_alarm_name_Valid() const{
    return m_parents_of_alarm_name_isValid;
}

OAIStateValue OAIDescribeAlarmsInput::getStateValue() const {
    return m_state_value;
}
void OAIDescribeAlarmsInput::setStateValue(const OAIStateValue &state_value) {
    m_state_value = state_value;
    m_state_value_isSet = true;
}

bool OAIDescribeAlarmsInput::is_state_value_Set() const{
    return m_state_value_isSet;
}

bool OAIDescribeAlarmsInput::is_state_value_Valid() const{
    return m_state_value_isValid;
}

QString OAIDescribeAlarmsInput::getActionPrefix() const {
    return m_action_prefix;
}
void OAIDescribeAlarmsInput::setActionPrefix(const QString &action_prefix) {
    m_action_prefix = action_prefix;
    m_action_prefix_isSet = true;
}

bool OAIDescribeAlarmsInput::is_action_prefix_Set() const{
    return m_action_prefix_isSet;
}

bool OAIDescribeAlarmsInput::is_action_prefix_Valid() const{
    return m_action_prefix_isValid;
}

qint32 OAIDescribeAlarmsInput::getMaxRecords() const {
    return m_max_records;
}
void OAIDescribeAlarmsInput::setMaxRecords(const qint32 &max_records) {
    m_max_records = max_records;
    m_max_records_isSet = true;
}

bool OAIDescribeAlarmsInput::is_max_records_Set() const{
    return m_max_records_isSet;
}

bool OAIDescribeAlarmsInput::is_max_records_Valid() const{
    return m_max_records_isValid;
}

QString OAIDescribeAlarmsInput::getNextToken() const {
    return m_next_token;
}
void OAIDescribeAlarmsInput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeAlarmsInput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeAlarmsInput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIDescribeAlarmsInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alarm_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alarm_name_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alarm_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_children_of_alarm_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parents_of_alarm_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_records_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAlarmsInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
