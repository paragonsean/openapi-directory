/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMetricDataQuery.h
 *
 * &lt;p&gt;This structure is used in both &lt;code&gt;GetMetricData&lt;/code&gt; and &lt;code&gt;PutMetricAlarm&lt;/code&gt;. The supported use of this structure is different for those two operations.&lt;/p&gt; &lt;p&gt;When used in &lt;code&gt;GetMetricData&lt;/code&gt;, it indicates the metric data to return, and whether this call is just retrieving a batch set of data for one metric, or is performing a Metrics Insights query or a math expression. A single &lt;code&gt;GetMetricData&lt;/code&gt; call can include up to 500 &lt;code&gt;MetricDataQuery&lt;/code&gt; structures.&lt;/p&gt; &lt;p&gt;When used in &lt;code&gt;PutMetricAlarm&lt;/code&gt;, it enables you to create an alarm based on a metric math expression. Each &lt;code&gt;MetricDataQuery&lt;/code&gt; in the array specifies either a metric to retrieve, or a math expression to be performed on retrieved metrics. A single &lt;code&gt;PutMetricAlarm&lt;/code&gt; call can include up to 20 &lt;code&gt;MetricDataQuery&lt;/code&gt; structures in the array. The 20 structures can include as many as 10 structures that contain a &lt;code&gt;MetricStat&lt;/code&gt; parameter to retrieve a metric, and as many as 10 structures that contain the &lt;code&gt;Expression&lt;/code&gt; parameter to perform a math expression. Of those &lt;code&gt;Expression&lt;/code&gt; structures, one must have &lt;code&gt;true&lt;/code&gt; as the value for &lt;code&gt;ReturnData&lt;/code&gt;. The result of this expression is the value the alarm watches.&lt;/p&gt; &lt;p&gt;Any expression used in a &lt;code&gt;PutMetricAlarm&lt;/code&gt; operation must return a single time series. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax\&quot;&gt;Metric Math Syntax and Functions&lt;/a&gt; in the &lt;i&gt;Amazon CloudWatch User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Some of the parameters of this structure also have different uses whether you are using this structure in a &lt;code&gt;GetMetricData&lt;/code&gt; operation or a &lt;code&gt;PutMetricAlarm&lt;/code&gt; operation. These differences are explained in the following parameter list.&lt;/p&gt;
 */

#ifndef OAIMetricDataQuery_H
#define OAIMetricDataQuery_H

#include <QJsonObject>

#include "OAIMetricDataQuery_MetricStat.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMetricDataQuery_MetricStat;

class OAIMetricDataQuery : public OAIObject {
public:
    OAIMetricDataQuery();
    OAIMetricDataQuery(QString json);
    ~OAIMetricDataQuery() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAIMetricDataQuery_MetricStat getMetricStat() const;
    void setMetricStat(const OAIMetricDataQuery_MetricStat &metric_stat);
    bool is_metric_stat_Set() const;
    bool is_metric_stat_Valid() const;

    QString getExpression() const;
    void setExpression(const QString &expression);
    bool is_expression_Set() const;
    bool is_expression_Valid() const;

    QString getLabel() const;
    void setLabel(const QString &label);
    bool is_label_Set() const;
    bool is_label_Valid() const;

    bool getReturnData() const;
    void setReturnData(const bool &return_data);
    bool is_return_data_Set() const;
    bool is_return_data_Valid() const;

    qint32 getPeriod() const;
    void setPeriod(const qint32 &period);
    bool is_period_Set() const;
    bool is_period_Valid() const;

    QString getAccountId() const;
    void setAccountId(const QString &account_id);
    bool is_account_id_Set() const;
    bool is_account_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAIMetricDataQuery_MetricStat m_metric_stat;
    bool m_metric_stat_isSet;
    bool m_metric_stat_isValid;

    QString m_expression;
    bool m_expression_isSet;
    bool m_expression_isValid;

    QString m_label;
    bool m_label_isSet;
    bool m_label_isValid;

    bool m_return_data;
    bool m_return_data_isSet;
    bool m_return_data_isValid;

    qint32 m_period;
    bool m_period_isSet;
    bool m_period_isValid;

    QString m_account_id;
    bool m_account_id_isSet;
    bool m_account_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMetricDataQuery)

#endif // OAIMetricDataQuery_H
