/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompositeAlarm.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompositeAlarm::OAICompositeAlarm(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompositeAlarm::OAICompositeAlarm() {
    this->initializeModel();
}

OAICompositeAlarm::~OAICompositeAlarm() {}

void OAICompositeAlarm::initializeModel() {

    m_actions_enabled_isSet = false;
    m_actions_enabled_isValid = false;

    m_alarm_actions_isSet = false;
    m_alarm_actions_isValid = false;

    m_alarm_arn_isSet = false;
    m_alarm_arn_isValid = false;

    m_alarm_configuration_updated_timestamp_isSet = false;
    m_alarm_configuration_updated_timestamp_isValid = false;

    m_alarm_description_isSet = false;
    m_alarm_description_isValid = false;

    m_alarm_name_isSet = false;
    m_alarm_name_isValid = false;

    m_alarm_rule_isSet = false;
    m_alarm_rule_isValid = false;

    m_insufficient_data_actions_isSet = false;
    m_insufficient_data_actions_isValid = false;

    m_ok_actions_isSet = false;
    m_ok_actions_isValid = false;

    m_state_reason_isSet = false;
    m_state_reason_isValid = false;

    m_state_reason_data_isSet = false;
    m_state_reason_data_isValid = false;

    m_state_updated_timestamp_isSet = false;
    m_state_updated_timestamp_isValid = false;

    m_state_value_isSet = false;
    m_state_value_isValid = false;

    m_state_transitioned_timestamp_isSet = false;
    m_state_transitioned_timestamp_isValid = false;

    m_actions_suppressed_by_isSet = false;
    m_actions_suppressed_by_isValid = false;

    m_actions_suppressed_reason_isSet = false;
    m_actions_suppressed_reason_isValid = false;

    m_actions_suppressor_isSet = false;
    m_actions_suppressor_isValid = false;

    m_actions_suppressor_wait_period_isSet = false;
    m_actions_suppressor_wait_period_isValid = false;

    m_actions_suppressor_extension_period_isSet = false;
    m_actions_suppressor_extension_period_isValid = false;
}

void OAICompositeAlarm::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompositeAlarm::fromJsonObject(QJsonObject json) {

    m_actions_enabled_isValid = ::OpenAPI::fromJsonValue(m_actions_enabled, json[QString("ActionsEnabled")]);
    m_actions_enabled_isSet = !json[QString("ActionsEnabled")].isNull() && m_actions_enabled_isValid;

    m_alarm_actions_isValid = ::OpenAPI::fromJsonValue(m_alarm_actions, json[QString("AlarmActions")]);
    m_alarm_actions_isSet = !json[QString("AlarmActions")].isNull() && m_alarm_actions_isValid;

    m_alarm_arn_isValid = ::OpenAPI::fromJsonValue(m_alarm_arn, json[QString("AlarmArn")]);
    m_alarm_arn_isSet = !json[QString("AlarmArn")].isNull() && m_alarm_arn_isValid;

    m_alarm_configuration_updated_timestamp_isValid = ::OpenAPI::fromJsonValue(m_alarm_configuration_updated_timestamp, json[QString("AlarmConfigurationUpdatedTimestamp")]);
    m_alarm_configuration_updated_timestamp_isSet = !json[QString("AlarmConfigurationUpdatedTimestamp")].isNull() && m_alarm_configuration_updated_timestamp_isValid;

    m_alarm_description_isValid = ::OpenAPI::fromJsonValue(m_alarm_description, json[QString("AlarmDescription")]);
    m_alarm_description_isSet = !json[QString("AlarmDescription")].isNull() && m_alarm_description_isValid;

    m_alarm_name_isValid = ::OpenAPI::fromJsonValue(m_alarm_name, json[QString("AlarmName")]);
    m_alarm_name_isSet = !json[QString("AlarmName")].isNull() && m_alarm_name_isValid;

    m_alarm_rule_isValid = ::OpenAPI::fromJsonValue(m_alarm_rule, json[QString("AlarmRule")]);
    m_alarm_rule_isSet = !json[QString("AlarmRule")].isNull() && m_alarm_rule_isValid;

    m_insufficient_data_actions_isValid = ::OpenAPI::fromJsonValue(m_insufficient_data_actions, json[QString("InsufficientDataActions")]);
    m_insufficient_data_actions_isSet = !json[QString("InsufficientDataActions")].isNull() && m_insufficient_data_actions_isValid;

    m_ok_actions_isValid = ::OpenAPI::fromJsonValue(m_ok_actions, json[QString("OKActions")]);
    m_ok_actions_isSet = !json[QString("OKActions")].isNull() && m_ok_actions_isValid;

    m_state_reason_isValid = ::OpenAPI::fromJsonValue(m_state_reason, json[QString("StateReason")]);
    m_state_reason_isSet = !json[QString("StateReason")].isNull() && m_state_reason_isValid;

    m_state_reason_data_isValid = ::OpenAPI::fromJsonValue(m_state_reason_data, json[QString("StateReasonData")]);
    m_state_reason_data_isSet = !json[QString("StateReasonData")].isNull() && m_state_reason_data_isValid;

    m_state_updated_timestamp_isValid = ::OpenAPI::fromJsonValue(m_state_updated_timestamp, json[QString("StateUpdatedTimestamp")]);
    m_state_updated_timestamp_isSet = !json[QString("StateUpdatedTimestamp")].isNull() && m_state_updated_timestamp_isValid;

    m_state_value_isValid = ::OpenAPI::fromJsonValue(m_state_value, json[QString("StateValue")]);
    m_state_value_isSet = !json[QString("StateValue")].isNull() && m_state_value_isValid;

    m_state_transitioned_timestamp_isValid = ::OpenAPI::fromJsonValue(m_state_transitioned_timestamp, json[QString("StateTransitionedTimestamp")]);
    m_state_transitioned_timestamp_isSet = !json[QString("StateTransitionedTimestamp")].isNull() && m_state_transitioned_timestamp_isValid;

    m_actions_suppressed_by_isValid = ::OpenAPI::fromJsonValue(m_actions_suppressed_by, json[QString("ActionsSuppressedBy")]);
    m_actions_suppressed_by_isSet = !json[QString("ActionsSuppressedBy")].isNull() && m_actions_suppressed_by_isValid;

    m_actions_suppressed_reason_isValid = ::OpenAPI::fromJsonValue(m_actions_suppressed_reason, json[QString("ActionsSuppressedReason")]);
    m_actions_suppressed_reason_isSet = !json[QString("ActionsSuppressedReason")].isNull() && m_actions_suppressed_reason_isValid;

    m_actions_suppressor_isValid = ::OpenAPI::fromJsonValue(m_actions_suppressor, json[QString("ActionsSuppressor")]);
    m_actions_suppressor_isSet = !json[QString("ActionsSuppressor")].isNull() && m_actions_suppressor_isValid;

    m_actions_suppressor_wait_period_isValid = ::OpenAPI::fromJsonValue(m_actions_suppressor_wait_period, json[QString("ActionsSuppressorWaitPeriod")]);
    m_actions_suppressor_wait_period_isSet = !json[QString("ActionsSuppressorWaitPeriod")].isNull() && m_actions_suppressor_wait_period_isValid;

    m_actions_suppressor_extension_period_isValid = ::OpenAPI::fromJsonValue(m_actions_suppressor_extension_period, json[QString("ActionsSuppressorExtensionPeriod")]);
    m_actions_suppressor_extension_period_isSet = !json[QString("ActionsSuppressorExtensionPeriod")].isNull() && m_actions_suppressor_extension_period_isValid;
}

QString OAICompositeAlarm::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompositeAlarm::asJsonObject() const {
    QJsonObject obj;
    if (m_actions_enabled_isSet) {
        obj.insert(QString("ActionsEnabled"), ::OpenAPI::toJsonValue(m_actions_enabled));
    }
    if (m_alarm_actions.isSet()) {
        obj.insert(QString("AlarmActions"), ::OpenAPI::toJsonValue(m_alarm_actions));
    }
    if (m_alarm_arn_isSet) {
        obj.insert(QString("AlarmArn"), ::OpenAPI::toJsonValue(m_alarm_arn));
    }
    if (m_alarm_configuration_updated_timestamp_isSet) {
        obj.insert(QString("AlarmConfigurationUpdatedTimestamp"), ::OpenAPI::toJsonValue(m_alarm_configuration_updated_timestamp));
    }
    if (m_alarm_description_isSet) {
        obj.insert(QString("AlarmDescription"), ::OpenAPI::toJsonValue(m_alarm_description));
    }
    if (m_alarm_name_isSet) {
        obj.insert(QString("AlarmName"), ::OpenAPI::toJsonValue(m_alarm_name));
    }
    if (m_alarm_rule_isSet) {
        obj.insert(QString("AlarmRule"), ::OpenAPI::toJsonValue(m_alarm_rule));
    }
    if (m_insufficient_data_actions.isSet()) {
        obj.insert(QString("InsufficientDataActions"), ::OpenAPI::toJsonValue(m_insufficient_data_actions));
    }
    if (m_ok_actions.isSet()) {
        obj.insert(QString("OKActions"), ::OpenAPI::toJsonValue(m_ok_actions));
    }
    if (m_state_reason_isSet) {
        obj.insert(QString("StateReason"), ::OpenAPI::toJsonValue(m_state_reason));
    }
    if (m_state_reason_data_isSet) {
        obj.insert(QString("StateReasonData"), ::OpenAPI::toJsonValue(m_state_reason_data));
    }
    if (m_state_updated_timestamp_isSet) {
        obj.insert(QString("StateUpdatedTimestamp"), ::OpenAPI::toJsonValue(m_state_updated_timestamp));
    }
    if (m_state_value.isSet()) {
        obj.insert(QString("StateValue"), ::OpenAPI::toJsonValue(m_state_value));
    }
    if (m_state_transitioned_timestamp_isSet) {
        obj.insert(QString("StateTransitionedTimestamp"), ::OpenAPI::toJsonValue(m_state_transitioned_timestamp));
    }
    if (m_actions_suppressed_by.isSet()) {
        obj.insert(QString("ActionsSuppressedBy"), ::OpenAPI::toJsonValue(m_actions_suppressed_by));
    }
    if (m_actions_suppressed_reason_isSet) {
        obj.insert(QString("ActionsSuppressedReason"), ::OpenAPI::toJsonValue(m_actions_suppressed_reason));
    }
    if (m_actions_suppressor_isSet) {
        obj.insert(QString("ActionsSuppressor"), ::OpenAPI::toJsonValue(m_actions_suppressor));
    }
    if (m_actions_suppressor_wait_period_isSet) {
        obj.insert(QString("ActionsSuppressorWaitPeriod"), ::OpenAPI::toJsonValue(m_actions_suppressor_wait_period));
    }
    if (m_actions_suppressor_extension_period_isSet) {
        obj.insert(QString("ActionsSuppressorExtensionPeriod"), ::OpenAPI::toJsonValue(m_actions_suppressor_extension_period));
    }
    return obj;
}

bool OAICompositeAlarm::getActionsEnabled() const {
    return m_actions_enabled;
}
void OAICompositeAlarm::setActionsEnabled(const bool &actions_enabled) {
    m_actions_enabled = actions_enabled;
    m_actions_enabled_isSet = true;
}

bool OAICompositeAlarm::is_actions_enabled_Set() const{
    return m_actions_enabled_isSet;
}

bool OAICompositeAlarm::is_actions_enabled_Valid() const{
    return m_actions_enabled_isValid;
}

QList OAICompositeAlarm::getAlarmActions() const {
    return m_alarm_actions;
}
void OAICompositeAlarm::setAlarmActions(const QList &alarm_actions) {
    m_alarm_actions = alarm_actions;
    m_alarm_actions_isSet = true;
}

bool OAICompositeAlarm::is_alarm_actions_Set() const{
    return m_alarm_actions_isSet;
}

bool OAICompositeAlarm::is_alarm_actions_Valid() const{
    return m_alarm_actions_isValid;
}

QString OAICompositeAlarm::getAlarmArn() const {
    return m_alarm_arn;
}
void OAICompositeAlarm::setAlarmArn(const QString &alarm_arn) {
    m_alarm_arn = alarm_arn;
    m_alarm_arn_isSet = true;
}

bool OAICompositeAlarm::is_alarm_arn_Set() const{
    return m_alarm_arn_isSet;
}

bool OAICompositeAlarm::is_alarm_arn_Valid() const{
    return m_alarm_arn_isValid;
}

QDateTime OAICompositeAlarm::getAlarmConfigurationUpdatedTimestamp() const {
    return m_alarm_configuration_updated_timestamp;
}
void OAICompositeAlarm::setAlarmConfigurationUpdatedTimestamp(const QDateTime &alarm_configuration_updated_timestamp) {
    m_alarm_configuration_updated_timestamp = alarm_configuration_updated_timestamp;
    m_alarm_configuration_updated_timestamp_isSet = true;
}

bool OAICompositeAlarm::is_alarm_configuration_updated_timestamp_Set() const{
    return m_alarm_configuration_updated_timestamp_isSet;
}

bool OAICompositeAlarm::is_alarm_configuration_updated_timestamp_Valid() const{
    return m_alarm_configuration_updated_timestamp_isValid;
}

QString OAICompositeAlarm::getAlarmDescription() const {
    return m_alarm_description;
}
void OAICompositeAlarm::setAlarmDescription(const QString &alarm_description) {
    m_alarm_description = alarm_description;
    m_alarm_description_isSet = true;
}

bool OAICompositeAlarm::is_alarm_description_Set() const{
    return m_alarm_description_isSet;
}

bool OAICompositeAlarm::is_alarm_description_Valid() const{
    return m_alarm_description_isValid;
}

QString OAICompositeAlarm::getAlarmName() const {
    return m_alarm_name;
}
void OAICompositeAlarm::setAlarmName(const QString &alarm_name) {
    m_alarm_name = alarm_name;
    m_alarm_name_isSet = true;
}

bool OAICompositeAlarm::is_alarm_name_Set() const{
    return m_alarm_name_isSet;
}

bool OAICompositeAlarm::is_alarm_name_Valid() const{
    return m_alarm_name_isValid;
}

QString OAICompositeAlarm::getAlarmRule() const {
    return m_alarm_rule;
}
void OAICompositeAlarm::setAlarmRule(const QString &alarm_rule) {
    m_alarm_rule = alarm_rule;
    m_alarm_rule_isSet = true;
}

bool OAICompositeAlarm::is_alarm_rule_Set() const{
    return m_alarm_rule_isSet;
}

bool OAICompositeAlarm::is_alarm_rule_Valid() const{
    return m_alarm_rule_isValid;
}

QList OAICompositeAlarm::getInsufficientDataActions() const {
    return m_insufficient_data_actions;
}
void OAICompositeAlarm::setInsufficientDataActions(const QList &insufficient_data_actions) {
    m_insufficient_data_actions = insufficient_data_actions;
    m_insufficient_data_actions_isSet = true;
}

bool OAICompositeAlarm::is_insufficient_data_actions_Set() const{
    return m_insufficient_data_actions_isSet;
}

bool OAICompositeAlarm::is_insufficient_data_actions_Valid() const{
    return m_insufficient_data_actions_isValid;
}

QList OAICompositeAlarm::getOkActions() const {
    return m_ok_actions;
}
void OAICompositeAlarm::setOkActions(const QList &ok_actions) {
    m_ok_actions = ok_actions;
    m_ok_actions_isSet = true;
}

bool OAICompositeAlarm::is_ok_actions_Set() const{
    return m_ok_actions_isSet;
}

bool OAICompositeAlarm::is_ok_actions_Valid() const{
    return m_ok_actions_isValid;
}

QString OAICompositeAlarm::getStateReason() const {
    return m_state_reason;
}
void OAICompositeAlarm::setStateReason(const QString &state_reason) {
    m_state_reason = state_reason;
    m_state_reason_isSet = true;
}

bool OAICompositeAlarm::is_state_reason_Set() const{
    return m_state_reason_isSet;
}

bool OAICompositeAlarm::is_state_reason_Valid() const{
    return m_state_reason_isValid;
}

QString OAICompositeAlarm::getStateReasonData() const {
    return m_state_reason_data;
}
void OAICompositeAlarm::setStateReasonData(const QString &state_reason_data) {
    m_state_reason_data = state_reason_data;
    m_state_reason_data_isSet = true;
}

bool OAICompositeAlarm::is_state_reason_data_Set() const{
    return m_state_reason_data_isSet;
}

bool OAICompositeAlarm::is_state_reason_data_Valid() const{
    return m_state_reason_data_isValid;
}

QDateTime OAICompositeAlarm::getStateUpdatedTimestamp() const {
    return m_state_updated_timestamp;
}
void OAICompositeAlarm::setStateUpdatedTimestamp(const QDateTime &state_updated_timestamp) {
    m_state_updated_timestamp = state_updated_timestamp;
    m_state_updated_timestamp_isSet = true;
}

bool OAICompositeAlarm::is_state_updated_timestamp_Set() const{
    return m_state_updated_timestamp_isSet;
}

bool OAICompositeAlarm::is_state_updated_timestamp_Valid() const{
    return m_state_updated_timestamp_isValid;
}

OAIStateValue OAICompositeAlarm::getStateValue() const {
    return m_state_value;
}
void OAICompositeAlarm::setStateValue(const OAIStateValue &state_value) {
    m_state_value = state_value;
    m_state_value_isSet = true;
}

bool OAICompositeAlarm::is_state_value_Set() const{
    return m_state_value_isSet;
}

bool OAICompositeAlarm::is_state_value_Valid() const{
    return m_state_value_isValid;
}

QDateTime OAICompositeAlarm::getStateTransitionedTimestamp() const {
    return m_state_transitioned_timestamp;
}
void OAICompositeAlarm::setStateTransitionedTimestamp(const QDateTime &state_transitioned_timestamp) {
    m_state_transitioned_timestamp = state_transitioned_timestamp;
    m_state_transitioned_timestamp_isSet = true;
}

bool OAICompositeAlarm::is_state_transitioned_timestamp_Set() const{
    return m_state_transitioned_timestamp_isSet;
}

bool OAICompositeAlarm::is_state_transitioned_timestamp_Valid() const{
    return m_state_transitioned_timestamp_isValid;
}

OAIActionsSuppressedBy OAICompositeAlarm::getActionsSuppressedBy() const {
    return m_actions_suppressed_by;
}
void OAICompositeAlarm::setActionsSuppressedBy(const OAIActionsSuppressedBy &actions_suppressed_by) {
    m_actions_suppressed_by = actions_suppressed_by;
    m_actions_suppressed_by_isSet = true;
}

bool OAICompositeAlarm::is_actions_suppressed_by_Set() const{
    return m_actions_suppressed_by_isSet;
}

bool OAICompositeAlarm::is_actions_suppressed_by_Valid() const{
    return m_actions_suppressed_by_isValid;
}

QString OAICompositeAlarm::getActionsSuppressedReason() const {
    return m_actions_suppressed_reason;
}
void OAICompositeAlarm::setActionsSuppressedReason(const QString &actions_suppressed_reason) {
    m_actions_suppressed_reason = actions_suppressed_reason;
    m_actions_suppressed_reason_isSet = true;
}

bool OAICompositeAlarm::is_actions_suppressed_reason_Set() const{
    return m_actions_suppressed_reason_isSet;
}

bool OAICompositeAlarm::is_actions_suppressed_reason_Valid() const{
    return m_actions_suppressed_reason_isValid;
}

QString OAICompositeAlarm::getActionsSuppressor() const {
    return m_actions_suppressor;
}
void OAICompositeAlarm::setActionsSuppressor(const QString &actions_suppressor) {
    m_actions_suppressor = actions_suppressor;
    m_actions_suppressor_isSet = true;
}

bool OAICompositeAlarm::is_actions_suppressor_Set() const{
    return m_actions_suppressor_isSet;
}

bool OAICompositeAlarm::is_actions_suppressor_Valid() const{
    return m_actions_suppressor_isValid;
}

qint32 OAICompositeAlarm::getActionsSuppressorWaitPeriod() const {
    return m_actions_suppressor_wait_period;
}
void OAICompositeAlarm::setActionsSuppressorWaitPeriod(const qint32 &actions_suppressor_wait_period) {
    m_actions_suppressor_wait_period = actions_suppressor_wait_period;
    m_actions_suppressor_wait_period_isSet = true;
}

bool OAICompositeAlarm::is_actions_suppressor_wait_period_Set() const{
    return m_actions_suppressor_wait_period_isSet;
}

bool OAICompositeAlarm::is_actions_suppressor_wait_period_Valid() const{
    return m_actions_suppressor_wait_period_isValid;
}

qint32 OAICompositeAlarm::getActionsSuppressorExtensionPeriod() const {
    return m_actions_suppressor_extension_period;
}
void OAICompositeAlarm::setActionsSuppressorExtensionPeriod(const qint32 &actions_suppressor_extension_period) {
    m_actions_suppressor_extension_period = actions_suppressor_extension_period;
    m_actions_suppressor_extension_period_isSet = true;
}

bool OAICompositeAlarm::is_actions_suppressor_extension_period_Set() const{
    return m_actions_suppressor_extension_period_isSet;
}

bool OAICompositeAlarm::is_actions_suppressor_extension_period_Valid() const{
    return m_actions_suppressor_extension_period_isValid;
}

bool OAICompositeAlarm::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alarm_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alarm_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alarm_configuration_updated_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alarm_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alarm_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alarm_rule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insufficient_data_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ok_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_reason_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_updated_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_transitioned_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actions_suppressed_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_actions_suppressed_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actions_suppressor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actions_suppressor_wait_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actions_suppressor_extension_period_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompositeAlarm::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
