/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricDatum.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricDatum::OAIMetricDatum(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricDatum::OAIMetricDatum() {
    this->initializeModel();
}

OAIMetricDatum::~OAIMetricDatum() {}

void OAIMetricDatum::initializeModel() {

    m_metric_name_isSet = false;
    m_metric_name_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_statistic_values_isSet = false;
    m_statistic_values_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;

    m_counts_isSet = false;
    m_counts_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_storage_resolution_isSet = false;
    m_storage_resolution_isValid = false;
}

void OAIMetricDatum::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricDatum::fromJsonObject(QJsonObject json) {

    m_metric_name_isValid = ::OpenAPI::fromJsonValue(m_metric_name, json[QString("MetricName")]);
    m_metric_name_isSet = !json[QString("MetricName")].isNull() && m_metric_name_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("Dimensions")]);
    m_dimensions_isSet = !json[QString("Dimensions")].isNull() && m_dimensions_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("Timestamp")]);
    m_timestamp_isSet = !json[QString("Timestamp")].isNull() && m_timestamp_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_statistic_values_isValid = ::OpenAPI::fromJsonValue(m_statistic_values, json[QString("StatisticValues")]);
    m_statistic_values_isSet = !json[QString("StatisticValues")].isNull() && m_statistic_values_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("Values")]);
    m_values_isSet = !json[QString("Values")].isNull() && m_values_isValid;

    m_counts_isValid = ::OpenAPI::fromJsonValue(m_counts, json[QString("Counts")]);
    m_counts_isSet = !json[QString("Counts")].isNull() && m_counts_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("Unit")]);
    m_unit_isSet = !json[QString("Unit")].isNull() && m_unit_isValid;

    m_storage_resolution_isValid = ::OpenAPI::fromJsonValue(m_storage_resolution, json[QString("StorageResolution")]);
    m_storage_resolution_isSet = !json[QString("StorageResolution")].isNull() && m_storage_resolution_isValid;
}

QString OAIMetricDatum::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricDatum::asJsonObject() const {
    QJsonObject obj;
    if (m_metric_name_isSet) {
        obj.insert(QString("MetricName"), ::OpenAPI::toJsonValue(m_metric_name));
    }
    if (m_dimensions.isSet()) {
        obj.insert(QString("Dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("Timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_statistic_values.isSet()) {
        obj.insert(QString("StatisticValues"), ::OpenAPI::toJsonValue(m_statistic_values));
    }
    if (m_values.isSet()) {
        obj.insert(QString("Values"), ::OpenAPI::toJsonValue(m_values));
    }
    if (m_counts.isSet()) {
        obj.insert(QString("Counts"), ::OpenAPI::toJsonValue(m_counts));
    }
    if (m_unit.isSet()) {
        obj.insert(QString("Unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    if (m_storage_resolution_isSet) {
        obj.insert(QString("StorageResolution"), ::OpenAPI::toJsonValue(m_storage_resolution));
    }
    return obj;
}

QString OAIMetricDatum::getMetricName() const {
    return m_metric_name;
}
void OAIMetricDatum::setMetricName(const QString &metric_name) {
    m_metric_name = metric_name;
    m_metric_name_isSet = true;
}

bool OAIMetricDatum::is_metric_name_Set() const{
    return m_metric_name_isSet;
}

bool OAIMetricDatum::is_metric_name_Valid() const{
    return m_metric_name_isValid;
}

QList OAIMetricDatum::getDimensions() const {
    return m_dimensions;
}
void OAIMetricDatum::setDimensions(const QList &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIMetricDatum::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIMetricDatum::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QDateTime OAIMetricDatum::getTimestamp() const {
    return m_timestamp;
}
void OAIMetricDatum::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIMetricDatum::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIMetricDatum::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

double OAIMetricDatum::getValue() const {
    return m_value;
}
void OAIMetricDatum::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIMetricDatum::is_value_Set() const{
    return m_value_isSet;
}

bool OAIMetricDatum::is_value_Valid() const{
    return m_value_isValid;
}

OAIMetricDatum_StatisticValues OAIMetricDatum::getStatisticValues() const {
    return m_statistic_values;
}
void OAIMetricDatum::setStatisticValues(const OAIMetricDatum_StatisticValues &statistic_values) {
    m_statistic_values = statistic_values;
    m_statistic_values_isSet = true;
}

bool OAIMetricDatum::is_statistic_values_Set() const{
    return m_statistic_values_isSet;
}

bool OAIMetricDatum::is_statistic_values_Valid() const{
    return m_statistic_values_isValid;
}

QList OAIMetricDatum::getValues() const {
    return m_values;
}
void OAIMetricDatum::setValues(const QList &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIMetricDatum::is_values_Set() const{
    return m_values_isSet;
}

bool OAIMetricDatum::is_values_Valid() const{
    return m_values_isValid;
}

QList OAIMetricDatum::getCounts() const {
    return m_counts;
}
void OAIMetricDatum::setCounts(const QList &counts) {
    m_counts = counts;
    m_counts_isSet = true;
}

bool OAIMetricDatum::is_counts_Set() const{
    return m_counts_isSet;
}

bool OAIMetricDatum::is_counts_Valid() const{
    return m_counts_isValid;
}

OAIStandardUnit OAIMetricDatum::getUnit() const {
    return m_unit;
}
void OAIMetricDatum::setUnit(const OAIStandardUnit &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIMetricDatum::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIMetricDatum::is_unit_Valid() const{
    return m_unit_isValid;
}

qint32 OAIMetricDatum::getStorageResolution() const {
    return m_storage_resolution;
}
void OAIMetricDatum::setStorageResolution(const qint32 &storage_resolution) {
    m_storage_resolution = storage_resolution;
    m_storage_resolution_isSet = true;
}

bool OAIMetricDatum::is_storage_resolution_Set() const{
    return m_storage_resolution_isSet;
}

bool OAIMetricDatum::is_storage_resolution_Valid() const{
    return m_storage_resolution_isValid;
}

bool OAIMetricDatum::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metric_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistic_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_resolution_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricDatum::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_metric_name_isValid && true;
}

} // namespace OpenAPI
