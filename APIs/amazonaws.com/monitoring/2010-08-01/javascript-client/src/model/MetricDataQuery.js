/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MetricDataQueryMetricStat from './MetricDataQueryMetricStat';

/**
 * The MetricDataQuery model module.
 * @module model/MetricDataQuery
 * @version 2010-08-01
 */
class MetricDataQuery {
    /**
     * Constructs a new <code>MetricDataQuery</code>.
     * &lt;p&gt;This structure is used in both &lt;code&gt;GetMetricData&lt;/code&gt; and &lt;code&gt;PutMetricAlarm&lt;/code&gt;. The supported use of this structure is different for those two operations.&lt;/p&gt; &lt;p&gt;When used in &lt;code&gt;GetMetricData&lt;/code&gt;, it indicates the metric data to return, and whether this call is just retrieving a batch set of data for one metric, or is performing a Metrics Insights query or a math expression. A single &lt;code&gt;GetMetricData&lt;/code&gt; call can include up to 500 &lt;code&gt;MetricDataQuery&lt;/code&gt; structures.&lt;/p&gt; &lt;p&gt;When used in &lt;code&gt;PutMetricAlarm&lt;/code&gt;, it enables you to create an alarm based on a metric math expression. Each &lt;code&gt;MetricDataQuery&lt;/code&gt; in the array specifies either a metric to retrieve, or a math expression to be performed on retrieved metrics. A single &lt;code&gt;PutMetricAlarm&lt;/code&gt; call can include up to 20 &lt;code&gt;MetricDataQuery&lt;/code&gt; structures in the array. The 20 structures can include as many as 10 structures that contain a &lt;code&gt;MetricStat&lt;/code&gt; parameter to retrieve a metric, and as many as 10 structures that contain the &lt;code&gt;Expression&lt;/code&gt; parameter to perform a math expression. Of those &lt;code&gt;Expression&lt;/code&gt; structures, one must have &lt;code&gt;true&lt;/code&gt; as the value for &lt;code&gt;ReturnData&lt;/code&gt;. The result of this expression is the value the alarm watches.&lt;/p&gt; &lt;p&gt;Any expression used in a &lt;code&gt;PutMetricAlarm&lt;/code&gt; operation must return a single time series. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax\&quot;&gt;Metric Math Syntax and Functions&lt;/a&gt; in the &lt;i&gt;Amazon CloudWatch User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Some of the parameters of this structure also have different uses whether you are using this structure in a &lt;code&gt;GetMetricData&lt;/code&gt; operation or a &lt;code&gt;PutMetricAlarm&lt;/code&gt; operation. These differences are explained in the following parameter list.&lt;/p&gt;
     * @alias module:model/MetricDataQuery
     * @param id {String} 
     */
    constructor(id) { 
        
        MetricDataQuery.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) { 
        obj['Id'] = id;
    }

    /**
     * Constructs a <code>MetricDataQuery</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetricDataQuery} obj Optional instance to populate.
     * @return {module:model/MetricDataQuery} The populated <code>MetricDataQuery</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetricDataQuery();

            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('MetricStat')) {
                obj['MetricStat'] = MetricDataQueryMetricStat.constructFromObject(data['MetricStat']);
            }
            if (data.hasOwnProperty('Expression')) {
                obj['Expression'] = ApiClient.convertToType(data['Expression'], 'String');
            }
            if (data.hasOwnProperty('Label')) {
                obj['Label'] = ApiClient.convertToType(data['Label'], 'String');
            }
            if (data.hasOwnProperty('ReturnData')) {
                obj['ReturnData'] = ApiClient.convertToType(data['ReturnData'], 'Boolean');
            }
            if (data.hasOwnProperty('Period')) {
                obj['Period'] = ApiClient.convertToType(data['Period'], 'Number');
            }
            if (data.hasOwnProperty('AccountId')) {
                obj['AccountId'] = ApiClient.convertToType(data['AccountId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetricDataQuery</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetricDataQuery</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MetricDataQuery.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Id`
        if (data['Id']) { // data not null
          String.validateJSON(data['Id']);
        }
        // validate the optional field `MetricStat`
        if (data['MetricStat']) { // data not null
          MetricDataQueryMetricStat.validateJSON(data['MetricStat']);
        }
        // validate the optional field `Expression`
        if (data['Expression']) { // data not null
          String.validateJSON(data['Expression']);
        }
        // validate the optional field `Label`
        if (data['Label']) { // data not null
          String.validateJSON(data['Label']);
        }
        // validate the optional field `ReturnData`
        if (data['ReturnData']) { // data not null
          Boolean.validateJSON(data['ReturnData']);
        }
        // validate the optional field `Period`
        if (data['Period']) { // data not null
          Number.validateJSON(data['Period']);
        }
        // validate the optional field `AccountId`
        if (data['AccountId']) { // data not null
          String.validateJSON(data['AccountId']);
        }

        return true;
    }


}

MetricDataQuery.RequiredProperties = ["Id"];

/**
 * @member {String} Id
 */
MetricDataQuery.prototype['Id'] = undefined;

/**
 * @member {module:model/MetricDataQueryMetricStat} MetricStat
 */
MetricDataQuery.prototype['MetricStat'] = undefined;

/**
 * @member {String} Expression
 */
MetricDataQuery.prototype['Expression'] = undefined;

/**
 * @member {String} Label
 */
MetricDataQuery.prototype['Label'] = undefined;

/**
 * @member {Boolean} ReturnData
 */
MetricDataQuery.prototype['ReturnData'] = undefined;

/**
 * @member {Number} Period
 */
MetricDataQuery.prototype['Period'] = undefined;

/**
 * @member {String} AccountId
 */
MetricDataQuery.prototype['AccountId'] = undefined;






export default MetricDataQuery;

