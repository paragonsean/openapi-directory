/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonCloudWatch);
  }
}(this, function(expect, AmazonCloudWatch) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonCloudWatch.GetMetricStreamOutput();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetMetricStreamOutput', function() {
    it('should create an instance of GetMetricStreamOutput', function() {
      // uncomment below and update the code to test GetMetricStreamOutput
      //var instance = new AmazonCloudWatch.GetMetricStreamOutput();
      //expect(instance).to.be.a(AmazonCloudWatch.GetMetricStreamOutput);
    });

    it('should have the property arn (base name: "Arn")', function() {
      // uncomment below and update the code to test the property arn
      //var instance = new AmazonCloudWatch.GetMetricStreamOutput();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "Name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new AmazonCloudWatch.GetMetricStreamOutput();
      //expect(instance).to.be();
    });

    it('should have the property includeFilters (base name: "IncludeFilters")', function() {
      // uncomment below and update the code to test the property includeFilters
      //var instance = new AmazonCloudWatch.GetMetricStreamOutput();
      //expect(instance).to.be();
    });

    it('should have the property excludeFilters (base name: "ExcludeFilters")', function() {
      // uncomment below and update the code to test the property excludeFilters
      //var instance = new AmazonCloudWatch.GetMetricStreamOutput();
      //expect(instance).to.be();
    });

    it('should have the property firehoseArn (base name: "FirehoseArn")', function() {
      // uncomment below and update the code to test the property firehoseArn
      //var instance = new AmazonCloudWatch.GetMetricStreamOutput();
      //expect(instance).to.be();
    });

    it('should have the property roleArn (base name: "RoleArn")', function() {
      // uncomment below and update the code to test the property roleArn
      //var instance = new AmazonCloudWatch.GetMetricStreamOutput();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "State")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new AmazonCloudWatch.GetMetricStreamOutput();
      //expect(instance).to.be();
    });

    it('should have the property creationDate (base name: "CreationDate")', function() {
      // uncomment below and update the code to test the property creationDate
      //var instance = new AmazonCloudWatch.GetMetricStreamOutput();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdateDate (base name: "LastUpdateDate")', function() {
      // uncomment below and update the code to test the property lastUpdateDate
      //var instance = new AmazonCloudWatch.GetMetricStreamOutput();
      //expect(instance).to.be();
    });

    it('should have the property outputFormat (base name: "OutputFormat")', function() {
      // uncomment below and update the code to test the property outputFormat
      //var instance = new AmazonCloudWatch.GetMetricStreamOutput();
      //expect(instance).to.be();
    });

    it('should have the property statisticsConfigurations (base name: "StatisticsConfigurations")', function() {
      // uncomment below and update the code to test the property statisticsConfigurations
      //var instance = new AmazonCloudWatch.GetMetricStreamOutput();
      //expect(instance).to.be();
    });

    it('should have the property includeLinkedAccountsMetrics (base name: "IncludeLinkedAccountsMetrics")', function() {
      // uncomment below and update the code to test the property includeLinkedAccountsMetrics
      //var instance = new AmazonCloudWatch.GetMetricStreamOutput();
      //expect(instance).to.be();
    });

  });

}));
