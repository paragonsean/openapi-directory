/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonCloudWatch);
  }
}(this, function(expect, AmazonCloudWatch) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonCloudWatch.MetricDataResult();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MetricDataResult', function() {
    it('should create an instance of MetricDataResult', function() {
      // uncomment below and update the code to test MetricDataResult
      //var instance = new AmazonCloudWatch.MetricDataResult();
      //expect(instance).to.be.a(AmazonCloudWatch.MetricDataResult);
    });

    it('should have the property id (base name: "Id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new AmazonCloudWatch.MetricDataResult();
      //expect(instance).to.be();
    });

    it('should have the property label (base name: "Label")', function() {
      // uncomment below and update the code to test the property label
      //var instance = new AmazonCloudWatch.MetricDataResult();
      //expect(instance).to.be();
    });

    it('should have the property timestamps (base name: "Timestamps")', function() {
      // uncomment below and update the code to test the property timestamps
      //var instance = new AmazonCloudWatch.MetricDataResult();
      //expect(instance).to.be();
    });

    it('should have the property values (base name: "Values")', function() {
      // uncomment below and update the code to test the property values
      //var instance = new AmazonCloudWatch.MetricDataResult();
      //expect(instance).to.be();
    });

    it('should have the property statusCode (base name: "StatusCode")', function() {
      // uncomment below and update the code to test the property statusCode
      //var instance = new AmazonCloudWatch.MetricDataResult();
      //expect(instance).to.be();
    });

    it('should have the property messages (base name: "Messages")', function() {
      // uncomment below and update the code to test the property messages
      //var instance = new AmazonCloudWatch.MetricDataResult();
      //expect(instance).to.be();
    });

  });

}));
