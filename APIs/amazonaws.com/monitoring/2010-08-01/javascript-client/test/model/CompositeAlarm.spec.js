/**
 * Amazon CloudWatch
 * <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.</p> <p>CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.</p> <p>In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health.</p>
 *
 * The version of the OpenAPI document: 2010-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonCloudWatch);
  }
}(this, function(expect, AmazonCloudWatch) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonCloudWatch.CompositeAlarm();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CompositeAlarm', function() {
    it('should create an instance of CompositeAlarm', function() {
      // uncomment below and update the code to test CompositeAlarm
      //var instance = new AmazonCloudWatch.CompositeAlarm();
      //expect(instance).to.be.a(AmazonCloudWatch.CompositeAlarm);
    });

    it('should have the property actionsEnabled (base name: "ActionsEnabled")', function() {
      // uncomment below and update the code to test the property actionsEnabled
      //var instance = new AmazonCloudWatch.CompositeAlarm();
      //expect(instance).to.be();
    });

    it('should have the property alarmActions (base name: "AlarmActions")', function() {
      // uncomment below and update the code to test the property alarmActions
      //var instance = new AmazonCloudWatch.CompositeAlarm();
      //expect(instance).to.be();
    });

    it('should have the property alarmArn (base name: "AlarmArn")', function() {
      // uncomment below and update the code to test the property alarmArn
      //var instance = new AmazonCloudWatch.CompositeAlarm();
      //expect(instance).to.be();
    });

    it('should have the property alarmConfigurationUpdatedTimestamp (base name: "AlarmConfigurationUpdatedTimestamp")', function() {
      // uncomment below and update the code to test the property alarmConfigurationUpdatedTimestamp
      //var instance = new AmazonCloudWatch.CompositeAlarm();
      //expect(instance).to.be();
    });

    it('should have the property alarmDescription (base name: "AlarmDescription")', function() {
      // uncomment below and update the code to test the property alarmDescription
      //var instance = new AmazonCloudWatch.CompositeAlarm();
      //expect(instance).to.be();
    });

    it('should have the property alarmName (base name: "AlarmName")', function() {
      // uncomment below and update the code to test the property alarmName
      //var instance = new AmazonCloudWatch.CompositeAlarm();
      //expect(instance).to.be();
    });

    it('should have the property alarmRule (base name: "AlarmRule")', function() {
      // uncomment below and update the code to test the property alarmRule
      //var instance = new AmazonCloudWatch.CompositeAlarm();
      //expect(instance).to.be();
    });

    it('should have the property insufficientDataActions (base name: "InsufficientDataActions")', function() {
      // uncomment below and update the code to test the property insufficientDataActions
      //var instance = new AmazonCloudWatch.CompositeAlarm();
      //expect(instance).to.be();
    });

    it('should have the property oKActions (base name: "OKActions")', function() {
      // uncomment below and update the code to test the property oKActions
      //var instance = new AmazonCloudWatch.CompositeAlarm();
      //expect(instance).to.be();
    });

    it('should have the property stateReason (base name: "StateReason")', function() {
      // uncomment below and update the code to test the property stateReason
      //var instance = new AmazonCloudWatch.CompositeAlarm();
      //expect(instance).to.be();
    });

    it('should have the property stateReasonData (base name: "StateReasonData")', function() {
      // uncomment below and update the code to test the property stateReasonData
      //var instance = new AmazonCloudWatch.CompositeAlarm();
      //expect(instance).to.be();
    });

    it('should have the property stateUpdatedTimestamp (base name: "StateUpdatedTimestamp")', function() {
      // uncomment below and update the code to test the property stateUpdatedTimestamp
      //var instance = new AmazonCloudWatch.CompositeAlarm();
      //expect(instance).to.be();
    });

    it('should have the property stateValue (base name: "StateValue")', function() {
      // uncomment below and update the code to test the property stateValue
      //var instance = new AmazonCloudWatch.CompositeAlarm();
      //expect(instance).to.be();
    });

    it('should have the property stateTransitionedTimestamp (base name: "StateTransitionedTimestamp")', function() {
      // uncomment below and update the code to test the property stateTransitionedTimestamp
      //var instance = new AmazonCloudWatch.CompositeAlarm();
      //expect(instance).to.be();
    });

    it('should have the property actionsSuppressedBy (base name: "ActionsSuppressedBy")', function() {
      // uncomment below and update the code to test the property actionsSuppressedBy
      //var instance = new AmazonCloudWatch.CompositeAlarm();
      //expect(instance).to.be();
    });

    it('should have the property actionsSuppressedReason (base name: "ActionsSuppressedReason")', function() {
      // uncomment below and update the code to test the property actionsSuppressedReason
      //var instance = new AmazonCloudWatch.CompositeAlarm();
      //expect(instance).to.be();
    });

    it('should have the property actionsSuppressor (base name: "ActionsSuppressor")', function() {
      // uncomment below and update the code to test the property actionsSuppressor
      //var instance = new AmazonCloudWatch.CompositeAlarm();
      //expect(instance).to.be();
    });

    it('should have the property actionsSuppressorWaitPeriod (base name: "ActionsSuppressorWaitPeriod")', function() {
      // uncomment below and update the code to test the property actionsSuppressorWaitPeriod
      //var instance = new AmazonCloudWatch.CompositeAlarm();
      //expect(instance).to.be();
    });

    it('should have the property actionsSuppressorExtensionPeriod (base name: "ActionsSuppressorExtensionPeriod")', function() {
      // uncomment below and update the code to test the property actionsSuppressorExtensionPeriod
      //var instance = new AmazonCloudWatch.CompositeAlarm();
      //expect(instance).to.be();
    });

  });

}));
