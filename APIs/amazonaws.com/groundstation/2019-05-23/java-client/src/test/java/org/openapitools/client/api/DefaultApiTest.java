/*
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ConfigIdResponse;
import org.openapitools.client.model.ContactIdResponse;
import org.openapitools.client.model.CreateConfigRequest;
import org.openapitools.client.model.CreateDataflowEndpointGroupRequest;
import org.openapitools.client.model.CreateEphemerisRequest;
import org.openapitools.client.model.CreateMissionProfileRequest;
import org.openapitools.client.model.DataflowEndpointGroupIdResponse;
import org.openapitools.client.model.DescribeContactResponse;
import org.openapitools.client.model.DescribeEphemerisResponse;
import org.openapitools.client.model.EphemerisIdResponse;
import org.openapitools.client.model.GetAgentConfigurationResponse;
import org.openapitools.client.model.GetConfigResponse;
import org.openapitools.client.model.GetDataflowEndpointGroupResponse;
import org.openapitools.client.model.GetMinuteUsageRequest;
import org.openapitools.client.model.GetMinuteUsageResponse;
import org.openapitools.client.model.GetMissionProfileResponse;
import org.openapitools.client.model.GetSatelliteResponse;
import org.openapitools.client.model.ListConfigsResponse;
import org.openapitools.client.model.ListContactsRequest;
import org.openapitools.client.model.ListContactsResponse;
import org.openapitools.client.model.ListDataflowEndpointGroupsResponse;
import org.openapitools.client.model.ListEphemeridesRequest;
import org.openapitools.client.model.ListEphemeridesResponse;
import org.openapitools.client.model.ListGroundStationsResponse;
import org.openapitools.client.model.ListMissionProfilesResponse;
import org.openapitools.client.model.ListSatellitesResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.MissionProfileIdResponse;
import org.openapitools.client.model.RegisterAgentRequest;
import org.openapitools.client.model.RegisterAgentResponse;
import org.openapitools.client.model.ReserveContactRequest;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UpdateAgentStatusRequest;
import org.openapitools.client.model.UpdateAgentStatusResponse;
import org.openapitools.client.model.UpdateConfigRequest;
import org.openapitools.client.model.UpdateEphemerisRequest;
import org.openapitools.client.model.UpdateMissionProfileRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Cancels a contact with a specified contact ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelContactTest() throws ApiException {
        String contactId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ContactIdResponse response = api.cancelContact(contactId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a &lt;code&gt;Config&lt;/code&gt; with the specified &lt;code&gt;configData&lt;/code&gt; parameters.&lt;/p&gt; &lt;p&gt;Only one type of &lt;code&gt;configData&lt;/code&gt; can be specified.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createConfigTest() throws ApiException {
        CreateConfigRequest createConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ConfigIdResponse response = api.createConfig(createConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a &lt;code&gt;DataflowEndpoint&lt;/code&gt; group containing the specified list of &lt;code&gt;DataflowEndpoint&lt;/code&gt; objects.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;name&lt;/code&gt; field in each endpoint is used in your mission profile &lt;code&gt;DataflowEndpointConfig&lt;/code&gt; to specify which endpoints to use during a contact.&lt;/p&gt; &lt;p&gt;When a contact uses multiple &lt;code&gt;DataflowEndpointConfig&lt;/code&gt; objects, each &lt;code&gt;Config&lt;/code&gt; must match a &lt;code&gt;DataflowEndpoint&lt;/code&gt; in the same group.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDataflowEndpointGroupTest() throws ApiException {
        CreateDataflowEndpointGroupRequest createDataflowEndpointGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DataflowEndpointGroupIdResponse response = api.createDataflowEndpointGroup(createDataflowEndpointGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an Ephemeris with the specified &lt;code&gt;EphemerisData&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEphemerisTest() throws ApiException {
        CreateEphemerisRequest createEphemerisRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        EphemerisIdResponse response = api.createEphemeris(createEphemerisRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a mission profile.&lt;/p&gt; &lt;p&gt; &lt;code&gt;dataflowEdges&lt;/code&gt; is a list of lists of strings. Each lower level list of strings has two elements: a &lt;i&gt;from&lt;/i&gt; ARN and a &lt;i&gt;to&lt;/i&gt; ARN.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMissionProfileTest() throws ApiException {
        CreateMissionProfileRequest createMissionProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        MissionProfileIdResponse response = api.createMissionProfile(createMissionProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a &lt;code&gt;Config&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteConfigTest() throws ApiException {
        String configId = null;
        String configType = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ConfigIdResponse response = api.deleteConfig(configId, configType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a dataflow endpoint group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDataflowEndpointGroupTest() throws ApiException {
        String dataflowEndpointGroupId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DataflowEndpointGroupIdResponse response = api.deleteDataflowEndpointGroup(dataflowEndpointGroupId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an ephemeris
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEphemerisTest() throws ApiException {
        String ephemerisId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        EphemerisIdResponse response = api.deleteEphemeris(ephemerisId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a mission profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMissionProfileTest() throws ApiException {
        String missionProfileId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        MissionProfileIdResponse response = api.deleteMissionProfile(missionProfileId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes an existing contact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeContactTest() throws ApiException {
        String contactId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeContactResponse response = api.describeContact(contactId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes an existing ephemeris.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeEphemerisTest() throws ApiException {
        String ephemerisId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeEphemerisResponse response = api.describeEphemeris(ephemerisId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;note&gt; &lt;p&gt; For use by AWS Ground Station Agent and shouldn&#39;t be called directly.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Gets the latest configuration information for a registered agent.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAgentConfigurationTest() throws ApiException {
        String agentId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAgentConfigurationResponse response = api.getAgentConfiguration(agentId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns &lt;code&gt;Config&lt;/code&gt; information.&lt;/p&gt; &lt;p&gt;Only one &lt;code&gt;Config&lt;/code&gt; response can be returned.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConfigTest() throws ApiException {
        String configId = null;
        String configType = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetConfigResponse response = api.getConfig(configId, configType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the dataflow endpoint group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataflowEndpointGroupTest() throws ApiException {
        String dataflowEndpointGroupId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDataflowEndpointGroupResponse response = api.getDataflowEndpointGroup(dataflowEndpointGroupId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the number of reserved minutes used by account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMinuteUsageTest() throws ApiException {
        GetMinuteUsageRequest getMinuteUsageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetMinuteUsageResponse response = api.getMinuteUsage(getMinuteUsageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a mission profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMissionProfileTest() throws ApiException {
        String missionProfileId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetMissionProfileResponse response = api.getMissionProfile(missionProfileId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a satellite.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSatelliteTest() throws ApiException {
        String satelliteId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSatelliteResponse response = api.getSatellite(satelliteId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a list of &lt;code&gt;Config&lt;/code&gt; objects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConfigsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListConfigsResponse response = api.listConfigs(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of contacts.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;statusList&lt;/code&gt; contains AVAILABLE, the request must include &lt;code&gt;groundStation&lt;/code&gt;, &lt;code&gt;missionprofileArn&lt;/code&gt;, and &lt;code&gt;satelliteArn&lt;/code&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listContactsTest() throws ApiException {
        ListContactsRequest listContactsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListContactsResponse response = api.listContacts(listContactsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of &lt;code&gt;DataflowEndpoint&lt;/code&gt; groups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDataflowEndpointGroupsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListDataflowEndpointGroupsResponse response = api.listDataflowEndpointGroups(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * List existing ephemerides.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEphemeridesTest() throws ApiException {
        ListEphemeridesRequest listEphemeridesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListEphemeridesResponse response = api.listEphemerides(listEphemeridesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of ground stations. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGroundStationsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String satelliteId = null;
        ListGroundStationsResponse response = api.listGroundStations(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, satelliteId);
        // TODO: test validations
    }

    /**
     * Returns a list of mission profiles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMissionProfilesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListMissionProfilesResponse response = api.listMissionProfiles(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of satellites.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSatellitesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListSatellitesResponse response = api.listSatellites(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of tags for a specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;note&gt; &lt;p&gt; For use by AWS Ground Station Agent and shouldn&#39;t be called directly.&lt;/p&gt; &lt;/note&gt; &lt;p&gt; Registers a new agent with AWS Ground Station. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerAgentTest() throws ApiException {
        RegisterAgentRequest registerAgentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RegisterAgentResponse response = api.registerAgent(registerAgentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Reserves a contact using specified parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reserveContactTest() throws ApiException {
        ReserveContactRequest reserveContactRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ContactIdResponse response = api.reserveContact(reserveContactRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Assigns a tag to a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deassigns a resource tag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;note&gt; &lt;p&gt; For use by AWS Ground Station Agent and shouldn&#39;t be called directly.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Update the status of the agent.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAgentStatusTest() throws ApiException {
        String agentId = null;
        UpdateAgentStatusRequest updateAgentStatusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateAgentStatusResponse response = api.updateAgentStatus(agentId, updateAgentStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the &lt;code&gt;Config&lt;/code&gt; used when scheduling contacts.&lt;/p&gt; &lt;p&gt;Updating a &lt;code&gt;Config&lt;/code&gt; will not update the execution parameters for existing future contacts scheduled with this &lt;code&gt;Config&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConfigTest() throws ApiException {
        String configId = null;
        String configType = null;
        UpdateConfigRequest updateConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ConfigIdResponse response = api.updateConfig(configId, configType, updateConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing ephemeris
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEphemerisTest() throws ApiException {
        String ephemerisId = null;
        UpdateEphemerisRequest updateEphemerisRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        EphemerisIdResponse response = api.updateEphemeris(ephemerisId, updateEphemerisRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates a mission profile.&lt;/p&gt; &lt;p&gt;Updating a mission profile will not update the execution parameters for existing future contacts.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMissionProfileTest() throws ApiException {
        String missionProfileId = null;
        UpdateMissionProfileRequest updateMissionProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        MissionProfileIdResponse response = api.updateMissionProfile(missionProfileId, updateMissionProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
