/*
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContactStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListContactsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:02.114064-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListContactsRequest {
  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_GROUND_STATION = "groundStation";
  @SerializedName(SERIALIZED_NAME_GROUND_STATION)
  private String groundStation;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "maxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public static final String SERIALIZED_NAME_MISSION_PROFILE_ARN = "missionProfileArn";
  @SerializedName(SERIALIZED_NAME_MISSION_PROFILE_ARN)
  private String missionProfileArn;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "nextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public static final String SERIALIZED_NAME_SATELLITE_ARN = "satelliteArn";
  @SerializedName(SERIALIZED_NAME_SATELLITE_ARN)
  private String satelliteArn;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STATUS_LIST = "statusList";
  @SerializedName(SERIALIZED_NAME_STATUS_LIST)
  private List<ContactStatus> statusList = new ArrayList<>();

  public ListContactsRequest() {
  }

  public ListContactsRequest endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * End time of a contact in UTC.
   * @return endTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public ListContactsRequest groundStation(String groundStation) {
    this.groundStation = groundStation;
    return this;
  }

  /**
   * Name of a ground station.
   * @return groundStation
   */
  @javax.annotation.Nullable
  public String getGroundStation() {
    return groundStation;
  }

  public void setGroundStation(String groundStation) {
    this.groundStation = groundStation;
  }


  public ListContactsRequest maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * Maximum number of contacts returned.
   * minimum: 0
   * maximum: 100
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }


  public ListContactsRequest missionProfileArn(String missionProfileArn) {
    this.missionProfileArn = missionProfileArn;
    return this;
  }

  /**
   * ARN of a mission profile.
   * @return missionProfileArn
   */
  @javax.annotation.Nullable
  public String getMissionProfileArn() {
    return missionProfileArn;
  }

  public void setMissionProfileArn(String missionProfileArn) {
    this.missionProfileArn = missionProfileArn;
  }


  public ListContactsRequest nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Next token returned in the request of a previous &lt;code&gt;ListContacts&lt;/code&gt; call. Used to get the next page of results.
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public ListContactsRequest satelliteArn(String satelliteArn) {
    this.satelliteArn = satelliteArn;
    return this;
  }

  /**
   * ARN of a satellite.
   * @return satelliteArn
   */
  @javax.annotation.Nullable
  public String getSatelliteArn() {
    return satelliteArn;
  }

  public void setSatelliteArn(String satelliteArn) {
    this.satelliteArn = satelliteArn;
  }


  public ListContactsRequest startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Start time of a contact in UTC.
   * @return startTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public ListContactsRequest statusList(List<ContactStatus> statusList) {
    this.statusList = statusList;
    return this;
  }

  public ListContactsRequest addStatusListItem(ContactStatus statusListItem) {
    if (this.statusList == null) {
      this.statusList = new ArrayList<>();
    }
    this.statusList.add(statusListItem);
    return this;
  }

  /**
   * Status of a contact reservation.
   * @return statusList
   */
  @javax.annotation.Nonnull
  public List<ContactStatus> getStatusList() {
    return statusList;
  }

  public void setStatusList(List<ContactStatus> statusList) {
    this.statusList = statusList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListContactsRequest listContactsRequest = (ListContactsRequest) o;
    return Objects.equals(this.endTime, listContactsRequest.endTime) &&
        Objects.equals(this.groundStation, listContactsRequest.groundStation) &&
        Objects.equals(this.maxResults, listContactsRequest.maxResults) &&
        Objects.equals(this.missionProfileArn, listContactsRequest.missionProfileArn) &&
        Objects.equals(this.nextToken, listContactsRequest.nextToken) &&
        Objects.equals(this.satelliteArn, listContactsRequest.satelliteArn) &&
        Objects.equals(this.startTime, listContactsRequest.startTime) &&
        Objects.equals(this.statusList, listContactsRequest.statusList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endTime, groundStation, maxResults, missionProfileArn, nextToken, satelliteArn, startTime, statusList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListContactsRequest {\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    groundStation: ").append(toIndentedString(groundStation)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    missionProfileArn: ").append(toIndentedString(missionProfileArn)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    satelliteArn: ").append(toIndentedString(satelliteArn)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    statusList: ").append(toIndentedString(statusList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endTime");
    openapiFields.add("groundStation");
    openapiFields.add("maxResults");
    openapiFields.add("missionProfileArn");
    openapiFields.add("nextToken");
    openapiFields.add("satelliteArn");
    openapiFields.add("startTime");
    openapiFields.add("statusList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("endTime");
    openapiRequiredFields.add("startTime");
    openapiRequiredFields.add("statusList");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListContactsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListContactsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListContactsRequest is not found in the empty JSON string", ListContactsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListContactsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListContactsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListContactsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("groundStation") != null && !jsonObj.get("groundStation").isJsonNull()) && !jsonObj.get("groundStation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groundStation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groundStation").toString()));
      }
      if ((jsonObj.get("missionProfileArn") != null && !jsonObj.get("missionProfileArn").isJsonNull()) && !jsonObj.get("missionProfileArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `missionProfileArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("missionProfileArn").toString()));
      }
      if ((jsonObj.get("nextToken") != null && !jsonObj.get("nextToken").isJsonNull()) && !jsonObj.get("nextToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextToken").toString()));
      }
      if ((jsonObj.get("satelliteArn") != null && !jsonObj.get("satelliteArn").isJsonNull()) && !jsonObj.get("satelliteArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `satelliteArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("satelliteArn").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("statusList") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("statusList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusList` to be an array in the JSON string but got `%s`", jsonObj.get("statusList").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListContactsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListContactsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListContactsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListContactsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ListContactsRequest>() {
           @Override
           public void write(JsonWriter out, ListContactsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListContactsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListContactsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListContactsRequest
   * @throws IOException if the JSON string is invalid with respect to ListContactsRequest
   */
  public static ListContactsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListContactsRequest.class);
  }

  /**
   * Convert an instance of ListContactsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

