/*
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details about an S3 recording &lt;code&gt;Config&lt;/code&gt; used in a contact.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:02.114064-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class S3RecordingDetails {
  public static final String SERIALIZED_NAME_BUCKET_ARN = "bucketArn";
  @SerializedName(SERIALIZED_NAME_BUCKET_ARN)
  private String bucketArn;

  public static final String SERIALIZED_NAME_KEY_TEMPLATE = "keyTemplate";
  @SerializedName(SERIALIZED_NAME_KEY_TEMPLATE)
  private String keyTemplate;

  public S3RecordingDetails() {
  }

  public S3RecordingDetails bucketArn(String bucketArn) {
    this.bucketArn = bucketArn;
    return this;
  }

  /**
   * Get bucketArn
   * @return bucketArn
   */
  @javax.annotation.Nullable
  public String getBucketArn() {
    return bucketArn;
  }

  public void setBucketArn(String bucketArn) {
    this.bucketArn = bucketArn;
  }


  public S3RecordingDetails keyTemplate(String keyTemplate) {
    this.keyTemplate = keyTemplate;
    return this;
  }

  /**
   * Get keyTemplate
   * @return keyTemplate
   */
  @javax.annotation.Nullable
  public String getKeyTemplate() {
    return keyTemplate;
  }

  public void setKeyTemplate(String keyTemplate) {
    this.keyTemplate = keyTemplate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    S3RecordingDetails s3RecordingDetails = (S3RecordingDetails) o;
    return Objects.equals(this.bucketArn, s3RecordingDetails.bucketArn) &&
        Objects.equals(this.keyTemplate, s3RecordingDetails.keyTemplate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bucketArn, keyTemplate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class S3RecordingDetails {\n");
    sb.append("    bucketArn: ").append(toIndentedString(bucketArn)).append("\n");
    sb.append("    keyTemplate: ").append(toIndentedString(keyTemplate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bucketArn");
    openapiFields.add("keyTemplate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to S3RecordingDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!S3RecordingDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in S3RecordingDetails is not found in the empty JSON string", S3RecordingDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!S3RecordingDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `S3RecordingDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bucketArn`
      if (jsonObj.get("bucketArn") != null && !jsonObj.get("bucketArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("bucketArn"));
      }
      // validate the optional field `keyTemplate`
      if (jsonObj.get("keyTemplate") != null && !jsonObj.get("keyTemplate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("keyTemplate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!S3RecordingDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'S3RecordingDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<S3RecordingDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(S3RecordingDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<S3RecordingDetails>() {
           @Override
           public void write(JsonWriter out, S3RecordingDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public S3RecordingDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of S3RecordingDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of S3RecordingDetails
   * @throws IOException if the JSON string is invalid with respect to S3RecordingDetails
   */
  public static S3RecordingDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, S3RecordingDetails.class);
  }

  /**
   * Convert an instance of S3RecordingDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

