/*
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RegisterAgentRequestAgentDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:02.114064-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RegisterAgentRequestAgentDetails {
  public static final String SERIALIZED_NAME_AGENT_CPU_CORES = "agentCpuCores";
  @SerializedName(SERIALIZED_NAME_AGENT_CPU_CORES)
  private List agentCpuCores;

  public static final String SERIALIZED_NAME_AGENT_VERSION = "agentVersion";
  @SerializedName(SERIALIZED_NAME_AGENT_VERSION)
  private String agentVersion;

  public static final String SERIALIZED_NAME_COMPONENT_VERSIONS = "componentVersions";
  @SerializedName(SERIALIZED_NAME_COMPONENT_VERSIONS)
  private List componentVersions;

  public static final String SERIALIZED_NAME_INSTANCE_ID = "instanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_INSTANCE_TYPE = "instanceType";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TYPE)
  private String instanceType;

  public static final String SERIALIZED_NAME_RESERVED_CPU_CORES = "reservedCpuCores";
  @SerializedName(SERIALIZED_NAME_RESERVED_CPU_CORES)
  private List reservedCpuCores;

  public RegisterAgentRequestAgentDetails() {
  }

  public RegisterAgentRequestAgentDetails agentCpuCores(List agentCpuCores) {
    this.agentCpuCores = agentCpuCores;
    return this;
  }

  /**
   * Get agentCpuCores
   * @return agentCpuCores
   */
  @javax.annotation.Nullable
  public List getAgentCpuCores() {
    return agentCpuCores;
  }

  public void setAgentCpuCores(List agentCpuCores) {
    this.agentCpuCores = agentCpuCores;
  }


  public RegisterAgentRequestAgentDetails agentVersion(String agentVersion) {
    this.agentVersion = agentVersion;
    return this;
  }

  /**
   * Get agentVersion
   * @return agentVersion
   */
  @javax.annotation.Nonnull
  public String getAgentVersion() {
    return agentVersion;
  }

  public void setAgentVersion(String agentVersion) {
    this.agentVersion = agentVersion;
  }


  public RegisterAgentRequestAgentDetails componentVersions(List componentVersions) {
    this.componentVersions = componentVersions;
    return this;
  }

  /**
   * Get componentVersions
   * @return componentVersions
   */
  @javax.annotation.Nonnull
  public List getComponentVersions() {
    return componentVersions;
  }

  public void setComponentVersions(List componentVersions) {
    this.componentVersions = componentVersions;
  }


  public RegisterAgentRequestAgentDetails instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  /**
   * Get instanceId
   * @return instanceId
   */
  @javax.annotation.Nonnull
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }


  public RegisterAgentRequestAgentDetails instanceType(String instanceType) {
    this.instanceType = instanceType;
    return this;
  }

  /**
   * Get instanceType
   * @return instanceType
   */
  @javax.annotation.Nonnull
  public String getInstanceType() {
    return instanceType;
  }

  public void setInstanceType(String instanceType) {
    this.instanceType = instanceType;
  }


  public RegisterAgentRequestAgentDetails reservedCpuCores(List reservedCpuCores) {
    this.reservedCpuCores = reservedCpuCores;
    return this;
  }

  /**
   * Get reservedCpuCores
   * @return reservedCpuCores
   */
  @javax.annotation.Nullable
  public List getReservedCpuCores() {
    return reservedCpuCores;
  }

  public void setReservedCpuCores(List reservedCpuCores) {
    this.reservedCpuCores = reservedCpuCores;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegisterAgentRequestAgentDetails registerAgentRequestAgentDetails = (RegisterAgentRequestAgentDetails) o;
    return Objects.equals(this.agentCpuCores, registerAgentRequestAgentDetails.agentCpuCores) &&
        Objects.equals(this.agentVersion, registerAgentRequestAgentDetails.agentVersion) &&
        Objects.equals(this.componentVersions, registerAgentRequestAgentDetails.componentVersions) &&
        Objects.equals(this.instanceId, registerAgentRequestAgentDetails.instanceId) &&
        Objects.equals(this.instanceType, registerAgentRequestAgentDetails.instanceType) &&
        Objects.equals(this.reservedCpuCores, registerAgentRequestAgentDetails.reservedCpuCores);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agentCpuCores, agentVersion, componentVersions, instanceId, instanceType, reservedCpuCores);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegisterAgentRequestAgentDetails {\n");
    sb.append("    agentCpuCores: ").append(toIndentedString(agentCpuCores)).append("\n");
    sb.append("    agentVersion: ").append(toIndentedString(agentVersion)).append("\n");
    sb.append("    componentVersions: ").append(toIndentedString(componentVersions)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    reservedCpuCores: ").append(toIndentedString(reservedCpuCores)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agentCpuCores");
    openapiFields.add("agentVersion");
    openapiFields.add("componentVersions");
    openapiFields.add("instanceId");
    openapiFields.add("instanceType");
    openapiFields.add("reservedCpuCores");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("agentVersion");
    openapiRequiredFields.add("componentVersions");
    openapiRequiredFields.add("instanceId");
    openapiRequiredFields.add("instanceType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RegisterAgentRequestAgentDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegisterAgentRequestAgentDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegisterAgentRequestAgentDetails is not found in the empty JSON string", RegisterAgentRequestAgentDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegisterAgentRequestAgentDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegisterAgentRequestAgentDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RegisterAgentRequestAgentDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `agentCpuCores`
      if (jsonObj.get("agentCpuCores") != null && !jsonObj.get("agentCpuCores").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("agentCpuCores"));
      }
      // validate the required field `agentVersion`
      String.validateJsonElement(jsonObj.get("agentVersion"));
      // validate the required field `componentVersions`
      List.validateJsonElement(jsonObj.get("componentVersions"));
      // validate the required field `instanceId`
      String.validateJsonElement(jsonObj.get("instanceId"));
      // validate the required field `instanceType`
      String.validateJsonElement(jsonObj.get("instanceType"));
      // validate the optional field `reservedCpuCores`
      if (jsonObj.get("reservedCpuCores") != null && !jsonObj.get("reservedCpuCores").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("reservedCpuCores"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegisterAgentRequestAgentDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegisterAgentRequestAgentDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegisterAgentRequestAgentDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegisterAgentRequestAgentDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<RegisterAgentRequestAgentDetails>() {
           @Override
           public void write(JsonWriter out, RegisterAgentRequestAgentDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegisterAgentRequestAgentDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RegisterAgentRequestAgentDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RegisterAgentRequestAgentDetails
   * @throws IOException if the JSON string is invalid with respect to RegisterAgentRequestAgentDetails
   */
  public static RegisterAgentRequestAgentDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegisterAgentRequestAgentDetails.class);
  }

  /**
   * Convert an instance of RegisterAgentRequestAgentDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

