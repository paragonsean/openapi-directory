/*
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AgentStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Data on the status of agent components.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:02.114064-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ComponentStatusData {
  public static final String SERIALIZED_NAME_BYTES_RECEIVED = "bytesReceived";
  @SerializedName(SERIALIZED_NAME_BYTES_RECEIVED)
  private Integer bytesReceived;

  public static final String SERIALIZED_NAME_BYTES_SENT = "bytesSent";
  @SerializedName(SERIALIZED_NAME_BYTES_SENT)
  private Integer bytesSent;

  public static final String SERIALIZED_NAME_CAPABILITY_ARN = "capabilityArn";
  @SerializedName(SERIALIZED_NAME_CAPABILITY_ARN)
  private String capabilityArn;

  public static final String SERIALIZED_NAME_COMPONENT_TYPE = "componentType";
  @SerializedName(SERIALIZED_NAME_COMPONENT_TYPE)
  private String componentType;

  public static final String SERIALIZED_NAME_DATAFLOW_ID = "dataflowId";
  @SerializedName(SERIALIZED_NAME_DATAFLOW_ID)
  private String dataflowId;

  public static final String SERIALIZED_NAME_PACKETS_DROPPED = "packetsDropped";
  @SerializedName(SERIALIZED_NAME_PACKETS_DROPPED)
  private Integer packetsDropped;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private AgentStatus status;

  public ComponentStatusData() {
  }

  public ComponentStatusData bytesReceived(Integer bytesReceived) {
    this.bytesReceived = bytesReceived;
    return this;
  }

  /**
   * Get bytesReceived
   * @return bytesReceived
   */
  @javax.annotation.Nullable
  public Integer getBytesReceived() {
    return bytesReceived;
  }

  public void setBytesReceived(Integer bytesReceived) {
    this.bytesReceived = bytesReceived;
  }


  public ComponentStatusData bytesSent(Integer bytesSent) {
    this.bytesSent = bytesSent;
    return this;
  }

  /**
   * Get bytesSent
   * @return bytesSent
   */
  @javax.annotation.Nullable
  public Integer getBytesSent() {
    return bytesSent;
  }

  public void setBytesSent(Integer bytesSent) {
    this.bytesSent = bytesSent;
  }


  public ComponentStatusData capabilityArn(String capabilityArn) {
    this.capabilityArn = capabilityArn;
    return this;
  }

  /**
   * Get capabilityArn
   * @return capabilityArn
   */
  @javax.annotation.Nonnull
  public String getCapabilityArn() {
    return capabilityArn;
  }

  public void setCapabilityArn(String capabilityArn) {
    this.capabilityArn = capabilityArn;
  }


  public ComponentStatusData componentType(String componentType) {
    this.componentType = componentType;
    return this;
  }

  /**
   * Get componentType
   * @return componentType
   */
  @javax.annotation.Nonnull
  public String getComponentType() {
    return componentType;
  }

  public void setComponentType(String componentType) {
    this.componentType = componentType;
  }


  public ComponentStatusData dataflowId(String dataflowId) {
    this.dataflowId = dataflowId;
    return this;
  }

  /**
   * Get dataflowId
   * @return dataflowId
   */
  @javax.annotation.Nonnull
  public String getDataflowId() {
    return dataflowId;
  }

  public void setDataflowId(String dataflowId) {
    this.dataflowId = dataflowId;
  }


  public ComponentStatusData packetsDropped(Integer packetsDropped) {
    this.packetsDropped = packetsDropped;
    return this;
  }

  /**
   * Get packetsDropped
   * @return packetsDropped
   */
  @javax.annotation.Nullable
  public Integer getPacketsDropped() {
    return packetsDropped;
  }

  public void setPacketsDropped(Integer packetsDropped) {
    this.packetsDropped = packetsDropped;
  }


  public ComponentStatusData status(AgentStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public AgentStatus getStatus() {
    return status;
  }

  public void setStatus(AgentStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComponentStatusData componentStatusData = (ComponentStatusData) o;
    return Objects.equals(this.bytesReceived, componentStatusData.bytesReceived) &&
        Objects.equals(this.bytesSent, componentStatusData.bytesSent) &&
        Objects.equals(this.capabilityArn, componentStatusData.capabilityArn) &&
        Objects.equals(this.componentType, componentStatusData.componentType) &&
        Objects.equals(this.dataflowId, componentStatusData.dataflowId) &&
        Objects.equals(this.packetsDropped, componentStatusData.packetsDropped) &&
        Objects.equals(this.status, componentStatusData.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bytesReceived, bytesSent, capabilityArn, componentType, dataflowId, packetsDropped, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComponentStatusData {\n");
    sb.append("    bytesReceived: ").append(toIndentedString(bytesReceived)).append("\n");
    sb.append("    bytesSent: ").append(toIndentedString(bytesSent)).append("\n");
    sb.append("    capabilityArn: ").append(toIndentedString(capabilityArn)).append("\n");
    sb.append("    componentType: ").append(toIndentedString(componentType)).append("\n");
    sb.append("    dataflowId: ").append(toIndentedString(dataflowId)).append("\n");
    sb.append("    packetsDropped: ").append(toIndentedString(packetsDropped)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bytesReceived");
    openapiFields.add("bytesSent");
    openapiFields.add("capabilityArn");
    openapiFields.add("componentType");
    openapiFields.add("dataflowId");
    openapiFields.add("packetsDropped");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("capabilityArn");
    openapiRequiredFields.add("componentType");
    openapiRequiredFields.add("dataflowId");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ComponentStatusData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ComponentStatusData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ComponentStatusData is not found in the empty JSON string", ComponentStatusData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ComponentStatusData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ComponentStatusData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ComponentStatusData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bytesReceived`
      if (jsonObj.get("bytesReceived") != null && !jsonObj.get("bytesReceived").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("bytesReceived"));
      }
      // validate the optional field `bytesSent`
      if (jsonObj.get("bytesSent") != null && !jsonObj.get("bytesSent").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("bytesSent"));
      }
      // validate the required field `capabilityArn`
      String.validateJsonElement(jsonObj.get("capabilityArn"));
      // validate the required field `componentType`
      String.validateJsonElement(jsonObj.get("componentType"));
      // validate the required field `dataflowId`
      String.validateJsonElement(jsonObj.get("dataflowId"));
      // validate the optional field `packetsDropped`
      if (jsonObj.get("packetsDropped") != null && !jsonObj.get("packetsDropped").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("packetsDropped"));
      }
      // validate the required field `status`
      AgentStatus.validateJsonElement(jsonObj.get("status"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ComponentStatusData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ComponentStatusData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ComponentStatusData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ComponentStatusData.class));

       return (TypeAdapter<T>) new TypeAdapter<ComponentStatusData>() {
           @Override
           public void write(JsonWriter out, ComponentStatusData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ComponentStatusData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ComponentStatusData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ComponentStatusData
   * @throws IOException if the JSON string is invalid with respect to ComponentStatusData
   */
  public static ComponentStatusData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ComponentStatusData.class);
  }

  /**
   * Convert an instance of ComponentStatusData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

