/*
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.EphemerisItemSourceS3Object;
import org.openapitools.client.model.EphemerisStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Ephemeris item.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:02.114064-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EphemerisItem {
  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_EPHEMERIS_ID = "ephemerisId";
  @SerializedName(SERIALIZED_NAME_EPHEMERIS_ID)
  private String ephemerisId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_SOURCE_S3_OBJECT = "sourceS3Object";
  @SerializedName(SERIALIZED_NAME_SOURCE_S3_OBJECT)
  private EphemerisItemSourceS3Object sourceS3Object;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private EphemerisStatus status;

  public EphemerisItem() {
  }

  public EphemerisItem creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public EphemerisItem enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public EphemerisItem ephemerisId(String ephemerisId) {
    this.ephemerisId = ephemerisId;
    return this;
  }

  /**
   * Get ephemerisId
   * @return ephemerisId
   */
  @javax.annotation.Nullable
  public String getEphemerisId() {
    return ephemerisId;
  }

  public void setEphemerisId(String ephemerisId) {
    this.ephemerisId = ephemerisId;
  }


  public EphemerisItem name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EphemerisItem priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Get priority
   * @return priority
   */
  @javax.annotation.Nullable
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public EphemerisItem sourceS3Object(EphemerisItemSourceS3Object sourceS3Object) {
    this.sourceS3Object = sourceS3Object;
    return this;
  }

  /**
   * Get sourceS3Object
   * @return sourceS3Object
   */
  @javax.annotation.Nullable
  public EphemerisItemSourceS3Object getSourceS3Object() {
    return sourceS3Object;
  }

  public void setSourceS3Object(EphemerisItemSourceS3Object sourceS3Object) {
    this.sourceS3Object = sourceS3Object;
  }


  public EphemerisItem status(EphemerisStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public EphemerisStatus getStatus() {
    return status;
  }

  public void setStatus(EphemerisStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EphemerisItem ephemerisItem = (EphemerisItem) o;
    return Objects.equals(this.creationTime, ephemerisItem.creationTime) &&
        Objects.equals(this.enabled, ephemerisItem.enabled) &&
        Objects.equals(this.ephemerisId, ephemerisItem.ephemerisId) &&
        Objects.equals(this.name, ephemerisItem.name) &&
        Objects.equals(this.priority, ephemerisItem.priority) &&
        Objects.equals(this.sourceS3Object, ephemerisItem.sourceS3Object) &&
        Objects.equals(this.status, ephemerisItem.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationTime, enabled, ephemerisId, name, priority, sourceS3Object, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EphemerisItem {\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    ephemerisId: ").append(toIndentedString(ephemerisId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    sourceS3Object: ").append(toIndentedString(sourceS3Object)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationTime");
    openapiFields.add("enabled");
    openapiFields.add("ephemerisId");
    openapiFields.add("name");
    openapiFields.add("priority");
    openapiFields.add("sourceS3Object");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EphemerisItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EphemerisItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EphemerisItem is not found in the empty JSON string", EphemerisItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EphemerisItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EphemerisItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `creationTime`
      if (jsonObj.get("creationTime") != null && !jsonObj.get("creationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("creationTime"));
      }
      // validate the optional field `enabled`
      if (jsonObj.get("enabled") != null && !jsonObj.get("enabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("enabled"));
      }
      // validate the optional field `ephemerisId`
      if (jsonObj.get("ephemerisId") != null && !jsonObj.get("ephemerisId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ephemerisId"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `priority`
      if (jsonObj.get("priority") != null && !jsonObj.get("priority").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("priority"));
      }
      // validate the optional field `sourceS3Object`
      if (jsonObj.get("sourceS3Object") != null && !jsonObj.get("sourceS3Object").isJsonNull()) {
        EphemerisItemSourceS3Object.validateJsonElement(jsonObj.get("sourceS3Object"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        EphemerisStatus.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EphemerisItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EphemerisItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EphemerisItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EphemerisItem.class));

       return (TypeAdapter<T>) new TypeAdapter<EphemerisItem>() {
           @Override
           public void write(JsonWriter out, EphemerisItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EphemerisItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EphemerisItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EphemerisItem
   * @throws IOException if the JSON string is invalid with respect to EphemerisItem
   */
  public static EphemerisItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EphemerisItem.class);
  }

  /**
   * Convert an instance of EphemerisItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

