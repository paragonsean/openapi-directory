/*
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Item in a list of mission profiles.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:02.114064-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MissionProfileListItem {
  public static final String SERIALIZED_NAME_MISSION_PROFILE_ARN = "missionProfileArn";
  @SerializedName(SERIALIZED_NAME_MISSION_PROFILE_ARN)
  private String missionProfileArn;

  public static final String SERIALIZED_NAME_MISSION_PROFILE_ID = "missionProfileId";
  @SerializedName(SERIALIZED_NAME_MISSION_PROFILE_ID)
  private String missionProfileId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public MissionProfileListItem() {
  }

  public MissionProfileListItem missionProfileArn(String missionProfileArn) {
    this.missionProfileArn = missionProfileArn;
    return this;
  }

  /**
   * Get missionProfileArn
   * @return missionProfileArn
   */
  @javax.annotation.Nullable
  public String getMissionProfileArn() {
    return missionProfileArn;
  }

  public void setMissionProfileArn(String missionProfileArn) {
    this.missionProfileArn = missionProfileArn;
  }


  public MissionProfileListItem missionProfileId(String missionProfileId) {
    this.missionProfileId = missionProfileId;
    return this;
  }

  /**
   * Get missionProfileId
   * @return missionProfileId
   */
  @javax.annotation.Nullable
  public String getMissionProfileId() {
    return missionProfileId;
  }

  public void setMissionProfileId(String missionProfileId) {
    this.missionProfileId = missionProfileId;
  }


  public MissionProfileListItem name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MissionProfileListItem region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MissionProfileListItem missionProfileListItem = (MissionProfileListItem) o;
    return Objects.equals(this.missionProfileArn, missionProfileListItem.missionProfileArn) &&
        Objects.equals(this.missionProfileId, missionProfileListItem.missionProfileId) &&
        Objects.equals(this.name, missionProfileListItem.name) &&
        Objects.equals(this.region, missionProfileListItem.region);
  }

  @Override
  public int hashCode() {
    return Objects.hash(missionProfileArn, missionProfileId, name, region);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MissionProfileListItem {\n");
    sb.append("    missionProfileArn: ").append(toIndentedString(missionProfileArn)).append("\n");
    sb.append("    missionProfileId: ").append(toIndentedString(missionProfileId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("missionProfileArn");
    openapiFields.add("missionProfileId");
    openapiFields.add("name");
    openapiFields.add("region");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MissionProfileListItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MissionProfileListItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MissionProfileListItem is not found in the empty JSON string", MissionProfileListItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MissionProfileListItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MissionProfileListItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `missionProfileArn`
      if (jsonObj.get("missionProfileArn") != null && !jsonObj.get("missionProfileArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("missionProfileArn"));
      }
      // validate the optional field `missionProfileId`
      if (jsonObj.get("missionProfileId") != null && !jsonObj.get("missionProfileId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("missionProfileId"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `region`
      if (jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("region"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MissionProfileListItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MissionProfileListItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MissionProfileListItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MissionProfileListItem.class));

       return (TypeAdapter<T>) new TypeAdapter<MissionProfileListItem>() {
           @Override
           public void write(JsonWriter out, MissionProfileListItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MissionProfileListItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MissionProfileListItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MissionProfileListItem
   * @throws IOException if the JSON string is invalid with respect to MissionProfileListItem
   */
  public static MissionProfileListItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MissionProfileListItem.class);
  }

  /**
   * Convert an instance of MissionProfileListItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

