/*
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EphemerisStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListEphemeridesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:02.114064-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListEphemeridesRequest {
  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_SATELLITE_ID = "satelliteId";
  @SerializedName(SERIALIZED_NAME_SATELLITE_ID)
  private String satelliteId;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STATUS_LIST = "statusList";
  @SerializedName(SERIALIZED_NAME_STATUS_LIST)
  private List<EphemerisStatus> statusList = new ArrayList<>();

  public ListEphemeridesRequest() {
  }

  public ListEphemeridesRequest endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The end time to list in UTC. The operation will return an ephemeris if its expiration time is within the time range defined by the &lt;code&gt;startTime&lt;/code&gt; and &lt;code&gt;endTime&lt;/code&gt;.
   * @return endTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public ListEphemeridesRequest satelliteId(String satelliteId) {
    this.satelliteId = satelliteId;
    return this;
  }

  /**
   * The AWS Ground Station satellite ID to list ephemeris for.
   * @return satelliteId
   */
  @javax.annotation.Nonnull
  public String getSatelliteId() {
    return satelliteId;
  }

  public void setSatelliteId(String satelliteId) {
    this.satelliteId = satelliteId;
  }


  public ListEphemeridesRequest startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The start time to list in UTC. The operation will return an ephemeris if its expiration time is within the time range defined by the &lt;code&gt;startTime&lt;/code&gt; and &lt;code&gt;endTime&lt;/code&gt;.
   * @return startTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public ListEphemeridesRequest statusList(List<EphemerisStatus> statusList) {
    this.statusList = statusList;
    return this;
  }

  public ListEphemeridesRequest addStatusListItem(EphemerisStatus statusListItem) {
    if (this.statusList == null) {
      this.statusList = new ArrayList<>();
    }
    this.statusList.add(statusListItem);
    return this;
  }

  /**
   * The list of ephemeris status to return.
   * @return statusList
   */
  @javax.annotation.Nullable
  public List<EphemerisStatus> getStatusList() {
    return statusList;
  }

  public void setStatusList(List<EphemerisStatus> statusList) {
    this.statusList = statusList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListEphemeridesRequest listEphemeridesRequest = (ListEphemeridesRequest) o;
    return Objects.equals(this.endTime, listEphemeridesRequest.endTime) &&
        Objects.equals(this.satelliteId, listEphemeridesRequest.satelliteId) &&
        Objects.equals(this.startTime, listEphemeridesRequest.startTime) &&
        Objects.equals(this.statusList, listEphemeridesRequest.statusList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endTime, satelliteId, startTime, statusList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListEphemeridesRequest {\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    satelliteId: ").append(toIndentedString(satelliteId)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    statusList: ").append(toIndentedString(statusList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endTime");
    openapiFields.add("satelliteId");
    openapiFields.add("startTime");
    openapiFields.add("statusList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("endTime");
    openapiRequiredFields.add("satelliteId");
    openapiRequiredFields.add("startTime");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListEphemeridesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListEphemeridesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListEphemeridesRequest is not found in the empty JSON string", ListEphemeridesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListEphemeridesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListEphemeridesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListEphemeridesRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("satelliteId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `satelliteId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("satelliteId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("statusList") != null && !jsonObj.get("statusList").isJsonNull() && !jsonObj.get("statusList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusList` to be an array in the JSON string but got `%s`", jsonObj.get("statusList").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListEphemeridesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListEphemeridesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListEphemeridesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListEphemeridesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ListEphemeridesRequest>() {
           @Override
           public void write(JsonWriter out, ListEphemeridesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListEphemeridesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListEphemeridesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListEphemeridesRequest
   * @throws IOException if the JSON string is invalid with respect to ListEphemeridesRequest
   */
  public static ListEphemeridesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListEphemeridesRequest.class);
  }

  /**
   * Convert an instance of ListEphemeridesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

