/*
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.ContactStatus;
import org.openapitools.client.model.DescribeContactResponseMaximumElevation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Data describing a contact.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:02.114064-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContactData {
  public static final String SERIALIZED_NAME_CONTACT_ID = "contactId";
  @SerializedName(SERIALIZED_NAME_CONTACT_ID)
  private String contactId;

  public static final String SERIALIZED_NAME_CONTACT_STATUS = "contactStatus";
  @SerializedName(SERIALIZED_NAME_CONTACT_STATUS)
  private ContactStatus contactStatus;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_GROUND_STATION = "groundStation";
  @SerializedName(SERIALIZED_NAME_GROUND_STATION)
  private String groundStation;

  public static final String SERIALIZED_NAME_MAXIMUM_ELEVATION = "maximumElevation";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_ELEVATION)
  private DescribeContactResponseMaximumElevation maximumElevation;

  public static final String SERIALIZED_NAME_MISSION_PROFILE_ARN = "missionProfileArn";
  @SerializedName(SERIALIZED_NAME_MISSION_PROFILE_ARN)
  private String missionProfileArn;

  public static final String SERIALIZED_NAME_POST_PASS_END_TIME = "postPassEndTime";
  @SerializedName(SERIALIZED_NAME_POST_PASS_END_TIME)
  private OffsetDateTime postPassEndTime;

  public static final String SERIALIZED_NAME_PRE_PASS_START_TIME = "prePassStartTime";
  @SerializedName(SERIALIZED_NAME_PRE_PASS_START_TIME)
  private OffsetDateTime prePassStartTime;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_SATELLITE_ARN = "satelliteArn";
  @SerializedName(SERIALIZED_NAME_SATELLITE_ARN)
  private String satelliteArn;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public ContactData() {
  }

  public ContactData contactId(String contactId) {
    this.contactId = contactId;
    return this;
  }

  /**
   * Get contactId
   * @return contactId
   */
  @javax.annotation.Nullable
  public String getContactId() {
    return contactId;
  }

  public void setContactId(String contactId) {
    this.contactId = contactId;
  }


  public ContactData contactStatus(ContactStatus contactStatus) {
    this.contactStatus = contactStatus;
    return this;
  }

  /**
   * Get contactStatus
   * @return contactStatus
   */
  @javax.annotation.Nullable
  public ContactStatus getContactStatus() {
    return contactStatus;
  }

  public void setContactStatus(ContactStatus contactStatus) {
    this.contactStatus = contactStatus;
  }


  public ContactData endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public ContactData errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * Get errorMessage
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public ContactData groundStation(String groundStation) {
    this.groundStation = groundStation;
    return this;
  }

  /**
   * Get groundStation
   * @return groundStation
   */
  @javax.annotation.Nullable
  public String getGroundStation() {
    return groundStation;
  }

  public void setGroundStation(String groundStation) {
    this.groundStation = groundStation;
  }


  public ContactData maximumElevation(DescribeContactResponseMaximumElevation maximumElevation) {
    this.maximumElevation = maximumElevation;
    return this;
  }

  /**
   * Get maximumElevation
   * @return maximumElevation
   */
  @javax.annotation.Nullable
  public DescribeContactResponseMaximumElevation getMaximumElevation() {
    return maximumElevation;
  }

  public void setMaximumElevation(DescribeContactResponseMaximumElevation maximumElevation) {
    this.maximumElevation = maximumElevation;
  }


  public ContactData missionProfileArn(String missionProfileArn) {
    this.missionProfileArn = missionProfileArn;
    return this;
  }

  /**
   * Get missionProfileArn
   * @return missionProfileArn
   */
  @javax.annotation.Nullable
  public String getMissionProfileArn() {
    return missionProfileArn;
  }

  public void setMissionProfileArn(String missionProfileArn) {
    this.missionProfileArn = missionProfileArn;
  }


  public ContactData postPassEndTime(OffsetDateTime postPassEndTime) {
    this.postPassEndTime = postPassEndTime;
    return this;
  }

  /**
   * Get postPassEndTime
   * @return postPassEndTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPostPassEndTime() {
    return postPassEndTime;
  }

  public void setPostPassEndTime(OffsetDateTime postPassEndTime) {
    this.postPassEndTime = postPassEndTime;
  }


  public ContactData prePassStartTime(OffsetDateTime prePassStartTime) {
    this.prePassStartTime = prePassStartTime;
    return this;
  }

  /**
   * Get prePassStartTime
   * @return prePassStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPrePassStartTime() {
    return prePassStartTime;
  }

  public void setPrePassStartTime(OffsetDateTime prePassStartTime) {
    this.prePassStartTime = prePassStartTime;
  }


  public ContactData region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public ContactData satelliteArn(String satelliteArn) {
    this.satelliteArn = satelliteArn;
    return this;
  }

  /**
   * Get satelliteArn
   * @return satelliteArn
   */
  @javax.annotation.Nullable
  public String getSatelliteArn() {
    return satelliteArn;
  }

  public void setSatelliteArn(String satelliteArn) {
    this.satelliteArn = satelliteArn;
  }


  public ContactData startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public ContactData tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContactData contactData = (ContactData) o;
    return Objects.equals(this.contactId, contactData.contactId) &&
        Objects.equals(this.contactStatus, contactData.contactStatus) &&
        Objects.equals(this.endTime, contactData.endTime) &&
        Objects.equals(this.errorMessage, contactData.errorMessage) &&
        Objects.equals(this.groundStation, contactData.groundStation) &&
        Objects.equals(this.maximumElevation, contactData.maximumElevation) &&
        Objects.equals(this.missionProfileArn, contactData.missionProfileArn) &&
        Objects.equals(this.postPassEndTime, contactData.postPassEndTime) &&
        Objects.equals(this.prePassStartTime, contactData.prePassStartTime) &&
        Objects.equals(this.region, contactData.region) &&
        Objects.equals(this.satelliteArn, contactData.satelliteArn) &&
        Objects.equals(this.startTime, contactData.startTime) &&
        Objects.equals(this.tags, contactData.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contactId, contactStatus, endTime, errorMessage, groundStation, maximumElevation, missionProfileArn, postPassEndTime, prePassStartTime, region, satelliteArn, startTime, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContactData {\n");
    sb.append("    contactId: ").append(toIndentedString(contactId)).append("\n");
    sb.append("    contactStatus: ").append(toIndentedString(contactStatus)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    groundStation: ").append(toIndentedString(groundStation)).append("\n");
    sb.append("    maximumElevation: ").append(toIndentedString(maximumElevation)).append("\n");
    sb.append("    missionProfileArn: ").append(toIndentedString(missionProfileArn)).append("\n");
    sb.append("    postPassEndTime: ").append(toIndentedString(postPassEndTime)).append("\n");
    sb.append("    prePassStartTime: ").append(toIndentedString(prePassStartTime)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    satelliteArn: ").append(toIndentedString(satelliteArn)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contactId");
    openapiFields.add("contactStatus");
    openapiFields.add("endTime");
    openapiFields.add("errorMessage");
    openapiFields.add("groundStation");
    openapiFields.add("maximumElevation");
    openapiFields.add("missionProfileArn");
    openapiFields.add("postPassEndTime");
    openapiFields.add("prePassStartTime");
    openapiFields.add("region");
    openapiFields.add("satelliteArn");
    openapiFields.add("startTime");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContactData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContactData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContactData is not found in the empty JSON string", ContactData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContactData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContactData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `contactId`
      if (jsonObj.get("contactId") != null && !jsonObj.get("contactId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("contactId"));
      }
      // validate the optional field `contactStatus`
      if (jsonObj.get("contactStatus") != null && !jsonObj.get("contactStatus").isJsonNull()) {
        ContactStatus.validateJsonElement(jsonObj.get("contactStatus"));
      }
      // validate the optional field `endTime`
      if (jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("endTime"));
      }
      // validate the optional field `errorMessage`
      if (jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("errorMessage"));
      }
      // validate the optional field `groundStation`
      if (jsonObj.get("groundStation") != null && !jsonObj.get("groundStation").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("groundStation"));
      }
      // validate the optional field `maximumElevation`
      if (jsonObj.get("maximumElevation") != null && !jsonObj.get("maximumElevation").isJsonNull()) {
        DescribeContactResponseMaximumElevation.validateJsonElement(jsonObj.get("maximumElevation"));
      }
      // validate the optional field `missionProfileArn`
      if (jsonObj.get("missionProfileArn") != null && !jsonObj.get("missionProfileArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("missionProfileArn"));
      }
      // validate the optional field `postPassEndTime`
      if (jsonObj.get("postPassEndTime") != null && !jsonObj.get("postPassEndTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("postPassEndTime"));
      }
      // validate the optional field `prePassStartTime`
      if (jsonObj.get("prePassStartTime") != null && !jsonObj.get("prePassStartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("prePassStartTime"));
      }
      // validate the optional field `region`
      if (jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("region"));
      }
      // validate the optional field `satelliteArn`
      if (jsonObj.get("satelliteArn") != null && !jsonObj.get("satelliteArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("satelliteArn"));
      }
      // validate the optional field `startTime`
      if (jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("startTime"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContactData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContactData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContactData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContactData.class));

       return (TypeAdapter<T>) new TypeAdapter<ContactData>() {
           @Override
           public void write(JsonWriter out, ContactData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContactData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContactData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContactData
   * @throws IOException if the JSON string is invalid with respect to ContactData
   */
  public static ContactData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContactData.class);
  }

  /**
   * Convert an instance of ContactData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

