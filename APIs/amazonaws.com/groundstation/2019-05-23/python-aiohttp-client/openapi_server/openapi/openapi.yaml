openapi: 3.0.0
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  description: "Welcome to the AWS Ground Station API Reference. AWS Ground Station\
    \ is a fully managed service that enables you to control satellite communications,\
    \ downlink and process satellite data, and scale your satellite operations efficiently\
    \ and cost-effectively without having to build or manage your own ground station\
    \ infrastructure."
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  termsOfService: https://aws.amazon.com/service-terms/
  title: AWS Ground Station
  version: 2019-05-23
  x-release: v4
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: '#FFFFFF'
  x-providerName: amazonaws.com
  x-serviceName: groundstation
  x-aws-signingName: groundstation
  x-origin:
  - contentType: application/json
    url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/groundstation-2019-05-23.normal.json
    converter:
      url: https://github.com/mermade/aws2openapi
      version: 1.0.0
    x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
  - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/groundstation/
servers:
- description: The AWS Ground Station multi-region endpoint
  url: "http://groundstation.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The AWS Ground Station multi-region endpoint
  url: "https://groundstation.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The AWS Ground Station endpoint for China (Beijing) and China (Ningxia)
  url: "http://groundstation.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
- description: The AWS Ground Station endpoint for China (Beijing) and China (Ningxia)
  url: "https://groundstation.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
security:
- hmac: []
paths:
  /agent:
    post:
      description: <note> <p> For use by AWS Ground Station Agent and shouldn't be
        called directly.</p> </note> <p> Registers a new agent with AWS Ground Station.
        </p>
      operationId: register_agent
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterAgent_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterAgentResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
          description: DependencyException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /agent/{agentId}:
    put:
      description: <note> <p> For use by AWS Ground Station Agent and shouldn't be
        called directly.</p> </note> <p>Update the status of the agent.</p>
      operationId: update_agent_status
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: UUID of agent to update.
        explode: false
        in: path
        name: agentId
        required: true
        schema:
          maxLength: 128
          minLength: 1
          pattern: "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAgentStatus_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAgentStatusResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
          description: DependencyException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /agent/{agentId}/configuration:
    get:
      description: <note> <p> For use by AWS Ground Station Agent and shouldn't be
        called directly.</p> </note> <p>Gets the latest configuration information
        for a registered agent.</p>
      operationId: get_agent_configuration
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: UUID of agent to get configuration information for.
        explode: false
        in: path
        name: agentId
        required: true
        schema:
          maxLength: 128
          minLength: 1
          pattern: "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAgentConfigurationResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
          description: DependencyException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /config:
    get:
      description: Returns a list of <code>Config</code> objects.
      operationId: list_configs
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Maximum number of <code>Configs</code> returned.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 0
          type: integer
        style: form
      - description: Next token returned in the request of a previous <code>ListConfigs</code>
          call. Used to get the next page of results.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          maxLength: 1000
          minLength: 3
          pattern: "^[A-Za-z0-9-/+_.=]+$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConfigsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
          description: DependencyException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: <p>Creates a <code>Config</code> with the specified <code>configData</code>
        parameters.</p> <p>Only one type of <code>configData</code> can be specified.</p>
      operationId: create_config
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConfig_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigIdResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
          description: DependencyException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceLimitExceededException'
          description: ResourceLimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /config/{configType}/{configId}:
    delete:
      description: Deletes a <code>Config</code>.
      operationId: delete_config
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: UUID of a <code>Config</code>.
        explode: false
        in: path
        name: configId
        required: true
        schema:
          maxLength: 128
          minLength: 1
          pattern: "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$"
          type: string
        style: simple
      - description: Type of a <code>Config</code>.
        explode: false
        in: path
        name: configType
        required: true
        schema:
          enum:
          - antenna-downlink
          - antenna-downlink-demod-decode
          - antenna-uplink
          - dataflow-endpoint
          - tracking
          - uplink-echo
          - s3-recording
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigIdResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
          description: DependencyException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: <p>Returns <code>Config</code> information.</p> <p>Only one <code>Config</code>
        response can be returned.</p>
      operationId: get_config
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: UUID of a <code>Config</code>.
        explode: false
        in: path
        name: configId
        required: true
        schema:
          maxLength: 128
          minLength: 1
          pattern: "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$"
          type: string
        style: simple
      - description: Type of a <code>Config</code>.
        explode: false
        in: path
        name: configType
        required: true
        schema:
          enum:
          - antenna-downlink
          - antenna-downlink-demod-decode
          - antenna-uplink
          - dataflow-endpoint
          - tracking
          - uplink-echo
          - s3-recording
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetConfigResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
          description: DependencyException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: <p>Updates the <code>Config</code> used when scheduling contacts.</p>
        <p>Updating a <code>Config</code> will not update the execution parameters
        for existing future contacts scheduled with this <code>Config</code>.</p>
      operationId: update_config
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: UUID of a <code>Config</code>.
        explode: false
        in: path
        name: configId
        required: true
        schema:
          maxLength: 128
          minLength: 1
          pattern: "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$"
          type: string
        style: simple
      - description: Type of a <code>Config</code>.
        explode: false
        in: path
        name: configType
        required: true
        schema:
          enum:
          - antenna-downlink
          - antenna-downlink-demod-decode
          - antenna-uplink
          - dataflow-endpoint
          - tracking
          - uplink-echo
          - s3-recording
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateConfig_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigIdResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
          description: DependencyException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /contact:
    post:
      description: Reserves a contact using specified parameters.
      operationId: reserve_contact
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReserveContact_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactIdResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
          description: DependencyException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /contact/{contactId}:
    delete:
      description: Cancels a contact with a specified contact ID.
      operationId: cancel_contact
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: UUID of a contact.
        explode: false
        in: path
        name: contactId
        required: true
        schema:
          maxLength: 128
          minLength: 1
          pattern: "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactIdResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
          description: DependencyException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Describes an existing contact.
      operationId: describe_contact
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: UUID of a contact.
        explode: false
        in: path
        name: contactId
        required: true
        schema:
          maxLength: 128
          minLength: 1
          pattern: "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeContactResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
          description: DependencyException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /contacts:
    post:
      description: "<p>Returns a list of contacts.</p> <p>If <code>statusList</code>\
        \ contains AVAILABLE, the request must include <code>groundStation</code>,\
        \ <code>missionprofileArn</code>, and <code>satelliteArn</code>. </p>"
      operationId: list_contacts
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListContacts_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListContactsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
          description: DependencyException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /dataflowEndpointGroup:
    get:
      description: Returns a list of <code>DataflowEndpoint</code> groups.
      operationId: list_dataflow_endpoint_groups
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Maximum number of dataflow endpoint groups returned.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 0
          type: integer
        style: form
      - description: Next token returned in the request of a previous <code>ListDataflowEndpointGroups</code>
          call. Used to get the next page of results.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          maxLength: 1000
          minLength: 3
          pattern: "^[A-Za-z0-9-/+_.=]+$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDataflowEndpointGroupsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
          description: DependencyException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: "<p>Creates a <code>DataflowEndpoint</code> group containing the\
        \ specified list of <code>DataflowEndpoint</code> objects.</p> <p>The <code>name</code>\
        \ field in each endpoint is used in your mission profile <code>DataflowEndpointConfig</code>\
        \ to specify which endpoints to use during a contact.</p> <p>When a contact\
        \ uses multiple <code>DataflowEndpointConfig</code> objects, each <code>Config</code>\
        \ must match a <code>DataflowEndpoint</code> in the same group.</p>"
      operationId: create_dataflow_endpoint_group
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDataflowEndpointGroup_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataflowEndpointGroupIdResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
          description: DependencyException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /dataflowEndpointGroup/{dataflowEndpointGroupId}:
    delete:
      description: Deletes a dataflow endpoint group.
      operationId: delete_dataflow_endpoint_group
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: UUID of a dataflow endpoint group.
        explode: false
        in: path
        name: dataflowEndpointGroupId
        required: true
        schema:
          maxLength: 128
          minLength: 1
          pattern: "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataflowEndpointGroupIdResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
          description: DependencyException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Returns the dataflow endpoint group.
      operationId: get_dataflow_endpoint_group
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: UUID of a dataflow endpoint group.
        explode: false
        in: path
        name: dataflowEndpointGroupId
        required: true
        schema:
          maxLength: 128
          minLength: 1
          pattern: "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDataflowEndpointGroupResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
          description: DependencyException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /ephemerides:
    post:
      description: List existing ephemerides.
      operationId: list_ephemerides
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Maximum number of ephemerides to return.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 0
          type: integer
        style: form
      - description: Pagination token.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          maxLength: 1000
          minLength: 3
          pattern: "^[A-Za-z0-9-/+_.=]+$"
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListEphemerides_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEphemeridesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
          description: DependencyException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /ephemeris:
    post:
      description: Creates an Ephemeris with the specified <code>EphemerisData</code>.
      operationId: create_ephemeris
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEphemeris_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EphemerisIdResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
          description: DependencyException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /ephemeris/{ephemerisId}:
    delete:
      description: Deletes an ephemeris
      operationId: delete_ephemeris
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The AWS Ground Station ephemeris ID.
        explode: false
        in: path
        name: ephemerisId
        required: true
        schema:
          maxLength: 128
          minLength: 1
          pattern: "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EphemerisIdResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
          description: DependencyException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Describes an existing ephemeris.
      operationId: describe_ephemeris
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The AWS Ground Station ephemeris ID.
        explode: false
        in: path
        name: ephemerisId
        required: true
        schema:
          maxLength: 128
          minLength: 1
          pattern: "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeEphemerisResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
          description: DependencyException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: Updates an existing ephemeris
      operationId: update_ephemeris
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The AWS Ground Station ephemeris ID.
        explode: false
        in: path
        name: ephemerisId
        required: true
        schema:
          maxLength: 128
          minLength: 1
          pattern: "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEphemeris_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EphemerisIdResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
          description: DependencyException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /groundstation:
    get:
      description: 'Returns a list of ground stations. '
      operationId: list_ground_stations
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Maximum number of ground stations returned.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 0
          type: integer
        style: form
      - description: Next token that can be supplied in the next call to get the next
          page of ground stations.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          maxLength: 1000
          minLength: 3
          pattern: "^[A-Za-z0-9-/+_.=]+$"
          type: string
        style: form
      - description: Satellite ID to retrieve on-boarded ground stations.
        explode: true
        in: query
        name: satelliteId
        required: false
        schema:
          maxLength: 128
          minLength: 1
          pattern: "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListGroundStationsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
          description: DependencyException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /minute-usage:
    post:
      description: Returns the number of reserved minutes used by account.
      operationId: get_minute_usage
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetMinuteUsage_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMinuteUsageResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
          description: DependencyException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /missionprofile:
    get:
      description: Returns a list of mission profiles.
      operationId: list_mission_profiles
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Maximum number of mission profiles returned.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 0
          type: integer
        style: form
      - description: Next token returned in the request of a previous <code>ListMissionProfiles</code>
          call. Used to get the next page of results.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          maxLength: 1000
          minLength: 3
          pattern: "^[A-Za-z0-9-/+_.=]+$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMissionProfilesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
          description: DependencyException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: "<p>Creates a mission profile.</p> <p> <code>dataflowEdges</code>\
        \ is a list of lists of strings. Each lower level list of strings has two\
        \ elements: a <i>from</i> ARN and a <i>to</i> ARN.</p>"
      operationId: create_mission_profile
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMissionProfile_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissionProfileIdResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
          description: DependencyException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /missionprofile/{missionProfileId}:
    delete:
      description: Deletes a mission profile.
      operationId: delete_mission_profile
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: UUID of a mission profile.
        explode: false
        in: path
        name: missionProfileId
        required: true
        schema:
          maxLength: 128
          minLength: 1
          pattern: "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissionProfileIdResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
          description: DependencyException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Returns a mission profile.
      operationId: get_mission_profile
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: UUID of a mission profile.
        explode: false
        in: path
        name: missionProfileId
        required: true
        schema:
          maxLength: 128
          minLength: 1
          pattern: "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMissionProfileResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
          description: DependencyException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: <p>Updates a mission profile.</p> <p>Updating a mission profile
        will not update the execution parameters for existing future contacts.</p>
      operationId: update_mission_profile
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: UUID of a mission profile.
        explode: false
        in: path
        name: missionProfileId
        required: true
        schema:
          maxLength: 128
          minLength: 1
          pattern: "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMissionProfile_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissionProfileIdResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
          description: DependencyException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /satellite:
    get:
      description: Returns a list of satellites.
      operationId: list_satellites
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Maximum number of satellites returned.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 0
          type: integer
        style: form
      - description: Next token that can be supplied in the next call to get the next
          page of satellites.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          maxLength: 1000
          minLength: 3
          pattern: "^[A-Za-z0-9-/+_.=]+$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSatellitesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
          description: DependencyException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /satellite/{satelliteId}:
    get:
      description: Returns a satellite.
      operationId: get_satellite
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: UUID of a satellite.
        explode: false
        in: path
        name: satelliteId
        required: true
        schema:
          maxLength: 128
          minLength: 1
          pattern: "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSatelliteResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
          description: DependencyException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /tags/{resourceArn}:
    get:
      description: Returns a list of tags for a specified resource.
      operationId: list_tags_for_resource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: ARN of a resource.
        explode: false
        in: path
        name: resourceArn
        required: true
        schema:
          maxLength: 1024
          minLength: 5
          pattern: "^(arn:aws:)[\\s\\S]{0,1024}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
          description: DependencyException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: Assigns a tag to a resource.
      operationId: tag_resource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: ARN of a resource tag.
        explode: false
        in: path
        name: resourceArn
        required: true
        schema:
          maxLength: 1024
          minLength: 5
          pattern: "^(arn:aws:)[\\s\\S]{0,1024}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagResource_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
          description: DependencyException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /tags/{resourceArn}#tagKeys:
    delete:
      description: Deassigns a resource tag.
      operationId: untag_resource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: ARN of a resource.
        explode: false
        in: path
        name: resourceArn
        required: true
        schema:
          maxLength: 1024
          minLength: 5
          pattern: "^(arn:aws:)[\\s\\S]{0,1024}$"
          type: string
        style: simple
      - description: Keys of a resource tag.
        explode: true
        in: query
        name: tagKeys
        required: true
        schema:
          items:
            $ref: '#/components/schemas/UnboundedString'
          maxItems: 500
          minItems: 0
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UntagResourceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyException'
          description: DependencyException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
components:
  parameters:
    X-Amz-Content-Sha256:
      explode: false
      in: header
      name: X-Amz-Content-Sha256
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Date:
      explode: false
      in: header
      name: X-Amz-Date
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Algorithm:
      explode: false
      in: header
      name: X-Amz-Algorithm
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Credential:
      explode: false
      in: header
      name: X-Amz-Credential
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Security-Token:
      explode: false
      in: header
      name: X-Amz-Security-Token
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Signature:
      explode: false
      in: header
      name: X-Amz-Signature
      required: false
      schema:
        type: string
      style: simple
    X-Amz-SignedHeaders:
      explode: false
      in: header
      name: X-Amz-SignedHeaders
      required: false
      schema:
        type: string
      style: simple
  schemas:
    ContactIdResponse:
      description: <p/>
      example:
        contactId: ""
      properties:
        contactId:
          allOf:
          - $ref: '#/components/schemas/Uuid'
          - description: UUID of a contact.
          title: contactId
      title: ContactIdResponse
      type: object
    InvalidParameterException: {}
    DependencyException: {}
    ResourceNotFoundException: {}
    ConfigIdResponse:
      description: <p/>
      example:
        configId: ""
        configArn: ""
        configType: ""
      properties:
        configArn:
          allOf:
          - $ref: '#/components/schemas/ConfigArn'
          - description: ARN of a <code>Config</code>.
          title: configArn
        configId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: UUID of a <code>Config</code>.
          title: configId
        configType:
          allOf:
          - $ref: '#/components/schemas/ConfigCapabilityType'
          - description: Type of a <code>Config</code>.
          title: configType
      title: ConfigIdResponse
      type: object
    AntennaDownlinkConfig:
      description: Information about how AWS Ground Station should configure an antenna
        for downlink during a contact.
      properties:
        spectrumConfig:
          $ref: '#/components/schemas/AntennaDownlinkConfig_spectrumConfig'
      required:
      - spectrumConfig
      title: AntennaDownlinkConfig
      type: object
    AntennaDownlinkDemodDecodeConfig:
      description: Information about how AWS Ground Station should conﬁgure an antenna
        for downlink demod decode during a contact.
      properties:
        decodeConfig:
          $ref: '#/components/schemas/AntennaDownlinkDemodDecodeConfig_decodeConfig'
        demodulationConfig:
          $ref: '#/components/schemas/AntennaDownlinkDemodDecodeConfig_demodulationConfig'
        spectrumConfig:
          $ref: '#/components/schemas/AntennaDownlinkDemodDecodeConfig_spectrumConfig'
      required:
      - decodeConfig
      - demodulationConfig
      - spectrumConfig
      title: AntennaDownlinkDemodDecodeConfig
      type: object
    AntennaUplinkConfig:
      description: Information about the uplink <code>Config</code> of an antenna.
      properties:
        spectrumConfig:
          $ref: '#/components/schemas/AntennaUplinkConfig_spectrumConfig'
        targetEirp:
          $ref: '#/components/schemas/AntennaUplinkConfig_targetEirp'
        transmitDisabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: Whether or not uplink transmit is disabled.
          title: transmitDisabled
      required:
      - spectrumConfig
      - targetEirp
      title: AntennaUplinkConfig
      type: object
    DataflowEndpointConfig:
      description: Information about the dataflow endpoint <code>Config</code>.
      properties:
        dataflowEndpointName:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: Name of a dataflow endpoint.
          title: dataflowEndpointName
        dataflowEndpointRegion:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: Region of a dataflow endpoint.
          title: dataflowEndpointRegion
      required:
      - dataflowEndpointName
      title: DataflowEndpointConfig
      type: object
    S3RecordingConfig:
      description: Information about an S3 recording <code>Config</code>.
      properties:
        bucketArn:
          allOf:
          - $ref: '#/components/schemas/BucketArn'
          - description: ARN of the bucket to record to.
          title: bucketArn
        prefix:
          allOf:
          - $ref: '#/components/schemas/S3KeyPrefix'
          - description: S3 Key prefix to prefice data files.
          title: prefix
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          - description: ARN of the role Ground Station assumes to write data to the
              bucket.
          title: roleArn
      required:
      - bucketArn
      - roleArn
      title: S3RecordingConfig
      type: object
    TrackingConfig:
      description: Object that determines whether tracking should be used during a
        contact executed with this <code>Config</code> in the mission profile.
      properties:
        autotrack:
          allOf:
          - $ref: '#/components/schemas/Criticality'
          - description: Current setting for autotrack.
          title: autotrack
      required:
      - autotrack
      title: TrackingConfig
      type: object
    UplinkEchoConfig:
      description: "<p>Information about an uplink echo <code>Config</code>.</p> <p>Parameters\
        \ from the <code>AntennaUplinkConfig</code>, corresponding to the specified\
        \ <code>AntennaUplinkConfigArn</code>, are used when this <code>UplinkEchoConfig</code>\
        \ is used in a contact.</p>"
      properties:
        antennaUplinkConfigArn:
          allOf:
          - $ref: '#/components/schemas/ConfigArn'
          - description: ARN of an uplink <code>Config</code>.
          title: antennaUplinkConfigArn
        enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: Whether or not an uplink <code>Config</code> is enabled.
          title: enabled
      required:
      - antennaUplinkConfigArn
      - enabled
      title: UplinkEchoConfig
      type: object
    String:
      title: String
      type: string
    ResourceLimitExceededException: {}
    DataflowEndpointGroupIdResponse:
      description: <p/>
      example:
        dataflowEndpointGroupId: ""
      properties:
        dataflowEndpointGroupId:
          allOf:
          - $ref: '#/components/schemas/Uuid'
          - description: UUID of a dataflow endpoint group.
          title: dataflowEndpointGroupId
      title: DataflowEndpointGroupIdResponse
      type: object
    EndpointDetails:
      description: Information about the endpoint details.
      properties:
        awsGroundStationAgentEndpoint:
          $ref: '#/components/schemas/EndpointDetails_awsGroundStationAgentEndpoint'
        endpoint:
          $ref: '#/components/schemas/EndpointDetails_endpoint'
        healthReasons:
          allOf:
          - $ref: '#/components/schemas/CapabilityHealthReasonList'
          - description: Health reasons for a dataflow endpoint. This field is ignored
              when calling <code>CreateDataflowEndpointGroup</code>.
          title: healthReasons
        healthStatus:
          allOf:
          - $ref: '#/components/schemas/CapabilityHealth'
          - description: A dataflow endpoint health status. This field is ignored
              when calling <code>CreateDataflowEndpointGroup</code>.
          title: healthStatus
        securityDetails:
          $ref: '#/components/schemas/EndpointDetails_securityDetails'
      title: EndpointDetails
      type: object
    EphemerisIdResponse:
      example:
        ephemerisId: ""
      properties:
        ephemerisId:
          allOf:
          - $ref: '#/components/schemas/Uuid'
          - description: The AWS Ground Station ephemeris ID.
          title: ephemerisId
      title: EphemerisIdResponse
      type: object
    OEMEphemeris:
      description: Ephemeris data in Orbit Ephemeris Message (OEM) format.
      example:
        s3Object:
          bucket: ""
          version: ""
          key: ""
        oemData: ""
      properties:
        oemData:
          allOf:
          - $ref: '#/components/schemas/UnboundedString'
          - description: "The data for an OEM ephemeris, supplied directly in the\
              \ request rather than through an S3 object."
          title: oemData
        s3Object:
          $ref: '#/components/schemas/OEMEphemeris_s3Object'
      title: OEMEphemeris
      type: object
    TLEEphemeris:
      description: Two-line element set (TLE) ephemeris.
      example:
        s3Object:
          bucket: ""
          version: ""
          key: ""
        tleData: ""
      properties:
        s3Object:
          $ref: '#/components/schemas/OEMEphemeris_s3Object'
        tleData:
          allOf:
          - $ref: '#/components/schemas/TLEDataList'
          - description: "The data for a TLE ephemeris, supplied directly in the request\
              \ rather than through an S3 object."
          title: tleData
      title: TLEEphemeris
      type: object
    MissionProfileIdResponse:
      description: <p/>
      example:
        missionProfileId: ""
      properties:
        missionProfileId:
          allOf:
          - $ref: '#/components/schemas/Uuid'
          - description: UUID of a mission profile.
          title: missionProfileId
      title: MissionProfileIdResponse
      type: object
    DataflowEdge:
      items:
        $ref: '#/components/schemas/ConfigArn'
      maxItems: 2
      minItems: 2
      title: DataflowEdge
      type: array
    KeyAliasArn:
      maxLength: 512
      minLength: 1
      pattern: "^arn:aws[a-zA-Z-]{0,16}:kms:[a-z]{2}(-[a-z]{1,16}){1,3}-\\d{1}:\\\
        d{12}:((alias/[a-zA-Z0-9:/_-]{1,256}))$"
      type: string
    KeyArn:
      type: string
    DescribeContactResponse:
      description: <p/>
      example:
        groundStation: ""
        dataflowList: ""
        contactId: ""
        errorMessage: ""
        maximumElevation:
          unit: ""
          value: ""
        tags: ""
        prePassStartTime: ""
        contactStatus: ""
        postPassEndTime: ""
        satelliteArn: ""
        startTime: ""
        endTime: ""
        missionProfileArn: ""
        region: ""
      properties:
        contactId:
          allOf:
          - $ref: '#/components/schemas/Uuid'
          - description: UUID of a contact.
          title: contactId
        contactStatus:
          allOf:
          - $ref: '#/components/schemas/ContactStatus'
          - description: Status of a contact.
          title: contactStatus
        dataflowList:
          allOf:
          - $ref: '#/components/schemas/DataflowList'
          - description: List describing source and destination details for each dataflow
              edge.
          title: dataflowList
        endTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: End time of a contact in UTC.
          title: endTime
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: Error message for a contact.
          title: errorMessage
        groundStation:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: Ground station for a contact.
          title: groundStation
        maximumElevation:
          $ref: '#/components/schemas/DescribeContactResponse_maximumElevation'
        missionProfileArn:
          allOf:
          - $ref: '#/components/schemas/MissionProfileArn'
          - description: ARN of a mission profile.
          title: missionProfileArn
        postPassEndTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: Amount of time after a contact ends that you’d like to receive
              a CloudWatch event indicating the pass has finished.
          title: postPassEndTime
        prePassStartTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: Amount of time prior to contact start you’d like to receive
              a CloudWatch event indicating an upcoming pass.
          title: prePassStartTime
        region:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: Region of a contact.
          title: region
        satelliteArn:
          allOf:
          - $ref: '#/components/schemas/satelliteArn'
          - description: ARN of a satellite.
          title: satelliteArn
        startTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: Start time of a contact in UTC.
          title: startTime
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          - description: Tags assigned to a contact.
          title: tags
      title: DescribeContactResponse
      type: object
    DescribeEphemerisResponse:
      example:
        creationTime: ""
        satelliteId: ""
        suppliedData:
          oem:
            ephemerisData: ""
            sourceS3Object:
              bucket: ""
              version: ""
              key: ""
          tle:
            ephemerisData: ""
            sourceS3Object:
              bucket: ""
              version: ""
              key: ""
        name: ""
        priority: ""
        enabled: ""
        ephemerisId: ""
        invalidReason: ""
        status: ""
        tags: ""
      properties:
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The time the ephemeris was uploaded in UTC.
          title: creationTime
        enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: Whether or not the ephemeris is enabled.
          title: enabled
        ephemerisId:
          allOf:
          - $ref: '#/components/schemas/Uuid'
          - description: The AWS Ground Station ephemeris ID.
          title: ephemerisId
        invalidReason:
          allOf:
          - $ref: '#/components/schemas/EphemerisInvalidReason'
          - description: Reason that an ephemeris failed validation. Only provided
              for ephemerides with <code>INVALID</code> status.
          title: invalidReason
        name:
          allOf:
          - $ref: '#/components/schemas/SafeName'
          - description: A name string associated with the ephemeris. Used as a human-readable
              identifier for the ephemeris.
          title: name
        priority:
          allOf:
          - $ref: '#/components/schemas/EphemerisPriority'
          - description: "<p>Customer-provided priority score to establish the order\
              \ in which overlapping ephemerides should be used.</p> <p>The default\
              \ for customer-provided ephemeris priority is 1, and higher numbers\
              \ take precedence.</p> <p>Priority must be 1 or greater</p>"
          title: priority
        satelliteId:
          allOf:
          - $ref: '#/components/schemas/Uuid'
          - description: The AWS Ground Station satellite ID associated with ephemeris.
          title: satelliteId
        status:
          allOf:
          - $ref: '#/components/schemas/EphemerisStatus'
          - description: The status of the ephemeris.
          title: status
        suppliedData:
          $ref: '#/components/schemas/DescribeEphemerisResponse_suppliedData'
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          - description: Tags assigned to an ephemeris.
          title: tags
      title: DescribeEphemerisResponse
      type: object
    GetAgentConfigurationResponse:
      example:
        agentId: ""
        taskingDocument: ""
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Uuid'
          - description: UUID of agent.
          title: agentId
        taskingDocument:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: Tasking document for agent.
          title: taskingDocument
      title: GetAgentConfigurationResponse
      type: object
    GetConfigResponse:
      description: <p/>
      example:
        configData:
          uplinkEchoConfig:
            antennaUplinkConfigArn: ""
            enabled: ""
          antennaDownlinkDemodDecodeConfig:
            decodeConfig:
              unvalidatedJSON: ""
            spectrumConfig:
              bandwidth:
                units: ""
                value: ""
              polarization: ""
              centerFrequency:
                units: ""
                value: ""
            demodulationConfig:
              unvalidatedJSON: ""
          dataflowEndpointConfig:
            dataflowEndpointName: ""
            dataflowEndpointRegion: ""
          s3RecordingConfig:
            bucketArn: ""
            prefix: ""
            roleArn: ""
          trackingConfig:
            autotrack: ""
          antennaDownlinkConfig:
            spectrumConfig:
              bandwidth:
                units: ""
                value: ""
              polarization: ""
              centerFrequency:
                units: ""
                value: ""
          antennaUplinkConfig:
            spectrumConfig:
              polarization: ""
              centerFrequency:
                units: ""
                value: ""
            targetEirp:
              units: ""
              value: ""
            transmitDisabled: ""
        configId: ""
        configArn: ""
        name: ""
        configType: ""
        tags: ""
      properties:
        configArn:
          allOf:
          - $ref: '#/components/schemas/ConfigArn'
          - description: 'ARN of a <code>Config</code> '
          title: configArn
        configData:
          $ref: '#/components/schemas/GetConfigResponse_configData'
        configId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: UUID of a <code>Config</code>.
          title: configId
        configType:
          allOf:
          - $ref: '#/components/schemas/ConfigCapabilityType'
          - description: Type of a <code>Config</code>.
          title: configType
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: Name of a <code>Config</code>.
          title: name
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          - description: Tags assigned to a <code>Config</code>.
          title: tags
      required:
      - configArn
      - configData
      - configId
      - name
      title: GetConfigResponse
      type: object
    GetDataflowEndpointGroupResponse:
      description: <p/>
      example:
        contactPrePassDurationSeconds: ""
        endpointsDetails: ""
        dataflowEndpointGroupArn: ""
        dataflowEndpointGroupId: ""
        contactPostPassDurationSeconds: ""
        tags: ""
      properties:
        contactPostPassDurationSeconds:
          allOf:
          - $ref: '#/components/schemas/DataflowEndpointGroupDurationInSeconds'
          - description: "Amount of time, in seconds, after a contact ends that the\
              \ Ground Station Dataflow Endpoint Group will be in a <code>POSTPASS</code>\
              \ state. A Ground Station Dataflow Endpoint Group State Change event\
              \ will be emitted when the Dataflow Endpoint Group enters and exits\
              \ the <code>POSTPASS</code> state."
          title: contactPostPassDurationSeconds
        contactPrePassDurationSeconds:
          allOf:
          - $ref: '#/components/schemas/DataflowEndpointGroupDurationInSeconds'
          - description: "Amount of time, in seconds, before a contact starts that\
              \ the Ground Station Dataflow Endpoint Group will be in a <code>PREPASS</code>\
              \ state. A Ground Station Dataflow Endpoint Group State Change event\
              \ will be emitted when the Dataflow Endpoint Group enters and exits\
              \ the <code>PREPASS</code> state."
          title: contactPrePassDurationSeconds
        dataflowEndpointGroupArn:
          allOf:
          - $ref: '#/components/schemas/DataflowEndpointGroupArn'
          - description: ARN of a dataflow endpoint group.
          title: dataflowEndpointGroupArn
        dataflowEndpointGroupId:
          allOf:
          - $ref: '#/components/schemas/Uuid'
          - description: UUID of a dataflow endpoint group.
          title: dataflowEndpointGroupId
        endpointsDetails:
          allOf:
          - $ref: '#/components/schemas/EndpointDetailsList'
          - description: Details of a dataflow endpoint.
          title: endpointsDetails
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          - description: Tags assigned to a dataflow endpoint group.
          title: tags
      title: GetDataflowEndpointGroupResponse
      type: object
    GetMinuteUsageResponse:
      description: <p/>
      example:
        estimatedMinutesRemaining: ""
        totalReservedMinuteAllocation: ""
        isReservedMinutesCustomer: ""
        totalScheduledMinutes: ""
        upcomingMinutesScheduled: ""
      properties:
        estimatedMinutesRemaining:
          allOf:
          - $ref: '#/components/schemas/Integer'
          - description: "Estimated number of minutes remaining for an account, specific\
              \ to the month being requested."
          title: estimatedMinutesRemaining
        isReservedMinutesCustomer:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: "Returns whether or not an account has signed up for the\
              \ reserved minutes pricing plan, specific to the month being requested."
          title: isReservedMinutesCustomer
        totalReservedMinuteAllocation:
          allOf:
          - $ref: '#/components/schemas/Integer'
          - description: "Total number of reserved minutes allocated, specific to\
              \ the month being requested."
          title: totalReservedMinuteAllocation
        totalScheduledMinutes:
          allOf:
          - $ref: '#/components/schemas/Integer'
          - description: "Total scheduled minutes for an account, specific to the\
              \ month being requested."
          title: totalScheduledMinutes
        upcomingMinutesScheduled:
          allOf:
          - $ref: '#/components/schemas/Integer'
          - description: "Upcoming minutes scheduled for an account, specific to the\
              \ month being requested."
          title: upcomingMinutesScheduled
      title: GetMinuteUsageResponse
      type: object
    GetMissionProfileResponse:
      description: <p/>
      example:
        streamsKmsRole: ""
        minimumViableContactDurationSeconds: ""
        trackingConfigArn: ""
        contactPrePassDurationSeconds: ""
        streamsKmsKey:
          kmsKeyArn: ""
          kmsAliasArn: ""
        name: ""
        missionProfileId: ""
        dataflowEdges: ""
        missionProfileArn: ""
        region: ""
        contactPostPassDurationSeconds: ""
        tags: ""
      properties:
        contactPostPassDurationSeconds:
          allOf:
          - $ref: '#/components/schemas/DurationInSeconds'
          - description: Amount of time after a contact ends that you’d like to receive
              a CloudWatch event indicating the pass has finished.
          title: contactPostPassDurationSeconds
        contactPrePassDurationSeconds:
          allOf:
          - $ref: '#/components/schemas/DurationInSeconds'
          - description: Amount of time prior to contact start you’d like to receive
              a CloudWatch event indicating an upcoming pass.
          title: contactPrePassDurationSeconds
        dataflowEdges:
          allOf:
          - $ref: '#/components/schemas/DataflowEdgeList'
          - description: "A list of lists of ARNs. Each list of ARNs is an edge, with\
              \ a <i>from</i> <code>Config</code> and a <i>to</i> <code>Config</code>."
          title: dataflowEdges
        minimumViableContactDurationSeconds:
          allOf:
          - $ref: '#/components/schemas/PositiveDurationInSeconds'
          - description: Smallest amount of time in seconds that you’d like to see
              for an available contact. AWS Ground Station will not present you with
              contacts shorter than this duration.
          title: minimumViableContactDurationSeconds
        missionProfileArn:
          allOf:
          - $ref: '#/components/schemas/MissionProfileArn'
          - description: ARN of a mission profile.
          title: missionProfileArn
        missionProfileId:
          allOf:
          - $ref: '#/components/schemas/Uuid'
          - description: UUID of a mission profile.
          title: missionProfileId
        name:
          allOf:
          - $ref: '#/components/schemas/SafeName'
          - description: Name of a mission profile.
          title: name
        region:
          allOf:
          - $ref: '#/components/schemas/AWSRegion'
          - description: Region of a mission profile.
          title: region
        streamsKmsKey:
          $ref: '#/components/schemas/GetMissionProfileResponse_streamsKmsKey'
        streamsKmsRole:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          - description: Role to use for encrypting streams with KMS key.
          title: streamsKmsRole
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          - description: Tags assigned to a mission profile.
          title: tags
        trackingConfigArn:
          allOf:
          - $ref: '#/components/schemas/ConfigArn'
          - description: ARN of a tracking <code>Config</code>.
          title: trackingConfigArn
      title: GetMissionProfileResponse
      type: object
    GetSatelliteResponse:
      description: <p/>
      example:
        currentEphemeris:
          name: ""
          epoch: ""
          source: ""
          ephemerisId: ""
        satelliteId: ""
        satelliteArn: ""
        noradSatelliteID: ""
        groundStations: ""
      properties:
        currentEphemeris:
          $ref: '#/components/schemas/GetSatelliteResponse_currentEphemeris'
        groundStations:
          allOf:
          - $ref: '#/components/schemas/GroundStationIdList'
          - description: A list of ground stations to which the satellite is on-boarded.
          title: groundStations
        noradSatelliteID:
          allOf:
          - $ref: '#/components/schemas/noradSatelliteID'
          - description: NORAD satellite ID number.
          title: noradSatelliteID
        satelliteArn:
          allOf:
          - $ref: '#/components/schemas/satelliteArn'
          - description: ARN of a satellite.
          title: satelliteArn
        satelliteId:
          allOf:
          - $ref: '#/components/schemas/Uuid'
          - description: UUID of a satellite.
          title: satelliteId
      title: GetSatelliteResponse
      type: object
    ListConfigsResponse:
      description: <p/>
      example:
        nextToken: ""
        configList: ""
      properties:
        configList:
          allOf:
          - $ref: '#/components/schemas/ConfigList'
          - description: List of <code>Config</code> items.
          title: configList
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          - description: Next token returned in the response of a previous <code>ListConfigs</code>
              call. Used to get the next page of results.
          title: nextToken
      title: ListConfigsResponse
      type: object
    ListContactsResponse:
      description: <p/>
      example:
        contactList: ""
        nextToken: ""
      properties:
        contactList:
          allOf:
          - $ref: '#/components/schemas/ContactList'
          - description: List of contacts.
          title: contactList
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          - description: Next token returned in the response of a previous <code>ListContacts</code>
              call. Used to get the next page of results.
          title: nextToken
      title: ListContactsResponse
      type: object
    ContactStatus:
      enum:
      - AVAILABLE
      - AWS_CANCELLED
      - AWS_FAILED
      - CANCELLED
      - CANCELLING
      - COMPLETED
      - FAILED
      - FAILED_TO_SCHEDULE
      - PASS
      - POSTPASS
      - PREPASS
      - SCHEDULED
      - SCHEDULING
      title: ContactStatus
      type: string
    ListDataflowEndpointGroupsResponse:
      description: <p/>
      example:
        nextToken: ""
        dataflowEndpointGroupList: ""
      properties:
        dataflowEndpointGroupList:
          allOf:
          - $ref: '#/components/schemas/DataflowEndpointGroupList'
          - description: A list of dataflow endpoint groups.
          title: dataflowEndpointGroupList
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          - description: Next token returned in the response of a previous <code>ListDataflowEndpointGroups</code>
              call. Used to get the next page of results.
          title: nextToken
      title: ListDataflowEndpointGroupsResponse
      type: object
    ListEphemeridesResponse:
      example:
        ephemerides: ""
        nextToken: ""
      properties:
        ephemerides:
          allOf:
          - $ref: '#/components/schemas/EphemeridesList'
          - description: List of ephemerides.
          title: ephemerides
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          - description: Pagination token.
          title: nextToken
      title: ListEphemeridesResponse
      type: object
    EphemerisStatus:
      enum:
      - VALIDATING
      - INVALID
      - ERROR
      - ENABLED
      - DISABLED
      - EXPIRED
      title: EphemerisStatus
      type: string
    ListGroundStationsResponse:
      description: <p/>
      example:
        nextToken: ""
        groundStationList: ""
      properties:
        groundStationList:
          allOf:
          - $ref: '#/components/schemas/GroundStationList'
          - description: List of ground stations.
          title: groundStationList
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          - description: Next token that can be supplied in the next call to get the
              next page of ground stations.
          title: nextToken
      title: ListGroundStationsResponse
      type: object
    ListMissionProfilesResponse:
      description: <p/>
      example:
        missionProfileList: ""
        nextToken: ""
      properties:
        missionProfileList:
          allOf:
          - $ref: '#/components/schemas/MissionProfileList'
          - description: List of mission profiles.
          title: missionProfileList
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          - description: Next token returned in the response of a previous <code>ListMissionProfiles</code>
              call. Used to get the next page of results.
          title: nextToken
      title: ListMissionProfilesResponse
      type: object
    ListSatellitesResponse:
      description: <p/>
      example:
        satellites: ""
        nextToken: ""
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          - description: Next token that can be supplied in the next call to get the
              next page of satellites.
          title: nextToken
        satellites:
          allOf:
          - $ref: '#/components/schemas/SatelliteList'
          - description: List of satellites.
          title: satellites
      title: ListSatellitesResponse
      type: object
    ListTagsForResourceResponse:
      description: <p/>
      example:
        tags: ""
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          - description: Tags assigned to a resource.
          title: tags
      title: ListTagsForResourceResponse
      type: object
    RegisterAgentResponse:
      example:
        agentId: ""
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Uuid'
          - description: UUID of registered agent.
          title: agentId
      title: RegisterAgentResponse
      type: object
    AgentCpuCoresList:
      items:
        $ref: '#/components/schemas/Integer'
      maxItems: 256
      minItems: 0
      type: array
    VersionString:
      maxLength: 64
      minLength: 1
      pattern: "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*))*$"
      title: VersionString
      type: string
    ComponentVersionList:
      items:
        $ref: '#/components/schemas/ComponentVersion'
      maxItems: 20
      minItems: 1
      type: array
    InstanceId:
      maxLength: 64
      minLength: 10
      pattern: "^[a-z0-9-]{10,64}$"
      type: string
    InstanceType:
      maxLength: 64
      minLength: 1
      pattern: "^[a-z0-9.-]{1,64}$"
      type: string
    CapabilityArnList:
      items:
        $ref: '#/components/schemas/CapabilityArn'
      maxItems: 20
      minItems: 1
      type: array
    IpAddressList:
      items:
        $ref: '#/components/schemas/IpV4Address'
      maxItems: 20
      minItems: 1
      type: array
    TagResourceResponse:
      description: <p/>
      properties: {}
      type: object
    UntagResourceResponse:
      description: <p/>
      properties: {}
      type: object
    UnboundedString:
      minLength: 1
      pattern: "^[\\s\\S]+$"
      title: UnboundedString
      type: string
    UpdateAgentStatusResponse:
      example:
        agentId: ""
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Uuid'
          - description: UUID of updated agent.
          title: agentId
      required:
      - agentId
      title: UpdateAgentStatusResponse
      type: object
    SignatureMap:
      additionalProperties:
        $ref: '#/components/schemas/Boolean'
      type: object
    AgentStatus:
      enum:
      - SUCCESS
      - FAILED
      - ACTIVE
      - INACTIVE
      title: AgentStatus
      type: string
    ComponentStatusData:
      description: Data on the status of agent components.
      properties:
        bytesReceived:
          allOf:
          - $ref: '#/components/schemas/Long'
          - description: Bytes received by the component.
          title: bytesReceived
        bytesSent:
          allOf:
          - $ref: '#/components/schemas/Long'
          - description: Bytes sent by the component.
          title: bytesSent
        capabilityArn:
          allOf:
          - $ref: '#/components/schemas/CapabilityArn'
          - description: Capability ARN of the component.
          title: capabilityArn
        componentType:
          allOf:
          - $ref: '#/components/schemas/ComponentTypeString'
          - description: The Component type.
          title: componentType
        dataflowId:
          allOf:
          - $ref: '#/components/schemas/Uuid'
          - description: Dataflow UUID associated with the component.
          title: dataflowId
        packetsDropped:
          allOf:
          - $ref: '#/components/schemas/Long'
          - description: Packets dropped by component.
          title: packetsDropped
        status:
          allOf:
          - $ref: '#/components/schemas/AgentStatus'
          - description: Component status.
          title: status
      required:
      - capabilityArn
      - componentType
      - dataflowId
      - status
      title: ComponentStatusData
      type: object
    AWSRegion:
      maxLength: 128
      minLength: 1
      pattern: "^[\\w-]+$"
      type: string
    Integer:
      title: Integer
      type: integer
    AgentDetails:
      description: Detailed information about the agent.
      properties:
        agentCpuCores:
          allOf:
          - $ref: '#/components/schemas/AgentCpuCoresList'
          - description: List of CPU cores reserved for the agent.
          title: agentCpuCores
        agentVersion:
          allOf:
          - $ref: '#/components/schemas/VersionString'
          - description: Current agent version.
          title: agentVersion
        componentVersions:
          allOf:
          - $ref: '#/components/schemas/ComponentVersionList'
          - description: List of versions being used by agent components.
          title: componentVersions
        instanceId:
          allOf:
          - $ref: '#/components/schemas/InstanceId'
          - description: ID of EC2 instance agent is running on.
          title: instanceId
        instanceType:
          allOf:
          - $ref: '#/components/schemas/InstanceType'
          - description: Type of EC2 instance agent is running on.
          title: instanceType
        reservedCpuCores:
          allOf:
          - $ref: '#/components/schemas/AgentCpuCoresList'
          - description: <note> <p>This field should not be used. Use agentCpuCores
              instead.</p> </note> <p>List of CPU cores reserved for processes other
              than the agent running on the EC2 instance.</p>
          title: reservedCpuCores
      required:
      - agentVersion
      - componentVersions
      - instanceId
      - instanceType
      title: AgentDetails
      type: object
    AggregateStatus:
      description: Aggregate status of Agent components.
      properties:
        signatureMap:
          allOf:
          - $ref: '#/components/schemas/SignatureMap'
          - description: Sparse map of failure signatures.
          title: signatureMap
        status:
          allOf:
          - $ref: '#/components/schemas/AgentStatus'
          - description: Aggregate status.
          title: status
      required:
      - status
      title: AggregateStatus
      type: object
    AngleUnits:
      enum:
      - DEGREE_ANGLE
      - RADIAN
      title: AngleUnits
      type: string
    AntennaDemodDecodeDetails:
      description: Details about an antenna demod decode <code>Config</code> used
        in a contact.
      properties:
        outputNode:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: Name of an antenna demod decode output node used in a contact.
          title: outputNode
      title: AntennaDemodDecodeDetails
      type: object
    SpectrumConfig:
      description: Object that describes a spectral <code>Config</code>.
      properties:
        bandwidth:
          $ref: '#/components/schemas/SpectrumConfig_bandwidth'
        centerFrequency:
          $ref: '#/components/schemas/SpectrumConfig_centerFrequency'
        polarization:
          allOf:
          - $ref: '#/components/schemas/Polarization'
          - description: Polarization of a spectral <code>Config</code>. Capturing
              both <code>"RIGHT_HAND"</code> and <code>"LEFT_HAND"</code> polarization
              requires two separate configs.
          title: polarization
      required:
      - bandwidth
      - centerFrequency
      title: SpectrumConfig
      type: object
    DecodeConfig:
      description: Information about the decode <code>Config</code>.
      properties:
        unvalidatedJSON:
          allOf:
          - $ref: '#/components/schemas/JsonString'
          - description: Unvalidated JSON of a decode <code>Config</code>.
          title: unvalidatedJSON
      required:
      - unvalidatedJSON
      title: DecodeConfig
      type: object
    DemodulationConfig:
      description: Information about the demodulation <code>Config</code>.
      properties:
        unvalidatedJSON:
          allOf:
          - $ref: '#/components/schemas/JsonString'
          - description: Unvalidated JSON of a demodulation <code>Config</code>.
          title: unvalidatedJSON
      required:
      - unvalidatedJSON
      title: DemodulationConfig
      type: object
    UplinkSpectrumConfig:
      description: Information about the uplink spectral <code>Config</code>.
      properties:
        centerFrequency:
          $ref: '#/components/schemas/UplinkSpectrumConfig_centerFrequency'
        polarization:
          allOf:
          - $ref: '#/components/schemas/Polarization'
          - description: Polarization of an uplink spectral <code>Config</code>. Capturing
              both <code>"RIGHT_HAND"</code> and <code>"LEFT_HAND"</code> polarization
              requires two separate configs.
          title: polarization
      required:
      - centerFrequency
      title: UplinkSpectrumConfig
      type: object
    Eirp:
      description: Object that represents EIRP.
      properties:
        units:
          allOf:
          - $ref: '#/components/schemas/EirpUnits'
          - description: Units of an EIRP.
          title: units
        value:
          allOf:
          - $ref: '#/components/schemas/Double'
          - description: Value of an EIRP. Valid values are between 20.0 to 50.0 dBW.
          title: value
      required:
      - units
      - value
      title: Eirp
      type: object
    Boolean:
      title: Boolean
      type: boolean
    AnyArn:
      maxLength: 1024
      minLength: 5
      pattern: "^(arn:aws:)[\\s\\S]{0,1024}$"
      type: string
    AuditResults:
      enum:
      - HEALTHY
      - UNHEALTHY
      title: AuditResults
      type: string
    ConnectionDetails:
      description: Egress address of AgentEndpoint with an optional mtu.
      properties:
        mtu:
          allOf:
          - $ref: '#/components/schemas/Integer'
          - description: Maximum transmission unit (MTU) size in bytes of a dataflow
              endpoint.
          title: mtu
        socketAddress:
          $ref: '#/components/schemas/ConnectionDetails_socketAddress'
      required:
      - socketAddress
      title: ConnectionDetails
      type: object
    RangedConnectionDetails:
      description: Ingress address of AgentEndpoint with a port range and an optional
        mtu.
      properties:
        mtu:
          allOf:
          - $ref: '#/components/schemas/RangedConnectionDetailsMtuInteger'
          - description: Maximum transmission unit (MTU) size in bytes of a dataflow
              endpoint.
          title: mtu
        socketAddress:
          $ref: '#/components/schemas/RangedConnectionDetails_socketAddress'
      required:
      - socketAddress
      title: RangedConnectionDetails
      type: object
    SafeName:
      maxLength: 256
      minLength: 1
      pattern: "^[ a-zA-Z0-9_:-]{1,256}$"
      type: string
    AwsGroundStationAgentEndpoint:
      description: Information about AwsGroundStationAgentEndpoint.
      properties:
        agentStatus:
          allOf:
          - $ref: '#/components/schemas/AgentStatus'
          - description: The status of AgentEndpoint.
          title: agentStatus
        auditResults:
          allOf:
          - $ref: '#/components/schemas/AuditResults'
          - description: The results of the audit.
          title: auditResults
        egressAddress:
          $ref: '#/components/schemas/AwsGroundStationAgentEndpoint_egressAddress'
        ingressAddress:
          $ref: '#/components/schemas/AwsGroundStationAgentEndpoint_ingressAddress'
        name:
          allOf:
          - $ref: '#/components/schemas/SafeName'
          - description: Name string associated with AgentEndpoint. Used as a human-readable
              identifier for AgentEndpoint.
          title: name
      required:
      - egressAddress
      - ingressAddress
      - name
      title: AwsGroundStationAgentEndpoint
      type: object
    BandwidthUnits:
      enum:
      - GHz
      - MHz
      - kHz
      title: BandwidthUnits
      type: string
    BucketArn:
      type: string
    Uuid:
      maxLength: 128
      minLength: 1
      pattern: "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$"
      type: string
    CancelContactRequest:
      description: <p/>
      properties: {}
      title: CancelContactRequest
      type: object
    CapabilityArn:
      title: CapabilityArn
      type: string
    CapabilityHealth:
      enum:
      - UNHEALTHY
      - HEALTHY
      title: CapabilityHealth
      type: string
    CapabilityHealthReason:
      enum:
      - NO_REGISTERED_AGENT
      - INVALID_IP_OWNERSHIP
      - NOT_AUTHORIZED_TO_CREATE_SLR
      - UNVERIFIED_IP_OWNERSHIP
      - INITIALIZING_DATAPLANE
      - DATAPLANE_FAILURE
      - HEALTHY
      title: CapabilityHealthReason
      type: string
    CapabilityHealthReasonList:
      items:
        $ref: '#/components/schemas/CapabilityHealthReason'
      maxItems: 500
      minItems: 0
      type: array
    Long:
      type: integer
    ComponentTypeString:
      pattern: "^[a-zA-Z0-9_]{1,64}$"
      type: string
    ComponentStatusList:
      items:
        $ref: '#/components/schemas/ComponentStatusData'
      maxItems: 20
      minItems: 0
      type: array
    VersionStringList:
      items:
        $ref: '#/components/schemas/VersionString'
      maxItems: 20
      minItems: 1
      type: array
    ComponentVersion:
      description: Version information for agent components.
      properties:
        componentType:
          allOf:
          - $ref: '#/components/schemas/ComponentTypeString'
          - description: Component type.
          title: componentType
        versions:
          allOf:
          - $ref: '#/components/schemas/VersionStringList'
          - description: List of versions.
          title: versions
      required:
      - componentType
      - versions
      title: ComponentVersion
      type: object
    ConfigArn:
      title: ConfigArn
      type: string
    ConfigCapabilityType:
      enum:
      - antenna-downlink
      - antenna-downlink-demod-decode
      - antenna-uplink
      - dataflow-endpoint
      - tracking
      - uplink-echo
      - s3-recording
      title: ConfigCapabilityType
      type: string
    S3RecordingDetails:
      description: Details about an S3 recording <code>Config</code> used in a contact.
      properties:
        bucketArn:
          allOf:
          - $ref: '#/components/schemas/BucketArn'
          - description: ARN of the bucket used.
          title: bucketArn
        keyTemplate:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: Key template used for the S3 Recording Configuration
          title: keyTemplate
      title: S3RecordingDetails
      type: object
    ConfigDetails:
      description: Details for certain <code>Config</code> object types in a contact.
      properties:
        antennaDemodDecodeDetails:
          $ref: '#/components/schemas/ConfigDetails_antennaDemodDecodeDetails'
        endpointDetails:
          $ref: '#/components/schemas/EndpointDetails'
        s3RecordingDetails:
          $ref: '#/components/schemas/ConfigDetails_s3RecordingDetails'
      title: ConfigDetails
      type: object
    ConfigListItem:
      description: An item in a list of <code>Config</code> objects.
      properties:
        configArn:
          allOf:
          - $ref: '#/components/schemas/ConfigArn'
          - description: ARN of a <code>Config</code>.
          title: configArn
        configId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: UUID of a <code>Config</code>.
          title: configId
        configType:
          allOf:
          - $ref: '#/components/schemas/ConfigCapabilityType'
          - description: Type of a <code>Config</code>.
          title: configType
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: Name of a <code>Config</code>.
          title: name
      title: ConfigListItem
      type: object
    ConfigList:
      items:
        $ref: '#/components/schemas/ConfigListItem'
      type: array
    ConfigTypeData:
      description: <p>Object containing the parameters of a <code>Config</code>.</p>
        <p>See the subtype definitions for what each type of <code>Config</code> contains.</p>
      properties:
        antennaDownlinkConfig:
          $ref: '#/components/schemas/CreateConfig_request_configData_antennaDownlinkConfig'
        antennaDownlinkDemodDecodeConfig:
          $ref: '#/components/schemas/CreateConfig_request_configData_antennaDownlinkDemodDecodeConfig'
        antennaUplinkConfig:
          $ref: '#/components/schemas/CreateConfig_request_configData_antennaUplinkConfig'
        dataflowEndpointConfig:
          $ref: '#/components/schemas/CreateConfig_request_configData_dataflowEndpointConfig'
        s3RecordingConfig:
          $ref: '#/components/schemas/CreateConfig_request_configData_s3RecordingConfig'
        trackingConfig:
          $ref: '#/components/schemas/CreateConfig_request_configData_trackingConfig'
        uplinkEchoConfig:
          $ref: '#/components/schemas/CreateConfig_request_configData_uplinkEchoConfig'
      title: ConfigTypeData
      type: object
    SocketAddress:
      description: Information about the socket address.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: Name of a socket address.
          title: name
        port:
          allOf:
          - $ref: '#/components/schemas/Integer'
          - description: Port of a socket address.
          title: port
      required:
      - name
      - port
      title: SocketAddress
      type: object
    Timestamp:
      format: date-time
      type: string
    Elevation:
      description: Elevation angle of the satellite in the sky during a contact.
      properties:
        unit:
          allOf:
          - $ref: '#/components/schemas/AngleUnits'
          - description: Elevation angle units.
          title: unit
        value:
          allOf:
          - $ref: '#/components/schemas/Double'
          - description: Elevation angle value.
          title: value
      required:
      - unit
      - value
      title: Elevation
      type: object
    MissionProfileArn:
      type: string
    satelliteArn:
      type: string
    TagsMap:
      additionalProperties:
        $ref: '#/components/schemas/String'
      type: object
    ContactData:
      description: Data describing a contact.
      properties:
        contactId:
          allOf:
          - $ref: '#/components/schemas/Uuid'
          - description: UUID of a contact.
          title: contactId
        contactStatus:
          allOf:
          - $ref: '#/components/schemas/ContactStatus'
          - description: Status of a contact.
          title: contactStatus
        endTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: End time of a contact in UTC.
          title: endTime
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: Error message of a contact.
          title: errorMessage
        groundStation:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: Name of a ground station.
          title: groundStation
        maximumElevation:
          $ref: '#/components/schemas/DescribeContactResponse_maximumElevation'
        missionProfileArn:
          allOf:
          - $ref: '#/components/schemas/MissionProfileArn'
          - description: ARN of a mission profile.
          title: missionProfileArn
        postPassEndTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: Amount of time after a contact ends that you’d like to receive
              a CloudWatch event indicating the pass has finished.
          title: postPassEndTime
        prePassStartTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: Amount of time prior to contact start you’d like to receive
              a CloudWatch event indicating an upcoming pass.
          title: prePassStartTime
        region:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: Region of a contact.
          title: region
        satelliteArn:
          allOf:
          - $ref: '#/components/schemas/satelliteArn'
          - description: ARN of a satellite.
          title: satelliteArn
        startTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: Start time of a contact in UTC.
          title: startTime
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          - description: Tags assigned to a contact.
          title: tags
      title: ContactData
      type: object
    ContactList:
      items:
        $ref: '#/components/schemas/ContactData'
      type: array
    CreateConfigRequest:
      description: <p/>
      example:
        configData:
          uplinkEchoConfig:
            antennaUplinkConfigArn: ""
            enabled: ""
          antennaDownlinkDemodDecodeConfig:
            decodeConfig:
              unvalidatedJSON: ""
            spectrumConfig:
              bandwidth:
                units: ""
                value: ""
              polarization: ""
              centerFrequency:
                units: ""
                value: ""
            demodulationConfig:
              unvalidatedJSON: ""
          dataflowEndpointConfig:
            dataflowEndpointName: ""
            dataflowEndpointRegion: ""
          s3RecordingConfig:
            bucketArn: ""
            prefix: ""
            roleArn: ""
          trackingConfig:
            autotrack: ""
          antennaDownlinkConfig:
            spectrumConfig:
              bandwidth:
                units: ""
                value: ""
              polarization: ""
              centerFrequency:
                units: ""
                value: ""
          antennaUplinkConfig:
            spectrumConfig:
              polarization: ""
              centerFrequency:
                units: ""
                value: ""
            targetEirp:
              units: ""
              value: ""
            transmitDisabled: ""
        name: ""
        tags: ""
      properties:
        configData:
          $ref: '#/components/schemas/CreateConfigRequest_configData'
        name:
          allOf:
          - $ref: '#/components/schemas/SafeName'
          - description: Name of a <code>Config</code>.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          - description: Tags assigned to a <code>Config</code>.
      required:
      - configData
      - name
      title: CreateConfigRequest
      type: object
    DataflowEndpointGroupDurationInSeconds:
      maximum: 480
      minimum: 120
      type: integer
    EndpointDetailsList:
      items:
        $ref: '#/components/schemas/EndpointDetails'
      maxItems: 500
      minItems: 0
      type: array
    CreateDataflowEndpointGroupRequest:
      description: <p/>
      example:
        contactPrePassDurationSeconds: ""
        endpointDetails: ""
        contactPostPassDurationSeconds: ""
        tags: ""
      properties:
        contactPostPassDurationSeconds:
          allOf:
          - $ref: '#/components/schemas/DataflowEndpointGroupDurationInSeconds'
          - description: "Amount of time, in seconds, after a contact ends that the\
              \ Ground Station Dataflow Endpoint Group will be in a <code>POSTPASS</code>\
              \ state. A Ground Station Dataflow Endpoint Group State Change event\
              \ will be emitted when the Dataflow Endpoint Group enters and exits\
              \ the <code>POSTPASS</code> state."
        contactPrePassDurationSeconds:
          allOf:
          - $ref: '#/components/schemas/DataflowEndpointGroupDurationInSeconds'
          - description: "Amount of time, in seconds, before a contact starts that\
              \ the Ground Station Dataflow Endpoint Group will be in a <code>PREPASS</code>\
              \ state. A Ground Station Dataflow Endpoint Group State Change event\
              \ will be emitted when the Dataflow Endpoint Group enters and exits\
              \ the <code>PREPASS</code> state."
        endpointDetails:
          allOf:
          - $ref: '#/components/schemas/EndpointDetailsList'
          - description: Endpoint details of each endpoint in the dataflow endpoint
              group.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          - description: Tags of a dataflow endpoint group.
      required:
      - endpointDetails
      title: CreateDataflowEndpointGroupRequest
      type: object
    EphemerisData:
      description: Ephemeris data.
      properties:
        oem:
          $ref: '#/components/schemas/OEMEphemeris'
        tle:
          $ref: '#/components/schemas/TLEEphemeris'
      title: EphemerisData
      type: object
    CustomerEphemerisPriority:
      maximum: 99999
      minimum: 1
      type: integer
    CreateEphemerisRequest:
      example:
        satelliteId: ""
        expirationTime: ""
        kmsKeyArn: ""
        ephemeris:
          oem:
            s3Object:
              bucket: ""
              version: ""
              key: ""
            oemData: ""
          tle:
            s3Object:
              bucket: ""
              version: ""
              key: ""
            tleData: ""
        name: ""
        priority: ""
        enabled: ""
        tags: ""
      properties:
        enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: <p>Whether to set the ephemeris status to <code>ENABLED</code>
              after validation.</p> <p>Setting this to false will set the ephemeris
              status to <code>DISABLED</code> after validation.</p>
        ephemeris:
          $ref: '#/components/schemas/CreateEphemerisRequest_ephemeris'
        expirationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "An overall expiration time for the ephemeris in UTC, after\
              \ which it will become <code>EXPIRED</code>."
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KeyArn'
          - description: The ARN of a KMS key used to encrypt the ephemeris in Ground
              Station.
        name:
          allOf:
          - $ref: '#/components/schemas/SafeName'
          - description: A name string associated with the ephemeris. Used as a human-readable
              identifier for the ephemeris.
        priority:
          allOf:
          - $ref: '#/components/schemas/CustomerEphemerisPriority'
          - description: "<p>Customer-provided priority score to establish the order\
              \ in which overlapping ephemerides should be used.</p> <p>The default\
              \ for customer-provided ephemeris priority is 1, and higher numbers\
              \ take precedence.</p> <p>Priority must be 1 or greater</p>"
        satelliteId:
          allOf:
          - $ref: '#/components/schemas/Uuid'
          - description: AWS Ground Station satellite ID for this ephemeris.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          - description: Tags assigned to an ephemeris.
      required:
      - name
      - satelliteId
      title: CreateEphemerisRequest
      type: object
    DurationInSeconds:
      maximum: 21600
      minimum: 0
      type: integer
    DataflowEdgeList:
      items:
        $ref: '#/components/schemas/DataflowEdge'
      maxItems: 500
      minItems: 0
      type: array
    PositiveDurationInSeconds:
      maximum: 21600
      minimum: 1
      type: integer
    KmsKey:
      description: AWS Key Management Service (KMS) Key.
      properties:
        kmsAliasArn:
          allOf:
          - $ref: '#/components/schemas/KeyAliasArn'
          - description: KMS Alias Arn.
          title: kmsAliasArn
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KeyArn'
          - description: KMS Key Arn.
          title: kmsKeyArn
      title: KmsKey
      type: object
    RoleArn:
      type: string
    CreateMissionProfileRequest:
      description: <p/>
      example:
        streamsKmsRole: ""
        minimumViableContactDurationSeconds: ""
        trackingConfigArn: ""
        contactPrePassDurationSeconds: ""
        streamsKmsKey:
          kmsKeyArn: ""
          kmsAliasArn: ""
        name: ""
        dataflowEdges: ""
        contactPostPassDurationSeconds: ""
        tags: ""
      properties:
        contactPostPassDurationSeconds:
          allOf:
          - $ref: '#/components/schemas/DurationInSeconds'
          - description: Amount of time after a contact ends that you’d like to receive
              a CloudWatch event indicating the pass has finished.
        contactPrePassDurationSeconds:
          allOf:
          - $ref: '#/components/schemas/DurationInSeconds'
          - description: Amount of time prior to contact start you’d like to receive
              a CloudWatch event indicating an upcoming pass.
        dataflowEdges:
          allOf:
          - $ref: '#/components/schemas/DataflowEdgeList'
          - description: "A list of lists of ARNs. Each list of ARNs is an edge, with\
              \ a <i>from</i> <code>Config</code> and a <i>to</i> <code>Config</code>."
        minimumViableContactDurationSeconds:
          allOf:
          - $ref: '#/components/schemas/PositiveDurationInSeconds'
          - description: Smallest amount of time in seconds that you’d like to see
              for an available contact. AWS Ground Station will not present you with
              contacts shorter than this duration.
        name:
          allOf:
          - $ref: '#/components/schemas/SafeName'
          - description: Name of a mission profile.
        streamsKmsKey:
          $ref: '#/components/schemas/GetMissionProfileResponse_streamsKmsKey'
        streamsKmsRole:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          - description: Role to use for encrypting streams with KMS key.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          - description: Tags assigned to a mission profile.
        trackingConfigArn:
          allOf:
          - $ref: '#/components/schemas/ConfigArn'
          - description: ARN of a tracking <code>Config</code>.
      required:
      - dataflowEdges
      - minimumViableContactDurationSeconds
      - name
      - trackingConfigArn
      title: CreateMissionProfileRequest
      type: object
    Criticality:
      enum:
      - PREFERRED
      - REMOVED
      - REQUIRED
      title: Criticality
      type: string
    Destination:
      description: Dataflow details for the destination side.
      properties:
        configDetails:
          $ref: '#/components/schemas/Destination_configDetails'
        configId:
          allOf:
          - $ref: '#/components/schemas/Uuid'
          - description: UUID of a <code>Config</code>.
          title: configId
        configType:
          allOf:
          - $ref: '#/components/schemas/ConfigCapabilityType'
          - description: Type of a <code>Config</code>.
          title: configType
        dataflowDestinationRegion:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: Region of a dataflow destination.
          title: dataflowDestinationRegion
      title: Destination
      type: object
    Source:
      description: Dataflow details for the source side.
      properties:
        configDetails:
          $ref: '#/components/schemas/Source_configDetails'
        configId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: UUID of a <code>Config</code>.
          title: configId
        configType:
          allOf:
          - $ref: '#/components/schemas/ConfigCapabilityType'
          - description: Type of a <code>Config</code>.
          title: configType
        dataflowSourceRegion:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: Region of a dataflow source.
          title: dataflowSourceRegion
      title: Source
      type: object
    DataflowDetail:
      description: Information about a dataflow edge used in a contact.
      properties:
        destination:
          $ref: '#/components/schemas/Destination'
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: Error message for a dataflow.
          title: errorMessage
        source:
          $ref: '#/components/schemas/Source'
      title: DataflowDetail
      type: object
    DataflowEndpointMtuInteger:
      maximum: 1500
      minimum: 1400
      type: integer
    EndpointStatus:
      enum:
      - created
      - creating
      - deleted
      - deleting
      - failed
      title: EndpointStatus
      type: string
    DataflowEndpoint:
      description: Information about a dataflow endpoint.
      properties:
        address:
          $ref: '#/components/schemas/DataflowEndpoint_address'
        mtu:
          allOf:
          - $ref: '#/components/schemas/DataflowEndpointMtuInteger'
          - description: Maximum transmission unit (MTU) size in bytes of a dataflow
              endpoint.
          title: mtu
        name:
          allOf:
          - $ref: '#/components/schemas/SafeName'
          - description: Name of a dataflow endpoint.
          title: name
        status:
          allOf:
          - $ref: '#/components/schemas/EndpointStatus'
          - description: Status of a dataflow endpoint.
          title: status
      title: DataflowEndpoint
      type: object
    DataflowEndpointGroupArn:
      type: string
    DataflowEndpointListItem:
      description: Item in a list of <code>DataflowEndpoint</code> groups.
      properties:
        dataflowEndpointGroupArn:
          allOf:
          - $ref: '#/components/schemas/DataflowEndpointGroupArn'
          - description: ARN of a dataflow endpoint group.
          title: dataflowEndpointGroupArn
        dataflowEndpointGroupId:
          allOf:
          - $ref: '#/components/schemas/Uuid'
          - description: UUID of a dataflow endpoint group.
          title: dataflowEndpointGroupId
      title: DataflowEndpointListItem
      type: object
    DataflowEndpointGroupList:
      items:
        $ref: '#/components/schemas/DataflowEndpointListItem'
      type: array
    DataflowList:
      items:
        $ref: '#/components/schemas/DataflowDetail'
      type: array
    JsonString:
      maxLength: 8192
      minLength: 2
      pattern: "^[{}\\[\\]:.,\"0-9A-z\\-_\\s]{2,8192}$"
      type: string
    DeleteConfigRequest:
      description: <p/>
      properties: {}
      title: DeleteConfigRequest
      type: object
    DeleteDataflowEndpointGroupRequest:
      description: <p/>
      properties: {}
      title: DeleteDataflowEndpointGroupRequest
      type: object
    DeleteEphemerisRequest:
      properties: {}
      title: DeleteEphemerisRequest
      type: object
    DeleteMissionProfileRequest:
      description: <p/>
      properties: {}
      title: DeleteMissionProfileRequest
      type: object
    DescribeContactRequest:
      description: <p/>
      properties: {}
      title: DescribeContactRequest
      type: object
    DescribeEphemerisRequest:
      properties: {}
      title: DescribeEphemerisRequest
      type: object
    EphemerisInvalidReason:
      enum:
      - METADATA_INVALID
      - TIME_RANGE_INVALID
      - TRAJECTORY_INVALID
      - KMS_KEY_INVALID
      - VALIDATION_ERROR
      title: EphemerisInvalidReason
      type: string
    EphemerisPriority:
      maximum: 99999
      minimum: 0
      type: integer
    EphemerisTypeDescription:
      description: <p/>
      properties:
        oem:
          $ref: '#/components/schemas/EphemerisDescription'
        tle:
          $ref: '#/components/schemas/EphemerisDescription'
      title: EphemerisTypeDescription
      type: object
    DiscoveryData:
      description: Data for agent discovery.
      properties:
        capabilityArns:
          allOf:
          - $ref: '#/components/schemas/CapabilityArnList'
          - description: List of capabilities to associate with agent.
          title: capabilityArns
        privateIpAddresses:
          allOf:
          - $ref: '#/components/schemas/IpAddressList'
          - description: List of private IP addresses to associate with agent.
          title: privateIpAddresses
        publicIpAddresses:
          allOf:
          - $ref: '#/components/schemas/IpAddressList'
          - description: List of public IP addresses to associate with agent.
          title: publicIpAddresses
      required:
      - capabilityArns
      - privateIpAddresses
      - publicIpAddresses
      title: DiscoveryData
      type: object
    Double:
      format: double
      type: number
    EirpUnits:
      enum:
      - dBW
      title: EirpUnits
      type: string
    SecurityDetails:
      description: Information about endpoints.
      properties:
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          - description: 'ARN to a role needed for connecting streams to your instances. '
          title: roleArn
        securityGroupIds:
          allOf:
          - $ref: '#/components/schemas/SecurityGroupIdList'
          - description: The security groups to attach to the elastic network interfaces.
          title: securityGroupIds
        subnetIds:
          allOf:
          - $ref: '#/components/schemas/SubnetList'
          - description: A list of subnets where AWS Ground Station places elastic
              network interfaces to send streams to your instances.
          title: subnetIds
      required:
      - roleArn
      - securityGroupIds
      - subnetIds
      title: SecurityDetails
      type: object
    EphemerisItem:
      description: Ephemeris item.
      properties:
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The time the ephemeris was uploaded in UTC.
          title: creationTime
        enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: Whether or not the ephemeris is enabled.
          title: enabled
        ephemerisId:
          allOf:
          - $ref: '#/components/schemas/Uuid'
          - description: The AWS Ground Station ephemeris ID.
          title: ephemerisId
        name:
          allOf:
          - $ref: '#/components/schemas/SafeName'
          - description: A name string associated with the ephemeris. Used as a human-readable
              identifier for the ephemeris.
          title: name
        priority:
          allOf:
          - $ref: '#/components/schemas/EphemerisPriority'
          - description: "<p>Customer-provided priority score to establish the order\
              \ in which overlapping ephemerides should be used.</p> <p>The default\
              \ for customer-provided ephemeris priority is 1, and higher numbers\
              \ take precedence.</p> <p>Priority must be 1 or greater</p>"
          title: priority
        sourceS3Object:
          $ref: '#/components/schemas/EphemerisItem_sourceS3Object'
        status:
          allOf:
          - $ref: '#/components/schemas/EphemerisStatus'
          - description: The status of the ephemeris.
          title: status
      title: EphemerisItem
      type: object
    EphemeridesList:
      items:
        $ref: '#/components/schemas/EphemerisItem'
      maxItems: 500
      minItems: 1
      type: array
    S3Object:
      description: Object stored in S3 containing ephemeris data.
      properties:
        bucket:
          allOf:
          - $ref: '#/components/schemas/S3BucketName'
          - description: An Amazon S3 Bucket name.
          title: bucket
        key:
          allOf:
          - $ref: '#/components/schemas/S3ObjectKey'
          - description: An Amazon S3 key for the ephemeris.
          title: key
        version:
          allOf:
          - $ref: '#/components/schemas/S3VersionId'
          - description: "For versioned S3 objects, the version to use for the ephemeris."
          title: version
      title: S3Object
      type: object
    EphemerisDescription:
      description: Description of ephemeris.
      example:
        ephemerisData: ""
        sourceS3Object:
          bucket: ""
          version: ""
          key: ""
      properties:
        ephemerisData:
          allOf:
          - $ref: '#/components/schemas/UnboundedString'
          - description: Supplied ephemeris data.
          title: ephemerisData
        sourceS3Object:
          $ref: '#/components/schemas/EphemerisItem_sourceS3Object'
      title: EphemerisDescription
      type: object
    EphemerisSource:
      enum:
      - CUSTOMER_PROVIDED
      - SPACE_TRACK
      title: EphemerisSource
      type: string
    EphemerisMetaData:
      description: Metadata describing a particular ephemeris.
      properties:
        ephemerisId:
          allOf:
          - $ref: '#/components/schemas/Uuid'
          - description: <p>UUID of a customer-provided ephemeris.</p> <p>This field
              is not populated for default ephemerides from Space Track.</p>
          title: ephemerisId
        epoch:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "<p>The epoch of a default, ephemeris from Space Track in\
              \ UTC.</p> <p>This field is not populated for customer-provided ephemerides.</p>"
          title: epoch
        name:
          allOf:
          - $ref: '#/components/schemas/SafeName'
          - description: <p>A name string associated with the ephemeris. Used as a
              human-readable identifier for the ephemeris.</p> <p>A name is only returned
              for customer-provider ephemerides that have a name associated.</p>
          title: name
        source:
          allOf:
          - $ref: '#/components/schemas/EphemerisSource'
          - description: The <code>EphemerisSource</code> that generated a given ephemeris.
          title: source
      required:
      - source
      title: EphemerisMetaData
      type: object
    EphemerisStatusList:
      items:
        $ref: '#/components/schemas/EphemerisStatus'
      maxItems: 500
      minItems: 0
      type: array
    FrequencyUnits:
      enum:
      - GHz
      - MHz
      - kHz
      title: FrequencyUnits
      type: string
    Frequency:
      description: Object that describes the frequency.
      properties:
        units:
          allOf:
          - $ref: '#/components/schemas/FrequencyUnits'
          - description: Frequency units.
          title: units
        value:
          allOf:
          - $ref: '#/components/schemas/Double'
          - description: Frequency value. Valid values are between 2200 to 2300 MHz
              and 7750 to 8400 MHz for downlink and 2025 to 2120 MHz for uplink.
          title: value
      required:
      - units
      - value
      title: Frequency
      type: object
    FrequencyBandwidth:
      description: 'Object that describes the frequency bandwidth. '
      properties:
        units:
          allOf:
          - $ref: '#/components/schemas/BandwidthUnits'
          - description: Frequency bandwidth units.
          title: units
        value:
          allOf:
          - $ref: '#/components/schemas/Double'
          - description: "<p>Frequency bandwidth value. AWS Ground Station currently\
              \ has the following bandwidth limitations:</p> <ul> <li> <p>For <code>AntennaDownlinkDemodDecodeconfig</code>,\
              \ valid values are between 125 kHz to 650 MHz.</p> </li> <li> <p>For\
              \ <code>AntennaDownlinkconfig</code>, valid values are between 10 kHz\
              \ to 54 MHz.</p> </li> <li> <p>For <code>AntennaUplinkConfig</code>,\
              \ valid values are between 10 kHz to 54 MHz.</p> </li> </ul>"
          title: value
      required:
      - units
      - value
      title: FrequencyBandwidth
      type: object
    GetAgentConfigurationRequest:
      properties: {}
      title: GetAgentConfigurationRequest
      type: object
    GetConfigRequest:
      description: <p/>
      properties: {}
      title: GetConfigRequest
      type: object
    GetDataflowEndpointGroupRequest:
      description: <p/>
      properties: {}
      title: GetDataflowEndpointGroupRequest
      type: object
    Month:
      maximum: 12
      minimum: 1
      type: integer
    Year:
      maximum: 3000
      minimum: 2018
      type: integer
    GetMinuteUsageRequest:
      description: <p/>
      example:
        month: ""
        year: ""
      properties:
        month:
          allOf:
          - $ref: '#/components/schemas/Month'
          - description: "The month being requested, with a value of 1-12."
        year:
          allOf:
          - $ref: '#/components/schemas/Year'
          - description: "The year being requested, in the format of YYYY."
      required:
      - month
      - year
      title: GetMinuteUsageRequest
      type: object
    GetMissionProfileRequest:
      description: <p/>
      properties: {}
      title: GetMissionProfileRequest
      type: object
    GetSatelliteRequest:
      description: <p/>
      properties: {}
      title: GetSatelliteRequest
      type: object
    GroundStationIdList:
      items:
        $ref: '#/components/schemas/GroundStationName'
      maxItems: 500
      minItems: 0
      type: array
    noradSatelliteID:
      maximum: 99999
      minimum: 0
      type: integer
    GroundStationName:
      maxLength: 500
      minLength: 4
      pattern: "^[ a-zA-Z0-9-._:=]{4,256}$"
      title: GroundStationName
      type: string
    GroundStationData:
      description: Information about the ground station data.
      properties:
        groundStationId:
          allOf:
          - $ref: '#/components/schemas/GroundStationName'
          - description: UUID of a ground station.
          title: groundStationId
        groundStationName:
          allOf:
          - $ref: '#/components/schemas/GroundStationName'
          - description: Name of a ground station.
          title: groundStationName
        region:
          allOf:
          - $ref: '#/components/schemas/AWSRegion'
          - description: Ground station Region.
          title: region
      title: GroundStationData
      type: object
    GroundStationList:
      items:
        $ref: '#/components/schemas/GroundStationData'
      type: array
    IntegerRange:
      description: An integer range that has a minimum and maximum value.
      properties:
        maximum:
          allOf:
          - $ref: '#/components/schemas/Integer'
          - description: A maximum value.
          title: maximum
        minimum:
          allOf:
          - $ref: '#/components/schemas/Integer'
          - description: A minimum value.
          title: minimum
      required:
      - maximum
      - minimum
      title: IntegerRange
      type: object
    IpV4Address:
      maxLength: 16
      minLength: 7
      pattern: "^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$"
      title: IpV4Address
      type: string
    PaginationMaxResults:
      maximum: 100
      minimum: 0
      type: integer
    PaginationToken:
      maxLength: 1000
      minLength: 3
      pattern: "^[A-Za-z0-9-/+_.=]+$"
      type: string
    ListConfigsRequest:
      description: <p/>
      properties: {}
      title: ListConfigsRequest
      type: object
    StatusList:
      items:
        $ref: '#/components/schemas/ContactStatus'
      maxItems: 500
      minItems: 0
      type: array
    ListContactsRequest:
      description: <p/>
      example:
        groundStation: ""
        statusList: ""
        maxResults: ""
        nextToken: ""
        satelliteArn: ""
        startTime: ""
        endTime: ""
        missionProfileArn: ""
      properties:
        endTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: End time of a contact in UTC.
        groundStation:
          allOf:
          - $ref: '#/components/schemas/GroundStationName'
          - description: Name of a ground station.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/PaginationMaxResults'
          - description: Maximum number of contacts returned.
        missionProfileArn:
          allOf:
          - $ref: '#/components/schemas/MissionProfileArn'
          - description: ARN of a mission profile.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          - description: Next token returned in the request of a previous <code>ListContacts</code>
              call. Used to get the next page of results.
        satelliteArn:
          allOf:
          - $ref: '#/components/schemas/satelliteArn'
          - description: ARN of a satellite.
        startTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: Start time of a contact in UTC.
        statusList:
          allOf:
          - $ref: '#/components/schemas/StatusList'
          - description: Status of a contact reservation.
      required:
      - endTime
      - startTime
      - statusList
      title: ListContactsRequest
      type: object
    ListDataflowEndpointGroupsRequest:
      description: <p/>
      properties: {}
      title: ListDataflowEndpointGroupsRequest
      type: object
    ListEphemeridesRequest:
      example:
        statusList: ""
        satelliteId: ""
        startTime: ""
        endTime: ""
      properties:
        endTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The end time to list in UTC. The operation will return an
              ephemeris if its expiration time is within the time range defined by
              the <code>startTime</code> and <code>endTime</code>.
        satelliteId:
          allOf:
          - $ref: '#/components/schemas/Uuid'
          - description: The AWS Ground Station satellite ID to list ephemeris for.
        startTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The start time to list in UTC. The operation will return
              an ephemeris if its expiration time is within the time range defined
              by the <code>startTime</code> and <code>endTime</code>.
        statusList:
          allOf:
          - $ref: '#/components/schemas/EphemerisStatusList'
          - description: The list of ephemeris status to return.
      required:
      - endTime
      - satelliteId
      - startTime
      title: ListEphemeridesRequest
      type: object
    ListGroundStationsRequest:
      description: <p/>
      properties: {}
      title: ListGroundStationsRequest
      type: object
    ListMissionProfilesRequest:
      description: <p/>
      properties: {}
      title: ListMissionProfilesRequest
      type: object
    MissionProfileList:
      items:
        $ref: '#/components/schemas/MissionProfileListItem'
      type: array
    ListSatellitesRequest:
      description: <p/>
      properties: {}
      title: ListSatellitesRequest
      type: object
    SatelliteList:
      items:
        $ref: '#/components/schemas/SatelliteListItem'
      type: array
    ListTagsForResourceRequest:
      description: <p/>
      properties: {}
      title: ListTagsForResourceRequest
      type: object
    MissionProfileListItem:
      description: Item in a list of mission profiles.
      properties:
        missionProfileArn:
          allOf:
          - $ref: '#/components/schemas/MissionProfileArn'
          - description: ARN of a mission profile.
          title: missionProfileArn
        missionProfileId:
          allOf:
          - $ref: '#/components/schemas/Uuid'
          - description: UUID of a mission profile.
          title: missionProfileId
        name:
          allOf:
          - $ref: '#/components/schemas/SafeName'
          - description: Name of a mission profile.
          title: name
        region:
          allOf:
          - $ref: '#/components/schemas/AWSRegion'
          - description: Region of a mission profile.
          title: region
      title: MissionProfileListItem
      type: object
    Polarization:
      enum:
      - LEFT_HAND
      - NONE
      - RIGHT_HAND
      title: Polarization
      type: string
    RangedConnectionDetailsMtuInteger:
      maximum: 1500
      minimum: 1400
      type: integer
    RangedSocketAddress:
      description: A socket address with a port range.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/IpV4Address'
          - description: IPv4 socket address.
          title: name
        portRange:
          $ref: '#/components/schemas/RangedSocketAddress_portRange'
      required:
      - name
      - portRange
      title: RangedSocketAddress
      type: object
    RegisterAgentRequest:
      example:
        agentDetails:
          instanceId: ""
          reservedCpuCores: ""
          componentVersions: ""
          instanceType: ""
          agentVersion: ""
          agentCpuCores: ""
        discoveryData:
          privateIpAddresses: ""
          publicIpAddresses: ""
          capabilityArns: ""
      properties:
        agentDetails:
          $ref: '#/components/schemas/RegisterAgentRequest_agentDetails'
        discoveryData:
          $ref: '#/components/schemas/RegisterAgentRequest_discoveryData'
      required:
      - agentDetails
      - discoveryData
      title: RegisterAgentRequest
      type: object
    ReserveContactRequest:
      description: <p/>
      example:
        groundStation: ""
        satelliteArn: ""
        startTime: ""
        endTime: ""
        missionProfileArn: ""
        tags: ""
      properties:
        endTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: End time of a contact in UTC.
        groundStation:
          allOf:
          - $ref: '#/components/schemas/GroundStationName'
          - description: Name of a ground station.
        missionProfileArn:
          allOf:
          - $ref: '#/components/schemas/MissionProfileArn'
          - description: ARN of a mission profile.
        satelliteArn:
          allOf:
          - $ref: '#/components/schemas/satelliteArn'
          - description: ARN of a satellite
        startTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: Start time of a contact in UTC.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          - description: Tags assigned to a contact.
      required:
      - endTime
      - groundStation
      - missionProfileArn
      - satelliteArn
      - startTime
      title: ReserveContactRequest
      type: object
    S3BucketName:
      maxLength: 63
      minLength: 3
      pattern: "^[a-z0-9.-]{3,63}$"
      type: string
    S3KeyPrefix:
      maxLength: 900
      minLength: 1
      pattern: "^([a-zA-Z0-9_\\-=/]|\\{satellite_id\\}|\\{config\\-name}|\\{s3\\-config-id}|\\\
        {year\\}|\\{month\\}|\\{day\\}){1,900}$"
      type: string
    S3ObjectKey:
      maxLength: 1024
      minLength: 1
      pattern: "^[a-zA-Z0-9!*'\\)\\(./_-]{1,1024}$"
      type: string
    S3VersionId:
      maxLength: 1024
      minLength: 1
      pattern: "^[\\s\\S]{1,1024}$"
      type: string
    SatelliteListItem:
      description: Item in a list of satellites.
      properties:
        currentEphemeris:
          $ref: '#/components/schemas/GetSatelliteResponse_currentEphemeris'
        groundStations:
          allOf:
          - $ref: '#/components/schemas/GroundStationIdList'
          - description: A list of ground stations to which the satellite is on-boarded.
          title: groundStations
        noradSatelliteID:
          allOf:
          - $ref: '#/components/schemas/noradSatelliteID'
          - description: NORAD satellite ID number.
          title: noradSatelliteID
        satelliteArn:
          allOf:
          - $ref: '#/components/schemas/satelliteArn'
          - description: ARN of a satellite.
          title: satelliteArn
        satelliteId:
          allOf:
          - $ref: '#/components/schemas/Uuid'
          - description: UUID of a satellite.
          title: satelliteId
      title: SatelliteListItem
      type: object
    SecurityGroupIdList:
      items:
        $ref: '#/components/schemas/String'
      type: array
    SubnetList:
      items:
        $ref: '#/components/schemas/String'
      type: array
    TleLineOne:
      maxLength: 69
      minLength: 69
      pattern: "^1 [ 0-9]{5}[A-Z] [ 0-9]{5}[ A-Z]{3} [ 0-9]{5}[.][ 0-9]{8} (?:(?:[\
        \ 0+-][.][ 0-9]{8})|(?: [ +-][.][ 0-9]{7})) [ +-][ 0-9]{5}[+-][ 0-9] [ +-][\
        \ 0-9]{5}[+-][ 0-9] [ 0-9] [ 0-9]{4}[ 0-9]$"
      type: string
    TleLineTwo:
      maxLength: 69
      minLength: 69
      pattern: "^2 [ 0-9]{5} [ 0-9]{3}[.][ 0-9]{4} [ 0-9]{3}[.][ 0-9]{4} [ 0-9]{7}\
        \ [ 0-9]{3}[.][ 0-9]{4} [ 0-9]{3}[.][ 0-9]{4} [ 0-9]{2}[.][ 0-9]{13}[ 0-9]$"
      type: string
    TimeRange:
      description: A time range with a start and end time.
      properties:
        endTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: Time in UTC at which the time range ends.
          title: endTime
        startTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: Time in UTC at which the time range starts.
          title: startTime
      required:
      - endTime
      - startTime
      title: TimeRange
      type: object
    TLEData:
      description: Two-line element set (TLE) data.
      properties:
        tleLine1:
          allOf:
          - $ref: '#/components/schemas/TleLineOne'
          - description: First line of two-line element set (TLE) data.
          title: tleLine1
        tleLine2:
          allOf:
          - $ref: '#/components/schemas/TleLineTwo'
          - description: Second line of two-line element set (TLE) data.
          title: tleLine2
        validTimeRange:
          $ref: '#/components/schemas/TLEData_validTimeRange'
      required:
      - tleLine1
      - tleLine2
      - validTimeRange
      title: TLEData
      type: object
    TLEDataList:
      items:
        $ref: '#/components/schemas/TLEData'
      maxItems: 500
      minItems: 1
      type: array
    TagKeys:
      items:
        $ref: '#/components/schemas/UnboundedString'
      maxItems: 500
      minItems: 0
      type: array
    TagResourceRequest:
      description: <p/>
      example:
        tags: ""
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          - description: Tags assigned to a resource.
      required:
      - tags
      title: TagResourceRequest
      type: object
    UntagResourceRequest:
      description: <p/>
      properties: {}
      title: UntagResourceRequest
      type: object
    UpdateAgentStatusRequest:
      example:
        componentStatuses: ""
        aggregateStatus:
          signatureMap: ""
          status: ""
        taskId: ""
      properties:
        aggregateStatus:
          $ref: '#/components/schemas/UpdateAgentStatusRequest_aggregateStatus'
        componentStatuses:
          allOf:
          - $ref: '#/components/schemas/ComponentStatusList'
          - description: List of component statuses for agent.
        taskId:
          allOf:
          - $ref: '#/components/schemas/Uuid'
          - description: GUID of agent task.
      required:
      - aggregateStatus
      - componentStatuses
      - taskId
      title: UpdateAgentStatusRequest
      type: object
    UpdateConfigRequest:
      description: <p/>
      example:
        configData:
          uplinkEchoConfig:
            antennaUplinkConfigArn: ""
            enabled: ""
          antennaDownlinkDemodDecodeConfig:
            decodeConfig:
              unvalidatedJSON: ""
            spectrumConfig:
              bandwidth:
                units: ""
                value: ""
              polarization: ""
              centerFrequency:
                units: ""
                value: ""
            demodulationConfig:
              unvalidatedJSON: ""
          dataflowEndpointConfig:
            dataflowEndpointName: ""
            dataflowEndpointRegion: ""
          s3RecordingConfig:
            bucketArn: ""
            prefix: ""
            roleArn: ""
          trackingConfig:
            autotrack: ""
          antennaDownlinkConfig:
            spectrumConfig:
              bandwidth:
                units: ""
                value: ""
              polarization: ""
              centerFrequency:
                units: ""
                value: ""
          antennaUplinkConfig:
            spectrumConfig:
              polarization: ""
              centerFrequency:
                units: ""
                value: ""
            targetEirp:
              units: ""
              value: ""
            transmitDisabled: ""
        name: ""
      properties:
        configData:
          $ref: '#/components/schemas/CreateConfigRequest_configData'
        name:
          allOf:
          - $ref: '#/components/schemas/SafeName'
          - description: Name of a <code>Config</code>.
      required:
      - configData
      - name
      title: UpdateConfigRequest
      type: object
    UpdateEphemerisRequest:
      example:
        name: ""
        priority: ""
        enabled: ""
      properties:
        enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: Whether the ephemeris is enabled or not. Changing this value
              will not require the ephemeris to be re-validated.
        name:
          allOf:
          - $ref: '#/components/schemas/SafeName'
          - description: A name string associated with the ephemeris. Used as a human-readable
              identifier for the ephemeris.
        priority:
          allOf:
          - $ref: '#/components/schemas/EphemerisPriority'
          - description: "<p>Customer-provided priority score to establish the order\
              \ in which overlapping ephemerides should be used.</p> <p>The default\
              \ for customer-provided ephemeris priority is 1, and higher numbers\
              \ take precedence.</p> <p>Priority must be 1 or greater</p>"
      required:
      - enabled
      title: UpdateEphemerisRequest
      type: object
    UpdateMissionProfileRequest:
      description: <p/>
      example:
        streamsKmsRole: ""
        minimumViableContactDurationSeconds: ""
        trackingConfigArn: ""
        contactPrePassDurationSeconds: ""
        streamsKmsKey:
          kmsKeyArn: ""
          kmsAliasArn: ""
        name: ""
        dataflowEdges: ""
        contactPostPassDurationSeconds: ""
      properties:
        contactPostPassDurationSeconds:
          allOf:
          - $ref: '#/components/schemas/DurationInSeconds'
          - description: Amount of time after a contact ends that you’d like to receive
              a CloudWatch event indicating the pass has finished.
        contactPrePassDurationSeconds:
          allOf:
          - $ref: '#/components/schemas/DurationInSeconds'
          - description: Amount of time after a contact ends that you’d like to receive
              a CloudWatch event indicating the pass has finished.
        dataflowEdges:
          allOf:
          - $ref: '#/components/schemas/DataflowEdgeList'
          - description: "A list of lists of ARNs. Each list of ARNs is an edge, with\
              \ a <i>from</i> <code>Config</code> and a <i>to</i> <code>Config</code>."
        minimumViableContactDurationSeconds:
          allOf:
          - $ref: '#/components/schemas/PositiveDurationInSeconds'
          - description: Smallest amount of time in seconds that you’d like to see
              for an available contact. AWS Ground Station will not present you with
              contacts shorter than this duration.
        name:
          allOf:
          - $ref: '#/components/schemas/SafeName'
          - description: Name of a mission profile.
        streamsKmsKey:
          $ref: '#/components/schemas/GetMissionProfileResponse_streamsKmsKey'
        streamsKmsRole:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          - description: Role to use for encrypting streams with KMS key.
        trackingConfigArn:
          allOf:
          - $ref: '#/components/schemas/ConfigArn'
          - description: ARN of a tracking <code>Config</code>.
      title: UpdateMissionProfileRequest
      type: object
    CreateConfig_request_configData_antennaDownlinkConfig:
      allOf:
      - $ref: '#/components/schemas/AntennaDownlinkConfig'
      - description: Information about how AWS Ground Station should configure an
          antenna for downlink during a contact.
      example:
        spectrumConfig:
          bandwidth:
            units: ""
            value: ""
          polarization: ""
          centerFrequency:
            units: ""
            value: ""
      title: CreateConfig_request_configData_antennaDownlinkConfig
    CreateConfig_request_configData_antennaDownlinkDemodDecodeConfig:
      allOf:
      - $ref: '#/components/schemas/AntennaDownlinkDemodDecodeConfig'
      - description: Information about how AWS Ground Station should conﬁgure an antenna
          for downlink demod decode during a contact.
      example:
        decodeConfig:
          unvalidatedJSON: ""
        spectrumConfig:
          bandwidth:
            units: ""
            value: ""
          polarization: ""
          centerFrequency:
            units: ""
            value: ""
        demodulationConfig:
          unvalidatedJSON: ""
      title: CreateConfig_request_configData_antennaDownlinkDemodDecodeConfig
    CreateConfig_request_configData_antennaUplinkConfig:
      allOf:
      - $ref: '#/components/schemas/AntennaUplinkConfig'
      - description: Information about how AWS Ground Station should conﬁgure an antenna
          for uplink during a contact.
      example:
        spectrumConfig:
          polarization: ""
          centerFrequency:
            units: ""
            value: ""
        targetEirp:
          units: ""
          value: ""
        transmitDisabled: ""
      title: CreateConfig_request_configData_antennaUplinkConfig
    CreateConfig_request_configData_dataflowEndpointConfig:
      allOf:
      - $ref: '#/components/schemas/DataflowEndpointConfig'
      - description: Information about the dataflow endpoint <code>Config</code>.
      example:
        dataflowEndpointName: ""
        dataflowEndpointRegion: ""
      title: CreateConfig_request_configData_dataflowEndpointConfig
    CreateConfig_request_configData_s3RecordingConfig:
      allOf:
      - $ref: '#/components/schemas/S3RecordingConfig'
      - description: Information about an S3 recording <code>Config</code>.
      example:
        bucketArn: ""
        prefix: ""
        roleArn: ""
      title: CreateConfig_request_configData_s3RecordingConfig
    CreateConfig_request_configData_trackingConfig:
      allOf:
      - $ref: '#/components/schemas/TrackingConfig'
      - description: 'Object that determines whether tracking should be used during
          a contact executed with this <code>Config</code> in the mission profile. '
      example:
        autotrack: ""
      title: CreateConfig_request_configData_trackingConfig
    CreateConfig_request_configData_uplinkEchoConfig:
      allOf:
      - $ref: '#/components/schemas/UplinkEchoConfig'
      - description: "<p>Information about an uplink echo <code>Config</code>.</p>\
          \ <p>Parameters from the <code>AntennaUplinkConfig</code>, corresponding\
          \ to the specified <code>AntennaUplinkConfigArn</code>, are used when this\
          \ <code>UplinkEchoConfig</code> is used in a contact.</p>"
      example:
        antennaUplinkConfigArn: ""
        enabled: ""
      title: CreateConfig_request_configData_uplinkEchoConfig
    CreateConfig_request_configData:
      description: <p>Object containing the parameters of a <code>Config</code>.</p>
        <p>See the subtype definitions for what each type of <code>Config</code> contains.</p>
      properties:
        antennaDownlinkConfig:
          $ref: '#/components/schemas/CreateConfig_request_configData_antennaDownlinkConfig'
        antennaDownlinkDemodDecodeConfig:
          $ref: '#/components/schemas/CreateConfig_request_configData_antennaDownlinkDemodDecodeConfig'
        antennaUplinkConfig:
          $ref: '#/components/schemas/CreateConfig_request_configData_antennaUplinkConfig'
        dataflowEndpointConfig:
          $ref: '#/components/schemas/CreateConfig_request_configData_dataflowEndpointConfig'
        s3RecordingConfig:
          $ref: '#/components/schemas/CreateConfig_request_configData_s3RecordingConfig'
        trackingConfig:
          $ref: '#/components/schemas/CreateConfig_request_configData_trackingConfig'
        uplinkEchoConfig:
          $ref: '#/components/schemas/CreateConfig_request_configData_uplinkEchoConfig'
      title: CreateConfig_request_configData
      type: object
    CreateConfig_request:
      properties:
        configData:
          $ref: '#/components/schemas/CreateConfig_request_configData'
        name:
          description: Name of a <code>Config</code>.
          maxLength: 256
          minLength: 1
          pattern: "^[ a-zA-Z0-9_:-]{1,256}$"
          title: name
          type: string
        tags:
          additionalProperties:
            $ref: '#/components/schemas/String'
          description: Tags assigned to a <code>Config</code>.
          title: tags
          type: object
      required:
      - configData
      - name
      title: CreateConfig_request
      type: object
    CreateDataflowEndpointGroup_request:
      properties:
        contactPostPassDurationSeconds:
          description: "Amount of time, in seconds, after a contact ends that the\
            \ Ground Station Dataflow Endpoint Group will be in a <code>POSTPASS</code>\
            \ state. A Ground Station Dataflow Endpoint Group State Change event will\
            \ be emitted when the Dataflow Endpoint Group enters and exits the <code>POSTPASS</code>\
            \ state."
          maximum: 480
          minimum: 120
          title: contactPostPassDurationSeconds
          type: integer
        contactPrePassDurationSeconds:
          description: "Amount of time, in seconds, before a contact starts that the\
            \ Ground Station Dataflow Endpoint Group will be in a <code>PREPASS</code>\
            \ state. A Ground Station Dataflow Endpoint Group State Change event will\
            \ be emitted when the Dataflow Endpoint Group enters and exits the <code>PREPASS</code>\
            \ state."
          maximum: 480
          minimum: 120
          title: contactPrePassDurationSeconds
          type: integer
        endpointDetails:
          description: Endpoint details of each endpoint in the dataflow endpoint
            group.
          items:
            $ref: '#/components/schemas/EndpointDetails'
          maxItems: 500
          minItems: 0
          title: endpointDetails
          type: array
        tags:
          additionalProperties:
            $ref: '#/components/schemas/String'
          description: Tags of a dataflow endpoint group.
          title: tags
          type: object
      required:
      - endpointDetails
      title: CreateDataflowEndpointGroup_request
      type: object
    CreateEphemeris_request_ephemeris:
      description: Ephemeris data.
      properties:
        oem:
          $ref: '#/components/schemas/OEMEphemeris'
        tle:
          $ref: '#/components/schemas/TLEEphemeris'
      title: CreateEphemeris_request_ephemeris
      type: object
    CreateEphemeris_request:
      properties:
        enabled:
          description: <p>Whether to set the ephemeris status to <code>ENABLED</code>
            after validation.</p> <p>Setting this to false will set the ephemeris
            status to <code>DISABLED</code> after validation.</p>
          title: enabled
          type: boolean
        ephemeris:
          $ref: '#/components/schemas/CreateEphemeris_request_ephemeris'
        expirationTime:
          description: "An overall expiration time for the ephemeris in UTC, after\
            \ which it will become <code>EXPIRED</code>."
          format: date-time
          title: expirationTime
          type: string
        kmsKeyArn:
          description: The ARN of a KMS key used to encrypt the ephemeris in Ground
            Station.
          title: kmsKeyArn
          type: string
        name:
          description: A name string associated with the ephemeris. Used as a human-readable
            identifier for the ephemeris.
          maxLength: 256
          minLength: 1
          pattern: "^[ a-zA-Z0-9_:-]{1,256}$"
          title: name
          type: string
        priority:
          description: "<p>Customer-provided priority score to establish the order\
            \ in which overlapping ephemerides should be used.</p> <p>The default\
            \ for customer-provided ephemeris priority is 1, and higher numbers take\
            \ precedence.</p> <p>Priority must be 1 or greater</p>"
          maximum: 99999
          minimum: 1
          title: priority
          type: integer
        satelliteId:
          description: AWS Ground Station satellite ID for this ephemeris.
          maxLength: 128
          minLength: 1
          pattern: "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$"
          title: satelliteId
          type: string
        tags:
          additionalProperties:
            $ref: '#/components/schemas/String'
          description: Tags assigned to an ephemeris.
          title: tags
          type: object
      required:
      - name
      - satelliteId
      title: CreateEphemeris_request
      type: object
    CreateMissionProfile_request_streamsKmsKey:
      description: AWS Key Management Service (KMS) Key.
      properties:
        kmsAliasArn:
          allOf:
          - $ref: '#/components/schemas/KeyAliasArn'
          - description: KMS Alias Arn.
          title: kmsAliasArn
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KeyArn'
          - description: KMS Key Arn.
          title: kmsKeyArn
      title: CreateMissionProfile_request_streamsKmsKey
      type: object
    CreateMissionProfile_request:
      properties:
        contactPostPassDurationSeconds:
          description: Amount of time after a contact ends that you’d like to receive
            a CloudWatch event indicating the pass has finished.
          maximum: 21600
          minimum: 0
          title: contactPostPassDurationSeconds
          type: integer
        contactPrePassDurationSeconds:
          description: Amount of time prior to contact start you’d like to receive
            a CloudWatch event indicating an upcoming pass.
          maximum: 21600
          minimum: 0
          title: contactPrePassDurationSeconds
          type: integer
        dataflowEdges:
          description: "A list of lists of ARNs. Each list of ARNs is an edge, with\
            \ a <i>from</i> <code>Config</code> and a <i>to</i> <code>Config</code>."
          items:
            $ref: '#/components/schemas/DataflowEdge'
          maxItems: 500
          minItems: 0
          title: dataflowEdges
          type: array
        minimumViableContactDurationSeconds:
          description: Smallest amount of time in seconds that you’d like to see for
            an available contact. AWS Ground Station will not present you with contacts
            shorter than this duration.
          maximum: 21600
          minimum: 1
          title: minimumViableContactDurationSeconds
          type: integer
        name:
          description: Name of a mission profile.
          maxLength: 256
          minLength: 1
          pattern: "^[ a-zA-Z0-9_:-]{1,256}$"
          title: name
          type: string
        streamsKmsKey:
          $ref: '#/components/schemas/CreateMissionProfile_request_streamsKmsKey'
        streamsKmsRole:
          description: Role to use for encrypting streams with KMS key.
          title: streamsKmsRole
          type: string
        tags:
          additionalProperties:
            $ref: '#/components/schemas/String'
          description: Tags assigned to a mission profile.
          title: tags
          type: object
        trackingConfigArn:
          description: ARN of a tracking <code>Config</code>.
          title: trackingConfigArn
          type: string
      required:
      - dataflowEdges
      - minimumViableContactDurationSeconds
      - name
      - trackingConfigArn
      title: CreateMissionProfile_request
      type: object
    UpdateConfig_request:
      properties:
        configData:
          $ref: '#/components/schemas/CreateConfig_request_configData'
        name:
          description: Name of a <code>Config</code>.
          maxLength: 256
          minLength: 1
          pattern: "^[ a-zA-Z0-9_:-]{1,256}$"
          title: name
          type: string
      required:
      - configData
      - name
      title: UpdateConfig_request
      type: object
    UpdateEphemeris_request:
      properties:
        enabled:
          description: Whether the ephemeris is enabled or not. Changing this value
            will not require the ephemeris to be re-validated.
          title: enabled
          type: boolean
        name:
          description: A name string associated with the ephemeris. Used as a human-readable
            identifier for the ephemeris.
          maxLength: 256
          minLength: 1
          pattern: "^[ a-zA-Z0-9_:-]{1,256}$"
          title: name
          type: string
        priority:
          description: "<p>Customer-provided priority score to establish the order\
            \ in which overlapping ephemerides should be used.</p> <p>The default\
            \ for customer-provided ephemeris priority is 1, and higher numbers take\
            \ precedence.</p> <p>Priority must be 1 or greater</p>"
          maximum: 99999
          minimum: 0
          title: priority
          type: integer
      required:
      - enabled
      title: UpdateEphemeris_request
      type: object
    UpdateMissionProfile_request:
      properties:
        contactPostPassDurationSeconds:
          description: Amount of time after a contact ends that you’d like to receive
            a CloudWatch event indicating the pass has finished.
          maximum: 21600
          minimum: 0
          title: contactPostPassDurationSeconds
          type: integer
        contactPrePassDurationSeconds:
          description: Amount of time after a contact ends that you’d like to receive
            a CloudWatch event indicating the pass has finished.
          maximum: 21600
          minimum: 0
          title: contactPrePassDurationSeconds
          type: integer
        dataflowEdges:
          description: "A list of lists of ARNs. Each list of ARNs is an edge, with\
            \ a <i>from</i> <code>Config</code> and a <i>to</i> <code>Config</code>."
          items:
            $ref: '#/components/schemas/DataflowEdge'
          maxItems: 500
          minItems: 0
          title: dataflowEdges
          type: array
        minimumViableContactDurationSeconds:
          description: Smallest amount of time in seconds that you’d like to see for
            an available contact. AWS Ground Station will not present you with contacts
            shorter than this duration.
          maximum: 21600
          minimum: 1
          title: minimumViableContactDurationSeconds
          type: integer
        name:
          description: Name of a mission profile.
          maxLength: 256
          minLength: 1
          pattern: "^[ a-zA-Z0-9_:-]{1,256}$"
          title: name
          type: string
        streamsKmsKey:
          $ref: '#/components/schemas/CreateMissionProfile_request_streamsKmsKey'
        streamsKmsRole:
          description: Role to use for encrypting streams with KMS key.
          title: streamsKmsRole
          type: string
        trackingConfigArn:
          description: ARN of a tracking <code>Config</code>.
          title: trackingConfigArn
          type: string
      title: UpdateMissionProfile_request
      type: object
    GetMinuteUsage_request:
      properties:
        month:
          description: "The month being requested, with a value of 1-12."
          maximum: 12
          minimum: 1
          title: month
          type: integer
        year:
          description: "The year being requested, in the format of YYYY."
          maximum: 3000
          minimum: 2018
          title: year
          type: integer
      required:
      - month
      - year
      title: GetMinuteUsage_request
      type: object
    ListContacts_request:
      properties:
        endTime:
          description: End time of a contact in UTC.
          format: date-time
          title: endTime
          type: string
        groundStation:
          description: Name of a ground station.
          maxLength: 500
          minLength: 4
          pattern: "^[ a-zA-Z0-9-._:=]{4,256}$"
          title: groundStation
          type: string
        maxResults:
          description: Maximum number of contacts returned.
          maximum: 100
          minimum: 0
          title: maxResults
          type: integer
        missionProfileArn:
          description: ARN of a mission profile.
          title: missionProfileArn
          type: string
        nextToken:
          description: Next token returned in the request of a previous <code>ListContacts</code>
            call. Used to get the next page of results.
          maxLength: 1000
          minLength: 3
          pattern: "^[A-Za-z0-9-/+_.=]+$"
          title: nextToken
          type: string
        satelliteArn:
          description: ARN of a satellite.
          title: satelliteArn
          type: string
        startTime:
          description: Start time of a contact in UTC.
          format: date-time
          title: startTime
          type: string
        statusList:
          description: Status of a contact reservation.
          items:
            $ref: '#/components/schemas/ContactStatus'
          maxItems: 500
          minItems: 0
          title: statusList
          type: array
      required:
      - endTime
      - startTime
      - statusList
      title: ListContacts_request
      type: object
    ListEphemerides_request:
      properties:
        endTime:
          description: The end time to list in UTC. The operation will return an ephemeris
            if its expiration time is within the time range defined by the <code>startTime</code>
            and <code>endTime</code>.
          format: date-time
          title: endTime
          type: string
        satelliteId:
          description: The AWS Ground Station satellite ID to list ephemeris for.
          maxLength: 128
          minLength: 1
          pattern: "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$"
          title: satelliteId
          type: string
        startTime:
          description: The start time to list in UTC. The operation will return an
            ephemeris if its expiration time is within the time range defined by the
            <code>startTime</code> and <code>endTime</code>.
          format: date-time
          title: startTime
          type: string
        statusList:
          description: The list of ephemeris status to return.
          items:
            $ref: '#/components/schemas/EphemerisStatus'
          maxItems: 500
          minItems: 0
          title: statusList
          type: array
      required:
      - endTime
      - satelliteId
      - startTime
      title: ListEphemerides_request
      type: object
    TagResource_request:
      properties:
        tags:
          additionalProperties:
            $ref: '#/components/schemas/String'
          description: Tags assigned to a resource.
          title: tags
          type: object
      required:
      - tags
      title: TagResource_request
      type: object
    RegisterAgent_request_agentDetails:
      description: Detailed information about the agent.
      properties:
        agentCpuCores:
          allOf:
          - $ref: '#/components/schemas/AgentCpuCoresList'
          - description: List of CPU cores reserved for the agent.
          title: agentCpuCores
        agentVersion:
          allOf:
          - $ref: '#/components/schemas/VersionString'
          - description: Current agent version.
          title: agentVersion
        componentVersions:
          allOf:
          - $ref: '#/components/schemas/ComponentVersionList'
          - description: List of versions being used by agent components.
          title: componentVersions
        instanceId:
          allOf:
          - $ref: '#/components/schemas/InstanceId'
          - description: ID of EC2 instance agent is running on.
          title: instanceId
        instanceType:
          allOf:
          - $ref: '#/components/schemas/InstanceType'
          - description: Type of EC2 instance agent is running on.
          title: instanceType
        reservedCpuCores:
          allOf:
          - $ref: '#/components/schemas/AgentCpuCoresList'
          - description: <note> <p>This field should not be used. Use agentCpuCores
              instead.</p> </note> <p>List of CPU cores reserved for processes other
              than the agent running on the EC2 instance.</p>
          title: reservedCpuCores
      title: RegisterAgent_request_agentDetails
      type: object
    RegisterAgent_request_discoveryData:
      description: Data for agent discovery.
      properties:
        capabilityArns:
          allOf:
          - $ref: '#/components/schemas/CapabilityArnList'
          - description: List of capabilities to associate with agent.
          title: capabilityArns
        privateIpAddresses:
          allOf:
          - $ref: '#/components/schemas/IpAddressList'
          - description: List of private IP addresses to associate with agent.
          title: privateIpAddresses
        publicIpAddresses:
          allOf:
          - $ref: '#/components/schemas/IpAddressList'
          - description: List of public IP addresses to associate with agent.
          title: publicIpAddresses
      title: RegisterAgent_request_discoveryData
      type: object
    RegisterAgent_request:
      properties:
        agentDetails:
          $ref: '#/components/schemas/RegisterAgent_request_agentDetails'
        discoveryData:
          $ref: '#/components/schemas/RegisterAgent_request_discoveryData'
      required:
      - agentDetails
      - discoveryData
      title: RegisterAgent_request
      type: object
    ReserveContact_request:
      properties:
        endTime:
          description: End time of a contact in UTC.
          format: date-time
          title: endTime
          type: string
        groundStation:
          description: Name of a ground station.
          maxLength: 500
          minLength: 4
          pattern: "^[ a-zA-Z0-9-._:=]{4,256}$"
          title: groundStation
          type: string
        missionProfileArn:
          description: ARN of a mission profile.
          title: missionProfileArn
          type: string
        satelliteArn:
          description: ARN of a satellite
          title: satelliteArn
          type: string
        startTime:
          description: Start time of a contact in UTC.
          format: date-time
          title: startTime
          type: string
        tags:
          additionalProperties:
            $ref: '#/components/schemas/String'
          description: Tags assigned to a contact.
          title: tags
          type: object
      required:
      - endTime
      - groundStation
      - missionProfileArn
      - satelliteArn
      - startTime
      title: ReserveContact_request
      type: object
    UpdateAgentStatus_request_aggregateStatus:
      description: Aggregate status of Agent components.
      properties:
        signatureMap:
          allOf:
          - $ref: '#/components/schemas/SignatureMap'
          - description: Sparse map of failure signatures.
          title: signatureMap
        status:
          allOf:
          - $ref: '#/components/schemas/AgentStatus'
          - description: Aggregate status.
          title: status
      title: UpdateAgentStatus_request_aggregateStatus
      type: object
    UpdateAgentStatus_request:
      properties:
        aggregateStatus:
          $ref: '#/components/schemas/UpdateAgentStatus_request_aggregateStatus'
        componentStatuses:
          description: List of component statuses for agent.
          items:
            $ref: '#/components/schemas/ComponentStatusData'
          maxItems: 20
          minItems: 0
          title: componentStatuses
          type: array
        taskId:
          description: GUID of agent task.
          maxLength: 128
          minLength: 1
          pattern: "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$"
          title: taskId
          type: string
      required:
      - aggregateStatus
      - componentStatuses
      - taskId
      title: UpdateAgentStatus_request
      type: object
    AntennaDownlinkConfig_spectrumConfig:
      allOf:
      - $ref: '#/components/schemas/SpectrumConfig'
      - description: Object that describes a spectral <code>Config</code>.
      example:
        bandwidth:
          units: ""
          value: ""
        polarization: ""
        centerFrequency:
          units: ""
          value: ""
      title: AntennaDownlinkConfig_spectrumConfig
    AntennaDownlinkDemodDecodeConfig_decodeConfig:
      allOf:
      - $ref: '#/components/schemas/DecodeConfig'
      - description: Information about the decode <code>Config</code>.
      example:
        unvalidatedJSON: ""
      title: AntennaDownlinkDemodDecodeConfig_decodeConfig
    AntennaDownlinkDemodDecodeConfig_demodulationConfig:
      allOf:
      - $ref: '#/components/schemas/DemodulationConfig'
      - description: Information about the demodulation <code>Config</code>.
      example:
        unvalidatedJSON: ""
      title: AntennaDownlinkDemodDecodeConfig_demodulationConfig
    AntennaDownlinkDemodDecodeConfig_spectrumConfig:
      allOf:
      - $ref: '#/components/schemas/SpectrumConfig'
      - description: Information about the spectral <code>Config</code>.
      example:
        bandwidth:
          units: ""
          value: ""
        polarization: ""
        centerFrequency:
          units: ""
          value: ""
      title: AntennaDownlinkDemodDecodeConfig_spectrumConfig
    AntennaUplinkConfig_spectrumConfig:
      allOf:
      - $ref: '#/components/schemas/UplinkSpectrumConfig'
      - description: Information about the uplink spectral <code>Config</code>.
      example:
        polarization: ""
        centerFrequency:
          units: ""
          value: ""
      title: AntennaUplinkConfig_spectrumConfig
    AntennaUplinkConfig_targetEirp:
      allOf:
      - $ref: '#/components/schemas/Eirp'
      - description: EIRP of the target.
      example:
        units: ""
        value: ""
      title: AntennaUplinkConfig_targetEirp
    EndpointDetails_awsGroundStationAgentEndpoint:
      allOf:
      - $ref: '#/components/schemas/AwsGroundStationAgentEndpoint'
      - description: An agent endpoint.
      title: EndpointDetails_awsGroundStationAgentEndpoint
    EndpointDetails_endpoint:
      allOf:
      - $ref: '#/components/schemas/DataflowEndpoint'
      - description: A dataflow endpoint.
      title: EndpointDetails_endpoint
    EndpointDetails_securityDetails:
      allOf:
      - $ref: '#/components/schemas/SecurityDetails'
      - description: "Endpoint security details including a list of subnets, a list\
          \ of security groups and a role to connect streams to instances."
      title: EndpointDetails_securityDetails
    OEMEphemeris_s3Object:
      allOf:
      - $ref: '#/components/schemas/S3Object'
      - description: Identifies the S3 object to be used as the ephemeris.
      example:
        bucket: ""
        version: ""
        key: ""
      title: OEMEphemeris_s3Object
    DescribeContactResponse_maximumElevation:
      allOf:
      - $ref: '#/components/schemas/Elevation'
      - description: Maximum elevation angle of a contact.
      example:
        unit: ""
        value: ""
      title: DescribeContactResponse_maximumElevation
    DescribeEphemerisResponse_suppliedData:
      allOf:
      - $ref: '#/components/schemas/EphemerisTypeDescription'
      - description: Supplied ephemeris data.
      example:
        oem:
          ephemerisData: ""
          sourceS3Object:
            bucket: ""
            version: ""
            key: ""
        tle:
          ephemerisData: ""
          sourceS3Object:
            bucket: ""
            version: ""
            key: ""
      title: DescribeEphemerisResponse_suppliedData
    GetConfigResponse_configData:
      allOf:
      - $ref: '#/components/schemas/ConfigTypeData'
      - description: Data elements in a <code>Config</code>.
      example:
        uplinkEchoConfig:
          antennaUplinkConfigArn: ""
          enabled: ""
        antennaDownlinkDemodDecodeConfig:
          decodeConfig:
            unvalidatedJSON: ""
          spectrumConfig:
            bandwidth:
              units: ""
              value: ""
            polarization: ""
            centerFrequency:
              units: ""
              value: ""
          demodulationConfig:
            unvalidatedJSON: ""
        dataflowEndpointConfig:
          dataflowEndpointName: ""
          dataflowEndpointRegion: ""
        s3RecordingConfig:
          bucketArn: ""
          prefix: ""
          roleArn: ""
        trackingConfig:
          autotrack: ""
        antennaDownlinkConfig:
          spectrumConfig:
            bandwidth:
              units: ""
              value: ""
            polarization: ""
            centerFrequency:
              units: ""
              value: ""
        antennaUplinkConfig:
          spectrumConfig:
            polarization: ""
            centerFrequency:
              units: ""
              value: ""
          targetEirp:
            units: ""
            value: ""
          transmitDisabled: ""
      title: GetConfigResponse_configData
    GetMissionProfileResponse_streamsKmsKey:
      allOf:
      - $ref: '#/components/schemas/KmsKey'
      - description: KMS key to use for encrypting streams.
      example:
        kmsKeyArn: ""
        kmsAliasArn: ""
      title: GetMissionProfileResponse_streamsKmsKey
    GetSatelliteResponse_currentEphemeris:
      allOf:
      - $ref: '#/components/schemas/EphemerisMetaData'
      - description: The current ephemeris being used to compute the trajectory of
          the satellite.
      example:
        name: ""
        epoch: ""
        source: ""
        ephemerisId: ""
      title: GetSatelliteResponse_currentEphemeris
    SpectrumConfig_bandwidth:
      allOf:
      - $ref: '#/components/schemas/FrequencyBandwidth'
      - description: "<p>Bandwidth of a spectral <code>Config</code>. AWS Ground Station\
          \ currently has the following bandwidth limitations:</p> <ul> <li> <p>For\
          \ <code>AntennaDownlinkDemodDecodeconfig</code>, valid values are between\
          \ 125 kHz to 650 MHz.</p> </li> <li> <p>For <code>AntennaDownlinkconfig</code>\
          \ valid values are between 10 kHz to 54 MHz.</p> </li> <li> <p>For <code>AntennaUplinkConfig</code>,\
          \ valid values are between 10 kHz to 54 MHz.</p> </li> </ul>"
      example:
        units: ""
        value: ""
      title: SpectrumConfig_bandwidth
    SpectrumConfig_centerFrequency:
      allOf:
      - $ref: '#/components/schemas/Frequency'
      - description: Center frequency of a spectral <code>Config</code>. Valid values
          are between 2200 to 2300 MHz and 7750 to 8400 MHz for downlink and 2025
          to 2120 MHz for uplink.
      example:
        units: ""
        value: ""
      title: SpectrumConfig_centerFrequency
    UplinkSpectrumConfig_centerFrequency:
      allOf:
      - $ref: '#/components/schemas/Frequency'
      - description: Center frequency of an uplink spectral <code>Config</code>. Valid
          values are between 2025 to 2120 MHz.
      example:
        units: ""
        value: ""
      title: UplinkSpectrumConfig_centerFrequency
    ConnectionDetails_socketAddress:
      allOf:
      - $ref: '#/components/schemas/SocketAddress'
      - description: A socket address.
      title: ConnectionDetails_socketAddress
    RangedConnectionDetails_socketAddress:
      allOf:
      - $ref: '#/components/schemas/RangedSocketAddress'
      - description: A ranged socket address.
      title: RangedConnectionDetails_socketAddress
    AwsGroundStationAgentEndpoint_egressAddress:
      allOf:
      - $ref: '#/components/schemas/ConnectionDetails'
      - description: The egress address of AgentEndpoint.
      title: AwsGroundStationAgentEndpoint_egressAddress
    AwsGroundStationAgentEndpoint_ingressAddress:
      allOf:
      - $ref: '#/components/schemas/RangedConnectionDetails'
      - description: The ingress address of AgentEndpoint.
      title: AwsGroundStationAgentEndpoint_ingressAddress
    ConfigDetails_antennaDemodDecodeDetails:
      allOf:
      - $ref: '#/components/schemas/AntennaDemodDecodeDetails'
      - description: Details for antenna demod decode <code>Config</code> in a contact.
      title: ConfigDetails_antennaDemodDecodeDetails
    ConfigDetails_s3RecordingDetails:
      allOf:
      - $ref: '#/components/schemas/S3RecordingDetails'
      - description: Details for an S3 recording <code>Config</code> in a contact.
      title: ConfigDetails_s3RecordingDetails
    CreateConfigRequest_configData:
      allOf:
      - $ref: '#/components/schemas/ConfigTypeData'
      - description: Parameters of a <code>Config</code>.
      example:
        uplinkEchoConfig:
          antennaUplinkConfigArn: ""
          enabled: ""
        antennaDownlinkDemodDecodeConfig:
          decodeConfig:
            unvalidatedJSON: ""
          spectrumConfig:
            bandwidth:
              units: ""
              value: ""
            polarization: ""
            centerFrequency:
              units: ""
              value: ""
          demodulationConfig:
            unvalidatedJSON: ""
        dataflowEndpointConfig:
          dataflowEndpointName: ""
          dataflowEndpointRegion: ""
        s3RecordingConfig:
          bucketArn: ""
          prefix: ""
          roleArn: ""
        trackingConfig:
          autotrack: ""
        antennaDownlinkConfig:
          spectrumConfig:
            bandwidth:
              units: ""
              value: ""
            polarization: ""
            centerFrequency:
              units: ""
              value: ""
        antennaUplinkConfig:
          spectrumConfig:
            polarization: ""
            centerFrequency:
              units: ""
              value: ""
          targetEirp:
            units: ""
            value: ""
          transmitDisabled: ""
      title: CreateConfigRequest_configData
    CreateEphemerisRequest_ephemeris:
      allOf:
      - $ref: '#/components/schemas/EphemerisData'
      - description: Ephemeris data.
      example:
        oem:
          s3Object:
            bucket: ""
            version: ""
            key: ""
          oemData: ""
        tle:
          s3Object:
            bucket: ""
            version: ""
            key: ""
          tleData: ""
      title: CreateEphemerisRequest_ephemeris
    Destination_configDetails:
      allOf:
      - $ref: '#/components/schemas/ConfigDetails'
      - description: "Additional details for a <code>Config</code>, if type is dataflow\
          \ endpoint or antenna demod decode."
      title: Destination_configDetails
    Source_configDetails:
      allOf:
      - $ref: '#/components/schemas/ConfigDetails'
      - description: "Additional details for a <code>Config</code>, if type is <code>dataflow-endpoint</code>\
          \ or <code>antenna-downlink-demod-decode</code> "
      title: Source_configDetails
    DataflowEndpoint_address:
      allOf:
      - $ref: '#/components/schemas/SocketAddress'
      - description: Socket address of a dataflow endpoint.
      title: DataflowEndpoint_address
    EphemerisItem_sourceS3Object:
      allOf:
      - $ref: '#/components/schemas/S3Object'
      - description: Source S3 object used for the ephemeris.
      example:
        bucket: ""
        version: ""
        key: ""
      title: EphemerisItem_sourceS3Object
    RangedSocketAddress_portRange:
      allOf:
      - $ref: '#/components/schemas/IntegerRange'
      - description: Port range of a socket address.
      title: RangedSocketAddress_portRange
    RegisterAgentRequest_agentDetails:
      allOf:
      - $ref: '#/components/schemas/AgentDetails'
      - description: Detailed information about the agent being registered.
      example:
        instanceId: ""
        reservedCpuCores: ""
        componentVersions: ""
        instanceType: ""
        agentVersion: ""
        agentCpuCores: ""
      title: RegisterAgentRequest_agentDetails
    RegisterAgentRequest_discoveryData:
      allOf:
      - $ref: '#/components/schemas/DiscoveryData'
      - description: Data for associating an agent with the capabilities it is managing.
      example:
        privateIpAddresses: ""
        publicIpAddresses: ""
        capabilityArns: ""
      title: RegisterAgentRequest_discoveryData
    TLEData_validTimeRange:
      allOf:
      - $ref: '#/components/schemas/TimeRange'
      - description: The valid time range for the TLE. Gaps or overlap are not permitted.
      title: TLEData_validTimeRange
    UpdateAgentStatusRequest_aggregateStatus:
      allOf:
      - $ref: '#/components/schemas/AggregateStatus'
      - description: Aggregate status for agent.
      example:
        signatureMap: ""
        status: ""
      title: UpdateAgentStatusRequest_aggregateStatus
  securitySchemes:
    hmac:
      description: Amazon Signature authorization v4
      in: header
      name: Authorization
      type: apiKey
      x-amazon-apigateway-authtype: awsSigv4
      x-apikeyInfoFunc: openapi_server.controllers.security_controller.info_from_hmac
x-hasEquivalentPaths: true
