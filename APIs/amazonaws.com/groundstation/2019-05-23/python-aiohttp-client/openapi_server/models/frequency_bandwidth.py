# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bandwidth_units import BandwidthUnits
from openapi_server import util


class FrequencyBandwidth(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, units: BandwidthUnits=None, value: float=None):
        """FrequencyBandwidth - a model defined in OpenAPI

        :param units: The units of this FrequencyBandwidth.
        :param value: The value of this FrequencyBandwidth.
        """
        self.openapi_types = {
            'units': BandwidthUnits,
            'value': float
        }

        self.attribute_map = {
            'units': 'units',
            'value': 'value'
        }

        self._units = units
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FrequencyBandwidth':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FrequencyBandwidth of this FrequencyBandwidth.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def units(self):
        """Gets the units of this FrequencyBandwidth.


        :return: The units of this FrequencyBandwidth.
        :rtype: BandwidthUnits
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this FrequencyBandwidth.


        :param units: The units of this FrequencyBandwidth.
        :type units: BandwidthUnits
        """
        if units is None:
            raise ValueError("Invalid value for `units`, must not be `None`")

        self._units = units

    @property
    def value(self):
        """Gets the value of this FrequencyBandwidth.


        :return: The value of this FrequencyBandwidth.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this FrequencyBandwidth.


        :param value: The value of this FrequencyBandwidth.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
