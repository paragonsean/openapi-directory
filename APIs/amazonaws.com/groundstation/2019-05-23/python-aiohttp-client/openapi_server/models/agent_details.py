# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AgentDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agent_cpu_cores: List=None, agent_version: str=None, component_versions: List=None, instance_id: str=None, instance_type: str=None, reserved_cpu_cores: List=None):
        """AgentDetails - a model defined in OpenAPI

        :param agent_cpu_cores: The agent_cpu_cores of this AgentDetails.
        :param agent_version: The agent_version of this AgentDetails.
        :param component_versions: The component_versions of this AgentDetails.
        :param instance_id: The instance_id of this AgentDetails.
        :param instance_type: The instance_type of this AgentDetails.
        :param reserved_cpu_cores: The reserved_cpu_cores of this AgentDetails.
        """
        self.openapi_types = {
            'agent_cpu_cores': List,
            'agent_version': str,
            'component_versions': List,
            'instance_id': str,
            'instance_type': str,
            'reserved_cpu_cores': List
        }

        self.attribute_map = {
            'agent_cpu_cores': 'agentCpuCores',
            'agent_version': 'agentVersion',
            'component_versions': 'componentVersions',
            'instance_id': 'instanceId',
            'instance_type': 'instanceType',
            'reserved_cpu_cores': 'reservedCpuCores'
        }

        self._agent_cpu_cores = agent_cpu_cores
        self._agent_version = agent_version
        self._component_versions = component_versions
        self._instance_id = instance_id
        self._instance_type = instance_type
        self._reserved_cpu_cores = reserved_cpu_cores

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AgentDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AgentDetails of this AgentDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent_cpu_cores(self):
        """Gets the agent_cpu_cores of this AgentDetails.


        :return: The agent_cpu_cores of this AgentDetails.
        :rtype: List
        """
        return self._agent_cpu_cores

    @agent_cpu_cores.setter
    def agent_cpu_cores(self, agent_cpu_cores):
        """Sets the agent_cpu_cores of this AgentDetails.


        :param agent_cpu_cores: The agent_cpu_cores of this AgentDetails.
        :type agent_cpu_cores: List
        """

        self._agent_cpu_cores = agent_cpu_cores

    @property
    def agent_version(self):
        """Gets the agent_version of this AgentDetails.


        :return: The agent_version of this AgentDetails.
        :rtype: str
        """
        return self._agent_version

    @agent_version.setter
    def agent_version(self, agent_version):
        """Sets the agent_version of this AgentDetails.


        :param agent_version: The agent_version of this AgentDetails.
        :type agent_version: str
        """
        if agent_version is None:
            raise ValueError("Invalid value for `agent_version`, must not be `None`")

        self._agent_version = agent_version

    @property
    def component_versions(self):
        """Gets the component_versions of this AgentDetails.


        :return: The component_versions of this AgentDetails.
        :rtype: List
        """
        return self._component_versions

    @component_versions.setter
    def component_versions(self, component_versions):
        """Sets the component_versions of this AgentDetails.


        :param component_versions: The component_versions of this AgentDetails.
        :type component_versions: List
        """
        if component_versions is None:
            raise ValueError("Invalid value for `component_versions`, must not be `None`")

        self._component_versions = component_versions

    @property
    def instance_id(self):
        """Gets the instance_id of this AgentDetails.


        :return: The instance_id of this AgentDetails.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this AgentDetails.


        :param instance_id: The instance_id of this AgentDetails.
        :type instance_id: str
        """
        if instance_id is None:
            raise ValueError("Invalid value for `instance_id`, must not be `None`")

        self._instance_id = instance_id

    @property
    def instance_type(self):
        """Gets the instance_type of this AgentDetails.


        :return: The instance_type of this AgentDetails.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this AgentDetails.


        :param instance_type: The instance_type of this AgentDetails.
        :type instance_type: str
        """
        if instance_type is None:
            raise ValueError("Invalid value for `instance_type`, must not be `None`")

        self._instance_type = instance_type

    @property
    def reserved_cpu_cores(self):
        """Gets the reserved_cpu_cores of this AgentDetails.


        :return: The reserved_cpu_cores of this AgentDetails.
        :rtype: List
        """
        return self._reserved_cpu_cores

    @reserved_cpu_cores.setter
    def reserved_cpu_cores(self, reserved_cpu_cores):
        """Sets the reserved_cpu_cores of this AgentDetails.


        :param reserved_cpu_cores: The reserved_cpu_cores of this AgentDetails.
        :type reserved_cpu_cores: List
        """

        self._reserved_cpu_cores = reserved_cpu_cores
