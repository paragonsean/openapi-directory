# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataflowEndpointConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dataflow_endpoint_name: str=None, dataflow_endpoint_region: str=None):
        """DataflowEndpointConfig - a model defined in OpenAPI

        :param dataflow_endpoint_name: The dataflow_endpoint_name of this DataflowEndpointConfig.
        :param dataflow_endpoint_region: The dataflow_endpoint_region of this DataflowEndpointConfig.
        """
        self.openapi_types = {
            'dataflow_endpoint_name': str,
            'dataflow_endpoint_region': str
        }

        self.attribute_map = {
            'dataflow_endpoint_name': 'dataflowEndpointName',
            'dataflow_endpoint_region': 'dataflowEndpointRegion'
        }

        self._dataflow_endpoint_name = dataflow_endpoint_name
        self._dataflow_endpoint_region = dataflow_endpoint_region

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataflowEndpointConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataflowEndpointConfig of this DataflowEndpointConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataflow_endpoint_name(self):
        """Gets the dataflow_endpoint_name of this DataflowEndpointConfig.


        :return: The dataflow_endpoint_name of this DataflowEndpointConfig.
        :rtype: str
        """
        return self._dataflow_endpoint_name

    @dataflow_endpoint_name.setter
    def dataflow_endpoint_name(self, dataflow_endpoint_name):
        """Sets the dataflow_endpoint_name of this DataflowEndpointConfig.


        :param dataflow_endpoint_name: The dataflow_endpoint_name of this DataflowEndpointConfig.
        :type dataflow_endpoint_name: str
        """
        if dataflow_endpoint_name is None:
            raise ValueError("Invalid value for `dataflow_endpoint_name`, must not be `None`")

        self._dataflow_endpoint_name = dataflow_endpoint_name

    @property
    def dataflow_endpoint_region(self):
        """Gets the dataflow_endpoint_region of this DataflowEndpointConfig.


        :return: The dataflow_endpoint_region of this DataflowEndpointConfig.
        :rtype: str
        """
        return self._dataflow_endpoint_region

    @dataflow_endpoint_region.setter
    def dataflow_endpoint_region(self, dataflow_endpoint_region):
        """Sets the dataflow_endpoint_region of this DataflowEndpointConfig.


        :param dataflow_endpoint_region: The dataflow_endpoint_region of this DataflowEndpointConfig.
        :type dataflow_endpoint_region: str
        """

        self._dataflow_endpoint_region = dataflow_endpoint_region
