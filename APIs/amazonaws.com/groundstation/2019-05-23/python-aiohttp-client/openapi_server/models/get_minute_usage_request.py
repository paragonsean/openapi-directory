# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetMinuteUsageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, month: int=None, year: int=None):
        """GetMinuteUsageRequest - a model defined in OpenAPI

        :param month: The month of this GetMinuteUsageRequest.
        :param year: The year of this GetMinuteUsageRequest.
        """
        self.openapi_types = {
            'month': int,
            'year': int
        }

        self.attribute_map = {
            'month': 'month',
            'year': 'year'
        }

        self._month = month
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetMinuteUsageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetMinuteUsage_request of this GetMinuteUsageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def month(self):
        """Gets the month of this GetMinuteUsageRequest.

        The month being requested, with a value of 1-12.

        :return: The month of this GetMinuteUsageRequest.
        :rtype: int
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this GetMinuteUsageRequest.

        The month being requested, with a value of 1-12.

        :param month: The month of this GetMinuteUsageRequest.
        :type month: int
        """
        if month is None:
            raise ValueError("Invalid value for `month`, must not be `None`")
        if month is not None and month > 12:
            raise ValueError("Invalid value for `month`, must be a value less than or equal to `12`")
        if month is not None and month < 1:
            raise ValueError("Invalid value for `month`, must be a value greater than or equal to `1`")

        self._month = month

    @property
    def year(self):
        """Gets the year of this GetMinuteUsageRequest.

        The year being requested, in the format of YYYY.

        :return: The year of this GetMinuteUsageRequest.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this GetMinuteUsageRequest.

        The year being requested, in the format of YYYY.

        :param year: The year of this GetMinuteUsageRequest.
        :type year: int
        """
        if year is None:
            raise ValueError("Invalid value for `year`, must not be `None`")
        if year is not None and year > 3000:
            raise ValueError("Invalid value for `year`, must be a value less than or equal to `3000`")
        if year is not None and year < 2018:
            raise ValueError("Invalid value for `year`, must be a value greater than or equal to `2018`")

        self._year = year
