# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tle_data_valid_time_range import TLEDataValidTimeRange
from openapi_server import util


class TLEData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tle_line1: str=None, tle_line2: str=None, valid_time_range: TLEDataValidTimeRange=None):
        """TLEData - a model defined in OpenAPI

        :param tle_line1: The tle_line1 of this TLEData.
        :param tle_line2: The tle_line2 of this TLEData.
        :param valid_time_range: The valid_time_range of this TLEData.
        """
        self.openapi_types = {
            'tle_line1': str,
            'tle_line2': str,
            'valid_time_range': TLEDataValidTimeRange
        }

        self.attribute_map = {
            'tle_line1': 'tleLine1',
            'tle_line2': 'tleLine2',
            'valid_time_range': 'validTimeRange'
        }

        self._tle_line1 = tle_line1
        self._tle_line2 = tle_line2
        self._valid_time_range = valid_time_range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TLEData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TLEData of this TLEData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tle_line1(self):
        """Gets the tle_line1 of this TLEData.


        :return: The tle_line1 of this TLEData.
        :rtype: str
        """
        return self._tle_line1

    @tle_line1.setter
    def tle_line1(self, tle_line1):
        """Sets the tle_line1 of this TLEData.


        :param tle_line1: The tle_line1 of this TLEData.
        :type tle_line1: str
        """
        if tle_line1 is None:
            raise ValueError("Invalid value for `tle_line1`, must not be `None`")

        self._tle_line1 = tle_line1

    @property
    def tle_line2(self):
        """Gets the tle_line2 of this TLEData.


        :return: The tle_line2 of this TLEData.
        :rtype: str
        """
        return self._tle_line2

    @tle_line2.setter
    def tle_line2(self, tle_line2):
        """Sets the tle_line2 of this TLEData.


        :param tle_line2: The tle_line2 of this TLEData.
        :type tle_line2: str
        """
        if tle_line2 is None:
            raise ValueError("Invalid value for `tle_line2`, must not be `None`")

        self._tle_line2 = tle_line2

    @property
    def valid_time_range(self):
        """Gets the valid_time_range of this TLEData.


        :return: The valid_time_range of this TLEData.
        :rtype: TLEDataValidTimeRange
        """
        return self._valid_time_range

    @valid_time_range.setter
    def valid_time_range(self, valid_time_range):
        """Sets the valid_time_range of this TLEData.


        :param valid_time_range: The valid_time_range of this TLEData.
        :type valid_time_range: TLEDataValidTimeRange
        """
        if valid_time_range is None:
            raise ValueError("Invalid value for `valid_time_range`, must not be `None`")

        self._valid_time_range = valid_time_range
