# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ephemeris_source import EphemerisSource
from openapi_server import util


class EphemerisMetaData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ephemeris_id: str=None, epoch: datetime=None, name: str=None, source: EphemerisSource=None):
        """EphemerisMetaData - a model defined in OpenAPI

        :param ephemeris_id: The ephemeris_id of this EphemerisMetaData.
        :param epoch: The epoch of this EphemerisMetaData.
        :param name: The name of this EphemerisMetaData.
        :param source: The source of this EphemerisMetaData.
        """
        self.openapi_types = {
            'ephemeris_id': str,
            'epoch': datetime,
            'name': str,
            'source': EphemerisSource
        }

        self.attribute_map = {
            'ephemeris_id': 'ephemerisId',
            'epoch': 'epoch',
            'name': 'name',
            'source': 'source'
        }

        self._ephemeris_id = ephemeris_id
        self._epoch = epoch
        self._name = name
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EphemerisMetaData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EphemerisMetaData of this EphemerisMetaData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ephemeris_id(self):
        """Gets the ephemeris_id of this EphemerisMetaData.


        :return: The ephemeris_id of this EphemerisMetaData.
        :rtype: str
        """
        return self._ephemeris_id

    @ephemeris_id.setter
    def ephemeris_id(self, ephemeris_id):
        """Sets the ephemeris_id of this EphemerisMetaData.


        :param ephemeris_id: The ephemeris_id of this EphemerisMetaData.
        :type ephemeris_id: str
        """

        self._ephemeris_id = ephemeris_id

    @property
    def epoch(self):
        """Gets the epoch of this EphemerisMetaData.


        :return: The epoch of this EphemerisMetaData.
        :rtype: datetime
        """
        return self._epoch

    @epoch.setter
    def epoch(self, epoch):
        """Sets the epoch of this EphemerisMetaData.


        :param epoch: The epoch of this EphemerisMetaData.
        :type epoch: datetime
        """

        self._epoch = epoch

    @property
    def name(self):
        """Gets the name of this EphemerisMetaData.


        :return: The name of this EphemerisMetaData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EphemerisMetaData.


        :param name: The name of this EphemerisMetaData.
        :type name: str
        """

        self._name = name

    @property
    def source(self):
        """Gets the source of this EphemerisMetaData.


        :return: The source of this EphemerisMetaData.
        :rtype: EphemerisSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this EphemerisMetaData.


        :param source: The source of this EphemerisMetaData.
        :type source: EphemerisSource
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source
