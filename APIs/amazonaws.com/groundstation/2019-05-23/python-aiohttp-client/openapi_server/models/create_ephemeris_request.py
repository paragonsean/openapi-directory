# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_ephemeris_request_ephemeris import CreateEphemerisRequestEphemeris
import re
from openapi_server import util


class CreateEphemerisRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, ephemeris: CreateEphemerisRequestEphemeris=None, expiration_time: datetime=None, kms_key_arn: str=None, name: str=None, priority: int=None, satellite_id: str=None, tags: Dict[str, str]=None):
        """CreateEphemerisRequest - a model defined in OpenAPI

        :param enabled: The enabled of this CreateEphemerisRequest.
        :param ephemeris: The ephemeris of this CreateEphemerisRequest.
        :param expiration_time: The expiration_time of this CreateEphemerisRequest.
        :param kms_key_arn: The kms_key_arn of this CreateEphemerisRequest.
        :param name: The name of this CreateEphemerisRequest.
        :param priority: The priority of this CreateEphemerisRequest.
        :param satellite_id: The satellite_id of this CreateEphemerisRequest.
        :param tags: The tags of this CreateEphemerisRequest.
        """
        self.openapi_types = {
            'enabled': bool,
            'ephemeris': CreateEphemerisRequestEphemeris,
            'expiration_time': datetime,
            'kms_key_arn': str,
            'name': str,
            'priority': int,
            'satellite_id': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'ephemeris': 'ephemeris',
            'expiration_time': 'expirationTime',
            'kms_key_arn': 'kmsKeyArn',
            'name': 'name',
            'priority': 'priority',
            'satellite_id': 'satelliteId',
            'tags': 'tags'
        }

        self._enabled = enabled
        self._ephemeris = ephemeris
        self._expiration_time = expiration_time
        self._kms_key_arn = kms_key_arn
        self._name = name
        self._priority = priority
        self._satellite_id = satellite_id
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateEphemerisRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateEphemeris_request of this CreateEphemerisRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this CreateEphemerisRequest.

        <p>Whether to set the ephemeris status to <code>ENABLED</code> after validation.</p> <p>Setting this to false will set the ephemeris status to <code>DISABLED</code> after validation.</p>

        :return: The enabled of this CreateEphemerisRequest.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CreateEphemerisRequest.

        <p>Whether to set the ephemeris status to <code>ENABLED</code> after validation.</p> <p>Setting this to false will set the ephemeris status to <code>DISABLED</code> after validation.</p>

        :param enabled: The enabled of this CreateEphemerisRequest.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def ephemeris(self):
        """Gets the ephemeris of this CreateEphemerisRequest.


        :return: The ephemeris of this CreateEphemerisRequest.
        :rtype: CreateEphemerisRequestEphemeris
        """
        return self._ephemeris

    @ephemeris.setter
    def ephemeris(self, ephemeris):
        """Sets the ephemeris of this CreateEphemerisRequest.


        :param ephemeris: The ephemeris of this CreateEphemerisRequest.
        :type ephemeris: CreateEphemerisRequestEphemeris
        """

        self._ephemeris = ephemeris

    @property
    def expiration_time(self):
        """Gets the expiration_time of this CreateEphemerisRequest.

        An overall expiration time for the ephemeris in UTC, after which it will become <code>EXPIRED</code>.

        :return: The expiration_time of this CreateEphemerisRequest.
        :rtype: datetime
        """
        return self._expiration_time

    @expiration_time.setter
    def expiration_time(self, expiration_time):
        """Sets the expiration_time of this CreateEphemerisRequest.

        An overall expiration time for the ephemeris in UTC, after which it will become <code>EXPIRED</code>.

        :param expiration_time: The expiration_time of this CreateEphemerisRequest.
        :type expiration_time: datetime
        """

        self._expiration_time = expiration_time

    @property
    def kms_key_arn(self):
        """Gets the kms_key_arn of this CreateEphemerisRequest.

        The ARN of a KMS key used to encrypt the ephemeris in Ground Station.

        :return: The kms_key_arn of this CreateEphemerisRequest.
        :rtype: str
        """
        return self._kms_key_arn

    @kms_key_arn.setter
    def kms_key_arn(self, kms_key_arn):
        """Sets the kms_key_arn of this CreateEphemerisRequest.

        The ARN of a KMS key used to encrypt the ephemeris in Ground Station.

        :param kms_key_arn: The kms_key_arn of this CreateEphemerisRequest.
        :type kms_key_arn: str
        """

        self._kms_key_arn = kms_key_arn

    @property
    def name(self):
        """Gets the name of this CreateEphemerisRequest.

        A name string associated with the ephemeris. Used as a human-readable identifier for the ephemeris.

        :return: The name of this CreateEphemerisRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateEphemerisRequest.

        A name string associated with the ephemeris. Used as a human-readable identifier for the ephemeris.

        :param name: The name of this CreateEphemerisRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'^[ a-zA-Z0-9_:-]{1,256}$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[ a-zA-Z0-9_:-]{1,256}$/`")

        self._name = name

    @property
    def priority(self):
        """Gets the priority of this CreateEphemerisRequest.

        <p>Customer-provided priority score to establish the order in which overlapping ephemerides should be used.</p> <p>The default for customer-provided ephemeris priority is 1, and higher numbers take precedence.</p> <p>Priority must be 1 or greater</p>

        :return: The priority of this CreateEphemerisRequest.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this CreateEphemerisRequest.

        <p>Customer-provided priority score to establish the order in which overlapping ephemerides should be used.</p> <p>The default for customer-provided ephemeris priority is 1, and higher numbers take precedence.</p> <p>Priority must be 1 or greater</p>

        :param priority: The priority of this CreateEphemerisRequest.
        :type priority: int
        """
        if priority is not None and priority > 99999:
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `99999`")
        if priority is not None and priority < 1:
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `1`")

        self._priority = priority

    @property
    def satellite_id(self):
        """Gets the satellite_id of this CreateEphemerisRequest.

        AWS Ground Station satellite ID for this ephemeris.

        :return: The satellite_id of this CreateEphemerisRequest.
        :rtype: str
        """
        return self._satellite_id

    @satellite_id.setter
    def satellite_id(self, satellite_id):
        """Sets the satellite_id of this CreateEphemerisRequest.

        AWS Ground Station satellite ID for this ephemeris.

        :param satellite_id: The satellite_id of this CreateEphemerisRequest.
        :type satellite_id: str
        """
        if satellite_id is None:
            raise ValueError("Invalid value for `satellite_id`, must not be `None`")
        if satellite_id is not None and len(satellite_id) > 128:
            raise ValueError("Invalid value for `satellite_id`, length must be less than or equal to `128`")
        if satellite_id is not None and len(satellite_id) < 1:
            raise ValueError("Invalid value for `satellite_id`, length must be greater than or equal to `1`")
        if satellite_id is not None and not re.search(r'^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$', satellite_id):
            raise ValueError("Invalid value for `satellite_id`, must be a follow pattern or equal to `/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/`")

        self._satellite_id = satellite_id

    @property
    def tags(self):
        """Gets the tags of this CreateEphemerisRequest.

        Tags assigned to an ephemeris.

        :return: The tags of this CreateEphemerisRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateEphemerisRequest.

        Tags assigned to an ephemeris.

        :param tags: The tags of this CreateEphemerisRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags
