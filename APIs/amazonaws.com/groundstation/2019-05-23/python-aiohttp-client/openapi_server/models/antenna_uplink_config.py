# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.antenna_uplink_config_spectrum_config import AntennaUplinkConfigSpectrumConfig
from openapi_server.models.antenna_uplink_config_target_eirp import AntennaUplinkConfigTargetEirp
from openapi_server import util


class AntennaUplinkConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, spectrum_config: AntennaUplinkConfigSpectrumConfig=None, target_eirp: AntennaUplinkConfigTargetEirp=None, transmit_disabled: bool=None):
        """AntennaUplinkConfig - a model defined in OpenAPI

        :param spectrum_config: The spectrum_config of this AntennaUplinkConfig.
        :param target_eirp: The target_eirp of this AntennaUplinkConfig.
        :param transmit_disabled: The transmit_disabled of this AntennaUplinkConfig.
        """
        self.openapi_types = {
            'spectrum_config': AntennaUplinkConfigSpectrumConfig,
            'target_eirp': AntennaUplinkConfigTargetEirp,
            'transmit_disabled': bool
        }

        self.attribute_map = {
            'spectrum_config': 'spectrumConfig',
            'target_eirp': 'targetEirp',
            'transmit_disabled': 'transmitDisabled'
        }

        self._spectrum_config = spectrum_config
        self._target_eirp = target_eirp
        self._transmit_disabled = transmit_disabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AntennaUplinkConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AntennaUplinkConfig of this AntennaUplinkConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def spectrum_config(self):
        """Gets the spectrum_config of this AntennaUplinkConfig.


        :return: The spectrum_config of this AntennaUplinkConfig.
        :rtype: AntennaUplinkConfigSpectrumConfig
        """
        return self._spectrum_config

    @spectrum_config.setter
    def spectrum_config(self, spectrum_config):
        """Sets the spectrum_config of this AntennaUplinkConfig.


        :param spectrum_config: The spectrum_config of this AntennaUplinkConfig.
        :type spectrum_config: AntennaUplinkConfigSpectrumConfig
        """
        if spectrum_config is None:
            raise ValueError("Invalid value for `spectrum_config`, must not be `None`")

        self._spectrum_config = spectrum_config

    @property
    def target_eirp(self):
        """Gets the target_eirp of this AntennaUplinkConfig.


        :return: The target_eirp of this AntennaUplinkConfig.
        :rtype: AntennaUplinkConfigTargetEirp
        """
        return self._target_eirp

    @target_eirp.setter
    def target_eirp(self, target_eirp):
        """Sets the target_eirp of this AntennaUplinkConfig.


        :param target_eirp: The target_eirp of this AntennaUplinkConfig.
        :type target_eirp: AntennaUplinkConfigTargetEirp
        """
        if target_eirp is None:
            raise ValueError("Invalid value for `target_eirp`, must not be `None`")

        self._target_eirp = target_eirp

    @property
    def transmit_disabled(self):
        """Gets the transmit_disabled of this AntennaUplinkConfig.


        :return: The transmit_disabled of this AntennaUplinkConfig.
        :rtype: bool
        """
        return self._transmit_disabled

    @transmit_disabled.setter
    def transmit_disabled(self, transmit_disabled):
        """Sets the transmit_disabled of this AntennaUplinkConfig.


        :param transmit_disabled: The transmit_disabled of this AntennaUplinkConfig.
        :type transmit_disabled: bool
        """

        self._transmit_disabled = transmit_disabled
