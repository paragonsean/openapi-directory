# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ReserveContactRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: datetime=None, ground_station: str=None, mission_profile_arn: str=None, satellite_arn: str=None, start_time: datetime=None, tags: Dict[str, str]=None):
        """ReserveContactRequest - a model defined in OpenAPI

        :param end_time: The end_time of this ReserveContactRequest.
        :param ground_station: The ground_station of this ReserveContactRequest.
        :param mission_profile_arn: The mission_profile_arn of this ReserveContactRequest.
        :param satellite_arn: The satellite_arn of this ReserveContactRequest.
        :param start_time: The start_time of this ReserveContactRequest.
        :param tags: The tags of this ReserveContactRequest.
        """
        self.openapi_types = {
            'end_time': datetime,
            'ground_station': str,
            'mission_profile_arn': str,
            'satellite_arn': str,
            'start_time': datetime,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'ground_station': 'groundStation',
            'mission_profile_arn': 'missionProfileArn',
            'satellite_arn': 'satelliteArn',
            'start_time': 'startTime',
            'tags': 'tags'
        }

        self._end_time = end_time
        self._ground_station = ground_station
        self._mission_profile_arn = mission_profile_arn
        self._satellite_arn = satellite_arn
        self._start_time = start_time
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReserveContactRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReserveContact_request of this ReserveContactRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this ReserveContactRequest.

        End time of a contact in UTC.

        :return: The end_time of this ReserveContactRequest.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ReserveContactRequest.

        End time of a contact in UTC.

        :param end_time: The end_time of this ReserveContactRequest.
        :type end_time: datetime
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")

        self._end_time = end_time

    @property
    def ground_station(self):
        """Gets the ground_station of this ReserveContactRequest.

        Name of a ground station.

        :return: The ground_station of this ReserveContactRequest.
        :rtype: str
        """
        return self._ground_station

    @ground_station.setter
    def ground_station(self, ground_station):
        """Sets the ground_station of this ReserveContactRequest.

        Name of a ground station.

        :param ground_station: The ground_station of this ReserveContactRequest.
        :type ground_station: str
        """
        if ground_station is None:
            raise ValueError("Invalid value for `ground_station`, must not be `None`")
        if ground_station is not None and len(ground_station) > 500:
            raise ValueError("Invalid value for `ground_station`, length must be less than or equal to `500`")
        if ground_station is not None and len(ground_station) < 4:
            raise ValueError("Invalid value for `ground_station`, length must be greater than or equal to `4`")
        if ground_station is not None and not re.search(r'^[ a-zA-Z0-9-._:=]{4,256}$', ground_station):
            raise ValueError("Invalid value for `ground_station`, must be a follow pattern or equal to `/^[ a-zA-Z0-9-._:=]{4,256}$/`")

        self._ground_station = ground_station

    @property
    def mission_profile_arn(self):
        """Gets the mission_profile_arn of this ReserveContactRequest.

        ARN of a mission profile.

        :return: The mission_profile_arn of this ReserveContactRequest.
        :rtype: str
        """
        return self._mission_profile_arn

    @mission_profile_arn.setter
    def mission_profile_arn(self, mission_profile_arn):
        """Sets the mission_profile_arn of this ReserveContactRequest.

        ARN of a mission profile.

        :param mission_profile_arn: The mission_profile_arn of this ReserveContactRequest.
        :type mission_profile_arn: str
        """
        if mission_profile_arn is None:
            raise ValueError("Invalid value for `mission_profile_arn`, must not be `None`")

        self._mission_profile_arn = mission_profile_arn

    @property
    def satellite_arn(self):
        """Gets the satellite_arn of this ReserveContactRequest.

        ARN of a satellite

        :return: The satellite_arn of this ReserveContactRequest.
        :rtype: str
        """
        return self._satellite_arn

    @satellite_arn.setter
    def satellite_arn(self, satellite_arn):
        """Sets the satellite_arn of this ReserveContactRequest.

        ARN of a satellite

        :param satellite_arn: The satellite_arn of this ReserveContactRequest.
        :type satellite_arn: str
        """
        if satellite_arn is None:
            raise ValueError("Invalid value for `satellite_arn`, must not be `None`")

        self._satellite_arn = satellite_arn

    @property
    def start_time(self):
        """Gets the start_time of this ReserveContactRequest.

        Start time of a contact in UTC.

        :return: The start_time of this ReserveContactRequest.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ReserveContactRequest.

        Start time of a contact in UTC.

        :param start_time: The start_time of this ReserveContactRequest.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def tags(self):
        """Gets the tags of this ReserveContactRequest.

        Tags assigned to a contact.

        :return: The tags of this ReserveContactRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ReserveContactRequest.

        Tags assigned to a contact.

        :param tags: The tags of this ReserveContactRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags
