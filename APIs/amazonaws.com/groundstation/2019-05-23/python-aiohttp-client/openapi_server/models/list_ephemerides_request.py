# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ephemeris_status import EphemerisStatus
import re
from openapi_server import util


class ListEphemeridesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: datetime=None, satellite_id: str=None, start_time: datetime=None, status_list: List[EphemerisStatus]=None):
        """ListEphemeridesRequest - a model defined in OpenAPI

        :param end_time: The end_time of this ListEphemeridesRequest.
        :param satellite_id: The satellite_id of this ListEphemeridesRequest.
        :param start_time: The start_time of this ListEphemeridesRequest.
        :param status_list: The status_list of this ListEphemeridesRequest.
        """
        self.openapi_types = {
            'end_time': datetime,
            'satellite_id': str,
            'start_time': datetime,
            'status_list': List[EphemerisStatus]
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'satellite_id': 'satelliteId',
            'start_time': 'startTime',
            'status_list': 'statusList'
        }

        self._end_time = end_time
        self._satellite_id = satellite_id
        self._start_time = start_time
        self._status_list = status_list

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListEphemeridesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListEphemerides_request of this ListEphemeridesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this ListEphemeridesRequest.

        The end time to list in UTC. The operation will return an ephemeris if its expiration time is within the time range defined by the <code>startTime</code> and <code>endTime</code>.

        :return: The end_time of this ListEphemeridesRequest.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ListEphemeridesRequest.

        The end time to list in UTC. The operation will return an ephemeris if its expiration time is within the time range defined by the <code>startTime</code> and <code>endTime</code>.

        :param end_time: The end_time of this ListEphemeridesRequest.
        :type end_time: datetime
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")

        self._end_time = end_time

    @property
    def satellite_id(self):
        """Gets the satellite_id of this ListEphemeridesRequest.

        The AWS Ground Station satellite ID to list ephemeris for.

        :return: The satellite_id of this ListEphemeridesRequest.
        :rtype: str
        """
        return self._satellite_id

    @satellite_id.setter
    def satellite_id(self, satellite_id):
        """Sets the satellite_id of this ListEphemeridesRequest.

        The AWS Ground Station satellite ID to list ephemeris for.

        :param satellite_id: The satellite_id of this ListEphemeridesRequest.
        :type satellite_id: str
        """
        if satellite_id is None:
            raise ValueError("Invalid value for `satellite_id`, must not be `None`")
        if satellite_id is not None and len(satellite_id) > 128:
            raise ValueError("Invalid value for `satellite_id`, length must be less than or equal to `128`")
        if satellite_id is not None and len(satellite_id) < 1:
            raise ValueError("Invalid value for `satellite_id`, length must be greater than or equal to `1`")
        if satellite_id is not None and not re.search(r'^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$', satellite_id):
            raise ValueError("Invalid value for `satellite_id`, must be a follow pattern or equal to `/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/`")

        self._satellite_id = satellite_id

    @property
    def start_time(self):
        """Gets the start_time of this ListEphemeridesRequest.

        The start time to list in UTC. The operation will return an ephemeris if its expiration time is within the time range defined by the <code>startTime</code> and <code>endTime</code>.

        :return: The start_time of this ListEphemeridesRequest.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ListEphemeridesRequest.

        The start time to list in UTC. The operation will return an ephemeris if its expiration time is within the time range defined by the <code>startTime</code> and <code>endTime</code>.

        :param start_time: The start_time of this ListEphemeridesRequest.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def status_list(self):
        """Gets the status_list of this ListEphemeridesRequest.

        The list of ephemeris status to return.

        :return: The status_list of this ListEphemeridesRequest.
        :rtype: List[EphemerisStatus]
        """
        return self._status_list

    @status_list.setter
    def status_list(self, status_list):
        """Sets the status_list of this ListEphemeridesRequest.

        The list of ephemeris status to return.

        :param status_list: The status_list of this ListEphemeridesRequest.
        :type status_list: List[EphemerisStatus]
        """
        if status_list is not None and len(status_list) > 500:
            raise ValueError("Invalid value for `status_list`, number of items must be less than or equal to `500`")
        if status_list is not None and len(status_list) < 0:
            raise ValueError("Invalid value for `status_list`, number of items must be greater than or equal to `0`")

        self._status_list = status_list
