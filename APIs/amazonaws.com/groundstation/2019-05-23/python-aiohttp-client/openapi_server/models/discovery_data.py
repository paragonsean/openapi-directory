# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DiscoveryData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capability_arns: List=None, private_ip_addresses: List=None, public_ip_addresses: List=None):
        """DiscoveryData - a model defined in OpenAPI

        :param capability_arns: The capability_arns of this DiscoveryData.
        :param private_ip_addresses: The private_ip_addresses of this DiscoveryData.
        :param public_ip_addresses: The public_ip_addresses of this DiscoveryData.
        """
        self.openapi_types = {
            'capability_arns': List,
            'private_ip_addresses': List,
            'public_ip_addresses': List
        }

        self.attribute_map = {
            'capability_arns': 'capabilityArns',
            'private_ip_addresses': 'privateIpAddresses',
            'public_ip_addresses': 'publicIpAddresses'
        }

        self._capability_arns = capability_arns
        self._private_ip_addresses = private_ip_addresses
        self._public_ip_addresses = public_ip_addresses

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiscoveryData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiscoveryData of this DiscoveryData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capability_arns(self):
        """Gets the capability_arns of this DiscoveryData.


        :return: The capability_arns of this DiscoveryData.
        :rtype: List
        """
        return self._capability_arns

    @capability_arns.setter
    def capability_arns(self, capability_arns):
        """Sets the capability_arns of this DiscoveryData.


        :param capability_arns: The capability_arns of this DiscoveryData.
        :type capability_arns: List
        """
        if capability_arns is None:
            raise ValueError("Invalid value for `capability_arns`, must not be `None`")

        self._capability_arns = capability_arns

    @property
    def private_ip_addresses(self):
        """Gets the private_ip_addresses of this DiscoveryData.


        :return: The private_ip_addresses of this DiscoveryData.
        :rtype: List
        """
        return self._private_ip_addresses

    @private_ip_addresses.setter
    def private_ip_addresses(self, private_ip_addresses):
        """Sets the private_ip_addresses of this DiscoveryData.


        :param private_ip_addresses: The private_ip_addresses of this DiscoveryData.
        :type private_ip_addresses: List
        """
        if private_ip_addresses is None:
            raise ValueError("Invalid value for `private_ip_addresses`, must not be `None`")

        self._private_ip_addresses = private_ip_addresses

    @property
    def public_ip_addresses(self):
        """Gets the public_ip_addresses of this DiscoveryData.


        :return: The public_ip_addresses of this DiscoveryData.
        :rtype: List
        """
        return self._public_ip_addresses

    @public_ip_addresses.setter
    def public_ip_addresses(self, public_ip_addresses):
        """Sets the public_ip_addresses of this DiscoveryData.


        :param public_ip_addresses: The public_ip_addresses of this DiscoveryData.
        :type public_ip_addresses: List
        """
        if public_ip_addresses is None:
            raise ValueError("Invalid value for `public_ip_addresses`, must not be `None`")

        self._public_ip_addresses = public_ip_addresses
