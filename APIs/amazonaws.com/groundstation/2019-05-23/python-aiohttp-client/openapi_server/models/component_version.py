# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ComponentVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, component_type: str=None, versions: List=None):
        """ComponentVersion - a model defined in OpenAPI

        :param component_type: The component_type of this ComponentVersion.
        :param versions: The versions of this ComponentVersion.
        """
        self.openapi_types = {
            'component_type': str,
            'versions': List
        }

        self.attribute_map = {
            'component_type': 'componentType',
            'versions': 'versions'
        }

        self._component_type = component_type
        self._versions = versions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComponentVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ComponentVersion of this ComponentVersion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def component_type(self):
        """Gets the component_type of this ComponentVersion.


        :return: The component_type of this ComponentVersion.
        :rtype: str
        """
        return self._component_type

    @component_type.setter
    def component_type(self, component_type):
        """Sets the component_type of this ComponentVersion.


        :param component_type: The component_type of this ComponentVersion.
        :type component_type: str
        """
        if component_type is None:
            raise ValueError("Invalid value for `component_type`, must not be `None`")

        self._component_type = component_type

    @property
    def versions(self):
        """Gets the versions of this ComponentVersion.


        :return: The versions of this ComponentVersion.
        :rtype: List
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this ComponentVersion.


        :param versions: The versions of this ComponentVersion.
        :type versions: List
        """
        if versions is None:
            raise ValueError("Invalid value for `versions`, must not be `None`")

        self._versions = versions
