# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.polarization import Polarization
from openapi_server.models.uplink_spectrum_config_center_frequency import UplinkSpectrumConfigCenterFrequency
from openapi_server import util


class UplinkSpectrumConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, center_frequency: UplinkSpectrumConfigCenterFrequency=None, polarization: Polarization=None):
        """UplinkSpectrumConfig - a model defined in OpenAPI

        :param center_frequency: The center_frequency of this UplinkSpectrumConfig.
        :param polarization: The polarization of this UplinkSpectrumConfig.
        """
        self.openapi_types = {
            'center_frequency': UplinkSpectrumConfigCenterFrequency,
            'polarization': Polarization
        }

        self.attribute_map = {
            'center_frequency': 'centerFrequency',
            'polarization': 'polarization'
        }

        self._center_frequency = center_frequency
        self._polarization = polarization

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UplinkSpectrumConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UplinkSpectrumConfig of this UplinkSpectrumConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def center_frequency(self):
        """Gets the center_frequency of this UplinkSpectrumConfig.


        :return: The center_frequency of this UplinkSpectrumConfig.
        :rtype: UplinkSpectrumConfigCenterFrequency
        """
        return self._center_frequency

    @center_frequency.setter
    def center_frequency(self, center_frequency):
        """Sets the center_frequency of this UplinkSpectrumConfig.


        :param center_frequency: The center_frequency of this UplinkSpectrumConfig.
        :type center_frequency: UplinkSpectrumConfigCenterFrequency
        """
        if center_frequency is None:
            raise ValueError("Invalid value for `center_frequency`, must not be `None`")

        self._center_frequency = center_frequency

    @property
    def polarization(self):
        """Gets the polarization of this UplinkSpectrumConfig.


        :return: The polarization of this UplinkSpectrumConfig.
        :rtype: Polarization
        """
        return self._polarization

    @polarization.setter
    def polarization(self, polarization):
        """Sets the polarization of this UplinkSpectrumConfig.


        :param polarization: The polarization of this UplinkSpectrumConfig.
        :type polarization: Polarization
        """

        self._polarization = polarization
