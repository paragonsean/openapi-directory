# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.polarization import Polarization
from openapi_server.models.spectrum_config_bandwidth import SpectrumConfigBandwidth
from openapi_server.models.spectrum_config_center_frequency import SpectrumConfigCenterFrequency
from openapi_server import util


class AntennaDownlinkDemodDecodeConfigSpectrumConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bandwidth: SpectrumConfigBandwidth=None, center_frequency: SpectrumConfigCenterFrequency=None, polarization: Polarization=None):
        """AntennaDownlinkDemodDecodeConfigSpectrumConfig - a model defined in OpenAPI

        :param bandwidth: The bandwidth of this AntennaDownlinkDemodDecodeConfigSpectrumConfig.
        :param center_frequency: The center_frequency of this AntennaDownlinkDemodDecodeConfigSpectrumConfig.
        :param polarization: The polarization of this AntennaDownlinkDemodDecodeConfigSpectrumConfig.
        """
        self.openapi_types = {
            'bandwidth': SpectrumConfigBandwidth,
            'center_frequency': SpectrumConfigCenterFrequency,
            'polarization': Polarization
        }

        self.attribute_map = {
            'bandwidth': 'bandwidth',
            'center_frequency': 'centerFrequency',
            'polarization': 'polarization'
        }

        self._bandwidth = bandwidth
        self._center_frequency = center_frequency
        self._polarization = polarization

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AntennaDownlinkDemodDecodeConfigSpectrumConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AntennaDownlinkDemodDecodeConfig_spectrumConfig of this AntennaDownlinkDemodDecodeConfigSpectrumConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bandwidth(self):
        """Gets the bandwidth of this AntennaDownlinkDemodDecodeConfigSpectrumConfig.


        :return: The bandwidth of this AntennaDownlinkDemodDecodeConfigSpectrumConfig.
        :rtype: SpectrumConfigBandwidth
        """
        return self._bandwidth

    @bandwidth.setter
    def bandwidth(self, bandwidth):
        """Sets the bandwidth of this AntennaDownlinkDemodDecodeConfigSpectrumConfig.


        :param bandwidth: The bandwidth of this AntennaDownlinkDemodDecodeConfigSpectrumConfig.
        :type bandwidth: SpectrumConfigBandwidth
        """
        if bandwidth is None:
            raise ValueError("Invalid value for `bandwidth`, must not be `None`")

        self._bandwidth = bandwidth

    @property
    def center_frequency(self):
        """Gets the center_frequency of this AntennaDownlinkDemodDecodeConfigSpectrumConfig.


        :return: The center_frequency of this AntennaDownlinkDemodDecodeConfigSpectrumConfig.
        :rtype: SpectrumConfigCenterFrequency
        """
        return self._center_frequency

    @center_frequency.setter
    def center_frequency(self, center_frequency):
        """Sets the center_frequency of this AntennaDownlinkDemodDecodeConfigSpectrumConfig.


        :param center_frequency: The center_frequency of this AntennaDownlinkDemodDecodeConfigSpectrumConfig.
        :type center_frequency: SpectrumConfigCenterFrequency
        """
        if center_frequency is None:
            raise ValueError("Invalid value for `center_frequency`, must not be `None`")

        self._center_frequency = center_frequency

    @property
    def polarization(self):
        """Gets the polarization of this AntennaDownlinkDemodDecodeConfigSpectrumConfig.


        :return: The polarization of this AntennaDownlinkDemodDecodeConfigSpectrumConfig.
        :rtype: Polarization
        """
        return self._polarization

    @polarization.setter
    def polarization(self, polarization):
        """Sets the polarization of this AntennaDownlinkDemodDecodeConfigSpectrumConfig.


        :param polarization: The polarization of this AntennaDownlinkDemodDecodeConfigSpectrumConfig.
        :type polarization: Polarization
        """

        self._polarization = polarization
