# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateConfigRequestConfigDataS3RecordingConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket_arn: str=None, prefix: str=None, role_arn: str=None):
        """CreateConfigRequestConfigDataS3RecordingConfig - a model defined in OpenAPI

        :param bucket_arn: The bucket_arn of this CreateConfigRequestConfigDataS3RecordingConfig.
        :param prefix: The prefix of this CreateConfigRequestConfigDataS3RecordingConfig.
        :param role_arn: The role_arn of this CreateConfigRequestConfigDataS3RecordingConfig.
        """
        self.openapi_types = {
            'bucket_arn': str,
            'prefix': str,
            'role_arn': str
        }

        self.attribute_map = {
            'bucket_arn': 'bucketArn',
            'prefix': 'prefix',
            'role_arn': 'roleArn'
        }

        self._bucket_arn = bucket_arn
        self._prefix = prefix
        self._role_arn = role_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateConfigRequestConfigDataS3RecordingConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateConfig_request_configData_s3RecordingConfig of this CreateConfigRequestConfigDataS3RecordingConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket_arn(self):
        """Gets the bucket_arn of this CreateConfigRequestConfigDataS3RecordingConfig.


        :return: The bucket_arn of this CreateConfigRequestConfigDataS3RecordingConfig.
        :rtype: str
        """
        return self._bucket_arn

    @bucket_arn.setter
    def bucket_arn(self, bucket_arn):
        """Sets the bucket_arn of this CreateConfigRequestConfigDataS3RecordingConfig.


        :param bucket_arn: The bucket_arn of this CreateConfigRequestConfigDataS3RecordingConfig.
        :type bucket_arn: str
        """
        if bucket_arn is None:
            raise ValueError("Invalid value for `bucket_arn`, must not be `None`")

        self._bucket_arn = bucket_arn

    @property
    def prefix(self):
        """Gets the prefix of this CreateConfigRequestConfigDataS3RecordingConfig.


        :return: The prefix of this CreateConfigRequestConfigDataS3RecordingConfig.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this CreateConfigRequestConfigDataS3RecordingConfig.


        :param prefix: The prefix of this CreateConfigRequestConfigDataS3RecordingConfig.
        :type prefix: str
        """

        self._prefix = prefix

    @property
    def role_arn(self):
        """Gets the role_arn of this CreateConfigRequestConfigDataS3RecordingConfig.


        :return: The role_arn of this CreateConfigRequestConfigDataS3RecordingConfig.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this CreateConfigRequestConfigDataS3RecordingConfig.


        :param role_arn: The role_arn of this CreateConfigRequestConfigDataS3RecordingConfig.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn
