# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.criticality import Criticality
from openapi_server import util


class CreateConfigRequestConfigDataTrackingConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, autotrack: Criticality=None):
        """CreateConfigRequestConfigDataTrackingConfig - a model defined in OpenAPI

        :param autotrack: The autotrack of this CreateConfigRequestConfigDataTrackingConfig.
        """
        self.openapi_types = {
            'autotrack': Criticality
        }

        self.attribute_map = {
            'autotrack': 'autotrack'
        }

        self._autotrack = autotrack

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateConfigRequestConfigDataTrackingConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateConfig_request_configData_trackingConfig of this CreateConfigRequestConfigDataTrackingConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def autotrack(self):
        """Gets the autotrack of this CreateConfigRequestConfigDataTrackingConfig.


        :return: The autotrack of this CreateConfigRequestConfigDataTrackingConfig.
        :rtype: Criticality
        """
        return self._autotrack

    @autotrack.setter
    def autotrack(self, autotrack):
        """Sets the autotrack of this CreateConfigRequestConfigDataTrackingConfig.


        :param autotrack: The autotrack of this CreateConfigRequestConfigDataTrackingConfig.
        :type autotrack: Criticality
        """
        if autotrack is None:
            raise ValueError("Invalid value for `autotrack`, must not be `None`")

        self._autotrack = autotrack
