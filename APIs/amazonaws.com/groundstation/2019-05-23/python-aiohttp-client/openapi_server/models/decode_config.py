# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DecodeConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, unvalidated_json: str=None):
        """DecodeConfig - a model defined in OpenAPI

        :param unvalidated_json: The unvalidated_json of this DecodeConfig.
        """
        self.openapi_types = {
            'unvalidated_json': str
        }

        self.attribute_map = {
            'unvalidated_json': 'unvalidatedJSON'
        }

        self._unvalidated_json = unvalidated_json

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DecodeConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DecodeConfig of this DecodeConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def unvalidated_json(self):
        """Gets the unvalidated_json of this DecodeConfig.


        :return: The unvalidated_json of this DecodeConfig.
        :rtype: str
        """
        return self._unvalidated_json

    @unvalidated_json.setter
    def unvalidated_json(self, unvalidated_json):
        """Sets the unvalidated_json of this DecodeConfig.


        :param unvalidated_json: The unvalidated_json of this DecodeConfig.
        :type unvalidated_json: str
        """
        if unvalidated_json is None:
            raise ValueError("Invalid value for `unvalidated_json`, must not be `None`")

        self._unvalidated_json = unvalidated_json
