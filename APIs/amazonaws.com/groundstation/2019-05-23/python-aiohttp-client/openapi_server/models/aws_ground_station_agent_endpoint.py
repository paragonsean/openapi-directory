# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.agent_status import AgentStatus
from openapi_server.models.audit_results import AuditResults
from openapi_server.models.aws_ground_station_agent_endpoint_egress_address import AwsGroundStationAgentEndpointEgressAddress
from openapi_server.models.aws_ground_station_agent_endpoint_ingress_address import AwsGroundStationAgentEndpointIngressAddress
from openapi_server import util


class AwsGroundStationAgentEndpoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agent_status: AgentStatus=None, audit_results: AuditResults=None, egress_address: AwsGroundStationAgentEndpointEgressAddress=None, ingress_address: AwsGroundStationAgentEndpointIngressAddress=None, name: str=None):
        """AwsGroundStationAgentEndpoint - a model defined in OpenAPI

        :param agent_status: The agent_status of this AwsGroundStationAgentEndpoint.
        :param audit_results: The audit_results of this AwsGroundStationAgentEndpoint.
        :param egress_address: The egress_address of this AwsGroundStationAgentEndpoint.
        :param ingress_address: The ingress_address of this AwsGroundStationAgentEndpoint.
        :param name: The name of this AwsGroundStationAgentEndpoint.
        """
        self.openapi_types = {
            'agent_status': AgentStatus,
            'audit_results': AuditResults,
            'egress_address': AwsGroundStationAgentEndpointEgressAddress,
            'ingress_address': AwsGroundStationAgentEndpointIngressAddress,
            'name': str
        }

        self.attribute_map = {
            'agent_status': 'agentStatus',
            'audit_results': 'auditResults',
            'egress_address': 'egressAddress',
            'ingress_address': 'ingressAddress',
            'name': 'name'
        }

        self._agent_status = agent_status
        self._audit_results = audit_results
        self._egress_address = egress_address
        self._ingress_address = ingress_address
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AwsGroundStationAgentEndpoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AwsGroundStationAgentEndpoint of this AwsGroundStationAgentEndpoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent_status(self):
        """Gets the agent_status of this AwsGroundStationAgentEndpoint.


        :return: The agent_status of this AwsGroundStationAgentEndpoint.
        :rtype: AgentStatus
        """
        return self._agent_status

    @agent_status.setter
    def agent_status(self, agent_status):
        """Sets the agent_status of this AwsGroundStationAgentEndpoint.


        :param agent_status: The agent_status of this AwsGroundStationAgentEndpoint.
        :type agent_status: AgentStatus
        """

        self._agent_status = agent_status

    @property
    def audit_results(self):
        """Gets the audit_results of this AwsGroundStationAgentEndpoint.


        :return: The audit_results of this AwsGroundStationAgentEndpoint.
        :rtype: AuditResults
        """
        return self._audit_results

    @audit_results.setter
    def audit_results(self, audit_results):
        """Sets the audit_results of this AwsGroundStationAgentEndpoint.


        :param audit_results: The audit_results of this AwsGroundStationAgentEndpoint.
        :type audit_results: AuditResults
        """

        self._audit_results = audit_results

    @property
    def egress_address(self):
        """Gets the egress_address of this AwsGroundStationAgentEndpoint.


        :return: The egress_address of this AwsGroundStationAgentEndpoint.
        :rtype: AwsGroundStationAgentEndpointEgressAddress
        """
        return self._egress_address

    @egress_address.setter
    def egress_address(self, egress_address):
        """Sets the egress_address of this AwsGroundStationAgentEndpoint.


        :param egress_address: The egress_address of this AwsGroundStationAgentEndpoint.
        :type egress_address: AwsGroundStationAgentEndpointEgressAddress
        """
        if egress_address is None:
            raise ValueError("Invalid value for `egress_address`, must not be `None`")

        self._egress_address = egress_address

    @property
    def ingress_address(self):
        """Gets the ingress_address of this AwsGroundStationAgentEndpoint.


        :return: The ingress_address of this AwsGroundStationAgentEndpoint.
        :rtype: AwsGroundStationAgentEndpointIngressAddress
        """
        return self._ingress_address

    @ingress_address.setter
    def ingress_address(self, ingress_address):
        """Sets the ingress_address of this AwsGroundStationAgentEndpoint.


        :param ingress_address: The ingress_address of this AwsGroundStationAgentEndpoint.
        :type ingress_address: AwsGroundStationAgentEndpointIngressAddress
        """
        if ingress_address is None:
            raise ValueError("Invalid value for `ingress_address`, must not be `None`")

        self._ingress_address = ingress_address

    @property
    def name(self):
        """Gets the name of this AwsGroundStationAgentEndpoint.


        :return: The name of this AwsGroundStationAgentEndpoint.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AwsGroundStationAgentEndpoint.


        :param name: The name of this AwsGroundStationAgentEndpoint.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
