# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_config_request_config_data import CreateConfigRequestConfigData
import re
from openapi_server import util


class UpdateConfigRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config_data: CreateConfigRequestConfigData=None, name: str=None):
        """UpdateConfigRequest - a model defined in OpenAPI

        :param config_data: The config_data of this UpdateConfigRequest.
        :param name: The name of this UpdateConfigRequest.
        """
        self.openapi_types = {
            'config_data': CreateConfigRequestConfigData,
            'name': str
        }

        self.attribute_map = {
            'config_data': 'configData',
            'name': 'name'
        }

        self._config_data = config_data
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateConfigRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateConfig_request of this UpdateConfigRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config_data(self):
        """Gets the config_data of this UpdateConfigRequest.


        :return: The config_data of this UpdateConfigRequest.
        :rtype: CreateConfigRequestConfigData
        """
        return self._config_data

    @config_data.setter
    def config_data(self, config_data):
        """Sets the config_data of this UpdateConfigRequest.


        :param config_data: The config_data of this UpdateConfigRequest.
        :type config_data: CreateConfigRequestConfigData
        """
        if config_data is None:
            raise ValueError("Invalid value for `config_data`, must not be `None`")

        self._config_data = config_data

    @property
    def name(self):
        """Gets the name of this UpdateConfigRequest.

        Name of a <code>Config</code>.

        :return: The name of this UpdateConfigRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateConfigRequest.

        Name of a <code>Config</code>.

        :param name: The name of this UpdateConfigRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'^[ a-zA-Z0-9_:-]{1,256}$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[ a-zA-Z0-9_:-]{1,256}$/`")

        self._name = name
