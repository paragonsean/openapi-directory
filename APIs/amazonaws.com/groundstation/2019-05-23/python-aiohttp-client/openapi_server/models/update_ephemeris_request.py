# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UpdateEphemerisRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, name: str=None, priority: int=None):
        """UpdateEphemerisRequest - a model defined in OpenAPI

        :param enabled: The enabled of this UpdateEphemerisRequest.
        :param name: The name of this UpdateEphemerisRequest.
        :param priority: The priority of this UpdateEphemerisRequest.
        """
        self.openapi_types = {
            'enabled': bool,
            'name': str,
            'priority': int
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'name': 'name',
            'priority': 'priority'
        }

        self._enabled = enabled
        self._name = name
        self._priority = priority

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateEphemerisRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateEphemeris_request of this UpdateEphemerisRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this UpdateEphemerisRequest.

        Whether the ephemeris is enabled or not. Changing this value will not require the ephemeris to be re-validated.

        :return: The enabled of this UpdateEphemerisRequest.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this UpdateEphemerisRequest.

        Whether the ephemeris is enabled or not. Changing this value will not require the ephemeris to be re-validated.

        :param enabled: The enabled of this UpdateEphemerisRequest.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def name(self):
        """Gets the name of this UpdateEphemerisRequest.

        A name string associated with the ephemeris. Used as a human-readable identifier for the ephemeris.

        :return: The name of this UpdateEphemerisRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateEphemerisRequest.

        A name string associated with the ephemeris. Used as a human-readable identifier for the ephemeris.

        :param name: The name of this UpdateEphemerisRequest.
        :type name: str
        """
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'^[ a-zA-Z0-9_:-]{1,256}$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[ a-zA-Z0-9_:-]{1,256}$/`")

        self._name = name

    @property
    def priority(self):
        """Gets the priority of this UpdateEphemerisRequest.

        <p>Customer-provided priority score to establish the order in which overlapping ephemerides should be used.</p> <p>The default for customer-provided ephemeris priority is 1, and higher numbers take precedence.</p> <p>Priority must be 1 or greater</p>

        :return: The priority of this UpdateEphemerisRequest.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this UpdateEphemerisRequest.

        <p>Customer-provided priority score to establish the order in which overlapping ephemerides should be used.</p> <p>The default for customer-provided ephemeris priority is 1, and higher numbers take precedence.</p> <p>Priority must be 1 or greater</p>

        :param priority: The priority of this UpdateEphemerisRequest.
        :type priority: int
        """
        if priority is not None and priority > 99999:
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `99999`")
        if priority is not None and priority < 0:
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `0`")

        self._priority = priority
