# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.agent_status import AgentStatus
from openapi_server import util


class ComponentStatusData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bytes_received: int=None, bytes_sent: int=None, capability_arn: str=None, component_type: str=None, dataflow_id: str=None, packets_dropped: int=None, status: AgentStatus=None):
        """ComponentStatusData - a model defined in OpenAPI

        :param bytes_received: The bytes_received of this ComponentStatusData.
        :param bytes_sent: The bytes_sent of this ComponentStatusData.
        :param capability_arn: The capability_arn of this ComponentStatusData.
        :param component_type: The component_type of this ComponentStatusData.
        :param dataflow_id: The dataflow_id of this ComponentStatusData.
        :param packets_dropped: The packets_dropped of this ComponentStatusData.
        :param status: The status of this ComponentStatusData.
        """
        self.openapi_types = {
            'bytes_received': int,
            'bytes_sent': int,
            'capability_arn': str,
            'component_type': str,
            'dataflow_id': str,
            'packets_dropped': int,
            'status': AgentStatus
        }

        self.attribute_map = {
            'bytes_received': 'bytesReceived',
            'bytes_sent': 'bytesSent',
            'capability_arn': 'capabilityArn',
            'component_type': 'componentType',
            'dataflow_id': 'dataflowId',
            'packets_dropped': 'packetsDropped',
            'status': 'status'
        }

        self._bytes_received = bytes_received
        self._bytes_sent = bytes_sent
        self._capability_arn = capability_arn
        self._component_type = component_type
        self._dataflow_id = dataflow_id
        self._packets_dropped = packets_dropped
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComponentStatusData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ComponentStatusData of this ComponentStatusData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bytes_received(self):
        """Gets the bytes_received of this ComponentStatusData.


        :return: The bytes_received of this ComponentStatusData.
        :rtype: int
        """
        return self._bytes_received

    @bytes_received.setter
    def bytes_received(self, bytes_received):
        """Sets the bytes_received of this ComponentStatusData.


        :param bytes_received: The bytes_received of this ComponentStatusData.
        :type bytes_received: int
        """

        self._bytes_received = bytes_received

    @property
    def bytes_sent(self):
        """Gets the bytes_sent of this ComponentStatusData.


        :return: The bytes_sent of this ComponentStatusData.
        :rtype: int
        """
        return self._bytes_sent

    @bytes_sent.setter
    def bytes_sent(self, bytes_sent):
        """Sets the bytes_sent of this ComponentStatusData.


        :param bytes_sent: The bytes_sent of this ComponentStatusData.
        :type bytes_sent: int
        """

        self._bytes_sent = bytes_sent

    @property
    def capability_arn(self):
        """Gets the capability_arn of this ComponentStatusData.


        :return: The capability_arn of this ComponentStatusData.
        :rtype: str
        """
        return self._capability_arn

    @capability_arn.setter
    def capability_arn(self, capability_arn):
        """Sets the capability_arn of this ComponentStatusData.


        :param capability_arn: The capability_arn of this ComponentStatusData.
        :type capability_arn: str
        """
        if capability_arn is None:
            raise ValueError("Invalid value for `capability_arn`, must not be `None`")

        self._capability_arn = capability_arn

    @property
    def component_type(self):
        """Gets the component_type of this ComponentStatusData.


        :return: The component_type of this ComponentStatusData.
        :rtype: str
        """
        return self._component_type

    @component_type.setter
    def component_type(self, component_type):
        """Sets the component_type of this ComponentStatusData.


        :param component_type: The component_type of this ComponentStatusData.
        :type component_type: str
        """
        if component_type is None:
            raise ValueError("Invalid value for `component_type`, must not be `None`")

        self._component_type = component_type

    @property
    def dataflow_id(self):
        """Gets the dataflow_id of this ComponentStatusData.


        :return: The dataflow_id of this ComponentStatusData.
        :rtype: str
        """
        return self._dataflow_id

    @dataflow_id.setter
    def dataflow_id(self, dataflow_id):
        """Sets the dataflow_id of this ComponentStatusData.


        :param dataflow_id: The dataflow_id of this ComponentStatusData.
        :type dataflow_id: str
        """
        if dataflow_id is None:
            raise ValueError("Invalid value for `dataflow_id`, must not be `None`")

        self._dataflow_id = dataflow_id

    @property
    def packets_dropped(self):
        """Gets the packets_dropped of this ComponentStatusData.


        :return: The packets_dropped of this ComponentStatusData.
        :rtype: int
        """
        return self._packets_dropped

    @packets_dropped.setter
    def packets_dropped(self, packets_dropped):
        """Sets the packets_dropped of this ComponentStatusData.


        :param packets_dropped: The packets_dropped of this ComponentStatusData.
        :type packets_dropped: int
        """

        self._packets_dropped = packets_dropped

    @property
    def status(self):
        """Gets the status of this ComponentStatusData.


        :return: The status of this ComponentStatusData.
        :rtype: AgentStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ComponentStatusData.


        :param status: The status of this ComponentStatusData.
        :type status: AgentStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
