# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.endpoint_details import EndpointDetails
from openapi_server import util


class CreateDataflowEndpointGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_post_pass_duration_seconds: int=None, contact_pre_pass_duration_seconds: int=None, endpoint_details: List[EndpointDetails]=None, tags: Dict[str, str]=None):
        """CreateDataflowEndpointGroupRequest - a model defined in OpenAPI

        :param contact_post_pass_duration_seconds: The contact_post_pass_duration_seconds of this CreateDataflowEndpointGroupRequest.
        :param contact_pre_pass_duration_seconds: The contact_pre_pass_duration_seconds of this CreateDataflowEndpointGroupRequest.
        :param endpoint_details: The endpoint_details of this CreateDataflowEndpointGroupRequest.
        :param tags: The tags of this CreateDataflowEndpointGroupRequest.
        """
        self.openapi_types = {
            'contact_post_pass_duration_seconds': int,
            'contact_pre_pass_duration_seconds': int,
            'endpoint_details': List[EndpointDetails],
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'contact_post_pass_duration_seconds': 'contactPostPassDurationSeconds',
            'contact_pre_pass_duration_seconds': 'contactPrePassDurationSeconds',
            'endpoint_details': 'endpointDetails',
            'tags': 'tags'
        }

        self._contact_post_pass_duration_seconds = contact_post_pass_duration_seconds
        self._contact_pre_pass_duration_seconds = contact_pre_pass_duration_seconds
        self._endpoint_details = endpoint_details
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDataflowEndpointGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDataflowEndpointGroup_request of this CreateDataflowEndpointGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_post_pass_duration_seconds(self):
        """Gets the contact_post_pass_duration_seconds of this CreateDataflowEndpointGroupRequest.

        Amount of time, in seconds, after a contact ends that the Ground Station Dataflow Endpoint Group will be in a <code>POSTPASS</code> state. A Ground Station Dataflow Endpoint Group State Change event will be emitted when the Dataflow Endpoint Group enters and exits the <code>POSTPASS</code> state.

        :return: The contact_post_pass_duration_seconds of this CreateDataflowEndpointGroupRequest.
        :rtype: int
        """
        return self._contact_post_pass_duration_seconds

    @contact_post_pass_duration_seconds.setter
    def contact_post_pass_duration_seconds(self, contact_post_pass_duration_seconds):
        """Sets the contact_post_pass_duration_seconds of this CreateDataflowEndpointGroupRequest.

        Amount of time, in seconds, after a contact ends that the Ground Station Dataflow Endpoint Group will be in a <code>POSTPASS</code> state. A Ground Station Dataflow Endpoint Group State Change event will be emitted when the Dataflow Endpoint Group enters and exits the <code>POSTPASS</code> state.

        :param contact_post_pass_duration_seconds: The contact_post_pass_duration_seconds of this CreateDataflowEndpointGroupRequest.
        :type contact_post_pass_duration_seconds: int
        """
        if contact_post_pass_duration_seconds is not None and contact_post_pass_duration_seconds > 480:
            raise ValueError("Invalid value for `contact_post_pass_duration_seconds`, must be a value less than or equal to `480`")
        if contact_post_pass_duration_seconds is not None and contact_post_pass_duration_seconds < 120:
            raise ValueError("Invalid value for `contact_post_pass_duration_seconds`, must be a value greater than or equal to `120`")

        self._contact_post_pass_duration_seconds = contact_post_pass_duration_seconds

    @property
    def contact_pre_pass_duration_seconds(self):
        """Gets the contact_pre_pass_duration_seconds of this CreateDataflowEndpointGroupRequest.

        Amount of time, in seconds, before a contact starts that the Ground Station Dataflow Endpoint Group will be in a <code>PREPASS</code> state. A Ground Station Dataflow Endpoint Group State Change event will be emitted when the Dataflow Endpoint Group enters and exits the <code>PREPASS</code> state.

        :return: The contact_pre_pass_duration_seconds of this CreateDataflowEndpointGroupRequest.
        :rtype: int
        """
        return self._contact_pre_pass_duration_seconds

    @contact_pre_pass_duration_seconds.setter
    def contact_pre_pass_duration_seconds(self, contact_pre_pass_duration_seconds):
        """Sets the contact_pre_pass_duration_seconds of this CreateDataflowEndpointGroupRequest.

        Amount of time, in seconds, before a contact starts that the Ground Station Dataflow Endpoint Group will be in a <code>PREPASS</code> state. A Ground Station Dataflow Endpoint Group State Change event will be emitted when the Dataflow Endpoint Group enters and exits the <code>PREPASS</code> state.

        :param contact_pre_pass_duration_seconds: The contact_pre_pass_duration_seconds of this CreateDataflowEndpointGroupRequest.
        :type contact_pre_pass_duration_seconds: int
        """
        if contact_pre_pass_duration_seconds is not None and contact_pre_pass_duration_seconds > 480:
            raise ValueError("Invalid value for `contact_pre_pass_duration_seconds`, must be a value less than or equal to `480`")
        if contact_pre_pass_duration_seconds is not None and contact_pre_pass_duration_seconds < 120:
            raise ValueError("Invalid value for `contact_pre_pass_duration_seconds`, must be a value greater than or equal to `120`")

        self._contact_pre_pass_duration_seconds = contact_pre_pass_duration_seconds

    @property
    def endpoint_details(self):
        """Gets the endpoint_details of this CreateDataflowEndpointGroupRequest.

        Endpoint details of each endpoint in the dataflow endpoint group.

        :return: The endpoint_details of this CreateDataflowEndpointGroupRequest.
        :rtype: List[EndpointDetails]
        """
        return self._endpoint_details

    @endpoint_details.setter
    def endpoint_details(self, endpoint_details):
        """Sets the endpoint_details of this CreateDataflowEndpointGroupRequest.

        Endpoint details of each endpoint in the dataflow endpoint group.

        :param endpoint_details: The endpoint_details of this CreateDataflowEndpointGroupRequest.
        :type endpoint_details: List[EndpointDetails]
        """
        if endpoint_details is None:
            raise ValueError("Invalid value for `endpoint_details`, must not be `None`")
        if endpoint_details is not None and len(endpoint_details) > 500:
            raise ValueError("Invalid value for `endpoint_details`, number of items must be less than or equal to `500`")
        if endpoint_details is not None and len(endpoint_details) < 0:
            raise ValueError("Invalid value for `endpoint_details`, number of items must be greater than or equal to `0`")

        self._endpoint_details = endpoint_details

    @property
    def tags(self):
        """Gets the tags of this CreateDataflowEndpointGroupRequest.

        Tags of a dataflow endpoint group.

        :return: The tags of this CreateDataflowEndpointGroupRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateDataflowEndpointGroupRequest.

        Tags of a dataflow endpoint group.

        :param tags: The tags of this CreateDataflowEndpointGroupRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags
