# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ranged_socket_address_port_range import RangedSocketAddressPortRange
from openapi_server import util


class RangedConnectionDetailsSocketAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, port_range: RangedSocketAddressPortRange=None):
        """RangedConnectionDetailsSocketAddress - a model defined in OpenAPI

        :param name: The name of this RangedConnectionDetailsSocketAddress.
        :param port_range: The port_range of this RangedConnectionDetailsSocketAddress.
        """
        self.openapi_types = {
            'name': str,
            'port_range': RangedSocketAddressPortRange
        }

        self.attribute_map = {
            'name': 'name',
            'port_range': 'portRange'
        }

        self._name = name
        self._port_range = port_range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RangedConnectionDetailsSocketAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RangedConnectionDetails_socketAddress of this RangedConnectionDetailsSocketAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this RangedConnectionDetailsSocketAddress.


        :return: The name of this RangedConnectionDetailsSocketAddress.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RangedConnectionDetailsSocketAddress.


        :param name: The name of this RangedConnectionDetailsSocketAddress.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def port_range(self):
        """Gets the port_range of this RangedConnectionDetailsSocketAddress.


        :return: The port_range of this RangedConnectionDetailsSocketAddress.
        :rtype: RangedSocketAddressPortRange
        """
        return self._port_range

    @port_range.setter
    def port_range(self, port_range):
        """Sets the port_range of this RangedConnectionDetailsSocketAddress.


        :param port_range: The port_range of this RangedConnectionDetailsSocketAddress.
        :type port_range: RangedSocketAddressPortRange
        """
        if port_range is None:
            raise ValueError("Invalid value for `port_range`, must not be `None`")

        self._port_range = port_range
