# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_mission_profile_request_streams_kms_key import CreateMissionProfileRequestStreamsKmsKey
import re
from openapi_server import util


class CreateMissionProfileRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_post_pass_duration_seconds: int=None, contact_pre_pass_duration_seconds: int=None, dataflow_edges: List[List[str]]=None, minimum_viable_contact_duration_seconds: int=None, name: str=None, streams_kms_key: CreateMissionProfileRequestStreamsKmsKey=None, streams_kms_role: str=None, tags: Dict[str, str]=None, tracking_config_arn: str=None):
        """CreateMissionProfileRequest - a model defined in OpenAPI

        :param contact_post_pass_duration_seconds: The contact_post_pass_duration_seconds of this CreateMissionProfileRequest.
        :param contact_pre_pass_duration_seconds: The contact_pre_pass_duration_seconds of this CreateMissionProfileRequest.
        :param dataflow_edges: The dataflow_edges of this CreateMissionProfileRequest.
        :param minimum_viable_contact_duration_seconds: The minimum_viable_contact_duration_seconds of this CreateMissionProfileRequest.
        :param name: The name of this CreateMissionProfileRequest.
        :param streams_kms_key: The streams_kms_key of this CreateMissionProfileRequest.
        :param streams_kms_role: The streams_kms_role of this CreateMissionProfileRequest.
        :param tags: The tags of this CreateMissionProfileRequest.
        :param tracking_config_arn: The tracking_config_arn of this CreateMissionProfileRequest.
        """
        self.openapi_types = {
            'contact_post_pass_duration_seconds': int,
            'contact_pre_pass_duration_seconds': int,
            'dataflow_edges': List[List[str]],
            'minimum_viable_contact_duration_seconds': int,
            'name': str,
            'streams_kms_key': CreateMissionProfileRequestStreamsKmsKey,
            'streams_kms_role': str,
            'tags': Dict[str, str],
            'tracking_config_arn': str
        }

        self.attribute_map = {
            'contact_post_pass_duration_seconds': 'contactPostPassDurationSeconds',
            'contact_pre_pass_duration_seconds': 'contactPrePassDurationSeconds',
            'dataflow_edges': 'dataflowEdges',
            'minimum_viable_contact_duration_seconds': 'minimumViableContactDurationSeconds',
            'name': 'name',
            'streams_kms_key': 'streamsKmsKey',
            'streams_kms_role': 'streamsKmsRole',
            'tags': 'tags',
            'tracking_config_arn': 'trackingConfigArn'
        }

        self._contact_post_pass_duration_seconds = contact_post_pass_duration_seconds
        self._contact_pre_pass_duration_seconds = contact_pre_pass_duration_seconds
        self._dataflow_edges = dataflow_edges
        self._minimum_viable_contact_duration_seconds = minimum_viable_contact_duration_seconds
        self._name = name
        self._streams_kms_key = streams_kms_key
        self._streams_kms_role = streams_kms_role
        self._tags = tags
        self._tracking_config_arn = tracking_config_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateMissionProfileRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateMissionProfile_request of this CreateMissionProfileRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_post_pass_duration_seconds(self):
        """Gets the contact_post_pass_duration_seconds of this CreateMissionProfileRequest.

        Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.

        :return: The contact_post_pass_duration_seconds of this CreateMissionProfileRequest.
        :rtype: int
        """
        return self._contact_post_pass_duration_seconds

    @contact_post_pass_duration_seconds.setter
    def contact_post_pass_duration_seconds(self, contact_post_pass_duration_seconds):
        """Sets the contact_post_pass_duration_seconds of this CreateMissionProfileRequest.

        Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.

        :param contact_post_pass_duration_seconds: The contact_post_pass_duration_seconds of this CreateMissionProfileRequest.
        :type contact_post_pass_duration_seconds: int
        """
        if contact_post_pass_duration_seconds is not None and contact_post_pass_duration_seconds > 21600:
            raise ValueError("Invalid value for `contact_post_pass_duration_seconds`, must be a value less than or equal to `21600`")
        if contact_post_pass_duration_seconds is not None and contact_post_pass_duration_seconds < 0:
            raise ValueError("Invalid value for `contact_post_pass_duration_seconds`, must be a value greater than or equal to `0`")

        self._contact_post_pass_duration_seconds = contact_post_pass_duration_seconds

    @property
    def contact_pre_pass_duration_seconds(self):
        """Gets the contact_pre_pass_duration_seconds of this CreateMissionProfileRequest.

        Amount of time prior to contact start you’d like to receive a CloudWatch event indicating an upcoming pass.

        :return: The contact_pre_pass_duration_seconds of this CreateMissionProfileRequest.
        :rtype: int
        """
        return self._contact_pre_pass_duration_seconds

    @contact_pre_pass_duration_seconds.setter
    def contact_pre_pass_duration_seconds(self, contact_pre_pass_duration_seconds):
        """Sets the contact_pre_pass_duration_seconds of this CreateMissionProfileRequest.

        Amount of time prior to contact start you’d like to receive a CloudWatch event indicating an upcoming pass.

        :param contact_pre_pass_duration_seconds: The contact_pre_pass_duration_seconds of this CreateMissionProfileRequest.
        :type contact_pre_pass_duration_seconds: int
        """
        if contact_pre_pass_duration_seconds is not None and contact_pre_pass_duration_seconds > 21600:
            raise ValueError("Invalid value for `contact_pre_pass_duration_seconds`, must be a value less than or equal to `21600`")
        if contact_pre_pass_duration_seconds is not None and contact_pre_pass_duration_seconds < 0:
            raise ValueError("Invalid value for `contact_pre_pass_duration_seconds`, must be a value greater than or equal to `0`")

        self._contact_pre_pass_duration_seconds = contact_pre_pass_duration_seconds

    @property
    def dataflow_edges(self):
        """Gets the dataflow_edges of this CreateMissionProfileRequest.

        A list of lists of ARNs. Each list of ARNs is an edge, with a <i>from</i> <code>Config</code> and a <i>to</i> <code>Config</code>.

        :return: The dataflow_edges of this CreateMissionProfileRequest.
        :rtype: List[List[str]]
        """
        return self._dataflow_edges

    @dataflow_edges.setter
    def dataflow_edges(self, dataflow_edges):
        """Sets the dataflow_edges of this CreateMissionProfileRequest.

        A list of lists of ARNs. Each list of ARNs is an edge, with a <i>from</i> <code>Config</code> and a <i>to</i> <code>Config</code>.

        :param dataflow_edges: The dataflow_edges of this CreateMissionProfileRequest.
        :type dataflow_edges: List[List[str]]
        """
        if dataflow_edges is None:
            raise ValueError("Invalid value for `dataflow_edges`, must not be `None`")
        if dataflow_edges is not None and len(dataflow_edges) > 500:
            raise ValueError("Invalid value for `dataflow_edges`, number of items must be less than or equal to `500`")
        if dataflow_edges is not None and len(dataflow_edges) < 0:
            raise ValueError("Invalid value for `dataflow_edges`, number of items must be greater than or equal to `0`")

        self._dataflow_edges = dataflow_edges

    @property
    def minimum_viable_contact_duration_seconds(self):
        """Gets the minimum_viable_contact_duration_seconds of this CreateMissionProfileRequest.

        Smallest amount of time in seconds that you’d like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.

        :return: The minimum_viable_contact_duration_seconds of this CreateMissionProfileRequest.
        :rtype: int
        """
        return self._minimum_viable_contact_duration_seconds

    @minimum_viable_contact_duration_seconds.setter
    def minimum_viable_contact_duration_seconds(self, minimum_viable_contact_duration_seconds):
        """Sets the minimum_viable_contact_duration_seconds of this CreateMissionProfileRequest.

        Smallest amount of time in seconds that you’d like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.

        :param minimum_viable_contact_duration_seconds: The minimum_viable_contact_duration_seconds of this CreateMissionProfileRequest.
        :type minimum_viable_contact_duration_seconds: int
        """
        if minimum_viable_contact_duration_seconds is None:
            raise ValueError("Invalid value for `minimum_viable_contact_duration_seconds`, must not be `None`")
        if minimum_viable_contact_duration_seconds is not None and minimum_viable_contact_duration_seconds > 21600:
            raise ValueError("Invalid value for `minimum_viable_contact_duration_seconds`, must be a value less than or equal to `21600`")
        if minimum_viable_contact_duration_seconds is not None and minimum_viable_contact_duration_seconds < 1:
            raise ValueError("Invalid value for `minimum_viable_contact_duration_seconds`, must be a value greater than or equal to `1`")

        self._minimum_viable_contact_duration_seconds = minimum_viable_contact_duration_seconds

    @property
    def name(self):
        """Gets the name of this CreateMissionProfileRequest.

        Name of a mission profile.

        :return: The name of this CreateMissionProfileRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateMissionProfileRequest.

        Name of a mission profile.

        :param name: The name of this CreateMissionProfileRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'^[ a-zA-Z0-9_:-]{1,256}$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[ a-zA-Z0-9_:-]{1,256}$/`")

        self._name = name

    @property
    def streams_kms_key(self):
        """Gets the streams_kms_key of this CreateMissionProfileRequest.


        :return: The streams_kms_key of this CreateMissionProfileRequest.
        :rtype: CreateMissionProfileRequestStreamsKmsKey
        """
        return self._streams_kms_key

    @streams_kms_key.setter
    def streams_kms_key(self, streams_kms_key):
        """Sets the streams_kms_key of this CreateMissionProfileRequest.


        :param streams_kms_key: The streams_kms_key of this CreateMissionProfileRequest.
        :type streams_kms_key: CreateMissionProfileRequestStreamsKmsKey
        """

        self._streams_kms_key = streams_kms_key

    @property
    def streams_kms_role(self):
        """Gets the streams_kms_role of this CreateMissionProfileRequest.

        Role to use for encrypting streams with KMS key.

        :return: The streams_kms_role of this CreateMissionProfileRequest.
        :rtype: str
        """
        return self._streams_kms_role

    @streams_kms_role.setter
    def streams_kms_role(self, streams_kms_role):
        """Sets the streams_kms_role of this CreateMissionProfileRequest.

        Role to use for encrypting streams with KMS key.

        :param streams_kms_role: The streams_kms_role of this CreateMissionProfileRequest.
        :type streams_kms_role: str
        """

        self._streams_kms_role = streams_kms_role

    @property
    def tags(self):
        """Gets the tags of this CreateMissionProfileRequest.

        Tags assigned to a mission profile.

        :return: The tags of this CreateMissionProfileRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateMissionProfileRequest.

        Tags assigned to a mission profile.

        :param tags: The tags of this CreateMissionProfileRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags

    @property
    def tracking_config_arn(self):
        """Gets the tracking_config_arn of this CreateMissionProfileRequest.

        ARN of a tracking <code>Config</code>.

        :return: The tracking_config_arn of this CreateMissionProfileRequest.
        :rtype: str
        """
        return self._tracking_config_arn

    @tracking_config_arn.setter
    def tracking_config_arn(self, tracking_config_arn):
        """Sets the tracking_config_arn of this CreateMissionProfileRequest.

        ARN of a tracking <code>Config</code>.

        :param tracking_config_arn: The tracking_config_arn of this CreateMissionProfileRequest.
        :type tracking_config_arn: str
        """
        if tracking_config_arn is None:
            raise ValueError("Invalid value for `tracking_config_arn`, must not be `None`")

        self._tracking_config_arn = tracking_config_arn
