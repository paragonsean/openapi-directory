# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.component_status_data import ComponentStatusData
from openapi_server.models.update_agent_status_request_aggregate_status import UpdateAgentStatusRequestAggregateStatus
import re
from openapi_server import util


class UpdateAgentStatusRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregate_status: UpdateAgentStatusRequestAggregateStatus=None, component_statuses: List[ComponentStatusData]=None, task_id: str=None):
        """UpdateAgentStatusRequest - a model defined in OpenAPI

        :param aggregate_status: The aggregate_status of this UpdateAgentStatusRequest.
        :param component_statuses: The component_statuses of this UpdateAgentStatusRequest.
        :param task_id: The task_id of this UpdateAgentStatusRequest.
        """
        self.openapi_types = {
            'aggregate_status': UpdateAgentStatusRequestAggregateStatus,
            'component_statuses': List[ComponentStatusData],
            'task_id': str
        }

        self.attribute_map = {
            'aggregate_status': 'aggregateStatus',
            'component_statuses': 'componentStatuses',
            'task_id': 'taskId'
        }

        self._aggregate_status = aggregate_status
        self._component_statuses = component_statuses
        self._task_id = task_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateAgentStatusRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateAgentStatus_request of this UpdateAgentStatusRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregate_status(self):
        """Gets the aggregate_status of this UpdateAgentStatusRequest.


        :return: The aggregate_status of this UpdateAgentStatusRequest.
        :rtype: UpdateAgentStatusRequestAggregateStatus
        """
        return self._aggregate_status

    @aggregate_status.setter
    def aggregate_status(self, aggregate_status):
        """Sets the aggregate_status of this UpdateAgentStatusRequest.


        :param aggregate_status: The aggregate_status of this UpdateAgentStatusRequest.
        :type aggregate_status: UpdateAgentStatusRequestAggregateStatus
        """
        if aggregate_status is None:
            raise ValueError("Invalid value for `aggregate_status`, must not be `None`")

        self._aggregate_status = aggregate_status

    @property
    def component_statuses(self):
        """Gets the component_statuses of this UpdateAgentStatusRequest.

        List of component statuses for agent.

        :return: The component_statuses of this UpdateAgentStatusRequest.
        :rtype: List[ComponentStatusData]
        """
        return self._component_statuses

    @component_statuses.setter
    def component_statuses(self, component_statuses):
        """Sets the component_statuses of this UpdateAgentStatusRequest.

        List of component statuses for agent.

        :param component_statuses: The component_statuses of this UpdateAgentStatusRequest.
        :type component_statuses: List[ComponentStatusData]
        """
        if component_statuses is None:
            raise ValueError("Invalid value for `component_statuses`, must not be `None`")
        if component_statuses is not None and len(component_statuses) > 20:
            raise ValueError("Invalid value for `component_statuses`, number of items must be less than or equal to `20`")
        if component_statuses is not None and len(component_statuses) < 0:
            raise ValueError("Invalid value for `component_statuses`, number of items must be greater than or equal to `0`")

        self._component_statuses = component_statuses

    @property
    def task_id(self):
        """Gets the task_id of this UpdateAgentStatusRequest.

        GUID of agent task.

        :return: The task_id of this UpdateAgentStatusRequest.
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this UpdateAgentStatusRequest.

        GUID of agent task.

        :param task_id: The task_id of this UpdateAgentStatusRequest.
        :type task_id: str
        """
        if task_id is None:
            raise ValueError("Invalid value for `task_id`, must not be `None`")
        if task_id is not None and len(task_id) > 128:
            raise ValueError("Invalid value for `task_id`, length must be less than or equal to `128`")
        if task_id is not None and len(task_id) < 1:
            raise ValueError("Invalid value for `task_id`, length must be greater than or equal to `1`")
        if task_id is not None and not re.search(r'^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$', task_id):
            raise ValueError("Invalid value for `task_id`, must be a follow pattern or equal to `/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/`")

        self._task_id = task_id
