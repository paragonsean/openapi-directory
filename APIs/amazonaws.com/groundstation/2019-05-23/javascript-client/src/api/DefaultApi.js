/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConfigIdResponse from '../model/ConfigIdResponse';
import ContactIdResponse from '../model/ContactIdResponse';
import CreateConfigRequest from '../model/CreateConfigRequest';
import CreateDataflowEndpointGroupRequest from '../model/CreateDataflowEndpointGroupRequest';
import CreateEphemerisRequest from '../model/CreateEphemerisRequest';
import CreateMissionProfileRequest from '../model/CreateMissionProfileRequest';
import DataflowEndpointGroupIdResponse from '../model/DataflowEndpointGroupIdResponse';
import DescribeContactResponse from '../model/DescribeContactResponse';
import DescribeEphemerisResponse from '../model/DescribeEphemerisResponse';
import EphemerisIdResponse from '../model/EphemerisIdResponse';
import GetAgentConfigurationResponse from '../model/GetAgentConfigurationResponse';
import GetConfigResponse from '../model/GetConfigResponse';
import GetDataflowEndpointGroupResponse from '../model/GetDataflowEndpointGroupResponse';
import GetMinuteUsageRequest from '../model/GetMinuteUsageRequest';
import GetMinuteUsageResponse from '../model/GetMinuteUsageResponse';
import GetMissionProfileResponse from '../model/GetMissionProfileResponse';
import GetSatelliteResponse from '../model/GetSatelliteResponse';
import ListConfigsResponse from '../model/ListConfigsResponse';
import ListContactsRequest from '../model/ListContactsRequest';
import ListContactsResponse from '../model/ListContactsResponse';
import ListDataflowEndpointGroupsResponse from '../model/ListDataflowEndpointGroupsResponse';
import ListEphemeridesRequest from '../model/ListEphemeridesRequest';
import ListEphemeridesResponse from '../model/ListEphemeridesResponse';
import ListGroundStationsResponse from '../model/ListGroundStationsResponse';
import ListMissionProfilesResponse from '../model/ListMissionProfilesResponse';
import ListSatellitesResponse from '../model/ListSatellitesResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import MissionProfileIdResponse from '../model/MissionProfileIdResponse';
import RegisterAgentRequest from '../model/RegisterAgentRequest';
import RegisterAgentResponse from '../model/RegisterAgentResponse';
import ReserveContactRequest from '../model/ReserveContactRequest';
import TagResourceRequest from '../model/TagResourceRequest';
import UpdateAgentStatusRequest from '../model/UpdateAgentStatusRequest';
import UpdateAgentStatusResponse from '../model/UpdateAgentStatusResponse';
import UpdateConfigRequest from '../model/UpdateConfigRequest';
import UpdateEphemerisRequest from '../model/UpdateEphemerisRequest';
import UpdateMissionProfileRequest from '../model/UpdateMissionProfileRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 2019-05-23
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelContact operation.
     * @callback module:api/DefaultApi~cancelContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a contact with a specified contact ID.
     * @param {String} contactId UUID of a contact.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~cancelContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactIdResponse}
     */
    cancelContact(contactId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling cancelContact");
      }

      let pathParams = {
        'contactId': contactId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContactIdResponse;
      return this.apiClient.callApi(
        '/contact/{contactId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createConfig operation.
     * @callback module:api/DefaultApi~createConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a <code>Config</code> with the specified <code>configData</code> parameters.</p> <p>Only one type of <code>configData</code> can be specified.</p>
     * @param {module:model/CreateConfigRequest} createConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigIdResponse}
     */
    createConfig(createConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = createConfigRequest;
      // verify the required parameter 'createConfigRequest' is set
      if (createConfigRequest === undefined || createConfigRequest === null) {
        throw new Error("Missing the required parameter 'createConfigRequest' when calling createConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConfigIdResponse;
      return this.apiClient.callApi(
        '/config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDataflowEndpointGroup operation.
     * @callback module:api/DefaultApi~createDataflowEndpointGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataflowEndpointGroupIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a <code>DataflowEndpoint</code> group containing the specified list of <code>DataflowEndpoint</code> objects.</p> <p>The <code>name</code> field in each endpoint is used in your mission profile <code>DataflowEndpointConfig</code> to specify which endpoints to use during a contact.</p> <p>When a contact uses multiple <code>DataflowEndpointConfig</code> objects, each <code>Config</code> must match a <code>DataflowEndpoint</code> in the same group.</p>
     * @param {module:model/CreateDataflowEndpointGroupRequest} createDataflowEndpointGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDataflowEndpointGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataflowEndpointGroupIdResponse}
     */
    createDataflowEndpointGroup(createDataflowEndpointGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDataflowEndpointGroupRequest;
      // verify the required parameter 'createDataflowEndpointGroupRequest' is set
      if (createDataflowEndpointGroupRequest === undefined || createDataflowEndpointGroupRequest === null) {
        throw new Error("Missing the required parameter 'createDataflowEndpointGroupRequest' when calling createDataflowEndpointGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DataflowEndpointGroupIdResponse;
      return this.apiClient.callApi(
        '/dataflowEndpointGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEphemeris operation.
     * @callback module:api/DefaultApi~createEphemerisCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EphemerisIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an Ephemeris with the specified <code>EphemerisData</code>.
     * @param {module:model/CreateEphemerisRequest} createEphemerisRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createEphemerisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EphemerisIdResponse}
     */
    createEphemeris(createEphemerisRequest, opts, callback) {
      opts = opts || {};
      let postBody = createEphemerisRequest;
      // verify the required parameter 'createEphemerisRequest' is set
      if (createEphemerisRequest === undefined || createEphemerisRequest === null) {
        throw new Error("Missing the required parameter 'createEphemerisRequest' when calling createEphemeris");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EphemerisIdResponse;
      return this.apiClient.callApi(
        '/ephemeris', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createMissionProfile operation.
     * @callback module:api/DefaultApi~createMissionProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MissionProfileIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a mission profile.</p> <p> <code>dataflowEdges</code> is a list of lists of strings. Each lower level list of strings has two elements: a <i>from</i> ARN and a <i>to</i> ARN.</p>
     * @param {module:model/CreateMissionProfileRequest} createMissionProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createMissionProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MissionProfileIdResponse}
     */
    createMissionProfile(createMissionProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = createMissionProfileRequest;
      // verify the required parameter 'createMissionProfileRequest' is set
      if (createMissionProfileRequest === undefined || createMissionProfileRequest === null) {
        throw new Error("Missing the required parameter 'createMissionProfileRequest' when calling createMissionProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MissionProfileIdResponse;
      return this.apiClient.callApi(
        '/missionprofile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteConfig operation.
     * @callback module:api/DefaultApi~deleteConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a <code>Config</code>.
     * @param {String} configId UUID of a <code>Config</code>.
     * @param {module:model/String} configType Type of a <code>Config</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigIdResponse}
     */
    deleteConfig(configId, configType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'configId' is set
      if (configId === undefined || configId === null) {
        throw new Error("Missing the required parameter 'configId' when calling deleteConfig");
      }
      // verify the required parameter 'configType' is set
      if (configType === undefined || configType === null) {
        throw new Error("Missing the required parameter 'configType' when calling deleteConfig");
      }

      let pathParams = {
        'configId': configId,
        'configType': configType
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConfigIdResponse;
      return this.apiClient.callApi(
        '/config/{configType}/{configId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDataflowEndpointGroup operation.
     * @callback module:api/DefaultApi~deleteDataflowEndpointGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataflowEndpointGroupIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a dataflow endpoint group.
     * @param {String} dataflowEndpointGroupId UUID of a dataflow endpoint group.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteDataflowEndpointGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataflowEndpointGroupIdResponse}
     */
    deleteDataflowEndpointGroup(dataflowEndpointGroupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dataflowEndpointGroupId' is set
      if (dataflowEndpointGroupId === undefined || dataflowEndpointGroupId === null) {
        throw new Error("Missing the required parameter 'dataflowEndpointGroupId' when calling deleteDataflowEndpointGroup");
      }

      let pathParams = {
        'dataflowEndpointGroupId': dataflowEndpointGroupId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataflowEndpointGroupIdResponse;
      return this.apiClient.callApi(
        '/dataflowEndpointGroup/{dataflowEndpointGroupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEphemeris operation.
     * @callback module:api/DefaultApi~deleteEphemerisCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EphemerisIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an ephemeris
     * @param {String} ephemerisId The AWS Ground Station ephemeris ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteEphemerisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EphemerisIdResponse}
     */
    deleteEphemeris(ephemerisId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ephemerisId' is set
      if (ephemerisId === undefined || ephemerisId === null) {
        throw new Error("Missing the required parameter 'ephemerisId' when calling deleteEphemeris");
      }

      let pathParams = {
        'ephemerisId': ephemerisId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EphemerisIdResponse;
      return this.apiClient.callApi(
        '/ephemeris/{ephemerisId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMissionProfile operation.
     * @callback module:api/DefaultApi~deleteMissionProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MissionProfileIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a mission profile.
     * @param {String} missionProfileId UUID of a mission profile.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteMissionProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MissionProfileIdResponse}
     */
    deleteMissionProfile(missionProfileId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'missionProfileId' is set
      if (missionProfileId === undefined || missionProfileId === null) {
        throw new Error("Missing the required parameter 'missionProfileId' when calling deleteMissionProfile");
      }

      let pathParams = {
        'missionProfileId': missionProfileId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MissionProfileIdResponse;
      return this.apiClient.callApi(
        '/missionprofile/{missionProfileId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeContact operation.
     * @callback module:api/DefaultApi~describeContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeContactResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes an existing contact.
     * @param {String} contactId UUID of a contact.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeContactResponse}
     */
    describeContact(contactId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling describeContact");
      }

      let pathParams = {
        'contactId': contactId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeContactResponse;
      return this.apiClient.callApi(
        '/contact/{contactId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeEphemeris operation.
     * @callback module:api/DefaultApi~describeEphemerisCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeEphemerisResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes an existing ephemeris.
     * @param {String} ephemerisId The AWS Ground Station ephemeris ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeEphemerisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeEphemerisResponse}
     */
    describeEphemeris(ephemerisId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ephemerisId' is set
      if (ephemerisId === undefined || ephemerisId === null) {
        throw new Error("Missing the required parameter 'ephemerisId' when calling describeEphemeris");
      }

      let pathParams = {
        'ephemerisId': ephemerisId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeEphemerisResponse;
      return this.apiClient.callApi(
        '/ephemeris/{ephemerisId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAgentConfiguration operation.
     * @callback module:api/DefaultApi~getAgentConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAgentConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <note> <p> For use by AWS Ground Station Agent and shouldn't be called directly.</p> </note> <p>Gets the latest configuration information for a registered agent.</p>
     * @param {String} agentId UUID of agent to get configuration information for.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAgentConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAgentConfigurationResponse}
     */
    getAgentConfiguration(agentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling getAgentConfiguration");
      }

      let pathParams = {
        'agentId': agentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAgentConfigurationResponse;
      return this.apiClient.callApi(
        '/agent/{agentId}/configuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfig operation.
     * @callback module:api/DefaultApi~getConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns <code>Config</code> information.</p> <p>Only one <code>Config</code> response can be returned.</p>
     * @param {String} configId UUID of a <code>Config</code>.
     * @param {module:model/String} configType Type of a <code>Config</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetConfigResponse}
     */
    getConfig(configId, configType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'configId' is set
      if (configId === undefined || configId === null) {
        throw new Error("Missing the required parameter 'configId' when calling getConfig");
      }
      // verify the required parameter 'configType' is set
      if (configType === undefined || configType === null) {
        throw new Error("Missing the required parameter 'configType' when calling getConfig");
      }

      let pathParams = {
        'configId': configId,
        'configType': configType
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetConfigResponse;
      return this.apiClient.callApi(
        '/config/{configType}/{configId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataflowEndpointGroup operation.
     * @callback module:api/DefaultApi~getDataflowEndpointGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDataflowEndpointGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the dataflow endpoint group.
     * @param {String} dataflowEndpointGroupId UUID of a dataflow endpoint group.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDataflowEndpointGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDataflowEndpointGroupResponse}
     */
    getDataflowEndpointGroup(dataflowEndpointGroupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dataflowEndpointGroupId' is set
      if (dataflowEndpointGroupId === undefined || dataflowEndpointGroupId === null) {
        throw new Error("Missing the required parameter 'dataflowEndpointGroupId' when calling getDataflowEndpointGroup");
      }

      let pathParams = {
        'dataflowEndpointGroupId': dataflowEndpointGroupId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDataflowEndpointGroupResponse;
      return this.apiClient.callApi(
        '/dataflowEndpointGroup/{dataflowEndpointGroupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMinuteUsage operation.
     * @callback module:api/DefaultApi~getMinuteUsageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMinuteUsageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the number of reserved minutes used by account.
     * @param {module:model/GetMinuteUsageRequest} getMinuteUsageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getMinuteUsageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMinuteUsageResponse}
     */
    getMinuteUsage(getMinuteUsageRequest, opts, callback) {
      opts = opts || {};
      let postBody = getMinuteUsageRequest;
      // verify the required parameter 'getMinuteUsageRequest' is set
      if (getMinuteUsageRequest === undefined || getMinuteUsageRequest === null) {
        throw new Error("Missing the required parameter 'getMinuteUsageRequest' when calling getMinuteUsage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetMinuteUsageResponse;
      return this.apiClient.callApi(
        '/minute-usage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMissionProfile operation.
     * @callback module:api/DefaultApi~getMissionProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMissionProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a mission profile.
     * @param {String} missionProfileId UUID of a mission profile.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getMissionProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMissionProfileResponse}
     */
    getMissionProfile(missionProfileId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'missionProfileId' is set
      if (missionProfileId === undefined || missionProfileId === null) {
        throw new Error("Missing the required parameter 'missionProfileId' when calling getMissionProfile");
      }

      let pathParams = {
        'missionProfileId': missionProfileId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMissionProfileResponse;
      return this.apiClient.callApi(
        '/missionprofile/{missionProfileId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSatellite operation.
     * @callback module:api/DefaultApi~getSatelliteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSatelliteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a satellite.
     * @param {String} satelliteId UUID of a satellite.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSatelliteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSatelliteResponse}
     */
    getSatellite(satelliteId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'satelliteId' is set
      if (satelliteId === undefined || satelliteId === null) {
        throw new Error("Missing the required parameter 'satelliteId' when calling getSatellite");
      }

      let pathParams = {
        'satelliteId': satelliteId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSatelliteResponse;
      return this.apiClient.callApi(
        '/satellite/{satelliteId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listConfigs operation.
     * @callback module:api/DefaultApi~listConfigsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListConfigsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of <code>Config</code> objects.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] Maximum number of <code>Configs</code> returned.
     * @param {String} [nextToken] Next token returned in the request of a previous <code>ListConfigs</code> call. Used to get the next page of results.
     * @param {module:api/DefaultApi~listConfigsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListConfigsResponse}
     */
    listConfigs(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListConfigsResponse;
      return this.apiClient.callApi(
        '/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listContacts operation.
     * @callback module:api/DefaultApi~listContactsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListContactsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a list of contacts.</p> <p>If <code>statusList</code> contains AVAILABLE, the request must include <code>groundStation</code>, <code>missionprofileArn</code>, and <code>satelliteArn</code>. </p>
     * @param {module:model/ListContactsRequest} listContactsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listContactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListContactsResponse}
     */
    listContacts(listContactsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listContactsRequest;
      // verify the required parameter 'listContactsRequest' is set
      if (listContactsRequest === undefined || listContactsRequest === null) {
        throw new Error("Missing the required parameter 'listContactsRequest' when calling listContacts");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListContactsResponse;
      return this.apiClient.callApi(
        '/contacts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDataflowEndpointGroups operation.
     * @callback module:api/DefaultApi~listDataflowEndpointGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDataflowEndpointGroupsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of <code>DataflowEndpoint</code> groups.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] Maximum number of dataflow endpoint groups returned.
     * @param {String} [nextToken] Next token returned in the request of a previous <code>ListDataflowEndpointGroups</code> call. Used to get the next page of results.
     * @param {module:api/DefaultApi~listDataflowEndpointGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDataflowEndpointGroupsResponse}
     */
    listDataflowEndpointGroups(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListDataflowEndpointGroupsResponse;
      return this.apiClient.callApi(
        '/dataflowEndpointGroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEphemerides operation.
     * @callback module:api/DefaultApi~listEphemeridesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEphemeridesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List existing ephemerides.
     * @param {module:model/ListEphemeridesRequest} listEphemeridesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] Maximum number of ephemerides to return.
     * @param {String} [nextToken] Pagination token.
     * @param {module:api/DefaultApi~listEphemeridesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEphemeridesResponse}
     */
    listEphemerides(listEphemeridesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listEphemeridesRequest;
      // verify the required parameter 'listEphemeridesRequest' is set
      if (listEphemeridesRequest === undefined || listEphemeridesRequest === null) {
        throw new Error("Missing the required parameter 'listEphemeridesRequest' when calling listEphemerides");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListEphemeridesResponse;
      return this.apiClient.callApi(
        '/ephemerides', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listGroundStations operation.
     * @callback module:api/DefaultApi~listGroundStationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListGroundStationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of ground stations. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] Maximum number of ground stations returned.
     * @param {String} [nextToken] Next token that can be supplied in the next call to get the next page of ground stations.
     * @param {String} [satelliteId] Satellite ID to retrieve on-boarded ground stations.
     * @param {module:api/DefaultApi~listGroundStationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListGroundStationsResponse}
     */
    listGroundStations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'satelliteId': opts['satelliteId']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListGroundStationsResponse;
      return this.apiClient.callApi(
        '/groundstation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMissionProfiles operation.
     * @callback module:api/DefaultApi~listMissionProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMissionProfilesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of mission profiles.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] Maximum number of mission profiles returned.
     * @param {String} [nextToken] Next token returned in the request of a previous <code>ListMissionProfiles</code> call. Used to get the next page of results.
     * @param {module:api/DefaultApi~listMissionProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMissionProfilesResponse}
     */
    listMissionProfiles(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListMissionProfilesResponse;
      return this.apiClient.callApi(
        '/missionprofile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSatellites operation.
     * @callback module:api/DefaultApi~listSatellitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSatellitesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of satellites.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] Maximum number of satellites returned.
     * @param {String} [nextToken] Next token that can be supplied in the next call to get the next page of satellites.
     * @param {module:api/DefaultApi~listSatellitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSatellitesResponse}
     */
    listSatellites(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSatellitesResponse;
      return this.apiClient.callApi(
        '/satellite', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of tags for a specified resource.
     * @param {String} resourceArn ARN of a resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerAgent operation.
     * @callback module:api/DefaultApi~registerAgentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisterAgentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <note> <p> For use by AWS Ground Station Agent and shouldn't be called directly.</p> </note> <p> Registers a new agent with AWS Ground Station. </p>
     * @param {module:model/RegisterAgentRequest} registerAgentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~registerAgentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisterAgentResponse}
     */
    registerAgent(registerAgentRequest, opts, callback) {
      opts = opts || {};
      let postBody = registerAgentRequest;
      // verify the required parameter 'registerAgentRequest' is set
      if (registerAgentRequest === undefined || registerAgentRequest === null) {
        throw new Error("Missing the required parameter 'registerAgentRequest' when calling registerAgent");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RegisterAgentResponse;
      return this.apiClient.callApi(
        '/agent', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reserveContact operation.
     * @callback module:api/DefaultApi~reserveContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reserves a contact using specified parameters.
     * @param {module:model/ReserveContactRequest} reserveContactRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~reserveContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactIdResponse}
     */
    reserveContact(reserveContactRequest, opts, callback) {
      opts = opts || {};
      let postBody = reserveContactRequest;
      // verify the required parameter 'reserveContactRequest' is set
      if (reserveContactRequest === undefined || reserveContactRequest === null) {
        throw new Error("Missing the required parameter 'reserveContactRequest' when calling reserveContact");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContactIdResponse;
      return this.apiClient.callApi(
        '/contact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assigns a tag to a resource.
     * @param {String} resourceArn ARN of a resource tag.
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deassigns a resource tag.
     * @param {String} resourceArn ARN of a resource.
     * @param {Array.<String>} tagKeys Keys of a resource tag.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAgentStatus operation.
     * @callback module:api/DefaultApi~updateAgentStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateAgentStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <note> <p> For use by AWS Ground Station Agent and shouldn't be called directly.</p> </note> <p>Update the status of the agent.</p>
     * @param {String} agentId UUID of agent to update.
     * @param {module:model/UpdateAgentStatusRequest} updateAgentStatusRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateAgentStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateAgentStatusResponse}
     */
    updateAgentStatus(agentId, updateAgentStatusRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateAgentStatusRequest;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling updateAgentStatus");
      }
      // verify the required parameter 'updateAgentStatusRequest' is set
      if (updateAgentStatusRequest === undefined || updateAgentStatusRequest === null) {
        throw new Error("Missing the required parameter 'updateAgentStatusRequest' when calling updateAgentStatus");
      }

      let pathParams = {
        'agentId': agentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAgentStatusResponse;
      return this.apiClient.callApi(
        '/agent/{agentId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConfig operation.
     * @callback module:api/DefaultApi~updateConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates the <code>Config</code> used when scheduling contacts.</p> <p>Updating a <code>Config</code> will not update the execution parameters for existing future contacts scheduled with this <code>Config</code>.</p>
     * @param {String} configId UUID of a <code>Config</code>.
     * @param {module:model/String} configType Type of a <code>Config</code>.
     * @param {module:model/UpdateConfigRequest} updateConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigIdResponse}
     */
    updateConfig(configId, configType, updateConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateConfigRequest;
      // verify the required parameter 'configId' is set
      if (configId === undefined || configId === null) {
        throw new Error("Missing the required parameter 'configId' when calling updateConfig");
      }
      // verify the required parameter 'configType' is set
      if (configType === undefined || configType === null) {
        throw new Error("Missing the required parameter 'configType' when calling updateConfig");
      }
      // verify the required parameter 'updateConfigRequest' is set
      if (updateConfigRequest === undefined || updateConfigRequest === null) {
        throw new Error("Missing the required parameter 'updateConfigRequest' when calling updateConfig");
      }

      let pathParams = {
        'configId': configId,
        'configType': configType
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConfigIdResponse;
      return this.apiClient.callApi(
        '/config/{configType}/{configId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEphemeris operation.
     * @callback module:api/DefaultApi~updateEphemerisCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EphemerisIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing ephemeris
     * @param {String} ephemerisId The AWS Ground Station ephemeris ID.
     * @param {module:model/UpdateEphemerisRequest} updateEphemerisRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateEphemerisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EphemerisIdResponse}
     */
    updateEphemeris(ephemerisId, updateEphemerisRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateEphemerisRequest;
      // verify the required parameter 'ephemerisId' is set
      if (ephemerisId === undefined || ephemerisId === null) {
        throw new Error("Missing the required parameter 'ephemerisId' when calling updateEphemeris");
      }
      // verify the required parameter 'updateEphemerisRequest' is set
      if (updateEphemerisRequest === undefined || updateEphemerisRequest === null) {
        throw new Error("Missing the required parameter 'updateEphemerisRequest' when calling updateEphemeris");
      }

      let pathParams = {
        'ephemerisId': ephemerisId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EphemerisIdResponse;
      return this.apiClient.callApi(
        '/ephemeris/{ephemerisId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMissionProfile operation.
     * @callback module:api/DefaultApi~updateMissionProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MissionProfileIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates a mission profile.</p> <p>Updating a mission profile will not update the execution parameters for existing future contacts.</p>
     * @param {String} missionProfileId UUID of a mission profile.
     * @param {module:model/UpdateMissionProfileRequest} updateMissionProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateMissionProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MissionProfileIdResponse}
     */
    updateMissionProfile(missionProfileId, updateMissionProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateMissionProfileRequest;
      // verify the required parameter 'missionProfileId' is set
      if (missionProfileId === undefined || missionProfileId === null) {
        throw new Error("Missing the required parameter 'missionProfileId' when calling updateMissionProfile");
      }
      // verify the required parameter 'updateMissionProfileRequest' is set
      if (updateMissionProfileRequest === undefined || updateMissionProfileRequest === null) {
        throw new Error("Missing the required parameter 'updateMissionProfileRequest' when calling updateMissionProfile");
      }

      let pathParams = {
        'missionProfileId': missionProfileId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MissionProfileIdResponse;
      return this.apiClient.callApi(
        '/missionprofile/{missionProfileId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
