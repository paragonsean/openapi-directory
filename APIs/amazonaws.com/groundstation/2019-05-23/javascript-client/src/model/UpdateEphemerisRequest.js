/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateEphemerisRequest model module.
 * @module model/UpdateEphemerisRequest
 * @version 2019-05-23
 */
class UpdateEphemerisRequest {
    /**
     * Constructs a new <code>UpdateEphemerisRequest</code>.
     * @alias module:model/UpdateEphemerisRequest
     * @param enabled {Boolean} Whether the ephemeris is enabled or not. Changing this value will not require the ephemeris to be re-validated.
     */
    constructor(enabled) { 
        
        UpdateEphemerisRequest.initialize(this, enabled);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, enabled) { 
        obj['enabled'] = enabled;
    }

    /**
     * Constructs a <code>UpdateEphemerisRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateEphemerisRequest} obj Optional instance to populate.
     * @return {module:model/UpdateEphemerisRequest} The populated <code>UpdateEphemerisRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateEphemerisRequest();

            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateEphemerisRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateEphemerisRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateEphemerisRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

UpdateEphemerisRequest.RequiredProperties = ["enabled"];

/**
 * Whether the ephemeris is enabled or not. Changing this value will not require the ephemeris to be re-validated.
 * @member {Boolean} enabled
 */
UpdateEphemerisRequest.prototype['enabled'] = undefined;

/**
 * A name string associated with the ephemeris. Used as a human-readable identifier for the ephemeris.
 * @member {String} name
 */
UpdateEphemerisRequest.prototype['name'] = undefined;

/**
 * <p>Customer-provided priority score to establish the order in which overlapping ephemerides should be used.</p> <p>The default for customer-provided ephemeris priority is 1, and higher numbers take precedence.</p> <p>Priority must be 1 or greater</p>
 * @member {Number} priority
 */
UpdateEphemerisRequest.prototype['priority'] = undefined;






export default UpdateEphemerisRequest;

