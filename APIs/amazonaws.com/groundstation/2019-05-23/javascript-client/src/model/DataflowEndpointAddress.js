/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SocketAddress from './SocketAddress';

/**
 * The DataflowEndpointAddress model module.
 * @module model/DataflowEndpointAddress
 * @version 2019-05-23
 */
class DataflowEndpointAddress {
    /**
     * Constructs a new <code>DataflowEndpointAddress</code>.
     * @alias module:model/DataflowEndpointAddress
     * @implements module:model/SocketAddress
     * @param name {String} 
     * @param port {Number} 
     */
    constructor(name, port) { 
        SocketAddress.initialize(this, name, port);
        DataflowEndpointAddress.initialize(this, name, port);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, port) { 
        obj['name'] = name;
        obj['port'] = port;
    }

    /**
     * Constructs a <code>DataflowEndpointAddress</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataflowEndpointAddress} obj Optional instance to populate.
     * @return {module:model/DataflowEndpointAddress} The populated <code>DataflowEndpointAddress</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataflowEndpointAddress();
            SocketAddress.constructFromObject(data, obj);

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('port')) {
                obj['port'] = ApiClient.convertToType(data['port'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataflowEndpointAddress</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataflowEndpointAddress</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DataflowEndpointAddress.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          String.validateJSON(data['name']);
        }
        // validate the optional field `port`
        if (data['port']) { // data not null
          Number.validateJSON(data['port']);
        }

        return true;
    }


}

DataflowEndpointAddress.RequiredProperties = ["name", "port"];

/**
 * @member {String} name
 */
DataflowEndpointAddress.prototype['name'] = undefined;

/**
 * @member {Number} port
 */
DataflowEndpointAddress.prototype['port'] = undefined;


// Implement SocketAddress interface:
/**
 * @member {String} name
 */
SocketAddress.prototype['name'] = undefined;
/**
 * @member {Number} port
 */
SocketAddress.prototype['port'] = undefined;




export default DataflowEndpointAddress;

