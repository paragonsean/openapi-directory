/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateConfigRequestConfigData from './CreateConfigRequestConfigData';

/**
 * The CreateConfigRequest model module.
 * @module model/CreateConfigRequest
 * @version 2019-05-23
 */
class CreateConfigRequest {
    /**
     * Constructs a new <code>CreateConfigRequest</code>.
     * @alias module:model/CreateConfigRequest
     * @param configData {module:model/CreateConfigRequestConfigData} 
     * @param name {String} Name of a <code>Config</code>.
     */
    constructor(configData, name) { 
        
        CreateConfigRequest.initialize(this, configData, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, configData, name) { 
        obj['configData'] = configData;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>CreateConfigRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateConfigRequest} obj Optional instance to populate.
     * @return {module:model/CreateConfigRequest} The populated <code>CreateConfigRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateConfigRequest();

            if (data.hasOwnProperty('configData')) {
                obj['configData'] = CreateConfigRequestConfigData.constructFromObject(data['configData']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateConfigRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateConfigRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateConfigRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `configData`
        if (data['configData']) { // data not null
          CreateConfigRequestConfigData.validateJSON(data['configData']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

CreateConfigRequest.RequiredProperties = ["configData", "name"];

/**
 * @member {module:model/CreateConfigRequestConfigData} configData
 */
CreateConfigRequest.prototype['configData'] = undefined;

/**
 * Name of a <code>Config</code>.
 * @member {String} name
 */
CreateConfigRequest.prototype['name'] = undefined;

/**
 * Tags assigned to a <code>Config</code>.
 * @member {Object.<String, String>} tags
 */
CreateConfigRequest.prototype['tags'] = undefined;






export default CreateConfigRequest;

