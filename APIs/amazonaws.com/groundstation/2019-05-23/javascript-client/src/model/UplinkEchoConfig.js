/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UplinkEchoConfig model module.
 * @module model/UplinkEchoConfig
 * @version 2019-05-23
 */
class UplinkEchoConfig {
    /**
     * Constructs a new <code>UplinkEchoConfig</code>.
     * &lt;p&gt;Information about an uplink echo &lt;code&gt;Config&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Parameters from the &lt;code&gt;AntennaUplinkConfig&lt;/code&gt;, corresponding to the specified &lt;code&gt;AntennaUplinkConfigArn&lt;/code&gt;, are used when this &lt;code&gt;UplinkEchoConfig&lt;/code&gt; is used in a contact.&lt;/p&gt;
     * @alias module:model/UplinkEchoConfig
     * @param antennaUplinkConfigArn {String} 
     * @param enabled {Boolean} 
     */
    constructor(antennaUplinkConfigArn, enabled) { 
        
        UplinkEchoConfig.initialize(this, antennaUplinkConfigArn, enabled);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, antennaUplinkConfigArn, enabled) { 
        obj['antennaUplinkConfigArn'] = antennaUplinkConfigArn;
        obj['enabled'] = enabled;
    }

    /**
     * Constructs a <code>UplinkEchoConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UplinkEchoConfig} obj Optional instance to populate.
     * @return {module:model/UplinkEchoConfig} The populated <code>UplinkEchoConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UplinkEchoConfig();

            if (data.hasOwnProperty('antennaUplinkConfigArn')) {
                obj['antennaUplinkConfigArn'] = ApiClient.convertToType(data['antennaUplinkConfigArn'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UplinkEchoConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UplinkEchoConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UplinkEchoConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `antennaUplinkConfigArn`
        if (data['antennaUplinkConfigArn']) { // data not null
          String.validateJSON(data['antennaUplinkConfigArn']);
        }
        // validate the optional field `enabled`
        if (data['enabled']) { // data not null
          Boolean.validateJSON(data['enabled']);
        }

        return true;
    }


}

UplinkEchoConfig.RequiredProperties = ["antennaUplinkConfigArn", "enabled"];

/**
 * @member {String} antennaUplinkConfigArn
 */
UplinkEchoConfig.prototype['antennaUplinkConfigArn'] = undefined;

/**
 * @member {Boolean} enabled
 */
UplinkEchoConfig.prototype['enabled'] = undefined;






export default UplinkEchoConfig;

