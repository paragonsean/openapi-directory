/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContactStatus from './ContactStatus';

/**
 * The ListContactsRequest model module.
 * @module model/ListContactsRequest
 * @version 2019-05-23
 */
class ListContactsRequest {
    /**
     * Constructs a new <code>ListContactsRequest</code>.
     * @alias module:model/ListContactsRequest
     * @param endTime {Date} End time of a contact in UTC.
     * @param startTime {Date} Start time of a contact in UTC.
     * @param statusList {Array.<module:model/ContactStatus>} Status of a contact reservation.
     */
    constructor(endTime, startTime, statusList) { 
        
        ListContactsRequest.initialize(this, endTime, startTime, statusList);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, endTime, startTime, statusList) { 
        obj['endTime'] = endTime;
        obj['startTime'] = startTime;
        obj['statusList'] = statusList;
    }

    /**
     * Constructs a <code>ListContactsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListContactsRequest} obj Optional instance to populate.
     * @return {module:model/ListContactsRequest} The populated <code>ListContactsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListContactsRequest();

            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('groundStation')) {
                obj['groundStation'] = ApiClient.convertToType(data['groundStation'], 'String');
            }
            if (data.hasOwnProperty('maxResults')) {
                obj['maxResults'] = ApiClient.convertToType(data['maxResults'], 'Number');
            }
            if (data.hasOwnProperty('missionProfileArn')) {
                obj['missionProfileArn'] = ApiClient.convertToType(data['missionProfileArn'], 'String');
            }
            if (data.hasOwnProperty('nextToken')) {
                obj['nextToken'] = ApiClient.convertToType(data['nextToken'], 'String');
            }
            if (data.hasOwnProperty('satelliteArn')) {
                obj['satelliteArn'] = ApiClient.convertToType(data['satelliteArn'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('statusList')) {
                obj['statusList'] = ApiClient.convertToType(data['statusList'], [ContactStatus]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListContactsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListContactsRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ListContactsRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['groundStation'] && !(typeof data['groundStation'] === 'string' || data['groundStation'] instanceof String)) {
            throw new Error("Expected the field `groundStation` to be a primitive type in the JSON string but got " + data['groundStation']);
        }
        // ensure the json data is a string
        if (data['missionProfileArn'] && !(typeof data['missionProfileArn'] === 'string' || data['missionProfileArn'] instanceof String)) {
            throw new Error("Expected the field `missionProfileArn` to be a primitive type in the JSON string but got " + data['missionProfileArn']);
        }
        // ensure the json data is a string
        if (data['nextToken'] && !(typeof data['nextToken'] === 'string' || data['nextToken'] instanceof String)) {
            throw new Error("Expected the field `nextToken` to be a primitive type in the JSON string but got " + data['nextToken']);
        }
        // ensure the json data is a string
        if (data['satelliteArn'] && !(typeof data['satelliteArn'] === 'string' || data['satelliteArn'] instanceof String)) {
            throw new Error("Expected the field `satelliteArn` to be a primitive type in the JSON string but got " + data['satelliteArn']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['statusList'])) {
            throw new Error("Expected the field `statusList` to be an array in the JSON data but got " + data['statusList']);
        }

        return true;
    }


}

ListContactsRequest.RequiredProperties = ["endTime", "startTime", "statusList"];

/**
 * End time of a contact in UTC.
 * @member {Date} endTime
 */
ListContactsRequest.prototype['endTime'] = undefined;

/**
 * Name of a ground station.
 * @member {String} groundStation
 */
ListContactsRequest.prototype['groundStation'] = undefined;

/**
 * Maximum number of contacts returned.
 * @member {Number} maxResults
 */
ListContactsRequest.prototype['maxResults'] = undefined;

/**
 * ARN of a mission profile.
 * @member {String} missionProfileArn
 */
ListContactsRequest.prototype['missionProfileArn'] = undefined;

/**
 * Next token returned in the request of a previous <code>ListContacts</code> call. Used to get the next page of results.
 * @member {String} nextToken
 */
ListContactsRequest.prototype['nextToken'] = undefined;

/**
 * ARN of a satellite.
 * @member {String} satelliteArn
 */
ListContactsRequest.prototype['satelliteArn'] = undefined;

/**
 * Start time of a contact in UTC.
 * @member {Date} startTime
 */
ListContactsRequest.prototype['startTime'] = undefined;

/**
 * Status of a contact reservation.
 * @member {Array.<module:model/ContactStatus>} statusList
 */
ListContactsRequest.prototype['statusList'] = undefined;






export default ListContactsRequest;

