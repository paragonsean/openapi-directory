/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContactStatus from './ContactStatus';
import DescribeContactResponseMaximumElevation from './DescribeContactResponseMaximumElevation';

/**
 * The ContactData model module.
 * @module model/ContactData
 * @version 2019-05-23
 */
class ContactData {
    /**
     * Constructs a new <code>ContactData</code>.
     * Data describing a contact.
     * @alias module:model/ContactData
     */
    constructor() { 
        
        ContactData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContactData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContactData} obj Optional instance to populate.
     * @return {module:model/ContactData} The populated <code>ContactData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContactData();

            if (data.hasOwnProperty('contactId')) {
                obj['contactId'] = ApiClient.convertToType(data['contactId'], 'String');
            }
            if (data.hasOwnProperty('contactStatus')) {
                obj['contactStatus'] = ApiClient.convertToType(data['contactStatus'], ContactStatus);
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('errorMessage')) {
                obj['errorMessage'] = ApiClient.convertToType(data['errorMessage'], 'String');
            }
            if (data.hasOwnProperty('groundStation')) {
                obj['groundStation'] = ApiClient.convertToType(data['groundStation'], 'String');
            }
            if (data.hasOwnProperty('maximumElevation')) {
                obj['maximumElevation'] = DescribeContactResponseMaximumElevation.constructFromObject(data['maximumElevation']);
            }
            if (data.hasOwnProperty('missionProfileArn')) {
                obj['missionProfileArn'] = ApiClient.convertToType(data['missionProfileArn'], 'String');
            }
            if (data.hasOwnProperty('postPassEndTime')) {
                obj['postPassEndTime'] = ApiClient.convertToType(data['postPassEndTime'], 'Date');
            }
            if (data.hasOwnProperty('prePassStartTime')) {
                obj['prePassStartTime'] = ApiClient.convertToType(data['prePassStartTime'], 'Date');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('satelliteArn')) {
                obj['satelliteArn'] = ApiClient.convertToType(data['satelliteArn'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContactData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContactData</code>.
     */
    static validateJSON(data) {
        // validate the optional field `contactId`
        if (data['contactId']) { // data not null
          String.validateJSON(data['contactId']);
        }
        // validate the optional field `contactStatus`
        if (data['contactStatus']) { // data not null
          ContactStatus.validateJSON(data['contactStatus']);
        }
        // validate the optional field `endTime`
        if (data['endTime']) { // data not null
          Date.validateJSON(data['endTime']);
        }
        // validate the optional field `errorMessage`
        if (data['errorMessage']) { // data not null
          String.validateJSON(data['errorMessage']);
        }
        // validate the optional field `groundStation`
        if (data['groundStation']) { // data not null
          String.validateJSON(data['groundStation']);
        }
        // validate the optional field `maximumElevation`
        if (data['maximumElevation']) { // data not null
          DescribeContactResponseMaximumElevation.validateJSON(data['maximumElevation']);
        }
        // validate the optional field `missionProfileArn`
        if (data['missionProfileArn']) { // data not null
          String.validateJSON(data['missionProfileArn']);
        }
        // validate the optional field `postPassEndTime`
        if (data['postPassEndTime']) { // data not null
          Date.validateJSON(data['postPassEndTime']);
        }
        // validate the optional field `prePassStartTime`
        if (data['prePassStartTime']) { // data not null
          Date.validateJSON(data['prePassStartTime']);
        }
        // validate the optional field `region`
        if (data['region']) { // data not null
          String.validateJSON(data['region']);
        }
        // validate the optional field `satelliteArn`
        if (data['satelliteArn']) { // data not null
          String.validateJSON(data['satelliteArn']);
        }
        // validate the optional field `startTime`
        if (data['startTime']) { // data not null
          Date.validateJSON(data['startTime']);
        }
        // validate the optional field `tags`
        if (data['tags']) { // data not null
          Object.validateJSON(data['tags']);
        }

        return true;
    }


}



/**
 * @member {String} contactId
 */
ContactData.prototype['contactId'] = undefined;

/**
 * @member {module:model/ContactStatus} contactStatus
 */
ContactData.prototype['contactStatus'] = undefined;

/**
 * @member {Date} endTime
 */
ContactData.prototype['endTime'] = undefined;

/**
 * @member {String} errorMessage
 */
ContactData.prototype['errorMessage'] = undefined;

/**
 * @member {String} groundStation
 */
ContactData.prototype['groundStation'] = undefined;

/**
 * @member {module:model/DescribeContactResponseMaximumElevation} maximumElevation
 */
ContactData.prototype['maximumElevation'] = undefined;

/**
 * @member {String} missionProfileArn
 */
ContactData.prototype['missionProfileArn'] = undefined;

/**
 * @member {Date} postPassEndTime
 */
ContactData.prototype['postPassEndTime'] = undefined;

/**
 * @member {Date} prePassStartTime
 */
ContactData.prototype['prePassStartTime'] = undefined;

/**
 * @member {String} region
 */
ContactData.prototype['region'] = undefined;

/**
 * @member {String} satelliteArn
 */
ContactData.prototype['satelliteArn'] = undefined;

/**
 * @member {Date} startTime
 */
ContactData.prototype['startTime'] = undefined;

/**
 * @member {Object} tags
 */
ContactData.prototype['tags'] = undefined;






export default ContactData;

