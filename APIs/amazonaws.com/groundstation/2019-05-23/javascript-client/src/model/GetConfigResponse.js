/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConfigCapabilityType from './ConfigCapabilityType';
import GetConfigResponseConfigData from './GetConfigResponseConfigData';

/**
 * The GetConfigResponse model module.
 * @module model/GetConfigResponse
 * @version 2019-05-23
 */
class GetConfigResponse {
    /**
     * Constructs a new <code>GetConfigResponse</code>.
     * &lt;p/&gt;
     * @alias module:model/GetConfigResponse
     * @param configArn {String} 
     * @param configData {module:model/GetConfigResponseConfigData} 
     * @param configId {String} 
     * @param name {String} 
     */
    constructor(configArn, configData, configId, name) { 
        
        GetConfigResponse.initialize(this, configArn, configData, configId, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, configArn, configData, configId, name) { 
        obj['configArn'] = configArn;
        obj['configData'] = configData;
        obj['configId'] = configId;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>GetConfigResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetConfigResponse} obj Optional instance to populate.
     * @return {module:model/GetConfigResponse} The populated <code>GetConfigResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetConfigResponse();

            if (data.hasOwnProperty('configArn')) {
                obj['configArn'] = ApiClient.convertToType(data['configArn'], 'String');
            }
            if (data.hasOwnProperty('configData')) {
                obj['configData'] = GetConfigResponseConfigData.constructFromObject(data['configData']);
            }
            if (data.hasOwnProperty('configId')) {
                obj['configId'] = ApiClient.convertToType(data['configId'], 'String');
            }
            if (data.hasOwnProperty('configType')) {
                obj['configType'] = ApiClient.convertToType(data['configType'], ConfigCapabilityType);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetConfigResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetConfigResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GetConfigResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `configArn`
        if (data['configArn']) { // data not null
          String.validateJSON(data['configArn']);
        }
        // validate the optional field `configData`
        if (data['configData']) { // data not null
          GetConfigResponseConfigData.validateJSON(data['configData']);
        }
        // validate the optional field `configId`
        if (data['configId']) { // data not null
          String.validateJSON(data['configId']);
        }
        // validate the optional field `configType`
        if (data['configType']) { // data not null
          ConfigCapabilityType.validateJSON(data['configType']);
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          String.validateJSON(data['name']);
        }
        // validate the optional field `tags`
        if (data['tags']) { // data not null
          Object.validateJSON(data['tags']);
        }

        return true;
    }


}

GetConfigResponse.RequiredProperties = ["configArn", "configData", "configId", "name"];

/**
 * @member {String} configArn
 */
GetConfigResponse.prototype['configArn'] = undefined;

/**
 * @member {module:model/GetConfigResponseConfigData} configData
 */
GetConfigResponse.prototype['configData'] = undefined;

/**
 * @member {String} configId
 */
GetConfigResponse.prototype['configId'] = undefined;

/**
 * @member {module:model/ConfigCapabilityType} configType
 */
GetConfigResponse.prototype['configType'] = undefined;

/**
 * @member {String} name
 */
GetConfigResponse.prototype['name'] = undefined;

/**
 * @member {Object} tags
 */
GetConfigResponse.prototype['tags'] = undefined;






export default GetConfigResponse;

