/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAntennaUplinkConfig_spectrumConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAntennaUplinkConfig_spectrumConfig::OAIAntennaUplinkConfig_spectrumConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAntennaUplinkConfig_spectrumConfig::OAIAntennaUplinkConfig_spectrumConfig() {
    this->initializeModel();
}

OAIAntennaUplinkConfig_spectrumConfig::~OAIAntennaUplinkConfig_spectrumConfig() {}

void OAIAntennaUplinkConfig_spectrumConfig::initializeModel() {

    m_center_frequency_isSet = false;
    m_center_frequency_isValid = false;

    m_polarization_isSet = false;
    m_polarization_isValid = false;
}

void OAIAntennaUplinkConfig_spectrumConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAntennaUplinkConfig_spectrumConfig::fromJsonObject(QJsonObject json) {

    m_center_frequency_isValid = ::OpenAPI::fromJsonValue(m_center_frequency, json[QString("centerFrequency")]);
    m_center_frequency_isSet = !json[QString("centerFrequency")].isNull() && m_center_frequency_isValid;

    m_polarization_isValid = ::OpenAPI::fromJsonValue(m_polarization, json[QString("polarization")]);
    m_polarization_isSet = !json[QString("polarization")].isNull() && m_polarization_isValid;
}

QString OAIAntennaUplinkConfig_spectrumConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAntennaUplinkConfig_spectrumConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_center_frequency.isSet()) {
        obj.insert(QString("centerFrequency"), ::OpenAPI::toJsonValue(m_center_frequency));
    }
    if (m_polarization.isSet()) {
        obj.insert(QString("polarization"), ::OpenAPI::toJsonValue(m_polarization));
    }
    return obj;
}

OAIUplinkSpectrumConfig_centerFrequency OAIAntennaUplinkConfig_spectrumConfig::getCenterFrequency() const {
    return m_center_frequency;
}
void OAIAntennaUplinkConfig_spectrumConfig::setCenterFrequency(const OAIUplinkSpectrumConfig_centerFrequency &center_frequency) {
    m_center_frequency = center_frequency;
    m_center_frequency_isSet = true;
}

bool OAIAntennaUplinkConfig_spectrumConfig::is_center_frequency_Set() const{
    return m_center_frequency_isSet;
}

bool OAIAntennaUplinkConfig_spectrumConfig::is_center_frequency_Valid() const{
    return m_center_frequency_isValid;
}

OAIPolarization OAIAntennaUplinkConfig_spectrumConfig::getPolarization() const {
    return m_polarization;
}
void OAIAntennaUplinkConfig_spectrumConfig::setPolarization(const OAIPolarization &polarization) {
    m_polarization = polarization;
    m_polarization_isSet = true;
}

bool OAIAntennaUplinkConfig_spectrumConfig::is_polarization_Set() const{
    return m_polarization_isSet;
}

bool OAIAntennaUplinkConfig_spectrumConfig::is_polarization_Valid() const{
    return m_polarization_isValid;
}

bool OAIAntennaUplinkConfig_spectrumConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_center_frequency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_polarization.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAntennaUplinkConfig_spectrumConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_center_frequency_isValid && true;
}

} // namespace OpenAPI
