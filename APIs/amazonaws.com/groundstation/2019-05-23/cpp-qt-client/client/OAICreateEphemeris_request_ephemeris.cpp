/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateEphemeris_request_ephemeris.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateEphemeris_request_ephemeris::OAICreateEphemeris_request_ephemeris(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateEphemeris_request_ephemeris::OAICreateEphemeris_request_ephemeris() {
    this->initializeModel();
}

OAICreateEphemeris_request_ephemeris::~OAICreateEphemeris_request_ephemeris() {}

void OAICreateEphemeris_request_ephemeris::initializeModel() {

    m_oem_isSet = false;
    m_oem_isValid = false;

    m_tle_isSet = false;
    m_tle_isValid = false;
}

void OAICreateEphemeris_request_ephemeris::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateEphemeris_request_ephemeris::fromJsonObject(QJsonObject json) {

    m_oem_isValid = ::OpenAPI::fromJsonValue(m_oem, json[QString("oem")]);
    m_oem_isSet = !json[QString("oem")].isNull() && m_oem_isValid;

    m_tle_isValid = ::OpenAPI::fromJsonValue(m_tle, json[QString("tle")]);
    m_tle_isSet = !json[QString("tle")].isNull() && m_tle_isValid;
}

QString OAICreateEphemeris_request_ephemeris::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateEphemeris_request_ephemeris::asJsonObject() const {
    QJsonObject obj;
    if (m_oem.isSet()) {
        obj.insert(QString("oem"), ::OpenAPI::toJsonValue(m_oem));
    }
    if (m_tle.isSet()) {
        obj.insert(QString("tle"), ::OpenAPI::toJsonValue(m_tle));
    }
    return obj;
}

OAIOEMEphemeris OAICreateEphemeris_request_ephemeris::getOem() const {
    return m_oem;
}
void OAICreateEphemeris_request_ephemeris::setOem(const OAIOEMEphemeris &oem) {
    m_oem = oem;
    m_oem_isSet = true;
}

bool OAICreateEphemeris_request_ephemeris::is_oem_Set() const{
    return m_oem_isSet;
}

bool OAICreateEphemeris_request_ephemeris::is_oem_Valid() const{
    return m_oem_isValid;
}

OAITLEEphemeris OAICreateEphemeris_request_ephemeris::getTle() const {
    return m_tle;
}
void OAICreateEphemeris_request_ephemeris::setTle(const OAITLEEphemeris &tle) {
    m_tle = tle;
    m_tle_isSet = true;
}

bool OAICreateEphemeris_request_ephemeris::is_tle_Set() const{
    return m_tle_isSet;
}

bool OAICreateEphemeris_request_ephemeris::is_tle_Valid() const{
    return m_tle_isValid;
}

bool OAICreateEphemeris_request_ephemeris::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_oem.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tle.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateEphemeris_request_ephemeris::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
