/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIContactData.h
 *
 * Data describing a contact.
 */

#ifndef OAIContactData_H
#define OAIContactData_H

#include <QJsonObject>

#include "OAIContactStatus.h"
#include "OAIDescribeContactResponse_maximumElevation.h"
#include <QDateTime>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDescribeContactResponse_maximumElevation;

class OAIContactData : public OAIObject {
public:
    OAIContactData();
    OAIContactData(QString json);
    ~OAIContactData() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getContactId() const;
    void setContactId(const QString &contact_id);
    bool is_contact_id_Set() const;
    bool is_contact_id_Valid() const;

    OAIContactStatus getContactStatus() const;
    void setContactStatus(const OAIContactStatus &contact_status);
    bool is_contact_status_Set() const;
    bool is_contact_status_Valid() const;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    QString getErrorMessage() const;
    void setErrorMessage(const QString &error_message);
    bool is_error_message_Set() const;
    bool is_error_message_Valid() const;

    QString getGroundStation() const;
    void setGroundStation(const QString &ground_station);
    bool is_ground_station_Set() const;
    bool is_ground_station_Valid() const;

    OAIDescribeContactResponse_maximumElevation getMaximumElevation() const;
    void setMaximumElevation(const OAIDescribeContactResponse_maximumElevation &maximum_elevation);
    bool is_maximum_elevation_Set() const;
    bool is_maximum_elevation_Valid() const;

    QString getMissionProfileArn() const;
    void setMissionProfileArn(const QString &mission_profile_arn);
    bool is_mission_profile_arn_Set() const;
    bool is_mission_profile_arn_Valid() const;

    QDateTime getPostPassEndTime() const;
    void setPostPassEndTime(const QDateTime &post_pass_end_time);
    bool is_post_pass_end_time_Set() const;
    bool is_post_pass_end_time_Valid() const;

    QDateTime getPrePassStartTime() const;
    void setPrePassStartTime(const QDateTime &pre_pass_start_time);
    bool is_pre_pass_start_time_Set() const;
    bool is_pre_pass_start_time_Valid() const;

    QString getRegion() const;
    void setRegion(const QString &region);
    bool is_region_Set() const;
    bool is_region_Valid() const;

    QString getSatelliteArn() const;
    void setSatelliteArn(const QString &satellite_arn);
    bool is_satellite_arn_Set() const;
    bool is_satellite_arn_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_contact_id;
    bool m_contact_id_isSet;
    bool m_contact_id_isValid;

    OAIContactStatus m_contact_status;
    bool m_contact_status_isSet;
    bool m_contact_status_isValid;

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    QString m_error_message;
    bool m_error_message_isSet;
    bool m_error_message_isValid;

    QString m_ground_station;
    bool m_ground_station_isSet;
    bool m_ground_station_isValid;

    OAIDescribeContactResponse_maximumElevation m_maximum_elevation;
    bool m_maximum_elevation_isSet;
    bool m_maximum_elevation_isValid;

    QString m_mission_profile_arn;
    bool m_mission_profile_arn_isSet;
    bool m_mission_profile_arn_isValid;

    QDateTime m_post_pass_end_time;
    bool m_post_pass_end_time_isSet;
    bool m_post_pass_end_time_isValid;

    QDateTime m_pre_pass_start_time;
    bool m_pre_pass_start_time_isSet;
    bool m_pre_pass_start_time_isValid;

    QString m_region;
    bool m_region_isSet;
    bool m_region_isValid;

    QString m_satellite_arn;
    bool m_satellite_arn_isSet;
    bool m_satellite_arn_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIContactData)

#endif // OAIContactData_H
