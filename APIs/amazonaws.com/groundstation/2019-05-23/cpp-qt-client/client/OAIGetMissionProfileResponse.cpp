/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetMissionProfileResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetMissionProfileResponse::OAIGetMissionProfileResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetMissionProfileResponse::OAIGetMissionProfileResponse() {
    this->initializeModel();
}

OAIGetMissionProfileResponse::~OAIGetMissionProfileResponse() {}

void OAIGetMissionProfileResponse::initializeModel() {

    m_contact_post_pass_duration_seconds_isSet = false;
    m_contact_post_pass_duration_seconds_isValid = false;

    m_contact_pre_pass_duration_seconds_isSet = false;
    m_contact_pre_pass_duration_seconds_isValid = false;

    m_dataflow_edges_isSet = false;
    m_dataflow_edges_isValid = false;

    m_minimum_viable_contact_duration_seconds_isSet = false;
    m_minimum_viable_contact_duration_seconds_isValid = false;

    m_mission_profile_arn_isSet = false;
    m_mission_profile_arn_isValid = false;

    m_mission_profile_id_isSet = false;
    m_mission_profile_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_streams_kms_key_isSet = false;
    m_streams_kms_key_isValid = false;

    m_streams_kms_role_isSet = false;
    m_streams_kms_role_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_tracking_config_arn_isSet = false;
    m_tracking_config_arn_isValid = false;
}

void OAIGetMissionProfileResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetMissionProfileResponse::fromJsonObject(QJsonObject json) {

    m_contact_post_pass_duration_seconds_isValid = ::OpenAPI::fromJsonValue(m_contact_post_pass_duration_seconds, json[QString("contactPostPassDurationSeconds")]);
    m_contact_post_pass_duration_seconds_isSet = !json[QString("contactPostPassDurationSeconds")].isNull() && m_contact_post_pass_duration_seconds_isValid;

    m_contact_pre_pass_duration_seconds_isValid = ::OpenAPI::fromJsonValue(m_contact_pre_pass_duration_seconds, json[QString("contactPrePassDurationSeconds")]);
    m_contact_pre_pass_duration_seconds_isSet = !json[QString("contactPrePassDurationSeconds")].isNull() && m_contact_pre_pass_duration_seconds_isValid;

    m_dataflow_edges_isValid = ::OpenAPI::fromJsonValue(m_dataflow_edges, json[QString("dataflowEdges")]);
    m_dataflow_edges_isSet = !json[QString("dataflowEdges")].isNull() && m_dataflow_edges_isValid;

    m_minimum_viable_contact_duration_seconds_isValid = ::OpenAPI::fromJsonValue(m_minimum_viable_contact_duration_seconds, json[QString("minimumViableContactDurationSeconds")]);
    m_minimum_viable_contact_duration_seconds_isSet = !json[QString("minimumViableContactDurationSeconds")].isNull() && m_minimum_viable_contact_duration_seconds_isValid;

    m_mission_profile_arn_isValid = ::OpenAPI::fromJsonValue(m_mission_profile_arn, json[QString("missionProfileArn")]);
    m_mission_profile_arn_isSet = !json[QString("missionProfileArn")].isNull() && m_mission_profile_arn_isValid;

    m_mission_profile_id_isValid = ::OpenAPI::fromJsonValue(m_mission_profile_id, json[QString("missionProfileId")]);
    m_mission_profile_id_isSet = !json[QString("missionProfileId")].isNull() && m_mission_profile_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_streams_kms_key_isValid = ::OpenAPI::fromJsonValue(m_streams_kms_key, json[QString("streamsKmsKey")]);
    m_streams_kms_key_isSet = !json[QString("streamsKmsKey")].isNull() && m_streams_kms_key_isValid;

    m_streams_kms_role_isValid = ::OpenAPI::fromJsonValue(m_streams_kms_role, json[QString("streamsKmsRole")]);
    m_streams_kms_role_isSet = !json[QString("streamsKmsRole")].isNull() && m_streams_kms_role_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_tracking_config_arn_isValid = ::OpenAPI::fromJsonValue(m_tracking_config_arn, json[QString("trackingConfigArn")]);
    m_tracking_config_arn_isSet = !json[QString("trackingConfigArn")].isNull() && m_tracking_config_arn_isValid;
}

QString OAIGetMissionProfileResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetMissionProfileResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_contact_post_pass_duration_seconds_isSet) {
        obj.insert(QString("contactPostPassDurationSeconds"), ::OpenAPI::toJsonValue(m_contact_post_pass_duration_seconds));
    }
    if (m_contact_pre_pass_duration_seconds_isSet) {
        obj.insert(QString("contactPrePassDurationSeconds"), ::OpenAPI::toJsonValue(m_contact_pre_pass_duration_seconds));
    }
    if (m_dataflow_edges.isSet()) {
        obj.insert(QString("dataflowEdges"), ::OpenAPI::toJsonValue(m_dataflow_edges));
    }
    if (m_minimum_viable_contact_duration_seconds_isSet) {
        obj.insert(QString("minimumViableContactDurationSeconds"), ::OpenAPI::toJsonValue(m_minimum_viable_contact_duration_seconds));
    }
    if (m_mission_profile_arn_isSet) {
        obj.insert(QString("missionProfileArn"), ::OpenAPI::toJsonValue(m_mission_profile_arn));
    }
    if (m_mission_profile_id_isSet) {
        obj.insert(QString("missionProfileId"), ::OpenAPI::toJsonValue(m_mission_profile_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_streams_kms_key.isSet()) {
        obj.insert(QString("streamsKmsKey"), ::OpenAPI::toJsonValue(m_streams_kms_key));
    }
    if (m_streams_kms_role_isSet) {
        obj.insert(QString("streamsKmsRole"), ::OpenAPI::toJsonValue(m_streams_kms_role));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_tracking_config_arn_isSet) {
        obj.insert(QString("trackingConfigArn"), ::OpenAPI::toJsonValue(m_tracking_config_arn));
    }
    return obj;
}

qint32 OAIGetMissionProfileResponse::getContactPostPassDurationSeconds() const {
    return m_contact_post_pass_duration_seconds;
}
void OAIGetMissionProfileResponse::setContactPostPassDurationSeconds(const qint32 &contact_post_pass_duration_seconds) {
    m_contact_post_pass_duration_seconds = contact_post_pass_duration_seconds;
    m_contact_post_pass_duration_seconds_isSet = true;
}

bool OAIGetMissionProfileResponse::is_contact_post_pass_duration_seconds_Set() const{
    return m_contact_post_pass_duration_seconds_isSet;
}

bool OAIGetMissionProfileResponse::is_contact_post_pass_duration_seconds_Valid() const{
    return m_contact_post_pass_duration_seconds_isValid;
}

qint32 OAIGetMissionProfileResponse::getContactPrePassDurationSeconds() const {
    return m_contact_pre_pass_duration_seconds;
}
void OAIGetMissionProfileResponse::setContactPrePassDurationSeconds(const qint32 &contact_pre_pass_duration_seconds) {
    m_contact_pre_pass_duration_seconds = contact_pre_pass_duration_seconds;
    m_contact_pre_pass_duration_seconds_isSet = true;
}

bool OAIGetMissionProfileResponse::is_contact_pre_pass_duration_seconds_Set() const{
    return m_contact_pre_pass_duration_seconds_isSet;
}

bool OAIGetMissionProfileResponse::is_contact_pre_pass_duration_seconds_Valid() const{
    return m_contact_pre_pass_duration_seconds_isValid;
}

QList OAIGetMissionProfileResponse::getDataflowEdges() const {
    return m_dataflow_edges;
}
void OAIGetMissionProfileResponse::setDataflowEdges(const QList &dataflow_edges) {
    m_dataflow_edges = dataflow_edges;
    m_dataflow_edges_isSet = true;
}

bool OAIGetMissionProfileResponse::is_dataflow_edges_Set() const{
    return m_dataflow_edges_isSet;
}

bool OAIGetMissionProfileResponse::is_dataflow_edges_Valid() const{
    return m_dataflow_edges_isValid;
}

qint32 OAIGetMissionProfileResponse::getMinimumViableContactDurationSeconds() const {
    return m_minimum_viable_contact_duration_seconds;
}
void OAIGetMissionProfileResponse::setMinimumViableContactDurationSeconds(const qint32 &minimum_viable_contact_duration_seconds) {
    m_minimum_viable_contact_duration_seconds = minimum_viable_contact_duration_seconds;
    m_minimum_viable_contact_duration_seconds_isSet = true;
}

bool OAIGetMissionProfileResponse::is_minimum_viable_contact_duration_seconds_Set() const{
    return m_minimum_viable_contact_duration_seconds_isSet;
}

bool OAIGetMissionProfileResponse::is_minimum_viable_contact_duration_seconds_Valid() const{
    return m_minimum_viable_contact_duration_seconds_isValid;
}

QString OAIGetMissionProfileResponse::getMissionProfileArn() const {
    return m_mission_profile_arn;
}
void OAIGetMissionProfileResponse::setMissionProfileArn(const QString &mission_profile_arn) {
    m_mission_profile_arn = mission_profile_arn;
    m_mission_profile_arn_isSet = true;
}

bool OAIGetMissionProfileResponse::is_mission_profile_arn_Set() const{
    return m_mission_profile_arn_isSet;
}

bool OAIGetMissionProfileResponse::is_mission_profile_arn_Valid() const{
    return m_mission_profile_arn_isValid;
}

QString OAIGetMissionProfileResponse::getMissionProfileId() const {
    return m_mission_profile_id;
}
void OAIGetMissionProfileResponse::setMissionProfileId(const QString &mission_profile_id) {
    m_mission_profile_id = mission_profile_id;
    m_mission_profile_id_isSet = true;
}

bool OAIGetMissionProfileResponse::is_mission_profile_id_Set() const{
    return m_mission_profile_id_isSet;
}

bool OAIGetMissionProfileResponse::is_mission_profile_id_Valid() const{
    return m_mission_profile_id_isValid;
}

QString OAIGetMissionProfileResponse::getName() const {
    return m_name;
}
void OAIGetMissionProfileResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetMissionProfileResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetMissionProfileResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetMissionProfileResponse::getRegion() const {
    return m_region;
}
void OAIGetMissionProfileResponse::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIGetMissionProfileResponse::is_region_Set() const{
    return m_region_isSet;
}

bool OAIGetMissionProfileResponse::is_region_Valid() const{
    return m_region_isValid;
}

OAIGetMissionProfileResponse_streamsKmsKey OAIGetMissionProfileResponse::getStreamsKmsKey() const {
    return m_streams_kms_key;
}
void OAIGetMissionProfileResponse::setStreamsKmsKey(const OAIGetMissionProfileResponse_streamsKmsKey &streams_kms_key) {
    m_streams_kms_key = streams_kms_key;
    m_streams_kms_key_isSet = true;
}

bool OAIGetMissionProfileResponse::is_streams_kms_key_Set() const{
    return m_streams_kms_key_isSet;
}

bool OAIGetMissionProfileResponse::is_streams_kms_key_Valid() const{
    return m_streams_kms_key_isValid;
}

QString OAIGetMissionProfileResponse::getStreamsKmsRole() const {
    return m_streams_kms_role;
}
void OAIGetMissionProfileResponse::setStreamsKmsRole(const QString &streams_kms_role) {
    m_streams_kms_role = streams_kms_role;
    m_streams_kms_role_isSet = true;
}

bool OAIGetMissionProfileResponse::is_streams_kms_role_Set() const{
    return m_streams_kms_role_isSet;
}

bool OAIGetMissionProfileResponse::is_streams_kms_role_Valid() const{
    return m_streams_kms_role_isValid;
}

QMap OAIGetMissionProfileResponse::getTags() const {
    return m_tags;
}
void OAIGetMissionProfileResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetMissionProfileResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetMissionProfileResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIGetMissionProfileResponse::getTrackingConfigArn() const {
    return m_tracking_config_arn;
}
void OAIGetMissionProfileResponse::setTrackingConfigArn(const QString &tracking_config_arn) {
    m_tracking_config_arn = tracking_config_arn;
    m_tracking_config_arn_isSet = true;
}

bool OAIGetMissionProfileResponse::is_tracking_config_arn_Set() const{
    return m_tracking_config_arn_isSet;
}

bool OAIGetMissionProfileResponse::is_tracking_config_arn_Valid() const{
    return m_tracking_config_arn_isValid;
}

bool OAIGetMissionProfileResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact_post_pass_duration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_pre_pass_duration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataflow_edges.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_viable_contact_duration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mission_profile_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mission_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_streams_kms_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_streams_kms_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_config_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetMissionProfileResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
