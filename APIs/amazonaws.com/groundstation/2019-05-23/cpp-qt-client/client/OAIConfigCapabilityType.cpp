/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigCapabilityType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigCapabilityType::OAIConfigCapabilityType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigCapabilityType::OAIConfigCapabilityType() {
    this->initializeModel();
}

OAIConfigCapabilityType::~OAIConfigCapabilityType() {}

void OAIConfigCapabilityType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIConfigCapabilityType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIConfigCapabilityType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("antenna-downlink", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConfigCapabilityType::ANTENNA_DOWNLINK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("antenna-downlink-demod-decode", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConfigCapabilityType::ANTENNA_DOWNLINK_DEMOD_DECODE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("antenna-uplink", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConfigCapabilityType::ANTENNA_UPLINK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("dataflow-endpoint", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConfigCapabilityType::DATAFLOW_ENDPOINT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("tracking", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConfigCapabilityType::TRACKING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("uplink-echo", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConfigCapabilityType::UPLINK_ECHO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("s3-recording", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConfigCapabilityType::S3_RECORDING;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIConfigCapabilityType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIConfigCapabilityType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIConfigCapabilityType::ANTENNA_DOWNLINK:
            val = "antenna-downlink";
            break;
        case eOAIConfigCapabilityType::ANTENNA_DOWNLINK_DEMOD_DECODE:
            val = "antenna-downlink-demod-decode";
            break;
        case eOAIConfigCapabilityType::ANTENNA_UPLINK:
            val = "antenna-uplink";
            break;
        case eOAIConfigCapabilityType::DATAFLOW_ENDPOINT:
            val = "dataflow-endpoint";
            break;
        case eOAIConfigCapabilityType::TRACKING:
            val = "tracking";
            break;
        case eOAIConfigCapabilityType::UPLINK_ECHO:
            val = "uplink-echo";
            break;
        case eOAIConfigCapabilityType::S3_RECORDING:
            val = "s3-recording";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIConfigCapabilityType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIConfigCapabilityType::eOAIConfigCapabilityType OAIConfigCapabilityType::getValue() const {
    return m_value;
}

void OAIConfigCapabilityType::setValue(const OAIConfigCapabilityType::eOAIConfigCapabilityType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIConfigCapabilityType::isSet() const {
    
    return m_value_isSet;
}

bool OAIConfigCapabilityType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
