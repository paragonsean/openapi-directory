/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateConfigRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateConfigRequest::OAICreateConfigRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateConfigRequest::OAICreateConfigRequest() {
    this->initializeModel();
}

OAICreateConfigRequest::~OAICreateConfigRequest() {}

void OAICreateConfigRequest::initializeModel() {

    m_config_data_isSet = false;
    m_config_data_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateConfigRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateConfigRequest::fromJsonObject(QJsonObject json) {

    m_config_data_isValid = ::OpenAPI::fromJsonValue(m_config_data, json[QString("configData")]);
    m_config_data_isSet = !json[QString("configData")].isNull() && m_config_data_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateConfigRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateConfigRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_config_data.isSet()) {
        obj.insert(QString("configData"), ::OpenAPI::toJsonValue(m_config_data));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAICreateConfigRequest_configData OAICreateConfigRequest::getConfigData() const {
    return m_config_data;
}
void OAICreateConfigRequest::setConfigData(const OAICreateConfigRequest_configData &config_data) {
    m_config_data = config_data;
    m_config_data_isSet = true;
}

bool OAICreateConfigRequest::is_config_data_Set() const{
    return m_config_data_isSet;
}

bool OAICreateConfigRequest::is_config_data_Valid() const{
    return m_config_data_isValid;
}

QString OAICreateConfigRequest::getName() const {
    return m_name;
}
void OAICreateConfigRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateConfigRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateConfigRequest::is_name_Valid() const{
    return m_name_isValid;
}

QMap OAICreateConfigRequest::getTags() const {
    return m_tags;
}
void OAICreateConfigRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateConfigRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateConfigRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateConfigRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateConfigRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_config_data_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
