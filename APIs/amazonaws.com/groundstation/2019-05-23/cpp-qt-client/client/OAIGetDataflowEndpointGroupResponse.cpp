/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDataflowEndpointGroupResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDataflowEndpointGroupResponse::OAIGetDataflowEndpointGroupResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDataflowEndpointGroupResponse::OAIGetDataflowEndpointGroupResponse() {
    this->initializeModel();
}

OAIGetDataflowEndpointGroupResponse::~OAIGetDataflowEndpointGroupResponse() {}

void OAIGetDataflowEndpointGroupResponse::initializeModel() {

    m_contact_post_pass_duration_seconds_isSet = false;
    m_contact_post_pass_duration_seconds_isValid = false;

    m_contact_pre_pass_duration_seconds_isSet = false;
    m_contact_pre_pass_duration_seconds_isValid = false;

    m_dataflow_endpoint_group_arn_isSet = false;
    m_dataflow_endpoint_group_arn_isValid = false;

    m_dataflow_endpoint_group_id_isSet = false;
    m_dataflow_endpoint_group_id_isValid = false;

    m_endpoints_details_isSet = false;
    m_endpoints_details_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIGetDataflowEndpointGroupResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDataflowEndpointGroupResponse::fromJsonObject(QJsonObject json) {

    m_contact_post_pass_duration_seconds_isValid = ::OpenAPI::fromJsonValue(m_contact_post_pass_duration_seconds, json[QString("contactPostPassDurationSeconds")]);
    m_contact_post_pass_duration_seconds_isSet = !json[QString("contactPostPassDurationSeconds")].isNull() && m_contact_post_pass_duration_seconds_isValid;

    m_contact_pre_pass_duration_seconds_isValid = ::OpenAPI::fromJsonValue(m_contact_pre_pass_duration_seconds, json[QString("contactPrePassDurationSeconds")]);
    m_contact_pre_pass_duration_seconds_isSet = !json[QString("contactPrePassDurationSeconds")].isNull() && m_contact_pre_pass_duration_seconds_isValid;

    m_dataflow_endpoint_group_arn_isValid = ::OpenAPI::fromJsonValue(m_dataflow_endpoint_group_arn, json[QString("dataflowEndpointGroupArn")]);
    m_dataflow_endpoint_group_arn_isSet = !json[QString("dataflowEndpointGroupArn")].isNull() && m_dataflow_endpoint_group_arn_isValid;

    m_dataflow_endpoint_group_id_isValid = ::OpenAPI::fromJsonValue(m_dataflow_endpoint_group_id, json[QString("dataflowEndpointGroupId")]);
    m_dataflow_endpoint_group_id_isSet = !json[QString("dataflowEndpointGroupId")].isNull() && m_dataflow_endpoint_group_id_isValid;

    m_endpoints_details_isValid = ::OpenAPI::fromJsonValue(m_endpoints_details, json[QString("endpointsDetails")]);
    m_endpoints_details_isSet = !json[QString("endpointsDetails")].isNull() && m_endpoints_details_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIGetDataflowEndpointGroupResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDataflowEndpointGroupResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_contact_post_pass_duration_seconds_isSet) {
        obj.insert(QString("contactPostPassDurationSeconds"), ::OpenAPI::toJsonValue(m_contact_post_pass_duration_seconds));
    }
    if (m_contact_pre_pass_duration_seconds_isSet) {
        obj.insert(QString("contactPrePassDurationSeconds"), ::OpenAPI::toJsonValue(m_contact_pre_pass_duration_seconds));
    }
    if (m_dataflow_endpoint_group_arn_isSet) {
        obj.insert(QString("dataflowEndpointGroupArn"), ::OpenAPI::toJsonValue(m_dataflow_endpoint_group_arn));
    }
    if (m_dataflow_endpoint_group_id_isSet) {
        obj.insert(QString("dataflowEndpointGroupId"), ::OpenAPI::toJsonValue(m_dataflow_endpoint_group_id));
    }
    if (m_endpoints_details.isSet()) {
        obj.insert(QString("endpointsDetails"), ::OpenAPI::toJsonValue(m_endpoints_details));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

qint32 OAIGetDataflowEndpointGroupResponse::getContactPostPassDurationSeconds() const {
    return m_contact_post_pass_duration_seconds;
}
void OAIGetDataflowEndpointGroupResponse::setContactPostPassDurationSeconds(const qint32 &contact_post_pass_duration_seconds) {
    m_contact_post_pass_duration_seconds = contact_post_pass_duration_seconds;
    m_contact_post_pass_duration_seconds_isSet = true;
}

bool OAIGetDataflowEndpointGroupResponse::is_contact_post_pass_duration_seconds_Set() const{
    return m_contact_post_pass_duration_seconds_isSet;
}

bool OAIGetDataflowEndpointGroupResponse::is_contact_post_pass_duration_seconds_Valid() const{
    return m_contact_post_pass_duration_seconds_isValid;
}

qint32 OAIGetDataflowEndpointGroupResponse::getContactPrePassDurationSeconds() const {
    return m_contact_pre_pass_duration_seconds;
}
void OAIGetDataflowEndpointGroupResponse::setContactPrePassDurationSeconds(const qint32 &contact_pre_pass_duration_seconds) {
    m_contact_pre_pass_duration_seconds = contact_pre_pass_duration_seconds;
    m_contact_pre_pass_duration_seconds_isSet = true;
}

bool OAIGetDataflowEndpointGroupResponse::is_contact_pre_pass_duration_seconds_Set() const{
    return m_contact_pre_pass_duration_seconds_isSet;
}

bool OAIGetDataflowEndpointGroupResponse::is_contact_pre_pass_duration_seconds_Valid() const{
    return m_contact_pre_pass_duration_seconds_isValid;
}

QString OAIGetDataflowEndpointGroupResponse::getDataflowEndpointGroupArn() const {
    return m_dataflow_endpoint_group_arn;
}
void OAIGetDataflowEndpointGroupResponse::setDataflowEndpointGroupArn(const QString &dataflow_endpoint_group_arn) {
    m_dataflow_endpoint_group_arn = dataflow_endpoint_group_arn;
    m_dataflow_endpoint_group_arn_isSet = true;
}

bool OAIGetDataflowEndpointGroupResponse::is_dataflow_endpoint_group_arn_Set() const{
    return m_dataflow_endpoint_group_arn_isSet;
}

bool OAIGetDataflowEndpointGroupResponse::is_dataflow_endpoint_group_arn_Valid() const{
    return m_dataflow_endpoint_group_arn_isValid;
}

QString OAIGetDataflowEndpointGroupResponse::getDataflowEndpointGroupId() const {
    return m_dataflow_endpoint_group_id;
}
void OAIGetDataflowEndpointGroupResponse::setDataflowEndpointGroupId(const QString &dataflow_endpoint_group_id) {
    m_dataflow_endpoint_group_id = dataflow_endpoint_group_id;
    m_dataflow_endpoint_group_id_isSet = true;
}

bool OAIGetDataflowEndpointGroupResponse::is_dataflow_endpoint_group_id_Set() const{
    return m_dataflow_endpoint_group_id_isSet;
}

bool OAIGetDataflowEndpointGroupResponse::is_dataflow_endpoint_group_id_Valid() const{
    return m_dataflow_endpoint_group_id_isValid;
}

QList OAIGetDataflowEndpointGroupResponse::getEndpointsDetails() const {
    return m_endpoints_details;
}
void OAIGetDataflowEndpointGroupResponse::setEndpointsDetails(const QList &endpoints_details) {
    m_endpoints_details = endpoints_details;
    m_endpoints_details_isSet = true;
}

bool OAIGetDataflowEndpointGroupResponse::is_endpoints_details_Set() const{
    return m_endpoints_details_isSet;
}

bool OAIGetDataflowEndpointGroupResponse::is_endpoints_details_Valid() const{
    return m_endpoints_details_isValid;
}

QMap OAIGetDataflowEndpointGroupResponse::getTags() const {
    return m_tags;
}
void OAIGetDataflowEndpointGroupResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetDataflowEndpointGroupResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetDataflowEndpointGroupResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIGetDataflowEndpointGroupResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact_post_pass_duration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_pre_pass_duration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataflow_endpoint_group_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataflow_endpoint_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoints_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDataflowEndpointGroupResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
