/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigTypeData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigTypeData::OAIConfigTypeData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigTypeData::OAIConfigTypeData() {
    this->initializeModel();
}

OAIConfigTypeData::~OAIConfigTypeData() {}

void OAIConfigTypeData::initializeModel() {

    m_antenna_downlink_config_isSet = false;
    m_antenna_downlink_config_isValid = false;

    m_antenna_downlink_demod_decode_config_isSet = false;
    m_antenna_downlink_demod_decode_config_isValid = false;

    m_antenna_uplink_config_isSet = false;
    m_antenna_uplink_config_isValid = false;

    m_dataflow_endpoint_config_isSet = false;
    m_dataflow_endpoint_config_isValid = false;

    m_s3_recording_config_isSet = false;
    m_s3_recording_config_isValid = false;

    m_tracking_config_isSet = false;
    m_tracking_config_isValid = false;

    m_uplink_echo_config_isSet = false;
    m_uplink_echo_config_isValid = false;
}

void OAIConfigTypeData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigTypeData::fromJsonObject(QJsonObject json) {

    m_antenna_downlink_config_isValid = ::OpenAPI::fromJsonValue(m_antenna_downlink_config, json[QString("antennaDownlinkConfig")]);
    m_antenna_downlink_config_isSet = !json[QString("antennaDownlinkConfig")].isNull() && m_antenna_downlink_config_isValid;

    m_antenna_downlink_demod_decode_config_isValid = ::OpenAPI::fromJsonValue(m_antenna_downlink_demod_decode_config, json[QString("antennaDownlinkDemodDecodeConfig")]);
    m_antenna_downlink_demod_decode_config_isSet = !json[QString("antennaDownlinkDemodDecodeConfig")].isNull() && m_antenna_downlink_demod_decode_config_isValid;

    m_antenna_uplink_config_isValid = ::OpenAPI::fromJsonValue(m_antenna_uplink_config, json[QString("antennaUplinkConfig")]);
    m_antenna_uplink_config_isSet = !json[QString("antennaUplinkConfig")].isNull() && m_antenna_uplink_config_isValid;

    m_dataflow_endpoint_config_isValid = ::OpenAPI::fromJsonValue(m_dataflow_endpoint_config, json[QString("dataflowEndpointConfig")]);
    m_dataflow_endpoint_config_isSet = !json[QString("dataflowEndpointConfig")].isNull() && m_dataflow_endpoint_config_isValid;

    m_s3_recording_config_isValid = ::OpenAPI::fromJsonValue(m_s3_recording_config, json[QString("s3RecordingConfig")]);
    m_s3_recording_config_isSet = !json[QString("s3RecordingConfig")].isNull() && m_s3_recording_config_isValid;

    m_tracking_config_isValid = ::OpenAPI::fromJsonValue(m_tracking_config, json[QString("trackingConfig")]);
    m_tracking_config_isSet = !json[QString("trackingConfig")].isNull() && m_tracking_config_isValid;

    m_uplink_echo_config_isValid = ::OpenAPI::fromJsonValue(m_uplink_echo_config, json[QString("uplinkEchoConfig")]);
    m_uplink_echo_config_isSet = !json[QString("uplinkEchoConfig")].isNull() && m_uplink_echo_config_isValid;
}

QString OAIConfigTypeData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigTypeData::asJsonObject() const {
    QJsonObject obj;
    if (m_antenna_downlink_config.isSet()) {
        obj.insert(QString("antennaDownlinkConfig"), ::OpenAPI::toJsonValue(m_antenna_downlink_config));
    }
    if (m_antenna_downlink_demod_decode_config.isSet()) {
        obj.insert(QString("antennaDownlinkDemodDecodeConfig"), ::OpenAPI::toJsonValue(m_antenna_downlink_demod_decode_config));
    }
    if (m_antenna_uplink_config.isSet()) {
        obj.insert(QString("antennaUplinkConfig"), ::OpenAPI::toJsonValue(m_antenna_uplink_config));
    }
    if (m_dataflow_endpoint_config.isSet()) {
        obj.insert(QString("dataflowEndpointConfig"), ::OpenAPI::toJsonValue(m_dataflow_endpoint_config));
    }
    if (m_s3_recording_config.isSet()) {
        obj.insert(QString("s3RecordingConfig"), ::OpenAPI::toJsonValue(m_s3_recording_config));
    }
    if (m_tracking_config.isSet()) {
        obj.insert(QString("trackingConfig"), ::OpenAPI::toJsonValue(m_tracking_config));
    }
    if (m_uplink_echo_config.isSet()) {
        obj.insert(QString("uplinkEchoConfig"), ::OpenAPI::toJsonValue(m_uplink_echo_config));
    }
    return obj;
}

OAICreateConfig_request_configData_antennaDownlinkConfig OAIConfigTypeData::getAntennaDownlinkConfig() const {
    return m_antenna_downlink_config;
}
void OAIConfigTypeData::setAntennaDownlinkConfig(const OAICreateConfig_request_configData_antennaDownlinkConfig &antenna_downlink_config) {
    m_antenna_downlink_config = antenna_downlink_config;
    m_antenna_downlink_config_isSet = true;
}

bool OAIConfigTypeData::is_antenna_downlink_config_Set() const{
    return m_antenna_downlink_config_isSet;
}

bool OAIConfigTypeData::is_antenna_downlink_config_Valid() const{
    return m_antenna_downlink_config_isValid;
}

OAICreateConfig_request_configData_antennaDownlinkDemodDecodeConfig OAIConfigTypeData::getAntennaDownlinkDemodDecodeConfig() const {
    return m_antenna_downlink_demod_decode_config;
}
void OAIConfigTypeData::setAntennaDownlinkDemodDecodeConfig(const OAICreateConfig_request_configData_antennaDownlinkDemodDecodeConfig &antenna_downlink_demod_decode_config) {
    m_antenna_downlink_demod_decode_config = antenna_downlink_demod_decode_config;
    m_antenna_downlink_demod_decode_config_isSet = true;
}

bool OAIConfigTypeData::is_antenna_downlink_demod_decode_config_Set() const{
    return m_antenna_downlink_demod_decode_config_isSet;
}

bool OAIConfigTypeData::is_antenna_downlink_demod_decode_config_Valid() const{
    return m_antenna_downlink_demod_decode_config_isValid;
}

OAICreateConfig_request_configData_antennaUplinkConfig OAIConfigTypeData::getAntennaUplinkConfig() const {
    return m_antenna_uplink_config;
}
void OAIConfigTypeData::setAntennaUplinkConfig(const OAICreateConfig_request_configData_antennaUplinkConfig &antenna_uplink_config) {
    m_antenna_uplink_config = antenna_uplink_config;
    m_antenna_uplink_config_isSet = true;
}

bool OAIConfigTypeData::is_antenna_uplink_config_Set() const{
    return m_antenna_uplink_config_isSet;
}

bool OAIConfigTypeData::is_antenna_uplink_config_Valid() const{
    return m_antenna_uplink_config_isValid;
}

OAICreateConfig_request_configData_dataflowEndpointConfig OAIConfigTypeData::getDataflowEndpointConfig() const {
    return m_dataflow_endpoint_config;
}
void OAIConfigTypeData::setDataflowEndpointConfig(const OAICreateConfig_request_configData_dataflowEndpointConfig &dataflow_endpoint_config) {
    m_dataflow_endpoint_config = dataflow_endpoint_config;
    m_dataflow_endpoint_config_isSet = true;
}

bool OAIConfigTypeData::is_dataflow_endpoint_config_Set() const{
    return m_dataflow_endpoint_config_isSet;
}

bool OAIConfigTypeData::is_dataflow_endpoint_config_Valid() const{
    return m_dataflow_endpoint_config_isValid;
}

OAICreateConfig_request_configData_s3RecordingConfig OAIConfigTypeData::getS3RecordingConfig() const {
    return m_s3_recording_config;
}
void OAIConfigTypeData::setS3RecordingConfig(const OAICreateConfig_request_configData_s3RecordingConfig &s3_recording_config) {
    m_s3_recording_config = s3_recording_config;
    m_s3_recording_config_isSet = true;
}

bool OAIConfigTypeData::is_s3_recording_config_Set() const{
    return m_s3_recording_config_isSet;
}

bool OAIConfigTypeData::is_s3_recording_config_Valid() const{
    return m_s3_recording_config_isValid;
}

OAICreateConfig_request_configData_trackingConfig OAIConfigTypeData::getTrackingConfig() const {
    return m_tracking_config;
}
void OAIConfigTypeData::setTrackingConfig(const OAICreateConfig_request_configData_trackingConfig &tracking_config) {
    m_tracking_config = tracking_config;
    m_tracking_config_isSet = true;
}

bool OAIConfigTypeData::is_tracking_config_Set() const{
    return m_tracking_config_isSet;
}

bool OAIConfigTypeData::is_tracking_config_Valid() const{
    return m_tracking_config_isValid;
}

OAICreateConfig_request_configData_uplinkEchoConfig OAIConfigTypeData::getUplinkEchoConfig() const {
    return m_uplink_echo_config;
}
void OAIConfigTypeData::setUplinkEchoConfig(const OAICreateConfig_request_configData_uplinkEchoConfig &uplink_echo_config) {
    m_uplink_echo_config = uplink_echo_config;
    m_uplink_echo_config_isSet = true;
}

bool OAIConfigTypeData::is_uplink_echo_config_Set() const{
    return m_uplink_echo_config_isSet;
}

bool OAIConfigTypeData::is_uplink_echo_config_Valid() const{
    return m_uplink_echo_config_isValid;
}

bool OAIConfigTypeData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_antenna_downlink_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_antenna_downlink_demod_decode_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_antenna_uplink_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataflow_endpoint_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_recording_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uplink_echo_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigTypeData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
