/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateEphemerisRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateEphemerisRequest::OAICreateEphemerisRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateEphemerisRequest::OAICreateEphemerisRequest() {
    this->initializeModel();
}

OAICreateEphemerisRequest::~OAICreateEphemerisRequest() {}

void OAICreateEphemerisRequest::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_ephemeris_isSet = false;
    m_ephemeris_isValid = false;

    m_expiration_time_isSet = false;
    m_expiration_time_isValid = false;

    m_kms_key_arn_isSet = false;
    m_kms_key_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_satellite_id_isSet = false;
    m_satellite_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateEphemerisRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateEphemerisRequest::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_ephemeris_isValid = ::OpenAPI::fromJsonValue(m_ephemeris, json[QString("ephemeris")]);
    m_ephemeris_isSet = !json[QString("ephemeris")].isNull() && m_ephemeris_isValid;

    m_expiration_time_isValid = ::OpenAPI::fromJsonValue(m_expiration_time, json[QString("expirationTime")]);
    m_expiration_time_isSet = !json[QString("expirationTime")].isNull() && m_expiration_time_isValid;

    m_kms_key_arn_isValid = ::OpenAPI::fromJsonValue(m_kms_key_arn, json[QString("kmsKeyArn")]);
    m_kms_key_arn_isSet = !json[QString("kmsKeyArn")].isNull() && m_kms_key_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_satellite_id_isValid = ::OpenAPI::fromJsonValue(m_satellite_id, json[QString("satelliteId")]);
    m_satellite_id_isSet = !json[QString("satelliteId")].isNull() && m_satellite_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateEphemerisRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateEphemerisRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_ephemeris.isSet()) {
        obj.insert(QString("ephemeris"), ::OpenAPI::toJsonValue(m_ephemeris));
    }
    if (m_expiration_time_isSet) {
        obj.insert(QString("expirationTime"), ::OpenAPI::toJsonValue(m_expiration_time));
    }
    if (m_kms_key_arn_isSet) {
        obj.insert(QString("kmsKeyArn"), ::OpenAPI::toJsonValue(m_kms_key_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_satellite_id_isSet) {
        obj.insert(QString("satelliteId"), ::OpenAPI::toJsonValue(m_satellite_id));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

bool OAICreateEphemerisRequest::getEnabled() const {
    return m_enabled;
}
void OAICreateEphemerisRequest::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAICreateEphemerisRequest::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAICreateEphemerisRequest::is_enabled_Valid() const{
    return m_enabled_isValid;
}

OAICreateEphemerisRequest_ephemeris OAICreateEphemerisRequest::getEphemeris() const {
    return m_ephemeris;
}
void OAICreateEphemerisRequest::setEphemeris(const OAICreateEphemerisRequest_ephemeris &ephemeris) {
    m_ephemeris = ephemeris;
    m_ephemeris_isSet = true;
}

bool OAICreateEphemerisRequest::is_ephemeris_Set() const{
    return m_ephemeris_isSet;
}

bool OAICreateEphemerisRequest::is_ephemeris_Valid() const{
    return m_ephemeris_isValid;
}

QDateTime OAICreateEphemerisRequest::getExpirationTime() const {
    return m_expiration_time;
}
void OAICreateEphemerisRequest::setExpirationTime(const QDateTime &expiration_time) {
    m_expiration_time = expiration_time;
    m_expiration_time_isSet = true;
}

bool OAICreateEphemerisRequest::is_expiration_time_Set() const{
    return m_expiration_time_isSet;
}

bool OAICreateEphemerisRequest::is_expiration_time_Valid() const{
    return m_expiration_time_isValid;
}

QString OAICreateEphemerisRequest::getKmsKeyArn() const {
    return m_kms_key_arn;
}
void OAICreateEphemerisRequest::setKmsKeyArn(const QString &kms_key_arn) {
    m_kms_key_arn = kms_key_arn;
    m_kms_key_arn_isSet = true;
}

bool OAICreateEphemerisRequest::is_kms_key_arn_Set() const{
    return m_kms_key_arn_isSet;
}

bool OAICreateEphemerisRequest::is_kms_key_arn_Valid() const{
    return m_kms_key_arn_isValid;
}

QString OAICreateEphemerisRequest::getName() const {
    return m_name;
}
void OAICreateEphemerisRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateEphemerisRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateEphemerisRequest::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAICreateEphemerisRequest::getPriority() const {
    return m_priority;
}
void OAICreateEphemerisRequest::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAICreateEphemerisRequest::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAICreateEphemerisRequest::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAICreateEphemerisRequest::getSatelliteId() const {
    return m_satellite_id;
}
void OAICreateEphemerisRequest::setSatelliteId(const QString &satellite_id) {
    m_satellite_id = satellite_id;
    m_satellite_id_isSet = true;
}

bool OAICreateEphemerisRequest::is_satellite_id_Set() const{
    return m_satellite_id_isSet;
}

bool OAICreateEphemerisRequest::is_satellite_id_Valid() const{
    return m_satellite_id_isValid;
}

QMap OAICreateEphemerisRequest::getTags() const {
    return m_tags;
}
void OAICreateEphemerisRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateEphemerisRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateEphemerisRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateEphemerisRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ephemeris.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_satellite_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateEphemerisRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_satellite_id_isValid && true;
}

} // namespace OpenAPI
