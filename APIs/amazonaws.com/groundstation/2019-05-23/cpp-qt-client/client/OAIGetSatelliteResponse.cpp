/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSatelliteResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSatelliteResponse::OAIGetSatelliteResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSatelliteResponse::OAIGetSatelliteResponse() {
    this->initializeModel();
}

OAIGetSatelliteResponse::~OAIGetSatelliteResponse() {}

void OAIGetSatelliteResponse::initializeModel() {

    m_current_ephemeris_isSet = false;
    m_current_ephemeris_isValid = false;

    m_ground_stations_isSet = false;
    m_ground_stations_isValid = false;

    m_norad_satellite_id_isSet = false;
    m_norad_satellite_id_isValid = false;

    m_satellite_arn_isSet = false;
    m_satellite_arn_isValid = false;

    m_satellite_id_isSet = false;
    m_satellite_id_isValid = false;
}

void OAIGetSatelliteResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSatelliteResponse::fromJsonObject(QJsonObject json) {

    m_current_ephemeris_isValid = ::OpenAPI::fromJsonValue(m_current_ephemeris, json[QString("currentEphemeris")]);
    m_current_ephemeris_isSet = !json[QString("currentEphemeris")].isNull() && m_current_ephemeris_isValid;

    m_ground_stations_isValid = ::OpenAPI::fromJsonValue(m_ground_stations, json[QString("groundStations")]);
    m_ground_stations_isSet = !json[QString("groundStations")].isNull() && m_ground_stations_isValid;

    m_norad_satellite_id_isValid = ::OpenAPI::fromJsonValue(m_norad_satellite_id, json[QString("noradSatelliteID")]);
    m_norad_satellite_id_isSet = !json[QString("noradSatelliteID")].isNull() && m_norad_satellite_id_isValid;

    m_satellite_arn_isValid = ::OpenAPI::fromJsonValue(m_satellite_arn, json[QString("satelliteArn")]);
    m_satellite_arn_isSet = !json[QString("satelliteArn")].isNull() && m_satellite_arn_isValid;

    m_satellite_id_isValid = ::OpenAPI::fromJsonValue(m_satellite_id, json[QString("satelliteId")]);
    m_satellite_id_isSet = !json[QString("satelliteId")].isNull() && m_satellite_id_isValid;
}

QString OAIGetSatelliteResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSatelliteResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_current_ephemeris.isSet()) {
        obj.insert(QString("currentEphemeris"), ::OpenAPI::toJsonValue(m_current_ephemeris));
    }
    if (m_ground_stations.isSet()) {
        obj.insert(QString("groundStations"), ::OpenAPI::toJsonValue(m_ground_stations));
    }
    if (m_norad_satellite_id_isSet) {
        obj.insert(QString("noradSatelliteID"), ::OpenAPI::toJsonValue(m_norad_satellite_id));
    }
    if (m_satellite_arn_isSet) {
        obj.insert(QString("satelliteArn"), ::OpenAPI::toJsonValue(m_satellite_arn));
    }
    if (m_satellite_id_isSet) {
        obj.insert(QString("satelliteId"), ::OpenAPI::toJsonValue(m_satellite_id));
    }
    return obj;
}

OAIGetSatelliteResponse_currentEphemeris OAIGetSatelliteResponse::getCurrentEphemeris() const {
    return m_current_ephemeris;
}
void OAIGetSatelliteResponse::setCurrentEphemeris(const OAIGetSatelliteResponse_currentEphemeris &current_ephemeris) {
    m_current_ephemeris = current_ephemeris;
    m_current_ephemeris_isSet = true;
}

bool OAIGetSatelliteResponse::is_current_ephemeris_Set() const{
    return m_current_ephemeris_isSet;
}

bool OAIGetSatelliteResponse::is_current_ephemeris_Valid() const{
    return m_current_ephemeris_isValid;
}

QList OAIGetSatelliteResponse::getGroundStations() const {
    return m_ground_stations;
}
void OAIGetSatelliteResponse::setGroundStations(const QList &ground_stations) {
    m_ground_stations = ground_stations;
    m_ground_stations_isSet = true;
}

bool OAIGetSatelliteResponse::is_ground_stations_Set() const{
    return m_ground_stations_isSet;
}

bool OAIGetSatelliteResponse::is_ground_stations_Valid() const{
    return m_ground_stations_isValid;
}

qint32 OAIGetSatelliteResponse::getNoradSatelliteId() const {
    return m_norad_satellite_id;
}
void OAIGetSatelliteResponse::setNoradSatelliteId(const qint32 &norad_satellite_id) {
    m_norad_satellite_id = norad_satellite_id;
    m_norad_satellite_id_isSet = true;
}

bool OAIGetSatelliteResponse::is_norad_satellite_id_Set() const{
    return m_norad_satellite_id_isSet;
}

bool OAIGetSatelliteResponse::is_norad_satellite_id_Valid() const{
    return m_norad_satellite_id_isValid;
}

QString OAIGetSatelliteResponse::getSatelliteArn() const {
    return m_satellite_arn;
}
void OAIGetSatelliteResponse::setSatelliteArn(const QString &satellite_arn) {
    m_satellite_arn = satellite_arn;
    m_satellite_arn_isSet = true;
}

bool OAIGetSatelliteResponse::is_satellite_arn_Set() const{
    return m_satellite_arn_isSet;
}

bool OAIGetSatelliteResponse::is_satellite_arn_Valid() const{
    return m_satellite_arn_isValid;
}

QString OAIGetSatelliteResponse::getSatelliteId() const {
    return m_satellite_id;
}
void OAIGetSatelliteResponse::setSatelliteId(const QString &satellite_id) {
    m_satellite_id = satellite_id;
    m_satellite_id_isSet = true;
}

bool OAIGetSatelliteResponse::is_satellite_id_Set() const{
    return m_satellite_id_isSet;
}

bool OAIGetSatelliteResponse::is_satellite_id_Valid() const{
    return m_satellite_id_isValid;
}

bool OAIGetSatelliteResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_ephemeris.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ground_stations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_norad_satellite_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_satellite_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_satellite_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSatelliteResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
