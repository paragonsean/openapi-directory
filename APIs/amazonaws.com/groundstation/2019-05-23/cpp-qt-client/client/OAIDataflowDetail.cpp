/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataflowDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataflowDetail::OAIDataflowDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataflowDetail::OAIDataflowDetail() {
    this->initializeModel();
}

OAIDataflowDetail::~OAIDataflowDetail() {}

void OAIDataflowDetail::initializeModel() {

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAIDataflowDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataflowDetail::fromJsonObject(QJsonObject json) {

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAIDataflowDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataflowDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_destination.isSet()) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

OAIDestination OAIDataflowDetail::getDestination() const {
    return m_destination;
}
void OAIDataflowDetail::setDestination(const OAIDestination &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIDataflowDetail::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIDataflowDetail::is_destination_Valid() const{
    return m_destination_isValid;
}

QString OAIDataflowDetail::getErrorMessage() const {
    return m_error_message;
}
void OAIDataflowDetail::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIDataflowDetail::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIDataflowDetail::is_error_message_Valid() const{
    return m_error_message_isValid;
}

OAISource OAIDataflowDetail::getSource() const {
    return m_source;
}
void OAIDataflowDetail::setSource(const OAISource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIDataflowDetail::is_source_Set() const{
    return m_source_isSet;
}

bool OAIDataflowDetail::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIDataflowDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataflowDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
