/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISatelliteListItem.h
 *
 * Item in a list of satellites.
 */

#ifndef OAISatelliteListItem_H
#define OAISatelliteListItem_H

#include <QJsonObject>

#include "OAIGetSatelliteResponse_currentEphemeris.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetSatelliteResponse_currentEphemeris;

class OAISatelliteListItem : public OAIObject {
public:
    OAISatelliteListItem();
    OAISatelliteListItem(QString json);
    ~OAISatelliteListItem() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGetSatelliteResponse_currentEphemeris getCurrentEphemeris() const;
    void setCurrentEphemeris(const OAIGetSatelliteResponse_currentEphemeris &current_ephemeris);
    bool is_current_ephemeris_Set() const;
    bool is_current_ephemeris_Valid() const;

    QList getGroundStations() const;
    void setGroundStations(const QList &ground_stations);
    bool is_ground_stations_Set() const;
    bool is_ground_stations_Valid() const;

    qint32 getNoradSatelliteId() const;
    void setNoradSatelliteId(const qint32 &norad_satellite_id);
    bool is_norad_satellite_id_Set() const;
    bool is_norad_satellite_id_Valid() const;

    QString getSatelliteArn() const;
    void setSatelliteArn(const QString &satellite_arn);
    bool is_satellite_arn_Set() const;
    bool is_satellite_arn_Valid() const;

    QString getSatelliteId() const;
    void setSatelliteId(const QString &satellite_id);
    bool is_satellite_id_Set() const;
    bool is_satellite_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGetSatelliteResponse_currentEphemeris m_current_ephemeris;
    bool m_current_ephemeris_isSet;
    bool m_current_ephemeris_isValid;

    QList m_ground_stations;
    bool m_ground_stations_isSet;
    bool m_ground_stations_isValid;

    qint32 m_norad_satellite_id;
    bool m_norad_satellite_id_isSet;
    bool m_norad_satellite_id_isValid;

    QString m_satellite_arn;
    bool m_satellite_arn_isSet;
    bool m_satellite_arn_isValid;

    QString m_satellite_id;
    bool m_satellite_id_isSet;
    bool m_satellite_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISatelliteListItem)

#endif // OAISatelliteListItem_H
