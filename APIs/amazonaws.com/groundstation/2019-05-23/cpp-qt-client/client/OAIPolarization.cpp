/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolarization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolarization::OAIPolarization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolarization::OAIPolarization() {
    this->initializeModel();
}

OAIPolarization::~OAIPolarization() {}

void OAIPolarization::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPolarization::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPolarization::fromJson(QString jsonString) {
    
    if ( jsonString.compare("LEFT_HAND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPolarization::LEFT_HAND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NONE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPolarization::NONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RIGHT_HAND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPolarization::RIGHT_HAND;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPolarization::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPolarization::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPolarization::LEFT_HAND:
            val = "LEFT_HAND";
            break;
        case eOAIPolarization::NONE:
            val = "NONE";
            break;
        case eOAIPolarization::RIGHT_HAND:
            val = "RIGHT_HAND";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPolarization::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPolarization::eOAIPolarization OAIPolarization::getValue() const {
    return m_value;
}

void OAIPolarization::setValue(const OAIPolarization::eOAIPolarization& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPolarization::isSet() const {
    
    return m_value_isSet;
}

bool OAIPolarization::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
