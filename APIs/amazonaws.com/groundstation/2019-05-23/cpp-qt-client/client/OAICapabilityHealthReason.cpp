/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICapabilityHealthReason.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICapabilityHealthReason::OAICapabilityHealthReason(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICapabilityHealthReason::OAICapabilityHealthReason() {
    this->initializeModel();
}

OAICapabilityHealthReason::~OAICapabilityHealthReason() {}

void OAICapabilityHealthReason::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAICapabilityHealthReason::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAICapabilityHealthReason::fromJson(QString jsonString) {
    
    if ( jsonString.compare("NO_REGISTERED_AGENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAICapabilityHealthReason::NO_REGISTERED_AGENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_IP_OWNERSHIP", Qt::CaseInsensitive) == 0) {
        m_value = eOAICapabilityHealthReason::INVALID_IP_OWNERSHIP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NOT_AUTHORIZED_TO_CREATE_SLR", Qt::CaseInsensitive) == 0) {
        m_value = eOAICapabilityHealthReason::NOT_AUTHORIZED_TO_CREATE_SLR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNVERIFIED_IP_OWNERSHIP", Qt::CaseInsensitive) == 0) {
        m_value = eOAICapabilityHealthReason::UNVERIFIED_IP_OWNERSHIP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INITIALIZING_DATAPLANE", Qt::CaseInsensitive) == 0) {
        m_value = eOAICapabilityHealthReason::INITIALIZING_DATAPLANE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DATAPLANE_FAILURE", Qt::CaseInsensitive) == 0) {
        m_value = eOAICapabilityHealthReason::DATAPLANE_FAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HEALTHY", Qt::CaseInsensitive) == 0) {
        m_value = eOAICapabilityHealthReason::HEALTHY;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAICapabilityHealthReason::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAICapabilityHealthReason::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAICapabilityHealthReason::NO_REGISTERED_AGENT:
            val = "NO_REGISTERED_AGENT";
            break;
        case eOAICapabilityHealthReason::INVALID_IP_OWNERSHIP:
            val = "INVALID_IP_OWNERSHIP";
            break;
        case eOAICapabilityHealthReason::NOT_AUTHORIZED_TO_CREATE_SLR:
            val = "NOT_AUTHORIZED_TO_CREATE_SLR";
            break;
        case eOAICapabilityHealthReason::UNVERIFIED_IP_OWNERSHIP:
            val = "UNVERIFIED_IP_OWNERSHIP";
            break;
        case eOAICapabilityHealthReason::INITIALIZING_DATAPLANE:
            val = "INITIALIZING_DATAPLANE";
            break;
        case eOAICapabilityHealthReason::DATAPLANE_FAILURE:
            val = "DATAPLANE_FAILURE";
            break;
        case eOAICapabilityHealthReason::HEALTHY:
            val = "HEALTHY";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAICapabilityHealthReason::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAICapabilityHealthReason::eOAICapabilityHealthReason OAICapabilityHealthReason::getValue() const {
    return m_value;
}

void OAICapabilityHealthReason::setValue(const OAICapabilityHealthReason::eOAICapabilityHealthReason& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAICapabilityHealthReason::isSet() const {
    
    return m_value_isSet;
}

bool OAICapabilityHealthReason::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
