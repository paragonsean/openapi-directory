/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateAgentStatusRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateAgentStatusRequest::OAIUpdateAgentStatusRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateAgentStatusRequest::OAIUpdateAgentStatusRequest() {
    this->initializeModel();
}

OAIUpdateAgentStatusRequest::~OAIUpdateAgentStatusRequest() {}

void OAIUpdateAgentStatusRequest::initializeModel() {

    m_aggregate_status_isSet = false;
    m_aggregate_status_isValid = false;

    m_component_statuses_isSet = false;
    m_component_statuses_isValid = false;

    m_task_id_isSet = false;
    m_task_id_isValid = false;
}

void OAIUpdateAgentStatusRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateAgentStatusRequest::fromJsonObject(QJsonObject json) {

    m_aggregate_status_isValid = ::OpenAPI::fromJsonValue(m_aggregate_status, json[QString("aggregateStatus")]);
    m_aggregate_status_isSet = !json[QString("aggregateStatus")].isNull() && m_aggregate_status_isValid;

    m_component_statuses_isValid = ::OpenAPI::fromJsonValue(m_component_statuses, json[QString("componentStatuses")]);
    m_component_statuses_isSet = !json[QString("componentStatuses")].isNull() && m_component_statuses_isValid;

    m_task_id_isValid = ::OpenAPI::fromJsonValue(m_task_id, json[QString("taskId")]);
    m_task_id_isSet = !json[QString("taskId")].isNull() && m_task_id_isValid;
}

QString OAIUpdateAgentStatusRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateAgentStatusRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregate_status.isSet()) {
        obj.insert(QString("aggregateStatus"), ::OpenAPI::toJsonValue(m_aggregate_status));
    }
    if (m_component_statuses.isSet()) {
        obj.insert(QString("componentStatuses"), ::OpenAPI::toJsonValue(m_component_statuses));
    }
    if (m_task_id_isSet) {
        obj.insert(QString("taskId"), ::OpenAPI::toJsonValue(m_task_id));
    }
    return obj;
}

OAIUpdateAgentStatusRequest_aggregateStatus OAIUpdateAgentStatusRequest::getAggregateStatus() const {
    return m_aggregate_status;
}
void OAIUpdateAgentStatusRequest::setAggregateStatus(const OAIUpdateAgentStatusRequest_aggregateStatus &aggregate_status) {
    m_aggregate_status = aggregate_status;
    m_aggregate_status_isSet = true;
}

bool OAIUpdateAgentStatusRequest::is_aggregate_status_Set() const{
    return m_aggregate_status_isSet;
}

bool OAIUpdateAgentStatusRequest::is_aggregate_status_Valid() const{
    return m_aggregate_status_isValid;
}

QList OAIUpdateAgentStatusRequest::getComponentStatuses() const {
    return m_component_statuses;
}
void OAIUpdateAgentStatusRequest::setComponentStatuses(const QList &component_statuses) {
    m_component_statuses = component_statuses;
    m_component_statuses_isSet = true;
}

bool OAIUpdateAgentStatusRequest::is_component_statuses_Set() const{
    return m_component_statuses_isSet;
}

bool OAIUpdateAgentStatusRequest::is_component_statuses_Valid() const{
    return m_component_statuses_isValid;
}

QString OAIUpdateAgentStatusRequest::getTaskId() const {
    return m_task_id;
}
void OAIUpdateAgentStatusRequest::setTaskId(const QString &task_id) {
    m_task_id = task_id;
    m_task_id_isSet = true;
}

bool OAIUpdateAgentStatusRequest::is_task_id_Set() const{
    return m_task_id_isSet;
}

bool OAIUpdateAgentStatusRequest::is_task_id_Valid() const{
    return m_task_id_isValid;
}

bool OAIUpdateAgentStatusRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregate_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_statuses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateAgentStatusRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_aggregate_status_isValid && m_component_statuses_isValid && m_task_id_isValid && true;
}

} // namespace OpenAPI
