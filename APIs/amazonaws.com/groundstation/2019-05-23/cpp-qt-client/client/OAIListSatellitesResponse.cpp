/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListSatellitesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListSatellitesResponse::OAIListSatellitesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListSatellitesResponse::OAIListSatellitesResponse() {
    this->initializeModel();
}

OAIListSatellitesResponse::~OAIListSatellitesResponse() {}

void OAIListSatellitesResponse::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_satellites_isSet = false;
    m_satellites_isValid = false;
}

void OAIListSatellitesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListSatellitesResponse::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_satellites_isValid = ::OpenAPI::fromJsonValue(m_satellites, json[QString("satellites")]);
    m_satellites_isSet = !json[QString("satellites")].isNull() && m_satellites_isValid;
}

QString OAIListSatellitesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListSatellitesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_satellites.isSet()) {
        obj.insert(QString("satellites"), ::OpenAPI::toJsonValue(m_satellites));
    }
    return obj;
}

QString OAIListSatellitesResponse::getNextToken() const {
    return m_next_token;
}
void OAIListSatellitesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListSatellitesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListSatellitesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIListSatellitesResponse::getSatellites() const {
    return m_satellites;
}
void OAIListSatellitesResponse::setSatellites(const QList &satellites) {
    m_satellites = satellites;
    m_satellites_isSet = true;
}

bool OAIListSatellitesResponse::is_satellites_Set() const{
    return m_satellites_isSet;
}

bool OAIListSatellitesResponse::is_satellites_Valid() const{
    return m_satellites_isValid;
}

bool OAIListSatellitesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_satellites.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListSatellitesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
