/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeEphemerisResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeEphemerisResponse::OAIDescribeEphemerisResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeEphemerisResponse::OAIDescribeEphemerisResponse() {
    this->initializeModel();
}

OAIDescribeEphemerisResponse::~OAIDescribeEphemerisResponse() {}

void OAIDescribeEphemerisResponse::initializeModel() {

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_ephemeris_id_isSet = false;
    m_ephemeris_id_isValid = false;

    m_invalid_reason_isSet = false;
    m_invalid_reason_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_satellite_id_isSet = false;
    m_satellite_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_supplied_data_isSet = false;
    m_supplied_data_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIDescribeEphemerisResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeEphemerisResponse::fromJsonObject(QJsonObject json) {

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_ephemeris_id_isValid = ::OpenAPI::fromJsonValue(m_ephemeris_id, json[QString("ephemerisId")]);
    m_ephemeris_id_isSet = !json[QString("ephemerisId")].isNull() && m_ephemeris_id_isValid;

    m_invalid_reason_isValid = ::OpenAPI::fromJsonValue(m_invalid_reason, json[QString("invalidReason")]);
    m_invalid_reason_isSet = !json[QString("invalidReason")].isNull() && m_invalid_reason_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_satellite_id_isValid = ::OpenAPI::fromJsonValue(m_satellite_id, json[QString("satelliteId")]);
    m_satellite_id_isSet = !json[QString("satelliteId")].isNull() && m_satellite_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_supplied_data_isValid = ::OpenAPI::fromJsonValue(m_supplied_data, json[QString("suppliedData")]);
    m_supplied_data_isSet = !json[QString("suppliedData")].isNull() && m_supplied_data_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIDescribeEphemerisResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeEphemerisResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_ephemeris_id_isSet) {
        obj.insert(QString("ephemerisId"), ::OpenAPI::toJsonValue(m_ephemeris_id));
    }
    if (m_invalid_reason.isSet()) {
        obj.insert(QString("invalidReason"), ::OpenAPI::toJsonValue(m_invalid_reason));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_satellite_id_isSet) {
        obj.insert(QString("satelliteId"), ::OpenAPI::toJsonValue(m_satellite_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_supplied_data.isSet()) {
        obj.insert(QString("suppliedData"), ::OpenAPI::toJsonValue(m_supplied_data));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QDateTime OAIDescribeEphemerisResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeEphemerisResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeEphemerisResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeEphemerisResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

bool OAIDescribeEphemerisResponse::getEnabled() const {
    return m_enabled;
}
void OAIDescribeEphemerisResponse::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIDescribeEphemerisResponse::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIDescribeEphemerisResponse::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIDescribeEphemerisResponse::getEphemerisId() const {
    return m_ephemeris_id;
}
void OAIDescribeEphemerisResponse::setEphemerisId(const QString &ephemeris_id) {
    m_ephemeris_id = ephemeris_id;
    m_ephemeris_id_isSet = true;
}

bool OAIDescribeEphemerisResponse::is_ephemeris_id_Set() const{
    return m_ephemeris_id_isSet;
}

bool OAIDescribeEphemerisResponse::is_ephemeris_id_Valid() const{
    return m_ephemeris_id_isValid;
}

OAIEphemerisInvalidReason OAIDescribeEphemerisResponse::getInvalidReason() const {
    return m_invalid_reason;
}
void OAIDescribeEphemerisResponse::setInvalidReason(const OAIEphemerisInvalidReason &invalid_reason) {
    m_invalid_reason = invalid_reason;
    m_invalid_reason_isSet = true;
}

bool OAIDescribeEphemerisResponse::is_invalid_reason_Set() const{
    return m_invalid_reason_isSet;
}

bool OAIDescribeEphemerisResponse::is_invalid_reason_Valid() const{
    return m_invalid_reason_isValid;
}

QString OAIDescribeEphemerisResponse::getName() const {
    return m_name;
}
void OAIDescribeEphemerisResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDescribeEphemerisResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDescribeEphemerisResponse::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIDescribeEphemerisResponse::getPriority() const {
    return m_priority;
}
void OAIDescribeEphemerisResponse::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIDescribeEphemerisResponse::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIDescribeEphemerisResponse::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAIDescribeEphemerisResponse::getSatelliteId() const {
    return m_satellite_id;
}
void OAIDescribeEphemerisResponse::setSatelliteId(const QString &satellite_id) {
    m_satellite_id = satellite_id;
    m_satellite_id_isSet = true;
}

bool OAIDescribeEphemerisResponse::is_satellite_id_Set() const{
    return m_satellite_id_isSet;
}

bool OAIDescribeEphemerisResponse::is_satellite_id_Valid() const{
    return m_satellite_id_isValid;
}

OAIEphemerisStatus OAIDescribeEphemerisResponse::getStatus() const {
    return m_status;
}
void OAIDescribeEphemerisResponse::setStatus(const OAIEphemerisStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeEphemerisResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeEphemerisResponse::is_status_Valid() const{
    return m_status_isValid;
}

OAIDescribeEphemerisResponse_suppliedData OAIDescribeEphemerisResponse::getSuppliedData() const {
    return m_supplied_data;
}
void OAIDescribeEphemerisResponse::setSuppliedData(const OAIDescribeEphemerisResponse_suppliedData &supplied_data) {
    m_supplied_data = supplied_data;
    m_supplied_data_isSet = true;
}

bool OAIDescribeEphemerisResponse::is_supplied_data_Set() const{
    return m_supplied_data_isSet;
}

bool OAIDescribeEphemerisResponse::is_supplied_data_Valid() const{
    return m_supplied_data_isValid;
}

QMap OAIDescribeEphemerisResponse::getTags() const {
    return m_tags;
}
void OAIDescribeEphemerisResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDescribeEphemerisResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDescribeEphemerisResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIDescribeEphemerisResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ephemeris_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_satellite_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplied_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeEphemerisResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
