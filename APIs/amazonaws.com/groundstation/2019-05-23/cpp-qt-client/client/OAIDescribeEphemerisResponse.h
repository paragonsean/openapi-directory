/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeEphemerisResponse.h
 *
 * 
 */

#ifndef OAIDescribeEphemerisResponse_H
#define OAIDescribeEphemerisResponse_H

#include <QJsonObject>

#include "OAIDescribeEphemerisResponse_suppliedData.h"
#include "OAIEphemerisInvalidReason.h"
#include "OAIEphemerisStatus.h"
#include <QDateTime>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDescribeEphemerisResponse_suppliedData;

class OAIDescribeEphemerisResponse : public OAIObject {
public:
    OAIDescribeEphemerisResponse();
    OAIDescribeEphemerisResponse(QString json);
    ~OAIDescribeEphemerisResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getCreationTime() const;
    void setCreationTime(const QDateTime &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    bool getEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    QString getEphemerisId() const;
    void setEphemerisId(const QString &ephemeris_id);
    bool is_ephemeris_id_Set() const;
    bool is_ephemeris_id_Valid() const;

    OAIEphemerisInvalidReason getInvalidReason() const;
    void setInvalidReason(const OAIEphemerisInvalidReason &invalid_reason);
    bool is_invalid_reason_Set() const;
    bool is_invalid_reason_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getPriority() const;
    void setPriority(const qint32 &priority);
    bool is_priority_Set() const;
    bool is_priority_Valid() const;

    QString getSatelliteId() const;
    void setSatelliteId(const QString &satellite_id);
    bool is_satellite_id_Set() const;
    bool is_satellite_id_Valid() const;

    OAIEphemerisStatus getStatus() const;
    void setStatus(const OAIEphemerisStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAIDescribeEphemerisResponse_suppliedData getSuppliedData() const;
    void setSuppliedData(const OAIDescribeEphemerisResponse_suppliedData &supplied_data);
    bool is_supplied_data_Set() const;
    bool is_supplied_data_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    QString m_ephemeris_id;
    bool m_ephemeris_id_isSet;
    bool m_ephemeris_id_isValid;

    OAIEphemerisInvalidReason m_invalid_reason;
    bool m_invalid_reason_isSet;
    bool m_invalid_reason_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_priority;
    bool m_priority_isSet;
    bool m_priority_isValid;

    QString m_satellite_id;
    bool m_satellite_id_isSet;
    bool m_satellite_id_isValid;

    OAIEphemerisStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAIDescribeEphemerisResponse_suppliedData m_supplied_data;
    bool m_supplied_data_isSet;
    bool m_supplied_data_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeEphemerisResponse)

#endif // OAIDescribeEphemerisResponse_H
