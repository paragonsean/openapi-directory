/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContactStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContactStatus::OAIContactStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContactStatus::OAIContactStatus() {
    this->initializeModel();
}

OAIContactStatus::~OAIContactStatus() {}

void OAIContactStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIContactStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIContactStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AVAILABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContactStatus::AVAILABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AWS_CANCELLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContactStatus::AWS_CANCELLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AWS_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContactStatus::AWS_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CANCELLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContactStatus::CANCELLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CANCELLING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContactStatus::CANCELLING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COMPLETED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContactStatus::COMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContactStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED_TO_SCHEDULE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContactStatus::FAILED_TO_SCHEDULE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PASS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContactStatus::PASS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("POSTPASS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContactStatus::POSTPASS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PREPASS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContactStatus::PREPASS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SCHEDULED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContactStatus::SCHEDULED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SCHEDULING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContactStatus::SCHEDULING;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIContactStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIContactStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIContactStatus::AVAILABLE:
            val = "AVAILABLE";
            break;
        case eOAIContactStatus::AWS_CANCELLED:
            val = "AWS_CANCELLED";
            break;
        case eOAIContactStatus::AWS_FAILED:
            val = "AWS_FAILED";
            break;
        case eOAIContactStatus::CANCELLED:
            val = "CANCELLED";
            break;
        case eOAIContactStatus::CANCELLING:
            val = "CANCELLING";
            break;
        case eOAIContactStatus::COMPLETED:
            val = "COMPLETED";
            break;
        case eOAIContactStatus::FAILED:
            val = "FAILED";
            break;
        case eOAIContactStatus::FAILED_TO_SCHEDULE:
            val = "FAILED_TO_SCHEDULE";
            break;
        case eOAIContactStatus::PASS:
            val = "PASS";
            break;
        case eOAIContactStatus::POSTPASS:
            val = "POSTPASS";
            break;
        case eOAIContactStatus::PREPASS:
            val = "PREPASS";
            break;
        case eOAIContactStatus::SCHEDULED:
            val = "SCHEDULED";
            break;
        case eOAIContactStatus::SCHEDULING:
            val = "SCHEDULING";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIContactStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIContactStatus::eOAIContactStatus OAIContactStatus::getValue() const {
    return m_value;
}

void OAIContactStatus::setValue(const OAIContactStatus::eOAIContactStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIContactStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIContactStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
