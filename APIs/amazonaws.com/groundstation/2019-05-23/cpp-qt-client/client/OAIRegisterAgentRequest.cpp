/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegisterAgentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegisterAgentRequest::OAIRegisterAgentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegisterAgentRequest::OAIRegisterAgentRequest() {
    this->initializeModel();
}

OAIRegisterAgentRequest::~OAIRegisterAgentRequest() {}

void OAIRegisterAgentRequest::initializeModel() {

    m_agent_details_isSet = false;
    m_agent_details_isValid = false;

    m_discovery_data_isSet = false;
    m_discovery_data_isValid = false;
}

void OAIRegisterAgentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegisterAgentRequest::fromJsonObject(QJsonObject json) {

    m_agent_details_isValid = ::OpenAPI::fromJsonValue(m_agent_details, json[QString("agentDetails")]);
    m_agent_details_isSet = !json[QString("agentDetails")].isNull() && m_agent_details_isValid;

    m_discovery_data_isValid = ::OpenAPI::fromJsonValue(m_discovery_data, json[QString("discoveryData")]);
    m_discovery_data_isSet = !json[QString("discoveryData")].isNull() && m_discovery_data_isValid;
}

QString OAIRegisterAgentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegisterAgentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_details.isSet()) {
        obj.insert(QString("agentDetails"), ::OpenAPI::toJsonValue(m_agent_details));
    }
    if (m_discovery_data.isSet()) {
        obj.insert(QString("discoveryData"), ::OpenAPI::toJsonValue(m_discovery_data));
    }
    return obj;
}

OAIRegisterAgentRequest_agentDetails OAIRegisterAgentRequest::getAgentDetails() const {
    return m_agent_details;
}
void OAIRegisterAgentRequest::setAgentDetails(const OAIRegisterAgentRequest_agentDetails &agent_details) {
    m_agent_details = agent_details;
    m_agent_details_isSet = true;
}

bool OAIRegisterAgentRequest::is_agent_details_Set() const{
    return m_agent_details_isSet;
}

bool OAIRegisterAgentRequest::is_agent_details_Valid() const{
    return m_agent_details_isValid;
}

OAIRegisterAgentRequest_discoveryData OAIRegisterAgentRequest::getDiscoveryData() const {
    return m_discovery_data;
}
void OAIRegisterAgentRequest::setDiscoveryData(const OAIRegisterAgentRequest_discoveryData &discovery_data) {
    m_discovery_data = discovery_data;
    m_discovery_data_isSet = true;
}

bool OAIRegisterAgentRequest::is_discovery_data_Set() const{
    return m_discovery_data_isSet;
}

bool OAIRegisterAgentRequest::is_discovery_data_Valid() const{
    return m_discovery_data_isValid;
}

bool OAIRegisterAgentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discovery_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegisterAgentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_agent_details_isValid && m_discovery_data_isValid && true;
}

} // namespace OpenAPI
