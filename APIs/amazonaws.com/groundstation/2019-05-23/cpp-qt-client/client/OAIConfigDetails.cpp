/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigDetails::OAIConfigDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigDetails::OAIConfigDetails() {
    this->initializeModel();
}

OAIConfigDetails::~OAIConfigDetails() {}

void OAIConfigDetails::initializeModel() {

    m_antenna_demod_decode_details_isSet = false;
    m_antenna_demod_decode_details_isValid = false;

    m_endpoint_details_isSet = false;
    m_endpoint_details_isValid = false;

    m_s3_recording_details_isSet = false;
    m_s3_recording_details_isValid = false;
}

void OAIConfigDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigDetails::fromJsonObject(QJsonObject json) {

    m_antenna_demod_decode_details_isValid = ::OpenAPI::fromJsonValue(m_antenna_demod_decode_details, json[QString("antennaDemodDecodeDetails")]);
    m_antenna_demod_decode_details_isSet = !json[QString("antennaDemodDecodeDetails")].isNull() && m_antenna_demod_decode_details_isValid;

    m_endpoint_details_isValid = ::OpenAPI::fromJsonValue(m_endpoint_details, json[QString("endpointDetails")]);
    m_endpoint_details_isSet = !json[QString("endpointDetails")].isNull() && m_endpoint_details_isValid;

    m_s3_recording_details_isValid = ::OpenAPI::fromJsonValue(m_s3_recording_details, json[QString("s3RecordingDetails")]);
    m_s3_recording_details_isSet = !json[QString("s3RecordingDetails")].isNull() && m_s3_recording_details_isValid;
}

QString OAIConfigDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_antenna_demod_decode_details.isSet()) {
        obj.insert(QString("antennaDemodDecodeDetails"), ::OpenAPI::toJsonValue(m_antenna_demod_decode_details));
    }
    if (m_endpoint_details.isSet()) {
        obj.insert(QString("endpointDetails"), ::OpenAPI::toJsonValue(m_endpoint_details));
    }
    if (m_s3_recording_details.isSet()) {
        obj.insert(QString("s3RecordingDetails"), ::OpenAPI::toJsonValue(m_s3_recording_details));
    }
    return obj;
}

OAIConfigDetails_antennaDemodDecodeDetails OAIConfigDetails::getAntennaDemodDecodeDetails() const {
    return m_antenna_demod_decode_details;
}
void OAIConfigDetails::setAntennaDemodDecodeDetails(const OAIConfigDetails_antennaDemodDecodeDetails &antenna_demod_decode_details) {
    m_antenna_demod_decode_details = antenna_demod_decode_details;
    m_antenna_demod_decode_details_isSet = true;
}

bool OAIConfigDetails::is_antenna_demod_decode_details_Set() const{
    return m_antenna_demod_decode_details_isSet;
}

bool OAIConfigDetails::is_antenna_demod_decode_details_Valid() const{
    return m_antenna_demod_decode_details_isValid;
}

OAIEndpointDetails OAIConfigDetails::getEndpointDetails() const {
    return m_endpoint_details;
}
void OAIConfigDetails::setEndpointDetails(const OAIEndpointDetails &endpoint_details) {
    m_endpoint_details = endpoint_details;
    m_endpoint_details_isSet = true;
}

bool OAIConfigDetails::is_endpoint_details_Set() const{
    return m_endpoint_details_isSet;
}

bool OAIConfigDetails::is_endpoint_details_Valid() const{
    return m_endpoint_details_isValid;
}

OAIConfigDetails_s3RecordingDetails OAIConfigDetails::getS3RecordingDetails() const {
    return m_s3_recording_details;
}
void OAIConfigDetails::setS3RecordingDetails(const OAIConfigDetails_s3RecordingDetails &s3_recording_details) {
    m_s3_recording_details = s3_recording_details;
    m_s3_recording_details_isSet = true;
}

bool OAIConfigDetails::is_s3_recording_details_Set() const{
    return m_s3_recording_details_isSet;
}

bool OAIConfigDetails::is_s3_recording_details_Valid() const{
    return m_s3_recording_details_isValid;
}

bool OAIConfigDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_antenna_demod_decode_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_recording_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
