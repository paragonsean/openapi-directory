/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReserveContact_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReserveContact_request::OAIReserveContact_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReserveContact_request::OAIReserveContact_request() {
    this->initializeModel();
}

OAIReserveContact_request::~OAIReserveContact_request() {}

void OAIReserveContact_request::initializeModel() {

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_ground_station_isSet = false;
    m_ground_station_isValid = false;

    m_mission_profile_arn_isSet = false;
    m_mission_profile_arn_isValid = false;

    m_satellite_arn_isSet = false;
    m_satellite_arn_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIReserveContact_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReserveContact_request::fromJsonObject(QJsonObject json) {

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_ground_station_isValid = ::OpenAPI::fromJsonValue(m_ground_station, json[QString("groundStation")]);
    m_ground_station_isSet = !json[QString("groundStation")].isNull() && m_ground_station_isValid;

    m_mission_profile_arn_isValid = ::OpenAPI::fromJsonValue(m_mission_profile_arn, json[QString("missionProfileArn")]);
    m_mission_profile_arn_isSet = !json[QString("missionProfileArn")].isNull() && m_mission_profile_arn_isValid;

    m_satellite_arn_isValid = ::OpenAPI::fromJsonValue(m_satellite_arn, json[QString("satelliteArn")]);
    m_satellite_arn_isSet = !json[QString("satelliteArn")].isNull() && m_satellite_arn_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIReserveContact_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReserveContact_request::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_ground_station_isSet) {
        obj.insert(QString("groundStation"), ::OpenAPI::toJsonValue(m_ground_station));
    }
    if (m_mission_profile_arn_isSet) {
        obj.insert(QString("missionProfileArn"), ::OpenAPI::toJsonValue(m_mission_profile_arn));
    }
    if (m_satellite_arn_isSet) {
        obj.insert(QString("satelliteArn"), ::OpenAPI::toJsonValue(m_satellite_arn));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QDateTime OAIReserveContact_request::getEndTime() const {
    return m_end_time;
}
void OAIReserveContact_request::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIReserveContact_request::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIReserveContact_request::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIReserveContact_request::getGroundStation() const {
    return m_ground_station;
}
void OAIReserveContact_request::setGroundStation(const QString &ground_station) {
    m_ground_station = ground_station;
    m_ground_station_isSet = true;
}

bool OAIReserveContact_request::is_ground_station_Set() const{
    return m_ground_station_isSet;
}

bool OAIReserveContact_request::is_ground_station_Valid() const{
    return m_ground_station_isValid;
}

QString OAIReserveContact_request::getMissionProfileArn() const {
    return m_mission_profile_arn;
}
void OAIReserveContact_request::setMissionProfileArn(const QString &mission_profile_arn) {
    m_mission_profile_arn = mission_profile_arn;
    m_mission_profile_arn_isSet = true;
}

bool OAIReserveContact_request::is_mission_profile_arn_Set() const{
    return m_mission_profile_arn_isSet;
}

bool OAIReserveContact_request::is_mission_profile_arn_Valid() const{
    return m_mission_profile_arn_isValid;
}

QString OAIReserveContact_request::getSatelliteArn() const {
    return m_satellite_arn;
}
void OAIReserveContact_request::setSatelliteArn(const QString &satellite_arn) {
    m_satellite_arn = satellite_arn;
    m_satellite_arn_isSet = true;
}

bool OAIReserveContact_request::is_satellite_arn_Set() const{
    return m_satellite_arn_isSet;
}

bool OAIReserveContact_request::is_satellite_arn_Valid() const{
    return m_satellite_arn_isValid;
}

QDateTime OAIReserveContact_request::getStartTime() const {
    return m_start_time;
}
void OAIReserveContact_request::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIReserveContact_request::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIReserveContact_request::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QMap<QString, QString> OAIReserveContact_request::getTags() const {
    return m_tags;
}
void OAIReserveContact_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIReserveContact_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIReserveContact_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIReserveContact_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ground_station_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mission_profile_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_satellite_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReserveContact_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_end_time_isValid && m_ground_station_isValid && m_mission_profile_arn_isValid && m_satellite_arn_isValid && m_start_time_isValid && true;
}

} // namespace OpenAPI
