/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFrequencyUnits.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFrequencyUnits::OAIFrequencyUnits(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFrequencyUnits::OAIFrequencyUnits() {
    this->initializeModel();
}

OAIFrequencyUnits::~OAIFrequencyUnits() {}

void OAIFrequencyUnits::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIFrequencyUnits::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIFrequencyUnits::fromJson(QString jsonString) {
    
    if ( jsonString.compare("GHz", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFrequencyUnits::GHZ;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MHz", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFrequencyUnits::MHZ;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("kHz", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFrequencyUnits::KHZ;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIFrequencyUnits::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIFrequencyUnits::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIFrequencyUnits::GHZ:
            val = "GHz";
            break;
        case eOAIFrequencyUnits::MHZ:
            val = "MHz";
            break;
        case eOAIFrequencyUnits::KHZ:
            val = "kHz";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIFrequencyUnits::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIFrequencyUnits::eOAIFrequencyUnits OAIFrequencyUnits::getValue() const {
    return m_value;
}

void OAIFrequencyUnits::setValue(const OAIFrequencyUnits::eOAIFrequencyUnits& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIFrequencyUnits::isSet() const {
    
    return m_value_isSet;
}

bool OAIFrequencyUnits::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
