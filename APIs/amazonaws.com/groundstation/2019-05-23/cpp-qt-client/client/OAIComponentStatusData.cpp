/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComponentStatusData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComponentStatusData::OAIComponentStatusData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComponentStatusData::OAIComponentStatusData() {
    this->initializeModel();
}

OAIComponentStatusData::~OAIComponentStatusData() {}

void OAIComponentStatusData::initializeModel() {

    m_bytes_received_isSet = false;
    m_bytes_received_isValid = false;

    m_bytes_sent_isSet = false;
    m_bytes_sent_isValid = false;

    m_capability_arn_isSet = false;
    m_capability_arn_isValid = false;

    m_component_type_isSet = false;
    m_component_type_isValid = false;

    m_dataflow_id_isSet = false;
    m_dataflow_id_isValid = false;

    m_packets_dropped_isSet = false;
    m_packets_dropped_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIComponentStatusData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComponentStatusData::fromJsonObject(QJsonObject json) {

    m_bytes_received_isValid = ::OpenAPI::fromJsonValue(m_bytes_received, json[QString("bytesReceived")]);
    m_bytes_received_isSet = !json[QString("bytesReceived")].isNull() && m_bytes_received_isValid;

    m_bytes_sent_isValid = ::OpenAPI::fromJsonValue(m_bytes_sent, json[QString("bytesSent")]);
    m_bytes_sent_isSet = !json[QString("bytesSent")].isNull() && m_bytes_sent_isValid;

    m_capability_arn_isValid = ::OpenAPI::fromJsonValue(m_capability_arn, json[QString("capabilityArn")]);
    m_capability_arn_isSet = !json[QString("capabilityArn")].isNull() && m_capability_arn_isValid;

    m_component_type_isValid = ::OpenAPI::fromJsonValue(m_component_type, json[QString("componentType")]);
    m_component_type_isSet = !json[QString("componentType")].isNull() && m_component_type_isValid;

    m_dataflow_id_isValid = ::OpenAPI::fromJsonValue(m_dataflow_id, json[QString("dataflowId")]);
    m_dataflow_id_isSet = !json[QString("dataflowId")].isNull() && m_dataflow_id_isValid;

    m_packets_dropped_isValid = ::OpenAPI::fromJsonValue(m_packets_dropped, json[QString("packetsDropped")]);
    m_packets_dropped_isSet = !json[QString("packetsDropped")].isNull() && m_packets_dropped_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIComponentStatusData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComponentStatusData::asJsonObject() const {
    QJsonObject obj;
    if (m_bytes_received_isSet) {
        obj.insert(QString("bytesReceived"), ::OpenAPI::toJsonValue(m_bytes_received));
    }
    if (m_bytes_sent_isSet) {
        obj.insert(QString("bytesSent"), ::OpenAPI::toJsonValue(m_bytes_sent));
    }
    if (m_capability_arn_isSet) {
        obj.insert(QString("capabilityArn"), ::OpenAPI::toJsonValue(m_capability_arn));
    }
    if (m_component_type_isSet) {
        obj.insert(QString("componentType"), ::OpenAPI::toJsonValue(m_component_type));
    }
    if (m_dataflow_id_isSet) {
        obj.insert(QString("dataflowId"), ::OpenAPI::toJsonValue(m_dataflow_id));
    }
    if (m_packets_dropped_isSet) {
        obj.insert(QString("packetsDropped"), ::OpenAPI::toJsonValue(m_packets_dropped));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

qint32 OAIComponentStatusData::getBytesReceived() const {
    return m_bytes_received;
}
void OAIComponentStatusData::setBytesReceived(const qint32 &bytes_received) {
    m_bytes_received = bytes_received;
    m_bytes_received_isSet = true;
}

bool OAIComponentStatusData::is_bytes_received_Set() const{
    return m_bytes_received_isSet;
}

bool OAIComponentStatusData::is_bytes_received_Valid() const{
    return m_bytes_received_isValid;
}

qint32 OAIComponentStatusData::getBytesSent() const {
    return m_bytes_sent;
}
void OAIComponentStatusData::setBytesSent(const qint32 &bytes_sent) {
    m_bytes_sent = bytes_sent;
    m_bytes_sent_isSet = true;
}

bool OAIComponentStatusData::is_bytes_sent_Set() const{
    return m_bytes_sent_isSet;
}

bool OAIComponentStatusData::is_bytes_sent_Valid() const{
    return m_bytes_sent_isValid;
}

QString OAIComponentStatusData::getCapabilityArn() const {
    return m_capability_arn;
}
void OAIComponentStatusData::setCapabilityArn(const QString &capability_arn) {
    m_capability_arn = capability_arn;
    m_capability_arn_isSet = true;
}

bool OAIComponentStatusData::is_capability_arn_Set() const{
    return m_capability_arn_isSet;
}

bool OAIComponentStatusData::is_capability_arn_Valid() const{
    return m_capability_arn_isValid;
}

QString OAIComponentStatusData::getComponentType() const {
    return m_component_type;
}
void OAIComponentStatusData::setComponentType(const QString &component_type) {
    m_component_type = component_type;
    m_component_type_isSet = true;
}

bool OAIComponentStatusData::is_component_type_Set() const{
    return m_component_type_isSet;
}

bool OAIComponentStatusData::is_component_type_Valid() const{
    return m_component_type_isValid;
}

QString OAIComponentStatusData::getDataflowId() const {
    return m_dataflow_id;
}
void OAIComponentStatusData::setDataflowId(const QString &dataflow_id) {
    m_dataflow_id = dataflow_id;
    m_dataflow_id_isSet = true;
}

bool OAIComponentStatusData::is_dataflow_id_Set() const{
    return m_dataflow_id_isSet;
}

bool OAIComponentStatusData::is_dataflow_id_Valid() const{
    return m_dataflow_id_isValid;
}

qint32 OAIComponentStatusData::getPacketsDropped() const {
    return m_packets_dropped;
}
void OAIComponentStatusData::setPacketsDropped(const qint32 &packets_dropped) {
    m_packets_dropped = packets_dropped;
    m_packets_dropped_isSet = true;
}

bool OAIComponentStatusData::is_packets_dropped_Set() const{
    return m_packets_dropped_isSet;
}

bool OAIComponentStatusData::is_packets_dropped_Valid() const{
    return m_packets_dropped_isValid;
}

OAIAgentStatus OAIComponentStatusData::getStatus() const {
    return m_status;
}
void OAIComponentStatusData::setStatus(const OAIAgentStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIComponentStatusData::is_status_Set() const{
    return m_status_isSet;
}

bool OAIComponentStatusData::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIComponentStatusData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bytes_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bytes_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capability_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataflow_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_packets_dropped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComponentStatusData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_capability_arn_isValid && m_component_type_isValid && m_dataflow_id_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
