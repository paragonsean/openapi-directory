/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpectrumConfig_bandwidth.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpectrumConfig_bandwidth::OAISpectrumConfig_bandwidth(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpectrumConfig_bandwidth::OAISpectrumConfig_bandwidth() {
    this->initializeModel();
}

OAISpectrumConfig_bandwidth::~OAISpectrumConfig_bandwidth() {}

void OAISpectrumConfig_bandwidth::initializeModel() {

    m_units_isSet = false;
    m_units_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAISpectrumConfig_bandwidth::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpectrumConfig_bandwidth::fromJsonObject(QJsonObject json) {

    m_units_isValid = ::OpenAPI::fromJsonValue(m_units, json[QString("units")]);
    m_units_isSet = !json[QString("units")].isNull() && m_units_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAISpectrumConfig_bandwidth::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpectrumConfig_bandwidth::asJsonObject() const {
    QJsonObject obj;
    if (m_units.isSet()) {
        obj.insert(QString("units"), ::OpenAPI::toJsonValue(m_units));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

OAIBandwidthUnits OAISpectrumConfig_bandwidth::getUnits() const {
    return m_units;
}
void OAISpectrumConfig_bandwidth::setUnits(const OAIBandwidthUnits &units) {
    m_units = units;
    m_units_isSet = true;
}

bool OAISpectrumConfig_bandwidth::is_units_Set() const{
    return m_units_isSet;
}

bool OAISpectrumConfig_bandwidth::is_units_Valid() const{
    return m_units_isValid;
}

double OAISpectrumConfig_bandwidth::getValue() const {
    return m_value;
}
void OAISpectrumConfig_bandwidth::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAISpectrumConfig_bandwidth::is_value_Set() const{
    return m_value_isSet;
}

bool OAISpectrumConfig_bandwidth::is_value_Valid() const{
    return m_value_isValid;
}

bool OAISpectrumConfig_bandwidth::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_units.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpectrumConfig_bandwidth::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_units_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
