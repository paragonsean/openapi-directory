/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDataflowEndpointGroup_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDataflowEndpointGroup_request::OAICreateDataflowEndpointGroup_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDataflowEndpointGroup_request::OAICreateDataflowEndpointGroup_request() {
    this->initializeModel();
}

OAICreateDataflowEndpointGroup_request::~OAICreateDataflowEndpointGroup_request() {}

void OAICreateDataflowEndpointGroup_request::initializeModel() {

    m_contact_post_pass_duration_seconds_isSet = false;
    m_contact_post_pass_duration_seconds_isValid = false;

    m_contact_pre_pass_duration_seconds_isSet = false;
    m_contact_pre_pass_duration_seconds_isValid = false;

    m_endpoint_details_isSet = false;
    m_endpoint_details_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateDataflowEndpointGroup_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDataflowEndpointGroup_request::fromJsonObject(QJsonObject json) {

    m_contact_post_pass_duration_seconds_isValid = ::OpenAPI::fromJsonValue(m_contact_post_pass_duration_seconds, json[QString("contactPostPassDurationSeconds")]);
    m_contact_post_pass_duration_seconds_isSet = !json[QString("contactPostPassDurationSeconds")].isNull() && m_contact_post_pass_duration_seconds_isValid;

    m_contact_pre_pass_duration_seconds_isValid = ::OpenAPI::fromJsonValue(m_contact_pre_pass_duration_seconds, json[QString("contactPrePassDurationSeconds")]);
    m_contact_pre_pass_duration_seconds_isSet = !json[QString("contactPrePassDurationSeconds")].isNull() && m_contact_pre_pass_duration_seconds_isValid;

    m_endpoint_details_isValid = ::OpenAPI::fromJsonValue(m_endpoint_details, json[QString("endpointDetails")]);
    m_endpoint_details_isSet = !json[QString("endpointDetails")].isNull() && m_endpoint_details_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateDataflowEndpointGroup_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDataflowEndpointGroup_request::asJsonObject() const {
    QJsonObject obj;
    if (m_contact_post_pass_duration_seconds_isSet) {
        obj.insert(QString("contactPostPassDurationSeconds"), ::OpenAPI::toJsonValue(m_contact_post_pass_duration_seconds));
    }
    if (m_contact_pre_pass_duration_seconds_isSet) {
        obj.insert(QString("contactPrePassDurationSeconds"), ::OpenAPI::toJsonValue(m_contact_pre_pass_duration_seconds));
    }
    if (m_endpoint_details.size() > 0) {
        obj.insert(QString("endpointDetails"), ::OpenAPI::toJsonValue(m_endpoint_details));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

qint32 OAICreateDataflowEndpointGroup_request::getContactPostPassDurationSeconds() const {
    return m_contact_post_pass_duration_seconds;
}
void OAICreateDataflowEndpointGroup_request::setContactPostPassDurationSeconds(const qint32 &contact_post_pass_duration_seconds) {
    m_contact_post_pass_duration_seconds = contact_post_pass_duration_seconds;
    m_contact_post_pass_duration_seconds_isSet = true;
}

bool OAICreateDataflowEndpointGroup_request::is_contact_post_pass_duration_seconds_Set() const{
    return m_contact_post_pass_duration_seconds_isSet;
}

bool OAICreateDataflowEndpointGroup_request::is_contact_post_pass_duration_seconds_Valid() const{
    return m_contact_post_pass_duration_seconds_isValid;
}

qint32 OAICreateDataflowEndpointGroup_request::getContactPrePassDurationSeconds() const {
    return m_contact_pre_pass_duration_seconds;
}
void OAICreateDataflowEndpointGroup_request::setContactPrePassDurationSeconds(const qint32 &contact_pre_pass_duration_seconds) {
    m_contact_pre_pass_duration_seconds = contact_pre_pass_duration_seconds;
    m_contact_pre_pass_duration_seconds_isSet = true;
}

bool OAICreateDataflowEndpointGroup_request::is_contact_pre_pass_duration_seconds_Set() const{
    return m_contact_pre_pass_duration_seconds_isSet;
}

bool OAICreateDataflowEndpointGroup_request::is_contact_pre_pass_duration_seconds_Valid() const{
    return m_contact_pre_pass_duration_seconds_isValid;
}

QList<OAIEndpointDetails> OAICreateDataflowEndpointGroup_request::getEndpointDetails() const {
    return m_endpoint_details;
}
void OAICreateDataflowEndpointGroup_request::setEndpointDetails(const QList<OAIEndpointDetails> &endpoint_details) {
    m_endpoint_details = endpoint_details;
    m_endpoint_details_isSet = true;
}

bool OAICreateDataflowEndpointGroup_request::is_endpoint_details_Set() const{
    return m_endpoint_details_isSet;
}

bool OAICreateDataflowEndpointGroup_request::is_endpoint_details_Valid() const{
    return m_endpoint_details_isValid;
}

QMap<QString, QString> OAICreateDataflowEndpointGroup_request::getTags() const {
    return m_tags;
}
void OAICreateDataflowEndpointGroup_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateDataflowEndpointGroup_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateDataflowEndpointGroup_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateDataflowEndpointGroup_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact_post_pass_duration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_pre_pass_duration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDataflowEndpointGroup_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_endpoint_details_isValid && true;
}

} // namespace OpenAPI
