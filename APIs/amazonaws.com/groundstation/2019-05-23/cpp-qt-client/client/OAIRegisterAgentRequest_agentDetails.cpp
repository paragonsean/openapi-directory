/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegisterAgentRequest_agentDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegisterAgentRequest_agentDetails::OAIRegisterAgentRequest_agentDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegisterAgentRequest_agentDetails::OAIRegisterAgentRequest_agentDetails() {
    this->initializeModel();
}

OAIRegisterAgentRequest_agentDetails::~OAIRegisterAgentRequest_agentDetails() {}

void OAIRegisterAgentRequest_agentDetails::initializeModel() {

    m_agent_cpu_cores_isSet = false;
    m_agent_cpu_cores_isValid = false;

    m_agent_version_isSet = false;
    m_agent_version_isValid = false;

    m_component_versions_isSet = false;
    m_component_versions_isValid = false;

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_reserved_cpu_cores_isSet = false;
    m_reserved_cpu_cores_isValid = false;
}

void OAIRegisterAgentRequest_agentDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegisterAgentRequest_agentDetails::fromJsonObject(QJsonObject json) {

    m_agent_cpu_cores_isValid = ::OpenAPI::fromJsonValue(m_agent_cpu_cores, json[QString("agentCpuCores")]);
    m_agent_cpu_cores_isSet = !json[QString("agentCpuCores")].isNull() && m_agent_cpu_cores_isValid;

    m_agent_version_isValid = ::OpenAPI::fromJsonValue(m_agent_version, json[QString("agentVersion")]);
    m_agent_version_isSet = !json[QString("agentVersion")].isNull() && m_agent_version_isValid;

    m_component_versions_isValid = ::OpenAPI::fromJsonValue(m_component_versions, json[QString("componentVersions")]);
    m_component_versions_isSet = !json[QString("componentVersions")].isNull() && m_component_versions_isValid;

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("instanceId")]);
    m_instance_id_isSet = !json[QString("instanceId")].isNull() && m_instance_id_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;

    m_reserved_cpu_cores_isValid = ::OpenAPI::fromJsonValue(m_reserved_cpu_cores, json[QString("reservedCpuCores")]);
    m_reserved_cpu_cores_isSet = !json[QString("reservedCpuCores")].isNull() && m_reserved_cpu_cores_isValid;
}

QString OAIRegisterAgentRequest_agentDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegisterAgentRequest_agentDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_cpu_cores.isSet()) {
        obj.insert(QString("agentCpuCores"), ::OpenAPI::toJsonValue(m_agent_cpu_cores));
    }
    if (m_agent_version_isSet) {
        obj.insert(QString("agentVersion"), ::OpenAPI::toJsonValue(m_agent_version));
    }
    if (m_component_versions.isSet()) {
        obj.insert(QString("componentVersions"), ::OpenAPI::toJsonValue(m_component_versions));
    }
    if (m_instance_id_isSet) {
        obj.insert(QString("instanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_reserved_cpu_cores.isSet()) {
        obj.insert(QString("reservedCpuCores"), ::OpenAPI::toJsonValue(m_reserved_cpu_cores));
    }
    return obj;
}

QList OAIRegisterAgentRequest_agentDetails::getAgentCpuCores() const {
    return m_agent_cpu_cores;
}
void OAIRegisterAgentRequest_agentDetails::setAgentCpuCores(const QList &agent_cpu_cores) {
    m_agent_cpu_cores = agent_cpu_cores;
    m_agent_cpu_cores_isSet = true;
}

bool OAIRegisterAgentRequest_agentDetails::is_agent_cpu_cores_Set() const{
    return m_agent_cpu_cores_isSet;
}

bool OAIRegisterAgentRequest_agentDetails::is_agent_cpu_cores_Valid() const{
    return m_agent_cpu_cores_isValid;
}

QString OAIRegisterAgentRequest_agentDetails::getAgentVersion() const {
    return m_agent_version;
}
void OAIRegisterAgentRequest_agentDetails::setAgentVersion(const QString &agent_version) {
    m_agent_version = agent_version;
    m_agent_version_isSet = true;
}

bool OAIRegisterAgentRequest_agentDetails::is_agent_version_Set() const{
    return m_agent_version_isSet;
}

bool OAIRegisterAgentRequest_agentDetails::is_agent_version_Valid() const{
    return m_agent_version_isValid;
}

QList OAIRegisterAgentRequest_agentDetails::getComponentVersions() const {
    return m_component_versions;
}
void OAIRegisterAgentRequest_agentDetails::setComponentVersions(const QList &component_versions) {
    m_component_versions = component_versions;
    m_component_versions_isSet = true;
}

bool OAIRegisterAgentRequest_agentDetails::is_component_versions_Set() const{
    return m_component_versions_isSet;
}

bool OAIRegisterAgentRequest_agentDetails::is_component_versions_Valid() const{
    return m_component_versions_isValid;
}

QString OAIRegisterAgentRequest_agentDetails::getInstanceId() const {
    return m_instance_id;
}
void OAIRegisterAgentRequest_agentDetails::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIRegisterAgentRequest_agentDetails::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIRegisterAgentRequest_agentDetails::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QString OAIRegisterAgentRequest_agentDetails::getInstanceType() const {
    return m_instance_type;
}
void OAIRegisterAgentRequest_agentDetails::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIRegisterAgentRequest_agentDetails::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIRegisterAgentRequest_agentDetails::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QList OAIRegisterAgentRequest_agentDetails::getReservedCpuCores() const {
    return m_reserved_cpu_cores;
}
void OAIRegisterAgentRequest_agentDetails::setReservedCpuCores(const QList &reserved_cpu_cores) {
    m_reserved_cpu_cores = reserved_cpu_cores;
    m_reserved_cpu_cores_isSet = true;
}

bool OAIRegisterAgentRequest_agentDetails::is_reserved_cpu_cores_Set() const{
    return m_reserved_cpu_cores_isSet;
}

bool OAIRegisterAgentRequest_agentDetails::is_reserved_cpu_cores_Valid() const{
    return m_reserved_cpu_cores_isValid;
}

bool OAIRegisterAgentRequest_agentDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_cpu_cores.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_versions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_cpu_cores.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegisterAgentRequest_agentDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_agent_version_isValid && m_component_versions_isValid && m_instance_id_isValid && m_instance_type_isValid && true;
}

} // namespace OpenAPI
