/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListContactsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListContactsRequest::OAIListContactsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListContactsRequest::OAIListContactsRequest() {
    this->initializeModel();
}

OAIListContactsRequest::~OAIListContactsRequest() {}

void OAIListContactsRequest::initializeModel() {

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_ground_station_isSet = false;
    m_ground_station_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_mission_profile_arn_isSet = false;
    m_mission_profile_arn_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_satellite_arn_isSet = false;
    m_satellite_arn_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_list_isSet = false;
    m_status_list_isValid = false;
}

void OAIListContactsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListContactsRequest::fromJsonObject(QJsonObject json) {

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_ground_station_isValid = ::OpenAPI::fromJsonValue(m_ground_station, json[QString("groundStation")]);
    m_ground_station_isSet = !json[QString("groundStation")].isNull() && m_ground_station_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;

    m_mission_profile_arn_isValid = ::OpenAPI::fromJsonValue(m_mission_profile_arn, json[QString("missionProfileArn")]);
    m_mission_profile_arn_isSet = !json[QString("missionProfileArn")].isNull() && m_mission_profile_arn_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_satellite_arn_isValid = ::OpenAPI::fromJsonValue(m_satellite_arn, json[QString("satelliteArn")]);
    m_satellite_arn_isSet = !json[QString("satelliteArn")].isNull() && m_satellite_arn_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_list_isValid = ::OpenAPI::fromJsonValue(m_status_list, json[QString("statusList")]);
    m_status_list_isSet = !json[QString("statusList")].isNull() && m_status_list_isValid;
}

QString OAIListContactsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListContactsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_ground_station_isSet) {
        obj.insert(QString("groundStation"), ::OpenAPI::toJsonValue(m_ground_station));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_mission_profile_arn_isSet) {
        obj.insert(QString("missionProfileArn"), ::OpenAPI::toJsonValue(m_mission_profile_arn));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_satellite_arn_isSet) {
        obj.insert(QString("satelliteArn"), ::OpenAPI::toJsonValue(m_satellite_arn));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status_list.isSet()) {
        obj.insert(QString("statusList"), ::OpenAPI::toJsonValue(m_status_list));
    }
    return obj;
}

QDateTime OAIListContactsRequest::getEndTime() const {
    return m_end_time;
}
void OAIListContactsRequest::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIListContactsRequest::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIListContactsRequest::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIListContactsRequest::getGroundStation() const {
    return m_ground_station;
}
void OAIListContactsRequest::setGroundStation(const QString &ground_station) {
    m_ground_station = ground_station;
    m_ground_station_isSet = true;
}

bool OAIListContactsRequest::is_ground_station_Set() const{
    return m_ground_station_isSet;
}

bool OAIListContactsRequest::is_ground_station_Valid() const{
    return m_ground_station_isValid;
}

qint32 OAIListContactsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListContactsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListContactsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListContactsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListContactsRequest::getMissionProfileArn() const {
    return m_mission_profile_arn;
}
void OAIListContactsRequest::setMissionProfileArn(const QString &mission_profile_arn) {
    m_mission_profile_arn = mission_profile_arn;
    m_mission_profile_arn_isSet = true;
}

bool OAIListContactsRequest::is_mission_profile_arn_Set() const{
    return m_mission_profile_arn_isSet;
}

bool OAIListContactsRequest::is_mission_profile_arn_Valid() const{
    return m_mission_profile_arn_isValid;
}

QString OAIListContactsRequest::getNextToken() const {
    return m_next_token;
}
void OAIListContactsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListContactsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListContactsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QString OAIListContactsRequest::getSatelliteArn() const {
    return m_satellite_arn;
}
void OAIListContactsRequest::setSatelliteArn(const QString &satellite_arn) {
    m_satellite_arn = satellite_arn;
    m_satellite_arn_isSet = true;
}

bool OAIListContactsRequest::is_satellite_arn_Set() const{
    return m_satellite_arn_isSet;
}

bool OAIListContactsRequest::is_satellite_arn_Valid() const{
    return m_satellite_arn_isValid;
}

QDateTime OAIListContactsRequest::getStartTime() const {
    return m_start_time;
}
void OAIListContactsRequest::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIListContactsRequest::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIListContactsRequest::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QList OAIListContactsRequest::getStatusList() const {
    return m_status_list;
}
void OAIListContactsRequest::setStatusList(const QList &status_list) {
    m_status_list = status_list;
    m_status_list_isSet = true;
}

bool OAIListContactsRequest::is_status_list_Set() const{
    return m_status_list_isSet;
}

bool OAIListContactsRequest::is_status_list_Valid() const{
    return m_status_list_isValid;
}

bool OAIListContactsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ground_station_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mission_profile_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_satellite_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_list.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListContactsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_end_time_isValid && m_start_time_isValid && m_status_list_isValid && true;
}

} // namespace OpenAPI
