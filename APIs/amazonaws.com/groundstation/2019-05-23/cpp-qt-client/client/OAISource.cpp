/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISource::OAISource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISource::OAISource() {
    this->initializeModel();
}

OAISource::~OAISource() {}

void OAISource::initializeModel() {

    m_config_details_isSet = false;
    m_config_details_isValid = false;

    m_config_id_isSet = false;
    m_config_id_isValid = false;

    m_config_type_isSet = false;
    m_config_type_isValid = false;

    m_dataflow_source_region_isSet = false;
    m_dataflow_source_region_isValid = false;
}

void OAISource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISource::fromJsonObject(QJsonObject json) {

    m_config_details_isValid = ::OpenAPI::fromJsonValue(m_config_details, json[QString("configDetails")]);
    m_config_details_isSet = !json[QString("configDetails")].isNull() && m_config_details_isValid;

    m_config_id_isValid = ::OpenAPI::fromJsonValue(m_config_id, json[QString("configId")]);
    m_config_id_isSet = !json[QString("configId")].isNull() && m_config_id_isValid;

    m_config_type_isValid = ::OpenAPI::fromJsonValue(m_config_type, json[QString("configType")]);
    m_config_type_isSet = !json[QString("configType")].isNull() && m_config_type_isValid;

    m_dataflow_source_region_isValid = ::OpenAPI::fromJsonValue(m_dataflow_source_region, json[QString("dataflowSourceRegion")]);
    m_dataflow_source_region_isSet = !json[QString("dataflowSourceRegion")].isNull() && m_dataflow_source_region_isValid;
}

QString OAISource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISource::asJsonObject() const {
    QJsonObject obj;
    if (m_config_details.isSet()) {
        obj.insert(QString("configDetails"), ::OpenAPI::toJsonValue(m_config_details));
    }
    if (m_config_id_isSet) {
        obj.insert(QString("configId"), ::OpenAPI::toJsonValue(m_config_id));
    }
    if (m_config_type.isSet()) {
        obj.insert(QString("configType"), ::OpenAPI::toJsonValue(m_config_type));
    }
    if (m_dataflow_source_region_isSet) {
        obj.insert(QString("dataflowSourceRegion"), ::OpenAPI::toJsonValue(m_dataflow_source_region));
    }
    return obj;
}

OAISource_configDetails OAISource::getConfigDetails() const {
    return m_config_details;
}
void OAISource::setConfigDetails(const OAISource_configDetails &config_details) {
    m_config_details = config_details;
    m_config_details_isSet = true;
}

bool OAISource::is_config_details_Set() const{
    return m_config_details_isSet;
}

bool OAISource::is_config_details_Valid() const{
    return m_config_details_isValid;
}

QString OAISource::getConfigId() const {
    return m_config_id;
}
void OAISource::setConfigId(const QString &config_id) {
    m_config_id = config_id;
    m_config_id_isSet = true;
}

bool OAISource::is_config_id_Set() const{
    return m_config_id_isSet;
}

bool OAISource::is_config_id_Valid() const{
    return m_config_id_isValid;
}

OAIConfigCapabilityType OAISource::getConfigType() const {
    return m_config_type;
}
void OAISource::setConfigType(const OAIConfigCapabilityType &config_type) {
    m_config_type = config_type;
    m_config_type_isSet = true;
}

bool OAISource::is_config_type_Set() const{
    return m_config_type_isSet;
}

bool OAISource::is_config_type_Valid() const{
    return m_config_type_isValid;
}

QString OAISource::getDataflowSourceRegion() const {
    return m_dataflow_source_region;
}
void OAISource::setDataflowSourceRegion(const QString &dataflow_source_region) {
    m_dataflow_source_region = dataflow_source_region;
    m_dataflow_source_region_isSet = true;
}

bool OAISource::is_dataflow_source_region_Set() const{
    return m_dataflow_source_region_isSet;
}

bool OAISource::is_dataflow_source_region_Valid() const{
    return m_dataflow_source_region_isValid;
}

bool OAISource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataflow_source_region_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
