/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntegerRange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntegerRange::OAIIntegerRange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntegerRange::OAIIntegerRange() {
    this->initializeModel();
}

OAIIntegerRange::~OAIIntegerRange() {}

void OAIIntegerRange::initializeModel() {

    m_maximum_isSet = false;
    m_maximum_isValid = false;

    m_minimum_isSet = false;
    m_minimum_isValid = false;
}

void OAIIntegerRange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntegerRange::fromJsonObject(QJsonObject json) {

    m_maximum_isValid = ::OpenAPI::fromJsonValue(m_maximum, json[QString("maximum")]);
    m_maximum_isSet = !json[QString("maximum")].isNull() && m_maximum_isValid;

    m_minimum_isValid = ::OpenAPI::fromJsonValue(m_minimum, json[QString("minimum")]);
    m_minimum_isSet = !json[QString("minimum")].isNull() && m_minimum_isValid;
}

QString OAIIntegerRange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntegerRange::asJsonObject() const {
    QJsonObject obj;
    if (m_maximum_isSet) {
        obj.insert(QString("maximum"), ::OpenAPI::toJsonValue(m_maximum));
    }
    if (m_minimum_isSet) {
        obj.insert(QString("minimum"), ::OpenAPI::toJsonValue(m_minimum));
    }
    return obj;
}

qint32 OAIIntegerRange::getMaximum() const {
    return m_maximum;
}
void OAIIntegerRange::setMaximum(const qint32 &maximum) {
    m_maximum = maximum;
    m_maximum_isSet = true;
}

bool OAIIntegerRange::is_maximum_Set() const{
    return m_maximum_isSet;
}

bool OAIIntegerRange::is_maximum_Valid() const{
    return m_maximum_isValid;
}

qint32 OAIIntegerRange::getMinimum() const {
    return m_minimum;
}
void OAIIntegerRange::setMinimum(const qint32 &minimum) {
    m_minimum = minimum;
    m_minimum_isSet = true;
}

bool OAIIntegerRange::is_minimum_Set() const{
    return m_minimum_isSet;
}

bool OAIIntegerRange::is_minimum_Valid() const{
    return m_minimum_isValid;
}

bool OAIIntegerRange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_maximum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntegerRange::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_maximum_isValid && m_minimum_isValid && true;
}

} // namespace OpenAPI
