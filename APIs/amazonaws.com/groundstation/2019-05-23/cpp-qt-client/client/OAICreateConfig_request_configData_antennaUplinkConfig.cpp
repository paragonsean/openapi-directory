/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateConfig_request_configData_antennaUplinkConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateConfig_request_configData_antennaUplinkConfig::OAICreateConfig_request_configData_antennaUplinkConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateConfig_request_configData_antennaUplinkConfig::OAICreateConfig_request_configData_antennaUplinkConfig() {
    this->initializeModel();
}

OAICreateConfig_request_configData_antennaUplinkConfig::~OAICreateConfig_request_configData_antennaUplinkConfig() {}

void OAICreateConfig_request_configData_antennaUplinkConfig::initializeModel() {

    m_spectrum_config_isSet = false;
    m_spectrum_config_isValid = false;

    m_target_eirp_isSet = false;
    m_target_eirp_isValid = false;

    m_transmit_disabled_isSet = false;
    m_transmit_disabled_isValid = false;
}

void OAICreateConfig_request_configData_antennaUplinkConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateConfig_request_configData_antennaUplinkConfig::fromJsonObject(QJsonObject json) {

    m_spectrum_config_isValid = ::OpenAPI::fromJsonValue(m_spectrum_config, json[QString("spectrumConfig")]);
    m_spectrum_config_isSet = !json[QString("spectrumConfig")].isNull() && m_spectrum_config_isValid;

    m_target_eirp_isValid = ::OpenAPI::fromJsonValue(m_target_eirp, json[QString("targetEirp")]);
    m_target_eirp_isSet = !json[QString("targetEirp")].isNull() && m_target_eirp_isValid;

    m_transmit_disabled_isValid = ::OpenAPI::fromJsonValue(m_transmit_disabled, json[QString("transmitDisabled")]);
    m_transmit_disabled_isSet = !json[QString("transmitDisabled")].isNull() && m_transmit_disabled_isValid;
}

QString OAICreateConfig_request_configData_antennaUplinkConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateConfig_request_configData_antennaUplinkConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_spectrum_config.isSet()) {
        obj.insert(QString("spectrumConfig"), ::OpenAPI::toJsonValue(m_spectrum_config));
    }
    if (m_target_eirp.isSet()) {
        obj.insert(QString("targetEirp"), ::OpenAPI::toJsonValue(m_target_eirp));
    }
    if (m_transmit_disabled_isSet) {
        obj.insert(QString("transmitDisabled"), ::OpenAPI::toJsonValue(m_transmit_disabled));
    }
    return obj;
}

OAIAntennaUplinkConfig_spectrumConfig OAICreateConfig_request_configData_antennaUplinkConfig::getSpectrumConfig() const {
    return m_spectrum_config;
}
void OAICreateConfig_request_configData_antennaUplinkConfig::setSpectrumConfig(const OAIAntennaUplinkConfig_spectrumConfig &spectrum_config) {
    m_spectrum_config = spectrum_config;
    m_spectrum_config_isSet = true;
}

bool OAICreateConfig_request_configData_antennaUplinkConfig::is_spectrum_config_Set() const{
    return m_spectrum_config_isSet;
}

bool OAICreateConfig_request_configData_antennaUplinkConfig::is_spectrum_config_Valid() const{
    return m_spectrum_config_isValid;
}

OAIAntennaUplinkConfig_targetEirp OAICreateConfig_request_configData_antennaUplinkConfig::getTargetEirp() const {
    return m_target_eirp;
}
void OAICreateConfig_request_configData_antennaUplinkConfig::setTargetEirp(const OAIAntennaUplinkConfig_targetEirp &target_eirp) {
    m_target_eirp = target_eirp;
    m_target_eirp_isSet = true;
}

bool OAICreateConfig_request_configData_antennaUplinkConfig::is_target_eirp_Set() const{
    return m_target_eirp_isSet;
}

bool OAICreateConfig_request_configData_antennaUplinkConfig::is_target_eirp_Valid() const{
    return m_target_eirp_isValid;
}

bool OAICreateConfig_request_configData_antennaUplinkConfig::getTransmitDisabled() const {
    return m_transmit_disabled;
}
void OAICreateConfig_request_configData_antennaUplinkConfig::setTransmitDisabled(const bool &transmit_disabled) {
    m_transmit_disabled = transmit_disabled;
    m_transmit_disabled_isSet = true;
}

bool OAICreateConfig_request_configData_antennaUplinkConfig::is_transmit_disabled_Set() const{
    return m_transmit_disabled_isSet;
}

bool OAICreateConfig_request_configData_antennaUplinkConfig::is_transmit_disabled_Valid() const{
    return m_transmit_disabled_isValid;
}

bool OAICreateConfig_request_configData_antennaUplinkConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_spectrum_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_eirp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transmit_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateConfig_request_configData_antennaUplinkConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_spectrum_config_isValid && m_target_eirp_isValid && true;
}

} // namespace OpenAPI
