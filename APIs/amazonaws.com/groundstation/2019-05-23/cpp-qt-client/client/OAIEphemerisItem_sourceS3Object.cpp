/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEphemerisItem_sourceS3Object.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEphemerisItem_sourceS3Object::OAIEphemerisItem_sourceS3Object(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEphemerisItem_sourceS3Object::OAIEphemerisItem_sourceS3Object() {
    this->initializeModel();
}

OAIEphemerisItem_sourceS3Object::~OAIEphemerisItem_sourceS3Object() {}

void OAIEphemerisItem_sourceS3Object::initializeModel() {

    m_bucket_isSet = false;
    m_bucket_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIEphemerisItem_sourceS3Object::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEphemerisItem_sourceS3Object::fromJsonObject(QJsonObject json) {

    m_bucket_isValid = ::OpenAPI::fromJsonValue(m_bucket, json[QString("bucket")]);
    m_bucket_isSet = !json[QString("bucket")].isNull() && m_bucket_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIEphemerisItem_sourceS3Object::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEphemerisItem_sourceS3Object::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_isSet) {
        obj.insert(QString("bucket"), ::OpenAPI::toJsonValue(m_bucket));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIEphemerisItem_sourceS3Object::getBucket() const {
    return m_bucket;
}
void OAIEphemerisItem_sourceS3Object::setBucket(const QString &bucket) {
    m_bucket = bucket;
    m_bucket_isSet = true;
}

bool OAIEphemerisItem_sourceS3Object::is_bucket_Set() const{
    return m_bucket_isSet;
}

bool OAIEphemerisItem_sourceS3Object::is_bucket_Valid() const{
    return m_bucket_isValid;
}

QString OAIEphemerisItem_sourceS3Object::getKey() const {
    return m_key;
}
void OAIEphemerisItem_sourceS3Object::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIEphemerisItem_sourceS3Object::is_key_Set() const{
    return m_key_isSet;
}

bool OAIEphemerisItem_sourceS3Object::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIEphemerisItem_sourceS3Object::getVersion() const {
    return m_version;
}
void OAIEphemerisItem_sourceS3Object::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIEphemerisItem_sourceS3Object::is_version_Set() const{
    return m_version_isSet;
}

bool OAIEphemerisItem_sourceS3Object::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIEphemerisItem_sourceS3Object::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEphemerisItem_sourceS3Object::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
