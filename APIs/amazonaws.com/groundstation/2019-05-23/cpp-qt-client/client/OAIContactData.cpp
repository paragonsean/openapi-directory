/**
 * AWS Ground Station
 * Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.
 *
 * The version of the OpenAPI document: 2019-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContactData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContactData::OAIContactData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContactData::OAIContactData() {
    this->initializeModel();
}

OAIContactData::~OAIContactData() {}

void OAIContactData::initializeModel() {

    m_contact_id_isSet = false;
    m_contact_id_isValid = false;

    m_contact_status_isSet = false;
    m_contact_status_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_ground_station_isSet = false;
    m_ground_station_isValid = false;

    m_maximum_elevation_isSet = false;
    m_maximum_elevation_isValid = false;

    m_mission_profile_arn_isSet = false;
    m_mission_profile_arn_isValid = false;

    m_post_pass_end_time_isSet = false;
    m_post_pass_end_time_isValid = false;

    m_pre_pass_start_time_isSet = false;
    m_pre_pass_start_time_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_satellite_arn_isSet = false;
    m_satellite_arn_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIContactData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContactData::fromJsonObject(QJsonObject json) {

    m_contact_id_isValid = ::OpenAPI::fromJsonValue(m_contact_id, json[QString("contactId")]);
    m_contact_id_isSet = !json[QString("contactId")].isNull() && m_contact_id_isValid;

    m_contact_status_isValid = ::OpenAPI::fromJsonValue(m_contact_status, json[QString("contactStatus")]);
    m_contact_status_isSet = !json[QString("contactStatus")].isNull() && m_contact_status_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_ground_station_isValid = ::OpenAPI::fromJsonValue(m_ground_station, json[QString("groundStation")]);
    m_ground_station_isSet = !json[QString("groundStation")].isNull() && m_ground_station_isValid;

    m_maximum_elevation_isValid = ::OpenAPI::fromJsonValue(m_maximum_elevation, json[QString("maximumElevation")]);
    m_maximum_elevation_isSet = !json[QString("maximumElevation")].isNull() && m_maximum_elevation_isValid;

    m_mission_profile_arn_isValid = ::OpenAPI::fromJsonValue(m_mission_profile_arn, json[QString("missionProfileArn")]);
    m_mission_profile_arn_isSet = !json[QString("missionProfileArn")].isNull() && m_mission_profile_arn_isValid;

    m_post_pass_end_time_isValid = ::OpenAPI::fromJsonValue(m_post_pass_end_time, json[QString("postPassEndTime")]);
    m_post_pass_end_time_isSet = !json[QString("postPassEndTime")].isNull() && m_post_pass_end_time_isValid;

    m_pre_pass_start_time_isValid = ::OpenAPI::fromJsonValue(m_pre_pass_start_time, json[QString("prePassStartTime")]);
    m_pre_pass_start_time_isSet = !json[QString("prePassStartTime")].isNull() && m_pre_pass_start_time_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_satellite_arn_isValid = ::OpenAPI::fromJsonValue(m_satellite_arn, json[QString("satelliteArn")]);
    m_satellite_arn_isSet = !json[QString("satelliteArn")].isNull() && m_satellite_arn_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIContactData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContactData::asJsonObject() const {
    QJsonObject obj;
    if (m_contact_id_isSet) {
        obj.insert(QString("contactId"), ::OpenAPI::toJsonValue(m_contact_id));
    }
    if (m_contact_status.isSet()) {
        obj.insert(QString("contactStatus"), ::OpenAPI::toJsonValue(m_contact_status));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_ground_station_isSet) {
        obj.insert(QString("groundStation"), ::OpenAPI::toJsonValue(m_ground_station));
    }
    if (m_maximum_elevation.isSet()) {
        obj.insert(QString("maximumElevation"), ::OpenAPI::toJsonValue(m_maximum_elevation));
    }
    if (m_mission_profile_arn_isSet) {
        obj.insert(QString("missionProfileArn"), ::OpenAPI::toJsonValue(m_mission_profile_arn));
    }
    if (m_post_pass_end_time_isSet) {
        obj.insert(QString("postPassEndTime"), ::OpenAPI::toJsonValue(m_post_pass_end_time));
    }
    if (m_pre_pass_start_time_isSet) {
        obj.insert(QString("prePassStartTime"), ::OpenAPI::toJsonValue(m_pre_pass_start_time));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_satellite_arn_isSet) {
        obj.insert(QString("satelliteArn"), ::OpenAPI::toJsonValue(m_satellite_arn));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIContactData::getContactId() const {
    return m_contact_id;
}
void OAIContactData::setContactId(const QString &contact_id) {
    m_contact_id = contact_id;
    m_contact_id_isSet = true;
}

bool OAIContactData::is_contact_id_Set() const{
    return m_contact_id_isSet;
}

bool OAIContactData::is_contact_id_Valid() const{
    return m_contact_id_isValid;
}

OAIContactStatus OAIContactData::getContactStatus() const {
    return m_contact_status;
}
void OAIContactData::setContactStatus(const OAIContactStatus &contact_status) {
    m_contact_status = contact_status;
    m_contact_status_isSet = true;
}

bool OAIContactData::is_contact_status_Set() const{
    return m_contact_status_isSet;
}

bool OAIContactData::is_contact_status_Valid() const{
    return m_contact_status_isValid;
}

QDateTime OAIContactData::getEndTime() const {
    return m_end_time;
}
void OAIContactData::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIContactData::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIContactData::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIContactData::getErrorMessage() const {
    return m_error_message;
}
void OAIContactData::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIContactData::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIContactData::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAIContactData::getGroundStation() const {
    return m_ground_station;
}
void OAIContactData::setGroundStation(const QString &ground_station) {
    m_ground_station = ground_station;
    m_ground_station_isSet = true;
}

bool OAIContactData::is_ground_station_Set() const{
    return m_ground_station_isSet;
}

bool OAIContactData::is_ground_station_Valid() const{
    return m_ground_station_isValid;
}

OAIDescribeContactResponse_maximumElevation OAIContactData::getMaximumElevation() const {
    return m_maximum_elevation;
}
void OAIContactData::setMaximumElevation(const OAIDescribeContactResponse_maximumElevation &maximum_elevation) {
    m_maximum_elevation = maximum_elevation;
    m_maximum_elevation_isSet = true;
}

bool OAIContactData::is_maximum_elevation_Set() const{
    return m_maximum_elevation_isSet;
}

bool OAIContactData::is_maximum_elevation_Valid() const{
    return m_maximum_elevation_isValid;
}

QString OAIContactData::getMissionProfileArn() const {
    return m_mission_profile_arn;
}
void OAIContactData::setMissionProfileArn(const QString &mission_profile_arn) {
    m_mission_profile_arn = mission_profile_arn;
    m_mission_profile_arn_isSet = true;
}

bool OAIContactData::is_mission_profile_arn_Set() const{
    return m_mission_profile_arn_isSet;
}

bool OAIContactData::is_mission_profile_arn_Valid() const{
    return m_mission_profile_arn_isValid;
}

QDateTime OAIContactData::getPostPassEndTime() const {
    return m_post_pass_end_time;
}
void OAIContactData::setPostPassEndTime(const QDateTime &post_pass_end_time) {
    m_post_pass_end_time = post_pass_end_time;
    m_post_pass_end_time_isSet = true;
}

bool OAIContactData::is_post_pass_end_time_Set() const{
    return m_post_pass_end_time_isSet;
}

bool OAIContactData::is_post_pass_end_time_Valid() const{
    return m_post_pass_end_time_isValid;
}

QDateTime OAIContactData::getPrePassStartTime() const {
    return m_pre_pass_start_time;
}
void OAIContactData::setPrePassStartTime(const QDateTime &pre_pass_start_time) {
    m_pre_pass_start_time = pre_pass_start_time;
    m_pre_pass_start_time_isSet = true;
}

bool OAIContactData::is_pre_pass_start_time_Set() const{
    return m_pre_pass_start_time_isSet;
}

bool OAIContactData::is_pre_pass_start_time_Valid() const{
    return m_pre_pass_start_time_isValid;
}

QString OAIContactData::getRegion() const {
    return m_region;
}
void OAIContactData::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIContactData::is_region_Set() const{
    return m_region_isSet;
}

bool OAIContactData::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIContactData::getSatelliteArn() const {
    return m_satellite_arn;
}
void OAIContactData::setSatelliteArn(const QString &satellite_arn) {
    m_satellite_arn = satellite_arn;
    m_satellite_arn_isSet = true;
}

bool OAIContactData::is_satellite_arn_Set() const{
    return m_satellite_arn_isSet;
}

bool OAIContactData::is_satellite_arn_Valid() const{
    return m_satellite_arn_isValid;
}

QDateTime OAIContactData::getStartTime() const {
    return m_start_time;
}
void OAIContactData::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIContactData::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIContactData::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QMap OAIContactData::getTags() const {
    return m_tags;
}
void OAIContactData::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIContactData::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIContactData::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIContactData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ground_station_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_elevation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mission_profile_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_pass_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_pass_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_satellite_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContactData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
