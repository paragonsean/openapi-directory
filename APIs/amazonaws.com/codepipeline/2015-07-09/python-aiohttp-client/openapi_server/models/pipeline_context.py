# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pipeline_context_action import PipelineContextAction
from openapi_server.models.pipeline_context_stage import PipelineContextStage
from openapi_server import util


class PipelineContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pipeline_name: str=None, stage: PipelineContextStage=None, action: PipelineContextAction=None, pipeline_arn: str=None, pipeline_execution_id: str=None):
        """PipelineContext - a model defined in OpenAPI

        :param pipeline_name: The pipeline_name of this PipelineContext.
        :param stage: The stage of this PipelineContext.
        :param action: The action of this PipelineContext.
        :param pipeline_arn: The pipeline_arn of this PipelineContext.
        :param pipeline_execution_id: The pipeline_execution_id of this PipelineContext.
        """
        self.openapi_types = {
            'pipeline_name': str,
            'stage': PipelineContextStage,
            'action': PipelineContextAction,
            'pipeline_arn': str,
            'pipeline_execution_id': str
        }

        self.attribute_map = {
            'pipeline_name': 'pipelineName',
            'stage': 'stage',
            'action': 'action',
            'pipeline_arn': 'pipelineArn',
            'pipeline_execution_id': 'pipelineExecutionId'
        }

        self._pipeline_name = pipeline_name
        self._stage = stage
        self._action = action
        self._pipeline_arn = pipeline_arn
        self._pipeline_execution_id = pipeline_execution_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PipelineContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PipelineContext of this PipelineContext.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pipeline_name(self):
        """Gets the pipeline_name of this PipelineContext.


        :return: The pipeline_name of this PipelineContext.
        :rtype: str
        """
        return self._pipeline_name

    @pipeline_name.setter
    def pipeline_name(self, pipeline_name):
        """Sets the pipeline_name of this PipelineContext.


        :param pipeline_name: The pipeline_name of this PipelineContext.
        :type pipeline_name: str
        """

        self._pipeline_name = pipeline_name

    @property
    def stage(self):
        """Gets the stage of this PipelineContext.


        :return: The stage of this PipelineContext.
        :rtype: PipelineContextStage
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """Sets the stage of this PipelineContext.


        :param stage: The stage of this PipelineContext.
        :type stage: PipelineContextStage
        """

        self._stage = stage

    @property
    def action(self):
        """Gets the action of this PipelineContext.


        :return: The action of this PipelineContext.
        :rtype: PipelineContextAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this PipelineContext.


        :param action: The action of this PipelineContext.
        :type action: PipelineContextAction
        """

        self._action = action

    @property
    def pipeline_arn(self):
        """Gets the pipeline_arn of this PipelineContext.


        :return: The pipeline_arn of this PipelineContext.
        :rtype: str
        """
        return self._pipeline_arn

    @pipeline_arn.setter
    def pipeline_arn(self, pipeline_arn):
        """Sets the pipeline_arn of this PipelineContext.


        :param pipeline_arn: The pipeline_arn of this PipelineContext.
        :type pipeline_arn: str
        """

        self._pipeline_arn = pipeline_arn

    @property
    def pipeline_execution_id(self):
        """Gets the pipeline_execution_id of this PipelineContext.


        :return: The pipeline_execution_id of this PipelineContext.
        :rtype: str
        """
        return self._pipeline_execution_id

    @pipeline_execution_id.setter
    def pipeline_execution_id(self, pipeline_execution_id):
        """Sets the pipeline_execution_id of this PipelineContext.


        :param pipeline_execution_id: The pipeline_execution_id of this PipelineContext.
        :type pipeline_execution_id: str
        """

        self._pipeline_execution_id = pipeline_execution_id
