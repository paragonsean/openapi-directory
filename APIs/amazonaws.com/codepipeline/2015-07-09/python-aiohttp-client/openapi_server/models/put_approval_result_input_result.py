# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.approval_status import ApprovalStatus
from openapi_server import util


class PutApprovalResultInputResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, summary: str=None, status: ApprovalStatus=None):
        """PutApprovalResultInputResult - a model defined in OpenAPI

        :param summary: The summary of this PutApprovalResultInputResult.
        :param status: The status of this PutApprovalResultInputResult.
        """
        self.openapi_types = {
            'summary': str,
            'status': ApprovalStatus
        }

        self.attribute_map = {
            'summary': 'summary',
            'status': 'status'
        }

        self._summary = summary
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutApprovalResultInputResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutApprovalResultInput_result of this PutApprovalResultInputResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def summary(self):
        """Gets the summary of this PutApprovalResultInputResult.


        :return: The summary of this PutApprovalResultInputResult.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this PutApprovalResultInputResult.


        :param summary: The summary of this PutApprovalResultInputResult.
        :type summary: str
        """
        if summary is None:
            raise ValueError("Invalid value for `summary`, must not be `None`")

        self._summary = summary

    @property
    def status(self):
        """Gets the status of this PutApprovalResultInputResult.


        :return: The status of this PutApprovalResultInputResult.
        :rtype: ApprovalStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PutApprovalResultInputResult.


        :param status: The status of this PutApprovalResultInputResult.
        :type status: ApprovalStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
