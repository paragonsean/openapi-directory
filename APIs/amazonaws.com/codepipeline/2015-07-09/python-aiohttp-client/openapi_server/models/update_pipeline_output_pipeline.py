# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pipeline_declaration_artifact_store import PipelineDeclarationArtifactStore
from openapi_server import util


class UpdatePipelineOutputPipeline(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, role_arn: str=None, artifact_store: PipelineDeclarationArtifactStore=None, artifact_stores: Dict=None, stages: List=None, version: int=None):
        """UpdatePipelineOutputPipeline - a model defined in OpenAPI

        :param name: The name of this UpdatePipelineOutputPipeline.
        :param role_arn: The role_arn of this UpdatePipelineOutputPipeline.
        :param artifact_store: The artifact_store of this UpdatePipelineOutputPipeline.
        :param artifact_stores: The artifact_stores of this UpdatePipelineOutputPipeline.
        :param stages: The stages of this UpdatePipelineOutputPipeline.
        :param version: The version of this UpdatePipelineOutputPipeline.
        """
        self.openapi_types = {
            'name': str,
            'role_arn': str,
            'artifact_store': PipelineDeclarationArtifactStore,
            'artifact_stores': Dict,
            'stages': List,
            'version': int
        }

        self.attribute_map = {
            'name': 'name',
            'role_arn': 'roleArn',
            'artifact_store': 'artifactStore',
            'artifact_stores': 'artifactStores',
            'stages': 'stages',
            'version': 'version'
        }

        self._name = name
        self._role_arn = role_arn
        self._artifact_store = artifact_store
        self._artifact_stores = artifact_stores
        self._stages = stages
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdatePipelineOutputPipeline':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdatePipelineOutput_pipeline of this UpdatePipelineOutputPipeline.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this UpdatePipelineOutputPipeline.


        :return: The name of this UpdatePipelineOutputPipeline.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdatePipelineOutputPipeline.


        :param name: The name of this UpdatePipelineOutputPipeline.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def role_arn(self):
        """Gets the role_arn of this UpdatePipelineOutputPipeline.


        :return: The role_arn of this UpdatePipelineOutputPipeline.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this UpdatePipelineOutputPipeline.


        :param role_arn: The role_arn of this UpdatePipelineOutputPipeline.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def artifact_store(self):
        """Gets the artifact_store of this UpdatePipelineOutputPipeline.


        :return: The artifact_store of this UpdatePipelineOutputPipeline.
        :rtype: PipelineDeclarationArtifactStore
        """
        return self._artifact_store

    @artifact_store.setter
    def artifact_store(self, artifact_store):
        """Sets the artifact_store of this UpdatePipelineOutputPipeline.


        :param artifact_store: The artifact_store of this UpdatePipelineOutputPipeline.
        :type artifact_store: PipelineDeclarationArtifactStore
        """

        self._artifact_store = artifact_store

    @property
    def artifact_stores(self):
        """Gets the artifact_stores of this UpdatePipelineOutputPipeline.


        :return: The artifact_stores of this UpdatePipelineOutputPipeline.
        :rtype: Dict
        """
        return self._artifact_stores

    @artifact_stores.setter
    def artifact_stores(self, artifact_stores):
        """Sets the artifact_stores of this UpdatePipelineOutputPipeline.


        :param artifact_stores: The artifact_stores of this UpdatePipelineOutputPipeline.
        :type artifact_stores: Dict
        """

        self._artifact_stores = artifact_stores

    @property
    def stages(self):
        """Gets the stages of this UpdatePipelineOutputPipeline.


        :return: The stages of this UpdatePipelineOutputPipeline.
        :rtype: List
        """
        return self._stages

    @stages.setter
    def stages(self, stages):
        """Sets the stages of this UpdatePipelineOutputPipeline.


        :param stages: The stages of this UpdatePipelineOutputPipeline.
        :type stages: List
        """
        if stages is None:
            raise ValueError("Invalid value for `stages`, must not be `None`")

        self._stages = stages

    @property
    def version(self):
        """Gets the version of this UpdatePipelineOutputPipeline.


        :return: The version of this UpdatePipelineOutputPipeline.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this UpdatePipelineOutputPipeline.


        :param version: The version of this UpdatePipelineOutputPipeline.
        :type version: int
        """

        self._version = version
