# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stage_transition_type import StageTransitionType
from openapi_server import util


class DisableStageTransitionInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pipeline_name: str=None, stage_name: str=None, transition_type: StageTransitionType=None, reason: str=None):
        """DisableStageTransitionInput - a model defined in OpenAPI

        :param pipeline_name: The pipeline_name of this DisableStageTransitionInput.
        :param stage_name: The stage_name of this DisableStageTransitionInput.
        :param transition_type: The transition_type of this DisableStageTransitionInput.
        :param reason: The reason of this DisableStageTransitionInput.
        """
        self.openapi_types = {
            'pipeline_name': str,
            'stage_name': str,
            'transition_type': StageTransitionType,
            'reason': str
        }

        self.attribute_map = {
            'pipeline_name': 'pipelineName',
            'stage_name': 'stageName',
            'transition_type': 'transitionType',
            'reason': 'reason'
        }

        self._pipeline_name = pipeline_name
        self._stage_name = stage_name
        self._transition_type = transition_type
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DisableStageTransitionInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DisableStageTransitionInput of this DisableStageTransitionInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pipeline_name(self):
        """Gets the pipeline_name of this DisableStageTransitionInput.


        :return: The pipeline_name of this DisableStageTransitionInput.
        :rtype: str
        """
        return self._pipeline_name

    @pipeline_name.setter
    def pipeline_name(self, pipeline_name):
        """Sets the pipeline_name of this DisableStageTransitionInput.


        :param pipeline_name: The pipeline_name of this DisableStageTransitionInput.
        :type pipeline_name: str
        """
        if pipeline_name is None:
            raise ValueError("Invalid value for `pipeline_name`, must not be `None`")

        self._pipeline_name = pipeline_name

    @property
    def stage_name(self):
        """Gets the stage_name of this DisableStageTransitionInput.


        :return: The stage_name of this DisableStageTransitionInput.
        :rtype: str
        """
        return self._stage_name

    @stage_name.setter
    def stage_name(self, stage_name):
        """Sets the stage_name of this DisableStageTransitionInput.


        :param stage_name: The stage_name of this DisableStageTransitionInput.
        :type stage_name: str
        """
        if stage_name is None:
            raise ValueError("Invalid value for `stage_name`, must not be `None`")

        self._stage_name = stage_name

    @property
    def transition_type(self):
        """Gets the transition_type of this DisableStageTransitionInput.


        :return: The transition_type of this DisableStageTransitionInput.
        :rtype: StageTransitionType
        """
        return self._transition_type

    @transition_type.setter
    def transition_type(self, transition_type):
        """Sets the transition_type of this DisableStageTransitionInput.


        :param transition_type: The transition_type of this DisableStageTransitionInput.
        :type transition_type: StageTransitionType
        """
        if transition_type is None:
            raise ValueError("Invalid value for `transition_type`, must not be `None`")

        self._transition_type = transition_type

    @property
    def reason(self):
        """Gets the reason of this DisableStageTransitionInput.


        :return: The reason of this DisableStageTransitionInput.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this DisableStageTransitionInput.


        :param reason: The reason of this DisableStageTransitionInput.
        :type reason: str
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")

        self._reason = reason
