# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action_declaration_action_type_id import ActionDeclarationActionTypeId
from openapi_server import util


class ActionDeclaration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, action_type_id: ActionDeclarationActionTypeId=None, run_order: int=None, configuration: Dict=None, output_artifacts: List=None, input_artifacts: List=None, role_arn: str=None, region: str=None, namespace: str=None):
        """ActionDeclaration - a model defined in OpenAPI

        :param name: The name of this ActionDeclaration.
        :param action_type_id: The action_type_id of this ActionDeclaration.
        :param run_order: The run_order of this ActionDeclaration.
        :param configuration: The configuration of this ActionDeclaration.
        :param output_artifacts: The output_artifacts of this ActionDeclaration.
        :param input_artifacts: The input_artifacts of this ActionDeclaration.
        :param role_arn: The role_arn of this ActionDeclaration.
        :param region: The region of this ActionDeclaration.
        :param namespace: The namespace of this ActionDeclaration.
        """
        self.openapi_types = {
            'name': str,
            'action_type_id': ActionDeclarationActionTypeId,
            'run_order': int,
            'configuration': Dict,
            'output_artifacts': List,
            'input_artifacts': List,
            'role_arn': str,
            'region': str,
            'namespace': str
        }

        self.attribute_map = {
            'name': 'name',
            'action_type_id': 'actionTypeId',
            'run_order': 'runOrder',
            'configuration': 'configuration',
            'output_artifacts': 'outputArtifacts',
            'input_artifacts': 'inputArtifacts',
            'role_arn': 'roleArn',
            'region': 'region',
            'namespace': 'namespace'
        }

        self._name = name
        self._action_type_id = action_type_id
        self._run_order = run_order
        self._configuration = configuration
        self._output_artifacts = output_artifacts
        self._input_artifacts = input_artifacts
        self._role_arn = role_arn
        self._region = region
        self._namespace = namespace

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionDeclaration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActionDeclaration of this ActionDeclaration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ActionDeclaration.


        :return: The name of this ActionDeclaration.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ActionDeclaration.


        :param name: The name of this ActionDeclaration.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def action_type_id(self):
        """Gets the action_type_id of this ActionDeclaration.


        :return: The action_type_id of this ActionDeclaration.
        :rtype: ActionDeclarationActionTypeId
        """
        return self._action_type_id

    @action_type_id.setter
    def action_type_id(self, action_type_id):
        """Sets the action_type_id of this ActionDeclaration.


        :param action_type_id: The action_type_id of this ActionDeclaration.
        :type action_type_id: ActionDeclarationActionTypeId
        """
        if action_type_id is None:
            raise ValueError("Invalid value for `action_type_id`, must not be `None`")

        self._action_type_id = action_type_id

    @property
    def run_order(self):
        """Gets the run_order of this ActionDeclaration.


        :return: The run_order of this ActionDeclaration.
        :rtype: int
        """
        return self._run_order

    @run_order.setter
    def run_order(self, run_order):
        """Sets the run_order of this ActionDeclaration.


        :param run_order: The run_order of this ActionDeclaration.
        :type run_order: int
        """

        self._run_order = run_order

    @property
    def configuration(self):
        """Gets the configuration of this ActionDeclaration.


        :return: The configuration of this ActionDeclaration.
        :rtype: Dict
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this ActionDeclaration.


        :param configuration: The configuration of this ActionDeclaration.
        :type configuration: Dict
        """

        self._configuration = configuration

    @property
    def output_artifacts(self):
        """Gets the output_artifacts of this ActionDeclaration.


        :return: The output_artifacts of this ActionDeclaration.
        :rtype: List
        """
        return self._output_artifacts

    @output_artifacts.setter
    def output_artifacts(self, output_artifacts):
        """Sets the output_artifacts of this ActionDeclaration.


        :param output_artifacts: The output_artifacts of this ActionDeclaration.
        :type output_artifacts: List
        """

        self._output_artifacts = output_artifacts

    @property
    def input_artifacts(self):
        """Gets the input_artifacts of this ActionDeclaration.


        :return: The input_artifacts of this ActionDeclaration.
        :rtype: List
        """
        return self._input_artifacts

    @input_artifacts.setter
    def input_artifacts(self, input_artifacts):
        """Sets the input_artifacts of this ActionDeclaration.


        :param input_artifacts: The input_artifacts of this ActionDeclaration.
        :type input_artifacts: List
        """

        self._input_artifacts = input_artifacts

    @property
    def role_arn(self):
        """Gets the role_arn of this ActionDeclaration.


        :return: The role_arn of this ActionDeclaration.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this ActionDeclaration.


        :param role_arn: The role_arn of this ActionDeclaration.
        :type role_arn: str
        """

        self._role_arn = role_arn

    @property
    def region(self):
        """Gets the region of this ActionDeclaration.


        :return: The region of this ActionDeclaration.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this ActionDeclaration.


        :param region: The region of this ActionDeclaration.
        :type region: str
        """

        self._region = region

    @property
    def namespace(self):
        """Gets the namespace of this ActionDeclaration.


        :return: The namespace of this ActionDeclaration.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this ActionDeclaration.


        :param namespace: The namespace of this ActionDeclaration.
        :type namespace: str
        """

        self._namespace = namespace
