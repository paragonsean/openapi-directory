# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action_type_executor_configuration import ActionTypeExecutorConfiguration
from openapi_server.models.executor_type import ExecutorType
from openapi_server import util


class ActionTypeDeclarationExecutor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration: ActionTypeExecutorConfiguration=None, type: ExecutorType=None, policy_statements_template: str=None, job_timeout: int=None):
        """ActionTypeDeclarationExecutor - a model defined in OpenAPI

        :param configuration: The configuration of this ActionTypeDeclarationExecutor.
        :param type: The type of this ActionTypeDeclarationExecutor.
        :param policy_statements_template: The policy_statements_template of this ActionTypeDeclarationExecutor.
        :param job_timeout: The job_timeout of this ActionTypeDeclarationExecutor.
        """
        self.openapi_types = {
            'configuration': ActionTypeExecutorConfiguration,
            'type': ExecutorType,
            'policy_statements_template': str,
            'job_timeout': int
        }

        self.attribute_map = {
            'configuration': 'configuration',
            'type': 'type',
            'policy_statements_template': 'policyStatementsTemplate',
            'job_timeout': 'jobTimeout'
        }

        self._configuration = configuration
        self._type = type
        self._policy_statements_template = policy_statements_template
        self._job_timeout = job_timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionTypeDeclarationExecutor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActionTypeDeclaration_executor of this ActionTypeDeclarationExecutor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration(self):
        """Gets the configuration of this ActionTypeDeclarationExecutor.


        :return: The configuration of this ActionTypeDeclarationExecutor.
        :rtype: ActionTypeExecutorConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this ActionTypeDeclarationExecutor.


        :param configuration: The configuration of this ActionTypeDeclarationExecutor.
        :type configuration: ActionTypeExecutorConfiguration
        """
        if configuration is None:
            raise ValueError("Invalid value for `configuration`, must not be `None`")

        self._configuration = configuration

    @property
    def type(self):
        """Gets the type of this ActionTypeDeclarationExecutor.


        :return: The type of this ActionTypeDeclarationExecutor.
        :rtype: ExecutorType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ActionTypeDeclarationExecutor.


        :param type: The type of this ActionTypeDeclarationExecutor.
        :type type: ExecutorType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def policy_statements_template(self):
        """Gets the policy_statements_template of this ActionTypeDeclarationExecutor.


        :return: The policy_statements_template of this ActionTypeDeclarationExecutor.
        :rtype: str
        """
        return self._policy_statements_template

    @policy_statements_template.setter
    def policy_statements_template(self, policy_statements_template):
        """Sets the policy_statements_template of this ActionTypeDeclarationExecutor.


        :param policy_statements_template: The policy_statements_template of this ActionTypeDeclarationExecutor.
        :type policy_statements_template: str
        """

        self._policy_statements_template = policy_statements_template

    @property
    def job_timeout(self):
        """Gets the job_timeout of this ActionTypeDeclarationExecutor.


        :return: The job_timeout of this ActionTypeDeclarationExecutor.
        :rtype: int
        """
        return self._job_timeout

    @job_timeout.setter
    def job_timeout(self, job_timeout):
        """Sets the job_timeout of this ActionTypeDeclarationExecutor.


        :param job_timeout: The job_timeout of this ActionTypeDeclarationExecutor.
        :type job_timeout: int
        """

        self._job_timeout = job_timeout
