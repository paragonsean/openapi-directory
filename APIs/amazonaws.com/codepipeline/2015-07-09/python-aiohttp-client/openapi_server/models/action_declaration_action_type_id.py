# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action_category import ActionCategory
from openapi_server.models.action_owner import ActionOwner
from openapi_server import util


class ActionDeclarationActionTypeId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: ActionCategory=None, owner: ActionOwner=None, provider: str=None, version: str=None):
        """ActionDeclarationActionTypeId - a model defined in OpenAPI

        :param category: The category of this ActionDeclarationActionTypeId.
        :param owner: The owner of this ActionDeclarationActionTypeId.
        :param provider: The provider of this ActionDeclarationActionTypeId.
        :param version: The version of this ActionDeclarationActionTypeId.
        """
        self.openapi_types = {
            'category': ActionCategory,
            'owner': ActionOwner,
            'provider': str,
            'version': str
        }

        self.attribute_map = {
            'category': 'category',
            'owner': 'owner',
            'provider': 'provider',
            'version': 'version'
        }

        self._category = category
        self._owner = owner
        self._provider = provider
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionDeclarationActionTypeId':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActionDeclaration_actionTypeId of this ActionDeclarationActionTypeId.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this ActionDeclarationActionTypeId.


        :return: The category of this ActionDeclarationActionTypeId.
        :rtype: ActionCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ActionDeclarationActionTypeId.


        :param category: The category of this ActionDeclarationActionTypeId.
        :type category: ActionCategory
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")

        self._category = category

    @property
    def owner(self):
        """Gets the owner of this ActionDeclarationActionTypeId.


        :return: The owner of this ActionDeclarationActionTypeId.
        :rtype: ActionOwner
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this ActionDeclarationActionTypeId.


        :param owner: The owner of this ActionDeclarationActionTypeId.
        :type owner: ActionOwner
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")

        self._owner = owner

    @property
    def provider(self):
        """Gets the provider of this ActionDeclarationActionTypeId.


        :return: The provider of this ActionDeclarationActionTypeId.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this ActionDeclarationActionTypeId.


        :param provider: The provider of this ActionDeclarationActionTypeId.
        :type provider: str
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")

        self._provider = provider

    @property
    def version(self):
        """Gets the version of this ActionDeclarationActionTypeId.


        :return: The version of this ActionDeclarationActionTypeId.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ActionDeclarationActionTypeId.


        :param version: The version of this ActionDeclarationActionTypeId.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
