# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.list_action_executions_input_filter import ListActionExecutionsInputFilter
from openapi_server import util


class ListActionExecutionsInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pipeline_name: str=None, filter: ListActionExecutionsInputFilter=None, max_results: int=None, next_token: str=None):
        """ListActionExecutionsInput - a model defined in OpenAPI

        :param pipeline_name: The pipeline_name of this ListActionExecutionsInput.
        :param filter: The filter of this ListActionExecutionsInput.
        :param max_results: The max_results of this ListActionExecutionsInput.
        :param next_token: The next_token of this ListActionExecutionsInput.
        """
        self.openapi_types = {
            'pipeline_name': str,
            'filter': ListActionExecutionsInputFilter,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'pipeline_name': 'pipelineName',
            'filter': 'filter',
            'max_results': 'maxResults',
            'next_token': 'nextToken'
        }

        self._pipeline_name = pipeline_name
        self._filter = filter
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListActionExecutionsInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListActionExecutionsInput of this ListActionExecutionsInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pipeline_name(self):
        """Gets the pipeline_name of this ListActionExecutionsInput.


        :return: The pipeline_name of this ListActionExecutionsInput.
        :rtype: str
        """
        return self._pipeline_name

    @pipeline_name.setter
    def pipeline_name(self, pipeline_name):
        """Sets the pipeline_name of this ListActionExecutionsInput.


        :param pipeline_name: The pipeline_name of this ListActionExecutionsInput.
        :type pipeline_name: str
        """
        if pipeline_name is None:
            raise ValueError("Invalid value for `pipeline_name`, must not be `None`")

        self._pipeline_name = pipeline_name

    @property
    def filter(self):
        """Gets the filter of this ListActionExecutionsInput.


        :return: The filter of this ListActionExecutionsInput.
        :rtype: ListActionExecutionsInputFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this ListActionExecutionsInput.


        :param filter: The filter of this ListActionExecutionsInput.
        :type filter: ListActionExecutionsInputFilter
        """

        self._filter = filter

    @property
    def max_results(self):
        """Gets the max_results of this ListActionExecutionsInput.


        :return: The max_results of this ListActionExecutionsInput.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListActionExecutionsInput.


        :param max_results: The max_results of this ListActionExecutionsInput.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListActionExecutionsInput.


        :return: The next_token of this ListActionExecutionsInput.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListActionExecutionsInput.


        :param next_token: The next_token of this ListActionExecutionsInput.
        :type next_token: str
        """

        self._next_token = next_token
