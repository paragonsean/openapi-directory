# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.poll_for_jobs_input_action_type_id import PollForJobsInputActionTypeId
from openapi_server import util


class PollForJobsInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_type_id: PollForJobsInputActionTypeId=None, max_batch_size: int=None, query_param: Dict=None):
        """PollForJobsInput - a model defined in OpenAPI

        :param action_type_id: The action_type_id of this PollForJobsInput.
        :param max_batch_size: The max_batch_size of this PollForJobsInput.
        :param query_param: The query_param of this PollForJobsInput.
        """
        self.openapi_types = {
            'action_type_id': PollForJobsInputActionTypeId,
            'max_batch_size': int,
            'query_param': Dict
        }

        self.attribute_map = {
            'action_type_id': 'actionTypeId',
            'max_batch_size': 'maxBatchSize',
            'query_param': 'queryParam'
        }

        self._action_type_id = action_type_id
        self._max_batch_size = max_batch_size
        self._query_param = query_param

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PollForJobsInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PollForJobsInput of this PollForJobsInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_type_id(self):
        """Gets the action_type_id of this PollForJobsInput.


        :return: The action_type_id of this PollForJobsInput.
        :rtype: PollForJobsInputActionTypeId
        """
        return self._action_type_id

    @action_type_id.setter
    def action_type_id(self, action_type_id):
        """Sets the action_type_id of this PollForJobsInput.


        :param action_type_id: The action_type_id of this PollForJobsInput.
        :type action_type_id: PollForJobsInputActionTypeId
        """
        if action_type_id is None:
            raise ValueError("Invalid value for `action_type_id`, must not be `None`")

        self._action_type_id = action_type_id

    @property
    def max_batch_size(self):
        """Gets the max_batch_size of this PollForJobsInput.


        :return: The max_batch_size of this PollForJobsInput.
        :rtype: int
        """
        return self._max_batch_size

    @max_batch_size.setter
    def max_batch_size(self, max_batch_size):
        """Sets the max_batch_size of this PollForJobsInput.


        :param max_batch_size: The max_batch_size of this PollForJobsInput.
        :type max_batch_size: int
        """

        self._max_batch_size = max_batch_size

    @property
    def query_param(self):
        """Gets the query_param of this PollForJobsInput.


        :return: The query_param of this PollForJobsInput.
        :rtype: Dict
        """
        return self._query_param

    @query_param.setter
    def query_param(self, query_param):
        """Sets the query_param of this PollForJobsInput.


        :param query_param: The query_param of this PollForJobsInput.
        :type query_param: Dict
        """

        self._query_param = query_param
