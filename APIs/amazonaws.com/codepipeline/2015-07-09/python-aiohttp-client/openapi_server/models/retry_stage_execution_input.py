# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stage_retry_mode import StageRetryMode
from openapi_server import util


class RetryStageExecutionInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pipeline_name: str=None, stage_name: str=None, pipeline_execution_id: str=None, retry_mode: StageRetryMode=None):
        """RetryStageExecutionInput - a model defined in OpenAPI

        :param pipeline_name: The pipeline_name of this RetryStageExecutionInput.
        :param stage_name: The stage_name of this RetryStageExecutionInput.
        :param pipeline_execution_id: The pipeline_execution_id of this RetryStageExecutionInput.
        :param retry_mode: The retry_mode of this RetryStageExecutionInput.
        """
        self.openapi_types = {
            'pipeline_name': str,
            'stage_name': str,
            'pipeline_execution_id': str,
            'retry_mode': StageRetryMode
        }

        self.attribute_map = {
            'pipeline_name': 'pipelineName',
            'stage_name': 'stageName',
            'pipeline_execution_id': 'pipelineExecutionId',
            'retry_mode': 'retryMode'
        }

        self._pipeline_name = pipeline_name
        self._stage_name = stage_name
        self._pipeline_execution_id = pipeline_execution_id
        self._retry_mode = retry_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RetryStageExecutionInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RetryStageExecutionInput of this RetryStageExecutionInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pipeline_name(self):
        """Gets the pipeline_name of this RetryStageExecutionInput.


        :return: The pipeline_name of this RetryStageExecutionInput.
        :rtype: str
        """
        return self._pipeline_name

    @pipeline_name.setter
    def pipeline_name(self, pipeline_name):
        """Sets the pipeline_name of this RetryStageExecutionInput.


        :param pipeline_name: The pipeline_name of this RetryStageExecutionInput.
        :type pipeline_name: str
        """
        if pipeline_name is None:
            raise ValueError("Invalid value for `pipeline_name`, must not be `None`")

        self._pipeline_name = pipeline_name

    @property
    def stage_name(self):
        """Gets the stage_name of this RetryStageExecutionInput.


        :return: The stage_name of this RetryStageExecutionInput.
        :rtype: str
        """
        return self._stage_name

    @stage_name.setter
    def stage_name(self, stage_name):
        """Sets the stage_name of this RetryStageExecutionInput.


        :param stage_name: The stage_name of this RetryStageExecutionInput.
        :type stage_name: str
        """
        if stage_name is None:
            raise ValueError("Invalid value for `stage_name`, must not be `None`")

        self._stage_name = stage_name

    @property
    def pipeline_execution_id(self):
        """Gets the pipeline_execution_id of this RetryStageExecutionInput.


        :return: The pipeline_execution_id of this RetryStageExecutionInput.
        :rtype: str
        """
        return self._pipeline_execution_id

    @pipeline_execution_id.setter
    def pipeline_execution_id(self, pipeline_execution_id):
        """Sets the pipeline_execution_id of this RetryStageExecutionInput.


        :param pipeline_execution_id: The pipeline_execution_id of this RetryStageExecutionInput.
        :type pipeline_execution_id: str
        """
        if pipeline_execution_id is None:
            raise ValueError("Invalid value for `pipeline_execution_id`, must not be `None`")

        self._pipeline_execution_id = pipeline_execution_id

    @property
    def retry_mode(self):
        """Gets the retry_mode of this RetryStageExecutionInput.


        :return: The retry_mode of this RetryStageExecutionInput.
        :rtype: StageRetryMode
        """
        return self._retry_mode

    @retry_mode.setter
    def retry_mode(self, retry_mode):
        """Sets the retry_mode of this RetryStageExecutionInput.


        :param retry_mode: The retry_mode of this RetryStageExecutionInput.
        :type retry_mode: StageRetryMode
        """
        if retry_mode is None:
            raise ValueError("Invalid value for `retry_mode`, must not be `None`")

        self._retry_mode = retry_mode
