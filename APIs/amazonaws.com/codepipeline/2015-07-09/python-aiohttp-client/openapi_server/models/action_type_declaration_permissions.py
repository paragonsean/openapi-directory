# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ActionTypeDeclarationPermissions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_accounts: List=None):
        """ActionTypeDeclarationPermissions - a model defined in OpenAPI

        :param allowed_accounts: The allowed_accounts of this ActionTypeDeclarationPermissions.
        """
        self.openapi_types = {
            'allowed_accounts': List
        }

        self.attribute_map = {
            'allowed_accounts': 'allowedAccounts'
        }

        self._allowed_accounts = allowed_accounts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionTypeDeclarationPermissions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActionTypeDeclaration_permissions of this ActionTypeDeclarationPermissions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_accounts(self):
        """Gets the allowed_accounts of this ActionTypeDeclarationPermissions.


        :return: The allowed_accounts of this ActionTypeDeclarationPermissions.
        :rtype: List
        """
        return self._allowed_accounts

    @allowed_accounts.setter
    def allowed_accounts(self, allowed_accounts):
        """Sets the allowed_accounts of this ActionTypeDeclarationPermissions.


        :param allowed_accounts: The allowed_accounts of this ActionTypeDeclarationPermissions.
        :type allowed_accounts: List
        """
        if allowed_accounts is None:
            raise ValueError("Invalid value for `allowed_accounts`, must not be `None`")

        self._allowed_accounts = allowed_accounts
