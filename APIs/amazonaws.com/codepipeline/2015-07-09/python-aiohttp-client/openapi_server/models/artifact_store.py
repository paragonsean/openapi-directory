# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.artifact_store_encryption_key import ArtifactStoreEncryptionKey
from openapi_server.models.artifact_store_type import ArtifactStoreType
from openapi_server import util


class ArtifactStore(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: ArtifactStoreType=None, location: str=None, encryption_key: ArtifactStoreEncryptionKey=None):
        """ArtifactStore - a model defined in OpenAPI

        :param type: The type of this ArtifactStore.
        :param location: The location of this ArtifactStore.
        :param encryption_key: The encryption_key of this ArtifactStore.
        """
        self.openapi_types = {
            'type': ArtifactStoreType,
            'location': str,
            'encryption_key': ArtifactStoreEncryptionKey
        }

        self.attribute_map = {
            'type': 'type',
            'location': 'location',
            'encryption_key': 'encryptionKey'
        }

        self._type = type
        self._location = location
        self._encryption_key = encryption_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArtifactStore':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArtifactStore of this ArtifactStore.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this ArtifactStore.


        :return: The type of this ArtifactStore.
        :rtype: ArtifactStoreType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ArtifactStore.


        :param type: The type of this ArtifactStore.
        :type type: ArtifactStoreType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def location(self):
        """Gets the location of this ArtifactStore.


        :return: The location of this ArtifactStore.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ArtifactStore.


        :param location: The location of this ArtifactStore.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def encryption_key(self):
        """Gets the encryption_key of this ArtifactStore.


        :return: The encryption_key of this ArtifactStore.
        :rtype: ArtifactStoreEncryptionKey
        """
        return self._encryption_key

    @encryption_key.setter
    def encryption_key(self, encryption_key):
        """Sets the encryption_key of this ArtifactStore.


        :param encryption_key: The encryption_key of this ArtifactStore.
        :type encryption_key: ArtifactStoreEncryptionKey
        """

        self._encryption_key = encryption_key
