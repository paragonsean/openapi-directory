# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ActionRevision(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, revision_id: str=None, revision_change_id: str=None, created: datetime=None):
        """ActionRevision - a model defined in OpenAPI

        :param revision_id: The revision_id of this ActionRevision.
        :param revision_change_id: The revision_change_id of this ActionRevision.
        :param created: The created of this ActionRevision.
        """
        self.openapi_types = {
            'revision_id': str,
            'revision_change_id': str,
            'created': datetime
        }

        self.attribute_map = {
            'revision_id': 'revisionId',
            'revision_change_id': 'revisionChangeId',
            'created': 'created'
        }

        self._revision_id = revision_id
        self._revision_change_id = revision_change_id
        self._created = created

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionRevision':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActionRevision of this ActionRevision.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def revision_id(self):
        """Gets the revision_id of this ActionRevision.


        :return: The revision_id of this ActionRevision.
        :rtype: str
        """
        return self._revision_id

    @revision_id.setter
    def revision_id(self, revision_id):
        """Sets the revision_id of this ActionRevision.


        :param revision_id: The revision_id of this ActionRevision.
        :type revision_id: str
        """
        if revision_id is None:
            raise ValueError("Invalid value for `revision_id`, must not be `None`")

        self._revision_id = revision_id

    @property
    def revision_change_id(self):
        """Gets the revision_change_id of this ActionRevision.


        :return: The revision_change_id of this ActionRevision.
        :rtype: str
        """
        return self._revision_change_id

    @revision_change_id.setter
    def revision_change_id(self, revision_change_id):
        """Sets the revision_change_id of this ActionRevision.


        :param revision_change_id: The revision_change_id of this ActionRevision.
        :type revision_change_id: str
        """
        if revision_change_id is None:
            raise ValueError("Invalid value for `revision_change_id`, must not be `None`")

        self._revision_change_id = revision_change_id

    @property
    def created(self):
        """Gets the created of this ActionRevision.


        :return: The created of this ActionRevision.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ActionRevision.


        :param created: The created of this ActionRevision.
        :type created: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created
