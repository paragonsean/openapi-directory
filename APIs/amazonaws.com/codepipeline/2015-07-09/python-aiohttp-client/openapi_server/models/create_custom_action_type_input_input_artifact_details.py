# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateCustomActionTypeInputInputArtifactDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, minimum_count: int=None, maximum_count: int=None):
        """CreateCustomActionTypeInputInputArtifactDetails - a model defined in OpenAPI

        :param minimum_count: The minimum_count of this CreateCustomActionTypeInputInputArtifactDetails.
        :param maximum_count: The maximum_count of this CreateCustomActionTypeInputInputArtifactDetails.
        """
        self.openapi_types = {
            'minimum_count': int,
            'maximum_count': int
        }

        self.attribute_map = {
            'minimum_count': 'minimumCount',
            'maximum_count': 'maximumCount'
        }

        self._minimum_count = minimum_count
        self._maximum_count = maximum_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCustomActionTypeInputInputArtifactDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCustomActionTypeInput_inputArtifactDetails of this CreateCustomActionTypeInputInputArtifactDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def minimum_count(self):
        """Gets the minimum_count of this CreateCustomActionTypeInputInputArtifactDetails.


        :return: The minimum_count of this CreateCustomActionTypeInputInputArtifactDetails.
        :rtype: int
        """
        return self._minimum_count

    @minimum_count.setter
    def minimum_count(self, minimum_count):
        """Sets the minimum_count of this CreateCustomActionTypeInputInputArtifactDetails.


        :param minimum_count: The minimum_count of this CreateCustomActionTypeInputInputArtifactDetails.
        :type minimum_count: int
        """
        if minimum_count is None:
            raise ValueError("Invalid value for `minimum_count`, must not be `None`")

        self._minimum_count = minimum_count

    @property
    def maximum_count(self):
        """Gets the maximum_count of this CreateCustomActionTypeInputInputArtifactDetails.


        :return: The maximum_count of this CreateCustomActionTypeInputInputArtifactDetails.
        :rtype: int
        """
        return self._maximum_count

    @maximum_count.setter
    def maximum_count(self, maximum_count):
        """Sets the maximum_count of this CreateCustomActionTypeInputInputArtifactDetails.


        :param maximum_count: The maximum_count of this CreateCustomActionTypeInputInputArtifactDetails.
        :type maximum_count: int
        """
        if maximum_count is None:
            raise ValueError("Invalid value for `maximum_count`, must not be `None`")

        self._maximum_count = maximum_count
