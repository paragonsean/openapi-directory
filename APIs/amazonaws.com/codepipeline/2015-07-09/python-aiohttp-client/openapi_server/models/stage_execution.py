# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stage_execution_status import StageExecutionStatus
from openapi_server import util


class StageExecution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pipeline_execution_id: str=None, status: StageExecutionStatus=None):
        """StageExecution - a model defined in OpenAPI

        :param pipeline_execution_id: The pipeline_execution_id of this StageExecution.
        :param status: The status of this StageExecution.
        """
        self.openapi_types = {
            'pipeline_execution_id': str,
            'status': StageExecutionStatus
        }

        self.attribute_map = {
            'pipeline_execution_id': 'pipelineExecutionId',
            'status': 'status'
        }

        self._pipeline_execution_id = pipeline_execution_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StageExecution':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StageExecution of this StageExecution.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pipeline_execution_id(self):
        """Gets the pipeline_execution_id of this StageExecution.


        :return: The pipeline_execution_id of this StageExecution.
        :rtype: str
        """
        return self._pipeline_execution_id

    @pipeline_execution_id.setter
    def pipeline_execution_id(self, pipeline_execution_id):
        """Sets the pipeline_execution_id of this StageExecution.


        :param pipeline_execution_id: The pipeline_execution_id of this StageExecution.
        :type pipeline_execution_id: str
        """
        if pipeline_execution_id is None:
            raise ValueError("Invalid value for `pipeline_execution_id`, must not be `None`")

        self._pipeline_execution_id = pipeline_execution_id

    @property
    def status(self):
        """Gets the status of this StageExecution.


        :return: The status of this StageExecution.
        :rtype: StageExecutionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StageExecution.


        :param status: The status of this StageExecution.
        :type status: StageExecutionStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
