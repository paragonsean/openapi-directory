# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_data_action_configuration import JobDataActionConfiguration
from openapi_server.models.job_data_artifact_credentials import JobDataArtifactCredentials
from openapi_server.models.job_data_encryption_key import JobDataEncryptionKey
from openapi_server.models.job_data_pipeline_context import JobDataPipelineContext
from openapi_server.models.poll_for_jobs_input_action_type_id import PollForJobsInputActionTypeId
from openapi_server import util


class JobData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_type_id: PollForJobsInputActionTypeId=None, action_configuration: JobDataActionConfiguration=None, pipeline_context: JobDataPipelineContext=None, input_artifacts: List=None, output_artifacts: List=None, artifact_credentials: JobDataArtifactCredentials=None, continuation_token: str=None, encryption_key: JobDataEncryptionKey=None):
        """JobData - a model defined in OpenAPI

        :param action_type_id: The action_type_id of this JobData.
        :param action_configuration: The action_configuration of this JobData.
        :param pipeline_context: The pipeline_context of this JobData.
        :param input_artifacts: The input_artifacts of this JobData.
        :param output_artifacts: The output_artifacts of this JobData.
        :param artifact_credentials: The artifact_credentials of this JobData.
        :param continuation_token: The continuation_token of this JobData.
        :param encryption_key: The encryption_key of this JobData.
        """
        self.openapi_types = {
            'action_type_id': PollForJobsInputActionTypeId,
            'action_configuration': JobDataActionConfiguration,
            'pipeline_context': JobDataPipelineContext,
            'input_artifacts': List,
            'output_artifacts': List,
            'artifact_credentials': JobDataArtifactCredentials,
            'continuation_token': str,
            'encryption_key': JobDataEncryptionKey
        }

        self.attribute_map = {
            'action_type_id': 'actionTypeId',
            'action_configuration': 'actionConfiguration',
            'pipeline_context': 'pipelineContext',
            'input_artifacts': 'inputArtifacts',
            'output_artifacts': 'outputArtifacts',
            'artifact_credentials': 'artifactCredentials',
            'continuation_token': 'continuationToken',
            'encryption_key': 'encryptionKey'
        }

        self._action_type_id = action_type_id
        self._action_configuration = action_configuration
        self._pipeline_context = pipeline_context
        self._input_artifacts = input_artifacts
        self._output_artifacts = output_artifacts
        self._artifact_credentials = artifact_credentials
        self._continuation_token = continuation_token
        self._encryption_key = encryption_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Job_data of this JobData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_type_id(self):
        """Gets the action_type_id of this JobData.


        :return: The action_type_id of this JobData.
        :rtype: PollForJobsInputActionTypeId
        """
        return self._action_type_id

    @action_type_id.setter
    def action_type_id(self, action_type_id):
        """Sets the action_type_id of this JobData.


        :param action_type_id: The action_type_id of this JobData.
        :type action_type_id: PollForJobsInputActionTypeId
        """

        self._action_type_id = action_type_id

    @property
    def action_configuration(self):
        """Gets the action_configuration of this JobData.


        :return: The action_configuration of this JobData.
        :rtype: JobDataActionConfiguration
        """
        return self._action_configuration

    @action_configuration.setter
    def action_configuration(self, action_configuration):
        """Sets the action_configuration of this JobData.


        :param action_configuration: The action_configuration of this JobData.
        :type action_configuration: JobDataActionConfiguration
        """

        self._action_configuration = action_configuration

    @property
    def pipeline_context(self):
        """Gets the pipeline_context of this JobData.


        :return: The pipeline_context of this JobData.
        :rtype: JobDataPipelineContext
        """
        return self._pipeline_context

    @pipeline_context.setter
    def pipeline_context(self, pipeline_context):
        """Sets the pipeline_context of this JobData.


        :param pipeline_context: The pipeline_context of this JobData.
        :type pipeline_context: JobDataPipelineContext
        """

        self._pipeline_context = pipeline_context

    @property
    def input_artifacts(self):
        """Gets the input_artifacts of this JobData.


        :return: The input_artifacts of this JobData.
        :rtype: List
        """
        return self._input_artifacts

    @input_artifacts.setter
    def input_artifacts(self, input_artifacts):
        """Sets the input_artifacts of this JobData.


        :param input_artifacts: The input_artifacts of this JobData.
        :type input_artifacts: List
        """

        self._input_artifacts = input_artifacts

    @property
    def output_artifacts(self):
        """Gets the output_artifacts of this JobData.


        :return: The output_artifacts of this JobData.
        :rtype: List
        """
        return self._output_artifacts

    @output_artifacts.setter
    def output_artifacts(self, output_artifacts):
        """Sets the output_artifacts of this JobData.


        :param output_artifacts: The output_artifacts of this JobData.
        :type output_artifacts: List
        """

        self._output_artifacts = output_artifacts

    @property
    def artifact_credentials(self):
        """Gets the artifact_credentials of this JobData.


        :return: The artifact_credentials of this JobData.
        :rtype: JobDataArtifactCredentials
        """
        return self._artifact_credentials

    @artifact_credentials.setter
    def artifact_credentials(self, artifact_credentials):
        """Sets the artifact_credentials of this JobData.


        :param artifact_credentials: The artifact_credentials of this JobData.
        :type artifact_credentials: JobDataArtifactCredentials
        """

        self._artifact_credentials = artifact_credentials

    @property
    def continuation_token(self):
        """Gets the continuation_token of this JobData.


        :return: The continuation_token of this JobData.
        :rtype: str
        """
        return self._continuation_token

    @continuation_token.setter
    def continuation_token(self, continuation_token):
        """Sets the continuation_token of this JobData.


        :param continuation_token: The continuation_token of this JobData.
        :type continuation_token: str
        """

        self._continuation_token = continuation_token

    @property
    def encryption_key(self):
        """Gets the encryption_key of this JobData.


        :return: The encryption_key of this JobData.
        :rtype: JobDataEncryptionKey
        """
        return self._encryption_key

    @encryption_key.setter
    def encryption_key(self, encryption_key):
        """Sets the encryption_key of this JobData.


        :param encryption_key: The encryption_key of this JobData.
        :type encryption_key: JobDataEncryptionKey
        """

        self._encryption_key = encryption_key
