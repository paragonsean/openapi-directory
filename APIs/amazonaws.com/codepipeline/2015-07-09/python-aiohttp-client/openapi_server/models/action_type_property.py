# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ActionTypeProperty(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, optional: bool=None, key: bool=None, no_echo: bool=None, queryable: bool=None, description: str=None):
        """ActionTypeProperty - a model defined in OpenAPI

        :param name: The name of this ActionTypeProperty.
        :param optional: The optional of this ActionTypeProperty.
        :param key: The key of this ActionTypeProperty.
        :param no_echo: The no_echo of this ActionTypeProperty.
        :param queryable: The queryable of this ActionTypeProperty.
        :param description: The description of this ActionTypeProperty.
        """
        self.openapi_types = {
            'name': str,
            'optional': bool,
            'key': bool,
            'no_echo': bool,
            'queryable': bool,
            'description': str
        }

        self.attribute_map = {
            'name': 'name',
            'optional': 'optional',
            'key': 'key',
            'no_echo': 'noEcho',
            'queryable': 'queryable',
            'description': 'description'
        }

        self._name = name
        self._optional = optional
        self._key = key
        self._no_echo = no_echo
        self._queryable = queryable
        self._description = description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionTypeProperty':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActionTypeProperty of this ActionTypeProperty.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ActionTypeProperty.


        :return: The name of this ActionTypeProperty.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ActionTypeProperty.


        :param name: The name of this ActionTypeProperty.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def optional(self):
        """Gets the optional of this ActionTypeProperty.


        :return: The optional of this ActionTypeProperty.
        :rtype: bool
        """
        return self._optional

    @optional.setter
    def optional(self, optional):
        """Sets the optional of this ActionTypeProperty.


        :param optional: The optional of this ActionTypeProperty.
        :type optional: bool
        """
        if optional is None:
            raise ValueError("Invalid value for `optional`, must not be `None`")

        self._optional = optional

    @property
    def key(self):
        """Gets the key of this ActionTypeProperty.


        :return: The key of this ActionTypeProperty.
        :rtype: bool
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ActionTypeProperty.


        :param key: The key of this ActionTypeProperty.
        :type key: bool
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def no_echo(self):
        """Gets the no_echo of this ActionTypeProperty.


        :return: The no_echo of this ActionTypeProperty.
        :rtype: bool
        """
        return self._no_echo

    @no_echo.setter
    def no_echo(self, no_echo):
        """Sets the no_echo of this ActionTypeProperty.


        :param no_echo: The no_echo of this ActionTypeProperty.
        :type no_echo: bool
        """
        if no_echo is None:
            raise ValueError("Invalid value for `no_echo`, must not be `None`")

        self._no_echo = no_echo

    @property
    def queryable(self):
        """Gets the queryable of this ActionTypeProperty.


        :return: The queryable of this ActionTypeProperty.
        :rtype: bool
        """
        return self._queryable

    @queryable.setter
    def queryable(self, queryable):
        """Sets the queryable of this ActionTypeProperty.


        :param queryable: The queryable of this ActionTypeProperty.
        :type queryable: bool
        """

        self._queryable = queryable

    @property
    def description(self):
        """Gets the description of this ActionTypeProperty.


        :return: The description of this ActionTypeProperty.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ActionTypeProperty.


        :param description: The description of this ActionTypeProperty.
        :type description: str
        """

        self._description = description
