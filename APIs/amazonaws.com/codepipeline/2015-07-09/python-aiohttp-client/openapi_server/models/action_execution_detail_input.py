# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action_type_id import ActionTypeId
from openapi_server import util


class ActionExecutionDetailInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_type_id: ActionTypeId=None, configuration: Dict=None, resolved_configuration: Dict=None, role_arn: str=None, region: str=None, input_artifacts: List=None, namespace: str=None):
        """ActionExecutionDetailInput - a model defined in OpenAPI

        :param action_type_id: The action_type_id of this ActionExecutionDetailInput.
        :param configuration: The configuration of this ActionExecutionDetailInput.
        :param resolved_configuration: The resolved_configuration of this ActionExecutionDetailInput.
        :param role_arn: The role_arn of this ActionExecutionDetailInput.
        :param region: The region of this ActionExecutionDetailInput.
        :param input_artifacts: The input_artifacts of this ActionExecutionDetailInput.
        :param namespace: The namespace of this ActionExecutionDetailInput.
        """
        self.openapi_types = {
            'action_type_id': ActionTypeId,
            'configuration': Dict,
            'resolved_configuration': Dict,
            'role_arn': str,
            'region': str,
            'input_artifacts': List,
            'namespace': str
        }

        self.attribute_map = {
            'action_type_id': 'actionTypeId',
            'configuration': 'configuration',
            'resolved_configuration': 'resolvedConfiguration',
            'role_arn': 'roleArn',
            'region': 'region',
            'input_artifacts': 'inputArtifacts',
            'namespace': 'namespace'
        }

        self._action_type_id = action_type_id
        self._configuration = configuration
        self._resolved_configuration = resolved_configuration
        self._role_arn = role_arn
        self._region = region
        self._input_artifacts = input_artifacts
        self._namespace = namespace

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionExecutionDetailInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActionExecutionDetail_input of this ActionExecutionDetailInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_type_id(self):
        """Gets the action_type_id of this ActionExecutionDetailInput.


        :return: The action_type_id of this ActionExecutionDetailInput.
        :rtype: ActionTypeId
        """
        return self._action_type_id

    @action_type_id.setter
    def action_type_id(self, action_type_id):
        """Sets the action_type_id of this ActionExecutionDetailInput.


        :param action_type_id: The action_type_id of this ActionExecutionDetailInput.
        :type action_type_id: ActionTypeId
        """

        self._action_type_id = action_type_id

    @property
    def configuration(self):
        """Gets the configuration of this ActionExecutionDetailInput.


        :return: The configuration of this ActionExecutionDetailInput.
        :rtype: Dict
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this ActionExecutionDetailInput.


        :param configuration: The configuration of this ActionExecutionDetailInput.
        :type configuration: Dict
        """

        self._configuration = configuration

    @property
    def resolved_configuration(self):
        """Gets the resolved_configuration of this ActionExecutionDetailInput.


        :return: The resolved_configuration of this ActionExecutionDetailInput.
        :rtype: Dict
        """
        return self._resolved_configuration

    @resolved_configuration.setter
    def resolved_configuration(self, resolved_configuration):
        """Sets the resolved_configuration of this ActionExecutionDetailInput.


        :param resolved_configuration: The resolved_configuration of this ActionExecutionDetailInput.
        :type resolved_configuration: Dict
        """

        self._resolved_configuration = resolved_configuration

    @property
    def role_arn(self):
        """Gets the role_arn of this ActionExecutionDetailInput.


        :return: The role_arn of this ActionExecutionDetailInput.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this ActionExecutionDetailInput.


        :param role_arn: The role_arn of this ActionExecutionDetailInput.
        :type role_arn: str
        """

        self._role_arn = role_arn

    @property
    def region(self):
        """Gets the region of this ActionExecutionDetailInput.


        :return: The region of this ActionExecutionDetailInput.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this ActionExecutionDetailInput.


        :param region: The region of this ActionExecutionDetailInput.
        :type region: str
        """

        self._region = region

    @property
    def input_artifacts(self):
        """Gets the input_artifacts of this ActionExecutionDetailInput.


        :return: The input_artifacts of this ActionExecutionDetailInput.
        :rtype: List
        """
        return self._input_artifacts

    @input_artifacts.setter
    def input_artifacts(self, input_artifacts):
        """Sets the input_artifacts of this ActionExecutionDetailInput.


        :param input_artifacts: The input_artifacts of this ActionExecutionDetailInput.
        :type input_artifacts: List
        """

        self._input_artifacts = input_artifacts

    @property
    def namespace(self):
        """Gets the namespace of this ActionExecutionDetailInput.


        :return: The namespace of this ActionExecutionDetailInput.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this ActionExecutionDetailInput.


        :param namespace: The namespace of this ActionExecutionDetailInput.
        :type namespace: str
        """

        self._namespace = namespace
