# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StopPipelineExecutionInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pipeline_name: str=None, pipeline_execution_id: str=None, abandon: bool=None, reason: str=None):
        """StopPipelineExecutionInput - a model defined in OpenAPI

        :param pipeline_name: The pipeline_name of this StopPipelineExecutionInput.
        :param pipeline_execution_id: The pipeline_execution_id of this StopPipelineExecutionInput.
        :param abandon: The abandon of this StopPipelineExecutionInput.
        :param reason: The reason of this StopPipelineExecutionInput.
        """
        self.openapi_types = {
            'pipeline_name': str,
            'pipeline_execution_id': str,
            'abandon': bool,
            'reason': str
        }

        self.attribute_map = {
            'pipeline_name': 'pipelineName',
            'pipeline_execution_id': 'pipelineExecutionId',
            'abandon': 'abandon',
            'reason': 'reason'
        }

        self._pipeline_name = pipeline_name
        self._pipeline_execution_id = pipeline_execution_id
        self._abandon = abandon
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StopPipelineExecutionInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StopPipelineExecutionInput of this StopPipelineExecutionInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pipeline_name(self):
        """Gets the pipeline_name of this StopPipelineExecutionInput.


        :return: The pipeline_name of this StopPipelineExecutionInput.
        :rtype: str
        """
        return self._pipeline_name

    @pipeline_name.setter
    def pipeline_name(self, pipeline_name):
        """Sets the pipeline_name of this StopPipelineExecutionInput.


        :param pipeline_name: The pipeline_name of this StopPipelineExecutionInput.
        :type pipeline_name: str
        """
        if pipeline_name is None:
            raise ValueError("Invalid value for `pipeline_name`, must not be `None`")

        self._pipeline_name = pipeline_name

    @property
    def pipeline_execution_id(self):
        """Gets the pipeline_execution_id of this StopPipelineExecutionInput.


        :return: The pipeline_execution_id of this StopPipelineExecutionInput.
        :rtype: str
        """
        return self._pipeline_execution_id

    @pipeline_execution_id.setter
    def pipeline_execution_id(self, pipeline_execution_id):
        """Sets the pipeline_execution_id of this StopPipelineExecutionInput.


        :param pipeline_execution_id: The pipeline_execution_id of this StopPipelineExecutionInput.
        :type pipeline_execution_id: str
        """
        if pipeline_execution_id is None:
            raise ValueError("Invalid value for `pipeline_execution_id`, must not be `None`")

        self._pipeline_execution_id = pipeline_execution_id

    @property
    def abandon(self):
        """Gets the abandon of this StopPipelineExecutionInput.


        :return: The abandon of this StopPipelineExecutionInput.
        :rtype: bool
        """
        return self._abandon

    @abandon.setter
    def abandon(self, abandon):
        """Sets the abandon of this StopPipelineExecutionInput.


        :param abandon: The abandon of this StopPipelineExecutionInput.
        :type abandon: bool
        """

        self._abandon = abandon

    @property
    def reason(self):
        """Gets the reason of this StopPipelineExecutionInput.


        :return: The reason of this StopPipelineExecutionInput.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this StopPipelineExecutionInput.


        :param reason: The reason of this StopPipelineExecutionInput.
        :type reason: str
        """

        self._reason = reason
