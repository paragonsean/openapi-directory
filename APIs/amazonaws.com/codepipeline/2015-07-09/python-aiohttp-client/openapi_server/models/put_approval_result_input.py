# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.put_approval_result_input_result import PutApprovalResultInputResult
from openapi_server import util


class PutApprovalResultInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pipeline_name: str=None, stage_name: str=None, action_name: str=None, result: PutApprovalResultInputResult=None, token: str=None):
        """PutApprovalResultInput - a model defined in OpenAPI

        :param pipeline_name: The pipeline_name of this PutApprovalResultInput.
        :param stage_name: The stage_name of this PutApprovalResultInput.
        :param action_name: The action_name of this PutApprovalResultInput.
        :param result: The result of this PutApprovalResultInput.
        :param token: The token of this PutApprovalResultInput.
        """
        self.openapi_types = {
            'pipeline_name': str,
            'stage_name': str,
            'action_name': str,
            'result': PutApprovalResultInputResult,
            'token': str
        }

        self.attribute_map = {
            'pipeline_name': 'pipelineName',
            'stage_name': 'stageName',
            'action_name': 'actionName',
            'result': 'result',
            'token': 'token'
        }

        self._pipeline_name = pipeline_name
        self._stage_name = stage_name
        self._action_name = action_name
        self._result = result
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutApprovalResultInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutApprovalResultInput of this PutApprovalResultInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pipeline_name(self):
        """Gets the pipeline_name of this PutApprovalResultInput.


        :return: The pipeline_name of this PutApprovalResultInput.
        :rtype: str
        """
        return self._pipeline_name

    @pipeline_name.setter
    def pipeline_name(self, pipeline_name):
        """Sets the pipeline_name of this PutApprovalResultInput.


        :param pipeline_name: The pipeline_name of this PutApprovalResultInput.
        :type pipeline_name: str
        """
        if pipeline_name is None:
            raise ValueError("Invalid value for `pipeline_name`, must not be `None`")

        self._pipeline_name = pipeline_name

    @property
    def stage_name(self):
        """Gets the stage_name of this PutApprovalResultInput.


        :return: The stage_name of this PutApprovalResultInput.
        :rtype: str
        """
        return self._stage_name

    @stage_name.setter
    def stage_name(self, stage_name):
        """Sets the stage_name of this PutApprovalResultInput.


        :param stage_name: The stage_name of this PutApprovalResultInput.
        :type stage_name: str
        """
        if stage_name is None:
            raise ValueError("Invalid value for `stage_name`, must not be `None`")

        self._stage_name = stage_name

    @property
    def action_name(self):
        """Gets the action_name of this PutApprovalResultInput.


        :return: The action_name of this PutApprovalResultInput.
        :rtype: str
        """
        return self._action_name

    @action_name.setter
    def action_name(self, action_name):
        """Sets the action_name of this PutApprovalResultInput.


        :param action_name: The action_name of this PutApprovalResultInput.
        :type action_name: str
        """
        if action_name is None:
            raise ValueError("Invalid value for `action_name`, must not be `None`")

        self._action_name = action_name

    @property
    def result(self):
        """Gets the result of this PutApprovalResultInput.


        :return: The result of this PutApprovalResultInput.
        :rtype: PutApprovalResultInputResult
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this PutApprovalResultInput.


        :param result: The result of this PutApprovalResultInput.
        :type result: PutApprovalResultInputResult
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")

        self._result = result

    @property
    def token(self):
        """Gets the token of this PutApprovalResultInput.


        :return: The token of this PutApprovalResultInput.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this PutApprovalResultInput.


        :param token: The token of this PutApprovalResultInput.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token
