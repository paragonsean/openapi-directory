# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action_configuration_property_type import ActionConfigurationPropertyType
from openapi_server import util


class ActionConfigurationProperty(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, required: bool=None, key: bool=None, secret: bool=None, queryable: bool=None, description: str=None, type: ActionConfigurationPropertyType=None):
        """ActionConfigurationProperty - a model defined in OpenAPI

        :param name: The name of this ActionConfigurationProperty.
        :param required: The required of this ActionConfigurationProperty.
        :param key: The key of this ActionConfigurationProperty.
        :param secret: The secret of this ActionConfigurationProperty.
        :param queryable: The queryable of this ActionConfigurationProperty.
        :param description: The description of this ActionConfigurationProperty.
        :param type: The type of this ActionConfigurationProperty.
        """
        self.openapi_types = {
            'name': str,
            'required': bool,
            'key': bool,
            'secret': bool,
            'queryable': bool,
            'description': str,
            'type': ActionConfigurationPropertyType
        }

        self.attribute_map = {
            'name': 'name',
            'required': 'required',
            'key': 'key',
            'secret': 'secret',
            'queryable': 'queryable',
            'description': 'description',
            'type': 'type'
        }

        self._name = name
        self._required = required
        self._key = key
        self._secret = secret
        self._queryable = queryable
        self._description = description
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionConfigurationProperty':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActionConfigurationProperty of this ActionConfigurationProperty.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ActionConfigurationProperty.


        :return: The name of this ActionConfigurationProperty.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ActionConfigurationProperty.


        :param name: The name of this ActionConfigurationProperty.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def required(self):
        """Gets the required of this ActionConfigurationProperty.


        :return: The required of this ActionConfigurationProperty.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this ActionConfigurationProperty.


        :param required: The required of this ActionConfigurationProperty.
        :type required: bool
        """
        if required is None:
            raise ValueError("Invalid value for `required`, must not be `None`")

        self._required = required

    @property
    def key(self):
        """Gets the key of this ActionConfigurationProperty.


        :return: The key of this ActionConfigurationProperty.
        :rtype: bool
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ActionConfigurationProperty.


        :param key: The key of this ActionConfigurationProperty.
        :type key: bool
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def secret(self):
        """Gets the secret of this ActionConfigurationProperty.


        :return: The secret of this ActionConfigurationProperty.
        :rtype: bool
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this ActionConfigurationProperty.


        :param secret: The secret of this ActionConfigurationProperty.
        :type secret: bool
        """
        if secret is None:
            raise ValueError("Invalid value for `secret`, must not be `None`")

        self._secret = secret

    @property
    def queryable(self):
        """Gets the queryable of this ActionConfigurationProperty.


        :return: The queryable of this ActionConfigurationProperty.
        :rtype: bool
        """
        return self._queryable

    @queryable.setter
    def queryable(self, queryable):
        """Sets the queryable of this ActionConfigurationProperty.


        :param queryable: The queryable of this ActionConfigurationProperty.
        :type queryable: bool
        """

        self._queryable = queryable

    @property
    def description(self):
        """Gets the description of this ActionConfigurationProperty.


        :return: The description of this ActionConfigurationProperty.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ActionConfigurationProperty.


        :param description: The description of this ActionConfigurationProperty.
        :type description: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this ActionConfigurationProperty.


        :return: The type of this ActionConfigurationProperty.
        :rtype: ActionConfigurationPropertyType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ActionConfigurationProperty.


        :param type: The type of this ActionConfigurationProperty.
        :type type: ActionConfigurationPropertyType
        """

        self._type = type
