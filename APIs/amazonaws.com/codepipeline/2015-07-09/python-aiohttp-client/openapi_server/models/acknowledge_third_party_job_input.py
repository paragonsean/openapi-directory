# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AcknowledgeThirdPartyJobInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_id: str=None, nonce: str=None, client_token: str=None):
        """AcknowledgeThirdPartyJobInput - a model defined in OpenAPI

        :param job_id: The job_id of this AcknowledgeThirdPartyJobInput.
        :param nonce: The nonce of this AcknowledgeThirdPartyJobInput.
        :param client_token: The client_token of this AcknowledgeThirdPartyJobInput.
        """
        self.openapi_types = {
            'job_id': str,
            'nonce': str,
            'client_token': str
        }

        self.attribute_map = {
            'job_id': 'jobId',
            'nonce': 'nonce',
            'client_token': 'clientToken'
        }

        self._job_id = job_id
        self._nonce = nonce
        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AcknowledgeThirdPartyJobInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AcknowledgeThirdPartyJobInput of this AcknowledgeThirdPartyJobInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_id(self):
        """Gets the job_id of this AcknowledgeThirdPartyJobInput.


        :return: The job_id of this AcknowledgeThirdPartyJobInput.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this AcknowledgeThirdPartyJobInput.


        :param job_id: The job_id of this AcknowledgeThirdPartyJobInput.
        :type job_id: str
        """
        if job_id is None:
            raise ValueError("Invalid value for `job_id`, must not be `None`")

        self._job_id = job_id

    @property
    def nonce(self):
        """Gets the nonce of this AcknowledgeThirdPartyJobInput.


        :return: The nonce of this AcknowledgeThirdPartyJobInput.
        :rtype: str
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """Sets the nonce of this AcknowledgeThirdPartyJobInput.


        :param nonce: The nonce of this AcknowledgeThirdPartyJobInput.
        :type nonce: str
        """
        if nonce is None:
            raise ValueError("Invalid value for `nonce`, must not be `None`")

        self._nonce = nonce

    @property
    def client_token(self):
        """Gets the client_token of this AcknowledgeThirdPartyJobInput.


        :return: The client_token of this AcknowledgeThirdPartyJobInput.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this AcknowledgeThirdPartyJobInput.


        :param client_token: The client_token of this AcknowledgeThirdPartyJobInput.
        :type client_token: str
        """
        if client_token is None:
            raise ValueError("Invalid value for `client_token`, must not be `None`")

        self._client_token = client_token
