# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action_execution_error_details import ActionExecutionErrorDetails
from openapi_server.models.action_execution_status import ActionExecutionStatus
from openapi_server import util


class ActionExecution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_execution_id: str=None, status: ActionExecutionStatus=None, summary: str=None, last_status_change: datetime=None, token: str=None, last_updated_by: str=None, external_execution_id: str=None, external_execution_url: str=None, percent_complete: int=None, error_details: ActionExecutionErrorDetails=None):
        """ActionExecution - a model defined in OpenAPI

        :param action_execution_id: The action_execution_id of this ActionExecution.
        :param status: The status of this ActionExecution.
        :param summary: The summary of this ActionExecution.
        :param last_status_change: The last_status_change of this ActionExecution.
        :param token: The token of this ActionExecution.
        :param last_updated_by: The last_updated_by of this ActionExecution.
        :param external_execution_id: The external_execution_id of this ActionExecution.
        :param external_execution_url: The external_execution_url of this ActionExecution.
        :param percent_complete: The percent_complete of this ActionExecution.
        :param error_details: The error_details of this ActionExecution.
        """
        self.openapi_types = {
            'action_execution_id': str,
            'status': ActionExecutionStatus,
            'summary': str,
            'last_status_change': datetime,
            'token': str,
            'last_updated_by': str,
            'external_execution_id': str,
            'external_execution_url': str,
            'percent_complete': int,
            'error_details': ActionExecutionErrorDetails
        }

        self.attribute_map = {
            'action_execution_id': 'actionExecutionId',
            'status': 'status',
            'summary': 'summary',
            'last_status_change': 'lastStatusChange',
            'token': 'token',
            'last_updated_by': 'lastUpdatedBy',
            'external_execution_id': 'externalExecutionId',
            'external_execution_url': 'externalExecutionUrl',
            'percent_complete': 'percentComplete',
            'error_details': 'errorDetails'
        }

        self._action_execution_id = action_execution_id
        self._status = status
        self._summary = summary
        self._last_status_change = last_status_change
        self._token = token
        self._last_updated_by = last_updated_by
        self._external_execution_id = external_execution_id
        self._external_execution_url = external_execution_url
        self._percent_complete = percent_complete
        self._error_details = error_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionExecution':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActionExecution of this ActionExecution.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_execution_id(self):
        """Gets the action_execution_id of this ActionExecution.


        :return: The action_execution_id of this ActionExecution.
        :rtype: str
        """
        return self._action_execution_id

    @action_execution_id.setter
    def action_execution_id(self, action_execution_id):
        """Sets the action_execution_id of this ActionExecution.


        :param action_execution_id: The action_execution_id of this ActionExecution.
        :type action_execution_id: str
        """

        self._action_execution_id = action_execution_id

    @property
    def status(self):
        """Gets the status of this ActionExecution.


        :return: The status of this ActionExecution.
        :rtype: ActionExecutionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ActionExecution.


        :param status: The status of this ActionExecution.
        :type status: ActionExecutionStatus
        """

        self._status = status

    @property
    def summary(self):
        """Gets the summary of this ActionExecution.


        :return: The summary of this ActionExecution.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this ActionExecution.


        :param summary: The summary of this ActionExecution.
        :type summary: str
        """

        self._summary = summary

    @property
    def last_status_change(self):
        """Gets the last_status_change of this ActionExecution.


        :return: The last_status_change of this ActionExecution.
        :rtype: datetime
        """
        return self._last_status_change

    @last_status_change.setter
    def last_status_change(self, last_status_change):
        """Sets the last_status_change of this ActionExecution.


        :param last_status_change: The last_status_change of this ActionExecution.
        :type last_status_change: datetime
        """

        self._last_status_change = last_status_change

    @property
    def token(self):
        """Gets the token of this ActionExecution.


        :return: The token of this ActionExecution.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this ActionExecution.


        :param token: The token of this ActionExecution.
        :type token: str
        """

        self._token = token

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this ActionExecution.


        :return: The last_updated_by of this ActionExecution.
        :rtype: str
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this ActionExecution.


        :param last_updated_by: The last_updated_by of this ActionExecution.
        :type last_updated_by: str
        """

        self._last_updated_by = last_updated_by

    @property
    def external_execution_id(self):
        """Gets the external_execution_id of this ActionExecution.


        :return: The external_execution_id of this ActionExecution.
        :rtype: str
        """
        return self._external_execution_id

    @external_execution_id.setter
    def external_execution_id(self, external_execution_id):
        """Sets the external_execution_id of this ActionExecution.


        :param external_execution_id: The external_execution_id of this ActionExecution.
        :type external_execution_id: str
        """

        self._external_execution_id = external_execution_id

    @property
    def external_execution_url(self):
        """Gets the external_execution_url of this ActionExecution.


        :return: The external_execution_url of this ActionExecution.
        :rtype: str
        """
        return self._external_execution_url

    @external_execution_url.setter
    def external_execution_url(self, external_execution_url):
        """Sets the external_execution_url of this ActionExecution.


        :param external_execution_url: The external_execution_url of this ActionExecution.
        :type external_execution_url: str
        """

        self._external_execution_url = external_execution_url

    @property
    def percent_complete(self):
        """Gets the percent_complete of this ActionExecution.


        :return: The percent_complete of this ActionExecution.
        :rtype: int
        """
        return self._percent_complete

    @percent_complete.setter
    def percent_complete(self, percent_complete):
        """Sets the percent_complete of this ActionExecution.


        :param percent_complete: The percent_complete of this ActionExecution.
        :type percent_complete: int
        """

        self._percent_complete = percent_complete

    @property
    def error_details(self):
        """Gets the error_details of this ActionExecution.


        :return: The error_details of this ActionExecution.
        :rtype: ActionExecutionErrorDetails
        """
        return self._error_details

    @error_details.setter
    def error_details(self, error_details):
        """Sets the error_details of this ActionExecution.


        :param error_details: The error_details of this ActionExecution.
        :type error_details: ActionExecutionErrorDetails
        """

        self._error_details = error_details
