# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StageDeclaration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, blockers: List=None, actions: List=None):
        """StageDeclaration - a model defined in OpenAPI

        :param name: The name of this StageDeclaration.
        :param blockers: The blockers of this StageDeclaration.
        :param actions: The actions of this StageDeclaration.
        """
        self.openapi_types = {
            'name': str,
            'blockers': List,
            'actions': List
        }

        self.attribute_map = {
            'name': 'name',
            'blockers': 'blockers',
            'actions': 'actions'
        }

        self._name = name
        self._blockers = blockers
        self._actions = actions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StageDeclaration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StageDeclaration of this StageDeclaration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this StageDeclaration.


        :return: The name of this StageDeclaration.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StageDeclaration.


        :param name: The name of this StageDeclaration.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def blockers(self):
        """Gets the blockers of this StageDeclaration.


        :return: The blockers of this StageDeclaration.
        :rtype: List
        """
        return self._blockers

    @blockers.setter
    def blockers(self, blockers):
        """Sets the blockers of this StageDeclaration.


        :param blockers: The blockers of this StageDeclaration.
        :type blockers: List
        """

        self._blockers = blockers

    @property
    def actions(self):
        """Gets the actions of this StageDeclaration.


        :return: The actions of this StageDeclaration.
        :rtype: List
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this StageDeclaration.


        :param actions: The actions of this StageDeclaration.
        :type actions: List
        """
        if actions is None:
            raise ValueError("Invalid value for `actions`, must not be `None`")

        self._actions = actions
