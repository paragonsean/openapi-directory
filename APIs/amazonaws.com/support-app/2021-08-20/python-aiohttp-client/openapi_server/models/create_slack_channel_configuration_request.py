# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateSlackChannelConfigurationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_id: str=None, channel_name: str=None, channel_role_arn: str=None, notify_on_add_correspondence_to_case: bool=None, notify_on_case_severity: str=None, notify_on_create_or_reopen_case: bool=None, notify_on_resolve_case: bool=None, team_id: str=None):
        """CreateSlackChannelConfigurationRequest - a model defined in OpenAPI

        :param channel_id: The channel_id of this CreateSlackChannelConfigurationRequest.
        :param channel_name: The channel_name of this CreateSlackChannelConfigurationRequest.
        :param channel_role_arn: The channel_role_arn of this CreateSlackChannelConfigurationRequest.
        :param notify_on_add_correspondence_to_case: The notify_on_add_correspondence_to_case of this CreateSlackChannelConfigurationRequest.
        :param notify_on_case_severity: The notify_on_case_severity of this CreateSlackChannelConfigurationRequest.
        :param notify_on_create_or_reopen_case: The notify_on_create_or_reopen_case of this CreateSlackChannelConfigurationRequest.
        :param notify_on_resolve_case: The notify_on_resolve_case of this CreateSlackChannelConfigurationRequest.
        :param team_id: The team_id of this CreateSlackChannelConfigurationRequest.
        """
        self.openapi_types = {
            'channel_id': str,
            'channel_name': str,
            'channel_role_arn': str,
            'notify_on_add_correspondence_to_case': bool,
            'notify_on_case_severity': str,
            'notify_on_create_or_reopen_case': bool,
            'notify_on_resolve_case': bool,
            'team_id': str
        }

        self.attribute_map = {
            'channel_id': 'channelId',
            'channel_name': 'channelName',
            'channel_role_arn': 'channelRoleArn',
            'notify_on_add_correspondence_to_case': 'notifyOnAddCorrespondenceToCase',
            'notify_on_case_severity': 'notifyOnCaseSeverity',
            'notify_on_create_or_reopen_case': 'notifyOnCreateOrReopenCase',
            'notify_on_resolve_case': 'notifyOnResolveCase',
            'team_id': 'teamId'
        }

        self._channel_id = channel_id
        self._channel_name = channel_name
        self._channel_role_arn = channel_role_arn
        self._notify_on_add_correspondence_to_case = notify_on_add_correspondence_to_case
        self._notify_on_case_severity = notify_on_case_severity
        self._notify_on_create_or_reopen_case = notify_on_create_or_reopen_case
        self._notify_on_resolve_case = notify_on_resolve_case
        self._team_id = team_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSlackChannelConfigurationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSlackChannelConfiguration_request of this CreateSlackChannelConfigurationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_id(self):
        """Gets the channel_id of this CreateSlackChannelConfigurationRequest.

        The channel ID in Slack. This ID identifies a channel within a Slack workspace.

        :return: The channel_id of this CreateSlackChannelConfigurationRequest.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this CreateSlackChannelConfigurationRequest.

        The channel ID in Slack. This ID identifies a channel within a Slack workspace.

        :param channel_id: The channel_id of this CreateSlackChannelConfigurationRequest.
        :type channel_id: str
        """
        if channel_id is None:
            raise ValueError("Invalid value for `channel_id`, must not be `None`")
        if channel_id is not None and len(channel_id) > 256:
            raise ValueError("Invalid value for `channel_id`, length must be less than or equal to `256`")
        if channel_id is not None and len(channel_id) < 1:
            raise ValueError("Invalid value for `channel_id`, length must be greater than or equal to `1`")
        if channel_id is not None and not re.search(r'^\S+$', channel_id):
            raise ValueError("Invalid value for `channel_id`, must be a follow pattern or equal to `/^\S+$/`")

        self._channel_id = channel_id

    @property
    def channel_name(self):
        """Gets the channel_name of this CreateSlackChannelConfigurationRequest.

        The name of the Slack channel that you configure for the Amazon Web Services Support App.

        :return: The channel_name of this CreateSlackChannelConfigurationRequest.
        :rtype: str
        """
        return self._channel_name

    @channel_name.setter
    def channel_name(self, channel_name):
        """Sets the channel_name of this CreateSlackChannelConfigurationRequest.

        The name of the Slack channel that you configure for the Amazon Web Services Support App.

        :param channel_name: The channel_name of this CreateSlackChannelConfigurationRequest.
        :type channel_name: str
        """
        if channel_name is not None and len(channel_name) > 256:
            raise ValueError("Invalid value for `channel_name`, length must be less than or equal to `256`")
        if channel_name is not None and len(channel_name) < 1:
            raise ValueError("Invalid value for `channel_name`, length must be greater than or equal to `1`")
        if channel_name is not None and not re.search(r'^.+$', channel_name):
            raise ValueError("Invalid value for `channel_name`, must be a follow pattern or equal to `/^.+$/`")

        self._channel_name = channel_name

    @property
    def channel_role_arn(self):
        """Gets the channel_role_arn of this CreateSlackChannelConfigurationRequest.

        The Amazon Resource Name (ARN) of an IAM role that you want to use to perform operations on Amazon Web Services. For more information, see <a href=\"https://docs.aws.amazon.com/awssupport/latest/user/support-app-permissions.html\">Managing access to the Amazon Web Services Support App</a> in the <i>Amazon Web Services Support User Guide</i>.

        :return: The channel_role_arn of this CreateSlackChannelConfigurationRequest.
        :rtype: str
        """
        return self._channel_role_arn

    @channel_role_arn.setter
    def channel_role_arn(self, channel_role_arn):
        """Sets the channel_role_arn of this CreateSlackChannelConfigurationRequest.

        The Amazon Resource Name (ARN) of an IAM role that you want to use to perform operations on Amazon Web Services. For more information, see <a href=\"https://docs.aws.amazon.com/awssupport/latest/user/support-app-permissions.html\">Managing access to the Amazon Web Services Support App</a> in the <i>Amazon Web Services Support User Guide</i>.

        :param channel_role_arn: The channel_role_arn of this CreateSlackChannelConfigurationRequest.
        :type channel_role_arn: str
        """
        if channel_role_arn is None:
            raise ValueError("Invalid value for `channel_role_arn`, must not be `None`")
        if channel_role_arn is not None and len(channel_role_arn) > 2048:
            raise ValueError("Invalid value for `channel_role_arn`, length must be less than or equal to `2048`")
        if channel_role_arn is not None and len(channel_role_arn) < 31:
            raise ValueError("Invalid value for `channel_role_arn`, length must be greater than or equal to `31`")
        if channel_role_arn is not None and not re.search(r'^arn:aws:iam::[0-9]{12}:role\/(.+)$', channel_role_arn):
            raise ValueError("Invalid value for `channel_role_arn`, must be a follow pattern or equal to `/^arn:aws:iam::[0-9]{12}:role\/(.+)$/`")

        self._channel_role_arn = channel_role_arn

    @property
    def notify_on_add_correspondence_to_case(self):
        """Gets the notify_on_add_correspondence_to_case of this CreateSlackChannelConfigurationRequest.

        Whether you want to get notified when a support case has a new correspondence.

        :return: The notify_on_add_correspondence_to_case of this CreateSlackChannelConfigurationRequest.
        :rtype: bool
        """
        return self._notify_on_add_correspondence_to_case

    @notify_on_add_correspondence_to_case.setter
    def notify_on_add_correspondence_to_case(self, notify_on_add_correspondence_to_case):
        """Sets the notify_on_add_correspondence_to_case of this CreateSlackChannelConfigurationRequest.

        Whether you want to get notified when a support case has a new correspondence.

        :param notify_on_add_correspondence_to_case: The notify_on_add_correspondence_to_case of this CreateSlackChannelConfigurationRequest.
        :type notify_on_add_correspondence_to_case: bool
        """

        self._notify_on_add_correspondence_to_case = notify_on_add_correspondence_to_case

    @property
    def notify_on_case_severity(self):
        """Gets the notify_on_case_severity of this CreateSlackChannelConfigurationRequest.

        <p>The case severity for a support case that you want to receive notifications.</p> <p>If you specify <code>high</code> or <code>all</code>, you must specify <code>true</code> for at least one of the following parameters:</p> <ul> <li> <p> <code>notifyOnAddCorrespondenceToCase</code> </p> </li> <li> <p> <code>notifyOnCreateOrReopenCase</code> </p> </li> <li> <p> <code>notifyOnResolveCase</code> </p> </li> </ul> <p>If you specify <code>none</code>, the following parameters must be null or <code>false</code>:</p> <ul> <li> <p> <code>notifyOnAddCorrespondenceToCase</code> </p> </li> <li> <p> <code>notifyOnCreateOrReopenCase</code> </p> </li> <li> <p> <code>notifyOnResolveCase</code> </p> </li> </ul> <note> <p>If you don't specify these parameters in your request, they default to <code>false</code>.</p> </note>

        :return: The notify_on_case_severity of this CreateSlackChannelConfigurationRequest.
        :rtype: str
        """
        return self._notify_on_case_severity

    @notify_on_case_severity.setter
    def notify_on_case_severity(self, notify_on_case_severity):
        """Sets the notify_on_case_severity of this CreateSlackChannelConfigurationRequest.

        <p>The case severity for a support case that you want to receive notifications.</p> <p>If you specify <code>high</code> or <code>all</code>, you must specify <code>true</code> for at least one of the following parameters:</p> <ul> <li> <p> <code>notifyOnAddCorrespondenceToCase</code> </p> </li> <li> <p> <code>notifyOnCreateOrReopenCase</code> </p> </li> <li> <p> <code>notifyOnResolveCase</code> </p> </li> </ul> <p>If you specify <code>none</code>, the following parameters must be null or <code>false</code>:</p> <ul> <li> <p> <code>notifyOnAddCorrespondenceToCase</code> </p> </li> <li> <p> <code>notifyOnCreateOrReopenCase</code> </p> </li> <li> <p> <code>notifyOnResolveCase</code> </p> </li> </ul> <note> <p>If you don't specify these parameters in your request, they default to <code>false</code>.</p> </note>

        :param notify_on_case_severity: The notify_on_case_severity of this CreateSlackChannelConfigurationRequest.
        :type notify_on_case_severity: str
        """
        allowed_values = ["none", "all", "high"]  # noqa: E501
        if notify_on_case_severity not in allowed_values:
            raise ValueError(
                "Invalid value for `notify_on_case_severity` ({0}), must be one of {1}"
                .format(notify_on_case_severity, allowed_values)
            )

        self._notify_on_case_severity = notify_on_case_severity

    @property
    def notify_on_create_or_reopen_case(self):
        """Gets the notify_on_create_or_reopen_case of this CreateSlackChannelConfigurationRequest.

        Whether you want to get notified when a support case is created or reopened.

        :return: The notify_on_create_or_reopen_case of this CreateSlackChannelConfigurationRequest.
        :rtype: bool
        """
        return self._notify_on_create_or_reopen_case

    @notify_on_create_or_reopen_case.setter
    def notify_on_create_or_reopen_case(self, notify_on_create_or_reopen_case):
        """Sets the notify_on_create_or_reopen_case of this CreateSlackChannelConfigurationRequest.

        Whether you want to get notified when a support case is created or reopened.

        :param notify_on_create_or_reopen_case: The notify_on_create_or_reopen_case of this CreateSlackChannelConfigurationRequest.
        :type notify_on_create_or_reopen_case: bool
        """

        self._notify_on_create_or_reopen_case = notify_on_create_or_reopen_case

    @property
    def notify_on_resolve_case(self):
        """Gets the notify_on_resolve_case of this CreateSlackChannelConfigurationRequest.

        Whether you want to get notified when a support case is resolved.

        :return: The notify_on_resolve_case of this CreateSlackChannelConfigurationRequest.
        :rtype: bool
        """
        return self._notify_on_resolve_case

    @notify_on_resolve_case.setter
    def notify_on_resolve_case(self, notify_on_resolve_case):
        """Sets the notify_on_resolve_case of this CreateSlackChannelConfigurationRequest.

        Whether you want to get notified when a support case is resolved.

        :param notify_on_resolve_case: The notify_on_resolve_case of this CreateSlackChannelConfigurationRequest.
        :type notify_on_resolve_case: bool
        """

        self._notify_on_resolve_case = notify_on_resolve_case

    @property
    def team_id(self):
        """Gets the team_id of this CreateSlackChannelConfigurationRequest.

        The team ID in Slack. This ID uniquely identifies a Slack workspace, such as <code>T012ABCDEFG</code>.

        :return: The team_id of this CreateSlackChannelConfigurationRequest.
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this CreateSlackChannelConfigurationRequest.

        The team ID in Slack. This ID uniquely identifies a Slack workspace, such as <code>T012ABCDEFG</code>.

        :param team_id: The team_id of this CreateSlackChannelConfigurationRequest.
        :type team_id: str
        """
        if team_id is None:
            raise ValueError("Invalid value for `team_id`, must not be `None`")
        if team_id is not None and len(team_id) > 256:
            raise ValueError("Invalid value for `team_id`, length must be less than or equal to `256`")
        if team_id is not None and len(team_id) < 1:
            raise ValueError("Invalid value for `team_id`, length must be greater than or equal to `1`")
        if team_id is not None and not re.search(r'^\S+$', team_id):
            raise ValueError("Invalid value for `team_id`, must be a follow pattern or equal to `/^\S+$/`")

        self._team_id = team_id
