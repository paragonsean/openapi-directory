# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class PutAccountAliasRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_alias: str=None):
        """PutAccountAliasRequest - a model defined in OpenAPI

        :param account_alias: The account_alias of this PutAccountAliasRequest.
        """
        self.openapi_types = {
            'account_alias': str
        }

        self.attribute_map = {
            'account_alias': 'accountAlias'
        }

        self._account_alias = account_alias

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutAccountAliasRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutAccountAlias_request of this PutAccountAliasRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_alias(self):
        """Gets the account_alias of this PutAccountAliasRequest.

        An alias or short name for an Amazon Web Services account.

        :return: The account_alias of this PutAccountAliasRequest.
        :rtype: str
        """
        return self._account_alias

    @account_alias.setter
    def account_alias(self, account_alias):
        """Sets the account_alias of this PutAccountAliasRequest.

        An alias or short name for an Amazon Web Services account.

        :param account_alias: The account_alias of this PutAccountAliasRequest.
        :type account_alias: str
        """
        if account_alias is None:
            raise ValueError("Invalid value for `account_alias`, must not be `None`")
        if account_alias is not None and len(account_alias) > 30:
            raise ValueError("Invalid value for `account_alias`, length must be less than or equal to `30`")
        if account_alias is not None and len(account_alias) < 1:
            raise ValueError("Invalid value for `account_alias`, length must be greater than or equal to `1`")
        if account_alias is not None and not re.search(r'^[\w\- ]+$', account_alias):
            raise ValueError("Invalid value for `account_alias`, must be a follow pattern or equal to `/^[\w\- ]+$/`")

        self._account_alias = account_alias
