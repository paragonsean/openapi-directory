# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class RegisterSlackWorkspaceForOrganizationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, team_id: str=None):
        """RegisterSlackWorkspaceForOrganizationRequest - a model defined in OpenAPI

        :param team_id: The team_id of this RegisterSlackWorkspaceForOrganizationRequest.
        """
        self.openapi_types = {
            'team_id': str
        }

        self.attribute_map = {
            'team_id': 'teamId'
        }

        self._team_id = team_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegisterSlackWorkspaceForOrganizationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegisterSlackWorkspaceForOrganization_request of this RegisterSlackWorkspaceForOrganizationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def team_id(self):
        """Gets the team_id of this RegisterSlackWorkspaceForOrganizationRequest.

        The team ID in Slack. This ID uniquely identifies a Slack workspace, such as <code>T012ABCDEFG</code>. Specify the Slack workspace that you want to use for your organization.

        :return: The team_id of this RegisterSlackWorkspaceForOrganizationRequest.
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this RegisterSlackWorkspaceForOrganizationRequest.

        The team ID in Slack. This ID uniquely identifies a Slack workspace, such as <code>T012ABCDEFG</code>. Specify the Slack workspace that you want to use for your organization.

        :param team_id: The team_id of this RegisterSlackWorkspaceForOrganizationRequest.
        :type team_id: str
        """
        if team_id is None:
            raise ValueError("Invalid value for `team_id`, must not be `None`")
        if team_id is not None and len(team_id) > 256:
            raise ValueError("Invalid value for `team_id`, length must be less than or equal to `256`")
        if team_id is not None and len(team_id) < 1:
            raise ValueError("Invalid value for `team_id`, length must be greater than or equal to `1`")
        if team_id is not None and not re.search(r'^\S+$', team_id):
            raise ValueError("Invalid value for `team_id`, must be a follow pattern or equal to `/^\S+$/`")

        self._team_id = team_id
