# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.notification_severity_level import NotificationSeverityLevel
from openapi_server import util


class SlackChannelConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_id: str=None, channel_name: str=None, channel_role_arn: str=None, notify_on_add_correspondence_to_case: bool=None, notify_on_case_severity: NotificationSeverityLevel=None, notify_on_create_or_reopen_case: bool=None, notify_on_resolve_case: bool=None, team_id: str=None):
        """SlackChannelConfiguration - a model defined in OpenAPI

        :param channel_id: The channel_id of this SlackChannelConfiguration.
        :param channel_name: The channel_name of this SlackChannelConfiguration.
        :param channel_role_arn: The channel_role_arn of this SlackChannelConfiguration.
        :param notify_on_add_correspondence_to_case: The notify_on_add_correspondence_to_case of this SlackChannelConfiguration.
        :param notify_on_case_severity: The notify_on_case_severity of this SlackChannelConfiguration.
        :param notify_on_create_or_reopen_case: The notify_on_create_or_reopen_case of this SlackChannelConfiguration.
        :param notify_on_resolve_case: The notify_on_resolve_case of this SlackChannelConfiguration.
        :param team_id: The team_id of this SlackChannelConfiguration.
        """
        self.openapi_types = {
            'channel_id': str,
            'channel_name': str,
            'channel_role_arn': str,
            'notify_on_add_correspondence_to_case': bool,
            'notify_on_case_severity': NotificationSeverityLevel,
            'notify_on_create_or_reopen_case': bool,
            'notify_on_resolve_case': bool,
            'team_id': str
        }

        self.attribute_map = {
            'channel_id': 'channelId',
            'channel_name': 'channelName',
            'channel_role_arn': 'channelRoleArn',
            'notify_on_add_correspondence_to_case': 'notifyOnAddCorrespondenceToCase',
            'notify_on_case_severity': 'notifyOnCaseSeverity',
            'notify_on_create_or_reopen_case': 'notifyOnCreateOrReopenCase',
            'notify_on_resolve_case': 'notifyOnResolveCase',
            'team_id': 'teamId'
        }

        self._channel_id = channel_id
        self._channel_name = channel_name
        self._channel_role_arn = channel_role_arn
        self._notify_on_add_correspondence_to_case = notify_on_add_correspondence_to_case
        self._notify_on_case_severity = notify_on_case_severity
        self._notify_on_create_or_reopen_case = notify_on_create_or_reopen_case
        self._notify_on_resolve_case = notify_on_resolve_case
        self._team_id = team_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SlackChannelConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SlackChannelConfiguration of this SlackChannelConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_id(self):
        """Gets the channel_id of this SlackChannelConfiguration.


        :return: The channel_id of this SlackChannelConfiguration.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this SlackChannelConfiguration.


        :param channel_id: The channel_id of this SlackChannelConfiguration.
        :type channel_id: str
        """
        if channel_id is None:
            raise ValueError("Invalid value for `channel_id`, must not be `None`")

        self._channel_id = channel_id

    @property
    def channel_name(self):
        """Gets the channel_name of this SlackChannelConfiguration.


        :return: The channel_name of this SlackChannelConfiguration.
        :rtype: str
        """
        return self._channel_name

    @channel_name.setter
    def channel_name(self, channel_name):
        """Sets the channel_name of this SlackChannelConfiguration.


        :param channel_name: The channel_name of this SlackChannelConfiguration.
        :type channel_name: str
        """

        self._channel_name = channel_name

    @property
    def channel_role_arn(self):
        """Gets the channel_role_arn of this SlackChannelConfiguration.


        :return: The channel_role_arn of this SlackChannelConfiguration.
        :rtype: str
        """
        return self._channel_role_arn

    @channel_role_arn.setter
    def channel_role_arn(self, channel_role_arn):
        """Sets the channel_role_arn of this SlackChannelConfiguration.


        :param channel_role_arn: The channel_role_arn of this SlackChannelConfiguration.
        :type channel_role_arn: str
        """

        self._channel_role_arn = channel_role_arn

    @property
    def notify_on_add_correspondence_to_case(self):
        """Gets the notify_on_add_correspondence_to_case of this SlackChannelConfiguration.


        :return: The notify_on_add_correspondence_to_case of this SlackChannelConfiguration.
        :rtype: bool
        """
        return self._notify_on_add_correspondence_to_case

    @notify_on_add_correspondence_to_case.setter
    def notify_on_add_correspondence_to_case(self, notify_on_add_correspondence_to_case):
        """Sets the notify_on_add_correspondence_to_case of this SlackChannelConfiguration.


        :param notify_on_add_correspondence_to_case: The notify_on_add_correspondence_to_case of this SlackChannelConfiguration.
        :type notify_on_add_correspondence_to_case: bool
        """

        self._notify_on_add_correspondence_to_case = notify_on_add_correspondence_to_case

    @property
    def notify_on_case_severity(self):
        """Gets the notify_on_case_severity of this SlackChannelConfiguration.


        :return: The notify_on_case_severity of this SlackChannelConfiguration.
        :rtype: NotificationSeverityLevel
        """
        return self._notify_on_case_severity

    @notify_on_case_severity.setter
    def notify_on_case_severity(self, notify_on_case_severity):
        """Sets the notify_on_case_severity of this SlackChannelConfiguration.


        :param notify_on_case_severity: The notify_on_case_severity of this SlackChannelConfiguration.
        :type notify_on_case_severity: NotificationSeverityLevel
        """

        self._notify_on_case_severity = notify_on_case_severity

    @property
    def notify_on_create_or_reopen_case(self):
        """Gets the notify_on_create_or_reopen_case of this SlackChannelConfiguration.


        :return: The notify_on_create_or_reopen_case of this SlackChannelConfiguration.
        :rtype: bool
        """
        return self._notify_on_create_or_reopen_case

    @notify_on_create_or_reopen_case.setter
    def notify_on_create_or_reopen_case(self, notify_on_create_or_reopen_case):
        """Sets the notify_on_create_or_reopen_case of this SlackChannelConfiguration.


        :param notify_on_create_or_reopen_case: The notify_on_create_or_reopen_case of this SlackChannelConfiguration.
        :type notify_on_create_or_reopen_case: bool
        """

        self._notify_on_create_or_reopen_case = notify_on_create_or_reopen_case

    @property
    def notify_on_resolve_case(self):
        """Gets the notify_on_resolve_case of this SlackChannelConfiguration.


        :return: The notify_on_resolve_case of this SlackChannelConfiguration.
        :rtype: bool
        """
        return self._notify_on_resolve_case

    @notify_on_resolve_case.setter
    def notify_on_resolve_case(self, notify_on_resolve_case):
        """Sets the notify_on_resolve_case of this SlackChannelConfiguration.


        :param notify_on_resolve_case: The notify_on_resolve_case of this SlackChannelConfiguration.
        :type notify_on_resolve_case: bool
        """

        self._notify_on_resolve_case = notify_on_resolve_case

    @property
    def team_id(self):
        """Gets the team_id of this SlackChannelConfiguration.


        :return: The team_id of this SlackChannelConfiguration.
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this SlackChannelConfiguration.


        :param team_id: The team_id of this SlackChannelConfiguration.
        :type team_id: str
        """
        if team_id is None:
            raise ValueError("Invalid value for `team_id`, must not be `None`")

        self._team_id = team_id
