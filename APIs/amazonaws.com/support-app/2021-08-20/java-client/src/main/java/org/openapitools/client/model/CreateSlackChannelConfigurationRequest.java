/*
 * AWS Support App
 * <p><fullname>Amazon Web Services Support App in Slack</fullname> <p>You can use the Amazon Web Services Support App in Slack API to manage your support cases in Slack for your Amazon Web Services account. After you configure your Slack workspace and channel with the Amazon Web Services Support App, you can perform the following tasks directly in your Slack channel:</p> <ul> <li> <p>Create, search, update, and resolve your support cases</p> </li> <li> <p>Request service quota increases for your account</p> </li> <li> <p>Invite Amazon Web Services Support agents to your channel so that you can chat directly about your support cases</p> </li> </ul> <p>For more information about how to perform these actions in Slack, see the following documentation in the <i>Amazon Web Services Support User Guide</i>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/awssupport/latest/user/aws-support-app-for-slack.html\">Amazon Web Services Support App in Slack</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/awssupport/latest/user/joining-a-live-chat-session.html\">Joining a live chat session with Amazon Web Services Support</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/awssupport/latest/user/service-quota-increase.html\">Requesting service quota increases</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/awssupport/latest/user/support-app-commands.html\">Amazon Web Services Support App commands in Slack</a> </p> </li> </ul> <p>You can also use the Amazon Web Services Management Console instead of the Amazon Web Services Support App API to manage your Slack configurations. For more information, see <a href=\"https://docs.aws.amazon.com/awssupport/latest/user/authorize-slack-workspace.html\">Authorize a Slack workspace to enable the Amazon Web Services Support App</a>.</p> <note> <ul> <li> <p>You must have a Business or Enterprise Support plan to use the Amazon Web Services Support App API. </p> </li> <li> <p>For more information about the Amazon Web Services Support App endpoints, see the <a href=\"https://docs.aws.amazon.com/general/latest/gr/awssupport.html#awssupport_app_region\">Amazon Web Services Support App in Slack endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p> </li> </ul> </note></p>
 *
 * The version of the OpenAPI document: 2021-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateSlackChannelConfigurationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:05.463365-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateSlackChannelConfigurationRequest {
  public static final String SERIALIZED_NAME_CHANNEL_ID = "channelId";
  @SerializedName(SERIALIZED_NAME_CHANNEL_ID)
  private String channelId;

  public static final String SERIALIZED_NAME_CHANNEL_NAME = "channelName";
  @SerializedName(SERIALIZED_NAME_CHANNEL_NAME)
  private String channelName;

  public static final String SERIALIZED_NAME_CHANNEL_ROLE_ARN = "channelRoleArn";
  @SerializedName(SERIALIZED_NAME_CHANNEL_ROLE_ARN)
  private String channelRoleArn;

  public static final String SERIALIZED_NAME_NOTIFY_ON_ADD_CORRESPONDENCE_TO_CASE = "notifyOnAddCorrespondenceToCase";
  @SerializedName(SERIALIZED_NAME_NOTIFY_ON_ADD_CORRESPONDENCE_TO_CASE)
  private Boolean notifyOnAddCorrespondenceToCase;

  /**
   * &lt;p&gt;The case severity for a support case that you want to receive notifications.&lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;high&lt;/code&gt; or &lt;code&gt;all&lt;/code&gt;, you must specify &lt;code&gt;true&lt;/code&gt; for at least one of the following parameters:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;notifyOnAddCorrespondenceToCase&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;notifyOnCreateOrReopenCase&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;notifyOnResolveCase&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you specify &lt;code&gt;none&lt;/code&gt;, the following parameters must be null or &lt;code&gt;false&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;notifyOnAddCorrespondenceToCase&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;notifyOnCreateOrReopenCase&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;notifyOnResolveCase&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;If you don&#39;t specify these parameters in your request, they default to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt;
   */
  @JsonAdapter(NotifyOnCaseSeverityEnum.Adapter.class)
  public enum NotifyOnCaseSeverityEnum {
    NONE("none"),
    
    ALL("all"),
    
    HIGH("high");

    private String value;

    NotifyOnCaseSeverityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NotifyOnCaseSeverityEnum fromValue(String value) {
      for (NotifyOnCaseSeverityEnum b : NotifyOnCaseSeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NotifyOnCaseSeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NotifyOnCaseSeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NotifyOnCaseSeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NotifyOnCaseSeverityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NotifyOnCaseSeverityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NOTIFY_ON_CASE_SEVERITY = "notifyOnCaseSeverity";
  @SerializedName(SERIALIZED_NAME_NOTIFY_ON_CASE_SEVERITY)
  private NotifyOnCaseSeverityEnum notifyOnCaseSeverity;

  public static final String SERIALIZED_NAME_NOTIFY_ON_CREATE_OR_REOPEN_CASE = "notifyOnCreateOrReopenCase";
  @SerializedName(SERIALIZED_NAME_NOTIFY_ON_CREATE_OR_REOPEN_CASE)
  private Boolean notifyOnCreateOrReopenCase;

  public static final String SERIALIZED_NAME_NOTIFY_ON_RESOLVE_CASE = "notifyOnResolveCase";
  @SerializedName(SERIALIZED_NAME_NOTIFY_ON_RESOLVE_CASE)
  private Boolean notifyOnResolveCase;

  public static final String SERIALIZED_NAME_TEAM_ID = "teamId";
  @SerializedName(SERIALIZED_NAME_TEAM_ID)
  private String teamId;

  public CreateSlackChannelConfigurationRequest() {
  }

  public CreateSlackChannelConfigurationRequest channelId(String channelId) {
    this.channelId = channelId;
    return this;
  }

  /**
   * The channel ID in Slack. This ID identifies a channel within a Slack workspace.
   * @return channelId
   */
  @javax.annotation.Nonnull
  public String getChannelId() {
    return channelId;
  }

  public void setChannelId(String channelId) {
    this.channelId = channelId;
  }


  public CreateSlackChannelConfigurationRequest channelName(String channelName) {
    this.channelName = channelName;
    return this;
  }

  /**
   * The name of the Slack channel that you configure for the Amazon Web Services Support App.
   * @return channelName
   */
  @javax.annotation.Nullable
  public String getChannelName() {
    return channelName;
  }

  public void setChannelName(String channelName) {
    this.channelName = channelName;
  }


  public CreateSlackChannelConfigurationRequest channelRoleArn(String channelRoleArn) {
    this.channelRoleArn = channelRoleArn;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) of an IAM role that you want to use to perform operations on Amazon Web Services. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awssupport/latest/user/support-app-permissions.html\&quot;&gt;Managing access to the Amazon Web Services Support App&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Support User Guide&lt;/i&gt;.
   * @return channelRoleArn
   */
  @javax.annotation.Nonnull
  public String getChannelRoleArn() {
    return channelRoleArn;
  }

  public void setChannelRoleArn(String channelRoleArn) {
    this.channelRoleArn = channelRoleArn;
  }


  public CreateSlackChannelConfigurationRequest notifyOnAddCorrespondenceToCase(Boolean notifyOnAddCorrespondenceToCase) {
    this.notifyOnAddCorrespondenceToCase = notifyOnAddCorrespondenceToCase;
    return this;
  }

  /**
   * Whether you want to get notified when a support case has a new correspondence.
   * @return notifyOnAddCorrespondenceToCase
   */
  @javax.annotation.Nullable
  public Boolean getNotifyOnAddCorrespondenceToCase() {
    return notifyOnAddCorrespondenceToCase;
  }

  public void setNotifyOnAddCorrespondenceToCase(Boolean notifyOnAddCorrespondenceToCase) {
    this.notifyOnAddCorrespondenceToCase = notifyOnAddCorrespondenceToCase;
  }


  public CreateSlackChannelConfigurationRequest notifyOnCaseSeverity(NotifyOnCaseSeverityEnum notifyOnCaseSeverity) {
    this.notifyOnCaseSeverity = notifyOnCaseSeverity;
    return this;
  }

  /**
   * &lt;p&gt;The case severity for a support case that you want to receive notifications.&lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;high&lt;/code&gt; or &lt;code&gt;all&lt;/code&gt;, you must specify &lt;code&gt;true&lt;/code&gt; for at least one of the following parameters:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;notifyOnAddCorrespondenceToCase&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;notifyOnCreateOrReopenCase&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;notifyOnResolveCase&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you specify &lt;code&gt;none&lt;/code&gt;, the following parameters must be null or &lt;code&gt;false&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;notifyOnAddCorrespondenceToCase&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;notifyOnCreateOrReopenCase&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;notifyOnResolveCase&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;If you don&#39;t specify these parameters in your request, they default to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt;
   * @return notifyOnCaseSeverity
   */
  @javax.annotation.Nonnull
  public NotifyOnCaseSeverityEnum getNotifyOnCaseSeverity() {
    return notifyOnCaseSeverity;
  }

  public void setNotifyOnCaseSeverity(NotifyOnCaseSeverityEnum notifyOnCaseSeverity) {
    this.notifyOnCaseSeverity = notifyOnCaseSeverity;
  }


  public CreateSlackChannelConfigurationRequest notifyOnCreateOrReopenCase(Boolean notifyOnCreateOrReopenCase) {
    this.notifyOnCreateOrReopenCase = notifyOnCreateOrReopenCase;
    return this;
  }

  /**
   * Whether you want to get notified when a support case is created or reopened.
   * @return notifyOnCreateOrReopenCase
   */
  @javax.annotation.Nullable
  public Boolean getNotifyOnCreateOrReopenCase() {
    return notifyOnCreateOrReopenCase;
  }

  public void setNotifyOnCreateOrReopenCase(Boolean notifyOnCreateOrReopenCase) {
    this.notifyOnCreateOrReopenCase = notifyOnCreateOrReopenCase;
  }


  public CreateSlackChannelConfigurationRequest notifyOnResolveCase(Boolean notifyOnResolveCase) {
    this.notifyOnResolveCase = notifyOnResolveCase;
    return this;
  }

  /**
   * Whether you want to get notified when a support case is resolved.
   * @return notifyOnResolveCase
   */
  @javax.annotation.Nullable
  public Boolean getNotifyOnResolveCase() {
    return notifyOnResolveCase;
  }

  public void setNotifyOnResolveCase(Boolean notifyOnResolveCase) {
    this.notifyOnResolveCase = notifyOnResolveCase;
  }


  public CreateSlackChannelConfigurationRequest teamId(String teamId) {
    this.teamId = teamId;
    return this;
  }

  /**
   * The team ID in Slack. This ID uniquely identifies a Slack workspace, such as &lt;code&gt;T012ABCDEFG&lt;/code&gt;.
   * @return teamId
   */
  @javax.annotation.Nonnull
  public String getTeamId() {
    return teamId;
  }

  public void setTeamId(String teamId) {
    this.teamId = teamId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSlackChannelConfigurationRequest createSlackChannelConfigurationRequest = (CreateSlackChannelConfigurationRequest) o;
    return Objects.equals(this.channelId, createSlackChannelConfigurationRequest.channelId) &&
        Objects.equals(this.channelName, createSlackChannelConfigurationRequest.channelName) &&
        Objects.equals(this.channelRoleArn, createSlackChannelConfigurationRequest.channelRoleArn) &&
        Objects.equals(this.notifyOnAddCorrespondenceToCase, createSlackChannelConfigurationRequest.notifyOnAddCorrespondenceToCase) &&
        Objects.equals(this.notifyOnCaseSeverity, createSlackChannelConfigurationRequest.notifyOnCaseSeverity) &&
        Objects.equals(this.notifyOnCreateOrReopenCase, createSlackChannelConfigurationRequest.notifyOnCreateOrReopenCase) &&
        Objects.equals(this.notifyOnResolveCase, createSlackChannelConfigurationRequest.notifyOnResolveCase) &&
        Objects.equals(this.teamId, createSlackChannelConfigurationRequest.teamId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channelId, channelName, channelRoleArn, notifyOnAddCorrespondenceToCase, notifyOnCaseSeverity, notifyOnCreateOrReopenCase, notifyOnResolveCase, teamId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSlackChannelConfigurationRequest {\n");
    sb.append("    channelId: ").append(toIndentedString(channelId)).append("\n");
    sb.append("    channelName: ").append(toIndentedString(channelName)).append("\n");
    sb.append("    channelRoleArn: ").append(toIndentedString(channelRoleArn)).append("\n");
    sb.append("    notifyOnAddCorrespondenceToCase: ").append(toIndentedString(notifyOnAddCorrespondenceToCase)).append("\n");
    sb.append("    notifyOnCaseSeverity: ").append(toIndentedString(notifyOnCaseSeverity)).append("\n");
    sb.append("    notifyOnCreateOrReopenCase: ").append(toIndentedString(notifyOnCreateOrReopenCase)).append("\n");
    sb.append("    notifyOnResolveCase: ").append(toIndentedString(notifyOnResolveCase)).append("\n");
    sb.append("    teamId: ").append(toIndentedString(teamId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("channelId");
    openapiFields.add("channelName");
    openapiFields.add("channelRoleArn");
    openapiFields.add("notifyOnAddCorrespondenceToCase");
    openapiFields.add("notifyOnCaseSeverity");
    openapiFields.add("notifyOnCreateOrReopenCase");
    openapiFields.add("notifyOnResolveCase");
    openapiFields.add("teamId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("channelId");
    openapiRequiredFields.add("channelRoleArn");
    openapiRequiredFields.add("notifyOnCaseSeverity");
    openapiRequiredFields.add("teamId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateSlackChannelConfigurationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateSlackChannelConfigurationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateSlackChannelConfigurationRequest is not found in the empty JSON string", CreateSlackChannelConfigurationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateSlackChannelConfigurationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateSlackChannelConfigurationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateSlackChannelConfigurationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("channelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelId").toString()));
      }
      if ((jsonObj.get("channelName") != null && !jsonObj.get("channelName").isJsonNull()) && !jsonObj.get("channelName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelName").toString()));
      }
      if (!jsonObj.get("channelRoleArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelRoleArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelRoleArn").toString()));
      }
      if (!jsonObj.get("notifyOnCaseSeverity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notifyOnCaseSeverity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notifyOnCaseSeverity").toString()));
      }
      // validate the required field `notifyOnCaseSeverity`
      NotifyOnCaseSeverityEnum.validateJsonElement(jsonObj.get("notifyOnCaseSeverity"));
      if (!jsonObj.get("teamId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `teamId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("teamId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateSlackChannelConfigurationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateSlackChannelConfigurationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateSlackChannelConfigurationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateSlackChannelConfigurationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateSlackChannelConfigurationRequest>() {
           @Override
           public void write(JsonWriter out, CreateSlackChannelConfigurationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateSlackChannelConfigurationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateSlackChannelConfigurationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateSlackChannelConfigurationRequest
   * @throws IOException if the JSON string is invalid with respect to CreateSlackChannelConfigurationRequest
   */
  public static CreateSlackChannelConfigurationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateSlackChannelConfigurationRequest.class);
  }

  /**
   * Convert an instance of CreateSlackChannelConfigurationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

