/*
 * AWS Support App
 * <p><fullname>Amazon Web Services Support App in Slack</fullname> <p>You can use the Amazon Web Services Support App in Slack API to manage your support cases in Slack for your Amazon Web Services account. After you configure your Slack workspace and channel with the Amazon Web Services Support App, you can perform the following tasks directly in your Slack channel:</p> <ul> <li> <p>Create, search, update, and resolve your support cases</p> </li> <li> <p>Request service quota increases for your account</p> </li> <li> <p>Invite Amazon Web Services Support agents to your channel so that you can chat directly about your support cases</p> </li> </ul> <p>For more information about how to perform these actions in Slack, see the following documentation in the <i>Amazon Web Services Support User Guide</i>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/awssupport/latest/user/aws-support-app-for-slack.html\">Amazon Web Services Support App in Slack</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/awssupport/latest/user/joining-a-live-chat-session.html\">Joining a live chat session with Amazon Web Services Support</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/awssupport/latest/user/service-quota-increase.html\">Requesting service quota increases</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/awssupport/latest/user/support-app-commands.html\">Amazon Web Services Support App commands in Slack</a> </p> </li> </ul> <p>You can also use the Amazon Web Services Management Console instead of the Amazon Web Services Support App API to manage your Slack configurations. For more information, see <a href=\"https://docs.aws.amazon.com/awssupport/latest/user/authorize-slack-workspace.html\">Authorize a Slack workspace to enable the Amazon Web Services Support App</a>.</p> <note> <ul> <li> <p>You must have a Business or Enterprise Support plan to use the Amazon Web Services Support App API. </p> </li> <li> <p>For more information about the Amazon Web Services Support App endpoints, see the <a href=\"https://docs.aws.amazon.com/general/latest/gr/awssupport.html#awssupport_app_region\">Amazon Web Services Support App in Slack endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p> </li> </ul> </note></p>
 *
 * The version of the OpenAPI document: 2021-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.NotificationSeverityLevel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The configuration for a Slack channel that you added for your Amazon Web Services account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:05.463365-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SlackChannelConfiguration {
  public static final String SERIALIZED_NAME_CHANNEL_ID = "channelId";
  @SerializedName(SERIALIZED_NAME_CHANNEL_ID)
  private String channelId;

  public static final String SERIALIZED_NAME_CHANNEL_NAME = "channelName";
  @SerializedName(SERIALIZED_NAME_CHANNEL_NAME)
  private String channelName;

  public static final String SERIALIZED_NAME_CHANNEL_ROLE_ARN = "channelRoleArn";
  @SerializedName(SERIALIZED_NAME_CHANNEL_ROLE_ARN)
  private String channelRoleArn;

  public static final String SERIALIZED_NAME_NOTIFY_ON_ADD_CORRESPONDENCE_TO_CASE = "notifyOnAddCorrespondenceToCase";
  @SerializedName(SERIALIZED_NAME_NOTIFY_ON_ADD_CORRESPONDENCE_TO_CASE)
  private Boolean notifyOnAddCorrespondenceToCase;

  public static final String SERIALIZED_NAME_NOTIFY_ON_CASE_SEVERITY = "notifyOnCaseSeverity";
  @SerializedName(SERIALIZED_NAME_NOTIFY_ON_CASE_SEVERITY)
  private NotificationSeverityLevel notifyOnCaseSeverity;

  public static final String SERIALIZED_NAME_NOTIFY_ON_CREATE_OR_REOPEN_CASE = "notifyOnCreateOrReopenCase";
  @SerializedName(SERIALIZED_NAME_NOTIFY_ON_CREATE_OR_REOPEN_CASE)
  private Boolean notifyOnCreateOrReopenCase;

  public static final String SERIALIZED_NAME_NOTIFY_ON_RESOLVE_CASE = "notifyOnResolveCase";
  @SerializedName(SERIALIZED_NAME_NOTIFY_ON_RESOLVE_CASE)
  private Boolean notifyOnResolveCase;

  public static final String SERIALIZED_NAME_TEAM_ID = "teamId";
  @SerializedName(SERIALIZED_NAME_TEAM_ID)
  private String teamId;

  public SlackChannelConfiguration() {
  }

  public SlackChannelConfiguration channelId(String channelId) {
    this.channelId = channelId;
    return this;
  }

  /**
   * Get channelId
   * @return channelId
   */
  @javax.annotation.Nonnull
  public String getChannelId() {
    return channelId;
  }

  public void setChannelId(String channelId) {
    this.channelId = channelId;
  }


  public SlackChannelConfiguration channelName(String channelName) {
    this.channelName = channelName;
    return this;
  }

  /**
   * Get channelName
   * @return channelName
   */
  @javax.annotation.Nullable
  public String getChannelName() {
    return channelName;
  }

  public void setChannelName(String channelName) {
    this.channelName = channelName;
  }


  public SlackChannelConfiguration channelRoleArn(String channelRoleArn) {
    this.channelRoleArn = channelRoleArn;
    return this;
  }

  /**
   * Get channelRoleArn
   * @return channelRoleArn
   */
  @javax.annotation.Nullable
  public String getChannelRoleArn() {
    return channelRoleArn;
  }

  public void setChannelRoleArn(String channelRoleArn) {
    this.channelRoleArn = channelRoleArn;
  }


  public SlackChannelConfiguration notifyOnAddCorrespondenceToCase(Boolean notifyOnAddCorrespondenceToCase) {
    this.notifyOnAddCorrespondenceToCase = notifyOnAddCorrespondenceToCase;
    return this;
  }

  /**
   * Get notifyOnAddCorrespondenceToCase
   * @return notifyOnAddCorrespondenceToCase
   */
  @javax.annotation.Nullable
  public Boolean getNotifyOnAddCorrespondenceToCase() {
    return notifyOnAddCorrespondenceToCase;
  }

  public void setNotifyOnAddCorrespondenceToCase(Boolean notifyOnAddCorrespondenceToCase) {
    this.notifyOnAddCorrespondenceToCase = notifyOnAddCorrespondenceToCase;
  }


  public SlackChannelConfiguration notifyOnCaseSeverity(NotificationSeverityLevel notifyOnCaseSeverity) {
    this.notifyOnCaseSeverity = notifyOnCaseSeverity;
    return this;
  }

  /**
   * Get notifyOnCaseSeverity
   * @return notifyOnCaseSeverity
   */
  @javax.annotation.Nullable
  public NotificationSeverityLevel getNotifyOnCaseSeverity() {
    return notifyOnCaseSeverity;
  }

  public void setNotifyOnCaseSeverity(NotificationSeverityLevel notifyOnCaseSeverity) {
    this.notifyOnCaseSeverity = notifyOnCaseSeverity;
  }


  public SlackChannelConfiguration notifyOnCreateOrReopenCase(Boolean notifyOnCreateOrReopenCase) {
    this.notifyOnCreateOrReopenCase = notifyOnCreateOrReopenCase;
    return this;
  }

  /**
   * Get notifyOnCreateOrReopenCase
   * @return notifyOnCreateOrReopenCase
   */
  @javax.annotation.Nullable
  public Boolean getNotifyOnCreateOrReopenCase() {
    return notifyOnCreateOrReopenCase;
  }

  public void setNotifyOnCreateOrReopenCase(Boolean notifyOnCreateOrReopenCase) {
    this.notifyOnCreateOrReopenCase = notifyOnCreateOrReopenCase;
  }


  public SlackChannelConfiguration notifyOnResolveCase(Boolean notifyOnResolveCase) {
    this.notifyOnResolveCase = notifyOnResolveCase;
    return this;
  }

  /**
   * Get notifyOnResolveCase
   * @return notifyOnResolveCase
   */
  @javax.annotation.Nullable
  public Boolean getNotifyOnResolveCase() {
    return notifyOnResolveCase;
  }

  public void setNotifyOnResolveCase(Boolean notifyOnResolveCase) {
    this.notifyOnResolveCase = notifyOnResolveCase;
  }


  public SlackChannelConfiguration teamId(String teamId) {
    this.teamId = teamId;
    return this;
  }

  /**
   * Get teamId
   * @return teamId
   */
  @javax.annotation.Nonnull
  public String getTeamId() {
    return teamId;
  }

  public void setTeamId(String teamId) {
    this.teamId = teamId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SlackChannelConfiguration slackChannelConfiguration = (SlackChannelConfiguration) o;
    return Objects.equals(this.channelId, slackChannelConfiguration.channelId) &&
        Objects.equals(this.channelName, slackChannelConfiguration.channelName) &&
        Objects.equals(this.channelRoleArn, slackChannelConfiguration.channelRoleArn) &&
        Objects.equals(this.notifyOnAddCorrespondenceToCase, slackChannelConfiguration.notifyOnAddCorrespondenceToCase) &&
        Objects.equals(this.notifyOnCaseSeverity, slackChannelConfiguration.notifyOnCaseSeverity) &&
        Objects.equals(this.notifyOnCreateOrReopenCase, slackChannelConfiguration.notifyOnCreateOrReopenCase) &&
        Objects.equals(this.notifyOnResolveCase, slackChannelConfiguration.notifyOnResolveCase) &&
        Objects.equals(this.teamId, slackChannelConfiguration.teamId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channelId, channelName, channelRoleArn, notifyOnAddCorrespondenceToCase, notifyOnCaseSeverity, notifyOnCreateOrReopenCase, notifyOnResolveCase, teamId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SlackChannelConfiguration {\n");
    sb.append("    channelId: ").append(toIndentedString(channelId)).append("\n");
    sb.append("    channelName: ").append(toIndentedString(channelName)).append("\n");
    sb.append("    channelRoleArn: ").append(toIndentedString(channelRoleArn)).append("\n");
    sb.append("    notifyOnAddCorrespondenceToCase: ").append(toIndentedString(notifyOnAddCorrespondenceToCase)).append("\n");
    sb.append("    notifyOnCaseSeverity: ").append(toIndentedString(notifyOnCaseSeverity)).append("\n");
    sb.append("    notifyOnCreateOrReopenCase: ").append(toIndentedString(notifyOnCreateOrReopenCase)).append("\n");
    sb.append("    notifyOnResolveCase: ").append(toIndentedString(notifyOnResolveCase)).append("\n");
    sb.append("    teamId: ").append(toIndentedString(teamId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("channelId");
    openapiFields.add("channelName");
    openapiFields.add("channelRoleArn");
    openapiFields.add("notifyOnAddCorrespondenceToCase");
    openapiFields.add("notifyOnCaseSeverity");
    openapiFields.add("notifyOnCreateOrReopenCase");
    openapiFields.add("notifyOnResolveCase");
    openapiFields.add("teamId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("channelId");
    openapiRequiredFields.add("teamId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SlackChannelConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SlackChannelConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SlackChannelConfiguration is not found in the empty JSON string", SlackChannelConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SlackChannelConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SlackChannelConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SlackChannelConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `channelId`
      String.validateJsonElement(jsonObj.get("channelId"));
      // validate the optional field `channelName`
      if (jsonObj.get("channelName") != null && !jsonObj.get("channelName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("channelName"));
      }
      // validate the optional field `channelRoleArn`
      if (jsonObj.get("channelRoleArn") != null && !jsonObj.get("channelRoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("channelRoleArn"));
      }
      // validate the optional field `notifyOnAddCorrespondenceToCase`
      if (jsonObj.get("notifyOnAddCorrespondenceToCase") != null && !jsonObj.get("notifyOnAddCorrespondenceToCase").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("notifyOnAddCorrespondenceToCase"));
      }
      // validate the optional field `notifyOnCaseSeverity`
      if (jsonObj.get("notifyOnCaseSeverity") != null && !jsonObj.get("notifyOnCaseSeverity").isJsonNull()) {
        NotificationSeverityLevel.validateJsonElement(jsonObj.get("notifyOnCaseSeverity"));
      }
      // validate the optional field `notifyOnCreateOrReopenCase`
      if (jsonObj.get("notifyOnCreateOrReopenCase") != null && !jsonObj.get("notifyOnCreateOrReopenCase").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("notifyOnCreateOrReopenCase"));
      }
      // validate the optional field `notifyOnResolveCase`
      if (jsonObj.get("notifyOnResolveCase") != null && !jsonObj.get("notifyOnResolveCase").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("notifyOnResolveCase"));
      }
      // validate the required field `teamId`
      String.validateJsonElement(jsonObj.get("teamId"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SlackChannelConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SlackChannelConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SlackChannelConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SlackChannelConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<SlackChannelConfiguration>() {
           @Override
           public void write(JsonWriter out, SlackChannelConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SlackChannelConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SlackChannelConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SlackChannelConfiguration
   * @throws IOException if the JSON string is invalid with respect to SlackChannelConfiguration
   */
  public static SlackChannelConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SlackChannelConfiguration.class);
  }

  /**
   * Convert an instance of SlackChannelConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

