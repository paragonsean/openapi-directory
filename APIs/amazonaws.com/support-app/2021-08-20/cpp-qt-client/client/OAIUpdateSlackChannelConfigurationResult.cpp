/**
 * AWS Support App
 * <p><fullname>Amazon Web Services Support App in Slack</fullname> <p>You can use the Amazon Web Services Support App in Slack API to manage your support cases in Slack for your Amazon Web Services account. After you configure your Slack workspace and channel with the Amazon Web Services Support App, you can perform the following tasks directly in your Slack channel:</p> <ul> <li> <p>Create, search, update, and resolve your support cases</p> </li> <li> <p>Request service quota increases for your account</p> </li> <li> <p>Invite Amazon Web Services Support agents to your channel so that you can chat directly about your support cases</p> </li> </ul> <p>For more information about how to perform these actions in Slack, see the following documentation in the <i>Amazon Web Services Support User Guide</i>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/awssupport/latest/user/aws-support-app-for-slack.html\">Amazon Web Services Support App in Slack</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/awssupport/latest/user/joining-a-live-chat-session.html\">Joining a live chat session with Amazon Web Services Support</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/awssupport/latest/user/service-quota-increase.html\">Requesting service quota increases</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/awssupport/latest/user/support-app-commands.html\">Amazon Web Services Support App commands in Slack</a> </p> </li> </ul> <p>You can also use the Amazon Web Services Management Console instead of the Amazon Web Services Support App API to manage your Slack configurations. For more information, see <a href=\"https://docs.aws.amazon.com/awssupport/latest/user/authorize-slack-workspace.html\">Authorize a Slack workspace to enable the Amazon Web Services Support App</a>.</p> <note> <ul> <li> <p>You must have a Business or Enterprise Support plan to use the Amazon Web Services Support App API. </p> </li> <li> <p>For more information about the Amazon Web Services Support App endpoints, see the <a href=\"https://docs.aws.amazon.com/general/latest/gr/awssupport.html#awssupport_app_region\">Amazon Web Services Support App in Slack endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p> </li> </ul> </note></p>
 *
 * The version of the OpenAPI document: 2021-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateSlackChannelConfigurationResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateSlackChannelConfigurationResult::OAIUpdateSlackChannelConfigurationResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateSlackChannelConfigurationResult::OAIUpdateSlackChannelConfigurationResult() {
    this->initializeModel();
}

OAIUpdateSlackChannelConfigurationResult::~OAIUpdateSlackChannelConfigurationResult() {}

void OAIUpdateSlackChannelConfigurationResult::initializeModel() {

    m_channel_id_isSet = false;
    m_channel_id_isValid = false;

    m_channel_name_isSet = false;
    m_channel_name_isValid = false;

    m_channel_role_arn_isSet = false;
    m_channel_role_arn_isValid = false;

    m_notify_on_add_correspondence_to_case_isSet = false;
    m_notify_on_add_correspondence_to_case_isValid = false;

    m_notify_on_case_severity_isSet = false;
    m_notify_on_case_severity_isValid = false;

    m_notify_on_create_or_reopen_case_isSet = false;
    m_notify_on_create_or_reopen_case_isValid = false;

    m_notify_on_resolve_case_isSet = false;
    m_notify_on_resolve_case_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;
}

void OAIUpdateSlackChannelConfigurationResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateSlackChannelConfigurationResult::fromJsonObject(QJsonObject json) {

    m_channel_id_isValid = ::OpenAPI::fromJsonValue(m_channel_id, json[QString("channelId")]);
    m_channel_id_isSet = !json[QString("channelId")].isNull() && m_channel_id_isValid;

    m_channel_name_isValid = ::OpenAPI::fromJsonValue(m_channel_name, json[QString("channelName")]);
    m_channel_name_isSet = !json[QString("channelName")].isNull() && m_channel_name_isValid;

    m_channel_role_arn_isValid = ::OpenAPI::fromJsonValue(m_channel_role_arn, json[QString("channelRoleArn")]);
    m_channel_role_arn_isSet = !json[QString("channelRoleArn")].isNull() && m_channel_role_arn_isValid;

    m_notify_on_add_correspondence_to_case_isValid = ::OpenAPI::fromJsonValue(m_notify_on_add_correspondence_to_case, json[QString("notifyOnAddCorrespondenceToCase")]);
    m_notify_on_add_correspondence_to_case_isSet = !json[QString("notifyOnAddCorrespondenceToCase")].isNull() && m_notify_on_add_correspondence_to_case_isValid;

    m_notify_on_case_severity_isValid = ::OpenAPI::fromJsonValue(m_notify_on_case_severity, json[QString("notifyOnCaseSeverity")]);
    m_notify_on_case_severity_isSet = !json[QString("notifyOnCaseSeverity")].isNull() && m_notify_on_case_severity_isValid;

    m_notify_on_create_or_reopen_case_isValid = ::OpenAPI::fromJsonValue(m_notify_on_create_or_reopen_case, json[QString("notifyOnCreateOrReopenCase")]);
    m_notify_on_create_or_reopen_case_isSet = !json[QString("notifyOnCreateOrReopenCase")].isNull() && m_notify_on_create_or_reopen_case_isValid;

    m_notify_on_resolve_case_isValid = ::OpenAPI::fromJsonValue(m_notify_on_resolve_case, json[QString("notifyOnResolveCase")]);
    m_notify_on_resolve_case_isSet = !json[QString("notifyOnResolveCase")].isNull() && m_notify_on_resolve_case_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("teamId")]);
    m_team_id_isSet = !json[QString("teamId")].isNull() && m_team_id_isValid;
}

QString OAIUpdateSlackChannelConfigurationResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateSlackChannelConfigurationResult::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_id_isSet) {
        obj.insert(QString("channelId"), ::OpenAPI::toJsonValue(m_channel_id));
    }
    if (m_channel_name_isSet) {
        obj.insert(QString("channelName"), ::OpenAPI::toJsonValue(m_channel_name));
    }
    if (m_channel_role_arn_isSet) {
        obj.insert(QString("channelRoleArn"), ::OpenAPI::toJsonValue(m_channel_role_arn));
    }
    if (m_notify_on_add_correspondence_to_case_isSet) {
        obj.insert(QString("notifyOnAddCorrespondenceToCase"), ::OpenAPI::toJsonValue(m_notify_on_add_correspondence_to_case));
    }
    if (m_notify_on_case_severity.isSet()) {
        obj.insert(QString("notifyOnCaseSeverity"), ::OpenAPI::toJsonValue(m_notify_on_case_severity));
    }
    if (m_notify_on_create_or_reopen_case_isSet) {
        obj.insert(QString("notifyOnCreateOrReopenCase"), ::OpenAPI::toJsonValue(m_notify_on_create_or_reopen_case));
    }
    if (m_notify_on_resolve_case_isSet) {
        obj.insert(QString("notifyOnResolveCase"), ::OpenAPI::toJsonValue(m_notify_on_resolve_case));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("teamId"), ::OpenAPI::toJsonValue(m_team_id));
    }
    return obj;
}

QString OAIUpdateSlackChannelConfigurationResult::getChannelId() const {
    return m_channel_id;
}
void OAIUpdateSlackChannelConfigurationResult::setChannelId(const QString &channel_id) {
    m_channel_id = channel_id;
    m_channel_id_isSet = true;
}

bool OAIUpdateSlackChannelConfigurationResult::is_channel_id_Set() const{
    return m_channel_id_isSet;
}

bool OAIUpdateSlackChannelConfigurationResult::is_channel_id_Valid() const{
    return m_channel_id_isValid;
}

QString OAIUpdateSlackChannelConfigurationResult::getChannelName() const {
    return m_channel_name;
}
void OAIUpdateSlackChannelConfigurationResult::setChannelName(const QString &channel_name) {
    m_channel_name = channel_name;
    m_channel_name_isSet = true;
}

bool OAIUpdateSlackChannelConfigurationResult::is_channel_name_Set() const{
    return m_channel_name_isSet;
}

bool OAIUpdateSlackChannelConfigurationResult::is_channel_name_Valid() const{
    return m_channel_name_isValid;
}

QString OAIUpdateSlackChannelConfigurationResult::getChannelRoleArn() const {
    return m_channel_role_arn;
}
void OAIUpdateSlackChannelConfigurationResult::setChannelRoleArn(const QString &channel_role_arn) {
    m_channel_role_arn = channel_role_arn;
    m_channel_role_arn_isSet = true;
}

bool OAIUpdateSlackChannelConfigurationResult::is_channel_role_arn_Set() const{
    return m_channel_role_arn_isSet;
}

bool OAIUpdateSlackChannelConfigurationResult::is_channel_role_arn_Valid() const{
    return m_channel_role_arn_isValid;
}

bool OAIUpdateSlackChannelConfigurationResult::getNotifyOnAddCorrespondenceToCase() const {
    return m_notify_on_add_correspondence_to_case;
}
void OAIUpdateSlackChannelConfigurationResult::setNotifyOnAddCorrespondenceToCase(const bool &notify_on_add_correspondence_to_case) {
    m_notify_on_add_correspondence_to_case = notify_on_add_correspondence_to_case;
    m_notify_on_add_correspondence_to_case_isSet = true;
}

bool OAIUpdateSlackChannelConfigurationResult::is_notify_on_add_correspondence_to_case_Set() const{
    return m_notify_on_add_correspondence_to_case_isSet;
}

bool OAIUpdateSlackChannelConfigurationResult::is_notify_on_add_correspondence_to_case_Valid() const{
    return m_notify_on_add_correspondence_to_case_isValid;
}

OAINotificationSeverityLevel OAIUpdateSlackChannelConfigurationResult::getNotifyOnCaseSeverity() const {
    return m_notify_on_case_severity;
}
void OAIUpdateSlackChannelConfigurationResult::setNotifyOnCaseSeverity(const OAINotificationSeverityLevel &notify_on_case_severity) {
    m_notify_on_case_severity = notify_on_case_severity;
    m_notify_on_case_severity_isSet = true;
}

bool OAIUpdateSlackChannelConfigurationResult::is_notify_on_case_severity_Set() const{
    return m_notify_on_case_severity_isSet;
}

bool OAIUpdateSlackChannelConfigurationResult::is_notify_on_case_severity_Valid() const{
    return m_notify_on_case_severity_isValid;
}

bool OAIUpdateSlackChannelConfigurationResult::getNotifyOnCreateOrReopenCase() const {
    return m_notify_on_create_or_reopen_case;
}
void OAIUpdateSlackChannelConfigurationResult::setNotifyOnCreateOrReopenCase(const bool &notify_on_create_or_reopen_case) {
    m_notify_on_create_or_reopen_case = notify_on_create_or_reopen_case;
    m_notify_on_create_or_reopen_case_isSet = true;
}

bool OAIUpdateSlackChannelConfigurationResult::is_notify_on_create_or_reopen_case_Set() const{
    return m_notify_on_create_or_reopen_case_isSet;
}

bool OAIUpdateSlackChannelConfigurationResult::is_notify_on_create_or_reopen_case_Valid() const{
    return m_notify_on_create_or_reopen_case_isValid;
}

bool OAIUpdateSlackChannelConfigurationResult::getNotifyOnResolveCase() const {
    return m_notify_on_resolve_case;
}
void OAIUpdateSlackChannelConfigurationResult::setNotifyOnResolveCase(const bool &notify_on_resolve_case) {
    m_notify_on_resolve_case = notify_on_resolve_case;
    m_notify_on_resolve_case_isSet = true;
}

bool OAIUpdateSlackChannelConfigurationResult::is_notify_on_resolve_case_Set() const{
    return m_notify_on_resolve_case_isSet;
}

bool OAIUpdateSlackChannelConfigurationResult::is_notify_on_resolve_case_Valid() const{
    return m_notify_on_resolve_case_isValid;
}

QString OAIUpdateSlackChannelConfigurationResult::getTeamId() const {
    return m_team_id;
}
void OAIUpdateSlackChannelConfigurationResult::setTeamId(const QString &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAIUpdateSlackChannelConfigurationResult::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAIUpdateSlackChannelConfigurationResult::is_team_id_Valid() const{
    return m_team_id_isValid;
}

bool OAIUpdateSlackChannelConfigurationResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notify_on_add_correspondence_to_case_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notify_on_case_severity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notify_on_create_or_reopen_case_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notify_on_resolve_case_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateSlackChannelConfigurationResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
