/**
 * AWS Support App
 * <p><fullname>Amazon Web Services Support App in Slack</fullname> <p>You can use the Amazon Web Services Support App in Slack API to manage your support cases in Slack for your Amazon Web Services account. After you configure your Slack workspace and channel with the Amazon Web Services Support App, you can perform the following tasks directly in your Slack channel:</p> <ul> <li> <p>Create, search, update, and resolve your support cases</p> </li> <li> <p>Request service quota increases for your account</p> </li> <li> <p>Invite Amazon Web Services Support agents to your channel so that you can chat directly about your support cases</p> </li> </ul> <p>For more information about how to perform these actions in Slack, see the following documentation in the <i>Amazon Web Services Support User Guide</i>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/awssupport/latest/user/aws-support-app-for-slack.html\">Amazon Web Services Support App in Slack</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/awssupport/latest/user/joining-a-live-chat-session.html\">Joining a live chat session with Amazon Web Services Support</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/awssupport/latest/user/service-quota-increase.html\">Requesting service quota increases</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/awssupport/latest/user/support-app-commands.html\">Amazon Web Services Support App commands in Slack</a> </p> </li> </ul> <p>You can also use the Amazon Web Services Management Console instead of the Amazon Web Services Support App API to manage your Slack configurations. For more information, see <a href=\"https://docs.aws.amazon.com/awssupport/latest/user/authorize-slack-workspace.html\">Authorize a Slack workspace to enable the Amazon Web Services Support App</a>.</p> <note> <ul> <li> <p>You must have a Business or Enterprise Support plan to use the Amazon Web Services Support App API. </p> </li> <li> <p>For more information about the Amazon Web Services Support App endpoints, see the <a href=\"https://docs.aws.amazon.com/general/latest/gr/awssupport.html#awssupport_app_region\">Amazon Web Services Support App in Slack endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p> </li> </ul> </note></p>
 *
 * The version of the OpenAPI document: 2021-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListSlackWorkspaceConfigurationsResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListSlackWorkspaceConfigurationsResult::OAIListSlackWorkspaceConfigurationsResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListSlackWorkspaceConfigurationsResult::OAIListSlackWorkspaceConfigurationsResult() {
    this->initializeModel();
}

OAIListSlackWorkspaceConfigurationsResult::~OAIListSlackWorkspaceConfigurationsResult() {}

void OAIListSlackWorkspaceConfigurationsResult::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_slack_workspace_configurations_isSet = false;
    m_slack_workspace_configurations_isValid = false;
}

void OAIListSlackWorkspaceConfigurationsResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListSlackWorkspaceConfigurationsResult::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_slack_workspace_configurations_isValid = ::OpenAPI::fromJsonValue(m_slack_workspace_configurations, json[QString("slackWorkspaceConfigurations")]);
    m_slack_workspace_configurations_isSet = !json[QString("slackWorkspaceConfigurations")].isNull() && m_slack_workspace_configurations_isValid;
}

QString OAIListSlackWorkspaceConfigurationsResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListSlackWorkspaceConfigurationsResult::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_slack_workspace_configurations.isSet()) {
        obj.insert(QString("slackWorkspaceConfigurations"), ::OpenAPI::toJsonValue(m_slack_workspace_configurations));
    }
    return obj;
}

QString OAIListSlackWorkspaceConfigurationsResult::getNextToken() const {
    return m_next_token;
}
void OAIListSlackWorkspaceConfigurationsResult::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListSlackWorkspaceConfigurationsResult::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListSlackWorkspaceConfigurationsResult::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIListSlackWorkspaceConfigurationsResult::getSlackWorkspaceConfigurations() const {
    return m_slack_workspace_configurations;
}
void OAIListSlackWorkspaceConfigurationsResult::setSlackWorkspaceConfigurations(const QList &slack_workspace_configurations) {
    m_slack_workspace_configurations = slack_workspace_configurations;
    m_slack_workspace_configurations_isSet = true;
}

bool OAIListSlackWorkspaceConfigurationsResult::is_slack_workspace_configurations_Set() const{
    return m_slack_workspace_configurations_isSet;
}

bool OAIListSlackWorkspaceConfigurationsResult::is_slack_workspace_configurations_Valid() const{
    return m_slack_workspace_configurations_isValid;
}

bool OAIListSlackWorkspaceConfigurationsResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slack_workspace_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListSlackWorkspaceConfigurationsResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
