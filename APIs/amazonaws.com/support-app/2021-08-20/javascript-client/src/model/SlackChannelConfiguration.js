/**
 * AWS Support App
 * <p><fullname>Amazon Web Services Support App in Slack</fullname> <p>You can use the Amazon Web Services Support App in Slack API to manage your support cases in Slack for your Amazon Web Services account. After you configure your Slack workspace and channel with the Amazon Web Services Support App, you can perform the following tasks directly in your Slack channel:</p> <ul> <li> <p>Create, search, update, and resolve your support cases</p> </li> <li> <p>Request service quota increases for your account</p> </li> <li> <p>Invite Amazon Web Services Support agents to your channel so that you can chat directly about your support cases</p> </li> </ul> <p>For more information about how to perform these actions in Slack, see the following documentation in the <i>Amazon Web Services Support User Guide</i>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/awssupport/latest/user/aws-support-app-for-slack.html\">Amazon Web Services Support App in Slack</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/awssupport/latest/user/joining-a-live-chat-session.html\">Joining a live chat session with Amazon Web Services Support</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/awssupport/latest/user/service-quota-increase.html\">Requesting service quota increases</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/awssupport/latest/user/support-app-commands.html\">Amazon Web Services Support App commands in Slack</a> </p> </li> </ul> <p>You can also use the Amazon Web Services Management Console instead of the Amazon Web Services Support App API to manage your Slack configurations. For more information, see <a href=\"https://docs.aws.amazon.com/awssupport/latest/user/authorize-slack-workspace.html\">Authorize a Slack workspace to enable the Amazon Web Services Support App</a>.</p> <note> <ul> <li> <p>You must have a Business or Enterprise Support plan to use the Amazon Web Services Support App API. </p> </li> <li> <p>For more information about the Amazon Web Services Support App endpoints, see the <a href=\"https://docs.aws.amazon.com/general/latest/gr/awssupport.html#awssupport_app_region\">Amazon Web Services Support App in Slack endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p> </li> </ul> </note></p>
 *
 * The version of the OpenAPI document: 2021-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NotificationSeverityLevel from './NotificationSeverityLevel';

/**
 * The SlackChannelConfiguration model module.
 * @module model/SlackChannelConfiguration
 * @version 2021-08-20
 */
class SlackChannelConfiguration {
    /**
     * Constructs a new <code>SlackChannelConfiguration</code>.
     * The configuration for a Slack channel that you added for your Amazon Web Services account.
     * @alias module:model/SlackChannelConfiguration
     * @param channelId {String} 
     * @param teamId {String} 
     */
    constructor(channelId, teamId) { 
        
        SlackChannelConfiguration.initialize(this, channelId, teamId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, channelId, teamId) { 
        obj['channelId'] = channelId;
        obj['teamId'] = teamId;
    }

    /**
     * Constructs a <code>SlackChannelConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SlackChannelConfiguration} obj Optional instance to populate.
     * @return {module:model/SlackChannelConfiguration} The populated <code>SlackChannelConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SlackChannelConfiguration();

            if (data.hasOwnProperty('channelId')) {
                obj['channelId'] = ApiClient.convertToType(data['channelId'], 'String');
            }
            if (data.hasOwnProperty('channelName')) {
                obj['channelName'] = ApiClient.convertToType(data['channelName'], 'String');
            }
            if (data.hasOwnProperty('channelRoleArn')) {
                obj['channelRoleArn'] = ApiClient.convertToType(data['channelRoleArn'], 'String');
            }
            if (data.hasOwnProperty('notifyOnAddCorrespondenceToCase')) {
                obj['notifyOnAddCorrespondenceToCase'] = ApiClient.convertToType(data['notifyOnAddCorrespondenceToCase'], 'Boolean');
            }
            if (data.hasOwnProperty('notifyOnCaseSeverity')) {
                obj['notifyOnCaseSeverity'] = ApiClient.convertToType(data['notifyOnCaseSeverity'], NotificationSeverityLevel);
            }
            if (data.hasOwnProperty('notifyOnCreateOrReopenCase')) {
                obj['notifyOnCreateOrReopenCase'] = ApiClient.convertToType(data['notifyOnCreateOrReopenCase'], 'Boolean');
            }
            if (data.hasOwnProperty('notifyOnResolveCase')) {
                obj['notifyOnResolveCase'] = ApiClient.convertToType(data['notifyOnResolveCase'], 'Boolean');
            }
            if (data.hasOwnProperty('teamId')) {
                obj['teamId'] = ApiClient.convertToType(data['teamId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SlackChannelConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SlackChannelConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SlackChannelConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `channelId`
        if (data['channelId']) { // data not null
          String.validateJSON(data['channelId']);
        }
        // validate the optional field `channelName`
        if (data['channelName']) { // data not null
          String.validateJSON(data['channelName']);
        }
        // validate the optional field `channelRoleArn`
        if (data['channelRoleArn']) { // data not null
          String.validateJSON(data['channelRoleArn']);
        }
        // validate the optional field `notifyOnAddCorrespondenceToCase`
        if (data['notifyOnAddCorrespondenceToCase']) { // data not null
          Boolean.validateJSON(data['notifyOnAddCorrespondenceToCase']);
        }
        // validate the optional field `notifyOnCaseSeverity`
        if (data['notifyOnCaseSeverity']) { // data not null
          NotificationSeverityLevel.validateJSON(data['notifyOnCaseSeverity']);
        }
        // validate the optional field `notifyOnCreateOrReopenCase`
        if (data['notifyOnCreateOrReopenCase']) { // data not null
          Boolean.validateJSON(data['notifyOnCreateOrReopenCase']);
        }
        // validate the optional field `notifyOnResolveCase`
        if (data['notifyOnResolveCase']) { // data not null
          Boolean.validateJSON(data['notifyOnResolveCase']);
        }
        // validate the optional field `teamId`
        if (data['teamId']) { // data not null
          String.validateJSON(data['teamId']);
        }

        return true;
    }


}

SlackChannelConfiguration.RequiredProperties = ["channelId", "teamId"];

/**
 * @member {String} channelId
 */
SlackChannelConfiguration.prototype['channelId'] = undefined;

/**
 * @member {String} channelName
 */
SlackChannelConfiguration.prototype['channelName'] = undefined;

/**
 * @member {String} channelRoleArn
 */
SlackChannelConfiguration.prototype['channelRoleArn'] = undefined;

/**
 * @member {Boolean} notifyOnAddCorrespondenceToCase
 */
SlackChannelConfiguration.prototype['notifyOnAddCorrespondenceToCase'] = undefined;

/**
 * @member {module:model/NotificationSeverityLevel} notifyOnCaseSeverity
 */
SlackChannelConfiguration.prototype['notifyOnCaseSeverity'] = undefined;

/**
 * @member {Boolean} notifyOnCreateOrReopenCase
 */
SlackChannelConfiguration.prototype['notifyOnCreateOrReopenCase'] = undefined;

/**
 * @member {Boolean} notifyOnResolveCase
 */
SlackChannelConfiguration.prototype['notifyOnResolveCase'] = undefined;

/**
 * @member {String} teamId
 */
SlackChannelConfiguration.prototype['teamId'] = undefined;






export default SlackChannelConfiguration;

