/**
 * AWS IoT Things Graph
 * <fullname>AWS IoT Things Graph</fullname> <p>AWS IoT Things Graph provides an integrated set of tools that enable developers to connect devices and services that use different standards, such as units of measure and communication protocols. AWS IoT Things Graph makes it possible to build IoT applications with little to no code by connecting devices and services and defining how they interact at an abstract level.</p> <p>For more information about how AWS IoT Things Graph works, see the <a href=\"https://docs.aws.amazon.com/thingsgraph/latest/ug/iot-tg-whatis.html\">User Guide</a>.</p> <p>The AWS IoT Things Graph service is discontinued.</p>
 *
 * The version of the OpenAPI document: 2018-09-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsIoTThingsGraph);
  }
}(this, function(expect, AwsIoTThingsGraph) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsIoTThingsGraph.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('associateEntityToThing', function() {
      it('should call associateEntityToThing successfully', function(done) {
        //uncomment below and update the code to test associateEntityToThing
        //instance.associateEntityToThing(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createFlowTemplate', function() {
      it('should call createFlowTemplate successfully', function(done) {
        //uncomment below and update the code to test createFlowTemplate
        //instance.createFlowTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSystemInstance', function() {
      it('should call createSystemInstance successfully', function(done) {
        //uncomment below and update the code to test createSystemInstance
        //instance.createSystemInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSystemTemplate', function() {
      it('should call createSystemTemplate successfully', function(done) {
        //uncomment below and update the code to test createSystemTemplate
        //instance.createSystemTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFlowTemplate', function() {
      it('should call deleteFlowTemplate successfully', function(done) {
        //uncomment below and update the code to test deleteFlowTemplate
        //instance.deleteFlowTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespace', function() {
      it('should call deleteNamespace successfully', function(done) {
        //uncomment below and update the code to test deleteNamespace
        //instance.deleteNamespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSystemInstance', function() {
      it('should call deleteSystemInstance successfully', function(done) {
        //uncomment below and update the code to test deleteSystemInstance
        //instance.deleteSystemInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSystemTemplate', function() {
      it('should call deleteSystemTemplate successfully', function(done) {
        //uncomment below and update the code to test deleteSystemTemplate
        //instance.deleteSystemTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deploySystemInstance', function() {
      it('should call deploySystemInstance successfully', function(done) {
        //uncomment below and update the code to test deploySystemInstance
        //instance.deploySystemInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deprecateFlowTemplate', function() {
      it('should call deprecateFlowTemplate successfully', function(done) {
        //uncomment below and update the code to test deprecateFlowTemplate
        //instance.deprecateFlowTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deprecateSystemTemplate', function() {
      it('should call deprecateSystemTemplate successfully', function(done) {
        //uncomment below and update the code to test deprecateSystemTemplate
        //instance.deprecateSystemTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeNamespace', function() {
      it('should call describeNamespace successfully', function(done) {
        //uncomment below and update the code to test describeNamespace
        //instance.describeNamespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dissociateEntityFromThing', function() {
      it('should call dissociateEntityFromThing successfully', function(done) {
        //uncomment below and update the code to test dissociateEntityFromThing
        //instance.dissociateEntityFromThing(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEntities', function() {
      it('should call getEntities successfully', function(done) {
        //uncomment below and update the code to test getEntities
        //instance.getEntities(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFlowTemplate', function() {
      it('should call getFlowTemplate successfully', function(done) {
        //uncomment below and update the code to test getFlowTemplate
        //instance.getFlowTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFlowTemplateRevisions', function() {
      it('should call getFlowTemplateRevisions successfully', function(done) {
        //uncomment below and update the code to test getFlowTemplateRevisions
        //instance.getFlowTemplateRevisions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNamespaceDeletionStatus', function() {
      it('should call getNamespaceDeletionStatus successfully', function(done) {
        //uncomment below and update the code to test getNamespaceDeletionStatus
        //instance.getNamespaceDeletionStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSystemInstance', function() {
      it('should call getSystemInstance successfully', function(done) {
        //uncomment below and update the code to test getSystemInstance
        //instance.getSystemInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSystemTemplate', function() {
      it('should call getSystemTemplate successfully', function(done) {
        //uncomment below and update the code to test getSystemTemplate
        //instance.getSystemTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSystemTemplateRevisions', function() {
      it('should call getSystemTemplateRevisions successfully', function(done) {
        //uncomment below and update the code to test getSystemTemplateRevisions
        //instance.getSystemTemplateRevisions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUploadStatus', function() {
      it('should call getUploadStatus successfully', function(done) {
        //uncomment below and update the code to test getUploadStatus
        //instance.getUploadStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFlowExecutionMessages', function() {
      it('should call listFlowExecutionMessages successfully', function(done) {
        //uncomment below and update the code to test listFlowExecutionMessages
        //instance.listFlowExecutionMessages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchEntities', function() {
      it('should call searchEntities successfully', function(done) {
        //uncomment below and update the code to test searchEntities
        //instance.searchEntities(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchFlowExecutions', function() {
      it('should call searchFlowExecutions successfully', function(done) {
        //uncomment below and update the code to test searchFlowExecutions
        //instance.searchFlowExecutions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchFlowTemplates', function() {
      it('should call searchFlowTemplates successfully', function(done) {
        //uncomment below and update the code to test searchFlowTemplates
        //instance.searchFlowTemplates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchSystemInstances', function() {
      it('should call searchSystemInstances successfully', function(done) {
        //uncomment below and update the code to test searchSystemInstances
        //instance.searchSystemInstances(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchSystemTemplates', function() {
      it('should call searchSystemTemplates successfully', function(done) {
        //uncomment below and update the code to test searchSystemTemplates
        //instance.searchSystemTemplates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchThings', function() {
      it('should call searchThings successfully', function(done) {
        //uncomment below and update the code to test searchThings
        //instance.searchThings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('undeploySystemInstance', function() {
      it('should call undeploySystemInstance successfully', function(done) {
        //uncomment below and update the code to test undeploySystemInstance
        //instance.undeploySystemInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFlowTemplate', function() {
      it('should call updateFlowTemplate successfully', function(done) {
        //uncomment below and update the code to test updateFlowTemplate
        //instance.updateFlowTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSystemTemplate', function() {
      it('should call updateSystemTemplate successfully', function(done) {
        //uncomment below and update the code to test updateSystemTemplate
        //instance.updateSystemTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uploadEntityDefinitions', function() {
      it('should call uploadEntityDefinitions successfully', function(done) {
        //uncomment below and update the code to test uploadEntityDefinitions
        //instance.uploadEntityDefinitions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
