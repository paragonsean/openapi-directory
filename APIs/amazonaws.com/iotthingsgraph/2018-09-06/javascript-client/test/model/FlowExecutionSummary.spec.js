/**
 * AWS IoT Things Graph
 * <fullname>AWS IoT Things Graph</fullname> <p>AWS IoT Things Graph provides an integrated set of tools that enable developers to connect devices and services that use different standards, such as units of measure and communication protocols. AWS IoT Things Graph makes it possible to build IoT applications with little to no code by connecting devices and services and defining how they interact at an abstract level.</p> <p>For more information about how AWS IoT Things Graph works, see the <a href=\"https://docs.aws.amazon.com/thingsgraph/latest/ug/iot-tg-whatis.html\">User Guide</a>.</p> <p>The AWS IoT Things Graph service is discontinued.</p>
 *
 * The version of the OpenAPI document: 2018-09-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsIoTThingsGraph);
  }
}(this, function(expect, AwsIoTThingsGraph) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsIoTThingsGraph.FlowExecutionSummary();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('FlowExecutionSummary', function() {
    it('should create an instance of FlowExecutionSummary', function() {
      // uncomment below and update the code to test FlowExecutionSummary
      //var instance = new AwsIoTThingsGraph.FlowExecutionSummary();
      //expect(instance).to.be.a(AwsIoTThingsGraph.FlowExecutionSummary);
    });

    it('should have the property flowExecutionId (base name: "flowExecutionId")', function() {
      // uncomment below and update the code to test the property flowExecutionId
      //var instance = new AwsIoTThingsGraph.FlowExecutionSummary();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new AwsIoTThingsGraph.FlowExecutionSummary();
      //expect(instance).to.be();
    });

    it('should have the property systemInstanceId (base name: "systemInstanceId")', function() {
      // uncomment below and update the code to test the property systemInstanceId
      //var instance = new AwsIoTThingsGraph.FlowExecutionSummary();
      //expect(instance).to.be();
    });

    it('should have the property flowTemplateId (base name: "flowTemplateId")', function() {
      // uncomment below and update the code to test the property flowTemplateId
      //var instance = new AwsIoTThingsGraph.FlowExecutionSummary();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "createdAt")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new AwsIoTThingsGraph.FlowExecutionSummary();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updatedAt")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new AwsIoTThingsGraph.FlowExecutionSummary();
      //expect(instance).to.be();
    });

  });

}));
