/**
 * AWS IoT Things Graph
 * <fullname>AWS IoT Things Graph</fullname> <p>AWS IoT Things Graph provides an integrated set of tools that enable developers to connect devices and services that use different standards, such as units of measure and communication protocols. AWS IoT Things Graph makes it possible to build IoT applications with little to no code by connecting devices and services and defining how they interact at an abstract level.</p> <p>For more information about how AWS IoT Things Graph works, see the <a href=\"https://docs.aws.amazon.com/thingsgraph/latest/ug/iot-tg-whatis.html\">User Guide</a>.</p> <p>The AWS IoT Things Graph service is discontinued.</p>
 *
 * The version of the OpenAPI document: 2018-09-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssociateEntityToThingRequest from '../model/AssociateEntityToThingRequest';
import CreateFlowTemplateRequest from '../model/CreateFlowTemplateRequest';
import CreateFlowTemplateResponse from '../model/CreateFlowTemplateResponse';
import CreateSystemInstanceRequest from '../model/CreateSystemInstanceRequest';
import CreateSystemInstanceResponse from '../model/CreateSystemInstanceResponse';
import CreateSystemTemplateRequest from '../model/CreateSystemTemplateRequest';
import CreateSystemTemplateResponse from '../model/CreateSystemTemplateResponse';
import DeleteFlowTemplateRequest from '../model/DeleteFlowTemplateRequest';
import DeleteNamespaceResponse from '../model/DeleteNamespaceResponse';
import DeleteSystemInstanceRequest from '../model/DeleteSystemInstanceRequest';
import DeleteSystemTemplateRequest from '../model/DeleteSystemTemplateRequest';
import DeploySystemInstanceRequest from '../model/DeploySystemInstanceRequest';
import DeploySystemInstanceResponse from '../model/DeploySystemInstanceResponse';
import DeprecateFlowTemplateRequest from '../model/DeprecateFlowTemplateRequest';
import DeprecateSystemTemplateRequest from '../model/DeprecateSystemTemplateRequest';
import DescribeNamespaceRequest from '../model/DescribeNamespaceRequest';
import DescribeNamespaceResponse from '../model/DescribeNamespaceResponse';
import DissociateEntityFromThingRequest from '../model/DissociateEntityFromThingRequest';
import GetEntitiesRequest from '../model/GetEntitiesRequest';
import GetEntitiesResponse from '../model/GetEntitiesResponse';
import GetFlowTemplateRequest from '../model/GetFlowTemplateRequest';
import GetFlowTemplateResponse from '../model/GetFlowTemplateResponse';
import GetFlowTemplateRevisionsRequest from '../model/GetFlowTemplateRevisionsRequest';
import GetFlowTemplateRevisionsResponse from '../model/GetFlowTemplateRevisionsResponse';
import GetNamespaceDeletionStatusResponse from '../model/GetNamespaceDeletionStatusResponse';
import GetSystemInstanceRequest from '../model/GetSystemInstanceRequest';
import GetSystemInstanceResponse from '../model/GetSystemInstanceResponse';
import GetSystemTemplateRequest from '../model/GetSystemTemplateRequest';
import GetSystemTemplateResponse from '../model/GetSystemTemplateResponse';
import GetSystemTemplateRevisionsRequest from '../model/GetSystemTemplateRevisionsRequest';
import GetSystemTemplateRevisionsResponse from '../model/GetSystemTemplateRevisionsResponse';
import GetUploadStatusRequest from '../model/GetUploadStatusRequest';
import GetUploadStatusResponse from '../model/GetUploadStatusResponse';
import ListFlowExecutionMessagesRequest from '../model/ListFlowExecutionMessagesRequest';
import ListFlowExecutionMessagesResponse from '../model/ListFlowExecutionMessagesResponse';
import ListTagsForResourceRequest from '../model/ListTagsForResourceRequest';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import SearchEntitiesRequest from '../model/SearchEntitiesRequest';
import SearchEntitiesResponse from '../model/SearchEntitiesResponse';
import SearchFlowExecutionsRequest from '../model/SearchFlowExecutionsRequest';
import SearchFlowExecutionsResponse from '../model/SearchFlowExecutionsResponse';
import SearchFlowTemplatesRequest from '../model/SearchFlowTemplatesRequest';
import SearchFlowTemplatesResponse from '../model/SearchFlowTemplatesResponse';
import SearchSystemInstancesRequest from '../model/SearchSystemInstancesRequest';
import SearchSystemInstancesResponse from '../model/SearchSystemInstancesResponse';
import SearchSystemTemplatesRequest from '../model/SearchSystemTemplatesRequest';
import SearchSystemTemplatesResponse from '../model/SearchSystemTemplatesResponse';
import SearchThingsRequest from '../model/SearchThingsRequest';
import SearchThingsResponse from '../model/SearchThingsResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UndeploySystemInstanceRequest from '../model/UndeploySystemInstanceRequest';
import UndeploySystemInstanceResponse from '../model/UndeploySystemInstanceResponse';
import UntagResourceRequest from '../model/UntagResourceRequest';
import UpdateFlowTemplateRequest from '../model/UpdateFlowTemplateRequest';
import UpdateFlowTemplateResponse from '../model/UpdateFlowTemplateResponse';
import UpdateSystemTemplateRequest from '../model/UpdateSystemTemplateRequest';
import UpdateSystemTemplateResponse from '../model/UpdateSystemTemplateResponse';
import UploadEntityDefinitionsRequest from '../model/UploadEntityDefinitionsRequest';
import UploadEntityDefinitionsResponse from '../model/UploadEntityDefinitionsResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2018-09-06
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the associateEntityToThing operation.
     * @callback module:api/DefaultApi~associateEntityToThingCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Associates a device with a concrete thing that is in the user's registry.</p> <p>A thing can be associated with only one device at a time. If you associate a thing with a new device id, its previous association will be removed.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AssociateEntityToThingRequest} associateEntityToThingRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateEntityToThingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    associateEntityToThing(xAmzTarget, associateEntityToThingRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateEntityToThingRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling associateEntityToThing");
      }
      // verify the required parameter 'associateEntityToThingRequest' is set
      if (associateEntityToThingRequest === undefined || associateEntityToThingRequest === null) {
        throw new Error("Missing the required parameter 'associateEntityToThingRequest' when calling associateEntityToThing");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=IotThingsGraphFrontEndService.AssociateEntityToThing', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFlowTemplate operation.
     * @callback module:api/DefaultApi~createFlowTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateFlowTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a workflow template. Workflows can be created only in the user's namespace. (The public namespace contains only entities.) The workflow can contain only entities in the specified namespace. The workflow is validated against the entities in the latest version of the user's namespace unless another namespace version is specified in the request.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateFlowTemplateRequest} createFlowTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createFlowTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateFlowTemplateResponse}
     */
    createFlowTemplate(xAmzTarget, createFlowTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = createFlowTemplateRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createFlowTemplate");
      }
      // verify the required parameter 'createFlowTemplateRequest' is set
      if (createFlowTemplateRequest === undefined || createFlowTemplateRequest === null) {
        throw new Error("Missing the required parameter 'createFlowTemplateRequest' when calling createFlowTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateFlowTemplateResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=IotThingsGraphFrontEndService.CreateFlowTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSystemInstance operation.
     * @callback module:api/DefaultApi~createSystemInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSystemInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a system instance. </p> <p>This action validates the system instance, prepares the deployment-related resources. For Greengrass deployments, it updates the Greengrass group that is specified by the <code>greengrassGroupName</code> parameter. It also adds a file to the S3 bucket specified by the <code>s3BucketName</code> parameter. You need to call <code>DeploySystemInstance</code> after running this action.</p> <p>For Greengrass deployments, since this action modifies and adds resources to a Greengrass group and an S3 bucket on the caller's behalf, the calling identity must have write permissions to both the specified Greengrass group and S3 bucket. Otherwise, the call will fail with an authorization error.</p> <p>For cloud deployments, this action requires a <code>flowActionsRoleArn</code> value. This is an IAM role that has permissions to access AWS services, such as AWS Lambda and AWS IoT, that the flow uses when it executes.</p> <p>If the definition document doesn't specify a version of the user's namespace, the latest version will be used by default.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateSystemInstanceRequest} createSystemInstanceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createSystemInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSystemInstanceResponse}
     */
    createSystemInstance(xAmzTarget, createSystemInstanceRequest, opts, callback) {
      opts = opts || {};
      let postBody = createSystemInstanceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createSystemInstance");
      }
      // verify the required parameter 'createSystemInstanceRequest' is set
      if (createSystemInstanceRequest === undefined || createSystemInstanceRequest === null) {
        throw new Error("Missing the required parameter 'createSystemInstanceRequest' when calling createSystemInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSystemInstanceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=IotThingsGraphFrontEndService.CreateSystemInstance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSystemTemplate operation.
     * @callback module:api/DefaultApi~createSystemTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSystemTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a system. The system is validated against the entities in the latest version of the user's namespace unless another namespace version is specified in the request.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateSystemTemplateRequest} createSystemTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createSystemTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSystemTemplateResponse}
     */
    createSystemTemplate(xAmzTarget, createSystemTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = createSystemTemplateRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createSystemTemplate");
      }
      // verify the required parameter 'createSystemTemplateRequest' is set
      if (createSystemTemplateRequest === undefined || createSystemTemplateRequest === null) {
        throw new Error("Missing the required parameter 'createSystemTemplateRequest' when calling createSystemTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSystemTemplateResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=IotThingsGraphFrontEndService.CreateSystemTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFlowTemplate operation.
     * @callback module:api/DefaultApi~deleteFlowTemplateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a workflow. Any new system or deployment that contains this workflow will fail to update or deploy. Existing deployments that contain the workflow will continue to run (since they use a snapshot of the workflow taken at the time of deployment).
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteFlowTemplateRequest} deleteFlowTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteFlowTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteFlowTemplate(xAmzTarget, deleteFlowTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteFlowTemplateRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteFlowTemplate");
      }
      // verify the required parameter 'deleteFlowTemplateRequest' is set
      if (deleteFlowTemplateRequest === undefined || deleteFlowTemplateRequest === null) {
        throw new Error("Missing the required parameter 'deleteFlowTemplateRequest' when calling deleteFlowTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=IotThingsGraphFrontEndService.DeleteFlowTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNamespace operation.
     * @callback module:api/DefaultApi~deleteNamespaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteNamespaceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified namespace. This action deletes all of the entities in the namespace. Delete the systems and flows that use entities in the namespace before performing this action. This action takes no request parameters.
     * @param {module:model/String} xAmzTarget 
     * @param {Object.<String, Object>} body 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteNamespaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteNamespaceResponse}
     */
    deleteNamespace(xAmzTarget, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteNamespace");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteNamespace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteNamespaceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=IotThingsGraphFrontEndService.DeleteNamespace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSystemInstance operation.
     * @callback module:api/DefaultApi~deleteSystemInstanceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a system instance. Only system instances that have never been deployed, or that have been undeployed can be deleted.</p> <p>Users can create a new system instance that has the same ID as a deleted system instance.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteSystemInstanceRequest} deleteSystemInstanceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteSystemInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteSystemInstance(xAmzTarget, deleteSystemInstanceRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteSystemInstanceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteSystemInstance");
      }
      // verify the required parameter 'deleteSystemInstanceRequest' is set
      if (deleteSystemInstanceRequest === undefined || deleteSystemInstanceRequest === null) {
        throw new Error("Missing the required parameter 'deleteSystemInstanceRequest' when calling deleteSystemInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=IotThingsGraphFrontEndService.DeleteSystemInstance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSystemTemplate operation.
     * @callback module:api/DefaultApi~deleteSystemTemplateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a system. New deployments can't contain the system after its deletion. Existing deployments that contain the system will continue to work because they use a snapshot of the system that is taken when it is deployed.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteSystemTemplateRequest} deleteSystemTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteSystemTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteSystemTemplate(xAmzTarget, deleteSystemTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteSystemTemplateRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteSystemTemplate");
      }
      // verify the required parameter 'deleteSystemTemplateRequest' is set
      if (deleteSystemTemplateRequest === undefined || deleteSystemTemplateRequest === null) {
        throw new Error("Missing the required parameter 'deleteSystemTemplateRequest' when calling deleteSystemTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=IotThingsGraphFrontEndService.DeleteSystemTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploySystemInstance operation.
     * @callback module:api/DefaultApi~deploySystemInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploySystemInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> <b>Greengrass and Cloud Deployments</b> </p> <p>Deploys the system instance to the target specified in <code>CreateSystemInstance</code>. </p> <p> <b>Greengrass Deployments</b> </p> <p>If the system or any workflows and entities have been updated before this action is called, then the deployment will create a new Amazon Simple Storage Service resource file and then deploy it.</p> <p>Since this action creates a Greengrass deployment on the caller's behalf, the calling identity must have write permissions to the specified Greengrass group. Otherwise, the call will fail with an authorization error.</p> <p>For information about the artifacts that get added to your Greengrass core device when you use this API, see <a href=\"https://docs.aws.amazon.com/thingsgraph/latest/ug/iot-tg-greengrass.html\">AWS IoT Things Graph and AWS IoT Greengrass</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeploySystemInstanceRequest} deploySystemInstanceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deploySystemInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploySystemInstanceResponse}
     */
    deploySystemInstance(xAmzTarget, deploySystemInstanceRequest, opts, callback) {
      opts = opts || {};
      let postBody = deploySystemInstanceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deploySystemInstance");
      }
      // verify the required parameter 'deploySystemInstanceRequest' is set
      if (deploySystemInstanceRequest === undefined || deploySystemInstanceRequest === null) {
        throw new Error("Missing the required parameter 'deploySystemInstanceRequest' when calling deploySystemInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeploySystemInstanceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=IotThingsGraphFrontEndService.DeploySystemInstance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deprecateFlowTemplate operation.
     * @callback module:api/DefaultApi~deprecateFlowTemplateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deprecates the specified workflow. This action marks the workflow for deletion. Deprecated flows can't be deployed, but existing deployments will continue to run.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeprecateFlowTemplateRequest} deprecateFlowTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deprecateFlowTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deprecateFlowTemplate(xAmzTarget, deprecateFlowTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = deprecateFlowTemplateRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deprecateFlowTemplate");
      }
      // verify the required parameter 'deprecateFlowTemplateRequest' is set
      if (deprecateFlowTemplateRequest === undefined || deprecateFlowTemplateRequest === null) {
        throw new Error("Missing the required parameter 'deprecateFlowTemplateRequest' when calling deprecateFlowTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=IotThingsGraphFrontEndService.DeprecateFlowTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deprecateSystemTemplate operation.
     * @callback module:api/DefaultApi~deprecateSystemTemplateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deprecates the specified system.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeprecateSystemTemplateRequest} deprecateSystemTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deprecateSystemTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deprecateSystemTemplate(xAmzTarget, deprecateSystemTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = deprecateSystemTemplateRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deprecateSystemTemplate");
      }
      // verify the required parameter 'deprecateSystemTemplateRequest' is set
      if (deprecateSystemTemplateRequest === undefined || deprecateSystemTemplateRequest === null) {
        throw new Error("Missing the required parameter 'deprecateSystemTemplateRequest' when calling deprecateSystemTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=IotThingsGraphFrontEndService.DeprecateSystemTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeNamespace operation.
     * @callback module:api/DefaultApi~describeNamespaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeNamespaceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the latest version of the user's namespace and the public version that it is tracking.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeNamespaceRequest} describeNamespaceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeNamespaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeNamespaceResponse}
     */
    describeNamespace(xAmzTarget, describeNamespaceRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeNamespaceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeNamespace");
      }
      // verify the required parameter 'describeNamespaceRequest' is set
      if (describeNamespaceRequest === undefined || describeNamespaceRequest === null) {
        throw new Error("Missing the required parameter 'describeNamespaceRequest' when calling describeNamespace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeNamespaceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=IotThingsGraphFrontEndService.DescribeNamespace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dissociateEntityFromThing operation.
     * @callback module:api/DefaultApi~dissociateEntityFromThingCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dissociates a device entity from a concrete thing. The action takes only the type of the entity that you need to dissociate because only one entity of a particular type can be associated with a thing.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DissociateEntityFromThingRequest} dissociateEntityFromThingRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~dissociateEntityFromThingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    dissociateEntityFromThing(xAmzTarget, dissociateEntityFromThingRequest, opts, callback) {
      opts = opts || {};
      let postBody = dissociateEntityFromThingRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling dissociateEntityFromThing");
      }
      // verify the required parameter 'dissociateEntityFromThingRequest' is set
      if (dissociateEntityFromThingRequest === undefined || dissociateEntityFromThingRequest === null) {
        throw new Error("Missing the required parameter 'dissociateEntityFromThingRequest' when calling dissociateEntityFromThing");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=IotThingsGraphFrontEndService.DissociateEntityFromThing', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntities operation.
     * @callback module:api/DefaultApi~getEntitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetEntitiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets definitions of the specified entities. Uses the latest version of the user's namespace by default. This API returns the following TDM entities.</p> <ul> <li> <p>Properties</p> </li> <li> <p>States</p> </li> <li> <p>Events</p> </li> <li> <p>Actions</p> </li> <li> <p>Capabilities</p> </li> <li> <p>Mappings</p> </li> <li> <p>Devices</p> </li> <li> <p>Device Models</p> </li> <li> <p>Services</p> </li> </ul> <p>This action doesn't return definitions for systems, flows, and deployments.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetEntitiesRequest} getEntitiesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getEntitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetEntitiesResponse}
     */
    getEntities(xAmzTarget, getEntitiesRequest, opts, callback) {
      opts = opts || {};
      let postBody = getEntitiesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getEntities");
      }
      // verify the required parameter 'getEntitiesRequest' is set
      if (getEntitiesRequest === undefined || getEntitiesRequest === null) {
        throw new Error("Missing the required parameter 'getEntitiesRequest' when calling getEntities");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetEntitiesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=IotThingsGraphFrontEndService.GetEntities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFlowTemplate operation.
     * @callback module:api/DefaultApi~getFlowTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFlowTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the latest version of the <code>DefinitionDocument</code> and <code>FlowTemplateSummary</code> for the specified workflow.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetFlowTemplateRequest} getFlowTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getFlowTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFlowTemplateResponse}
     */
    getFlowTemplate(xAmzTarget, getFlowTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = getFlowTemplateRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getFlowTemplate");
      }
      // verify the required parameter 'getFlowTemplateRequest' is set
      if (getFlowTemplateRequest === undefined || getFlowTemplateRequest === null) {
        throw new Error("Missing the required parameter 'getFlowTemplateRequest' when calling getFlowTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetFlowTemplateResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=IotThingsGraphFrontEndService.GetFlowTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFlowTemplateRevisions operation.
     * @callback module:api/DefaultApi~getFlowTemplateRevisionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFlowTemplateRevisionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets revisions of the specified workflow. Only the last 100 revisions are stored. If the workflow has been deprecated, this action will return revisions that occurred before the deprecation. This action won't work for workflows that have been deleted.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetFlowTemplateRevisionsRequest} getFlowTemplateRevisionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~getFlowTemplateRevisionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFlowTemplateRevisionsResponse}
     */
    getFlowTemplateRevisions(xAmzTarget, getFlowTemplateRevisionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = getFlowTemplateRevisionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getFlowTemplateRevisions");
      }
      // verify the required parameter 'getFlowTemplateRevisionsRequest' is set
      if (getFlowTemplateRevisionsRequest === undefined || getFlowTemplateRevisionsRequest === null) {
        throw new Error("Missing the required parameter 'getFlowTemplateRevisionsRequest' when calling getFlowTemplateRevisions");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetFlowTemplateRevisionsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=IotThingsGraphFrontEndService.GetFlowTemplateRevisions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNamespaceDeletionStatus operation.
     * @callback module:api/DefaultApi~getNamespaceDeletionStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNamespaceDeletionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the status of a namespace deletion task.
     * @param {module:model/String} xAmzTarget 
     * @param {Object.<String, Object>} body 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getNamespaceDeletionStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNamespaceDeletionStatusResponse}
     */
    getNamespaceDeletionStatus(xAmzTarget, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getNamespaceDeletionStatus");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getNamespaceDeletionStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNamespaceDeletionStatusResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=IotThingsGraphFrontEndService.GetNamespaceDeletionStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSystemInstance operation.
     * @callback module:api/DefaultApi~getSystemInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSystemInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a system instance.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetSystemInstanceRequest} getSystemInstanceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSystemInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSystemInstanceResponse}
     */
    getSystemInstance(xAmzTarget, getSystemInstanceRequest, opts, callback) {
      opts = opts || {};
      let postBody = getSystemInstanceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getSystemInstance");
      }
      // verify the required parameter 'getSystemInstanceRequest' is set
      if (getSystemInstanceRequest === undefined || getSystemInstanceRequest === null) {
        throw new Error("Missing the required parameter 'getSystemInstanceRequest' when calling getSystemInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSystemInstanceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=IotThingsGraphFrontEndService.GetSystemInstance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSystemTemplate operation.
     * @callback module:api/DefaultApi~getSystemTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSystemTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a system.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetSystemTemplateRequest} getSystemTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSystemTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSystemTemplateResponse}
     */
    getSystemTemplate(xAmzTarget, getSystemTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = getSystemTemplateRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getSystemTemplate");
      }
      // verify the required parameter 'getSystemTemplateRequest' is set
      if (getSystemTemplateRequest === undefined || getSystemTemplateRequest === null) {
        throw new Error("Missing the required parameter 'getSystemTemplateRequest' when calling getSystemTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSystemTemplateResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=IotThingsGraphFrontEndService.GetSystemTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSystemTemplateRevisions operation.
     * @callback module:api/DefaultApi~getSystemTemplateRevisionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSystemTemplateRevisionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets revisions made to the specified system template. Only the previous 100 revisions are stored. If the system has been deprecated, this action will return the revisions that occurred before its deprecation. This action won't work with systems that have been deleted.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetSystemTemplateRevisionsRequest} getSystemTemplateRevisionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~getSystemTemplateRevisionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSystemTemplateRevisionsResponse}
     */
    getSystemTemplateRevisions(xAmzTarget, getSystemTemplateRevisionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = getSystemTemplateRevisionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getSystemTemplateRevisions");
      }
      // verify the required parameter 'getSystemTemplateRevisionsRequest' is set
      if (getSystemTemplateRevisionsRequest === undefined || getSystemTemplateRevisionsRequest === null) {
        throw new Error("Missing the required parameter 'getSystemTemplateRevisionsRequest' when calling getSystemTemplateRevisions");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSystemTemplateRevisionsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=IotThingsGraphFrontEndService.GetSystemTemplateRevisions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUploadStatus operation.
     * @callback module:api/DefaultApi~getUploadStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUploadStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the status of the specified upload.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetUploadStatusRequest} getUploadStatusRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getUploadStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUploadStatusResponse}
     */
    getUploadStatus(xAmzTarget, getUploadStatusRequest, opts, callback) {
      opts = opts || {};
      let postBody = getUploadStatusRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getUploadStatus");
      }
      // verify the required parameter 'getUploadStatusRequest' is set
      if (getUploadStatusRequest === undefined || getUploadStatusRequest === null) {
        throw new Error("Missing the required parameter 'getUploadStatusRequest' when calling getUploadStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetUploadStatusResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=IotThingsGraphFrontEndService.GetUploadStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFlowExecutionMessages operation.
     * @callback module:api/DefaultApi~listFlowExecutionMessagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFlowExecutionMessagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of objects that contain information about events in a flow execution.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListFlowExecutionMessagesRequest} listFlowExecutionMessagesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listFlowExecutionMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFlowExecutionMessagesResponse}
     */
    listFlowExecutionMessages(xAmzTarget, listFlowExecutionMessagesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listFlowExecutionMessagesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listFlowExecutionMessages");
      }
      // verify the required parameter 'listFlowExecutionMessagesRequest' is set
      if (listFlowExecutionMessagesRequest === undefined || listFlowExecutionMessagesRequest === null) {
        throw new Error("Missing the required parameter 'listFlowExecutionMessagesRequest' when calling listFlowExecutionMessages");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListFlowExecutionMessagesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=IotThingsGraphFrontEndService.ListFlowExecutionMessages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all tags on an AWS IoT Things Graph resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTagsForResourceRequest} listTagsForResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(xAmzTarget, listTagsForResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTagsForResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTagsForResource");
      }
      // verify the required parameter 'listTagsForResourceRequest' is set
      if (listTagsForResourceRequest === undefined || listTagsForResourceRequest === null) {
        throw new Error("Missing the required parameter 'listTagsForResourceRequest' when calling listTagsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=IotThingsGraphFrontEndService.ListTagsForResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchEntities operation.
     * @callback module:api/DefaultApi~searchEntitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchEntitiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for entities of the specified type. You can search for entities in your namespace and the public namespace that you're tracking.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/SearchEntitiesRequest} searchEntitiesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~searchEntitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchEntitiesResponse}
     */
    searchEntities(xAmzTarget, searchEntitiesRequest, opts, callback) {
      opts = opts || {};
      let postBody = searchEntitiesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling searchEntities");
      }
      // verify the required parameter 'searchEntitiesRequest' is set
      if (searchEntitiesRequest === undefined || searchEntitiesRequest === null) {
        throw new Error("Missing the required parameter 'searchEntitiesRequest' when calling searchEntities");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchEntitiesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=IotThingsGraphFrontEndService.SearchEntities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchFlowExecutions operation.
     * @callback module:api/DefaultApi~searchFlowExecutionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchFlowExecutionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for AWS IoT Things Graph workflow execution instances.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/SearchFlowExecutionsRequest} searchFlowExecutionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~searchFlowExecutionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchFlowExecutionsResponse}
     */
    searchFlowExecutions(xAmzTarget, searchFlowExecutionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = searchFlowExecutionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling searchFlowExecutions");
      }
      // verify the required parameter 'searchFlowExecutionsRequest' is set
      if (searchFlowExecutionsRequest === undefined || searchFlowExecutionsRequest === null) {
        throw new Error("Missing the required parameter 'searchFlowExecutionsRequest' when calling searchFlowExecutions");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchFlowExecutionsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=IotThingsGraphFrontEndService.SearchFlowExecutions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchFlowTemplates operation.
     * @callback module:api/DefaultApi~searchFlowTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchFlowTemplatesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for summary information about workflows.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/SearchFlowTemplatesRequest} searchFlowTemplatesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~searchFlowTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchFlowTemplatesResponse}
     */
    searchFlowTemplates(xAmzTarget, searchFlowTemplatesRequest, opts, callback) {
      opts = opts || {};
      let postBody = searchFlowTemplatesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling searchFlowTemplates");
      }
      // verify the required parameter 'searchFlowTemplatesRequest' is set
      if (searchFlowTemplatesRequest === undefined || searchFlowTemplatesRequest === null) {
        throw new Error("Missing the required parameter 'searchFlowTemplatesRequest' when calling searchFlowTemplates");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchFlowTemplatesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=IotThingsGraphFrontEndService.SearchFlowTemplates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchSystemInstances operation.
     * @callback module:api/DefaultApi~searchSystemInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchSystemInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for system instances in the user's account.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/SearchSystemInstancesRequest} searchSystemInstancesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~searchSystemInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchSystemInstancesResponse}
     */
    searchSystemInstances(xAmzTarget, searchSystemInstancesRequest, opts, callback) {
      opts = opts || {};
      let postBody = searchSystemInstancesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling searchSystemInstances");
      }
      // verify the required parameter 'searchSystemInstancesRequest' is set
      if (searchSystemInstancesRequest === undefined || searchSystemInstancesRequest === null) {
        throw new Error("Missing the required parameter 'searchSystemInstancesRequest' when calling searchSystemInstances");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchSystemInstancesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=IotThingsGraphFrontEndService.SearchSystemInstances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchSystemTemplates operation.
     * @callback module:api/DefaultApi~searchSystemTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchSystemTemplatesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for summary information about systems in the user's account. You can filter by the ID of a workflow to return only systems that use the specified workflow.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/SearchSystemTemplatesRequest} searchSystemTemplatesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~searchSystemTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchSystemTemplatesResponse}
     */
    searchSystemTemplates(xAmzTarget, searchSystemTemplatesRequest, opts, callback) {
      opts = opts || {};
      let postBody = searchSystemTemplatesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling searchSystemTemplates");
      }
      // verify the required parameter 'searchSystemTemplatesRequest' is set
      if (searchSystemTemplatesRequest === undefined || searchSystemTemplatesRequest === null) {
        throw new Error("Missing the required parameter 'searchSystemTemplatesRequest' when calling searchSystemTemplates");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchSystemTemplatesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=IotThingsGraphFrontEndService.SearchSystemTemplates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchThings operation.
     * @callback module:api/DefaultApi~searchThingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchThingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Searches for things associated with the specified entity. You can search by both device and device model.</p> <p>For example, if two different devices, camera1 and camera2, implement the camera device model, the user can associate thing1 to camera1 and thing2 to camera2. <code>SearchThings(camera2)</code> will return only thing2, but <code>SearchThings(camera)</code> will return both thing1 and thing2.</p> <p>This action searches for exact matches and doesn't perform partial text matching.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/SearchThingsRequest} searchThingsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~searchThingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchThingsResponse}
     */
    searchThings(xAmzTarget, searchThingsRequest, opts, callback) {
      opts = opts || {};
      let postBody = searchThingsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling searchThings");
      }
      // verify the required parameter 'searchThingsRequest' is set
      if (searchThingsRequest === undefined || searchThingsRequest === null) {
        throw new Error("Missing the required parameter 'searchThingsRequest' when calling searchThings");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchThingsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=IotThingsGraphFrontEndService.SearchThings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a tag for the specified resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(xAmzTarget, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=IotThingsGraphFrontEndService.TagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the undeploySystemInstance operation.
     * @callback module:api/DefaultApi~undeploySystemInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UndeploySystemInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a system instance from its target (Cloud or Greengrass).
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UndeploySystemInstanceRequest} undeploySystemInstanceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~undeploySystemInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UndeploySystemInstanceResponse}
     */
    undeploySystemInstance(xAmzTarget, undeploySystemInstanceRequest, opts, callback) {
      opts = opts || {};
      let postBody = undeploySystemInstanceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling undeploySystemInstance");
      }
      // verify the required parameter 'undeploySystemInstanceRequest' is set
      if (undeploySystemInstanceRequest === undefined || undeploySystemInstanceRequest === null) {
        throw new Error("Missing the required parameter 'undeploySystemInstanceRequest' when calling undeploySystemInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UndeploySystemInstanceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=IotThingsGraphFrontEndService.UndeploySystemInstance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a tag from the specified resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UntagResourceRequest} untagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(xAmzTarget, untagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = untagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling untagResource");
      }
      // verify the required parameter 'untagResourceRequest' is set
      if (untagResourceRequest === undefined || untagResourceRequest === null) {
        throw new Error("Missing the required parameter 'untagResourceRequest' when calling untagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=IotThingsGraphFrontEndService.UntagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFlowTemplate operation.
     * @callback module:api/DefaultApi~updateFlowTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateFlowTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified workflow. All deployed systems and system instances that use the workflow will see the changes in the flow when it is redeployed. If you don't want this behavior, copy the workflow (creating a new workflow with a different ID), and update the copy. The workflow can contain only entities in the specified namespace. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateFlowTemplateRequest} updateFlowTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateFlowTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateFlowTemplateResponse}
     */
    updateFlowTemplate(xAmzTarget, updateFlowTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateFlowTemplateRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateFlowTemplate");
      }
      // verify the required parameter 'updateFlowTemplateRequest' is set
      if (updateFlowTemplateRequest === undefined || updateFlowTemplateRequest === null) {
        throw new Error("Missing the required parameter 'updateFlowTemplateRequest' when calling updateFlowTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateFlowTemplateResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=IotThingsGraphFrontEndService.UpdateFlowTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSystemTemplate operation.
     * @callback module:api/DefaultApi~updateSystemTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSystemTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified system. You don't need to run this action after updating a workflow. Any deployment that uses the system will see the changes in the system when it is redeployed.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateSystemTemplateRequest} updateSystemTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateSystemTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSystemTemplateResponse}
     */
    updateSystemTemplate(xAmzTarget, updateSystemTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateSystemTemplateRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateSystemTemplate");
      }
      // verify the required parameter 'updateSystemTemplateRequest' is set
      if (updateSystemTemplateRequest === undefined || updateSystemTemplateRequest === null) {
        throw new Error("Missing the required parameter 'updateSystemTemplateRequest' when calling updateSystemTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateSystemTemplateResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=IotThingsGraphFrontEndService.UpdateSystemTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadEntityDefinitions operation.
     * @callback module:api/DefaultApi~uploadEntityDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UploadEntityDefinitionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Asynchronously uploads one or more entity definitions to the user's namespace. The <code>document</code> parameter is required if <code>syncWithPublicNamespace</code> and <code>deleteExistingEntites</code> are false. If the <code>syncWithPublicNamespace</code> parameter is set to <code>true</code>, the user's namespace will synchronize with the latest version of the public namespace. If <code>deprecateExistingEntities</code> is set to true, all entities in the latest version will be deleted before the new <code>DefinitionDocument</code> is uploaded.</p> <p>When a user uploads entity definitions for the first time, the service creates a new namespace for the user. The new namespace tracks the public namespace. Currently users can have only one namespace. The namespace version increments whenever a user uploads entity definitions that are backwards-incompatible and whenever a user sets the <code>syncWithPublicNamespace</code> parameter or the <code>deprecateExistingEntities</code> parameter to <code>true</code>.</p> <p>The IDs for all of the entities should be in URN format. Each entity must be in the user's namespace. Users can't create entities in the public namespace, but entity definitions can refer to entities in the public namespace.</p> <p>Valid entities are <code>Device</code>, <code>DeviceModel</code>, <code>Service</code>, <code>Capability</code>, <code>State</code>, <code>Action</code>, <code>Event</code>, <code>Property</code>, <code>Mapping</code>, <code>Enum</code>. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UploadEntityDefinitionsRequest} uploadEntityDefinitionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~uploadEntityDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UploadEntityDefinitionsResponse}
     */
    uploadEntityDefinitions(xAmzTarget, uploadEntityDefinitionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = uploadEntityDefinitionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling uploadEntityDefinitions");
      }
      // verify the required parameter 'uploadEntityDefinitionsRequest' is set
      if (uploadEntityDefinitionsRequest === undefined || uploadEntityDefinitionsRequest === null) {
        throw new Error("Missing the required parameter 'uploadEntityDefinitionsRequest' when calling uploadEntityDefinitions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UploadEntityDefinitionsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=IotThingsGraphFrontEndService.UploadEntityDefinitions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
