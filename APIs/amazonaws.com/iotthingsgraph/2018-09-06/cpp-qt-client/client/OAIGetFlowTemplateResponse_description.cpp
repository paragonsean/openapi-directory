/**
 * AWS IoT Things Graph
 * <fullname>AWS IoT Things Graph</fullname> <p>AWS IoT Things Graph provides an integrated set of tools that enable developers to connect devices and services that use different standards, such as units of measure and communication protocols. AWS IoT Things Graph makes it possible to build IoT applications with little to no code by connecting devices and services and defining how they interact at an abstract level.</p> <p>For more information about how AWS IoT Things Graph works, see the <a href=\"https://docs.aws.amazon.com/thingsgraph/latest/ug/iot-tg-whatis.html\">User Guide</a>.</p> <p>The AWS IoT Things Graph service is discontinued.</p>
 *
 * The version of the OpenAPI document: 2018-09-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetFlowTemplateResponse_description.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetFlowTemplateResponse_description::OAIGetFlowTemplateResponse_description(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetFlowTemplateResponse_description::OAIGetFlowTemplateResponse_description() {
    this->initializeModel();
}

OAIGetFlowTemplateResponse_description::~OAIGetFlowTemplateResponse_description() {}

void OAIGetFlowTemplateResponse_description::initializeModel() {

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_definition_isSet = false;
    m_definition_isValid = false;

    m_validated_namespace_version_isSet = false;
    m_validated_namespace_version_isValid = false;
}

void OAIGetFlowTemplateResponse_description::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetFlowTemplateResponse_description::fromJsonObject(QJsonObject json) {

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_definition_isValid = ::OpenAPI::fromJsonValue(m_definition, json[QString("definition")]);
    m_definition_isSet = !json[QString("definition")].isNull() && m_definition_isValid;

    m_validated_namespace_version_isValid = ::OpenAPI::fromJsonValue(m_validated_namespace_version, json[QString("validatedNamespaceVersion")]);
    m_validated_namespace_version_isSet = !json[QString("validatedNamespaceVersion")].isNull() && m_validated_namespace_version_isValid;
}

QString OAIGetFlowTemplateResponse_description::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetFlowTemplateResponse_description::asJsonObject() const {
    QJsonObject obj;
    if (m_summary.isSet()) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_definition.isSet()) {
        obj.insert(QString("definition"), ::OpenAPI::toJsonValue(m_definition));
    }
    if (m_validated_namespace_version_isSet) {
        obj.insert(QString("validatedNamespaceVersion"), ::OpenAPI::toJsonValue(m_validated_namespace_version));
    }
    return obj;
}

OAIFlowTemplateDescription_summary OAIGetFlowTemplateResponse_description::getSummary() const {
    return m_summary;
}
void OAIGetFlowTemplateResponse_description::setSummary(const OAIFlowTemplateDescription_summary &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIGetFlowTemplateResponse_description::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIGetFlowTemplateResponse_description::is_summary_Valid() const{
    return m_summary_isValid;
}

OAIFlowTemplateDescription_definition OAIGetFlowTemplateResponse_description::getDefinition() const {
    return m_definition;
}
void OAIGetFlowTemplateResponse_description::setDefinition(const OAIFlowTemplateDescription_definition &definition) {
    m_definition = definition;
    m_definition_isSet = true;
}

bool OAIGetFlowTemplateResponse_description::is_definition_Set() const{
    return m_definition_isSet;
}

bool OAIGetFlowTemplateResponse_description::is_definition_Valid() const{
    return m_definition_isValid;
}

qint32 OAIGetFlowTemplateResponse_description::getValidatedNamespaceVersion() const {
    return m_validated_namespace_version;
}
void OAIGetFlowTemplateResponse_description::setValidatedNamespaceVersion(const qint32 &validated_namespace_version) {
    m_validated_namespace_version = validated_namespace_version;
    m_validated_namespace_version_isSet = true;
}

bool OAIGetFlowTemplateResponse_description::is_validated_namespace_version_Set() const{
    return m_validated_namespace_version_isSet;
}

bool OAIGetFlowTemplateResponse_description::is_validated_namespace_version_Valid() const{
    return m_validated_namespace_version_isValid;
}

bool OAIGetFlowTemplateResponse_description::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_validated_namespace_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetFlowTemplateResponse_description::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
