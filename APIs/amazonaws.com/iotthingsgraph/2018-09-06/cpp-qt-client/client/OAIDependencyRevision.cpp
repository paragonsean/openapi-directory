/**
 * AWS IoT Things Graph
 * <fullname>AWS IoT Things Graph</fullname> <p>AWS IoT Things Graph provides an integrated set of tools that enable developers to connect devices and services that use different standards, such as units of measure and communication protocols. AWS IoT Things Graph makes it possible to build IoT applications with little to no code by connecting devices and services and defining how they interact at an abstract level.</p> <p>For more information about how AWS IoT Things Graph works, see the <a href=\"https://docs.aws.amazon.com/thingsgraph/latest/ug/iot-tg-whatis.html\">User Guide</a>.</p> <p>The AWS IoT Things Graph service is discontinued.</p>
 *
 * The version of the OpenAPI document: 2018-09-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDependencyRevision.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDependencyRevision::OAIDependencyRevision(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDependencyRevision::OAIDependencyRevision() {
    this->initializeModel();
}

OAIDependencyRevision::~OAIDependencyRevision() {}

void OAIDependencyRevision::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_revision_number_isSet = false;
    m_revision_number_isValid = false;
}

void OAIDependencyRevision::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDependencyRevision::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_revision_number_isValid = ::OpenAPI::fromJsonValue(m_revision_number, json[QString("revisionNumber")]);
    m_revision_number_isSet = !json[QString("revisionNumber")].isNull() && m_revision_number_isValid;
}

QString OAIDependencyRevision::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDependencyRevision::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_revision_number_isSet) {
        obj.insert(QString("revisionNumber"), ::OpenAPI::toJsonValue(m_revision_number));
    }
    return obj;
}

QString OAIDependencyRevision::getId() const {
    return m_id;
}
void OAIDependencyRevision::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDependencyRevision::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDependencyRevision::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIDependencyRevision::getRevisionNumber() const {
    return m_revision_number;
}
void OAIDependencyRevision::setRevisionNumber(const qint32 &revision_number) {
    m_revision_number = revision_number;
    m_revision_number_isSet = true;
}

bool OAIDependencyRevision::is_revision_number_Set() const{
    return m_revision_number_isSet;
}

bool OAIDependencyRevision::is_revision_number_Valid() const{
    return m_revision_number_isValid;
}

bool OAIDependencyRevision::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDependencyRevision::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
