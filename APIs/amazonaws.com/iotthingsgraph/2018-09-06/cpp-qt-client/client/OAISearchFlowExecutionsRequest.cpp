/**
 * AWS IoT Things Graph
 * <fullname>AWS IoT Things Graph</fullname> <p>AWS IoT Things Graph provides an integrated set of tools that enable developers to connect devices and services that use different standards, such as units of measure and communication protocols. AWS IoT Things Graph makes it possible to build IoT applications with little to no code by connecting devices and services and defining how they interact at an abstract level.</p> <p>For more information about how AWS IoT Things Graph works, see the <a href=\"https://docs.aws.amazon.com/thingsgraph/latest/ug/iot-tg-whatis.html\">User Guide</a>.</p> <p>The AWS IoT Things Graph service is discontinued.</p>
 *
 * The version of the OpenAPI document: 2018-09-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchFlowExecutionsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchFlowExecutionsRequest::OAISearchFlowExecutionsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchFlowExecutionsRequest::OAISearchFlowExecutionsRequest() {
    this->initializeModel();
}

OAISearchFlowExecutionsRequest::~OAISearchFlowExecutionsRequest() {}

void OAISearchFlowExecutionsRequest::initializeModel() {

    m_system_instance_id_isSet = false;
    m_system_instance_id_isValid = false;

    m_flow_execution_id_isSet = false;
    m_flow_execution_id_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAISearchFlowExecutionsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchFlowExecutionsRequest::fromJsonObject(QJsonObject json) {

    m_system_instance_id_isValid = ::OpenAPI::fromJsonValue(m_system_instance_id, json[QString("systemInstanceId")]);
    m_system_instance_id_isSet = !json[QString("systemInstanceId")].isNull() && m_system_instance_id_isValid;

    m_flow_execution_id_isValid = ::OpenAPI::fromJsonValue(m_flow_execution_id, json[QString("flowExecutionId")]);
    m_flow_execution_id_isSet = !json[QString("flowExecutionId")].isNull() && m_flow_execution_id_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;
}

QString OAISearchFlowExecutionsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchFlowExecutionsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_system_instance_id_isSet) {
        obj.insert(QString("systemInstanceId"), ::OpenAPI::toJsonValue(m_system_instance_id));
    }
    if (m_flow_execution_id_isSet) {
        obj.insert(QString("flowExecutionId"), ::OpenAPI::toJsonValue(m_flow_execution_id));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QString OAISearchFlowExecutionsRequest::getSystemInstanceId() const {
    return m_system_instance_id;
}
void OAISearchFlowExecutionsRequest::setSystemInstanceId(const QString &system_instance_id) {
    m_system_instance_id = system_instance_id;
    m_system_instance_id_isSet = true;
}

bool OAISearchFlowExecutionsRequest::is_system_instance_id_Set() const{
    return m_system_instance_id_isSet;
}

bool OAISearchFlowExecutionsRequest::is_system_instance_id_Valid() const{
    return m_system_instance_id_isValid;
}

QString OAISearchFlowExecutionsRequest::getFlowExecutionId() const {
    return m_flow_execution_id;
}
void OAISearchFlowExecutionsRequest::setFlowExecutionId(const QString &flow_execution_id) {
    m_flow_execution_id = flow_execution_id;
    m_flow_execution_id_isSet = true;
}

bool OAISearchFlowExecutionsRequest::is_flow_execution_id_Set() const{
    return m_flow_execution_id_isSet;
}

bool OAISearchFlowExecutionsRequest::is_flow_execution_id_Valid() const{
    return m_flow_execution_id_isValid;
}

QDateTime OAISearchFlowExecutionsRequest::getStartTime() const {
    return m_start_time;
}
void OAISearchFlowExecutionsRequest::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAISearchFlowExecutionsRequest::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAISearchFlowExecutionsRequest::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAISearchFlowExecutionsRequest::getEndTime() const {
    return m_end_time;
}
void OAISearchFlowExecutionsRequest::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAISearchFlowExecutionsRequest::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAISearchFlowExecutionsRequest::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAISearchFlowExecutionsRequest::getNextToken() const {
    return m_next_token;
}
void OAISearchFlowExecutionsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAISearchFlowExecutionsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAISearchFlowExecutionsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAISearchFlowExecutionsRequest::getMaxResults() const {
    return m_max_results;
}
void OAISearchFlowExecutionsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAISearchFlowExecutionsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAISearchFlowExecutionsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAISearchFlowExecutionsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_system_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flow_execution_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchFlowExecutionsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_system_instance_id_isValid && true;
}

} // namespace OpenAPI
