/**
 * AWS IoT Things Graph
 * <fullname>AWS IoT Things Graph</fullname> <p>AWS IoT Things Graph provides an integrated set of tools that enable developers to connect devices and services that use different standards, such as units of measure and communication protocols. AWS IoT Things Graph makes it possible to build IoT applications with little to no code by connecting devices and services and defining how they interact at an abstract level.</p> <p>For more information about how AWS IoT Things Graph works, see the <a href=\"https://docs.aws.amazon.com/thingsgraph/latest/ug/iot-tg-whatis.html\">User Guide</a>.</p> <p>The AWS IoT Things Graph service is discontinued.</p>
 *
 * The version of the OpenAPI document: 2018-09-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNamespaceDeletionStatusResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNamespaceDeletionStatusResponse::OAIGetNamespaceDeletionStatusResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNamespaceDeletionStatusResponse::OAIGetNamespaceDeletionStatusResponse() {
    this->initializeModel();
}

OAIGetNamespaceDeletionStatusResponse::~OAIGetNamespaceDeletionStatusResponse() {}

void OAIGetNamespaceDeletionStatusResponse::initializeModel() {

    m_namespace_arn_isSet = false;
    m_namespace_arn_isValid = false;

    m_namespace_name_isSet = false;
    m_namespace_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;
}

void OAIGetNamespaceDeletionStatusResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNamespaceDeletionStatusResponse::fromJsonObject(QJsonObject json) {

    m_namespace_arn_isValid = ::OpenAPI::fromJsonValue(m_namespace_arn, json[QString("namespaceArn")]);
    m_namespace_arn_isSet = !json[QString("namespaceArn")].isNull() && m_namespace_arn_isValid;

    m_namespace_name_isValid = ::OpenAPI::fromJsonValue(m_namespace_name, json[QString("namespaceName")]);
    m_namespace_name_isSet = !json[QString("namespaceName")].isNull() && m_namespace_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("errorCode")]);
    m_error_code_isSet = !json[QString("errorCode")].isNull() && m_error_code_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;
}

QString OAIGetNamespaceDeletionStatusResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNamespaceDeletionStatusResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_namespace_arn_isSet) {
        obj.insert(QString("namespaceArn"), ::OpenAPI::toJsonValue(m_namespace_arn));
    }
    if (m_namespace_name_isSet) {
        obj.insert(QString("namespaceName"), ::OpenAPI::toJsonValue(m_namespace_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_error_code.isSet()) {
        obj.insert(QString("errorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    return obj;
}

QString OAIGetNamespaceDeletionStatusResponse::getNamespaceArn() const {
    return m_namespace_arn;
}
void OAIGetNamespaceDeletionStatusResponse::setNamespaceArn(const QString &namespace_arn) {
    m_namespace_arn = namespace_arn;
    m_namespace_arn_isSet = true;
}

bool OAIGetNamespaceDeletionStatusResponse::is_namespace_arn_Set() const{
    return m_namespace_arn_isSet;
}

bool OAIGetNamespaceDeletionStatusResponse::is_namespace_arn_Valid() const{
    return m_namespace_arn_isValid;
}

QString OAIGetNamespaceDeletionStatusResponse::getNamespaceName() const {
    return m_namespace_name;
}
void OAIGetNamespaceDeletionStatusResponse::setNamespaceName(const QString &namespace_name) {
    m_namespace_name = namespace_name;
    m_namespace_name_isSet = true;
}

bool OAIGetNamespaceDeletionStatusResponse::is_namespace_name_Set() const{
    return m_namespace_name_isSet;
}

bool OAIGetNamespaceDeletionStatusResponse::is_namespace_name_Valid() const{
    return m_namespace_name_isValid;
}

OAINamespaceDeletionStatus OAIGetNamespaceDeletionStatusResponse::getStatus() const {
    return m_status;
}
void OAIGetNamespaceDeletionStatusResponse::setStatus(const OAINamespaceDeletionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetNamespaceDeletionStatusResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetNamespaceDeletionStatusResponse::is_status_Valid() const{
    return m_status_isValid;
}

OAINamespaceDeletionStatusErrorCodes OAIGetNamespaceDeletionStatusResponse::getErrorCode() const {
    return m_error_code;
}
void OAIGetNamespaceDeletionStatusResponse::setErrorCode(const OAINamespaceDeletionStatusErrorCodes &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIGetNamespaceDeletionStatusResponse::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIGetNamespaceDeletionStatusResponse::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIGetNamespaceDeletionStatusResponse::getErrorMessage() const {
    return m_error_message;
}
void OAIGetNamespaceDeletionStatusResponse::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIGetNamespaceDeletionStatusResponse::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIGetNamespaceDeletionStatusResponse::is_error_message_Valid() const{
    return m_error_message_isValid;
}

bool OAIGetNamespaceDeletionStatusResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_namespace_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_namespace_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNamespaceDeletionStatusResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
