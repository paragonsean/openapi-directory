/**
 * AWS IoT Things Graph
 * <fullname>AWS IoT Things Graph</fullname> <p>AWS IoT Things Graph provides an integrated set of tools that enable developers to connect devices and services that use different standards, such as units of measure and communication protocols. AWS IoT Things Graph makes it possible to build IoT applications with little to no code by connecting devices and services and defining how they interact at an abstract level.</p> <p>For more information about how AWS IoT Things Graph works, see the <a href=\"https://docs.aws.amazon.com/thingsgraph/latest/ug/iot-tg-whatis.html\">User Guide</a>.</p> <p>The AWS IoT Things Graph service is discontinued.</p>
 *
 * The version of the OpenAPI document: 2018-09-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntityType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntityType::OAIEntityType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntityType::OAIEntityType() {
    this->initializeModel();
}

OAIEntityType::~OAIEntityType() {}

void OAIEntityType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEntityType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIEntityType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("DEVICE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::DEVICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SERVICE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::SERVICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEVICE_MODEL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::DEVICE_MODEL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CAPABILITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::CAPABILITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::STATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::ACTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EVENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::EVENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PROPERTY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::PROPERTY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MAPPING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::MAPPING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ENUM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::ENUM;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIEntityType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIEntityType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIEntityType::DEVICE:
            val = "DEVICE";
            break;
        case eOAIEntityType::SERVICE:
            val = "SERVICE";
            break;
        case eOAIEntityType::DEVICE_MODEL:
            val = "DEVICE_MODEL";
            break;
        case eOAIEntityType::CAPABILITY:
            val = "CAPABILITY";
            break;
        case eOAIEntityType::STATE:
            val = "STATE";
            break;
        case eOAIEntityType::ACTION:
            val = "ACTION";
            break;
        case eOAIEntityType::EVENT:
            val = "EVENT";
            break;
        case eOAIEntityType::PROPERTY:
            val = "PROPERTY";
            break;
        case eOAIEntityType::MAPPING:
            val = "MAPPING";
            break;
        case eOAIEntityType::ENUM:
            val = "ENUM";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIEntityType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEntityType::eOAIEntityType OAIEntityType::getValue() const {
    return m_value;
}

void OAIEntityType::setValue(const OAIEntityType::eOAIEntityType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIEntityType::isSet() const {
    
    return m_value_isSet;
}

bool OAIEntityType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
