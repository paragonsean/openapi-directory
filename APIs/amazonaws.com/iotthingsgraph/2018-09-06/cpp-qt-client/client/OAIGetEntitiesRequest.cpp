/**
 * AWS IoT Things Graph
 * <fullname>AWS IoT Things Graph</fullname> <p>AWS IoT Things Graph provides an integrated set of tools that enable developers to connect devices and services that use different standards, such as units of measure and communication protocols. AWS IoT Things Graph makes it possible to build IoT applications with little to no code by connecting devices and services and defining how they interact at an abstract level.</p> <p>For more information about how AWS IoT Things Graph works, see the <a href=\"https://docs.aws.amazon.com/thingsgraph/latest/ug/iot-tg-whatis.html\">User Guide</a>.</p> <p>The AWS IoT Things Graph service is discontinued.</p>
 *
 * The version of the OpenAPI document: 2018-09-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetEntitiesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetEntitiesRequest::OAIGetEntitiesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetEntitiesRequest::OAIGetEntitiesRequest() {
    this->initializeModel();
}

OAIGetEntitiesRequest::~OAIGetEntitiesRequest() {}

void OAIGetEntitiesRequest::initializeModel() {

    m_ids_isSet = false;
    m_ids_isValid = false;

    m_namespace_version_isSet = false;
    m_namespace_version_isValid = false;
}

void OAIGetEntitiesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetEntitiesRequest::fromJsonObject(QJsonObject json) {

    m_ids_isValid = ::OpenAPI::fromJsonValue(m_ids, json[QString("ids")]);
    m_ids_isSet = !json[QString("ids")].isNull() && m_ids_isValid;

    m_namespace_version_isValid = ::OpenAPI::fromJsonValue(m_namespace_version, json[QString("namespaceVersion")]);
    m_namespace_version_isSet = !json[QString("namespaceVersion")].isNull() && m_namespace_version_isValid;
}

QString OAIGetEntitiesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetEntitiesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_ids.isSet()) {
        obj.insert(QString("ids"), ::OpenAPI::toJsonValue(m_ids));
    }
    if (m_namespace_version_isSet) {
        obj.insert(QString("namespaceVersion"), ::OpenAPI::toJsonValue(m_namespace_version));
    }
    return obj;
}

QList OAIGetEntitiesRequest::getIds() const {
    return m_ids;
}
void OAIGetEntitiesRequest::setIds(const QList &ids) {
    m_ids = ids;
    m_ids_isSet = true;
}

bool OAIGetEntitiesRequest::is_ids_Set() const{
    return m_ids_isSet;
}

bool OAIGetEntitiesRequest::is_ids_Valid() const{
    return m_ids_isValid;
}

qint32 OAIGetEntitiesRequest::getNamespaceVersion() const {
    return m_namespace_version;
}
void OAIGetEntitiesRequest::setNamespaceVersion(const qint32 &namespace_version) {
    m_namespace_version = namespace_version;
    m_namespace_version_isSet = true;
}

bool OAIGetEntitiesRequest::is_namespace_version_Set() const{
    return m_namespace_version_isSet;
}

bool OAIGetEntitiesRequest::is_namespace_version_Valid() const{
    return m_namespace_version_isValid;
}

bool OAIGetEntitiesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_namespace_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetEntitiesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ids_isValid && true;
}

} // namespace OpenAPI
