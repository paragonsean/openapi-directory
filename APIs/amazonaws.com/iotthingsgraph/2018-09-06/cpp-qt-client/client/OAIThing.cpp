/**
 * AWS IoT Things Graph
 * <fullname>AWS IoT Things Graph</fullname> <p>AWS IoT Things Graph provides an integrated set of tools that enable developers to connect devices and services that use different standards, such as units of measure and communication protocols. AWS IoT Things Graph makes it possible to build IoT applications with little to no code by connecting devices and services and defining how they interact at an abstract level.</p> <p>For more information about how AWS IoT Things Graph works, see the <a href=\"https://docs.aws.amazon.com/thingsgraph/latest/ug/iot-tg-whatis.html\">User Guide</a>.</p> <p>The AWS IoT Things Graph service is discontinued.</p>
 *
 * The version of the OpenAPI document: 2018-09-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThing.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThing::OAIThing(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThing::OAIThing() {
    this->initializeModel();
}

OAIThing::~OAIThing() {}

void OAIThing::initializeModel() {

    m_thing_arn_isSet = false;
    m_thing_arn_isValid = false;

    m_thing_name_isSet = false;
    m_thing_name_isValid = false;
}

void OAIThing::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThing::fromJsonObject(QJsonObject json) {

    m_thing_arn_isValid = ::OpenAPI::fromJsonValue(m_thing_arn, json[QString("thingArn")]);
    m_thing_arn_isSet = !json[QString("thingArn")].isNull() && m_thing_arn_isValid;

    m_thing_name_isValid = ::OpenAPI::fromJsonValue(m_thing_name, json[QString("thingName")]);
    m_thing_name_isSet = !json[QString("thingName")].isNull() && m_thing_name_isValid;
}

QString OAIThing::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThing::asJsonObject() const {
    QJsonObject obj;
    if (m_thing_arn_isSet) {
        obj.insert(QString("thingArn"), ::OpenAPI::toJsonValue(m_thing_arn));
    }
    if (m_thing_name_isSet) {
        obj.insert(QString("thingName"), ::OpenAPI::toJsonValue(m_thing_name));
    }
    return obj;
}

QString OAIThing::getThingArn() const {
    return m_thing_arn;
}
void OAIThing::setThingArn(const QString &thing_arn) {
    m_thing_arn = thing_arn;
    m_thing_arn_isSet = true;
}

bool OAIThing::is_thing_arn_Set() const{
    return m_thing_arn_isSet;
}

bool OAIThing::is_thing_arn_Valid() const{
    return m_thing_arn_isValid;
}

QString OAIThing::getThingName() const {
    return m_thing_name;
}
void OAIThing::setThingName(const QString &thing_name) {
    m_thing_name = thing_name;
    m_thing_name_isSet = true;
}

bool OAIThing::is_thing_name_Set() const{
    return m_thing_name_isSet;
}

bool OAIThing::is_thing_name_Valid() const{
    return m_thing_name_isValid;
}

bool OAIThing::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_thing_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thing_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThing::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
