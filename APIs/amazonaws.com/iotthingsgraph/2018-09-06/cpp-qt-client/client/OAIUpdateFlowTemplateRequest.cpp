/**
 * AWS IoT Things Graph
 * <fullname>AWS IoT Things Graph</fullname> <p>AWS IoT Things Graph provides an integrated set of tools that enable developers to connect devices and services that use different standards, such as units of measure and communication protocols. AWS IoT Things Graph makes it possible to build IoT applications with little to no code by connecting devices and services and defining how they interact at an abstract level.</p> <p>For more information about how AWS IoT Things Graph works, see the <a href=\"https://docs.aws.amazon.com/thingsgraph/latest/ug/iot-tg-whatis.html\">User Guide</a>.</p> <p>The AWS IoT Things Graph service is discontinued.</p>
 *
 * The version of the OpenAPI document: 2018-09-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateFlowTemplateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateFlowTemplateRequest::OAIUpdateFlowTemplateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateFlowTemplateRequest::OAIUpdateFlowTemplateRequest() {
    this->initializeModel();
}

OAIUpdateFlowTemplateRequest::~OAIUpdateFlowTemplateRequest() {}

void OAIUpdateFlowTemplateRequest::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_definition_isSet = false;
    m_definition_isValid = false;

    m_compatible_namespace_version_isSet = false;
    m_compatible_namespace_version_isValid = false;
}

void OAIUpdateFlowTemplateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateFlowTemplateRequest::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_definition_isValid = ::OpenAPI::fromJsonValue(m_definition, json[QString("definition")]);
    m_definition_isSet = !json[QString("definition")].isNull() && m_definition_isValid;

    m_compatible_namespace_version_isValid = ::OpenAPI::fromJsonValue(m_compatible_namespace_version, json[QString("compatibleNamespaceVersion")]);
    m_compatible_namespace_version_isSet = !json[QString("compatibleNamespaceVersion")].isNull() && m_compatible_namespace_version_isValid;
}

QString OAIUpdateFlowTemplateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateFlowTemplateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_definition.isSet()) {
        obj.insert(QString("definition"), ::OpenAPI::toJsonValue(m_definition));
    }
    if (m_compatible_namespace_version_isSet) {
        obj.insert(QString("compatibleNamespaceVersion"), ::OpenAPI::toJsonValue(m_compatible_namespace_version));
    }
    return obj;
}

QString OAIUpdateFlowTemplateRequest::getId() const {
    return m_id;
}
void OAIUpdateFlowTemplateRequest::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUpdateFlowTemplateRequest::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUpdateFlowTemplateRequest::is_id_Valid() const{
    return m_id_isValid;
}

OAIUpdateFlowTemplateRequest_definition OAIUpdateFlowTemplateRequest::getDefinition() const {
    return m_definition;
}
void OAIUpdateFlowTemplateRequest::setDefinition(const OAIUpdateFlowTemplateRequest_definition &definition) {
    m_definition = definition;
    m_definition_isSet = true;
}

bool OAIUpdateFlowTemplateRequest::is_definition_Set() const{
    return m_definition_isSet;
}

bool OAIUpdateFlowTemplateRequest::is_definition_Valid() const{
    return m_definition_isValid;
}

qint32 OAIUpdateFlowTemplateRequest::getCompatibleNamespaceVersion() const {
    return m_compatible_namespace_version;
}
void OAIUpdateFlowTemplateRequest::setCompatibleNamespaceVersion(const qint32 &compatible_namespace_version) {
    m_compatible_namespace_version = compatible_namespace_version;
    m_compatible_namespace_version_isSet = true;
}

bool OAIUpdateFlowTemplateRequest::is_compatible_namespace_version_Set() const{
    return m_compatible_namespace_version_isSet;
}

bool OAIUpdateFlowTemplateRequest::is_compatible_namespace_version_Valid() const{
    return m_compatible_namespace_version_isValid;
}

bool OAIUpdateFlowTemplateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_compatible_namespace_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateFlowTemplateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_definition_isValid && true;
}

} // namespace OpenAPI
