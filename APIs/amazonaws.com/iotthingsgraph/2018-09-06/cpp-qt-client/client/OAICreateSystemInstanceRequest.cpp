/**
 * AWS IoT Things Graph
 * <fullname>AWS IoT Things Graph</fullname> <p>AWS IoT Things Graph provides an integrated set of tools that enable developers to connect devices and services that use different standards, such as units of measure and communication protocols. AWS IoT Things Graph makes it possible to build IoT applications with little to no code by connecting devices and services and defining how they interact at an abstract level.</p> <p>For more information about how AWS IoT Things Graph works, see the <a href=\"https://docs.aws.amazon.com/thingsgraph/latest/ug/iot-tg-whatis.html\">User Guide</a>.</p> <p>The AWS IoT Things Graph service is discontinued.</p>
 *
 * The version of the OpenAPI document: 2018-09-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateSystemInstanceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateSystemInstanceRequest::OAICreateSystemInstanceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateSystemInstanceRequest::OAICreateSystemInstanceRequest() {
    this->initializeModel();
}

OAICreateSystemInstanceRequest::~OAICreateSystemInstanceRequest() {}

void OAICreateSystemInstanceRequest::initializeModel() {

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_definition_isSet = false;
    m_definition_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_greengrass_group_name_isSet = false;
    m_greengrass_group_name_isValid = false;

    m_s3_bucket_name_isSet = false;
    m_s3_bucket_name_isValid = false;

    m_metrics_configuration_isSet = false;
    m_metrics_configuration_isValid = false;

    m_flow_actions_role_arn_isSet = false;
    m_flow_actions_role_arn_isValid = false;
}

void OAICreateSystemInstanceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateSystemInstanceRequest::fromJsonObject(QJsonObject json) {

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_definition_isValid = ::OpenAPI::fromJsonValue(m_definition, json[QString("definition")]);
    m_definition_isSet = !json[QString("definition")].isNull() && m_definition_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_greengrass_group_name_isValid = ::OpenAPI::fromJsonValue(m_greengrass_group_name, json[QString("greengrassGroupName")]);
    m_greengrass_group_name_isSet = !json[QString("greengrassGroupName")].isNull() && m_greengrass_group_name_isValid;

    m_s3_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_s3_bucket_name, json[QString("s3BucketName")]);
    m_s3_bucket_name_isSet = !json[QString("s3BucketName")].isNull() && m_s3_bucket_name_isValid;

    m_metrics_configuration_isValid = ::OpenAPI::fromJsonValue(m_metrics_configuration, json[QString("metricsConfiguration")]);
    m_metrics_configuration_isSet = !json[QString("metricsConfiguration")].isNull() && m_metrics_configuration_isValid;

    m_flow_actions_role_arn_isValid = ::OpenAPI::fromJsonValue(m_flow_actions_role_arn, json[QString("flowActionsRoleArn")]);
    m_flow_actions_role_arn_isSet = !json[QString("flowActionsRoleArn")].isNull() && m_flow_actions_role_arn_isValid;
}

QString OAICreateSystemInstanceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateSystemInstanceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_definition.isSet()) {
        obj.insert(QString("definition"), ::OpenAPI::toJsonValue(m_definition));
    }
    if (m_target.isSet()) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_greengrass_group_name_isSet) {
        obj.insert(QString("greengrassGroupName"), ::OpenAPI::toJsonValue(m_greengrass_group_name));
    }
    if (m_s3_bucket_name_isSet) {
        obj.insert(QString("s3BucketName"), ::OpenAPI::toJsonValue(m_s3_bucket_name));
    }
    if (m_metrics_configuration.isSet()) {
        obj.insert(QString("metricsConfiguration"), ::OpenAPI::toJsonValue(m_metrics_configuration));
    }
    if (m_flow_actions_role_arn_isSet) {
        obj.insert(QString("flowActionsRoleArn"), ::OpenAPI::toJsonValue(m_flow_actions_role_arn));
    }
    return obj;
}

QList OAICreateSystemInstanceRequest::getTags() const {
    return m_tags;
}
void OAICreateSystemInstanceRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateSystemInstanceRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateSystemInstanceRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIDefinitionDocument OAICreateSystemInstanceRequest::getDefinition() const {
    return m_definition;
}
void OAICreateSystemInstanceRequest::setDefinition(const OAIDefinitionDocument &definition) {
    m_definition = definition;
    m_definition_isSet = true;
}

bool OAICreateSystemInstanceRequest::is_definition_Set() const{
    return m_definition_isSet;
}

bool OAICreateSystemInstanceRequest::is_definition_Valid() const{
    return m_definition_isValid;
}

OAIDeploymentTarget OAICreateSystemInstanceRequest::getTarget() const {
    return m_target;
}
void OAICreateSystemInstanceRequest::setTarget(const OAIDeploymentTarget &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAICreateSystemInstanceRequest::is_target_Set() const{
    return m_target_isSet;
}

bool OAICreateSystemInstanceRequest::is_target_Valid() const{
    return m_target_isValid;
}

QString OAICreateSystemInstanceRequest::getGreengrassGroupName() const {
    return m_greengrass_group_name;
}
void OAICreateSystemInstanceRequest::setGreengrassGroupName(const QString &greengrass_group_name) {
    m_greengrass_group_name = greengrass_group_name;
    m_greengrass_group_name_isSet = true;
}

bool OAICreateSystemInstanceRequest::is_greengrass_group_name_Set() const{
    return m_greengrass_group_name_isSet;
}

bool OAICreateSystemInstanceRequest::is_greengrass_group_name_Valid() const{
    return m_greengrass_group_name_isValid;
}

QString OAICreateSystemInstanceRequest::getS3BucketName() const {
    return m_s3_bucket_name;
}
void OAICreateSystemInstanceRequest::setS3BucketName(const QString &s3_bucket_name) {
    m_s3_bucket_name = s3_bucket_name;
    m_s3_bucket_name_isSet = true;
}

bool OAICreateSystemInstanceRequest::is_s3_bucket_name_Set() const{
    return m_s3_bucket_name_isSet;
}

bool OAICreateSystemInstanceRequest::is_s3_bucket_name_Valid() const{
    return m_s3_bucket_name_isValid;
}

OAIMetricsConfiguration OAICreateSystemInstanceRequest::getMetricsConfiguration() const {
    return m_metrics_configuration;
}
void OAICreateSystemInstanceRequest::setMetricsConfiguration(const OAIMetricsConfiguration &metrics_configuration) {
    m_metrics_configuration = metrics_configuration;
    m_metrics_configuration_isSet = true;
}

bool OAICreateSystemInstanceRequest::is_metrics_configuration_Set() const{
    return m_metrics_configuration_isSet;
}

bool OAICreateSystemInstanceRequest::is_metrics_configuration_Valid() const{
    return m_metrics_configuration_isValid;
}

QString OAICreateSystemInstanceRequest::getFlowActionsRoleArn() const {
    return m_flow_actions_role_arn;
}
void OAICreateSystemInstanceRequest::setFlowActionsRoleArn(const QString &flow_actions_role_arn) {
    m_flow_actions_role_arn = flow_actions_role_arn;
    m_flow_actions_role_arn_isSet = true;
}

bool OAICreateSystemInstanceRequest::is_flow_actions_role_arn_Set() const{
    return m_flow_actions_role_arn_isSet;
}

bool OAICreateSystemInstanceRequest::is_flow_actions_role_arn_Valid() const{
    return m_flow_actions_role_arn_isValid;
}

bool OAICreateSystemInstanceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_greengrass_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_flow_actions_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateSystemInstanceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_definition_isValid && m_target_isValid && true;
}

} // namespace OpenAPI
