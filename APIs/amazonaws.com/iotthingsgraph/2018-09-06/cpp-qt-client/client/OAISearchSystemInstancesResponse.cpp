/**
 * AWS IoT Things Graph
 * <fullname>AWS IoT Things Graph</fullname> <p>AWS IoT Things Graph provides an integrated set of tools that enable developers to connect devices and services that use different standards, such as units of measure and communication protocols. AWS IoT Things Graph makes it possible to build IoT applications with little to no code by connecting devices and services and defining how they interact at an abstract level.</p> <p>For more information about how AWS IoT Things Graph works, see the <a href=\"https://docs.aws.amazon.com/thingsgraph/latest/ug/iot-tg-whatis.html\">User Guide</a>.</p> <p>The AWS IoT Things Graph service is discontinued.</p>
 *
 * The version of the OpenAPI document: 2018-09-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchSystemInstancesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchSystemInstancesResponse::OAISearchSystemInstancesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchSystemInstancesResponse::OAISearchSystemInstancesResponse() {
    this->initializeModel();
}

OAISearchSystemInstancesResponse::~OAISearchSystemInstancesResponse() {}

void OAISearchSystemInstancesResponse::initializeModel() {

    m_summaries_isSet = false;
    m_summaries_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAISearchSystemInstancesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchSystemInstancesResponse::fromJsonObject(QJsonObject json) {

    m_summaries_isValid = ::OpenAPI::fromJsonValue(m_summaries, json[QString("summaries")]);
    m_summaries_isSet = !json[QString("summaries")].isNull() && m_summaries_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAISearchSystemInstancesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchSystemInstancesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_summaries.isSet()) {
        obj.insert(QString("summaries"), ::OpenAPI::toJsonValue(m_summaries));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAISearchSystemInstancesResponse::getSummaries() const {
    return m_summaries;
}
void OAISearchSystemInstancesResponse::setSummaries(const QList &summaries) {
    m_summaries = summaries;
    m_summaries_isSet = true;
}

bool OAISearchSystemInstancesResponse::is_summaries_Set() const{
    return m_summaries_isSet;
}

bool OAISearchSystemInstancesResponse::is_summaries_Valid() const{
    return m_summaries_isValid;
}

QString OAISearchSystemInstancesResponse::getNextToken() const {
    return m_next_token;
}
void OAISearchSystemInstancesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAISearchSystemInstancesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAISearchSystemInstancesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAISearchSystemInstancesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_summaries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchSystemInstancesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
