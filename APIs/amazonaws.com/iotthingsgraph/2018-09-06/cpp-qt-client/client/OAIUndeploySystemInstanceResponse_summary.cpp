/**
 * AWS IoT Things Graph
 * <fullname>AWS IoT Things Graph</fullname> <p>AWS IoT Things Graph provides an integrated set of tools that enable developers to connect devices and services that use different standards, such as units of measure and communication protocols. AWS IoT Things Graph makes it possible to build IoT applications with little to no code by connecting devices and services and defining how they interact at an abstract level.</p> <p>For more information about how AWS IoT Things Graph works, see the <a href=\"https://docs.aws.amazon.com/thingsgraph/latest/ug/iot-tg-whatis.html\">User Guide</a>.</p> <p>The AWS IoT Things Graph service is discontinued.</p>
 *
 * The version of the OpenAPI document: 2018-09-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUndeploySystemInstanceResponse_summary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUndeploySystemInstanceResponse_summary::OAIUndeploySystemInstanceResponse_summary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUndeploySystemInstanceResponse_summary::OAIUndeploySystemInstanceResponse_summary() {
    this->initializeModel();
}

OAIUndeploySystemInstanceResponse_summary::~OAIUndeploySystemInstanceResponse_summary() {}

void OAIUndeploySystemInstanceResponse_summary::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_greengrass_group_name_isSet = false;
    m_greengrass_group_name_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_greengrass_group_id_isSet = false;
    m_greengrass_group_id_isValid = false;

    m_greengrass_group_version_id_isSet = false;
    m_greengrass_group_version_id_isValid = false;
}

void OAIUndeploySystemInstanceResponse_summary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUndeploySystemInstanceResponse_summary::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_greengrass_group_name_isValid = ::OpenAPI::fromJsonValue(m_greengrass_group_name, json[QString("greengrassGroupName")]);
    m_greengrass_group_name_isSet = !json[QString("greengrassGroupName")].isNull() && m_greengrass_group_name_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_greengrass_group_id_isValid = ::OpenAPI::fromJsonValue(m_greengrass_group_id, json[QString("greengrassGroupId")]);
    m_greengrass_group_id_isSet = !json[QString("greengrassGroupId")].isNull() && m_greengrass_group_id_isValid;

    m_greengrass_group_version_id_isValid = ::OpenAPI::fromJsonValue(m_greengrass_group_version_id, json[QString("greengrassGroupVersionId")]);
    m_greengrass_group_version_id_isSet = !json[QString("greengrassGroupVersionId")].isNull() && m_greengrass_group_version_id_isValid;
}

QString OAIUndeploySystemInstanceResponse_summary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUndeploySystemInstanceResponse_summary::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_target.isSet()) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_greengrass_group_name_isSet) {
        obj.insert(QString("greengrassGroupName"), ::OpenAPI::toJsonValue(m_greengrass_group_name));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_greengrass_group_id_isSet) {
        obj.insert(QString("greengrassGroupId"), ::OpenAPI::toJsonValue(m_greengrass_group_id));
    }
    if (m_greengrass_group_version_id_isSet) {
        obj.insert(QString("greengrassGroupVersionId"), ::OpenAPI::toJsonValue(m_greengrass_group_version_id));
    }
    return obj;
}

QString OAIUndeploySystemInstanceResponse_summary::getId() const {
    return m_id;
}
void OAIUndeploySystemInstanceResponse_summary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUndeploySystemInstanceResponse_summary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUndeploySystemInstanceResponse_summary::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUndeploySystemInstanceResponse_summary::getArn() const {
    return m_arn;
}
void OAIUndeploySystemInstanceResponse_summary::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIUndeploySystemInstanceResponse_summary::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIUndeploySystemInstanceResponse_summary::is_arn_Valid() const{
    return m_arn_isValid;
}

OAISystemInstanceDeploymentStatus OAIUndeploySystemInstanceResponse_summary::getStatus() const {
    return m_status;
}
void OAIUndeploySystemInstanceResponse_summary::setStatus(const OAISystemInstanceDeploymentStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUndeploySystemInstanceResponse_summary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUndeploySystemInstanceResponse_summary::is_status_Valid() const{
    return m_status_isValid;
}

OAIDeploymentTarget OAIUndeploySystemInstanceResponse_summary::getTarget() const {
    return m_target;
}
void OAIUndeploySystemInstanceResponse_summary::setTarget(const OAIDeploymentTarget &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIUndeploySystemInstanceResponse_summary::is_target_Set() const{
    return m_target_isSet;
}

bool OAIUndeploySystemInstanceResponse_summary::is_target_Valid() const{
    return m_target_isValid;
}

QString OAIUndeploySystemInstanceResponse_summary::getGreengrassGroupName() const {
    return m_greengrass_group_name;
}
void OAIUndeploySystemInstanceResponse_summary::setGreengrassGroupName(const QString &greengrass_group_name) {
    m_greengrass_group_name = greengrass_group_name;
    m_greengrass_group_name_isSet = true;
}

bool OAIUndeploySystemInstanceResponse_summary::is_greengrass_group_name_Set() const{
    return m_greengrass_group_name_isSet;
}

bool OAIUndeploySystemInstanceResponse_summary::is_greengrass_group_name_Valid() const{
    return m_greengrass_group_name_isValid;
}

QDateTime OAIUndeploySystemInstanceResponse_summary::getCreatedAt() const {
    return m_created_at;
}
void OAIUndeploySystemInstanceResponse_summary::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIUndeploySystemInstanceResponse_summary::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIUndeploySystemInstanceResponse_summary::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIUndeploySystemInstanceResponse_summary::getUpdatedAt() const {
    return m_updated_at;
}
void OAIUndeploySystemInstanceResponse_summary::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIUndeploySystemInstanceResponse_summary::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIUndeploySystemInstanceResponse_summary::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIUndeploySystemInstanceResponse_summary::getGreengrassGroupId() const {
    return m_greengrass_group_id;
}
void OAIUndeploySystemInstanceResponse_summary::setGreengrassGroupId(const QString &greengrass_group_id) {
    m_greengrass_group_id = greengrass_group_id;
    m_greengrass_group_id_isSet = true;
}

bool OAIUndeploySystemInstanceResponse_summary::is_greengrass_group_id_Set() const{
    return m_greengrass_group_id_isSet;
}

bool OAIUndeploySystemInstanceResponse_summary::is_greengrass_group_id_Valid() const{
    return m_greengrass_group_id_isValid;
}

QString OAIUndeploySystemInstanceResponse_summary::getGreengrassGroupVersionId() const {
    return m_greengrass_group_version_id;
}
void OAIUndeploySystemInstanceResponse_summary::setGreengrassGroupVersionId(const QString &greengrass_group_version_id) {
    m_greengrass_group_version_id = greengrass_group_version_id;
    m_greengrass_group_version_id_isSet = true;
}

bool OAIUndeploySystemInstanceResponse_summary::is_greengrass_group_version_id_Set() const{
    return m_greengrass_group_version_id_isSet;
}

bool OAIUndeploySystemInstanceResponse_summary::is_greengrass_group_version_id_Valid() const{
    return m_greengrass_group_version_id_isValid;
}

bool OAIUndeploySystemInstanceResponse_summary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_greengrass_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_greengrass_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_greengrass_group_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUndeploySystemInstanceResponse_summary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
