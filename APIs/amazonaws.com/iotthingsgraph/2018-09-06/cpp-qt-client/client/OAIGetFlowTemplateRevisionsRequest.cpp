/**
 * AWS IoT Things Graph
 * <fullname>AWS IoT Things Graph</fullname> <p>AWS IoT Things Graph provides an integrated set of tools that enable developers to connect devices and services that use different standards, such as units of measure and communication protocols. AWS IoT Things Graph makes it possible to build IoT applications with little to no code by connecting devices and services and defining how they interact at an abstract level.</p> <p>For more information about how AWS IoT Things Graph works, see the <a href=\"https://docs.aws.amazon.com/thingsgraph/latest/ug/iot-tg-whatis.html\">User Guide</a>.</p> <p>The AWS IoT Things Graph service is discontinued.</p>
 *
 * The version of the OpenAPI document: 2018-09-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetFlowTemplateRevisionsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetFlowTemplateRevisionsRequest::OAIGetFlowTemplateRevisionsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetFlowTemplateRevisionsRequest::OAIGetFlowTemplateRevisionsRequest() {
    this->initializeModel();
}

OAIGetFlowTemplateRevisionsRequest::~OAIGetFlowTemplateRevisionsRequest() {}

void OAIGetFlowTemplateRevisionsRequest::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIGetFlowTemplateRevisionsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetFlowTemplateRevisionsRequest::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;
}

QString OAIGetFlowTemplateRevisionsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetFlowTemplateRevisionsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QString OAIGetFlowTemplateRevisionsRequest::getId() const {
    return m_id;
}
void OAIGetFlowTemplateRevisionsRequest::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetFlowTemplateRevisionsRequest::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetFlowTemplateRevisionsRequest::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetFlowTemplateRevisionsRequest::getNextToken() const {
    return m_next_token;
}
void OAIGetFlowTemplateRevisionsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetFlowTemplateRevisionsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetFlowTemplateRevisionsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIGetFlowTemplateRevisionsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIGetFlowTemplateRevisionsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIGetFlowTemplateRevisionsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIGetFlowTemplateRevisionsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIGetFlowTemplateRevisionsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetFlowTemplateRevisionsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
