/**
 * AWS IoT Things Graph
 * <fullname>AWS IoT Things Graph</fullname> <p>AWS IoT Things Graph provides an integrated set of tools that enable developers to connect devices and services that use different standards, such as units of measure and communication protocols. AWS IoT Things Graph makes it possible to build IoT applications with little to no code by connecting devices and services and defining how they interact at an abstract level.</p> <p>For more information about how AWS IoT Things Graph works, see the <a href=\"https://docs.aws.amazon.com/thingsgraph/latest/ug/iot-tg-whatis.html\">User Guide</a>.</p> <p>The AWS IoT Things Graph service is discontinued.</p>
 *
 * The version of the OpenAPI document: 2018-09-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetUploadStatusResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetUploadStatusResponse::OAIGetUploadStatusResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetUploadStatusResponse::OAIGetUploadStatusResponse() {
    this->initializeModel();
}

OAIGetUploadStatusResponse::~OAIGetUploadStatusResponse() {}

void OAIGetUploadStatusResponse::initializeModel() {

    m_upload_id_isSet = false;
    m_upload_id_isValid = false;

    m_upload_status_isSet = false;
    m_upload_status_isValid = false;

    m_namespace_arn_isSet = false;
    m_namespace_arn_isValid = false;

    m_namespace_name_isSet = false;
    m_namespace_name_isValid = false;

    m_namespace_version_isSet = false;
    m_namespace_version_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;
}

void OAIGetUploadStatusResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetUploadStatusResponse::fromJsonObject(QJsonObject json) {

    m_upload_id_isValid = ::OpenAPI::fromJsonValue(m_upload_id, json[QString("uploadId")]);
    m_upload_id_isSet = !json[QString("uploadId")].isNull() && m_upload_id_isValid;

    m_upload_status_isValid = ::OpenAPI::fromJsonValue(m_upload_status, json[QString("uploadStatus")]);
    m_upload_status_isSet = !json[QString("uploadStatus")].isNull() && m_upload_status_isValid;

    m_namespace_arn_isValid = ::OpenAPI::fromJsonValue(m_namespace_arn, json[QString("namespaceArn")]);
    m_namespace_arn_isSet = !json[QString("namespaceArn")].isNull() && m_namespace_arn_isValid;

    m_namespace_name_isValid = ::OpenAPI::fromJsonValue(m_namespace_name, json[QString("namespaceName")]);
    m_namespace_name_isSet = !json[QString("namespaceName")].isNull() && m_namespace_name_isValid;

    m_namespace_version_isValid = ::OpenAPI::fromJsonValue(m_namespace_version, json[QString("namespaceVersion")]);
    m_namespace_version_isSet = !json[QString("namespaceVersion")].isNull() && m_namespace_version_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("failureReason")]);
    m_failure_reason_isSet = !json[QString("failureReason")].isNull() && m_failure_reason_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;
}

QString OAIGetUploadStatusResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetUploadStatusResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_upload_id_isSet) {
        obj.insert(QString("uploadId"), ::OpenAPI::toJsonValue(m_upload_id));
    }
    if (m_upload_status.isSet()) {
        obj.insert(QString("uploadStatus"), ::OpenAPI::toJsonValue(m_upload_status));
    }
    if (m_namespace_arn_isSet) {
        obj.insert(QString("namespaceArn"), ::OpenAPI::toJsonValue(m_namespace_arn));
    }
    if (m_namespace_name_isSet) {
        obj.insert(QString("namespaceName"), ::OpenAPI::toJsonValue(m_namespace_name));
    }
    if (m_namespace_version_isSet) {
        obj.insert(QString("namespaceVersion"), ::OpenAPI::toJsonValue(m_namespace_version));
    }
    if (m_failure_reason.isSet()) {
        obj.insert(QString("failureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    return obj;
}

QString OAIGetUploadStatusResponse::getUploadId() const {
    return m_upload_id;
}
void OAIGetUploadStatusResponse::setUploadId(const QString &upload_id) {
    m_upload_id = upload_id;
    m_upload_id_isSet = true;
}

bool OAIGetUploadStatusResponse::is_upload_id_Set() const{
    return m_upload_id_isSet;
}

bool OAIGetUploadStatusResponse::is_upload_id_Valid() const{
    return m_upload_id_isValid;
}

OAIUploadStatus OAIGetUploadStatusResponse::getUploadStatus() const {
    return m_upload_status;
}
void OAIGetUploadStatusResponse::setUploadStatus(const OAIUploadStatus &upload_status) {
    m_upload_status = upload_status;
    m_upload_status_isSet = true;
}

bool OAIGetUploadStatusResponse::is_upload_status_Set() const{
    return m_upload_status_isSet;
}

bool OAIGetUploadStatusResponse::is_upload_status_Valid() const{
    return m_upload_status_isValid;
}

QString OAIGetUploadStatusResponse::getNamespaceArn() const {
    return m_namespace_arn;
}
void OAIGetUploadStatusResponse::setNamespaceArn(const QString &namespace_arn) {
    m_namespace_arn = namespace_arn;
    m_namespace_arn_isSet = true;
}

bool OAIGetUploadStatusResponse::is_namespace_arn_Set() const{
    return m_namespace_arn_isSet;
}

bool OAIGetUploadStatusResponse::is_namespace_arn_Valid() const{
    return m_namespace_arn_isValid;
}

QString OAIGetUploadStatusResponse::getNamespaceName() const {
    return m_namespace_name;
}
void OAIGetUploadStatusResponse::setNamespaceName(const QString &namespace_name) {
    m_namespace_name = namespace_name;
    m_namespace_name_isSet = true;
}

bool OAIGetUploadStatusResponse::is_namespace_name_Set() const{
    return m_namespace_name_isSet;
}

bool OAIGetUploadStatusResponse::is_namespace_name_Valid() const{
    return m_namespace_name_isValid;
}

qint32 OAIGetUploadStatusResponse::getNamespaceVersion() const {
    return m_namespace_version;
}
void OAIGetUploadStatusResponse::setNamespaceVersion(const qint32 &namespace_version) {
    m_namespace_version = namespace_version;
    m_namespace_version_isSet = true;
}

bool OAIGetUploadStatusResponse::is_namespace_version_Set() const{
    return m_namespace_version_isSet;
}

bool OAIGetUploadStatusResponse::is_namespace_version_Valid() const{
    return m_namespace_version_isValid;
}

QList OAIGetUploadStatusResponse::getFailureReason() const {
    return m_failure_reason;
}
void OAIGetUploadStatusResponse::setFailureReason(const QList &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIGetUploadStatusResponse::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIGetUploadStatusResponse::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QDateTime OAIGetUploadStatusResponse::getCreatedDate() const {
    return m_created_date;
}
void OAIGetUploadStatusResponse::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIGetUploadStatusResponse::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIGetUploadStatusResponse::is_created_date_Valid() const{
    return m_created_date_isValid;
}

bool OAIGetUploadStatusResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_upload_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_namespace_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_namespace_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_namespace_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetUploadStatusResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_upload_id_isValid && m_upload_status_isValid && m_created_date_isValid && true;
}

} // namespace OpenAPI
