/**
 * AWS IoT Things Graph
 * <fullname>AWS IoT Things Graph</fullname> <p>AWS IoT Things Graph provides an integrated set of tools that enable developers to connect devices and services that use different standards, such as units of measure and communication protocols. AWS IoT Things Graph makes it possible to build IoT applications with little to no code by connecting devices and services and defining how they interact at an abstract level.</p> <p>For more information about how AWS IoT Things Graph works, see the <a href=\"https://docs.aws.amazon.com/thingsgraph/latest/ug/iot-tg-whatis.html\">User Guide</a>.</p> <p>The AWS IoT Things Graph service is discontinued.</p>
 *
 * The version of the OpenAPI document: 2018-09-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssociateEntityToThingRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssociateEntityToThingRequest::OAIAssociateEntityToThingRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssociateEntityToThingRequest::OAIAssociateEntityToThingRequest() {
    this->initializeModel();
}

OAIAssociateEntityToThingRequest::~OAIAssociateEntityToThingRequest() {}

void OAIAssociateEntityToThingRequest::initializeModel() {

    m_thing_name_isSet = false;
    m_thing_name_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_namespace_version_isSet = false;
    m_namespace_version_isValid = false;
}

void OAIAssociateEntityToThingRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssociateEntityToThingRequest::fromJsonObject(QJsonObject json) {

    m_thing_name_isValid = ::OpenAPI::fromJsonValue(m_thing_name, json[QString("thingName")]);
    m_thing_name_isSet = !json[QString("thingName")].isNull() && m_thing_name_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entityId")]);
    m_entity_id_isSet = !json[QString("entityId")].isNull() && m_entity_id_isValid;

    m_namespace_version_isValid = ::OpenAPI::fromJsonValue(m_namespace_version, json[QString("namespaceVersion")]);
    m_namespace_version_isSet = !json[QString("namespaceVersion")].isNull() && m_namespace_version_isValid;
}

QString OAIAssociateEntityToThingRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssociateEntityToThingRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_thing_name_isSet) {
        obj.insert(QString("thingName"), ::OpenAPI::toJsonValue(m_thing_name));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("entityId"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_namespace_version_isSet) {
        obj.insert(QString("namespaceVersion"), ::OpenAPI::toJsonValue(m_namespace_version));
    }
    return obj;
}

QString OAIAssociateEntityToThingRequest::getThingName() const {
    return m_thing_name;
}
void OAIAssociateEntityToThingRequest::setThingName(const QString &thing_name) {
    m_thing_name = thing_name;
    m_thing_name_isSet = true;
}

bool OAIAssociateEntityToThingRequest::is_thing_name_Set() const{
    return m_thing_name_isSet;
}

bool OAIAssociateEntityToThingRequest::is_thing_name_Valid() const{
    return m_thing_name_isValid;
}

QString OAIAssociateEntityToThingRequest::getEntityId() const {
    return m_entity_id;
}
void OAIAssociateEntityToThingRequest::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIAssociateEntityToThingRequest::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIAssociateEntityToThingRequest::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

qint32 OAIAssociateEntityToThingRequest::getNamespaceVersion() const {
    return m_namespace_version;
}
void OAIAssociateEntityToThingRequest::setNamespaceVersion(const qint32 &namespace_version) {
    m_namespace_version = namespace_version;
    m_namespace_version_isSet = true;
}

bool OAIAssociateEntityToThingRequest::is_namespace_version_Set() const{
    return m_namespace_version_isSet;
}

bool OAIAssociateEntityToThingRequest::is_namespace_version_Valid() const{
    return m_namespace_version_isValid;
}

bool OAIAssociateEntityToThingRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_thing_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_namespace_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssociateEntityToThingRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_thing_name_isValid && m_entity_id_isValid && true;
}

} // namespace OpenAPI
