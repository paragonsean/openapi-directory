/**
 * AWS IoT Things Graph
 * <fullname>AWS IoT Things Graph</fullname> <p>AWS IoT Things Graph provides an integrated set of tools that enable developers to connect devices and services that use different standards, such as units of measure and communication protocols. AWS IoT Things Graph makes it possible to build IoT applications with little to no code by connecting devices and services and defining how they interact at an abstract level.</p> <p>For more information about how AWS IoT Things Graph works, see the <a href=\"https://docs.aws.amazon.com/thingsgraph/latest/ug/iot-tg-whatis.html\">User Guide</a>.</p> <p>The AWS IoT Things Graph service is discontinued.</p>
 *
 * The version of the OpenAPI document: 2018-09-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchEntitiesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchEntitiesRequest::OAISearchEntitiesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchEntitiesRequest::OAISearchEntitiesRequest() {
    this->initializeModel();
}

OAISearchEntitiesRequest::~OAISearchEntitiesRequest() {}

void OAISearchEntitiesRequest::initializeModel() {

    m_entity_types_isSet = false;
    m_entity_types_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_namespace_version_isSet = false;
    m_namespace_version_isValid = false;
}

void OAISearchEntitiesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchEntitiesRequest::fromJsonObject(QJsonObject json) {

    m_entity_types_isValid = ::OpenAPI::fromJsonValue(m_entity_types, json[QString("entityTypes")]);
    m_entity_types_isSet = !json[QString("entityTypes")].isNull() && m_entity_types_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;

    m_namespace_version_isValid = ::OpenAPI::fromJsonValue(m_namespace_version, json[QString("namespaceVersion")]);
    m_namespace_version_isSet = !json[QString("namespaceVersion")].isNull() && m_namespace_version_isValid;
}

QString OAISearchEntitiesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchEntitiesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_types.isSet()) {
        obj.insert(QString("entityTypes"), ::OpenAPI::toJsonValue(m_entity_types));
    }
    if (m_filters.isSet()) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_namespace_version_isSet) {
        obj.insert(QString("namespaceVersion"), ::OpenAPI::toJsonValue(m_namespace_version));
    }
    return obj;
}

QList OAISearchEntitiesRequest::getEntityTypes() const {
    return m_entity_types;
}
void OAISearchEntitiesRequest::setEntityTypes(const QList &entity_types) {
    m_entity_types = entity_types;
    m_entity_types_isSet = true;
}

bool OAISearchEntitiesRequest::is_entity_types_Set() const{
    return m_entity_types_isSet;
}

bool OAISearchEntitiesRequest::is_entity_types_Valid() const{
    return m_entity_types_isValid;
}

QList OAISearchEntitiesRequest::getFilters() const {
    return m_filters;
}
void OAISearchEntitiesRequest::setFilters(const QList &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAISearchEntitiesRequest::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAISearchEntitiesRequest::is_filters_Valid() const{
    return m_filters_isValid;
}

QString OAISearchEntitiesRequest::getNextToken() const {
    return m_next_token;
}
void OAISearchEntitiesRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAISearchEntitiesRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAISearchEntitiesRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAISearchEntitiesRequest::getMaxResults() const {
    return m_max_results;
}
void OAISearchEntitiesRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAISearchEntitiesRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAISearchEntitiesRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

qint32 OAISearchEntitiesRequest::getNamespaceVersion() const {
    return m_namespace_version;
}
void OAISearchEntitiesRequest::setNamespaceVersion(const qint32 &namespace_version) {
    m_namespace_version = namespace_version;
    m_namespace_version_isSet = true;
}

bool OAISearchEntitiesRequest::is_namespace_version_Set() const{
    return m_namespace_version_isSet;
}

bool OAISearchEntitiesRequest::is_namespace_version_Valid() const{
    return m_namespace_version_isValid;
}

bool OAISearchEntitiesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_namespace_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchEntitiesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_entity_types_isValid && true;
}

} // namespace OpenAPI
