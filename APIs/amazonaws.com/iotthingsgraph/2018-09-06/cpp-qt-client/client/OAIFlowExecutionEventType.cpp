/**
 * AWS IoT Things Graph
 * <fullname>AWS IoT Things Graph</fullname> <p>AWS IoT Things Graph provides an integrated set of tools that enable developers to connect devices and services that use different standards, such as units of measure and communication protocols. AWS IoT Things Graph makes it possible to build IoT applications with little to no code by connecting devices and services and defining how they interact at an abstract level.</p> <p>For more information about how AWS IoT Things Graph works, see the <a href=\"https://docs.aws.amazon.com/thingsgraph/latest/ug/iot-tg-whatis.html\">User Guide</a>.</p> <p>The AWS IoT Things Graph service is discontinued.</p>
 *
 * The version of the OpenAPI document: 2018-09-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlowExecutionEventType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlowExecutionEventType::OAIFlowExecutionEventType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlowExecutionEventType::OAIFlowExecutionEventType() {
    this->initializeModel();
}

OAIFlowExecutionEventType::~OAIFlowExecutionEventType() {}

void OAIFlowExecutionEventType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIFlowExecutionEventType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIFlowExecutionEventType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("EXECUTION_STARTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowExecutionEventType::EXECUTION_STARTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXECUTION_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowExecutionEventType::EXECUTION_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXECUTION_ABORTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowExecutionEventType::EXECUTION_ABORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXECUTION_SUCCEEDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowExecutionEventType::EXECUTION_SUCCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STEP_STARTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowExecutionEventType::STEP_STARTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STEP_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowExecutionEventType::STEP_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STEP_SUCCEEDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowExecutionEventType::STEP_SUCCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACTIVITY_SCHEDULED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowExecutionEventType::ACTIVITY_SCHEDULED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACTIVITY_STARTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowExecutionEventType::ACTIVITY_STARTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACTIVITY_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowExecutionEventType::ACTIVITY_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACTIVITY_SUCCEEDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowExecutionEventType::ACTIVITY_SUCCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("START_FLOW_EXECUTION_TASK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowExecutionEventType::START_FLOW_EXECUTION_TASK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SCHEDULE_NEXT_READY_STEPS_TASK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowExecutionEventType::SCHEDULE_NEXT_READY_STEPS_TASK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("THING_ACTION_TASK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowExecutionEventType::THING_ACTION_TASK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("THING_ACTION_TASK_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowExecutionEventType::THING_ACTION_TASK_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("THING_ACTION_TASK_SUCCEEDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowExecutionEventType::THING_ACTION_TASK_SUCCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACKNOWLEDGE_TASK_MESSAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowExecutionEventType::ACKNOWLEDGE_TASK_MESSAGE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIFlowExecutionEventType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIFlowExecutionEventType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIFlowExecutionEventType::EXECUTION_STARTED:
            val = "EXECUTION_STARTED";
            break;
        case eOAIFlowExecutionEventType::EXECUTION_FAILED:
            val = "EXECUTION_FAILED";
            break;
        case eOAIFlowExecutionEventType::EXECUTION_ABORTED:
            val = "EXECUTION_ABORTED";
            break;
        case eOAIFlowExecutionEventType::EXECUTION_SUCCEEDED:
            val = "EXECUTION_SUCCEEDED";
            break;
        case eOAIFlowExecutionEventType::STEP_STARTED:
            val = "STEP_STARTED";
            break;
        case eOAIFlowExecutionEventType::STEP_FAILED:
            val = "STEP_FAILED";
            break;
        case eOAIFlowExecutionEventType::STEP_SUCCEEDED:
            val = "STEP_SUCCEEDED";
            break;
        case eOAIFlowExecutionEventType::ACTIVITY_SCHEDULED:
            val = "ACTIVITY_SCHEDULED";
            break;
        case eOAIFlowExecutionEventType::ACTIVITY_STARTED:
            val = "ACTIVITY_STARTED";
            break;
        case eOAIFlowExecutionEventType::ACTIVITY_FAILED:
            val = "ACTIVITY_FAILED";
            break;
        case eOAIFlowExecutionEventType::ACTIVITY_SUCCEEDED:
            val = "ACTIVITY_SUCCEEDED";
            break;
        case eOAIFlowExecutionEventType::START_FLOW_EXECUTION_TASK:
            val = "START_FLOW_EXECUTION_TASK";
            break;
        case eOAIFlowExecutionEventType::SCHEDULE_NEXT_READY_STEPS_TASK:
            val = "SCHEDULE_NEXT_READY_STEPS_TASK";
            break;
        case eOAIFlowExecutionEventType::THING_ACTION_TASK:
            val = "THING_ACTION_TASK";
            break;
        case eOAIFlowExecutionEventType::THING_ACTION_TASK_FAILED:
            val = "THING_ACTION_TASK_FAILED";
            break;
        case eOAIFlowExecutionEventType::THING_ACTION_TASK_SUCCEEDED:
            val = "THING_ACTION_TASK_SUCCEEDED";
            break;
        case eOAIFlowExecutionEventType::ACKNOWLEDGE_TASK_MESSAGE:
            val = "ACKNOWLEDGE_TASK_MESSAGE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIFlowExecutionEventType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIFlowExecutionEventType::eOAIFlowExecutionEventType OAIFlowExecutionEventType::getValue() const {
    return m_value;
}

void OAIFlowExecutionEventType::setValue(const OAIFlowExecutionEventType::eOAIFlowExecutionEventType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIFlowExecutionEventType::isSet() const {
    
    return m_value_isSet;
}

bool OAIFlowExecutionEventType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
