/**
 * AWS IoT Things Graph
 * <fullname>AWS IoT Things Graph</fullname> <p>AWS IoT Things Graph provides an integrated set of tools that enable developers to connect devices and services that use different standards, such as units of measure and communication protocols. AWS IoT Things Graph makes it possible to build IoT applications with little to no code by connecting devices and services and defining how they interact at an abstract level.</p> <p>For more information about how AWS IoT Things Graph works, see the <a href=\"https://docs.aws.amazon.com/thingsgraph/latest/ug/iot-tg-whatis.html\">User Guide</a>.</p> <p>The AWS IoT Things Graph service is discontinued.</p>
 *
 * The version of the OpenAPI document: 2018-09-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchThingsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchThingsRequest::OAISearchThingsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchThingsRequest::OAISearchThingsRequest() {
    this->initializeModel();
}

OAISearchThingsRequest::~OAISearchThingsRequest() {}

void OAISearchThingsRequest::initializeModel() {

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_namespace_version_isSet = false;
    m_namespace_version_isValid = false;
}

void OAISearchThingsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchThingsRequest::fromJsonObject(QJsonObject json) {

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entityId")]);
    m_entity_id_isSet = !json[QString("entityId")].isNull() && m_entity_id_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;

    m_namespace_version_isValid = ::OpenAPI::fromJsonValue(m_namespace_version, json[QString("namespaceVersion")]);
    m_namespace_version_isSet = !json[QString("namespaceVersion")].isNull() && m_namespace_version_isValid;
}

QString OAISearchThingsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchThingsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_id_isSet) {
        obj.insert(QString("entityId"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_namespace_version_isSet) {
        obj.insert(QString("namespaceVersion"), ::OpenAPI::toJsonValue(m_namespace_version));
    }
    return obj;
}

QString OAISearchThingsRequest::getEntityId() const {
    return m_entity_id;
}
void OAISearchThingsRequest::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAISearchThingsRequest::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAISearchThingsRequest::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

QString OAISearchThingsRequest::getNextToken() const {
    return m_next_token;
}
void OAISearchThingsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAISearchThingsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAISearchThingsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAISearchThingsRequest::getMaxResults() const {
    return m_max_results;
}
void OAISearchThingsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAISearchThingsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAISearchThingsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

qint32 OAISearchThingsRequest::getNamespaceVersion() const {
    return m_namespace_version;
}
void OAISearchThingsRequest::setNamespaceVersion(const qint32 &namespace_version) {
    m_namespace_version = namespace_version;
    m_namespace_version_isSet = true;
}

bool OAISearchThingsRequest::is_namespace_version_Set() const{
    return m_namespace_version_isSet;
}

bool OAISearchThingsRequest::is_namespace_version_Valid() const{
    return m_namespace_version_isValid;
}

bool OAISearchThingsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_namespace_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchThingsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_entity_id_isValid && true;
}

} // namespace OpenAPI
