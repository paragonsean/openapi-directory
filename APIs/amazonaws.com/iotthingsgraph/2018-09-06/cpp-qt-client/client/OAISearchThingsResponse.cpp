/**
 * AWS IoT Things Graph
 * <fullname>AWS IoT Things Graph</fullname> <p>AWS IoT Things Graph provides an integrated set of tools that enable developers to connect devices and services that use different standards, such as units of measure and communication protocols. AWS IoT Things Graph makes it possible to build IoT applications with little to no code by connecting devices and services and defining how they interact at an abstract level.</p> <p>For more information about how AWS IoT Things Graph works, see the <a href=\"https://docs.aws.amazon.com/thingsgraph/latest/ug/iot-tg-whatis.html\">User Guide</a>.</p> <p>The AWS IoT Things Graph service is discontinued.</p>
 *
 * The version of the OpenAPI document: 2018-09-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchThingsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchThingsResponse::OAISearchThingsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchThingsResponse::OAISearchThingsResponse() {
    this->initializeModel();
}

OAISearchThingsResponse::~OAISearchThingsResponse() {}

void OAISearchThingsResponse::initializeModel() {

    m_things_isSet = false;
    m_things_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAISearchThingsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchThingsResponse::fromJsonObject(QJsonObject json) {

    m_things_isValid = ::OpenAPI::fromJsonValue(m_things, json[QString("things")]);
    m_things_isSet = !json[QString("things")].isNull() && m_things_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAISearchThingsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchThingsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_things.isSet()) {
        obj.insert(QString("things"), ::OpenAPI::toJsonValue(m_things));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAISearchThingsResponse::getThings() const {
    return m_things;
}
void OAISearchThingsResponse::setThings(const QList &things) {
    m_things = things;
    m_things_isSet = true;
}

bool OAISearchThingsResponse::is_things_Set() const{
    return m_things_isSet;
}

bool OAISearchThingsResponse::is_things_Valid() const{
    return m_things_isValid;
}

QString OAISearchThingsResponse::getNextToken() const {
    return m_next_token;
}
void OAISearchThingsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAISearchThingsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAISearchThingsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAISearchThingsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_things.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchThingsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
