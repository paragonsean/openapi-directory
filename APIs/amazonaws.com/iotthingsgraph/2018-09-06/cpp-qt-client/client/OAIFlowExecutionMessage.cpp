/**
 * AWS IoT Things Graph
 * <fullname>AWS IoT Things Graph</fullname> <p>AWS IoT Things Graph provides an integrated set of tools that enable developers to connect devices and services that use different standards, such as units of measure and communication protocols. AWS IoT Things Graph makes it possible to build IoT applications with little to no code by connecting devices and services and defining how they interact at an abstract level.</p> <p>For more information about how AWS IoT Things Graph works, see the <a href=\"https://docs.aws.amazon.com/thingsgraph/latest/ug/iot-tg-whatis.html\">User Guide</a>.</p> <p>The AWS IoT Things Graph service is discontinued.</p>
 *
 * The version of the OpenAPI document: 2018-09-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlowExecutionMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlowExecutionMessage::OAIFlowExecutionMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlowExecutionMessage::OAIFlowExecutionMessage() {
    this->initializeModel();
}

OAIFlowExecutionMessage::~OAIFlowExecutionMessage() {}

void OAIFlowExecutionMessage::initializeModel() {

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_payload_isSet = false;
    m_payload_isValid = false;
}

void OAIFlowExecutionMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlowExecutionMessage::fromJsonObject(QJsonObject json) {

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("messageId")]);
    m_message_id_isSet = !json[QString("messageId")].isNull() && m_message_id_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("eventType")]);
    m_event_type_isSet = !json[QString("eventType")].isNull() && m_event_type_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;
}

QString OAIFlowExecutionMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlowExecutionMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_message_id_isSet) {
        obj.insert(QString("messageId"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_event_type.isSet()) {
        obj.insert(QString("eventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_payload_isSet) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    return obj;
}

QString OAIFlowExecutionMessage::getMessageId() const {
    return m_message_id;
}
void OAIFlowExecutionMessage::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIFlowExecutionMessage::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIFlowExecutionMessage::is_message_id_Valid() const{
    return m_message_id_isValid;
}

OAIFlowExecutionEventType OAIFlowExecutionMessage::getEventType() const {
    return m_event_type;
}
void OAIFlowExecutionMessage::setEventType(const OAIFlowExecutionEventType &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIFlowExecutionMessage::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIFlowExecutionMessage::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QDateTime OAIFlowExecutionMessage::getTimestamp() const {
    return m_timestamp;
}
void OAIFlowExecutionMessage::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIFlowExecutionMessage::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIFlowExecutionMessage::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIFlowExecutionMessage::getPayload() const {
    return m_payload;
}
void OAIFlowExecutionMessage::setPayload(const QString &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAIFlowExecutionMessage::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIFlowExecutionMessage::is_payload_Valid() const{
    return m_payload_isValid;
}

bool OAIFlowExecutionMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlowExecutionMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
