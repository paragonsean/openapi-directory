/**
 * AWS IoT Things Graph
 * <fullname>AWS IoT Things Graph</fullname> <p>AWS IoT Things Graph provides an integrated set of tools that enable developers to connect devices and services that use different standards, such as units of measure and communication protocols. AWS IoT Things Graph makes it possible to build IoT applications with little to no code by connecting devices and services and defining how they interact at an abstract level.</p> <p>For more information about how AWS IoT Things Graph works, see the <a href=\"https://docs.aws.amazon.com/thingsgraph/latest/ug/iot-tg-whatis.html\">User Guide</a>.</p> <p>The AWS IoT Things Graph service is discontinued.</p>
 *
 * The version of the OpenAPI document: 2018-09-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUploadEntityDefinitionsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUploadEntityDefinitionsRequest::OAIUploadEntityDefinitionsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUploadEntityDefinitionsRequest::OAIUploadEntityDefinitionsRequest() {
    this->initializeModel();
}

OAIUploadEntityDefinitionsRequest::~OAIUploadEntityDefinitionsRequest() {}

void OAIUploadEntityDefinitionsRequest::initializeModel() {

    m_document_isSet = false;
    m_document_isValid = false;

    m_sync_with_public_namespace_isSet = false;
    m_sync_with_public_namespace_isValid = false;

    m_deprecate_existing_entities_isSet = false;
    m_deprecate_existing_entities_isValid = false;
}

void OAIUploadEntityDefinitionsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUploadEntityDefinitionsRequest::fromJsonObject(QJsonObject json) {

    m_document_isValid = ::OpenAPI::fromJsonValue(m_document, json[QString("document")]);
    m_document_isSet = !json[QString("document")].isNull() && m_document_isValid;

    m_sync_with_public_namespace_isValid = ::OpenAPI::fromJsonValue(m_sync_with_public_namespace, json[QString("syncWithPublicNamespace")]);
    m_sync_with_public_namespace_isSet = !json[QString("syncWithPublicNamespace")].isNull() && m_sync_with_public_namespace_isValid;

    m_deprecate_existing_entities_isValid = ::OpenAPI::fromJsonValue(m_deprecate_existing_entities, json[QString("deprecateExistingEntities")]);
    m_deprecate_existing_entities_isSet = !json[QString("deprecateExistingEntities")].isNull() && m_deprecate_existing_entities_isValid;
}

QString OAIUploadEntityDefinitionsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUploadEntityDefinitionsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_document.isSet()) {
        obj.insert(QString("document"), ::OpenAPI::toJsonValue(m_document));
    }
    if (m_sync_with_public_namespace_isSet) {
        obj.insert(QString("syncWithPublicNamespace"), ::OpenAPI::toJsonValue(m_sync_with_public_namespace));
    }
    if (m_deprecate_existing_entities_isSet) {
        obj.insert(QString("deprecateExistingEntities"), ::OpenAPI::toJsonValue(m_deprecate_existing_entities));
    }
    return obj;
}

OAIUploadEntityDefinitionsRequest_document OAIUploadEntityDefinitionsRequest::getDocument() const {
    return m_document;
}
void OAIUploadEntityDefinitionsRequest::setDocument(const OAIUploadEntityDefinitionsRequest_document &document) {
    m_document = document;
    m_document_isSet = true;
}

bool OAIUploadEntityDefinitionsRequest::is_document_Set() const{
    return m_document_isSet;
}

bool OAIUploadEntityDefinitionsRequest::is_document_Valid() const{
    return m_document_isValid;
}

bool OAIUploadEntityDefinitionsRequest::getSyncWithPublicNamespace() const {
    return m_sync_with_public_namespace;
}
void OAIUploadEntityDefinitionsRequest::setSyncWithPublicNamespace(const bool &sync_with_public_namespace) {
    m_sync_with_public_namespace = sync_with_public_namespace;
    m_sync_with_public_namespace_isSet = true;
}

bool OAIUploadEntityDefinitionsRequest::is_sync_with_public_namespace_Set() const{
    return m_sync_with_public_namespace_isSet;
}

bool OAIUploadEntityDefinitionsRequest::is_sync_with_public_namespace_Valid() const{
    return m_sync_with_public_namespace_isValid;
}

bool OAIUploadEntityDefinitionsRequest::getDeprecateExistingEntities() const {
    return m_deprecate_existing_entities;
}
void OAIUploadEntityDefinitionsRequest::setDeprecateExistingEntities(const bool &deprecate_existing_entities) {
    m_deprecate_existing_entities = deprecate_existing_entities;
    m_deprecate_existing_entities_isSet = true;
}

bool OAIUploadEntityDefinitionsRequest::is_deprecate_existing_entities_Set() const{
    return m_deprecate_existing_entities_isSet;
}

bool OAIUploadEntityDefinitionsRequest::is_deprecate_existing_entities_Valid() const{
    return m_deprecate_existing_entities_isValid;
}

bool OAIUploadEntityDefinitionsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_with_public_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deprecate_existing_entities_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUploadEntityDefinitionsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
