/**
 * AWS IoT Things Graph
 * <fullname>AWS IoT Things Graph</fullname> <p>AWS IoT Things Graph provides an integrated set of tools that enable developers to connect devices and services that use different standards, such as units of measure and communication protocols. AWS IoT Things Graph makes it possible to build IoT applications with little to no code by connecting devices and services and defining how they interact at an abstract level.</p> <p>For more information about how AWS IoT Things Graph works, see the <a href=\"https://docs.aws.amazon.com/thingsgraph/latest/ug/iot-tg-whatis.html\">User Guide</a>.</p> <p>The AWS IoT Things Graph service is discontinued.</p>
 *
 * The version of the OpenAPI document: 2018-09-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteNamespaceResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteNamespaceResponse::OAIDeleteNamespaceResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteNamespaceResponse::OAIDeleteNamespaceResponse() {
    this->initializeModel();
}

OAIDeleteNamespaceResponse::~OAIDeleteNamespaceResponse() {}

void OAIDeleteNamespaceResponse::initializeModel() {

    m_namespace_arn_isSet = false;
    m_namespace_arn_isValid = false;

    m_namespace_name_isSet = false;
    m_namespace_name_isValid = false;
}

void OAIDeleteNamespaceResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteNamespaceResponse::fromJsonObject(QJsonObject json) {

    m_namespace_arn_isValid = ::OpenAPI::fromJsonValue(m_namespace_arn, json[QString("namespaceArn")]);
    m_namespace_arn_isSet = !json[QString("namespaceArn")].isNull() && m_namespace_arn_isValid;

    m_namespace_name_isValid = ::OpenAPI::fromJsonValue(m_namespace_name, json[QString("namespaceName")]);
    m_namespace_name_isSet = !json[QString("namespaceName")].isNull() && m_namespace_name_isValid;
}

QString OAIDeleteNamespaceResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteNamespaceResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_namespace_arn_isSet) {
        obj.insert(QString("namespaceArn"), ::OpenAPI::toJsonValue(m_namespace_arn));
    }
    if (m_namespace_name_isSet) {
        obj.insert(QString("namespaceName"), ::OpenAPI::toJsonValue(m_namespace_name));
    }
    return obj;
}

QString OAIDeleteNamespaceResponse::getNamespaceArn() const {
    return m_namespace_arn;
}
void OAIDeleteNamespaceResponse::setNamespaceArn(const QString &namespace_arn) {
    m_namespace_arn = namespace_arn;
    m_namespace_arn_isSet = true;
}

bool OAIDeleteNamespaceResponse::is_namespace_arn_Set() const{
    return m_namespace_arn_isSet;
}

bool OAIDeleteNamespaceResponse::is_namespace_arn_Valid() const{
    return m_namespace_arn_isValid;
}

QString OAIDeleteNamespaceResponse::getNamespaceName() const {
    return m_namespace_name;
}
void OAIDeleteNamespaceResponse::setNamespaceName(const QString &namespace_name) {
    m_namespace_name = namespace_name;
    m_namespace_name_isSet = true;
}

bool OAIDeleteNamespaceResponse::is_namespace_name_Set() const{
    return m_namespace_name_isSet;
}

bool OAIDeleteNamespaceResponse::is_namespace_name_Valid() const{
    return m_namespace_name_isValid;
}

bool OAIDeleteNamespaceResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_namespace_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_namespace_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteNamespaceResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
