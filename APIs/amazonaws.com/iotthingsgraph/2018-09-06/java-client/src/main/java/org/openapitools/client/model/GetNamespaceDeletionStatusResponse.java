/*
 * AWS IoT Things Graph
 * <fullname>AWS IoT Things Graph</fullname> <p>AWS IoT Things Graph provides an integrated set of tools that enable developers to connect devices and services that use different standards, such as units of measure and communication protocols. AWS IoT Things Graph makes it possible to build IoT applications with little to no code by connecting devices and services and defining how they interact at an abstract level.</p> <p>For more information about how AWS IoT Things Graph works, see the <a href=\"https://docs.aws.amazon.com/thingsgraph/latest/ug/iot-tg-whatis.html\">User Guide</a>.</p> <p>The AWS IoT Things Graph service is discontinued.</p>
 *
 * The version of the OpenAPI document: 2018-09-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.NamespaceDeletionStatus;
import org.openapitools.client.model.NamespaceDeletionStatusErrorCodes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetNamespaceDeletionStatusResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:12.167227-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetNamespaceDeletionStatusResponse {
  public static final String SERIALIZED_NAME_NAMESPACE_ARN = "namespaceArn";
  @SerializedName(SERIALIZED_NAME_NAMESPACE_ARN)
  private String namespaceArn;

  public static final String SERIALIZED_NAME_NAMESPACE_NAME = "namespaceName";
  @SerializedName(SERIALIZED_NAME_NAMESPACE_NAME)
  private String namespaceName;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private NamespaceDeletionStatus status;

  public static final String SERIALIZED_NAME_ERROR_CODE = "errorCode";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private NamespaceDeletionStatusErrorCodes errorCode;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public GetNamespaceDeletionStatusResponse() {
  }

  public GetNamespaceDeletionStatusResponse namespaceArn(String namespaceArn) {
    this.namespaceArn = namespaceArn;
    return this;
  }

  /**
   * Get namespaceArn
   * @return namespaceArn
   */
  @javax.annotation.Nullable
  public String getNamespaceArn() {
    return namespaceArn;
  }

  public void setNamespaceArn(String namespaceArn) {
    this.namespaceArn = namespaceArn;
  }


  public GetNamespaceDeletionStatusResponse namespaceName(String namespaceName) {
    this.namespaceName = namespaceName;
    return this;
  }

  /**
   * Get namespaceName
   * @return namespaceName
   */
  @javax.annotation.Nullable
  public String getNamespaceName() {
    return namespaceName;
  }

  public void setNamespaceName(String namespaceName) {
    this.namespaceName = namespaceName;
  }


  public GetNamespaceDeletionStatusResponse status(NamespaceDeletionStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public NamespaceDeletionStatus getStatus() {
    return status;
  }

  public void setStatus(NamespaceDeletionStatus status) {
    this.status = status;
  }


  public GetNamespaceDeletionStatusResponse errorCode(NamespaceDeletionStatusErrorCodes errorCode) {
    this.errorCode = errorCode;
    return this;
  }

  /**
   * Get errorCode
   * @return errorCode
   */
  @javax.annotation.Nullable
  public NamespaceDeletionStatusErrorCodes getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(NamespaceDeletionStatusErrorCodes errorCode) {
    this.errorCode = errorCode;
  }


  public GetNamespaceDeletionStatusResponse errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * Get errorMessage
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetNamespaceDeletionStatusResponse getNamespaceDeletionStatusResponse = (GetNamespaceDeletionStatusResponse) o;
    return Objects.equals(this.namespaceArn, getNamespaceDeletionStatusResponse.namespaceArn) &&
        Objects.equals(this.namespaceName, getNamespaceDeletionStatusResponse.namespaceName) &&
        Objects.equals(this.status, getNamespaceDeletionStatusResponse.status) &&
        Objects.equals(this.errorCode, getNamespaceDeletionStatusResponse.errorCode) &&
        Objects.equals(this.errorMessage, getNamespaceDeletionStatusResponse.errorMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(namespaceArn, namespaceName, status, errorCode, errorMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetNamespaceDeletionStatusResponse {\n");
    sb.append("    namespaceArn: ").append(toIndentedString(namespaceArn)).append("\n");
    sb.append("    namespaceName: ").append(toIndentedString(namespaceName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("namespaceArn");
    openapiFields.add("namespaceName");
    openapiFields.add("status");
    openapiFields.add("errorCode");
    openapiFields.add("errorMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetNamespaceDeletionStatusResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetNamespaceDeletionStatusResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetNamespaceDeletionStatusResponse is not found in the empty JSON string", GetNamespaceDeletionStatusResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetNamespaceDeletionStatusResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetNamespaceDeletionStatusResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `namespaceArn`
      if (jsonObj.get("namespaceArn") != null && !jsonObj.get("namespaceArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("namespaceArn"));
      }
      // validate the optional field `namespaceName`
      if (jsonObj.get("namespaceName") != null && !jsonObj.get("namespaceName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("namespaceName"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        NamespaceDeletionStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `errorCode`
      if (jsonObj.get("errorCode") != null && !jsonObj.get("errorCode").isJsonNull()) {
        NamespaceDeletionStatusErrorCodes.validateJsonElement(jsonObj.get("errorCode"));
      }
      // validate the optional field `errorMessage`
      if (jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("errorMessage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetNamespaceDeletionStatusResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetNamespaceDeletionStatusResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetNamespaceDeletionStatusResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetNamespaceDeletionStatusResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetNamespaceDeletionStatusResponse>() {
           @Override
           public void write(JsonWriter out, GetNamespaceDeletionStatusResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetNamespaceDeletionStatusResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetNamespaceDeletionStatusResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetNamespaceDeletionStatusResponse
   * @throws IOException if the JSON string is invalid with respect to GetNamespaceDeletionStatusResponse
   */
  public static GetNamespaceDeletionStatusResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetNamespaceDeletionStatusResponse.class);
  }

  /**
   * Convert an instance of GetNamespaceDeletionStatusResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

