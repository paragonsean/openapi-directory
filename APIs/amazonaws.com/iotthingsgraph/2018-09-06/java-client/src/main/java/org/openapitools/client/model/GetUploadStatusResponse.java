/*
 * AWS IoT Things Graph
 * <fullname>AWS IoT Things Graph</fullname> <p>AWS IoT Things Graph provides an integrated set of tools that enable developers to connect devices and services that use different standards, such as units of measure and communication protocols. AWS IoT Things Graph makes it possible to build IoT applications with little to no code by connecting devices and services and defining how they interact at an abstract level.</p> <p>For more information about how AWS IoT Things Graph works, see the <a href=\"https://docs.aws.amazon.com/thingsgraph/latest/ug/iot-tg-whatis.html\">User Guide</a>.</p> <p>The AWS IoT Things Graph service is discontinued.</p>
 *
 * The version of the OpenAPI document: 2018-09-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UploadStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetUploadStatusResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:12.167227-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetUploadStatusResponse {
  public static final String SERIALIZED_NAME_UPLOAD_ID = "uploadId";
  @SerializedName(SERIALIZED_NAME_UPLOAD_ID)
  private String uploadId;

  public static final String SERIALIZED_NAME_UPLOAD_STATUS = "uploadStatus";
  @SerializedName(SERIALIZED_NAME_UPLOAD_STATUS)
  private UploadStatus uploadStatus;

  public static final String SERIALIZED_NAME_NAMESPACE_ARN = "namespaceArn";
  @SerializedName(SERIALIZED_NAME_NAMESPACE_ARN)
  private String namespaceArn;

  public static final String SERIALIZED_NAME_NAMESPACE_NAME = "namespaceName";
  @SerializedName(SERIALIZED_NAME_NAMESPACE_NAME)
  private String namespaceName;

  public static final String SERIALIZED_NAME_NAMESPACE_VERSION = "namespaceVersion";
  @SerializedName(SERIALIZED_NAME_NAMESPACE_VERSION)
  private Integer namespaceVersion;

  public static final String SERIALIZED_NAME_FAILURE_REASON = "failureReason";
  @SerializedName(SERIALIZED_NAME_FAILURE_REASON)
  private List failureReason;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public GetUploadStatusResponse() {
  }

  public GetUploadStatusResponse uploadId(String uploadId) {
    this.uploadId = uploadId;
    return this;
  }

  /**
   * Get uploadId
   * @return uploadId
   */
  @javax.annotation.Nonnull
  public String getUploadId() {
    return uploadId;
  }

  public void setUploadId(String uploadId) {
    this.uploadId = uploadId;
  }


  public GetUploadStatusResponse uploadStatus(UploadStatus uploadStatus) {
    this.uploadStatus = uploadStatus;
    return this;
  }

  /**
   * Get uploadStatus
   * @return uploadStatus
   */
  @javax.annotation.Nonnull
  public UploadStatus getUploadStatus() {
    return uploadStatus;
  }

  public void setUploadStatus(UploadStatus uploadStatus) {
    this.uploadStatus = uploadStatus;
  }


  public GetUploadStatusResponse namespaceArn(String namespaceArn) {
    this.namespaceArn = namespaceArn;
    return this;
  }

  /**
   * Get namespaceArn
   * @return namespaceArn
   */
  @javax.annotation.Nullable
  public String getNamespaceArn() {
    return namespaceArn;
  }

  public void setNamespaceArn(String namespaceArn) {
    this.namespaceArn = namespaceArn;
  }


  public GetUploadStatusResponse namespaceName(String namespaceName) {
    this.namespaceName = namespaceName;
    return this;
  }

  /**
   * Get namespaceName
   * @return namespaceName
   */
  @javax.annotation.Nullable
  public String getNamespaceName() {
    return namespaceName;
  }

  public void setNamespaceName(String namespaceName) {
    this.namespaceName = namespaceName;
  }


  public GetUploadStatusResponse namespaceVersion(Integer namespaceVersion) {
    this.namespaceVersion = namespaceVersion;
    return this;
  }

  /**
   * Get namespaceVersion
   * @return namespaceVersion
   */
  @javax.annotation.Nullable
  public Integer getNamespaceVersion() {
    return namespaceVersion;
  }

  public void setNamespaceVersion(Integer namespaceVersion) {
    this.namespaceVersion = namespaceVersion;
  }


  public GetUploadStatusResponse failureReason(List failureReason) {
    this.failureReason = failureReason;
    return this;
  }

  /**
   * Get failureReason
   * @return failureReason
   */
  @javax.annotation.Nullable
  public List getFailureReason() {
    return failureReason;
  }

  public void setFailureReason(List failureReason) {
    this.failureReason = failureReason;
  }


  public GetUploadStatusResponse createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Get createdDate
   * @return createdDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetUploadStatusResponse getUploadStatusResponse = (GetUploadStatusResponse) o;
    return Objects.equals(this.uploadId, getUploadStatusResponse.uploadId) &&
        Objects.equals(this.uploadStatus, getUploadStatusResponse.uploadStatus) &&
        Objects.equals(this.namespaceArn, getUploadStatusResponse.namespaceArn) &&
        Objects.equals(this.namespaceName, getUploadStatusResponse.namespaceName) &&
        Objects.equals(this.namespaceVersion, getUploadStatusResponse.namespaceVersion) &&
        Objects.equals(this.failureReason, getUploadStatusResponse.failureReason) &&
        Objects.equals(this.createdDate, getUploadStatusResponse.createdDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uploadId, uploadStatus, namespaceArn, namespaceName, namespaceVersion, failureReason, createdDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetUploadStatusResponse {\n");
    sb.append("    uploadId: ").append(toIndentedString(uploadId)).append("\n");
    sb.append("    uploadStatus: ").append(toIndentedString(uploadStatus)).append("\n");
    sb.append("    namespaceArn: ").append(toIndentedString(namespaceArn)).append("\n");
    sb.append("    namespaceName: ").append(toIndentedString(namespaceName)).append("\n");
    sb.append("    namespaceVersion: ").append(toIndentedString(namespaceVersion)).append("\n");
    sb.append("    failureReason: ").append(toIndentedString(failureReason)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("uploadId");
    openapiFields.add("uploadStatus");
    openapiFields.add("namespaceArn");
    openapiFields.add("namespaceName");
    openapiFields.add("namespaceVersion");
    openapiFields.add("failureReason");
    openapiFields.add("createdDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("uploadId");
    openapiRequiredFields.add("uploadStatus");
    openapiRequiredFields.add("createdDate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetUploadStatusResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetUploadStatusResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetUploadStatusResponse is not found in the empty JSON string", GetUploadStatusResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetUploadStatusResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetUploadStatusResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetUploadStatusResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `uploadId`
      String.validateJsonElement(jsonObj.get("uploadId"));
      // validate the required field `uploadStatus`
      UploadStatus.validateJsonElement(jsonObj.get("uploadStatus"));
      // validate the optional field `namespaceArn`
      if (jsonObj.get("namespaceArn") != null && !jsonObj.get("namespaceArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("namespaceArn"));
      }
      // validate the optional field `namespaceName`
      if (jsonObj.get("namespaceName") != null && !jsonObj.get("namespaceName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("namespaceName"));
      }
      // validate the optional field `namespaceVersion`
      if (jsonObj.get("namespaceVersion") != null && !jsonObj.get("namespaceVersion").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("namespaceVersion"));
      }
      // validate the optional field `failureReason`
      if (jsonObj.get("failureReason") != null && !jsonObj.get("failureReason").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("failureReason"));
      }
      // validate the required field `createdDate`
      OffsetDateTime.validateJsonElement(jsonObj.get("createdDate"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetUploadStatusResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetUploadStatusResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetUploadStatusResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetUploadStatusResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetUploadStatusResponse>() {
           @Override
           public void write(JsonWriter out, GetUploadStatusResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetUploadStatusResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetUploadStatusResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetUploadStatusResponse
   * @throws IOException if the JSON string is invalid with respect to GetUploadStatusResponse
   */
  public static GetUploadStatusResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetUploadStatusResponse.class);
  }

  /**
   * Convert an instance of GetUploadStatusResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

