/*
 * AWS IoT Things Graph
 * <fullname>AWS IoT Things Graph</fullname> <p>AWS IoT Things Graph provides an integrated set of tools that enable developers to connect devices and services that use different standards, such as units of measure and communication protocols. AWS IoT Things Graph makes it possible to build IoT applications with little to no code by connecting devices and services and defining how they interact at an abstract level.</p> <p>For more information about how AWS IoT Things Graph works, see the <a href=\"https://docs.aws.amazon.com/thingsgraph/latest/ug/iot-tg-whatis.html\">User Guide</a>.</p> <p>The AWS IoT Things Graph service is discontinued.</p>
 *
 * The version of the OpenAPI document: 2018-09-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.FlowExecutionStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object that contains summary information about a flow execution.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:12.167227-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FlowExecutionSummary {
  public static final String SERIALIZED_NAME_FLOW_EXECUTION_ID = "flowExecutionId";
  @SerializedName(SERIALIZED_NAME_FLOW_EXECUTION_ID)
  private String flowExecutionId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private FlowExecutionStatus status;

  public static final String SERIALIZED_NAME_SYSTEM_INSTANCE_ID = "systemInstanceId";
  @SerializedName(SERIALIZED_NAME_SYSTEM_INSTANCE_ID)
  private String systemInstanceId;

  public static final String SERIALIZED_NAME_FLOW_TEMPLATE_ID = "flowTemplateId";
  @SerializedName(SERIALIZED_NAME_FLOW_TEMPLATE_ID)
  private String flowTemplateId;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public FlowExecutionSummary() {
  }

  public FlowExecutionSummary flowExecutionId(String flowExecutionId) {
    this.flowExecutionId = flowExecutionId;
    return this;
  }

  /**
   * Get flowExecutionId
   * @return flowExecutionId
   */
  @javax.annotation.Nullable
  public String getFlowExecutionId() {
    return flowExecutionId;
  }

  public void setFlowExecutionId(String flowExecutionId) {
    this.flowExecutionId = flowExecutionId;
  }


  public FlowExecutionSummary status(FlowExecutionStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public FlowExecutionStatus getStatus() {
    return status;
  }

  public void setStatus(FlowExecutionStatus status) {
    this.status = status;
  }


  public FlowExecutionSummary systemInstanceId(String systemInstanceId) {
    this.systemInstanceId = systemInstanceId;
    return this;
  }

  /**
   * Get systemInstanceId
   * @return systemInstanceId
   */
  @javax.annotation.Nullable
  public String getSystemInstanceId() {
    return systemInstanceId;
  }

  public void setSystemInstanceId(String systemInstanceId) {
    this.systemInstanceId = systemInstanceId;
  }


  public FlowExecutionSummary flowTemplateId(String flowTemplateId) {
    this.flowTemplateId = flowTemplateId;
    return this;
  }

  /**
   * Get flowTemplateId
   * @return flowTemplateId
   */
  @javax.annotation.Nullable
  public String getFlowTemplateId() {
    return flowTemplateId;
  }

  public void setFlowTemplateId(String flowTemplateId) {
    this.flowTemplateId = flowTemplateId;
  }


  public FlowExecutionSummary createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public FlowExecutionSummary updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlowExecutionSummary flowExecutionSummary = (FlowExecutionSummary) o;
    return Objects.equals(this.flowExecutionId, flowExecutionSummary.flowExecutionId) &&
        Objects.equals(this.status, flowExecutionSummary.status) &&
        Objects.equals(this.systemInstanceId, flowExecutionSummary.systemInstanceId) &&
        Objects.equals(this.flowTemplateId, flowExecutionSummary.flowTemplateId) &&
        Objects.equals(this.createdAt, flowExecutionSummary.createdAt) &&
        Objects.equals(this.updatedAt, flowExecutionSummary.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(flowExecutionId, status, systemInstanceId, flowTemplateId, createdAt, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlowExecutionSummary {\n");
    sb.append("    flowExecutionId: ").append(toIndentedString(flowExecutionId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    systemInstanceId: ").append(toIndentedString(systemInstanceId)).append("\n");
    sb.append("    flowTemplateId: ").append(toIndentedString(flowTemplateId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("flowExecutionId");
    openapiFields.add("status");
    openapiFields.add("systemInstanceId");
    openapiFields.add("flowTemplateId");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FlowExecutionSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FlowExecutionSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FlowExecutionSummary is not found in the empty JSON string", FlowExecutionSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FlowExecutionSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FlowExecutionSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `flowExecutionId`
      if (jsonObj.get("flowExecutionId") != null && !jsonObj.get("flowExecutionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("flowExecutionId"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        FlowExecutionStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `systemInstanceId`
      if (jsonObj.get("systemInstanceId") != null && !jsonObj.get("systemInstanceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("systemInstanceId"));
      }
      // validate the optional field `flowTemplateId`
      if (jsonObj.get("flowTemplateId") != null && !jsonObj.get("flowTemplateId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("flowTemplateId"));
      }
      // validate the optional field `createdAt`
      if (jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("createdAt"));
      }
      // validate the optional field `updatedAt`
      if (jsonObj.get("updatedAt") != null && !jsonObj.get("updatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("updatedAt"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FlowExecutionSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FlowExecutionSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FlowExecutionSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FlowExecutionSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<FlowExecutionSummary>() {
           @Override
           public void write(JsonWriter out, FlowExecutionSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FlowExecutionSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FlowExecutionSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FlowExecutionSummary
   * @throws IOException if the JSON string is invalid with respect to FlowExecutionSummary
   */
  public static FlowExecutionSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FlowExecutionSummary.class);
  }

  /**
   * Convert an instance of FlowExecutionSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

