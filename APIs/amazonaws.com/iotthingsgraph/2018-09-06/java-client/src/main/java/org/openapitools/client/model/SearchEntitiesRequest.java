/*
 * AWS IoT Things Graph
 * <fullname>AWS IoT Things Graph</fullname> <p>AWS IoT Things Graph provides an integrated set of tools that enable developers to connect devices and services that use different standards, such as units of measure and communication protocols. AWS IoT Things Graph makes it possible to build IoT applications with little to no code by connecting devices and services and defining how they interact at an abstract level.</p> <p>For more information about how AWS IoT Things Graph works, see the <a href=\"https://docs.aws.amazon.com/thingsgraph/latest/ug/iot-tg-whatis.html\">User Guide</a>.</p> <p>The AWS IoT Things Graph service is discontinued.</p>
 *
 * The version of the OpenAPI document: 2018-09-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SearchEntitiesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:12.167227-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchEntitiesRequest {
  public static final String SERIALIZED_NAME_ENTITY_TYPES = "entityTypes";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPES)
  private List entityTypes;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private List filters;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "nextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "maxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public static final String SERIALIZED_NAME_NAMESPACE_VERSION = "namespaceVersion";
  @SerializedName(SERIALIZED_NAME_NAMESPACE_VERSION)
  private Integer namespaceVersion;

  public SearchEntitiesRequest() {
  }

  public SearchEntitiesRequest entityTypes(List entityTypes) {
    this.entityTypes = entityTypes;
    return this;
  }

  /**
   * Get entityTypes
   * @return entityTypes
   */
  @javax.annotation.Nonnull
  public List getEntityTypes() {
    return entityTypes;
  }

  public void setEntityTypes(List entityTypes) {
    this.entityTypes = entityTypes;
  }


  public SearchEntitiesRequest filters(List filters) {
    this.filters = filters;
    return this;
  }

  /**
   * Get filters
   * @return filters
   */
  @javax.annotation.Nullable
  public List getFilters() {
    return filters;
  }

  public void setFilters(List filters) {
    this.filters = filters;
  }


  public SearchEntitiesRequest nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Get nextToken
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public SearchEntitiesRequest maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * Get maxResults
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }


  public SearchEntitiesRequest namespaceVersion(Integer namespaceVersion) {
    this.namespaceVersion = namespaceVersion;
    return this;
  }

  /**
   * Get namespaceVersion
   * @return namespaceVersion
   */
  @javax.annotation.Nullable
  public Integer getNamespaceVersion() {
    return namespaceVersion;
  }

  public void setNamespaceVersion(Integer namespaceVersion) {
    this.namespaceVersion = namespaceVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchEntitiesRequest searchEntitiesRequest = (SearchEntitiesRequest) o;
    return Objects.equals(this.entityTypes, searchEntitiesRequest.entityTypes) &&
        Objects.equals(this.filters, searchEntitiesRequest.filters) &&
        Objects.equals(this.nextToken, searchEntitiesRequest.nextToken) &&
        Objects.equals(this.maxResults, searchEntitiesRequest.maxResults) &&
        Objects.equals(this.namespaceVersion, searchEntitiesRequest.namespaceVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityTypes, filters, nextToken, maxResults, namespaceVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchEntitiesRequest {\n");
    sb.append("    entityTypes: ").append(toIndentedString(entityTypes)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    namespaceVersion: ").append(toIndentedString(namespaceVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entityTypes");
    openapiFields.add("filters");
    openapiFields.add("nextToken");
    openapiFields.add("maxResults");
    openapiFields.add("namespaceVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("entityTypes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchEntitiesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchEntitiesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchEntitiesRequest is not found in the empty JSON string", SearchEntitiesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchEntitiesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchEntitiesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SearchEntitiesRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `entityTypes`
      List.validateJsonElement(jsonObj.get("entityTypes"));
      // validate the optional field `filters`
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("filters"));
      }
      // validate the optional field `nextToken`
      if (jsonObj.get("nextToken") != null && !jsonObj.get("nextToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("nextToken"));
      }
      // validate the optional field `maxResults`
      if (jsonObj.get("maxResults") != null && !jsonObj.get("maxResults").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("maxResults"));
      }
      // validate the optional field `namespaceVersion`
      if (jsonObj.get("namespaceVersion") != null && !jsonObj.get("namespaceVersion").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("namespaceVersion"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchEntitiesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchEntitiesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchEntitiesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchEntitiesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchEntitiesRequest>() {
           @Override
           public void write(JsonWriter out, SearchEntitiesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchEntitiesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchEntitiesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchEntitiesRequest
   * @throws IOException if the JSON string is invalid with respect to SearchEntitiesRequest
   */
  public static SearchEntitiesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchEntitiesRequest.class);
  }

  /**
   * Convert an instance of SearchEntitiesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

