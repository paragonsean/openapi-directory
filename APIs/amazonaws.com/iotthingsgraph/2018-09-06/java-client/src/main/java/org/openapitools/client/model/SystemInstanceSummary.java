/*
 * AWS IoT Things Graph
 * <fullname>AWS IoT Things Graph</fullname> <p>AWS IoT Things Graph provides an integrated set of tools that enable developers to connect devices and services that use different standards, such as units of measure and communication protocols. AWS IoT Things Graph makes it possible to build IoT applications with little to no code by connecting devices and services and defining how they interact at an abstract level.</p> <p>For more information about how AWS IoT Things Graph works, see the <a href=\"https://docs.aws.amazon.com/thingsgraph/latest/ug/iot-tg-whatis.html\">User Guide</a>.</p> <p>The AWS IoT Things Graph service is discontinued.</p>
 *
 * The version of the OpenAPI document: 2018-09-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.DeploymentTarget;
import org.openapitools.client.model.SystemInstanceDeploymentStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object that contains summary information about a system instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:12.167227-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SystemInstanceSummary {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private SystemInstanceDeploymentStatus status;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private DeploymentTarget target;

  public static final String SERIALIZED_NAME_GREENGRASS_GROUP_NAME = "greengrassGroupName";
  @SerializedName(SERIALIZED_NAME_GREENGRASS_GROUP_NAME)
  private String greengrassGroupName;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_GREENGRASS_GROUP_ID = "greengrassGroupId";
  @SerializedName(SERIALIZED_NAME_GREENGRASS_GROUP_ID)
  private String greengrassGroupId;

  public static final String SERIALIZED_NAME_GREENGRASS_GROUP_VERSION_ID = "greengrassGroupVersionId";
  @SerializedName(SERIALIZED_NAME_GREENGRASS_GROUP_VERSION_ID)
  private String greengrassGroupVersionId;

  public SystemInstanceSummary() {
  }

  public SystemInstanceSummary id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public SystemInstanceSummary arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public SystemInstanceSummary status(SystemInstanceDeploymentStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public SystemInstanceDeploymentStatus getStatus() {
    return status;
  }

  public void setStatus(SystemInstanceDeploymentStatus status) {
    this.status = status;
  }


  public SystemInstanceSummary target(DeploymentTarget target) {
    this.target = target;
    return this;
  }

  /**
   * Get target
   * @return target
   */
  @javax.annotation.Nullable
  public DeploymentTarget getTarget() {
    return target;
  }

  public void setTarget(DeploymentTarget target) {
    this.target = target;
  }


  public SystemInstanceSummary greengrassGroupName(String greengrassGroupName) {
    this.greengrassGroupName = greengrassGroupName;
    return this;
  }

  /**
   * Get greengrassGroupName
   * @return greengrassGroupName
   */
  @javax.annotation.Nullable
  public String getGreengrassGroupName() {
    return greengrassGroupName;
  }

  public void setGreengrassGroupName(String greengrassGroupName) {
    this.greengrassGroupName = greengrassGroupName;
  }


  public SystemInstanceSummary createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public SystemInstanceSummary updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public SystemInstanceSummary greengrassGroupId(String greengrassGroupId) {
    this.greengrassGroupId = greengrassGroupId;
    return this;
  }

  /**
   * Get greengrassGroupId
   * @return greengrassGroupId
   */
  @javax.annotation.Nullable
  public String getGreengrassGroupId() {
    return greengrassGroupId;
  }

  public void setGreengrassGroupId(String greengrassGroupId) {
    this.greengrassGroupId = greengrassGroupId;
  }


  public SystemInstanceSummary greengrassGroupVersionId(String greengrassGroupVersionId) {
    this.greengrassGroupVersionId = greengrassGroupVersionId;
    return this;
  }

  /**
   * Get greengrassGroupVersionId
   * @return greengrassGroupVersionId
   */
  @javax.annotation.Nullable
  public String getGreengrassGroupVersionId() {
    return greengrassGroupVersionId;
  }

  public void setGreengrassGroupVersionId(String greengrassGroupVersionId) {
    this.greengrassGroupVersionId = greengrassGroupVersionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SystemInstanceSummary systemInstanceSummary = (SystemInstanceSummary) o;
    return Objects.equals(this.id, systemInstanceSummary.id) &&
        Objects.equals(this.arn, systemInstanceSummary.arn) &&
        Objects.equals(this.status, systemInstanceSummary.status) &&
        Objects.equals(this.target, systemInstanceSummary.target) &&
        Objects.equals(this.greengrassGroupName, systemInstanceSummary.greengrassGroupName) &&
        Objects.equals(this.createdAt, systemInstanceSummary.createdAt) &&
        Objects.equals(this.updatedAt, systemInstanceSummary.updatedAt) &&
        Objects.equals(this.greengrassGroupId, systemInstanceSummary.greengrassGroupId) &&
        Objects.equals(this.greengrassGroupVersionId, systemInstanceSummary.greengrassGroupVersionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, arn, status, target, greengrassGroupName, createdAt, updatedAt, greengrassGroupId, greengrassGroupVersionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SystemInstanceSummary {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    greengrassGroupName: ").append(toIndentedString(greengrassGroupName)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    greengrassGroupId: ").append(toIndentedString(greengrassGroupId)).append("\n");
    sb.append("    greengrassGroupVersionId: ").append(toIndentedString(greengrassGroupVersionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("arn");
    openapiFields.add("status");
    openapiFields.add("target");
    openapiFields.add("greengrassGroupName");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");
    openapiFields.add("greengrassGroupId");
    openapiFields.add("greengrassGroupVersionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SystemInstanceSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SystemInstanceSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SystemInstanceSummary is not found in the empty JSON string", SystemInstanceSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SystemInstanceSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SystemInstanceSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `id`
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("id"));
      }
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        SystemInstanceDeploymentStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `target`
      if (jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) {
        DeploymentTarget.validateJsonElement(jsonObj.get("target"));
      }
      // validate the optional field `greengrassGroupName`
      if (jsonObj.get("greengrassGroupName") != null && !jsonObj.get("greengrassGroupName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("greengrassGroupName"));
      }
      // validate the optional field `createdAt`
      if (jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("createdAt"));
      }
      // validate the optional field `updatedAt`
      if (jsonObj.get("updatedAt") != null && !jsonObj.get("updatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("updatedAt"));
      }
      // validate the optional field `greengrassGroupId`
      if (jsonObj.get("greengrassGroupId") != null && !jsonObj.get("greengrassGroupId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("greengrassGroupId"));
      }
      // validate the optional field `greengrassGroupVersionId`
      if (jsonObj.get("greengrassGroupVersionId") != null && !jsonObj.get("greengrassGroupVersionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("greengrassGroupVersionId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SystemInstanceSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SystemInstanceSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SystemInstanceSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SystemInstanceSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<SystemInstanceSummary>() {
           @Override
           public void write(JsonWriter out, SystemInstanceSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SystemInstanceSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SystemInstanceSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SystemInstanceSummary
   * @throws IOException if the JSON string is invalid with respect to SystemInstanceSummary
   */
  public static SystemInstanceSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SystemInstanceSummary.class);
  }

  /**
   * Convert an instance of SystemInstanceSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

