/*
 * AWS IoT Things Graph
 * <fullname>AWS IoT Things Graph</fullname> <p>AWS IoT Things Graph provides an integrated set of tools that enable developers to connect devices and services that use different standards, such as units of measure and communication protocols. AWS IoT Things Graph makes it possible to build IoT applications with little to no code by connecting devices and services and defining how they interact at an abstract level.</p> <p>For more information about how AWS IoT Things Graph works, see the <a href=\"https://docs.aws.amazon.com/thingsgraph/latest/ug/iot-tg-whatis.html\">User Guide</a>.</p> <p>The AWS IoT Things Graph service is discontinued.</p>
 *
 * The version of the OpenAPI document: 2018-09-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object that specifies whether cloud metrics are collected in a deployment and, if so, what role is used to collect metrics.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:12.167227-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MetricsConfiguration {
  public static final String SERIALIZED_NAME_CLOUD_METRIC_ENABLED = "cloudMetricEnabled";
  @SerializedName(SERIALIZED_NAME_CLOUD_METRIC_ENABLED)
  private Boolean cloudMetricEnabled;

  public static final String SERIALIZED_NAME_METRIC_RULE_ROLE_ARN = "metricRuleRoleArn";
  @SerializedName(SERIALIZED_NAME_METRIC_RULE_ROLE_ARN)
  private String metricRuleRoleArn;

  public MetricsConfiguration() {
  }

  public MetricsConfiguration cloudMetricEnabled(Boolean cloudMetricEnabled) {
    this.cloudMetricEnabled = cloudMetricEnabled;
    return this;
  }

  /**
   * Get cloudMetricEnabled
   * @return cloudMetricEnabled
   */
  @javax.annotation.Nullable
  public Boolean getCloudMetricEnabled() {
    return cloudMetricEnabled;
  }

  public void setCloudMetricEnabled(Boolean cloudMetricEnabled) {
    this.cloudMetricEnabled = cloudMetricEnabled;
  }


  public MetricsConfiguration metricRuleRoleArn(String metricRuleRoleArn) {
    this.metricRuleRoleArn = metricRuleRoleArn;
    return this;
  }

  /**
   * Get metricRuleRoleArn
   * @return metricRuleRoleArn
   */
  @javax.annotation.Nullable
  public String getMetricRuleRoleArn() {
    return metricRuleRoleArn;
  }

  public void setMetricRuleRoleArn(String metricRuleRoleArn) {
    this.metricRuleRoleArn = metricRuleRoleArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricsConfiguration metricsConfiguration = (MetricsConfiguration) o;
    return Objects.equals(this.cloudMetricEnabled, metricsConfiguration.cloudMetricEnabled) &&
        Objects.equals(this.metricRuleRoleArn, metricsConfiguration.metricRuleRoleArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cloudMetricEnabled, metricRuleRoleArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricsConfiguration {\n");
    sb.append("    cloudMetricEnabled: ").append(toIndentedString(cloudMetricEnabled)).append("\n");
    sb.append("    metricRuleRoleArn: ").append(toIndentedString(metricRuleRoleArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cloudMetricEnabled");
    openapiFields.add("metricRuleRoleArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MetricsConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetricsConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetricsConfiguration is not found in the empty JSON string", MetricsConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetricsConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetricsConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cloudMetricEnabled`
      if (jsonObj.get("cloudMetricEnabled") != null && !jsonObj.get("cloudMetricEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("cloudMetricEnabled"));
      }
      // validate the optional field `metricRuleRoleArn`
      if (jsonObj.get("metricRuleRoleArn") != null && !jsonObj.get("metricRuleRoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("metricRuleRoleArn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetricsConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetricsConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetricsConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetricsConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<MetricsConfiguration>() {
           @Override
           public void write(JsonWriter out, MetricsConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetricsConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MetricsConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MetricsConfiguration
   * @throws IOException if the JSON string is invalid with respect to MetricsConfiguration
   */
  public static MetricsConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetricsConfiguration.class);
  }

  /**
   * Convert an instance of MetricsConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

