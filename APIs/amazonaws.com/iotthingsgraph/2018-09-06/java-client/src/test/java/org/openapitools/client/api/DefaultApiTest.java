/*
 * AWS IoT Things Graph
 * <fullname>AWS IoT Things Graph</fullname> <p>AWS IoT Things Graph provides an integrated set of tools that enable developers to connect devices and services that use different standards, such as units of measure and communication protocols. AWS IoT Things Graph makes it possible to build IoT applications with little to no code by connecting devices and services and defining how they interact at an abstract level.</p> <p>For more information about how AWS IoT Things Graph works, see the <a href=\"https://docs.aws.amazon.com/thingsgraph/latest/ug/iot-tg-whatis.html\">User Guide</a>.</p> <p>The AWS IoT Things Graph service is discontinued.</p>
 *
 * The version of the OpenAPI document: 2018-09-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AssociateEntityToThingRequest;
import org.openapitools.client.model.CreateFlowTemplateRequest;
import org.openapitools.client.model.CreateFlowTemplateResponse;
import org.openapitools.client.model.CreateSystemInstanceRequest;
import org.openapitools.client.model.CreateSystemInstanceResponse;
import org.openapitools.client.model.CreateSystemTemplateRequest;
import org.openapitools.client.model.CreateSystemTemplateResponse;
import org.openapitools.client.model.DeleteFlowTemplateRequest;
import org.openapitools.client.model.DeleteNamespaceResponse;
import org.openapitools.client.model.DeleteSystemInstanceRequest;
import org.openapitools.client.model.DeleteSystemTemplateRequest;
import org.openapitools.client.model.DeploySystemInstanceRequest;
import org.openapitools.client.model.DeploySystemInstanceResponse;
import org.openapitools.client.model.DeprecateFlowTemplateRequest;
import org.openapitools.client.model.DeprecateSystemTemplateRequest;
import org.openapitools.client.model.DescribeNamespaceRequest;
import org.openapitools.client.model.DescribeNamespaceResponse;
import org.openapitools.client.model.DissociateEntityFromThingRequest;
import org.openapitools.client.model.GetEntitiesRequest;
import org.openapitools.client.model.GetEntitiesResponse;
import org.openapitools.client.model.GetFlowTemplateRequest;
import org.openapitools.client.model.GetFlowTemplateResponse;
import org.openapitools.client.model.GetFlowTemplateRevisionsRequest;
import org.openapitools.client.model.GetFlowTemplateRevisionsResponse;
import org.openapitools.client.model.GetNamespaceDeletionStatusResponse;
import org.openapitools.client.model.GetSystemInstanceRequest;
import org.openapitools.client.model.GetSystemInstanceResponse;
import org.openapitools.client.model.GetSystemTemplateRequest;
import org.openapitools.client.model.GetSystemTemplateResponse;
import org.openapitools.client.model.GetSystemTemplateRevisionsRequest;
import org.openapitools.client.model.GetSystemTemplateRevisionsResponse;
import org.openapitools.client.model.GetUploadStatusRequest;
import org.openapitools.client.model.GetUploadStatusResponse;
import org.openapitools.client.model.ListFlowExecutionMessagesRequest;
import org.openapitools.client.model.ListFlowExecutionMessagesResponse;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.SearchEntitiesRequest;
import org.openapitools.client.model.SearchEntitiesResponse;
import org.openapitools.client.model.SearchFlowExecutionsRequest;
import org.openapitools.client.model.SearchFlowExecutionsResponse;
import org.openapitools.client.model.SearchFlowTemplatesRequest;
import org.openapitools.client.model.SearchFlowTemplatesResponse;
import org.openapitools.client.model.SearchSystemInstancesRequest;
import org.openapitools.client.model.SearchSystemInstancesResponse;
import org.openapitools.client.model.SearchSystemTemplatesRequest;
import org.openapitools.client.model.SearchSystemTemplatesResponse;
import org.openapitools.client.model.SearchThingsRequest;
import org.openapitools.client.model.SearchThingsResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UndeploySystemInstanceRequest;
import org.openapitools.client.model.UndeploySystemInstanceResponse;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateFlowTemplateRequest;
import org.openapitools.client.model.UpdateFlowTemplateResponse;
import org.openapitools.client.model.UpdateSystemTemplateRequest;
import org.openapitools.client.model.UpdateSystemTemplateResponse;
import org.openapitools.client.model.UploadEntityDefinitionsRequest;
import org.openapitools.client.model.UploadEntityDefinitionsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt;Associates a device with a concrete thing that is in the user&#39;s registry.&lt;/p&gt; &lt;p&gt;A thing can be associated with only one device at a time. If you associate a thing with a new device id, its previous association will be removed.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateEntityToThingTest() throws ApiException {
        String xAmzTarget = null;
        AssociateEntityToThingRequest associateEntityToThingRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.associateEntityToThing(xAmzTarget, associateEntityToThingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a workflow template. Workflows can be created only in the user&#39;s namespace. (The public namespace contains only entities.) The workflow can contain only entities in the specified namespace. The workflow is validated against the entities in the latest version of the user&#39;s namespace unless another namespace version is specified in the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFlowTemplateTest() throws ApiException {
        String xAmzTarget = null;
        CreateFlowTemplateRequest createFlowTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateFlowTemplateResponse response = api.createFlowTemplate(xAmzTarget, createFlowTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a system instance. &lt;/p&gt; &lt;p&gt;This action validates the system instance, prepares the deployment-related resources. For Greengrass deployments, it updates the Greengrass group that is specified by the &lt;code&gt;greengrassGroupName&lt;/code&gt; parameter. It also adds a file to the S3 bucket specified by the &lt;code&gt;s3BucketName&lt;/code&gt; parameter. You need to call &lt;code&gt;DeploySystemInstance&lt;/code&gt; after running this action.&lt;/p&gt; &lt;p&gt;For Greengrass deployments, since this action modifies and adds resources to a Greengrass group and an S3 bucket on the caller&#39;s behalf, the calling identity must have write permissions to both the specified Greengrass group and S3 bucket. Otherwise, the call will fail with an authorization error.&lt;/p&gt; &lt;p&gt;For cloud deployments, this action requires a &lt;code&gt;flowActionsRoleArn&lt;/code&gt; value. This is an IAM role that has permissions to access AWS services, such as AWS Lambda and AWS IoT, that the flow uses when it executes.&lt;/p&gt; &lt;p&gt;If the definition document doesn&#39;t specify a version of the user&#39;s namespace, the latest version will be used by default.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSystemInstanceTest() throws ApiException {
        String xAmzTarget = null;
        CreateSystemInstanceRequest createSystemInstanceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateSystemInstanceResponse response = api.createSystemInstance(xAmzTarget, createSystemInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a system. The system is validated against the entities in the latest version of the user&#39;s namespace unless another namespace version is specified in the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSystemTemplateTest() throws ApiException {
        String xAmzTarget = null;
        CreateSystemTemplateRequest createSystemTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateSystemTemplateResponse response = api.createSystemTemplate(xAmzTarget, createSystemTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a workflow. Any new system or deployment that contains this workflow will fail to update or deploy. Existing deployments that contain the workflow will continue to run (since they use a snapshot of the workflow taken at the time of deployment).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFlowTemplateTest() throws ApiException {
        String xAmzTarget = null;
        DeleteFlowTemplateRequest deleteFlowTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteFlowTemplate(xAmzTarget, deleteFlowTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified namespace. This action deletes all of the entities in the namespace. Delete the systems and flows that use entities in the namespace before performing this action. This action takes no request parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNamespaceTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteNamespaceResponse response = api.deleteNamespace(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a system instance. Only system instances that have never been deployed, or that have been undeployed can be deleted.&lt;/p&gt; &lt;p&gt;Users can create a new system instance that has the same ID as a deleted system instance.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSystemInstanceTest() throws ApiException {
        String xAmzTarget = null;
        DeleteSystemInstanceRequest deleteSystemInstanceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteSystemInstance(xAmzTarget, deleteSystemInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a system. New deployments can&#39;t contain the system after its deletion. Existing deployments that contain the system will continue to work because they use a snapshot of the system that is taken when it is deployed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSystemTemplateTest() throws ApiException {
        String xAmzTarget = null;
        DeleteSystemTemplateRequest deleteSystemTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteSystemTemplate(xAmzTarget, deleteSystemTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; &lt;b&gt;Greengrass and Cloud Deployments&lt;/b&gt; &lt;/p&gt; &lt;p&gt;Deploys the system instance to the target specified in &lt;code&gt;CreateSystemInstance&lt;/code&gt;. &lt;/p&gt; &lt;p&gt; &lt;b&gt;Greengrass Deployments&lt;/b&gt; &lt;/p&gt; &lt;p&gt;If the system or any workflows and entities have been updated before this action is called, then the deployment will create a new Amazon Simple Storage Service resource file and then deploy it.&lt;/p&gt; &lt;p&gt;Since this action creates a Greengrass deployment on the caller&#39;s behalf, the calling identity must have write permissions to the specified Greengrass group. Otherwise, the call will fail with an authorization error.&lt;/p&gt; &lt;p&gt;For information about the artifacts that get added to your Greengrass core device when you use this API, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/thingsgraph/latest/ug/iot-tg-greengrass.html\&quot;&gt;AWS IoT Things Graph and AWS IoT Greengrass&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploySystemInstanceTest() throws ApiException {
        String xAmzTarget = null;
        DeploySystemInstanceRequest deploySystemInstanceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeploySystemInstanceResponse response = api.deploySystemInstance(xAmzTarget, deploySystemInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deprecates the specified workflow. This action marks the workflow for deletion. Deprecated flows can&#39;t be deployed, but existing deployments will continue to run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deprecateFlowTemplateTest() throws ApiException {
        String xAmzTarget = null;
        DeprecateFlowTemplateRequest deprecateFlowTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deprecateFlowTemplate(xAmzTarget, deprecateFlowTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deprecates the specified system.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deprecateSystemTemplateTest() throws ApiException {
        String xAmzTarget = null;
        DeprecateSystemTemplateRequest deprecateSystemTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deprecateSystemTemplate(xAmzTarget, deprecateSystemTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the latest version of the user&#39;s namespace and the public version that it is tracking.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeNamespaceTest() throws ApiException {
        String xAmzTarget = null;
        DescribeNamespaceRequest describeNamespaceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeNamespaceResponse response = api.describeNamespace(xAmzTarget, describeNamespaceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Dissociates a device entity from a concrete thing. The action takes only the type of the entity that you need to dissociate because only one entity of a particular type can be associated with a thing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dissociateEntityFromThingTest() throws ApiException {
        String xAmzTarget = null;
        DissociateEntityFromThingRequest dissociateEntityFromThingRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.dissociateEntityFromThing(xAmzTarget, dissociateEntityFromThingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets definitions of the specified entities. Uses the latest version of the user&#39;s namespace by default. This API returns the following TDM entities.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Properties&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;States&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Events&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Actions&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Capabilities&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Mappings&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Devices&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Device Models&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Services&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This action doesn&#39;t return definitions for systems, flows, and deployments.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEntitiesTest() throws ApiException {
        String xAmzTarget = null;
        GetEntitiesRequest getEntitiesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetEntitiesResponse response = api.getEntities(xAmzTarget, getEntitiesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the latest version of the &lt;code&gt;DefinitionDocument&lt;/code&gt; and &lt;code&gt;FlowTemplateSummary&lt;/code&gt; for the specified workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFlowTemplateTest() throws ApiException {
        String xAmzTarget = null;
        GetFlowTemplateRequest getFlowTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetFlowTemplateResponse response = api.getFlowTemplate(xAmzTarget, getFlowTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets revisions of the specified workflow. Only the last 100 revisions are stored. If the workflow has been deprecated, this action will return revisions that occurred before the deprecation. This action won&#39;t work for workflows that have been deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFlowTemplateRevisionsTest() throws ApiException {
        String xAmzTarget = null;
        GetFlowTemplateRevisionsRequest getFlowTemplateRevisionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetFlowTemplateRevisionsResponse response = api.getFlowTemplateRevisions(xAmzTarget, getFlowTemplateRevisionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets the status of a namespace deletion task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNamespaceDeletionStatusTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetNamespaceDeletionStatusResponse response = api.getNamespaceDeletionStatus(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets a system instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSystemInstanceTest() throws ApiException {
        String xAmzTarget = null;
        GetSystemInstanceRequest getSystemInstanceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSystemInstanceResponse response = api.getSystemInstance(xAmzTarget, getSystemInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets a system.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSystemTemplateTest() throws ApiException {
        String xAmzTarget = null;
        GetSystemTemplateRequest getSystemTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSystemTemplateResponse response = api.getSystemTemplate(xAmzTarget, getSystemTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets revisions made to the specified system template. Only the previous 100 revisions are stored. If the system has been deprecated, this action will return the revisions that occurred before its deprecation. This action won&#39;t work with systems that have been deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSystemTemplateRevisionsTest() throws ApiException {
        String xAmzTarget = null;
        GetSystemTemplateRevisionsRequest getSystemTemplateRevisionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetSystemTemplateRevisionsResponse response = api.getSystemTemplateRevisions(xAmzTarget, getSystemTemplateRevisionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets the status of the specified upload.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUploadStatusTest() throws ApiException {
        String xAmzTarget = null;
        GetUploadStatusRequest getUploadStatusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetUploadStatusResponse response = api.getUploadStatus(xAmzTarget, getUploadStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a list of objects that contain information about events in a flow execution.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFlowExecutionMessagesTest() throws ApiException {
        String xAmzTarget = null;
        ListFlowExecutionMessagesRequest listFlowExecutionMessagesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListFlowExecutionMessagesResponse response = api.listFlowExecutionMessages(xAmzTarget, listFlowExecutionMessagesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all tags on an AWS IoT Things Graph resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String xAmzTarget = null;
        ListTagsForResourceRequest listTagsForResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListTagsForResourceResponse response = api.listTagsForResource(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Searches for entities of the specified type. You can search for entities in your namespace and the public namespace that you&#39;re tracking.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchEntitiesTest() throws ApiException {
        String xAmzTarget = null;
        SearchEntitiesRequest searchEntitiesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        SearchEntitiesResponse response = api.searchEntities(xAmzTarget, searchEntitiesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Searches for AWS IoT Things Graph workflow execution instances.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchFlowExecutionsTest() throws ApiException {
        String xAmzTarget = null;
        SearchFlowExecutionsRequest searchFlowExecutionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        SearchFlowExecutionsResponse response = api.searchFlowExecutions(xAmzTarget, searchFlowExecutionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Searches for summary information about workflows.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchFlowTemplatesTest() throws ApiException {
        String xAmzTarget = null;
        SearchFlowTemplatesRequest searchFlowTemplatesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        SearchFlowTemplatesResponse response = api.searchFlowTemplates(xAmzTarget, searchFlowTemplatesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Searches for system instances in the user&#39;s account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchSystemInstancesTest() throws ApiException {
        String xAmzTarget = null;
        SearchSystemInstancesRequest searchSystemInstancesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        SearchSystemInstancesResponse response = api.searchSystemInstances(xAmzTarget, searchSystemInstancesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Searches for summary information about systems in the user&#39;s account. You can filter by the ID of a workflow to return only systems that use the specified workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchSystemTemplatesTest() throws ApiException {
        String xAmzTarget = null;
        SearchSystemTemplatesRequest searchSystemTemplatesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        SearchSystemTemplatesResponse response = api.searchSystemTemplates(xAmzTarget, searchSystemTemplatesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Searches for things associated with the specified entity. You can search by both device and device model.&lt;/p&gt; &lt;p&gt;For example, if two different devices, camera1 and camera2, implement the camera device model, the user can associate thing1 to camera1 and thing2 to camera2. &lt;code&gt;SearchThings(camera2)&lt;/code&gt; will return only thing2, but &lt;code&gt;SearchThings(camera)&lt;/code&gt; will return both thing1 and thing2.&lt;/p&gt; &lt;p&gt;This action searches for exact matches and doesn&#39;t perform partial text matching.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchThingsTest() throws ApiException {
        String xAmzTarget = null;
        SearchThingsRequest searchThingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        SearchThingsResponse response = api.searchThings(xAmzTarget, searchThingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Creates a tag for the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String xAmzTarget = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes a system instance from its target (Cloud or Greengrass).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void undeploySystemInstanceTest() throws ApiException {
        String xAmzTarget = null;
        UndeploySystemInstanceRequest undeploySystemInstanceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UndeploySystemInstanceResponse response = api.undeploySystemInstance(xAmzTarget, undeploySystemInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes a tag from the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String xAmzTarget = null;
        UntagResourceRequest untagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the specified workflow. All deployed systems and system instances that use the workflow will see the changes in the flow when it is redeployed. If you don&#39;t want this behavior, copy the workflow (creating a new workflow with a different ID), and update the copy. The workflow can contain only entities in the specified namespace. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFlowTemplateTest() throws ApiException {
        String xAmzTarget = null;
        UpdateFlowTemplateRequest updateFlowTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateFlowTemplateResponse response = api.updateFlowTemplate(xAmzTarget, updateFlowTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the specified system. You don&#39;t need to run this action after updating a workflow. Any deployment that uses the system will see the changes in the system when it is redeployed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSystemTemplateTest() throws ApiException {
        String xAmzTarget = null;
        UpdateSystemTemplateRequest updateSystemTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateSystemTemplateResponse response = api.updateSystemTemplate(xAmzTarget, updateSystemTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Asynchronously uploads one or more entity definitions to the user&#39;s namespace. The &lt;code&gt;document&lt;/code&gt; parameter is required if &lt;code&gt;syncWithPublicNamespace&lt;/code&gt; and &lt;code&gt;deleteExistingEntites&lt;/code&gt; are false. If the &lt;code&gt;syncWithPublicNamespace&lt;/code&gt; parameter is set to &lt;code&gt;true&lt;/code&gt;, the user&#39;s namespace will synchronize with the latest version of the public namespace. If &lt;code&gt;deprecateExistingEntities&lt;/code&gt; is set to true, all entities in the latest version will be deleted before the new &lt;code&gt;DefinitionDocument&lt;/code&gt; is uploaded.&lt;/p&gt; &lt;p&gt;When a user uploads entity definitions for the first time, the service creates a new namespace for the user. The new namespace tracks the public namespace. Currently users can have only one namespace. The namespace version increments whenever a user uploads entity definitions that are backwards-incompatible and whenever a user sets the &lt;code&gt;syncWithPublicNamespace&lt;/code&gt; parameter or the &lt;code&gt;deprecateExistingEntities&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The IDs for all of the entities should be in URN format. Each entity must be in the user&#39;s namespace. Users can&#39;t create entities in the public namespace, but entity definitions can refer to entities in the public namespace.&lt;/p&gt; &lt;p&gt;Valid entities are &lt;code&gt;Device&lt;/code&gt;, &lt;code&gt;DeviceModel&lt;/code&gt;, &lt;code&gt;Service&lt;/code&gt;, &lt;code&gt;Capability&lt;/code&gt;, &lt;code&gt;State&lt;/code&gt;, &lt;code&gt;Action&lt;/code&gt;, &lt;code&gt;Event&lt;/code&gt;, &lt;code&gt;Property&lt;/code&gt;, &lt;code&gt;Mapping&lt;/code&gt;, &lt;code&gt;Enum&lt;/code&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadEntityDefinitionsTest() throws ApiException {
        String xAmzTarget = null;
        UploadEntityDefinitionsRequest uploadEntityDefinitionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UploadEntityDefinitionsResponse response = api.uploadEntityDefinitions(xAmzTarget, uploadEntityDefinitionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
