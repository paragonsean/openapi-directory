# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_flow_template_request_definition import UpdateFlowTemplateRequestDefinition
from openapi_server import util


class UpdateFlowTemplateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, definition: UpdateFlowTemplateRequestDefinition=None, compatible_namespace_version: int=None):
        """UpdateFlowTemplateRequest - a model defined in OpenAPI

        :param id: The id of this UpdateFlowTemplateRequest.
        :param definition: The definition of this UpdateFlowTemplateRequest.
        :param compatible_namespace_version: The compatible_namespace_version of this UpdateFlowTemplateRequest.
        """
        self.openapi_types = {
            'id': str,
            'definition': UpdateFlowTemplateRequestDefinition,
            'compatible_namespace_version': int
        }

        self.attribute_map = {
            'id': 'id',
            'definition': 'definition',
            'compatible_namespace_version': 'compatibleNamespaceVersion'
        }

        self._id = id
        self._definition = definition
        self._compatible_namespace_version = compatible_namespace_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateFlowTemplateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateFlowTemplateRequest of this UpdateFlowTemplateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this UpdateFlowTemplateRequest.


        :return: The id of this UpdateFlowTemplateRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UpdateFlowTemplateRequest.


        :param id: The id of this UpdateFlowTemplateRequest.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def definition(self):
        """Gets the definition of this UpdateFlowTemplateRequest.


        :return: The definition of this UpdateFlowTemplateRequest.
        :rtype: UpdateFlowTemplateRequestDefinition
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this UpdateFlowTemplateRequest.


        :param definition: The definition of this UpdateFlowTemplateRequest.
        :type definition: UpdateFlowTemplateRequestDefinition
        """
        if definition is None:
            raise ValueError("Invalid value for `definition`, must not be `None`")

        self._definition = definition

    @property
    def compatible_namespace_version(self):
        """Gets the compatible_namespace_version of this UpdateFlowTemplateRequest.


        :return: The compatible_namespace_version of this UpdateFlowTemplateRequest.
        :rtype: int
        """
        return self._compatible_namespace_version

    @compatible_namespace_version.setter
    def compatible_namespace_version(self, compatible_namespace_version):
        """Sets the compatible_namespace_version of this UpdateFlowTemplateRequest.


        :param compatible_namespace_version: The compatible_namespace_version of this UpdateFlowTemplateRequest.
        :type compatible_namespace_version: int
        """

        self._compatible_namespace_version = compatible_namespace_version
