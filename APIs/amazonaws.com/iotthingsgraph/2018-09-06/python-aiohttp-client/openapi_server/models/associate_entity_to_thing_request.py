# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssociateEntityToThingRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, thing_name: str=None, entity_id: str=None, namespace_version: int=None):
        """AssociateEntityToThingRequest - a model defined in OpenAPI

        :param thing_name: The thing_name of this AssociateEntityToThingRequest.
        :param entity_id: The entity_id of this AssociateEntityToThingRequest.
        :param namespace_version: The namespace_version of this AssociateEntityToThingRequest.
        """
        self.openapi_types = {
            'thing_name': str,
            'entity_id': str,
            'namespace_version': int
        }

        self.attribute_map = {
            'thing_name': 'thingName',
            'entity_id': 'entityId',
            'namespace_version': 'namespaceVersion'
        }

        self._thing_name = thing_name
        self._entity_id = entity_id
        self._namespace_version = namespace_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociateEntityToThingRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssociateEntityToThingRequest of this AssociateEntityToThingRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def thing_name(self):
        """Gets the thing_name of this AssociateEntityToThingRequest.


        :return: The thing_name of this AssociateEntityToThingRequest.
        :rtype: str
        """
        return self._thing_name

    @thing_name.setter
    def thing_name(self, thing_name):
        """Sets the thing_name of this AssociateEntityToThingRequest.


        :param thing_name: The thing_name of this AssociateEntityToThingRequest.
        :type thing_name: str
        """
        if thing_name is None:
            raise ValueError("Invalid value for `thing_name`, must not be `None`")

        self._thing_name = thing_name

    @property
    def entity_id(self):
        """Gets the entity_id of this AssociateEntityToThingRequest.


        :return: The entity_id of this AssociateEntityToThingRequest.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this AssociateEntityToThingRequest.


        :param entity_id: The entity_id of this AssociateEntityToThingRequest.
        :type entity_id: str
        """
        if entity_id is None:
            raise ValueError("Invalid value for `entity_id`, must not be `None`")

        self._entity_id = entity_id

    @property
    def namespace_version(self):
        """Gets the namespace_version of this AssociateEntityToThingRequest.


        :return: The namespace_version of this AssociateEntityToThingRequest.
        :rtype: int
        """
        return self._namespace_version

    @namespace_version.setter
    def namespace_version(self, namespace_version):
        """Sets the namespace_version of this AssociateEntityToThingRequest.


        :param namespace_version: The namespace_version of this AssociateEntityToThingRequest.
        :type namespace_version: int
        """

        self._namespace_version = namespace_version
