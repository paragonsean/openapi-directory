/**
 * AWS Key Management Service
 * <fullname>Key Management Service</fullname> <p>Key Management Service (KMS) is an encryption and key management web service. This guide describes the KMS operations that you can call programmatically. For general information about KMS, see the <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/\"> <i>Key Management Service Developer Guide</i> </a>.</p> <note> <p>KMS has replaced the term <i>customer master key (CMK)</i> with <i>KMS key</i> and <i>KMS key</i>. The concept has not changed. To prevent breaking changes, KMS is keeping some variations of this term.</p> <p>Amazon Web Services provides SDKs that consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .Net, macOS, Android, etc.). The SDKs provide a convenient way to create programmatic access to KMS and other Amazon Web Services services. For example, the SDKs take care of tasks such as signing requests (see below), managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> </note> <p>We recommend that you use the Amazon Web Services SDKs to make programmatic API calls to KMS.</p> <p>If you need to use FIPS 140-2 validated cryptographic modules when communicating with Amazon Web Services, use the FIPS endpoint in your preferred Amazon Web Services Region. For more information about the available FIPS endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/kms.html#kms_region\">Service endpoints</a> in the Key Management Service topic of the <i>Amazon Web Services General Reference</i>.</p> <p>All KMS API calls must be signed and be transmitted using Transport Layer Security (TLS). KMS recommends you always use the latest supported TLS version. Clients must also support cipher suites with Perfect Forward Secrecy (PFS) such as Ephemeral Diffie-Hellman (DHE) or Elliptic Curve Ephemeral Diffie-Hellman (ECDHE). Most modern systems such as Java 7 and later support these modes.</p> <p> <b>Signing Requests</b> </p> <p>Requests must be signed using an access key ID and a secret access key. We strongly recommend that you do not use your Amazon Web Services account root access key ID and secret access key for everyday work. You can use the access key ID and secret access key for an IAM user or you can use the Security Token Service (STS) to generate temporary security credentials and use those to sign requests. </p> <p>All KMS requests must be signed with <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4</a>.</p> <p> <b>Logging API Requests</b> </p> <p>KMS supports CloudTrail, a service that logs Amazon Web Services API calls and related events for your Amazon Web Services account and delivers them to an Amazon S3 bucket that you specify. By using the information collected by CloudTrail, you can determine what requests were made to KMS, who made the request, when it was made, and so on. To learn more about CloudTrail, including how to turn it on and find your log files, see the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/\">CloudTrail User Guide</a>.</p> <p> <b>Additional Resources</b> </p> <p>For more information about credentials and request signing, see the following:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html\">Amazon Web Services Security Credentials</a> - This topic provides general information about the types of credentials used to access Amazon Web Services.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html\">Temporary Security Credentials</a> - This section of the <i>IAM User Guide</i> describes how to create and use temporary security credentials.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 Signing Process</a> - This set of topics walks you through the process of signing a request using an access key ID and a secret access key.</p> </li> </ul> <p> <b>Commonly Used API Operations</b> </p> <p>Of the API operations discussed in this guide, the following will prove the most useful for most applications. You will likely perform operations other than these, such as creating keys and assigning policies, by using the console.</p> <ul> <li> <p> <a>Encrypt</a> </p> </li> <li> <p> <a>Decrypt</a> </p> </li> <li> <p> <a>GenerateDataKey</a> </p> </li> <li> <p> <a>GenerateDataKeyWithoutPlaintext</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsKeyManagementService);
  }
}(this, function(expect, AwsKeyManagementService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsKeyManagementService.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('cancelKeyDeletion', function() {
      it('should call cancelKeyDeletion successfully', function(done) {
        //uncomment below and update the code to test cancelKeyDeletion
        //instance.cancelKeyDeletion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCustomKeyStore', function() {
      it('should call connectCustomKeyStore successfully', function(done) {
        //uncomment below and update the code to test connectCustomKeyStore
        //instance.connectCustomKeyStore(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAlias', function() {
      it('should call createAlias successfully', function(done) {
        //uncomment below and update the code to test createAlias
        //instance.createAlias(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCustomKeyStore', function() {
      it('should call createCustomKeyStore successfully', function(done) {
        //uncomment below and update the code to test createCustomKeyStore
        //instance.createCustomKeyStore(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createGrant', function() {
      it('should call createGrant successfully', function(done) {
        //uncomment below and update the code to test createGrant
        //instance.createGrant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createKey', function() {
      it('should call createKey successfully', function(done) {
        //uncomment below and update the code to test createKey
        //instance.createKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('decrypt', function() {
      it('should call decrypt successfully', function(done) {
        //uncomment below and update the code to test decrypt
        //instance.decrypt(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAlias', function() {
      it('should call deleteAlias successfully', function(done) {
        //uncomment below and update the code to test deleteAlias
        //instance.deleteAlias(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCustomKeyStore', function() {
      it('should call deleteCustomKeyStore successfully', function(done) {
        //uncomment below and update the code to test deleteCustomKeyStore
        //instance.deleteCustomKeyStore(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteImportedKeyMaterial', function() {
      it('should call deleteImportedKeyMaterial successfully', function(done) {
        //uncomment below and update the code to test deleteImportedKeyMaterial
        //instance.deleteImportedKeyMaterial(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeCustomKeyStores', function() {
      it('should call describeCustomKeyStores successfully', function(done) {
        //uncomment below and update the code to test describeCustomKeyStores
        //instance.describeCustomKeyStores(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeKey', function() {
      it('should call describeKey successfully', function(done) {
        //uncomment below and update the code to test describeKey
        //instance.describeKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disableKey', function() {
      it('should call disableKey successfully', function(done) {
        //uncomment below and update the code to test disableKey
        //instance.disableKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disableKeyRotation', function() {
      it('should call disableKeyRotation successfully', function(done) {
        //uncomment below and update the code to test disableKeyRotation
        //instance.disableKeyRotation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disconnectCustomKeyStore', function() {
      it('should call disconnectCustomKeyStore successfully', function(done) {
        //uncomment below and update the code to test disconnectCustomKeyStore
        //instance.disconnectCustomKeyStore(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('enableKey', function() {
      it('should call enableKey successfully', function(done) {
        //uncomment below and update the code to test enableKey
        //instance.enableKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('enableKeyRotation', function() {
      it('should call enableKeyRotation successfully', function(done) {
        //uncomment below and update the code to test enableKeyRotation
        //instance.enableKeyRotation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('encrypt', function() {
      it('should call encrypt successfully', function(done) {
        //uncomment below and update the code to test encrypt
        //instance.encrypt(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('generateDataKey', function() {
      it('should call generateDataKey successfully', function(done) {
        //uncomment below and update the code to test generateDataKey
        //instance.generateDataKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('generateDataKeyPair', function() {
      it('should call generateDataKeyPair successfully', function(done) {
        //uncomment below and update the code to test generateDataKeyPair
        //instance.generateDataKeyPair(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('generateDataKeyPairWithoutPlaintext', function() {
      it('should call generateDataKeyPairWithoutPlaintext successfully', function(done) {
        //uncomment below and update the code to test generateDataKeyPairWithoutPlaintext
        //instance.generateDataKeyPairWithoutPlaintext(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('generateDataKeyWithoutPlaintext', function() {
      it('should call generateDataKeyWithoutPlaintext successfully', function(done) {
        //uncomment below and update the code to test generateDataKeyWithoutPlaintext
        //instance.generateDataKeyWithoutPlaintext(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('generateMac', function() {
      it('should call generateMac successfully', function(done) {
        //uncomment below and update the code to test generateMac
        //instance.generateMac(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('generateRandom', function() {
      it('should call generateRandom successfully', function(done) {
        //uncomment below and update the code to test generateRandom
        //instance.generateRandom(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getKeyPolicy', function() {
      it('should call getKeyPolicy successfully', function(done) {
        //uncomment below and update the code to test getKeyPolicy
        //instance.getKeyPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getKeyRotationStatus', function() {
      it('should call getKeyRotationStatus successfully', function(done) {
        //uncomment below and update the code to test getKeyRotationStatus
        //instance.getKeyRotationStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getParametersForImport', function() {
      it('should call getParametersForImport successfully', function(done) {
        //uncomment below and update the code to test getParametersForImport
        //instance.getParametersForImport(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPublicKey', function() {
      it('should call getPublicKey successfully', function(done) {
        //uncomment below and update the code to test getPublicKey
        //instance.getPublicKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('importKeyMaterial', function() {
      it('should call importKeyMaterial successfully', function(done) {
        //uncomment below and update the code to test importKeyMaterial
        //instance.importKeyMaterial(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAliases', function() {
      it('should call listAliases successfully', function(done) {
        //uncomment below and update the code to test listAliases
        //instance.listAliases(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listGrants', function() {
      it('should call listGrants successfully', function(done) {
        //uncomment below and update the code to test listGrants
        //instance.listGrants(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listKeyPolicies', function() {
      it('should call listKeyPolicies successfully', function(done) {
        //uncomment below and update the code to test listKeyPolicies
        //instance.listKeyPolicies(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listKeys', function() {
      it('should call listKeys successfully', function(done) {
        //uncomment below and update the code to test listKeys
        //instance.listKeys(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listResourceTags', function() {
      it('should call listResourceTags successfully', function(done) {
        //uncomment below and update the code to test listResourceTags
        //instance.listResourceTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRetirableGrants', function() {
      it('should call listRetirableGrants successfully', function(done) {
        //uncomment below and update the code to test listRetirableGrants
        //instance.listRetirableGrants(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putKeyPolicy', function() {
      it('should call putKeyPolicy successfully', function(done) {
        //uncomment below and update the code to test putKeyPolicy
        //instance.putKeyPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reEncrypt', function() {
      it('should call reEncrypt successfully', function(done) {
        //uncomment below and update the code to test reEncrypt
        //instance.reEncrypt(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replicateKey', function() {
      it('should call replicateKey successfully', function(done) {
        //uncomment below and update the code to test replicateKey
        //instance.replicateKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('retireGrant', function() {
      it('should call retireGrant successfully', function(done) {
        //uncomment below and update the code to test retireGrant
        //instance.retireGrant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('revokeGrant', function() {
      it('should call revokeGrant successfully', function(done) {
        //uncomment below and update the code to test revokeGrant
        //instance.revokeGrant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('scheduleKeyDeletion', function() {
      it('should call scheduleKeyDeletion successfully', function(done) {
        //uncomment below and update the code to test scheduleKeyDeletion
        //instance.scheduleKeyDeletion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sign', function() {
      it('should call sign successfully', function(done) {
        //uncomment below and update the code to test sign
        //instance.sign(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAlias', function() {
      it('should call updateAlias successfully', function(done) {
        //uncomment below and update the code to test updateAlias
        //instance.updateAlias(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCustomKeyStore', function() {
      it('should call updateCustomKeyStore successfully', function(done) {
        //uncomment below and update the code to test updateCustomKeyStore
        //instance.updateCustomKeyStore(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateKeyDescription', function() {
      it('should call updateKeyDescription successfully', function(done) {
        //uncomment below and update the code to test updateKeyDescription
        //instance.updateKeyDescription(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updatePrimaryRegion', function() {
      it('should call updatePrimaryRegion successfully', function(done) {
        //uncomment below and update the code to test updatePrimaryRegion
        //instance.updatePrimaryRegion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('verify', function() {
      it('should call verify successfully', function(done) {
        //uncomment below and update the code to test verify
        //instance.verify(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('verifyMac', function() {
      it('should call verifyMac successfully', function(done) {
        //uncomment below and update the code to test verifyMac
        //instance.verifyMac(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
