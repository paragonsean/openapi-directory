/*
 * AWS Key Management Service
 * <fullname>Key Management Service</fullname> <p>Key Management Service (KMS) is an encryption and key management web service. This guide describes the KMS operations that you can call programmatically. For general information about KMS, see the <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/\"> <i>Key Management Service Developer Guide</i> </a>.</p> <note> <p>KMS has replaced the term <i>customer master key (CMK)</i> with <i>KMS key</i> and <i>KMS key</i>. The concept has not changed. To prevent breaking changes, KMS is keeping some variations of this term.</p> <p>Amazon Web Services provides SDKs that consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .Net, macOS, Android, etc.). The SDKs provide a convenient way to create programmatic access to KMS and other Amazon Web Services services. For example, the SDKs take care of tasks such as signing requests (see below), managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> </note> <p>We recommend that you use the Amazon Web Services SDKs to make programmatic API calls to KMS.</p> <p>If you need to use FIPS 140-2 validated cryptographic modules when communicating with Amazon Web Services, use the FIPS endpoint in your preferred Amazon Web Services Region. For more information about the available FIPS endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/kms.html#kms_region\">Service endpoints</a> in the Key Management Service topic of the <i>Amazon Web Services General Reference</i>.</p> <p>All KMS API calls must be signed and be transmitted using Transport Layer Security (TLS). KMS recommends you always use the latest supported TLS version. Clients must also support cipher suites with Perfect Forward Secrecy (PFS) such as Ephemeral Diffie-Hellman (DHE) or Elliptic Curve Ephemeral Diffie-Hellman (ECDHE). Most modern systems such as Java 7 and later support these modes.</p> <p> <b>Signing Requests</b> </p> <p>Requests must be signed using an access key ID and a secret access key. We strongly recommend that you do not use your Amazon Web Services account root access key ID and secret access key for everyday work. You can use the access key ID and secret access key for an IAM user or you can use the Security Token Service (STS) to generate temporary security credentials and use those to sign requests. </p> <p>All KMS requests must be signed with <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4</a>.</p> <p> <b>Logging API Requests</b> </p> <p>KMS supports CloudTrail, a service that logs Amazon Web Services API calls and related events for your Amazon Web Services account and delivers them to an Amazon S3 bucket that you specify. By using the information collected by CloudTrail, you can determine what requests were made to KMS, who made the request, when it was made, and so on. To learn more about CloudTrail, including how to turn it on and find your log files, see the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/\">CloudTrail User Guide</a>.</p> <p> <b>Additional Resources</b> </p> <p>For more information about credentials and request signing, see the following:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html\">Amazon Web Services Security Credentials</a> - This topic provides general information about the types of credentials used to access Amazon Web Services.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html\">Temporary Security Credentials</a> - This section of the <i>IAM User Guide</i> describes how to create and use temporary security credentials.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 Signing Process</a> - This set of topics walks you through the process of signing a request using an access key ID and a secret access key.</p> </li> </ul> <p> <b>Commonly Used API Operations</b> </p> <p>Of the API operations discussed in this guide, the following will prove the most useful for most applications. You will likely perform operations other than these, such as creating keys and assigning policies, by using the console.</p> <ul> <li> <p> <a>Encrypt</a> </p> </li> <li> <p> <a>Decrypt</a> </p> </li> <li> <p> <a>GenerateDataKey</a> </p> </li> <li> <p> <a>GenerateDataKeyWithoutPlaintext</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CustomerMasterKeySpec;
import org.openapitools.client.model.ExpirationModelType;
import org.openapitools.client.model.KeyManagerType;
import org.openapitools.client.model.KeyMetadataMultiRegionConfiguration;
import org.openapitools.client.model.KeyMetadataXksKeyConfiguration;
import org.openapitools.client.model.KeySpec;
import org.openapitools.client.model.KeyState;
import org.openapitools.client.model.KeyUsageType;
import org.openapitools.client.model.OriginType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Contains metadata about a KMS key.&lt;/p&gt; &lt;p&gt;This data type is used as a response element for the &lt;a&gt;CreateKey&lt;/a&gt;, &lt;a&gt;DescribeKey&lt;/a&gt;, and &lt;a&gt;ReplicateKey&lt;/a&gt; operations.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:30.384853-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class KeyMetadata {
  public static final String SERIALIZED_NAME_AW_S_ACCOUNT_ID = "AWSAccountId";
  @SerializedName(SERIALIZED_NAME_AW_S_ACCOUNT_ID)
  private String awSAccountId;

  public static final String SERIALIZED_NAME_KEY_ID = "KeyId";
  @SerializedName(SERIALIZED_NAME_KEY_ID)
  private String keyId;

  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_CREATION_DATE = "CreationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_ENABLED = "Enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_KEY_USAGE = "KeyUsage";
  @SerializedName(SERIALIZED_NAME_KEY_USAGE)
  private KeyUsageType keyUsage;

  public static final String SERIALIZED_NAME_KEY_STATE = "KeyState";
  @SerializedName(SERIALIZED_NAME_KEY_STATE)
  private KeyState keyState;

  public static final String SERIALIZED_NAME_DELETION_DATE = "DeletionDate";
  @SerializedName(SERIALIZED_NAME_DELETION_DATE)
  private OffsetDateTime deletionDate;

  public static final String SERIALIZED_NAME_VALID_TO = "ValidTo";
  @SerializedName(SERIALIZED_NAME_VALID_TO)
  private OffsetDateTime validTo;

  public static final String SERIALIZED_NAME_ORIGIN = "Origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private OriginType origin;

  public static final String SERIALIZED_NAME_CUSTOM_KEY_STORE_ID = "CustomKeyStoreId";
  @SerializedName(SERIALIZED_NAME_CUSTOM_KEY_STORE_ID)
  private String customKeyStoreId;

  public static final String SERIALIZED_NAME_CLOUD_HSM_CLUSTER_ID = "CloudHsmClusterId";
  @SerializedName(SERIALIZED_NAME_CLOUD_HSM_CLUSTER_ID)
  private String cloudHsmClusterId;

  public static final String SERIALIZED_NAME_EXPIRATION_MODEL = "ExpirationModel";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_MODEL)
  private ExpirationModelType expirationModel;

  public static final String SERIALIZED_NAME_KEY_MANAGER = "KeyManager";
  @SerializedName(SERIALIZED_NAME_KEY_MANAGER)
  private KeyManagerType keyManager;

  public static final String SERIALIZED_NAME_CUSTOMER_MASTER_KEY_SPEC = "CustomerMasterKeySpec";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_MASTER_KEY_SPEC)
  private CustomerMasterKeySpec customerMasterKeySpec;

  public static final String SERIALIZED_NAME_KEY_SPEC = "KeySpec";
  @SerializedName(SERIALIZED_NAME_KEY_SPEC)
  private KeySpec keySpec;

  public static final String SERIALIZED_NAME_ENCRYPTION_ALGORITHMS = "EncryptionAlgorithms";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_ALGORITHMS)
  private List encryptionAlgorithms;

  public static final String SERIALIZED_NAME_SIGNING_ALGORITHMS = "SigningAlgorithms";
  @SerializedName(SERIALIZED_NAME_SIGNING_ALGORITHMS)
  private List signingAlgorithms;

  public static final String SERIALIZED_NAME_MULTI_REGION = "MultiRegion";
  @SerializedName(SERIALIZED_NAME_MULTI_REGION)
  private Boolean multiRegion;

  public static final String SERIALIZED_NAME_MULTI_REGION_CONFIGURATION = "MultiRegionConfiguration";
  @SerializedName(SERIALIZED_NAME_MULTI_REGION_CONFIGURATION)
  private KeyMetadataMultiRegionConfiguration multiRegionConfiguration;

  public static final String SERIALIZED_NAME_PENDING_DELETION_WINDOW_IN_DAYS = "PendingDeletionWindowInDays";
  @SerializedName(SERIALIZED_NAME_PENDING_DELETION_WINDOW_IN_DAYS)
  private Integer pendingDeletionWindowInDays;

  public static final String SERIALIZED_NAME_MAC_ALGORITHMS = "MacAlgorithms";
  @SerializedName(SERIALIZED_NAME_MAC_ALGORITHMS)
  private List macAlgorithms;

  public static final String SERIALIZED_NAME_XKS_KEY_CONFIGURATION = "XksKeyConfiguration";
  @SerializedName(SERIALIZED_NAME_XKS_KEY_CONFIGURATION)
  private KeyMetadataXksKeyConfiguration xksKeyConfiguration;

  public KeyMetadata() {
  }

  public KeyMetadata awSAccountId(String awSAccountId) {
    this.awSAccountId = awSAccountId;
    return this;
  }

  /**
   * Get awSAccountId
   * @return awSAccountId
   */
  @javax.annotation.Nullable
  public String getAwSAccountId() {
    return awSAccountId;
  }

  public void setAwSAccountId(String awSAccountId) {
    this.awSAccountId = awSAccountId;
  }


  public KeyMetadata keyId(String keyId) {
    this.keyId = keyId;
    return this;
  }

  /**
   * Get keyId
   * @return keyId
   */
  @javax.annotation.Nonnull
  public String getKeyId() {
    return keyId;
  }

  public void setKeyId(String keyId) {
    this.keyId = keyId;
  }


  public KeyMetadata arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public KeyMetadata creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public KeyMetadata enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public KeyMetadata description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public KeyMetadata keyUsage(KeyUsageType keyUsage) {
    this.keyUsage = keyUsage;
    return this;
  }

  /**
   * Get keyUsage
   * @return keyUsage
   */
  @javax.annotation.Nullable
  public KeyUsageType getKeyUsage() {
    return keyUsage;
  }

  public void setKeyUsage(KeyUsageType keyUsage) {
    this.keyUsage = keyUsage;
  }


  public KeyMetadata keyState(KeyState keyState) {
    this.keyState = keyState;
    return this;
  }

  /**
   * Get keyState
   * @return keyState
   */
  @javax.annotation.Nullable
  public KeyState getKeyState() {
    return keyState;
  }

  public void setKeyState(KeyState keyState) {
    this.keyState = keyState;
  }


  public KeyMetadata deletionDate(OffsetDateTime deletionDate) {
    this.deletionDate = deletionDate;
    return this;
  }

  /**
   * Get deletionDate
   * @return deletionDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeletionDate() {
    return deletionDate;
  }

  public void setDeletionDate(OffsetDateTime deletionDate) {
    this.deletionDate = deletionDate;
  }


  public KeyMetadata validTo(OffsetDateTime validTo) {
    this.validTo = validTo;
    return this;
  }

  /**
   * Get validTo
   * @return validTo
   */
  @javax.annotation.Nullable
  public OffsetDateTime getValidTo() {
    return validTo;
  }

  public void setValidTo(OffsetDateTime validTo) {
    this.validTo = validTo;
  }


  public KeyMetadata origin(OriginType origin) {
    this.origin = origin;
    return this;
  }

  /**
   * Get origin
   * @return origin
   */
  @javax.annotation.Nullable
  public OriginType getOrigin() {
    return origin;
  }

  public void setOrigin(OriginType origin) {
    this.origin = origin;
  }


  public KeyMetadata customKeyStoreId(String customKeyStoreId) {
    this.customKeyStoreId = customKeyStoreId;
    return this;
  }

  /**
   * Get customKeyStoreId
   * @return customKeyStoreId
   */
  @javax.annotation.Nullable
  public String getCustomKeyStoreId() {
    return customKeyStoreId;
  }

  public void setCustomKeyStoreId(String customKeyStoreId) {
    this.customKeyStoreId = customKeyStoreId;
  }


  public KeyMetadata cloudHsmClusterId(String cloudHsmClusterId) {
    this.cloudHsmClusterId = cloudHsmClusterId;
    return this;
  }

  /**
   * Get cloudHsmClusterId
   * @return cloudHsmClusterId
   */
  @javax.annotation.Nullable
  public String getCloudHsmClusterId() {
    return cloudHsmClusterId;
  }

  public void setCloudHsmClusterId(String cloudHsmClusterId) {
    this.cloudHsmClusterId = cloudHsmClusterId;
  }


  public KeyMetadata expirationModel(ExpirationModelType expirationModel) {
    this.expirationModel = expirationModel;
    return this;
  }

  /**
   * Get expirationModel
   * @return expirationModel
   */
  @javax.annotation.Nullable
  public ExpirationModelType getExpirationModel() {
    return expirationModel;
  }

  public void setExpirationModel(ExpirationModelType expirationModel) {
    this.expirationModel = expirationModel;
  }


  public KeyMetadata keyManager(KeyManagerType keyManager) {
    this.keyManager = keyManager;
    return this;
  }

  /**
   * Get keyManager
   * @return keyManager
   */
  @javax.annotation.Nullable
  public KeyManagerType getKeyManager() {
    return keyManager;
  }

  public void setKeyManager(KeyManagerType keyManager) {
    this.keyManager = keyManager;
  }


  public KeyMetadata customerMasterKeySpec(CustomerMasterKeySpec customerMasterKeySpec) {
    this.customerMasterKeySpec = customerMasterKeySpec;
    return this;
  }

  /**
   * Get customerMasterKeySpec
   * @return customerMasterKeySpec
   */
  @javax.annotation.Nullable
  public CustomerMasterKeySpec getCustomerMasterKeySpec() {
    return customerMasterKeySpec;
  }

  public void setCustomerMasterKeySpec(CustomerMasterKeySpec customerMasterKeySpec) {
    this.customerMasterKeySpec = customerMasterKeySpec;
  }


  public KeyMetadata keySpec(KeySpec keySpec) {
    this.keySpec = keySpec;
    return this;
  }

  /**
   * Get keySpec
   * @return keySpec
   */
  @javax.annotation.Nullable
  public KeySpec getKeySpec() {
    return keySpec;
  }

  public void setKeySpec(KeySpec keySpec) {
    this.keySpec = keySpec;
  }


  public KeyMetadata encryptionAlgorithms(List encryptionAlgorithms) {
    this.encryptionAlgorithms = encryptionAlgorithms;
    return this;
  }

  /**
   * Get encryptionAlgorithms
   * @return encryptionAlgorithms
   */
  @javax.annotation.Nullable
  public List getEncryptionAlgorithms() {
    return encryptionAlgorithms;
  }

  public void setEncryptionAlgorithms(List encryptionAlgorithms) {
    this.encryptionAlgorithms = encryptionAlgorithms;
  }


  public KeyMetadata signingAlgorithms(List signingAlgorithms) {
    this.signingAlgorithms = signingAlgorithms;
    return this;
  }

  /**
   * Get signingAlgorithms
   * @return signingAlgorithms
   */
  @javax.annotation.Nullable
  public List getSigningAlgorithms() {
    return signingAlgorithms;
  }

  public void setSigningAlgorithms(List signingAlgorithms) {
    this.signingAlgorithms = signingAlgorithms;
  }


  public KeyMetadata multiRegion(Boolean multiRegion) {
    this.multiRegion = multiRegion;
    return this;
  }

  /**
   * Get multiRegion
   * @return multiRegion
   */
  @javax.annotation.Nullable
  public Boolean getMultiRegion() {
    return multiRegion;
  }

  public void setMultiRegion(Boolean multiRegion) {
    this.multiRegion = multiRegion;
  }


  public KeyMetadata multiRegionConfiguration(KeyMetadataMultiRegionConfiguration multiRegionConfiguration) {
    this.multiRegionConfiguration = multiRegionConfiguration;
    return this;
  }

  /**
   * Get multiRegionConfiguration
   * @return multiRegionConfiguration
   */
  @javax.annotation.Nullable
  public KeyMetadataMultiRegionConfiguration getMultiRegionConfiguration() {
    return multiRegionConfiguration;
  }

  public void setMultiRegionConfiguration(KeyMetadataMultiRegionConfiguration multiRegionConfiguration) {
    this.multiRegionConfiguration = multiRegionConfiguration;
  }


  public KeyMetadata pendingDeletionWindowInDays(Integer pendingDeletionWindowInDays) {
    this.pendingDeletionWindowInDays = pendingDeletionWindowInDays;
    return this;
  }

  /**
   * Get pendingDeletionWindowInDays
   * @return pendingDeletionWindowInDays
   */
  @javax.annotation.Nullable
  public Integer getPendingDeletionWindowInDays() {
    return pendingDeletionWindowInDays;
  }

  public void setPendingDeletionWindowInDays(Integer pendingDeletionWindowInDays) {
    this.pendingDeletionWindowInDays = pendingDeletionWindowInDays;
  }


  public KeyMetadata macAlgorithms(List macAlgorithms) {
    this.macAlgorithms = macAlgorithms;
    return this;
  }

  /**
   * Get macAlgorithms
   * @return macAlgorithms
   */
  @javax.annotation.Nullable
  public List getMacAlgorithms() {
    return macAlgorithms;
  }

  public void setMacAlgorithms(List macAlgorithms) {
    this.macAlgorithms = macAlgorithms;
  }


  public KeyMetadata xksKeyConfiguration(KeyMetadataXksKeyConfiguration xksKeyConfiguration) {
    this.xksKeyConfiguration = xksKeyConfiguration;
    return this;
  }

  /**
   * Get xksKeyConfiguration
   * @return xksKeyConfiguration
   */
  @javax.annotation.Nullable
  public KeyMetadataXksKeyConfiguration getXksKeyConfiguration() {
    return xksKeyConfiguration;
  }

  public void setXksKeyConfiguration(KeyMetadataXksKeyConfiguration xksKeyConfiguration) {
    this.xksKeyConfiguration = xksKeyConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeyMetadata keyMetadata = (KeyMetadata) o;
    return Objects.equals(this.awSAccountId, keyMetadata.awSAccountId) &&
        Objects.equals(this.keyId, keyMetadata.keyId) &&
        Objects.equals(this.arn, keyMetadata.arn) &&
        Objects.equals(this.creationDate, keyMetadata.creationDate) &&
        Objects.equals(this.enabled, keyMetadata.enabled) &&
        Objects.equals(this.description, keyMetadata.description) &&
        Objects.equals(this.keyUsage, keyMetadata.keyUsage) &&
        Objects.equals(this.keyState, keyMetadata.keyState) &&
        Objects.equals(this.deletionDate, keyMetadata.deletionDate) &&
        Objects.equals(this.validTo, keyMetadata.validTo) &&
        Objects.equals(this.origin, keyMetadata.origin) &&
        Objects.equals(this.customKeyStoreId, keyMetadata.customKeyStoreId) &&
        Objects.equals(this.cloudHsmClusterId, keyMetadata.cloudHsmClusterId) &&
        Objects.equals(this.expirationModel, keyMetadata.expirationModel) &&
        Objects.equals(this.keyManager, keyMetadata.keyManager) &&
        Objects.equals(this.customerMasterKeySpec, keyMetadata.customerMasterKeySpec) &&
        Objects.equals(this.keySpec, keyMetadata.keySpec) &&
        Objects.equals(this.encryptionAlgorithms, keyMetadata.encryptionAlgorithms) &&
        Objects.equals(this.signingAlgorithms, keyMetadata.signingAlgorithms) &&
        Objects.equals(this.multiRegion, keyMetadata.multiRegion) &&
        Objects.equals(this.multiRegionConfiguration, keyMetadata.multiRegionConfiguration) &&
        Objects.equals(this.pendingDeletionWindowInDays, keyMetadata.pendingDeletionWindowInDays) &&
        Objects.equals(this.macAlgorithms, keyMetadata.macAlgorithms) &&
        Objects.equals(this.xksKeyConfiguration, keyMetadata.xksKeyConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(awSAccountId, keyId, arn, creationDate, enabled, description, keyUsage, keyState, deletionDate, validTo, origin, customKeyStoreId, cloudHsmClusterId, expirationModel, keyManager, customerMasterKeySpec, keySpec, encryptionAlgorithms, signingAlgorithms, multiRegion, multiRegionConfiguration, pendingDeletionWindowInDays, macAlgorithms, xksKeyConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeyMetadata {\n");
    sb.append("    awSAccountId: ").append(toIndentedString(awSAccountId)).append("\n");
    sb.append("    keyId: ").append(toIndentedString(keyId)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    keyUsage: ").append(toIndentedString(keyUsage)).append("\n");
    sb.append("    keyState: ").append(toIndentedString(keyState)).append("\n");
    sb.append("    deletionDate: ").append(toIndentedString(deletionDate)).append("\n");
    sb.append("    validTo: ").append(toIndentedString(validTo)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    customKeyStoreId: ").append(toIndentedString(customKeyStoreId)).append("\n");
    sb.append("    cloudHsmClusterId: ").append(toIndentedString(cloudHsmClusterId)).append("\n");
    sb.append("    expirationModel: ").append(toIndentedString(expirationModel)).append("\n");
    sb.append("    keyManager: ").append(toIndentedString(keyManager)).append("\n");
    sb.append("    customerMasterKeySpec: ").append(toIndentedString(customerMasterKeySpec)).append("\n");
    sb.append("    keySpec: ").append(toIndentedString(keySpec)).append("\n");
    sb.append("    encryptionAlgorithms: ").append(toIndentedString(encryptionAlgorithms)).append("\n");
    sb.append("    signingAlgorithms: ").append(toIndentedString(signingAlgorithms)).append("\n");
    sb.append("    multiRegion: ").append(toIndentedString(multiRegion)).append("\n");
    sb.append("    multiRegionConfiguration: ").append(toIndentedString(multiRegionConfiguration)).append("\n");
    sb.append("    pendingDeletionWindowInDays: ").append(toIndentedString(pendingDeletionWindowInDays)).append("\n");
    sb.append("    macAlgorithms: ").append(toIndentedString(macAlgorithms)).append("\n");
    sb.append("    xksKeyConfiguration: ").append(toIndentedString(xksKeyConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AWSAccountId");
    openapiFields.add("KeyId");
    openapiFields.add("Arn");
    openapiFields.add("CreationDate");
    openapiFields.add("Enabled");
    openapiFields.add("Description");
    openapiFields.add("KeyUsage");
    openapiFields.add("KeyState");
    openapiFields.add("DeletionDate");
    openapiFields.add("ValidTo");
    openapiFields.add("Origin");
    openapiFields.add("CustomKeyStoreId");
    openapiFields.add("CloudHsmClusterId");
    openapiFields.add("ExpirationModel");
    openapiFields.add("KeyManager");
    openapiFields.add("CustomerMasterKeySpec");
    openapiFields.add("KeySpec");
    openapiFields.add("EncryptionAlgorithms");
    openapiFields.add("SigningAlgorithms");
    openapiFields.add("MultiRegion");
    openapiFields.add("MultiRegionConfiguration");
    openapiFields.add("PendingDeletionWindowInDays");
    openapiFields.add("MacAlgorithms");
    openapiFields.add("XksKeyConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("KeyId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to KeyMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KeyMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeyMetadata is not found in the empty JSON string", KeyMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!KeyMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KeyMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : KeyMetadata.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AWSAccountId`
      if (jsonObj.get("AWSAccountId") != null && !jsonObj.get("AWSAccountId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AWSAccountId"));
      }
      // validate the required field `KeyId`
      String.validateJsonElement(jsonObj.get("KeyId"));
      // validate the optional field `Arn`
      if (jsonObj.get("Arn") != null && !jsonObj.get("Arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Arn"));
      }
      // validate the optional field `CreationDate`
      if (jsonObj.get("CreationDate") != null && !jsonObj.get("CreationDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationDate"));
      }
      // validate the optional field `Enabled`
      if (jsonObj.get("Enabled") != null && !jsonObj.get("Enabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Enabled"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `KeyUsage`
      if (jsonObj.get("KeyUsage") != null && !jsonObj.get("KeyUsage").isJsonNull()) {
        KeyUsageType.validateJsonElement(jsonObj.get("KeyUsage"));
      }
      // validate the optional field `KeyState`
      if (jsonObj.get("KeyState") != null && !jsonObj.get("KeyState").isJsonNull()) {
        KeyState.validateJsonElement(jsonObj.get("KeyState"));
      }
      // validate the optional field `DeletionDate`
      if (jsonObj.get("DeletionDate") != null && !jsonObj.get("DeletionDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("DeletionDate"));
      }
      // validate the optional field `ValidTo`
      if (jsonObj.get("ValidTo") != null && !jsonObj.get("ValidTo").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ValidTo"));
      }
      // validate the optional field `Origin`
      if (jsonObj.get("Origin") != null && !jsonObj.get("Origin").isJsonNull()) {
        OriginType.validateJsonElement(jsonObj.get("Origin"));
      }
      // validate the optional field `CustomKeyStoreId`
      if (jsonObj.get("CustomKeyStoreId") != null && !jsonObj.get("CustomKeyStoreId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CustomKeyStoreId"));
      }
      // validate the optional field `CloudHsmClusterId`
      if (jsonObj.get("CloudHsmClusterId") != null && !jsonObj.get("CloudHsmClusterId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CloudHsmClusterId"));
      }
      // validate the optional field `ExpirationModel`
      if (jsonObj.get("ExpirationModel") != null && !jsonObj.get("ExpirationModel").isJsonNull()) {
        ExpirationModelType.validateJsonElement(jsonObj.get("ExpirationModel"));
      }
      // validate the optional field `KeyManager`
      if (jsonObj.get("KeyManager") != null && !jsonObj.get("KeyManager").isJsonNull()) {
        KeyManagerType.validateJsonElement(jsonObj.get("KeyManager"));
      }
      // validate the optional field `CustomerMasterKeySpec`
      if (jsonObj.get("CustomerMasterKeySpec") != null && !jsonObj.get("CustomerMasterKeySpec").isJsonNull()) {
        CustomerMasterKeySpec.validateJsonElement(jsonObj.get("CustomerMasterKeySpec"));
      }
      // validate the optional field `KeySpec`
      if (jsonObj.get("KeySpec") != null && !jsonObj.get("KeySpec").isJsonNull()) {
        KeySpec.validateJsonElement(jsonObj.get("KeySpec"));
      }
      // validate the optional field `EncryptionAlgorithms`
      if (jsonObj.get("EncryptionAlgorithms") != null && !jsonObj.get("EncryptionAlgorithms").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("EncryptionAlgorithms"));
      }
      // validate the optional field `SigningAlgorithms`
      if (jsonObj.get("SigningAlgorithms") != null && !jsonObj.get("SigningAlgorithms").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SigningAlgorithms"));
      }
      // validate the optional field `MultiRegion`
      if (jsonObj.get("MultiRegion") != null && !jsonObj.get("MultiRegion").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("MultiRegion"));
      }
      // validate the optional field `MultiRegionConfiguration`
      if (jsonObj.get("MultiRegionConfiguration") != null && !jsonObj.get("MultiRegionConfiguration").isJsonNull()) {
        KeyMetadataMultiRegionConfiguration.validateJsonElement(jsonObj.get("MultiRegionConfiguration"));
      }
      // validate the optional field `PendingDeletionWindowInDays`
      if (jsonObj.get("PendingDeletionWindowInDays") != null && !jsonObj.get("PendingDeletionWindowInDays").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("PendingDeletionWindowInDays"));
      }
      // validate the optional field `MacAlgorithms`
      if (jsonObj.get("MacAlgorithms") != null && !jsonObj.get("MacAlgorithms").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("MacAlgorithms"));
      }
      // validate the optional field `XksKeyConfiguration`
      if (jsonObj.get("XksKeyConfiguration") != null && !jsonObj.get("XksKeyConfiguration").isJsonNull()) {
        KeyMetadataXksKeyConfiguration.validateJsonElement(jsonObj.get("XksKeyConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeyMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeyMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeyMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeyMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<KeyMetadata>() {
           @Override
           public void write(JsonWriter out, KeyMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KeyMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of KeyMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of KeyMetadata
   * @throws IOException if the JSON string is invalid with respect to KeyMetadata
   */
  public static KeyMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeyMetadata.class);
  }

  /**
   * Convert an instance of KeyMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

