/*
 * AWS Key Management Service
 * <fullname>Key Management Service</fullname> <p>Key Management Service (KMS) is an encryption and key management web service. This guide describes the KMS operations that you can call programmatically. For general information about KMS, see the <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/\"> <i>Key Management Service Developer Guide</i> </a>.</p> <note> <p>KMS has replaced the term <i>customer master key (CMK)</i> with <i>KMS key</i> and <i>KMS key</i>. The concept has not changed. To prevent breaking changes, KMS is keeping some variations of this term.</p> <p>Amazon Web Services provides SDKs that consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .Net, macOS, Android, etc.). The SDKs provide a convenient way to create programmatic access to KMS and other Amazon Web Services services. For example, the SDKs take care of tasks such as signing requests (see below), managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> </note> <p>We recommend that you use the Amazon Web Services SDKs to make programmatic API calls to KMS.</p> <p>If you need to use FIPS 140-2 validated cryptographic modules when communicating with Amazon Web Services, use the FIPS endpoint in your preferred Amazon Web Services Region. For more information about the available FIPS endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/kms.html#kms_region\">Service endpoints</a> in the Key Management Service topic of the <i>Amazon Web Services General Reference</i>.</p> <p>All KMS API calls must be signed and be transmitted using Transport Layer Security (TLS). KMS recommends you always use the latest supported TLS version. Clients must also support cipher suites with Perfect Forward Secrecy (PFS) such as Ephemeral Diffie-Hellman (DHE) or Elliptic Curve Ephemeral Diffie-Hellman (ECDHE). Most modern systems such as Java 7 and later support these modes.</p> <p> <b>Signing Requests</b> </p> <p>Requests must be signed using an access key ID and a secret access key. We strongly recommend that you do not use your Amazon Web Services account root access key ID and secret access key for everyday work. You can use the access key ID and secret access key for an IAM user or you can use the Security Token Service (STS) to generate temporary security credentials and use those to sign requests. </p> <p>All KMS requests must be signed with <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4</a>.</p> <p> <b>Logging API Requests</b> </p> <p>KMS supports CloudTrail, a service that logs Amazon Web Services API calls and related events for your Amazon Web Services account and delivers them to an Amazon S3 bucket that you specify. By using the information collected by CloudTrail, you can determine what requests were made to KMS, who made the request, when it was made, and so on. To learn more about CloudTrail, including how to turn it on and find your log files, see the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/\">CloudTrail User Guide</a>.</p> <p> <b>Additional Resources</b> </p> <p>For more information about credentials and request signing, see the following:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html\">Amazon Web Services Security Credentials</a> - This topic provides general information about the types of credentials used to access Amazon Web Services.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html\">Temporary Security Credentials</a> - This section of the <i>IAM User Guide</i> describes how to create and use temporary security credentials.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 Signing Process</a> - This set of topics walks you through the process of signing a request using an access key ID and a secret access key.</p> </li> </ul> <p> <b>Commonly Used API Operations</b> </p> <p>Of the API operations discussed in this guide, the following will prove the most useful for most applications. You will likely perform operations other than these, such as creating keys and assigning policies, by using the console.</p> <ul> <li> <p> <a>Encrypt</a> </p> </li> <li> <p> <a>Decrypt</a> </p> </li> <li> <p> <a>GenerateDataKey</a> </p> </li> <li> <p> <a>GenerateDataKeyWithoutPlaintext</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.XksProxyConnectivityType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Detailed information about the external key store proxy (XKS proxy). Your external key store proxy translates KMS requests into a format that your external key manager can understand. These fields appear in a &lt;a&gt;DescribeCustomKeyStores&lt;/a&gt; response only when the &lt;code&gt;CustomKeyStoreType&lt;/code&gt; is &lt;code&gt;EXTERNAL_KEY_STORE&lt;/code&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:30.384853-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class XksProxyConfigurationType {
  public static final String SERIALIZED_NAME_CONNECTIVITY = "Connectivity";
  @SerializedName(SERIALIZED_NAME_CONNECTIVITY)
  private XksProxyConnectivityType connectivity;

  public static final String SERIALIZED_NAME_ACCESS_KEY_ID = "AccessKeyId";
  @SerializedName(SERIALIZED_NAME_ACCESS_KEY_ID)
  private String accessKeyId;

  public static final String SERIALIZED_NAME_URI_ENDPOINT = "UriEndpoint";
  @SerializedName(SERIALIZED_NAME_URI_ENDPOINT)
  private String uriEndpoint;

  public static final String SERIALIZED_NAME_URI_PATH = "UriPath";
  @SerializedName(SERIALIZED_NAME_URI_PATH)
  private String uriPath;

  public static final String SERIALIZED_NAME_VPC_ENDPOINT_SERVICE_NAME = "VpcEndpointServiceName";
  @SerializedName(SERIALIZED_NAME_VPC_ENDPOINT_SERVICE_NAME)
  private String vpcEndpointServiceName;

  public XksProxyConfigurationType() {
  }

  public XksProxyConfigurationType connectivity(XksProxyConnectivityType connectivity) {
    this.connectivity = connectivity;
    return this;
  }

  /**
   * Get connectivity
   * @return connectivity
   */
  @javax.annotation.Nullable
  public XksProxyConnectivityType getConnectivity() {
    return connectivity;
  }

  public void setConnectivity(XksProxyConnectivityType connectivity) {
    this.connectivity = connectivity;
  }


  public XksProxyConfigurationType accessKeyId(String accessKeyId) {
    this.accessKeyId = accessKeyId;
    return this;
  }

  /**
   * Get accessKeyId
   * @return accessKeyId
   */
  @javax.annotation.Nullable
  public String getAccessKeyId() {
    return accessKeyId;
  }

  public void setAccessKeyId(String accessKeyId) {
    this.accessKeyId = accessKeyId;
  }


  public XksProxyConfigurationType uriEndpoint(String uriEndpoint) {
    this.uriEndpoint = uriEndpoint;
    return this;
  }

  /**
   * Get uriEndpoint
   * @return uriEndpoint
   */
  @javax.annotation.Nullable
  public String getUriEndpoint() {
    return uriEndpoint;
  }

  public void setUriEndpoint(String uriEndpoint) {
    this.uriEndpoint = uriEndpoint;
  }


  public XksProxyConfigurationType uriPath(String uriPath) {
    this.uriPath = uriPath;
    return this;
  }

  /**
   * Get uriPath
   * @return uriPath
   */
  @javax.annotation.Nullable
  public String getUriPath() {
    return uriPath;
  }

  public void setUriPath(String uriPath) {
    this.uriPath = uriPath;
  }


  public XksProxyConfigurationType vpcEndpointServiceName(String vpcEndpointServiceName) {
    this.vpcEndpointServiceName = vpcEndpointServiceName;
    return this;
  }

  /**
   * Get vpcEndpointServiceName
   * @return vpcEndpointServiceName
   */
  @javax.annotation.Nullable
  public String getVpcEndpointServiceName() {
    return vpcEndpointServiceName;
  }

  public void setVpcEndpointServiceName(String vpcEndpointServiceName) {
    this.vpcEndpointServiceName = vpcEndpointServiceName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    XksProxyConfigurationType xksProxyConfigurationType = (XksProxyConfigurationType) o;
    return Objects.equals(this.connectivity, xksProxyConfigurationType.connectivity) &&
        Objects.equals(this.accessKeyId, xksProxyConfigurationType.accessKeyId) &&
        Objects.equals(this.uriEndpoint, xksProxyConfigurationType.uriEndpoint) &&
        Objects.equals(this.uriPath, xksProxyConfigurationType.uriPath) &&
        Objects.equals(this.vpcEndpointServiceName, xksProxyConfigurationType.vpcEndpointServiceName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectivity, accessKeyId, uriEndpoint, uriPath, vpcEndpointServiceName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class XksProxyConfigurationType {\n");
    sb.append("    connectivity: ").append(toIndentedString(connectivity)).append("\n");
    sb.append("    accessKeyId: ").append(toIndentedString(accessKeyId)).append("\n");
    sb.append("    uriEndpoint: ").append(toIndentedString(uriEndpoint)).append("\n");
    sb.append("    uriPath: ").append(toIndentedString(uriPath)).append("\n");
    sb.append("    vpcEndpointServiceName: ").append(toIndentedString(vpcEndpointServiceName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Connectivity");
    openapiFields.add("AccessKeyId");
    openapiFields.add("UriEndpoint");
    openapiFields.add("UriPath");
    openapiFields.add("VpcEndpointServiceName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to XksProxyConfigurationType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!XksProxyConfigurationType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in XksProxyConfigurationType is not found in the empty JSON string", XksProxyConfigurationType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!XksProxyConfigurationType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `XksProxyConfigurationType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Connectivity`
      if (jsonObj.get("Connectivity") != null && !jsonObj.get("Connectivity").isJsonNull()) {
        XksProxyConnectivityType.validateJsonElement(jsonObj.get("Connectivity"));
      }
      // validate the optional field `AccessKeyId`
      if (jsonObj.get("AccessKeyId") != null && !jsonObj.get("AccessKeyId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AccessKeyId"));
      }
      // validate the optional field `UriEndpoint`
      if (jsonObj.get("UriEndpoint") != null && !jsonObj.get("UriEndpoint").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UriEndpoint"));
      }
      // validate the optional field `UriPath`
      if (jsonObj.get("UriPath") != null && !jsonObj.get("UriPath").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UriPath"));
      }
      // validate the optional field `VpcEndpointServiceName`
      if (jsonObj.get("VpcEndpointServiceName") != null && !jsonObj.get("VpcEndpointServiceName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VpcEndpointServiceName"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!XksProxyConfigurationType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'XksProxyConfigurationType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<XksProxyConfigurationType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(XksProxyConfigurationType.class));

       return (TypeAdapter<T>) new TypeAdapter<XksProxyConfigurationType>() {
           @Override
           public void write(JsonWriter out, XksProxyConfigurationType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public XksProxyConfigurationType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of XksProxyConfigurationType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of XksProxyConfigurationType
   * @throws IOException if the JSON string is invalid with respect to XksProxyConfigurationType
   */
  public static XksProxyConfigurationType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, XksProxyConfigurationType.class);
  }

  /**
   * Convert an instance of XksProxyConfigurationType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

