# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.encryption_algorithm_spec import EncryptionAlgorithmSpec
from openapi_server import util


class ReEncryptResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ciphertext_blob: str=None, source_key_id: str=None, key_id: str=None, source_encryption_algorithm: EncryptionAlgorithmSpec=None, destination_encryption_algorithm: EncryptionAlgorithmSpec=None):
        """ReEncryptResponse - a model defined in OpenAPI

        :param ciphertext_blob: The ciphertext_blob of this ReEncryptResponse.
        :param source_key_id: The source_key_id of this ReEncryptResponse.
        :param key_id: The key_id of this ReEncryptResponse.
        :param source_encryption_algorithm: The source_encryption_algorithm of this ReEncryptResponse.
        :param destination_encryption_algorithm: The destination_encryption_algorithm of this ReEncryptResponse.
        """
        self.openapi_types = {
            'ciphertext_blob': str,
            'source_key_id': str,
            'key_id': str,
            'source_encryption_algorithm': EncryptionAlgorithmSpec,
            'destination_encryption_algorithm': EncryptionAlgorithmSpec
        }

        self.attribute_map = {
            'ciphertext_blob': 'CiphertextBlob',
            'source_key_id': 'SourceKeyId',
            'key_id': 'KeyId',
            'source_encryption_algorithm': 'SourceEncryptionAlgorithm',
            'destination_encryption_algorithm': 'DestinationEncryptionAlgorithm'
        }

        self._ciphertext_blob = ciphertext_blob
        self._source_key_id = source_key_id
        self._key_id = key_id
        self._source_encryption_algorithm = source_encryption_algorithm
        self._destination_encryption_algorithm = destination_encryption_algorithm

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReEncryptResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReEncryptResponse of this ReEncryptResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ciphertext_blob(self):
        """Gets the ciphertext_blob of this ReEncryptResponse.


        :return: The ciphertext_blob of this ReEncryptResponse.
        :rtype: str
        """
        return self._ciphertext_blob

    @ciphertext_blob.setter
    def ciphertext_blob(self, ciphertext_blob):
        """Sets the ciphertext_blob of this ReEncryptResponse.


        :param ciphertext_blob: The ciphertext_blob of this ReEncryptResponse.
        :type ciphertext_blob: str
        """

        self._ciphertext_blob = ciphertext_blob

    @property
    def source_key_id(self):
        """Gets the source_key_id of this ReEncryptResponse.


        :return: The source_key_id of this ReEncryptResponse.
        :rtype: str
        """
        return self._source_key_id

    @source_key_id.setter
    def source_key_id(self, source_key_id):
        """Sets the source_key_id of this ReEncryptResponse.


        :param source_key_id: The source_key_id of this ReEncryptResponse.
        :type source_key_id: str
        """

        self._source_key_id = source_key_id

    @property
    def key_id(self):
        """Gets the key_id of this ReEncryptResponse.


        :return: The key_id of this ReEncryptResponse.
        :rtype: str
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id):
        """Sets the key_id of this ReEncryptResponse.


        :param key_id: The key_id of this ReEncryptResponse.
        :type key_id: str
        """

        self._key_id = key_id

    @property
    def source_encryption_algorithm(self):
        """Gets the source_encryption_algorithm of this ReEncryptResponse.


        :return: The source_encryption_algorithm of this ReEncryptResponse.
        :rtype: EncryptionAlgorithmSpec
        """
        return self._source_encryption_algorithm

    @source_encryption_algorithm.setter
    def source_encryption_algorithm(self, source_encryption_algorithm):
        """Sets the source_encryption_algorithm of this ReEncryptResponse.


        :param source_encryption_algorithm: The source_encryption_algorithm of this ReEncryptResponse.
        :type source_encryption_algorithm: EncryptionAlgorithmSpec
        """

        self._source_encryption_algorithm = source_encryption_algorithm

    @property
    def destination_encryption_algorithm(self):
        """Gets the destination_encryption_algorithm of this ReEncryptResponse.


        :return: The destination_encryption_algorithm of this ReEncryptResponse.
        :rtype: EncryptionAlgorithmSpec
        """
        return self._destination_encryption_algorithm

    @destination_encryption_algorithm.setter
    def destination_encryption_algorithm(self, destination_encryption_algorithm):
        """Sets the destination_encryption_algorithm of this ReEncryptResponse.


        :param destination_encryption_algorithm: The destination_encryption_algorithm of this ReEncryptResponse.
        :type destination_encryption_algorithm: EncryptionAlgorithmSpec
        """

        self._destination_encryption_algorithm = destination_encryption_algorithm
