# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.multi_region_configuration_primary_key import MultiRegionConfigurationPrimaryKey
from openapi_server.models.multi_region_key_type import MultiRegionKeyType
from openapi_server import util


class MultiRegionConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, multi_region_key_type: MultiRegionKeyType=None, primary_key: MultiRegionConfigurationPrimaryKey=None, replica_keys: List=None):
        """MultiRegionConfiguration - a model defined in OpenAPI

        :param multi_region_key_type: The multi_region_key_type of this MultiRegionConfiguration.
        :param primary_key: The primary_key of this MultiRegionConfiguration.
        :param replica_keys: The replica_keys of this MultiRegionConfiguration.
        """
        self.openapi_types = {
            'multi_region_key_type': MultiRegionKeyType,
            'primary_key': MultiRegionConfigurationPrimaryKey,
            'replica_keys': List
        }

        self.attribute_map = {
            'multi_region_key_type': 'MultiRegionKeyType',
            'primary_key': 'PrimaryKey',
            'replica_keys': 'ReplicaKeys'
        }

        self._multi_region_key_type = multi_region_key_type
        self._primary_key = primary_key
        self._replica_keys = replica_keys

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MultiRegionConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MultiRegionConfiguration of this MultiRegionConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def multi_region_key_type(self):
        """Gets the multi_region_key_type of this MultiRegionConfiguration.


        :return: The multi_region_key_type of this MultiRegionConfiguration.
        :rtype: MultiRegionKeyType
        """
        return self._multi_region_key_type

    @multi_region_key_type.setter
    def multi_region_key_type(self, multi_region_key_type):
        """Sets the multi_region_key_type of this MultiRegionConfiguration.


        :param multi_region_key_type: The multi_region_key_type of this MultiRegionConfiguration.
        :type multi_region_key_type: MultiRegionKeyType
        """

        self._multi_region_key_type = multi_region_key_type

    @property
    def primary_key(self):
        """Gets the primary_key of this MultiRegionConfiguration.


        :return: The primary_key of this MultiRegionConfiguration.
        :rtype: MultiRegionConfigurationPrimaryKey
        """
        return self._primary_key

    @primary_key.setter
    def primary_key(self, primary_key):
        """Sets the primary_key of this MultiRegionConfiguration.


        :param primary_key: The primary_key of this MultiRegionConfiguration.
        :type primary_key: MultiRegionConfigurationPrimaryKey
        """

        self._primary_key = primary_key

    @property
    def replica_keys(self):
        """Gets the replica_keys of this MultiRegionConfiguration.


        :return: The replica_keys of this MultiRegionConfiguration.
        :rtype: List
        """
        return self._replica_keys

    @replica_keys.setter
    def replica_keys(self, replica_keys):
        """Sets the replica_keys of this MultiRegionConfiguration.


        :param replica_keys: The replica_keys of this MultiRegionConfiguration.
        :type replica_keys: List
        """

        self._replica_keys = replica_keys
