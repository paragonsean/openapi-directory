# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.xks_proxy_connectivity_type import XksProxyConnectivityType
from openapi_server import util


class XksProxyConfigurationType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connectivity: XksProxyConnectivityType=None, access_key_id: str=None, uri_endpoint: str=None, uri_path: str=None, vpc_endpoint_service_name: str=None):
        """XksProxyConfigurationType - a model defined in OpenAPI

        :param connectivity: The connectivity of this XksProxyConfigurationType.
        :param access_key_id: The access_key_id of this XksProxyConfigurationType.
        :param uri_endpoint: The uri_endpoint of this XksProxyConfigurationType.
        :param uri_path: The uri_path of this XksProxyConfigurationType.
        :param vpc_endpoint_service_name: The vpc_endpoint_service_name of this XksProxyConfigurationType.
        """
        self.openapi_types = {
            'connectivity': XksProxyConnectivityType,
            'access_key_id': str,
            'uri_endpoint': str,
            'uri_path': str,
            'vpc_endpoint_service_name': str
        }

        self.attribute_map = {
            'connectivity': 'Connectivity',
            'access_key_id': 'AccessKeyId',
            'uri_endpoint': 'UriEndpoint',
            'uri_path': 'UriPath',
            'vpc_endpoint_service_name': 'VpcEndpointServiceName'
        }

        self._connectivity = connectivity
        self._access_key_id = access_key_id
        self._uri_endpoint = uri_endpoint
        self._uri_path = uri_path
        self._vpc_endpoint_service_name = vpc_endpoint_service_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'XksProxyConfigurationType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The XksProxyConfigurationType of this XksProxyConfigurationType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connectivity(self):
        """Gets the connectivity of this XksProxyConfigurationType.


        :return: The connectivity of this XksProxyConfigurationType.
        :rtype: XksProxyConnectivityType
        """
        return self._connectivity

    @connectivity.setter
    def connectivity(self, connectivity):
        """Sets the connectivity of this XksProxyConfigurationType.


        :param connectivity: The connectivity of this XksProxyConfigurationType.
        :type connectivity: XksProxyConnectivityType
        """

        self._connectivity = connectivity

    @property
    def access_key_id(self):
        """Gets the access_key_id of this XksProxyConfigurationType.


        :return: The access_key_id of this XksProxyConfigurationType.
        :rtype: str
        """
        return self._access_key_id

    @access_key_id.setter
    def access_key_id(self, access_key_id):
        """Sets the access_key_id of this XksProxyConfigurationType.


        :param access_key_id: The access_key_id of this XksProxyConfigurationType.
        :type access_key_id: str
        """

        self._access_key_id = access_key_id

    @property
    def uri_endpoint(self):
        """Gets the uri_endpoint of this XksProxyConfigurationType.


        :return: The uri_endpoint of this XksProxyConfigurationType.
        :rtype: str
        """
        return self._uri_endpoint

    @uri_endpoint.setter
    def uri_endpoint(self, uri_endpoint):
        """Sets the uri_endpoint of this XksProxyConfigurationType.


        :param uri_endpoint: The uri_endpoint of this XksProxyConfigurationType.
        :type uri_endpoint: str
        """

        self._uri_endpoint = uri_endpoint

    @property
    def uri_path(self):
        """Gets the uri_path of this XksProxyConfigurationType.


        :return: The uri_path of this XksProxyConfigurationType.
        :rtype: str
        """
        return self._uri_path

    @uri_path.setter
    def uri_path(self, uri_path):
        """Sets the uri_path of this XksProxyConfigurationType.


        :param uri_path: The uri_path of this XksProxyConfigurationType.
        :type uri_path: str
        """

        self._uri_path = uri_path

    @property
    def vpc_endpoint_service_name(self):
        """Gets the vpc_endpoint_service_name of this XksProxyConfigurationType.


        :return: The vpc_endpoint_service_name of this XksProxyConfigurationType.
        :rtype: str
        """
        return self._vpc_endpoint_service_name

    @vpc_endpoint_service_name.setter
    def vpc_endpoint_service_name(self, vpc_endpoint_service_name):
        """Sets the vpc_endpoint_service_name of this XksProxyConfigurationType.


        :param vpc_endpoint_service_name: The vpc_endpoint_service_name of this XksProxyConfigurationType.
        :type vpc_endpoint_service_name: str
        """

        self._vpc_endpoint_service_name = vpc_endpoint_service_name
