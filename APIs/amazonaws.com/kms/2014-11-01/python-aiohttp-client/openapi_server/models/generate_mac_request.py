# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mac_algorithm_spec import MacAlgorithmSpec
from openapi_server import util


class GenerateMacRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, key_id: str=None, mac_algorithm: MacAlgorithmSpec=None, grant_tokens: List=None, dry_run: bool=None):
        """GenerateMacRequest - a model defined in OpenAPI

        :param message: The message of this GenerateMacRequest.
        :param key_id: The key_id of this GenerateMacRequest.
        :param mac_algorithm: The mac_algorithm of this GenerateMacRequest.
        :param grant_tokens: The grant_tokens of this GenerateMacRequest.
        :param dry_run: The dry_run of this GenerateMacRequest.
        """
        self.openapi_types = {
            'message': str,
            'key_id': str,
            'mac_algorithm': MacAlgorithmSpec,
            'grant_tokens': List,
            'dry_run': bool
        }

        self.attribute_map = {
            'message': 'Message',
            'key_id': 'KeyId',
            'mac_algorithm': 'MacAlgorithm',
            'grant_tokens': 'GrantTokens',
            'dry_run': 'DryRun'
        }

        self._message = message
        self._key_id = key_id
        self._mac_algorithm = mac_algorithm
        self._grant_tokens = grant_tokens
        self._dry_run = dry_run

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GenerateMacRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GenerateMacRequest of this GenerateMacRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this GenerateMacRequest.


        :return: The message of this GenerateMacRequest.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this GenerateMacRequest.


        :param message: The message of this GenerateMacRequest.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def key_id(self):
        """Gets the key_id of this GenerateMacRequest.


        :return: The key_id of this GenerateMacRequest.
        :rtype: str
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id):
        """Sets the key_id of this GenerateMacRequest.


        :param key_id: The key_id of this GenerateMacRequest.
        :type key_id: str
        """
        if key_id is None:
            raise ValueError("Invalid value for `key_id`, must not be `None`")

        self._key_id = key_id

    @property
    def mac_algorithm(self):
        """Gets the mac_algorithm of this GenerateMacRequest.


        :return: The mac_algorithm of this GenerateMacRequest.
        :rtype: MacAlgorithmSpec
        """
        return self._mac_algorithm

    @mac_algorithm.setter
    def mac_algorithm(self, mac_algorithm):
        """Sets the mac_algorithm of this GenerateMacRequest.


        :param mac_algorithm: The mac_algorithm of this GenerateMacRequest.
        :type mac_algorithm: MacAlgorithmSpec
        """
        if mac_algorithm is None:
            raise ValueError("Invalid value for `mac_algorithm`, must not be `None`")

        self._mac_algorithm = mac_algorithm

    @property
    def grant_tokens(self):
        """Gets the grant_tokens of this GenerateMacRequest.


        :return: The grant_tokens of this GenerateMacRequest.
        :rtype: List
        """
        return self._grant_tokens

    @grant_tokens.setter
    def grant_tokens(self, grant_tokens):
        """Sets the grant_tokens of this GenerateMacRequest.


        :param grant_tokens: The grant_tokens of this GenerateMacRequest.
        :type grant_tokens: List
        """

        self._grant_tokens = grant_tokens

    @property
    def dry_run(self):
        """Gets the dry_run of this GenerateMacRequest.


        :return: The dry_run of this GenerateMacRequest.
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this GenerateMacRequest.


        :param dry_run: The dry_run of this GenerateMacRequest.
        :type dry_run: bool
        """

        self._dry_run = dry_run
