# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.signing_algorithm_spec import SigningAlgorithmSpec
from openapi_server import util


class SignResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key_id: str=None, signature: str=None, signing_algorithm: SigningAlgorithmSpec=None):
        """SignResponse - a model defined in OpenAPI

        :param key_id: The key_id of this SignResponse.
        :param signature: The signature of this SignResponse.
        :param signing_algorithm: The signing_algorithm of this SignResponse.
        """
        self.openapi_types = {
            'key_id': str,
            'signature': str,
            'signing_algorithm': SigningAlgorithmSpec
        }

        self.attribute_map = {
            'key_id': 'KeyId',
            'signature': 'Signature',
            'signing_algorithm': 'SigningAlgorithm'
        }

        self._key_id = key_id
        self._signature = signature
        self._signing_algorithm = signing_algorithm

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SignResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SignResponse of this SignResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key_id(self):
        """Gets the key_id of this SignResponse.


        :return: The key_id of this SignResponse.
        :rtype: str
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id):
        """Sets the key_id of this SignResponse.


        :param key_id: The key_id of this SignResponse.
        :type key_id: str
        """

        self._key_id = key_id

    @property
    def signature(self):
        """Gets the signature of this SignResponse.


        :return: The signature of this SignResponse.
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this SignResponse.


        :param signature: The signature of this SignResponse.
        :type signature: str
        """

        self._signature = signature

    @property
    def signing_algorithm(self):
        """Gets the signing_algorithm of this SignResponse.


        :return: The signing_algorithm of this SignResponse.
        :rtype: SigningAlgorithmSpec
        """
        return self._signing_algorithm

    @signing_algorithm.setter
    def signing_algorithm(self, signing_algorithm):
        """Sets the signing_algorithm of this SignResponse.


        :param signing_algorithm: The signing_algorithm of this SignResponse.
        :type signing_algorithm: SigningAlgorithmSpec
        """

        self._signing_algorithm = signing_algorithm
