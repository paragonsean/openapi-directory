# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GenerateDataKeyResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ciphertext_blob: str=None, plaintext: str=None, key_id: str=None, ciphertext_for_recipient: str=None):
        """GenerateDataKeyResponse - a model defined in OpenAPI

        :param ciphertext_blob: The ciphertext_blob of this GenerateDataKeyResponse.
        :param plaintext: The plaintext of this GenerateDataKeyResponse.
        :param key_id: The key_id of this GenerateDataKeyResponse.
        :param ciphertext_for_recipient: The ciphertext_for_recipient of this GenerateDataKeyResponse.
        """
        self.openapi_types = {
            'ciphertext_blob': str,
            'plaintext': str,
            'key_id': str,
            'ciphertext_for_recipient': str
        }

        self.attribute_map = {
            'ciphertext_blob': 'CiphertextBlob',
            'plaintext': 'Plaintext',
            'key_id': 'KeyId',
            'ciphertext_for_recipient': 'CiphertextForRecipient'
        }

        self._ciphertext_blob = ciphertext_blob
        self._plaintext = plaintext
        self._key_id = key_id
        self._ciphertext_for_recipient = ciphertext_for_recipient

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GenerateDataKeyResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GenerateDataKeyResponse of this GenerateDataKeyResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ciphertext_blob(self):
        """Gets the ciphertext_blob of this GenerateDataKeyResponse.


        :return: The ciphertext_blob of this GenerateDataKeyResponse.
        :rtype: str
        """
        return self._ciphertext_blob

    @ciphertext_blob.setter
    def ciphertext_blob(self, ciphertext_blob):
        """Sets the ciphertext_blob of this GenerateDataKeyResponse.


        :param ciphertext_blob: The ciphertext_blob of this GenerateDataKeyResponse.
        :type ciphertext_blob: str
        """

        self._ciphertext_blob = ciphertext_blob

    @property
    def plaintext(self):
        """Gets the plaintext of this GenerateDataKeyResponse.


        :return: The plaintext of this GenerateDataKeyResponse.
        :rtype: str
        """
        return self._plaintext

    @plaintext.setter
    def plaintext(self, plaintext):
        """Sets the plaintext of this GenerateDataKeyResponse.


        :param plaintext: The plaintext of this GenerateDataKeyResponse.
        :type plaintext: str
        """

        self._plaintext = plaintext

    @property
    def key_id(self):
        """Gets the key_id of this GenerateDataKeyResponse.


        :return: The key_id of this GenerateDataKeyResponse.
        :rtype: str
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id):
        """Sets the key_id of this GenerateDataKeyResponse.


        :param key_id: The key_id of this GenerateDataKeyResponse.
        :type key_id: str
        """

        self._key_id = key_id

    @property
    def ciphertext_for_recipient(self):
        """Gets the ciphertext_for_recipient of this GenerateDataKeyResponse.


        :return: The ciphertext_for_recipient of this GenerateDataKeyResponse.
        :rtype: str
        """
        return self._ciphertext_for_recipient

    @ciphertext_for_recipient.setter
    def ciphertext_for_recipient(self, ciphertext_for_recipient):
        """Sets the ciphertext_for_recipient of this GenerateDataKeyResponse.


        :param ciphertext_for_recipient: The ciphertext_for_recipient of this GenerateDataKeyResponse.
        :type ciphertext_for_recipient: str
        """

        self._ciphertext_for_recipient = ciphertext_for_recipient
