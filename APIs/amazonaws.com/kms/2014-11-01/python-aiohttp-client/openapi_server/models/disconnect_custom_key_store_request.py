# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DisconnectCustomKeyStoreRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_key_store_id: str=None):
        """DisconnectCustomKeyStoreRequest - a model defined in OpenAPI

        :param custom_key_store_id: The custom_key_store_id of this DisconnectCustomKeyStoreRequest.
        """
        self.openapi_types = {
            'custom_key_store_id': str
        }

        self.attribute_map = {
            'custom_key_store_id': 'CustomKeyStoreId'
        }

        self._custom_key_store_id = custom_key_store_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DisconnectCustomKeyStoreRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DisconnectCustomKeyStoreRequest of this DisconnectCustomKeyStoreRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_key_store_id(self):
        """Gets the custom_key_store_id of this DisconnectCustomKeyStoreRequest.


        :return: The custom_key_store_id of this DisconnectCustomKeyStoreRequest.
        :rtype: str
        """
        return self._custom_key_store_id

    @custom_key_store_id.setter
    def custom_key_store_id(self, custom_key_store_id):
        """Sets the custom_key_store_id of this DisconnectCustomKeyStoreRequest.


        :param custom_key_store_id: The custom_key_store_id of this DisconnectCustomKeyStoreRequest.
        :type custom_key_store_id: str
        """
        if custom_key_store_id is None:
            raise ValueError("Invalid value for `custom_key_store_id`, must not be `None`")

        self._custom_key_store_id = custom_key_store_id
