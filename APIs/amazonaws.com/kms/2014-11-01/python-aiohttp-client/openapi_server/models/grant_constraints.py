# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GrantConstraints(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encryption_context_subset: Dict=None, encryption_context_equals: Dict=None):
        """GrantConstraints - a model defined in OpenAPI

        :param encryption_context_subset: The encryption_context_subset of this GrantConstraints.
        :param encryption_context_equals: The encryption_context_equals of this GrantConstraints.
        """
        self.openapi_types = {
            'encryption_context_subset': Dict,
            'encryption_context_equals': Dict
        }

        self.attribute_map = {
            'encryption_context_subset': 'EncryptionContextSubset',
            'encryption_context_equals': 'EncryptionContextEquals'
        }

        self._encryption_context_subset = encryption_context_subset
        self._encryption_context_equals = encryption_context_equals

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GrantConstraints':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GrantConstraints of this GrantConstraints.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encryption_context_subset(self):
        """Gets the encryption_context_subset of this GrantConstraints.


        :return: The encryption_context_subset of this GrantConstraints.
        :rtype: Dict
        """
        return self._encryption_context_subset

    @encryption_context_subset.setter
    def encryption_context_subset(self, encryption_context_subset):
        """Sets the encryption_context_subset of this GrantConstraints.


        :param encryption_context_subset: The encryption_context_subset of this GrantConstraints.
        :type encryption_context_subset: Dict
        """

        self._encryption_context_subset = encryption_context_subset

    @property
    def encryption_context_equals(self):
        """Gets the encryption_context_equals of this GrantConstraints.


        :return: The encryption_context_equals of this GrantConstraints.
        :rtype: Dict
        """
        return self._encryption_context_equals

    @encryption_context_equals.setter
    def encryption_context_equals(self, encryption_context_equals):
        """Sets the encryption_context_equals of this GrantConstraints.


        :param encryption_context_equals: The encryption_context_equals of this GrantConstraints.
        :type encryption_context_equals: Dict
        """

        self._encryption_context_equals = encryption_context_equals
