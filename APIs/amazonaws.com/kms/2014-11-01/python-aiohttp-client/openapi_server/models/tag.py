# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Tag(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tag_key: str=None, tag_value: str=None):
        """Tag - a model defined in OpenAPI

        :param tag_key: The tag_key of this Tag.
        :param tag_value: The tag_value of this Tag.
        """
        self.openapi_types = {
            'tag_key': str,
            'tag_value': str
        }

        self.attribute_map = {
            'tag_key': 'TagKey',
            'tag_value': 'TagValue'
        }

        self._tag_key = tag_key
        self._tag_value = tag_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Tag':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tag of this Tag.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tag_key(self):
        """Gets the tag_key of this Tag.


        :return: The tag_key of this Tag.
        :rtype: str
        """
        return self._tag_key

    @tag_key.setter
    def tag_key(self, tag_key):
        """Sets the tag_key of this Tag.


        :param tag_key: The tag_key of this Tag.
        :type tag_key: str
        """
        if tag_key is None:
            raise ValueError("Invalid value for `tag_key`, must not be `None`")

        self._tag_key = tag_key

    @property
    def tag_value(self):
        """Gets the tag_value of this Tag.


        :return: The tag_value of this Tag.
        :rtype: str
        """
        return self._tag_value

    @tag_value.setter
    def tag_value(self, tag_value):
        """Sets the tag_value of this Tag.


        :param tag_value: The tag_value of this Tag.
        :type tag_value: str
        """
        if tag_value is None:
            raise ValueError("Invalid value for `tag_value`, must not be `None`")

        self._tag_value = tag_value
