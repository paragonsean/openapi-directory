# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateAliasRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alias_name: str=None, target_key_id: str=None):
        """CreateAliasRequest - a model defined in OpenAPI

        :param alias_name: The alias_name of this CreateAliasRequest.
        :param target_key_id: The target_key_id of this CreateAliasRequest.
        """
        self.openapi_types = {
            'alias_name': str,
            'target_key_id': str
        }

        self.attribute_map = {
            'alias_name': 'AliasName',
            'target_key_id': 'TargetKeyId'
        }

        self._alias_name = alias_name
        self._target_key_id = target_key_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAliasRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAliasRequest of this CreateAliasRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alias_name(self):
        """Gets the alias_name of this CreateAliasRequest.


        :return: The alias_name of this CreateAliasRequest.
        :rtype: str
        """
        return self._alias_name

    @alias_name.setter
    def alias_name(self, alias_name):
        """Sets the alias_name of this CreateAliasRequest.


        :param alias_name: The alias_name of this CreateAliasRequest.
        :type alias_name: str
        """
        if alias_name is None:
            raise ValueError("Invalid value for `alias_name`, must not be `None`")

        self._alias_name = alias_name

    @property
    def target_key_id(self):
        """Gets the target_key_id of this CreateAliasRequest.


        :return: The target_key_id of this CreateAliasRequest.
        :rtype: str
        """
        return self._target_key_id

    @target_key_id.setter
    def target_key_id(self, target_key_id):
        """Sets the target_key_id of this CreateAliasRequest.


        :param target_key_id: The target_key_id of this CreateAliasRequest.
        :type target_key_id: str
        """
        if target_key_id is None:
            raise ValueError("Invalid value for `target_key_id`, must not be `None`")

        self._target_key_id = target_key_id
