# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.encryption_algorithm_spec import EncryptionAlgorithmSpec
from openapi_server import util


class EncryptRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key_id: str=None, plaintext: str=None, encryption_context: Dict=None, grant_tokens: List=None, encryption_algorithm: EncryptionAlgorithmSpec=None, dry_run: bool=None):
        """EncryptRequest - a model defined in OpenAPI

        :param key_id: The key_id of this EncryptRequest.
        :param plaintext: The plaintext of this EncryptRequest.
        :param encryption_context: The encryption_context of this EncryptRequest.
        :param grant_tokens: The grant_tokens of this EncryptRequest.
        :param encryption_algorithm: The encryption_algorithm of this EncryptRequest.
        :param dry_run: The dry_run of this EncryptRequest.
        """
        self.openapi_types = {
            'key_id': str,
            'plaintext': str,
            'encryption_context': Dict,
            'grant_tokens': List,
            'encryption_algorithm': EncryptionAlgorithmSpec,
            'dry_run': bool
        }

        self.attribute_map = {
            'key_id': 'KeyId',
            'plaintext': 'Plaintext',
            'encryption_context': 'EncryptionContext',
            'grant_tokens': 'GrantTokens',
            'encryption_algorithm': 'EncryptionAlgorithm',
            'dry_run': 'DryRun'
        }

        self._key_id = key_id
        self._plaintext = plaintext
        self._encryption_context = encryption_context
        self._grant_tokens = grant_tokens
        self._encryption_algorithm = encryption_algorithm
        self._dry_run = dry_run

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EncryptRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EncryptRequest of this EncryptRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key_id(self):
        """Gets the key_id of this EncryptRequest.


        :return: The key_id of this EncryptRequest.
        :rtype: str
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id):
        """Sets the key_id of this EncryptRequest.


        :param key_id: The key_id of this EncryptRequest.
        :type key_id: str
        """
        if key_id is None:
            raise ValueError("Invalid value for `key_id`, must not be `None`")

        self._key_id = key_id

    @property
    def plaintext(self):
        """Gets the plaintext of this EncryptRequest.


        :return: The plaintext of this EncryptRequest.
        :rtype: str
        """
        return self._plaintext

    @plaintext.setter
    def plaintext(self, plaintext):
        """Sets the plaintext of this EncryptRequest.


        :param plaintext: The plaintext of this EncryptRequest.
        :type plaintext: str
        """
        if plaintext is None:
            raise ValueError("Invalid value for `plaintext`, must not be `None`")

        self._plaintext = plaintext

    @property
    def encryption_context(self):
        """Gets the encryption_context of this EncryptRequest.


        :return: The encryption_context of this EncryptRequest.
        :rtype: Dict
        """
        return self._encryption_context

    @encryption_context.setter
    def encryption_context(self, encryption_context):
        """Sets the encryption_context of this EncryptRequest.


        :param encryption_context: The encryption_context of this EncryptRequest.
        :type encryption_context: Dict
        """

        self._encryption_context = encryption_context

    @property
    def grant_tokens(self):
        """Gets the grant_tokens of this EncryptRequest.


        :return: The grant_tokens of this EncryptRequest.
        :rtype: List
        """
        return self._grant_tokens

    @grant_tokens.setter
    def grant_tokens(self, grant_tokens):
        """Sets the grant_tokens of this EncryptRequest.


        :param grant_tokens: The grant_tokens of this EncryptRequest.
        :type grant_tokens: List
        """

        self._grant_tokens = grant_tokens

    @property
    def encryption_algorithm(self):
        """Gets the encryption_algorithm of this EncryptRequest.


        :return: The encryption_algorithm of this EncryptRequest.
        :rtype: EncryptionAlgorithmSpec
        """
        return self._encryption_algorithm

    @encryption_algorithm.setter
    def encryption_algorithm(self, encryption_algorithm):
        """Sets the encryption_algorithm of this EncryptRequest.


        :param encryption_algorithm: The encryption_algorithm of this EncryptRequest.
        :type encryption_algorithm: EncryptionAlgorithmSpec
        """

        self._encryption_algorithm = encryption_algorithm

    @property
    def dry_run(self):
        """Gets the dry_run of this EncryptRequest.


        :return: The dry_run of this EncryptRequest.
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this EncryptRequest.


        :param dry_run: The dry_run of this EncryptRequest.
        :type dry_run: bool
        """

        self._dry_run = dry_run
