# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.algorithm_spec import AlgorithmSpec
from openapi_server.models.wrapping_key_spec import WrappingKeySpec
from openapi_server import util


class GetParametersForImportRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key_id: str=None, wrapping_algorithm: AlgorithmSpec=None, wrapping_key_spec: WrappingKeySpec=None):
        """GetParametersForImportRequest - a model defined in OpenAPI

        :param key_id: The key_id of this GetParametersForImportRequest.
        :param wrapping_algorithm: The wrapping_algorithm of this GetParametersForImportRequest.
        :param wrapping_key_spec: The wrapping_key_spec of this GetParametersForImportRequest.
        """
        self.openapi_types = {
            'key_id': str,
            'wrapping_algorithm': AlgorithmSpec,
            'wrapping_key_spec': WrappingKeySpec
        }

        self.attribute_map = {
            'key_id': 'KeyId',
            'wrapping_algorithm': 'WrappingAlgorithm',
            'wrapping_key_spec': 'WrappingKeySpec'
        }

        self._key_id = key_id
        self._wrapping_algorithm = wrapping_algorithm
        self._wrapping_key_spec = wrapping_key_spec

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetParametersForImportRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetParametersForImportRequest of this GetParametersForImportRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key_id(self):
        """Gets the key_id of this GetParametersForImportRequest.


        :return: The key_id of this GetParametersForImportRequest.
        :rtype: str
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id):
        """Sets the key_id of this GetParametersForImportRequest.


        :param key_id: The key_id of this GetParametersForImportRequest.
        :type key_id: str
        """
        if key_id is None:
            raise ValueError("Invalid value for `key_id`, must not be `None`")

        self._key_id = key_id

    @property
    def wrapping_algorithm(self):
        """Gets the wrapping_algorithm of this GetParametersForImportRequest.


        :return: The wrapping_algorithm of this GetParametersForImportRequest.
        :rtype: AlgorithmSpec
        """
        return self._wrapping_algorithm

    @wrapping_algorithm.setter
    def wrapping_algorithm(self, wrapping_algorithm):
        """Sets the wrapping_algorithm of this GetParametersForImportRequest.


        :param wrapping_algorithm: The wrapping_algorithm of this GetParametersForImportRequest.
        :type wrapping_algorithm: AlgorithmSpec
        """
        if wrapping_algorithm is None:
            raise ValueError("Invalid value for `wrapping_algorithm`, must not be `None`")

        self._wrapping_algorithm = wrapping_algorithm

    @property
    def wrapping_key_spec(self):
        """Gets the wrapping_key_spec of this GetParametersForImportRequest.


        :return: The wrapping_key_spec of this GetParametersForImportRequest.
        :rtype: WrappingKeySpec
        """
        return self._wrapping_key_spec

    @wrapping_key_spec.setter
    def wrapping_key_spec(self, wrapping_key_spec):
        """Sets the wrapping_key_spec of this GetParametersForImportRequest.


        :param wrapping_key_spec: The wrapping_key_spec of this GetParametersForImportRequest.
        :type wrapping_key_spec: WrappingKeySpec
        """
        if wrapping_key_spec is None:
            raise ValueError("Invalid value for `wrapping_key_spec`, must not be `None`")

        self._wrapping_key_spec = wrapping_key_spec
