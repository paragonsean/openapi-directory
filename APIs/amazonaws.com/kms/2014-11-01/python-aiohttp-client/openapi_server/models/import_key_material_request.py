# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.expiration_model_type import ExpirationModelType
from openapi_server import util


class ImportKeyMaterialRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key_id: str=None, import_token: str=None, encrypted_key_material: str=None, valid_to: datetime=None, expiration_model: ExpirationModelType=None):
        """ImportKeyMaterialRequest - a model defined in OpenAPI

        :param key_id: The key_id of this ImportKeyMaterialRequest.
        :param import_token: The import_token of this ImportKeyMaterialRequest.
        :param encrypted_key_material: The encrypted_key_material of this ImportKeyMaterialRequest.
        :param valid_to: The valid_to of this ImportKeyMaterialRequest.
        :param expiration_model: The expiration_model of this ImportKeyMaterialRequest.
        """
        self.openapi_types = {
            'key_id': str,
            'import_token': str,
            'encrypted_key_material': str,
            'valid_to': datetime,
            'expiration_model': ExpirationModelType
        }

        self.attribute_map = {
            'key_id': 'KeyId',
            'import_token': 'ImportToken',
            'encrypted_key_material': 'EncryptedKeyMaterial',
            'valid_to': 'ValidTo',
            'expiration_model': 'ExpirationModel'
        }

        self._key_id = key_id
        self._import_token = import_token
        self._encrypted_key_material = encrypted_key_material
        self._valid_to = valid_to
        self._expiration_model = expiration_model

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportKeyMaterialRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportKeyMaterialRequest of this ImportKeyMaterialRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key_id(self):
        """Gets the key_id of this ImportKeyMaterialRequest.


        :return: The key_id of this ImportKeyMaterialRequest.
        :rtype: str
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id):
        """Sets the key_id of this ImportKeyMaterialRequest.


        :param key_id: The key_id of this ImportKeyMaterialRequest.
        :type key_id: str
        """
        if key_id is None:
            raise ValueError("Invalid value for `key_id`, must not be `None`")

        self._key_id = key_id

    @property
    def import_token(self):
        """Gets the import_token of this ImportKeyMaterialRequest.


        :return: The import_token of this ImportKeyMaterialRequest.
        :rtype: str
        """
        return self._import_token

    @import_token.setter
    def import_token(self, import_token):
        """Sets the import_token of this ImportKeyMaterialRequest.


        :param import_token: The import_token of this ImportKeyMaterialRequest.
        :type import_token: str
        """
        if import_token is None:
            raise ValueError("Invalid value for `import_token`, must not be `None`")

        self._import_token = import_token

    @property
    def encrypted_key_material(self):
        """Gets the encrypted_key_material of this ImportKeyMaterialRequest.


        :return: The encrypted_key_material of this ImportKeyMaterialRequest.
        :rtype: str
        """
        return self._encrypted_key_material

    @encrypted_key_material.setter
    def encrypted_key_material(self, encrypted_key_material):
        """Sets the encrypted_key_material of this ImportKeyMaterialRequest.


        :param encrypted_key_material: The encrypted_key_material of this ImportKeyMaterialRequest.
        :type encrypted_key_material: str
        """
        if encrypted_key_material is None:
            raise ValueError("Invalid value for `encrypted_key_material`, must not be `None`")

        self._encrypted_key_material = encrypted_key_material

    @property
    def valid_to(self):
        """Gets the valid_to of this ImportKeyMaterialRequest.


        :return: The valid_to of this ImportKeyMaterialRequest.
        :rtype: datetime
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this ImportKeyMaterialRequest.


        :param valid_to: The valid_to of this ImportKeyMaterialRequest.
        :type valid_to: datetime
        """

        self._valid_to = valid_to

    @property
    def expiration_model(self):
        """Gets the expiration_model of this ImportKeyMaterialRequest.


        :return: The expiration_model of this ImportKeyMaterialRequest.
        :rtype: ExpirationModelType
        """
        return self._expiration_model

    @expiration_model.setter
    def expiration_model(self, expiration_model):
        """Sets the expiration_model of this ImportKeyMaterialRequest.


        :param expiration_model: The expiration_model of this ImportKeyMaterialRequest.
        :type expiration_model: ExpirationModelType
        """

        self._expiration_model = expiration_model
