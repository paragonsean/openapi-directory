# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.encryption_algorithm_spec import EncryptionAlgorithmSpec
from openapi_server import util


class DecryptResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key_id: str=None, plaintext: str=None, encryption_algorithm: EncryptionAlgorithmSpec=None, ciphertext_for_recipient: str=None):
        """DecryptResponse - a model defined in OpenAPI

        :param key_id: The key_id of this DecryptResponse.
        :param plaintext: The plaintext of this DecryptResponse.
        :param encryption_algorithm: The encryption_algorithm of this DecryptResponse.
        :param ciphertext_for_recipient: The ciphertext_for_recipient of this DecryptResponse.
        """
        self.openapi_types = {
            'key_id': str,
            'plaintext': str,
            'encryption_algorithm': EncryptionAlgorithmSpec,
            'ciphertext_for_recipient': str
        }

        self.attribute_map = {
            'key_id': 'KeyId',
            'plaintext': 'Plaintext',
            'encryption_algorithm': 'EncryptionAlgorithm',
            'ciphertext_for_recipient': 'CiphertextForRecipient'
        }

        self._key_id = key_id
        self._plaintext = plaintext
        self._encryption_algorithm = encryption_algorithm
        self._ciphertext_for_recipient = ciphertext_for_recipient

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DecryptResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DecryptResponse of this DecryptResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key_id(self):
        """Gets the key_id of this DecryptResponse.


        :return: The key_id of this DecryptResponse.
        :rtype: str
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id):
        """Sets the key_id of this DecryptResponse.


        :param key_id: The key_id of this DecryptResponse.
        :type key_id: str
        """

        self._key_id = key_id

    @property
    def plaintext(self):
        """Gets the plaintext of this DecryptResponse.


        :return: The plaintext of this DecryptResponse.
        :rtype: str
        """
        return self._plaintext

    @plaintext.setter
    def plaintext(self, plaintext):
        """Sets the plaintext of this DecryptResponse.


        :param plaintext: The plaintext of this DecryptResponse.
        :type plaintext: str
        """

        self._plaintext = plaintext

    @property
    def encryption_algorithm(self):
        """Gets the encryption_algorithm of this DecryptResponse.


        :return: The encryption_algorithm of this DecryptResponse.
        :rtype: EncryptionAlgorithmSpec
        """
        return self._encryption_algorithm

    @encryption_algorithm.setter
    def encryption_algorithm(self, encryption_algorithm):
        """Sets the encryption_algorithm of this DecryptResponse.


        :param encryption_algorithm: The encryption_algorithm of this DecryptResponse.
        :type encryption_algorithm: EncryptionAlgorithmSpec
        """

        self._encryption_algorithm = encryption_algorithm

    @property
    def ciphertext_for_recipient(self):
        """Gets the ciphertext_for_recipient of this DecryptResponse.


        :return: The ciphertext_for_recipient of this DecryptResponse.
        :rtype: str
        """
        return self._ciphertext_for_recipient

    @ciphertext_for_recipient.setter
    def ciphertext_for_recipient(self, ciphertext_for_recipient):
        """Sets the ciphertext_for_recipient of this DecryptResponse.


        :param ciphertext_for_recipient: The ciphertext_for_recipient of this DecryptResponse.
        :type ciphertext_for_recipient: str
        """

        self._ciphertext_for_recipient = ciphertext_for_recipient
