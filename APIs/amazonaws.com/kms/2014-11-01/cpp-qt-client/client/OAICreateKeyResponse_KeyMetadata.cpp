/**
 * AWS Key Management Service
 * <fullname>Key Management Service</fullname> <p>Key Management Service (KMS) is an encryption and key management web service. This guide describes the KMS operations that you can call programmatically. For general information about KMS, see the <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/\"> <i>Key Management Service Developer Guide</i> </a>.</p> <note> <p>KMS has replaced the term <i>customer master key (CMK)</i> with <i>KMS key</i> and <i>KMS key</i>. The concept has not changed. To prevent breaking changes, KMS is keeping some variations of this term.</p> <p>Amazon Web Services provides SDKs that consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .Net, macOS, Android, etc.). The SDKs provide a convenient way to create programmatic access to KMS and other Amazon Web Services services. For example, the SDKs take care of tasks such as signing requests (see below), managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> </note> <p>We recommend that you use the Amazon Web Services SDKs to make programmatic API calls to KMS.</p> <p>If you need to use FIPS 140-2 validated cryptographic modules when communicating with Amazon Web Services, use the FIPS endpoint in your preferred Amazon Web Services Region. For more information about the available FIPS endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/kms.html#kms_region\">Service endpoints</a> in the Key Management Service topic of the <i>Amazon Web Services General Reference</i>.</p> <p>All KMS API calls must be signed and be transmitted using Transport Layer Security (TLS). KMS recommends you always use the latest supported TLS version. Clients must also support cipher suites with Perfect Forward Secrecy (PFS) such as Ephemeral Diffie-Hellman (DHE) or Elliptic Curve Ephemeral Diffie-Hellman (ECDHE). Most modern systems such as Java 7 and later support these modes.</p> <p> <b>Signing Requests</b> </p> <p>Requests must be signed using an access key ID and a secret access key. We strongly recommend that you do not use your Amazon Web Services account root access key ID and secret access key for everyday work. You can use the access key ID and secret access key for an IAM user or you can use the Security Token Service (STS) to generate temporary security credentials and use those to sign requests. </p> <p>All KMS requests must be signed with <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4</a>.</p> <p> <b>Logging API Requests</b> </p> <p>KMS supports CloudTrail, a service that logs Amazon Web Services API calls and related events for your Amazon Web Services account and delivers them to an Amazon S3 bucket that you specify. By using the information collected by CloudTrail, you can determine what requests were made to KMS, who made the request, when it was made, and so on. To learn more about CloudTrail, including how to turn it on and find your log files, see the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/\">CloudTrail User Guide</a>.</p> <p> <b>Additional Resources</b> </p> <p>For more information about credentials and request signing, see the following:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html\">Amazon Web Services Security Credentials</a> - This topic provides general information about the types of credentials used to access Amazon Web Services.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html\">Temporary Security Credentials</a> - This section of the <i>IAM User Guide</i> describes how to create and use temporary security credentials.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 Signing Process</a> - This set of topics walks you through the process of signing a request using an access key ID and a secret access key.</p> </li> </ul> <p> <b>Commonly Used API Operations</b> </p> <p>Of the API operations discussed in this guide, the following will prove the most useful for most applications. You will likely perform operations other than these, such as creating keys and assigning policies, by using the console.</p> <ul> <li> <p> <a>Encrypt</a> </p> </li> <li> <p> <a>Decrypt</a> </p> </li> <li> <p> <a>GenerateDataKey</a> </p> </li> <li> <p> <a>GenerateDataKeyWithoutPlaintext</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateKeyResponse_KeyMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateKeyResponse_KeyMetadata::OAICreateKeyResponse_KeyMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateKeyResponse_KeyMetadata::OAICreateKeyResponse_KeyMetadata() {
    this->initializeModel();
}

OAICreateKeyResponse_KeyMetadata::~OAICreateKeyResponse_KeyMetadata() {}

void OAICreateKeyResponse_KeyMetadata::initializeModel() {

    m_aws_account_id_isSet = false;
    m_aws_account_id_isValid = false;

    m_key_id_isSet = false;
    m_key_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_key_usage_isSet = false;
    m_key_usage_isValid = false;

    m_key_state_isSet = false;
    m_key_state_isValid = false;

    m_deletion_date_isSet = false;
    m_deletion_date_isValid = false;

    m_valid_to_isSet = false;
    m_valid_to_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_custom_key_store_id_isSet = false;
    m_custom_key_store_id_isValid = false;

    m_cloud_hsm_cluster_id_isSet = false;
    m_cloud_hsm_cluster_id_isValid = false;

    m_expiration_model_isSet = false;
    m_expiration_model_isValid = false;

    m_key_manager_isSet = false;
    m_key_manager_isValid = false;

    m_customer_master_key_spec_isSet = false;
    m_customer_master_key_spec_isValid = false;

    m_key_spec_isSet = false;
    m_key_spec_isValid = false;

    m_encryption_algorithms_isSet = false;
    m_encryption_algorithms_isValid = false;

    m_signing_algorithms_isSet = false;
    m_signing_algorithms_isValid = false;

    m_multi_region_isSet = false;
    m_multi_region_isValid = false;

    m_multi_region_configuration_isSet = false;
    m_multi_region_configuration_isValid = false;

    m_pending_deletion_window_in_days_isSet = false;
    m_pending_deletion_window_in_days_isValid = false;

    m_mac_algorithms_isSet = false;
    m_mac_algorithms_isValid = false;

    m_xks_key_configuration_isSet = false;
    m_xks_key_configuration_isValid = false;
}

void OAICreateKeyResponse_KeyMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateKeyResponse_KeyMetadata::fromJsonObject(QJsonObject json) {

    m_aws_account_id_isValid = ::OpenAPI::fromJsonValue(m_aws_account_id, json[QString("AWSAccountId")]);
    m_aws_account_id_isSet = !json[QString("AWSAccountId")].isNull() && m_aws_account_id_isValid;

    m_key_id_isValid = ::OpenAPI::fromJsonValue(m_key_id, json[QString("KeyId")]);
    m_key_id_isSet = !json[QString("KeyId")].isNull() && m_key_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("Enabled")]);
    m_enabled_isSet = !json[QString("Enabled")].isNull() && m_enabled_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_key_usage_isValid = ::OpenAPI::fromJsonValue(m_key_usage, json[QString("KeyUsage")]);
    m_key_usage_isSet = !json[QString("KeyUsage")].isNull() && m_key_usage_isValid;

    m_key_state_isValid = ::OpenAPI::fromJsonValue(m_key_state, json[QString("KeyState")]);
    m_key_state_isSet = !json[QString("KeyState")].isNull() && m_key_state_isValid;

    m_deletion_date_isValid = ::OpenAPI::fromJsonValue(m_deletion_date, json[QString("DeletionDate")]);
    m_deletion_date_isSet = !json[QString("DeletionDate")].isNull() && m_deletion_date_isValid;

    m_valid_to_isValid = ::OpenAPI::fromJsonValue(m_valid_to, json[QString("ValidTo")]);
    m_valid_to_isSet = !json[QString("ValidTo")].isNull() && m_valid_to_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("Origin")]);
    m_origin_isSet = !json[QString("Origin")].isNull() && m_origin_isValid;

    m_custom_key_store_id_isValid = ::OpenAPI::fromJsonValue(m_custom_key_store_id, json[QString("CustomKeyStoreId")]);
    m_custom_key_store_id_isSet = !json[QString("CustomKeyStoreId")].isNull() && m_custom_key_store_id_isValid;

    m_cloud_hsm_cluster_id_isValid = ::OpenAPI::fromJsonValue(m_cloud_hsm_cluster_id, json[QString("CloudHsmClusterId")]);
    m_cloud_hsm_cluster_id_isSet = !json[QString("CloudHsmClusterId")].isNull() && m_cloud_hsm_cluster_id_isValid;

    m_expiration_model_isValid = ::OpenAPI::fromJsonValue(m_expiration_model, json[QString("ExpirationModel")]);
    m_expiration_model_isSet = !json[QString("ExpirationModel")].isNull() && m_expiration_model_isValid;

    m_key_manager_isValid = ::OpenAPI::fromJsonValue(m_key_manager, json[QString("KeyManager")]);
    m_key_manager_isSet = !json[QString("KeyManager")].isNull() && m_key_manager_isValid;

    m_customer_master_key_spec_isValid = ::OpenAPI::fromJsonValue(m_customer_master_key_spec, json[QString("CustomerMasterKeySpec")]);
    m_customer_master_key_spec_isSet = !json[QString("CustomerMasterKeySpec")].isNull() && m_customer_master_key_spec_isValid;

    m_key_spec_isValid = ::OpenAPI::fromJsonValue(m_key_spec, json[QString("KeySpec")]);
    m_key_spec_isSet = !json[QString("KeySpec")].isNull() && m_key_spec_isValid;

    m_encryption_algorithms_isValid = ::OpenAPI::fromJsonValue(m_encryption_algorithms, json[QString("EncryptionAlgorithms")]);
    m_encryption_algorithms_isSet = !json[QString("EncryptionAlgorithms")].isNull() && m_encryption_algorithms_isValid;

    m_signing_algorithms_isValid = ::OpenAPI::fromJsonValue(m_signing_algorithms, json[QString("SigningAlgorithms")]);
    m_signing_algorithms_isSet = !json[QString("SigningAlgorithms")].isNull() && m_signing_algorithms_isValid;

    m_multi_region_isValid = ::OpenAPI::fromJsonValue(m_multi_region, json[QString("MultiRegion")]);
    m_multi_region_isSet = !json[QString("MultiRegion")].isNull() && m_multi_region_isValid;

    m_multi_region_configuration_isValid = ::OpenAPI::fromJsonValue(m_multi_region_configuration, json[QString("MultiRegionConfiguration")]);
    m_multi_region_configuration_isSet = !json[QString("MultiRegionConfiguration")].isNull() && m_multi_region_configuration_isValid;

    m_pending_deletion_window_in_days_isValid = ::OpenAPI::fromJsonValue(m_pending_deletion_window_in_days, json[QString("PendingDeletionWindowInDays")]);
    m_pending_deletion_window_in_days_isSet = !json[QString("PendingDeletionWindowInDays")].isNull() && m_pending_deletion_window_in_days_isValid;

    m_mac_algorithms_isValid = ::OpenAPI::fromJsonValue(m_mac_algorithms, json[QString("MacAlgorithms")]);
    m_mac_algorithms_isSet = !json[QString("MacAlgorithms")].isNull() && m_mac_algorithms_isValid;

    m_xks_key_configuration_isValid = ::OpenAPI::fromJsonValue(m_xks_key_configuration, json[QString("XksKeyConfiguration")]);
    m_xks_key_configuration_isSet = !json[QString("XksKeyConfiguration")].isNull() && m_xks_key_configuration_isValid;
}

QString OAICreateKeyResponse_KeyMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateKeyResponse_KeyMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_aws_account_id_isSet) {
        obj.insert(QString("AWSAccountId"), ::OpenAPI::toJsonValue(m_aws_account_id));
    }
    if (m_key_id_isSet) {
        obj.insert(QString("KeyId"), ::OpenAPI::toJsonValue(m_key_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("Enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_key_usage.isSet()) {
        obj.insert(QString("KeyUsage"), ::OpenAPI::toJsonValue(m_key_usage));
    }
    if (m_key_state.isSet()) {
        obj.insert(QString("KeyState"), ::OpenAPI::toJsonValue(m_key_state));
    }
    if (m_deletion_date_isSet) {
        obj.insert(QString("DeletionDate"), ::OpenAPI::toJsonValue(m_deletion_date));
    }
    if (m_valid_to_isSet) {
        obj.insert(QString("ValidTo"), ::OpenAPI::toJsonValue(m_valid_to));
    }
    if (m_origin.isSet()) {
        obj.insert(QString("Origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_custom_key_store_id_isSet) {
        obj.insert(QString("CustomKeyStoreId"), ::OpenAPI::toJsonValue(m_custom_key_store_id));
    }
    if (m_cloud_hsm_cluster_id_isSet) {
        obj.insert(QString("CloudHsmClusterId"), ::OpenAPI::toJsonValue(m_cloud_hsm_cluster_id));
    }
    if (m_expiration_model.isSet()) {
        obj.insert(QString("ExpirationModel"), ::OpenAPI::toJsonValue(m_expiration_model));
    }
    if (m_key_manager.isSet()) {
        obj.insert(QString("KeyManager"), ::OpenAPI::toJsonValue(m_key_manager));
    }
    if (m_customer_master_key_spec.isSet()) {
        obj.insert(QString("CustomerMasterKeySpec"), ::OpenAPI::toJsonValue(m_customer_master_key_spec));
    }
    if (m_key_spec.isSet()) {
        obj.insert(QString("KeySpec"), ::OpenAPI::toJsonValue(m_key_spec));
    }
    if (m_encryption_algorithms.isSet()) {
        obj.insert(QString("EncryptionAlgorithms"), ::OpenAPI::toJsonValue(m_encryption_algorithms));
    }
    if (m_signing_algorithms.isSet()) {
        obj.insert(QString("SigningAlgorithms"), ::OpenAPI::toJsonValue(m_signing_algorithms));
    }
    if (m_multi_region_isSet) {
        obj.insert(QString("MultiRegion"), ::OpenAPI::toJsonValue(m_multi_region));
    }
    if (m_multi_region_configuration.isSet()) {
        obj.insert(QString("MultiRegionConfiguration"), ::OpenAPI::toJsonValue(m_multi_region_configuration));
    }
    if (m_pending_deletion_window_in_days_isSet) {
        obj.insert(QString("PendingDeletionWindowInDays"), ::OpenAPI::toJsonValue(m_pending_deletion_window_in_days));
    }
    if (m_mac_algorithms.isSet()) {
        obj.insert(QString("MacAlgorithms"), ::OpenAPI::toJsonValue(m_mac_algorithms));
    }
    if (m_xks_key_configuration.isSet()) {
        obj.insert(QString("XksKeyConfiguration"), ::OpenAPI::toJsonValue(m_xks_key_configuration));
    }
    return obj;
}

QString OAICreateKeyResponse_KeyMetadata::getAwsAccountId() const {
    return m_aws_account_id;
}
void OAICreateKeyResponse_KeyMetadata::setAwsAccountId(const QString &aws_account_id) {
    m_aws_account_id = aws_account_id;
    m_aws_account_id_isSet = true;
}

bool OAICreateKeyResponse_KeyMetadata::is_aws_account_id_Set() const{
    return m_aws_account_id_isSet;
}

bool OAICreateKeyResponse_KeyMetadata::is_aws_account_id_Valid() const{
    return m_aws_account_id_isValid;
}

QString OAICreateKeyResponse_KeyMetadata::getKeyId() const {
    return m_key_id;
}
void OAICreateKeyResponse_KeyMetadata::setKeyId(const QString &key_id) {
    m_key_id = key_id;
    m_key_id_isSet = true;
}

bool OAICreateKeyResponse_KeyMetadata::is_key_id_Set() const{
    return m_key_id_isSet;
}

bool OAICreateKeyResponse_KeyMetadata::is_key_id_Valid() const{
    return m_key_id_isValid;
}

QString OAICreateKeyResponse_KeyMetadata::getArn() const {
    return m_arn;
}
void OAICreateKeyResponse_KeyMetadata::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICreateKeyResponse_KeyMetadata::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICreateKeyResponse_KeyMetadata::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAICreateKeyResponse_KeyMetadata::getCreationDate() const {
    return m_creation_date;
}
void OAICreateKeyResponse_KeyMetadata::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAICreateKeyResponse_KeyMetadata::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAICreateKeyResponse_KeyMetadata::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

bool OAICreateKeyResponse_KeyMetadata::getEnabled() const {
    return m_enabled;
}
void OAICreateKeyResponse_KeyMetadata::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAICreateKeyResponse_KeyMetadata::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAICreateKeyResponse_KeyMetadata::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAICreateKeyResponse_KeyMetadata::getDescription() const {
    return m_description;
}
void OAICreateKeyResponse_KeyMetadata::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateKeyResponse_KeyMetadata::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateKeyResponse_KeyMetadata::is_description_Valid() const{
    return m_description_isValid;
}

OAIKeyUsageType OAICreateKeyResponse_KeyMetadata::getKeyUsage() const {
    return m_key_usage;
}
void OAICreateKeyResponse_KeyMetadata::setKeyUsage(const OAIKeyUsageType &key_usage) {
    m_key_usage = key_usage;
    m_key_usage_isSet = true;
}

bool OAICreateKeyResponse_KeyMetadata::is_key_usage_Set() const{
    return m_key_usage_isSet;
}

bool OAICreateKeyResponse_KeyMetadata::is_key_usage_Valid() const{
    return m_key_usage_isValid;
}

OAIKeyState OAICreateKeyResponse_KeyMetadata::getKeyState() const {
    return m_key_state;
}
void OAICreateKeyResponse_KeyMetadata::setKeyState(const OAIKeyState &key_state) {
    m_key_state = key_state;
    m_key_state_isSet = true;
}

bool OAICreateKeyResponse_KeyMetadata::is_key_state_Set() const{
    return m_key_state_isSet;
}

bool OAICreateKeyResponse_KeyMetadata::is_key_state_Valid() const{
    return m_key_state_isValid;
}

QDateTime OAICreateKeyResponse_KeyMetadata::getDeletionDate() const {
    return m_deletion_date;
}
void OAICreateKeyResponse_KeyMetadata::setDeletionDate(const QDateTime &deletion_date) {
    m_deletion_date = deletion_date;
    m_deletion_date_isSet = true;
}

bool OAICreateKeyResponse_KeyMetadata::is_deletion_date_Set() const{
    return m_deletion_date_isSet;
}

bool OAICreateKeyResponse_KeyMetadata::is_deletion_date_Valid() const{
    return m_deletion_date_isValid;
}

QDateTime OAICreateKeyResponse_KeyMetadata::getValidTo() const {
    return m_valid_to;
}
void OAICreateKeyResponse_KeyMetadata::setValidTo(const QDateTime &valid_to) {
    m_valid_to = valid_to;
    m_valid_to_isSet = true;
}

bool OAICreateKeyResponse_KeyMetadata::is_valid_to_Set() const{
    return m_valid_to_isSet;
}

bool OAICreateKeyResponse_KeyMetadata::is_valid_to_Valid() const{
    return m_valid_to_isValid;
}

OAIOriginType OAICreateKeyResponse_KeyMetadata::getOrigin() const {
    return m_origin;
}
void OAICreateKeyResponse_KeyMetadata::setOrigin(const OAIOriginType &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAICreateKeyResponse_KeyMetadata::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAICreateKeyResponse_KeyMetadata::is_origin_Valid() const{
    return m_origin_isValid;
}

QString OAICreateKeyResponse_KeyMetadata::getCustomKeyStoreId() const {
    return m_custom_key_store_id;
}
void OAICreateKeyResponse_KeyMetadata::setCustomKeyStoreId(const QString &custom_key_store_id) {
    m_custom_key_store_id = custom_key_store_id;
    m_custom_key_store_id_isSet = true;
}

bool OAICreateKeyResponse_KeyMetadata::is_custom_key_store_id_Set() const{
    return m_custom_key_store_id_isSet;
}

bool OAICreateKeyResponse_KeyMetadata::is_custom_key_store_id_Valid() const{
    return m_custom_key_store_id_isValid;
}

QString OAICreateKeyResponse_KeyMetadata::getCloudHsmClusterId() const {
    return m_cloud_hsm_cluster_id;
}
void OAICreateKeyResponse_KeyMetadata::setCloudHsmClusterId(const QString &cloud_hsm_cluster_id) {
    m_cloud_hsm_cluster_id = cloud_hsm_cluster_id;
    m_cloud_hsm_cluster_id_isSet = true;
}

bool OAICreateKeyResponse_KeyMetadata::is_cloud_hsm_cluster_id_Set() const{
    return m_cloud_hsm_cluster_id_isSet;
}

bool OAICreateKeyResponse_KeyMetadata::is_cloud_hsm_cluster_id_Valid() const{
    return m_cloud_hsm_cluster_id_isValid;
}

OAIExpirationModelType OAICreateKeyResponse_KeyMetadata::getExpirationModel() const {
    return m_expiration_model;
}
void OAICreateKeyResponse_KeyMetadata::setExpirationModel(const OAIExpirationModelType &expiration_model) {
    m_expiration_model = expiration_model;
    m_expiration_model_isSet = true;
}

bool OAICreateKeyResponse_KeyMetadata::is_expiration_model_Set() const{
    return m_expiration_model_isSet;
}

bool OAICreateKeyResponse_KeyMetadata::is_expiration_model_Valid() const{
    return m_expiration_model_isValid;
}

OAIKeyManagerType OAICreateKeyResponse_KeyMetadata::getKeyManager() const {
    return m_key_manager;
}
void OAICreateKeyResponse_KeyMetadata::setKeyManager(const OAIKeyManagerType &key_manager) {
    m_key_manager = key_manager;
    m_key_manager_isSet = true;
}

bool OAICreateKeyResponse_KeyMetadata::is_key_manager_Set() const{
    return m_key_manager_isSet;
}

bool OAICreateKeyResponse_KeyMetadata::is_key_manager_Valid() const{
    return m_key_manager_isValid;
}

OAICustomerMasterKeySpec OAICreateKeyResponse_KeyMetadata::getCustomerMasterKeySpec() const {
    return m_customer_master_key_spec;
}
void OAICreateKeyResponse_KeyMetadata::setCustomerMasterKeySpec(const OAICustomerMasterKeySpec &customer_master_key_spec) {
    m_customer_master_key_spec = customer_master_key_spec;
    m_customer_master_key_spec_isSet = true;
}

bool OAICreateKeyResponse_KeyMetadata::is_customer_master_key_spec_Set() const{
    return m_customer_master_key_spec_isSet;
}

bool OAICreateKeyResponse_KeyMetadata::is_customer_master_key_spec_Valid() const{
    return m_customer_master_key_spec_isValid;
}

OAIKeySpec OAICreateKeyResponse_KeyMetadata::getKeySpec() const {
    return m_key_spec;
}
void OAICreateKeyResponse_KeyMetadata::setKeySpec(const OAIKeySpec &key_spec) {
    m_key_spec = key_spec;
    m_key_spec_isSet = true;
}

bool OAICreateKeyResponse_KeyMetadata::is_key_spec_Set() const{
    return m_key_spec_isSet;
}

bool OAICreateKeyResponse_KeyMetadata::is_key_spec_Valid() const{
    return m_key_spec_isValid;
}

QList OAICreateKeyResponse_KeyMetadata::getEncryptionAlgorithms() const {
    return m_encryption_algorithms;
}
void OAICreateKeyResponse_KeyMetadata::setEncryptionAlgorithms(const QList &encryption_algorithms) {
    m_encryption_algorithms = encryption_algorithms;
    m_encryption_algorithms_isSet = true;
}

bool OAICreateKeyResponse_KeyMetadata::is_encryption_algorithms_Set() const{
    return m_encryption_algorithms_isSet;
}

bool OAICreateKeyResponse_KeyMetadata::is_encryption_algorithms_Valid() const{
    return m_encryption_algorithms_isValid;
}

QList OAICreateKeyResponse_KeyMetadata::getSigningAlgorithms() const {
    return m_signing_algorithms;
}
void OAICreateKeyResponse_KeyMetadata::setSigningAlgorithms(const QList &signing_algorithms) {
    m_signing_algorithms = signing_algorithms;
    m_signing_algorithms_isSet = true;
}

bool OAICreateKeyResponse_KeyMetadata::is_signing_algorithms_Set() const{
    return m_signing_algorithms_isSet;
}

bool OAICreateKeyResponse_KeyMetadata::is_signing_algorithms_Valid() const{
    return m_signing_algorithms_isValid;
}

bool OAICreateKeyResponse_KeyMetadata::getMultiRegion() const {
    return m_multi_region;
}
void OAICreateKeyResponse_KeyMetadata::setMultiRegion(const bool &multi_region) {
    m_multi_region = multi_region;
    m_multi_region_isSet = true;
}

bool OAICreateKeyResponse_KeyMetadata::is_multi_region_Set() const{
    return m_multi_region_isSet;
}

bool OAICreateKeyResponse_KeyMetadata::is_multi_region_Valid() const{
    return m_multi_region_isValid;
}

OAIKeyMetadata_MultiRegionConfiguration OAICreateKeyResponse_KeyMetadata::getMultiRegionConfiguration() const {
    return m_multi_region_configuration;
}
void OAICreateKeyResponse_KeyMetadata::setMultiRegionConfiguration(const OAIKeyMetadata_MultiRegionConfiguration &multi_region_configuration) {
    m_multi_region_configuration = multi_region_configuration;
    m_multi_region_configuration_isSet = true;
}

bool OAICreateKeyResponse_KeyMetadata::is_multi_region_configuration_Set() const{
    return m_multi_region_configuration_isSet;
}

bool OAICreateKeyResponse_KeyMetadata::is_multi_region_configuration_Valid() const{
    return m_multi_region_configuration_isValid;
}

qint32 OAICreateKeyResponse_KeyMetadata::getPendingDeletionWindowInDays() const {
    return m_pending_deletion_window_in_days;
}
void OAICreateKeyResponse_KeyMetadata::setPendingDeletionWindowInDays(const qint32 &pending_deletion_window_in_days) {
    m_pending_deletion_window_in_days = pending_deletion_window_in_days;
    m_pending_deletion_window_in_days_isSet = true;
}

bool OAICreateKeyResponse_KeyMetadata::is_pending_deletion_window_in_days_Set() const{
    return m_pending_deletion_window_in_days_isSet;
}

bool OAICreateKeyResponse_KeyMetadata::is_pending_deletion_window_in_days_Valid() const{
    return m_pending_deletion_window_in_days_isValid;
}

QList OAICreateKeyResponse_KeyMetadata::getMacAlgorithms() const {
    return m_mac_algorithms;
}
void OAICreateKeyResponse_KeyMetadata::setMacAlgorithms(const QList &mac_algorithms) {
    m_mac_algorithms = mac_algorithms;
    m_mac_algorithms_isSet = true;
}

bool OAICreateKeyResponse_KeyMetadata::is_mac_algorithms_Set() const{
    return m_mac_algorithms_isSet;
}

bool OAICreateKeyResponse_KeyMetadata::is_mac_algorithms_Valid() const{
    return m_mac_algorithms_isValid;
}

OAIKeyMetadata_XksKeyConfiguration OAICreateKeyResponse_KeyMetadata::getXksKeyConfiguration() const {
    return m_xks_key_configuration;
}
void OAICreateKeyResponse_KeyMetadata::setXksKeyConfiguration(const OAIKeyMetadata_XksKeyConfiguration &xks_key_configuration) {
    m_xks_key_configuration = xks_key_configuration;
    m_xks_key_configuration_isSet = true;
}

bool OAICreateKeyResponse_KeyMetadata::is_xks_key_configuration_Set() const{
    return m_xks_key_configuration_isSet;
}

bool OAICreateKeyResponse_KeyMetadata::is_xks_key_configuration_Valid() const{
    return m_xks_key_configuration_isValid;
}

bool OAICreateKeyResponse_KeyMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aws_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletion_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_key_store_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_hsm_cluster_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_manager.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_master_key_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_algorithms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_signing_algorithms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_region_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_deletion_window_in_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac_algorithms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_xks_key_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateKeyResponse_KeyMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_key_id_isValid && true;
}

} // namespace OpenAPI
