/**
 * AWS Key Management Service
 * <fullname>Key Management Service</fullname> <p>Key Management Service (KMS) is an encryption and key management web service. This guide describes the KMS operations that you can call programmatically. For general information about KMS, see the <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/\"> <i>Key Management Service Developer Guide</i> </a>.</p> <note> <p>KMS has replaced the term <i>customer master key (CMK)</i> with <i>KMS key</i> and <i>KMS key</i>. The concept has not changed. To prevent breaking changes, KMS is keeping some variations of this term.</p> <p>Amazon Web Services provides SDKs that consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .Net, macOS, Android, etc.). The SDKs provide a convenient way to create programmatic access to KMS and other Amazon Web Services services. For example, the SDKs take care of tasks such as signing requests (see below), managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> </note> <p>We recommend that you use the Amazon Web Services SDKs to make programmatic API calls to KMS.</p> <p>If you need to use FIPS 140-2 validated cryptographic modules when communicating with Amazon Web Services, use the FIPS endpoint in your preferred Amazon Web Services Region. For more information about the available FIPS endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/kms.html#kms_region\">Service endpoints</a> in the Key Management Service topic of the <i>Amazon Web Services General Reference</i>.</p> <p>All KMS API calls must be signed and be transmitted using Transport Layer Security (TLS). KMS recommends you always use the latest supported TLS version. Clients must also support cipher suites with Perfect Forward Secrecy (PFS) such as Ephemeral Diffie-Hellman (DHE) or Elliptic Curve Ephemeral Diffie-Hellman (ECDHE). Most modern systems such as Java 7 and later support these modes.</p> <p> <b>Signing Requests</b> </p> <p>Requests must be signed using an access key ID and a secret access key. We strongly recommend that you do not use your Amazon Web Services account root access key ID and secret access key for everyday work. You can use the access key ID and secret access key for an IAM user or you can use the Security Token Service (STS) to generate temporary security credentials and use those to sign requests. </p> <p>All KMS requests must be signed with <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4</a>.</p> <p> <b>Logging API Requests</b> </p> <p>KMS supports CloudTrail, a service that logs Amazon Web Services API calls and related events for your Amazon Web Services account and delivers them to an Amazon S3 bucket that you specify. By using the information collected by CloudTrail, you can determine what requests were made to KMS, who made the request, when it was made, and so on. To learn more about CloudTrail, including how to turn it on and find your log files, see the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/\">CloudTrail User Guide</a>.</p> <p> <b>Additional Resources</b> </p> <p>For more information about credentials and request signing, see the following:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html\">Amazon Web Services Security Credentials</a> - This topic provides general information about the types of credentials used to access Amazon Web Services.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html\">Temporary Security Credentials</a> - This section of the <i>IAM User Guide</i> describes how to create and use temporary security credentials.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 Signing Process</a> - This set of topics walks you through the process of signing a request using an access key ID and a secret access key.</p> </li> </ul> <p> <b>Commonly Used API Operations</b> </p> <p>Of the API operations discussed in this guide, the following will prove the most useful for most applications. You will likely perform operations other than these, such as creating keys and assigning policies, by using the console.</p> <ul> <li> <p> <a>Encrypt</a> </p> </li> <li> <p> <a>Decrypt</a> </p> </li> <li> <p> <a>GenerateDataKey</a> </p> </li> <li> <p> <a>GenerateDataKeyWithoutPlaintext</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIReplicateKeyResponse_ReplicaKeyMetadata.h
 *
 * 
 */

#ifndef OAIReplicateKeyResponse_ReplicaKeyMetadata_H
#define OAIReplicateKeyResponse_ReplicaKeyMetadata_H

#include <QJsonObject>

#include "OAICustomerMasterKeySpec.h"
#include "OAIExpirationModelType.h"
#include "OAIKeyManagerType.h"
#include "OAIKeyMetadata_MultiRegionConfiguration.h"
#include "OAIKeyMetadata_XksKeyConfiguration.h"
#include "OAIKeySpec.h"
#include "OAIKeyState.h"
#include "OAIKeyUsageType.h"
#include "OAIOriginType.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIKeyMetadata_MultiRegionConfiguration;
class OAIKeyMetadata_XksKeyConfiguration;

class OAIReplicateKeyResponse_ReplicaKeyMetadata : public OAIObject {
public:
    OAIReplicateKeyResponse_ReplicaKeyMetadata();
    OAIReplicateKeyResponse_ReplicaKeyMetadata(QString json);
    ~OAIReplicateKeyResponse_ReplicaKeyMetadata() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAwsAccountId() const;
    void setAwsAccountId(const QString &aws_account_id);
    bool is_aws_account_id_Set() const;
    bool is_aws_account_id_Valid() const;

    QString getKeyId() const;
    void setKeyId(const QString &key_id);
    bool is_key_id_Set() const;
    bool is_key_id_Valid() const;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QDateTime getCreationDate() const;
    void setCreationDate(const QDateTime &creation_date);
    bool is_creation_date_Set() const;
    bool is_creation_date_Valid() const;

    bool getEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIKeyUsageType getKeyUsage() const;
    void setKeyUsage(const OAIKeyUsageType &key_usage);
    bool is_key_usage_Set() const;
    bool is_key_usage_Valid() const;

    OAIKeyState getKeyState() const;
    void setKeyState(const OAIKeyState &key_state);
    bool is_key_state_Set() const;
    bool is_key_state_Valid() const;

    QDateTime getDeletionDate() const;
    void setDeletionDate(const QDateTime &deletion_date);
    bool is_deletion_date_Set() const;
    bool is_deletion_date_Valid() const;

    QDateTime getValidTo() const;
    void setValidTo(const QDateTime &valid_to);
    bool is_valid_to_Set() const;
    bool is_valid_to_Valid() const;

    OAIOriginType getOrigin() const;
    void setOrigin(const OAIOriginType &origin);
    bool is_origin_Set() const;
    bool is_origin_Valid() const;

    QString getCustomKeyStoreId() const;
    void setCustomKeyStoreId(const QString &custom_key_store_id);
    bool is_custom_key_store_id_Set() const;
    bool is_custom_key_store_id_Valid() const;

    QString getCloudHsmClusterId() const;
    void setCloudHsmClusterId(const QString &cloud_hsm_cluster_id);
    bool is_cloud_hsm_cluster_id_Set() const;
    bool is_cloud_hsm_cluster_id_Valid() const;

    OAIExpirationModelType getExpirationModel() const;
    void setExpirationModel(const OAIExpirationModelType &expiration_model);
    bool is_expiration_model_Set() const;
    bool is_expiration_model_Valid() const;

    OAIKeyManagerType getKeyManager() const;
    void setKeyManager(const OAIKeyManagerType &key_manager);
    bool is_key_manager_Set() const;
    bool is_key_manager_Valid() const;

    OAICustomerMasterKeySpec getCustomerMasterKeySpec() const;
    void setCustomerMasterKeySpec(const OAICustomerMasterKeySpec &customer_master_key_spec);
    bool is_customer_master_key_spec_Set() const;
    bool is_customer_master_key_spec_Valid() const;

    OAIKeySpec getKeySpec() const;
    void setKeySpec(const OAIKeySpec &key_spec);
    bool is_key_spec_Set() const;
    bool is_key_spec_Valid() const;

    QList getEncryptionAlgorithms() const;
    void setEncryptionAlgorithms(const QList &encryption_algorithms);
    bool is_encryption_algorithms_Set() const;
    bool is_encryption_algorithms_Valid() const;

    QList getSigningAlgorithms() const;
    void setSigningAlgorithms(const QList &signing_algorithms);
    bool is_signing_algorithms_Set() const;
    bool is_signing_algorithms_Valid() const;

    bool getMultiRegion() const;
    void setMultiRegion(const bool &multi_region);
    bool is_multi_region_Set() const;
    bool is_multi_region_Valid() const;

    OAIKeyMetadata_MultiRegionConfiguration getMultiRegionConfiguration() const;
    void setMultiRegionConfiguration(const OAIKeyMetadata_MultiRegionConfiguration &multi_region_configuration);
    bool is_multi_region_configuration_Set() const;
    bool is_multi_region_configuration_Valid() const;

    qint32 getPendingDeletionWindowInDays() const;
    void setPendingDeletionWindowInDays(const qint32 &pending_deletion_window_in_days);
    bool is_pending_deletion_window_in_days_Set() const;
    bool is_pending_deletion_window_in_days_Valid() const;

    QList getMacAlgorithms() const;
    void setMacAlgorithms(const QList &mac_algorithms);
    bool is_mac_algorithms_Set() const;
    bool is_mac_algorithms_Valid() const;

    OAIKeyMetadata_XksKeyConfiguration getXksKeyConfiguration() const;
    void setXksKeyConfiguration(const OAIKeyMetadata_XksKeyConfiguration &xks_key_configuration);
    bool is_xks_key_configuration_Set() const;
    bool is_xks_key_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_aws_account_id;
    bool m_aws_account_id_isSet;
    bool m_aws_account_id_isValid;

    QString m_key_id;
    bool m_key_id_isSet;
    bool m_key_id_isValid;

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QDateTime m_creation_date;
    bool m_creation_date_isSet;
    bool m_creation_date_isValid;

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIKeyUsageType m_key_usage;
    bool m_key_usage_isSet;
    bool m_key_usage_isValid;

    OAIKeyState m_key_state;
    bool m_key_state_isSet;
    bool m_key_state_isValid;

    QDateTime m_deletion_date;
    bool m_deletion_date_isSet;
    bool m_deletion_date_isValid;

    QDateTime m_valid_to;
    bool m_valid_to_isSet;
    bool m_valid_to_isValid;

    OAIOriginType m_origin;
    bool m_origin_isSet;
    bool m_origin_isValid;

    QString m_custom_key_store_id;
    bool m_custom_key_store_id_isSet;
    bool m_custom_key_store_id_isValid;

    QString m_cloud_hsm_cluster_id;
    bool m_cloud_hsm_cluster_id_isSet;
    bool m_cloud_hsm_cluster_id_isValid;

    OAIExpirationModelType m_expiration_model;
    bool m_expiration_model_isSet;
    bool m_expiration_model_isValid;

    OAIKeyManagerType m_key_manager;
    bool m_key_manager_isSet;
    bool m_key_manager_isValid;

    OAICustomerMasterKeySpec m_customer_master_key_spec;
    bool m_customer_master_key_spec_isSet;
    bool m_customer_master_key_spec_isValid;

    OAIKeySpec m_key_spec;
    bool m_key_spec_isSet;
    bool m_key_spec_isValid;

    QList m_encryption_algorithms;
    bool m_encryption_algorithms_isSet;
    bool m_encryption_algorithms_isValid;

    QList m_signing_algorithms;
    bool m_signing_algorithms_isSet;
    bool m_signing_algorithms_isValid;

    bool m_multi_region;
    bool m_multi_region_isSet;
    bool m_multi_region_isValid;

    OAIKeyMetadata_MultiRegionConfiguration m_multi_region_configuration;
    bool m_multi_region_configuration_isSet;
    bool m_multi_region_configuration_isValid;

    qint32 m_pending_deletion_window_in_days;
    bool m_pending_deletion_window_in_days_isSet;
    bool m_pending_deletion_window_in_days_isValid;

    QList m_mac_algorithms;
    bool m_mac_algorithms_isSet;
    bool m_mac_algorithms_isValid;

    OAIKeyMetadata_XksKeyConfiguration m_xks_key_configuration;
    bool m_xks_key_configuration_isSet;
    bool m_xks_key_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIReplicateKeyResponse_ReplicaKeyMetadata)

#endif // OAIReplicateKeyResponse_ReplicaKeyMetadata_H
