/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigureLogsForPlaybackConfiguration_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigureLogsForPlaybackConfiguration_request::OAIConfigureLogsForPlaybackConfiguration_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigureLogsForPlaybackConfiguration_request::OAIConfigureLogsForPlaybackConfiguration_request() {
    this->initializeModel();
}

OAIConfigureLogsForPlaybackConfiguration_request::~OAIConfigureLogsForPlaybackConfiguration_request() {}

void OAIConfigureLogsForPlaybackConfiguration_request::initializeModel() {

    m_percent_enabled_isSet = false;
    m_percent_enabled_isValid = false;

    m_playback_configuration_name_isSet = false;
    m_playback_configuration_name_isValid = false;
}

void OAIConfigureLogsForPlaybackConfiguration_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigureLogsForPlaybackConfiguration_request::fromJsonObject(QJsonObject json) {

    m_percent_enabled_isValid = ::OpenAPI::fromJsonValue(m_percent_enabled, json[QString("PercentEnabled")]);
    m_percent_enabled_isSet = !json[QString("PercentEnabled")].isNull() && m_percent_enabled_isValid;

    m_playback_configuration_name_isValid = ::OpenAPI::fromJsonValue(m_playback_configuration_name, json[QString("PlaybackConfigurationName")]);
    m_playback_configuration_name_isSet = !json[QString("PlaybackConfigurationName")].isNull() && m_playback_configuration_name_isValid;
}

QString OAIConfigureLogsForPlaybackConfiguration_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigureLogsForPlaybackConfiguration_request::asJsonObject() const {
    QJsonObject obj;
    if (m_percent_enabled_isSet) {
        obj.insert(QString("PercentEnabled"), ::OpenAPI::toJsonValue(m_percent_enabled));
    }
    if (m_playback_configuration_name_isSet) {
        obj.insert(QString("PlaybackConfigurationName"), ::OpenAPI::toJsonValue(m_playback_configuration_name));
    }
    return obj;
}

qint32 OAIConfigureLogsForPlaybackConfiguration_request::getPercentEnabled() const {
    return m_percent_enabled;
}
void OAIConfigureLogsForPlaybackConfiguration_request::setPercentEnabled(const qint32 &percent_enabled) {
    m_percent_enabled = percent_enabled;
    m_percent_enabled_isSet = true;
}

bool OAIConfigureLogsForPlaybackConfiguration_request::is_percent_enabled_Set() const{
    return m_percent_enabled_isSet;
}

bool OAIConfigureLogsForPlaybackConfiguration_request::is_percent_enabled_Valid() const{
    return m_percent_enabled_isValid;
}

QString OAIConfigureLogsForPlaybackConfiguration_request::getPlaybackConfigurationName() const {
    return m_playback_configuration_name;
}
void OAIConfigureLogsForPlaybackConfiguration_request::setPlaybackConfigurationName(const QString &playback_configuration_name) {
    m_playback_configuration_name = playback_configuration_name;
    m_playback_configuration_name_isSet = true;
}

bool OAIConfigureLogsForPlaybackConfiguration_request::is_playback_configuration_name_Set() const{
    return m_playback_configuration_name_isSet;
}

bool OAIConfigureLogsForPlaybackConfiguration_request::is_playback_configuration_name_Valid() const{
    return m_playback_configuration_name_isValid;
}

bool OAIConfigureLogsForPlaybackConfiguration_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_percent_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playback_configuration_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigureLogsForPlaybackConfiguration_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_percent_enabled_isValid && m_playback_configuration_name_isValid && true;
}

} // namespace OpenAPI
