/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateSourceLocationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateSourceLocationResponse::OAIUpdateSourceLocationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateSourceLocationResponse::OAIUpdateSourceLocationResponse() {
    this->initializeModel();
}

OAIUpdateSourceLocationResponse::~OAIUpdateSourceLocationResponse() {}

void OAIUpdateSourceLocationResponse::initializeModel() {

    m_access_configuration_isSet = false;
    m_access_configuration_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_default_segment_delivery_configuration_isSet = false;
    m_default_segment_delivery_configuration_isValid = false;

    m_http_configuration_isSet = false;
    m_http_configuration_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_segment_delivery_configurations_isSet = false;
    m_segment_delivery_configurations_isValid = false;

    m_source_location_name_isSet = false;
    m_source_location_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIUpdateSourceLocationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateSourceLocationResponse::fromJsonObject(QJsonObject json) {

    m_access_configuration_isValid = ::OpenAPI::fromJsonValue(m_access_configuration, json[QString("AccessConfiguration")]);
    m_access_configuration_isSet = !json[QString("AccessConfiguration")].isNull() && m_access_configuration_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_default_segment_delivery_configuration_isValid = ::OpenAPI::fromJsonValue(m_default_segment_delivery_configuration, json[QString("DefaultSegmentDeliveryConfiguration")]);
    m_default_segment_delivery_configuration_isSet = !json[QString("DefaultSegmentDeliveryConfiguration")].isNull() && m_default_segment_delivery_configuration_isValid;

    m_http_configuration_isValid = ::OpenAPI::fromJsonValue(m_http_configuration, json[QString("HttpConfiguration")]);
    m_http_configuration_isSet = !json[QString("HttpConfiguration")].isNull() && m_http_configuration_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_segment_delivery_configurations_isValid = ::OpenAPI::fromJsonValue(m_segment_delivery_configurations, json[QString("SegmentDeliveryConfigurations")]);
    m_segment_delivery_configurations_isSet = !json[QString("SegmentDeliveryConfigurations")].isNull() && m_segment_delivery_configurations_isValid;

    m_source_location_name_isValid = ::OpenAPI::fromJsonValue(m_source_location_name, json[QString("SourceLocationName")]);
    m_source_location_name_isSet = !json[QString("SourceLocationName")].isNull() && m_source_location_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIUpdateSourceLocationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateSourceLocationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_access_configuration.isSet()) {
        obj.insert(QString("AccessConfiguration"), ::OpenAPI::toJsonValue(m_access_configuration));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_default_segment_delivery_configuration.isSet()) {
        obj.insert(QString("DefaultSegmentDeliveryConfiguration"), ::OpenAPI::toJsonValue(m_default_segment_delivery_configuration));
    }
    if (m_http_configuration.isSet()) {
        obj.insert(QString("HttpConfiguration"), ::OpenAPI::toJsonValue(m_http_configuration));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_segment_delivery_configurations.isSet()) {
        obj.insert(QString("SegmentDeliveryConfigurations"), ::OpenAPI::toJsonValue(m_segment_delivery_configurations));
    }
    if (m_source_location_name_isSet) {
        obj.insert(QString("SourceLocationName"), ::OpenAPI::toJsonValue(m_source_location_name));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAICreateSourceLocationResponse_AccessConfiguration OAIUpdateSourceLocationResponse::getAccessConfiguration() const {
    return m_access_configuration;
}
void OAIUpdateSourceLocationResponse::setAccessConfiguration(const OAICreateSourceLocationResponse_AccessConfiguration &access_configuration) {
    m_access_configuration = access_configuration;
    m_access_configuration_isSet = true;
}

bool OAIUpdateSourceLocationResponse::is_access_configuration_Set() const{
    return m_access_configuration_isSet;
}

bool OAIUpdateSourceLocationResponse::is_access_configuration_Valid() const{
    return m_access_configuration_isValid;
}

QString OAIUpdateSourceLocationResponse::getArn() const {
    return m_arn;
}
void OAIUpdateSourceLocationResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIUpdateSourceLocationResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIUpdateSourceLocationResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIUpdateSourceLocationResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIUpdateSourceLocationResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIUpdateSourceLocationResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIUpdateSourceLocationResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

OAIUpdateSourceLocationResponse_DefaultSegmentDeliveryConfiguration OAIUpdateSourceLocationResponse::getDefaultSegmentDeliveryConfiguration() const {
    return m_default_segment_delivery_configuration;
}
void OAIUpdateSourceLocationResponse::setDefaultSegmentDeliveryConfiguration(const OAIUpdateSourceLocationResponse_DefaultSegmentDeliveryConfiguration &default_segment_delivery_configuration) {
    m_default_segment_delivery_configuration = default_segment_delivery_configuration;
    m_default_segment_delivery_configuration_isSet = true;
}

bool OAIUpdateSourceLocationResponse::is_default_segment_delivery_configuration_Set() const{
    return m_default_segment_delivery_configuration_isSet;
}

bool OAIUpdateSourceLocationResponse::is_default_segment_delivery_configuration_Valid() const{
    return m_default_segment_delivery_configuration_isValid;
}

OAIUpdateSourceLocationResponse_HttpConfiguration OAIUpdateSourceLocationResponse::getHttpConfiguration() const {
    return m_http_configuration;
}
void OAIUpdateSourceLocationResponse::setHttpConfiguration(const OAIUpdateSourceLocationResponse_HttpConfiguration &http_configuration) {
    m_http_configuration = http_configuration;
    m_http_configuration_isSet = true;
}

bool OAIUpdateSourceLocationResponse::is_http_configuration_Set() const{
    return m_http_configuration_isSet;
}

bool OAIUpdateSourceLocationResponse::is_http_configuration_Valid() const{
    return m_http_configuration_isValid;
}

QDateTime OAIUpdateSourceLocationResponse::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIUpdateSourceLocationResponse::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIUpdateSourceLocationResponse::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIUpdateSourceLocationResponse::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QList OAIUpdateSourceLocationResponse::getSegmentDeliveryConfigurations() const {
    return m_segment_delivery_configurations;
}
void OAIUpdateSourceLocationResponse::setSegmentDeliveryConfigurations(const QList &segment_delivery_configurations) {
    m_segment_delivery_configurations = segment_delivery_configurations;
    m_segment_delivery_configurations_isSet = true;
}

bool OAIUpdateSourceLocationResponse::is_segment_delivery_configurations_Set() const{
    return m_segment_delivery_configurations_isSet;
}

bool OAIUpdateSourceLocationResponse::is_segment_delivery_configurations_Valid() const{
    return m_segment_delivery_configurations_isValid;
}

QString OAIUpdateSourceLocationResponse::getSourceLocationName() const {
    return m_source_location_name;
}
void OAIUpdateSourceLocationResponse::setSourceLocationName(const QString &source_location_name) {
    m_source_location_name = source_location_name;
    m_source_location_name_isSet = true;
}

bool OAIUpdateSourceLocationResponse::is_source_location_name_Set() const{
    return m_source_location_name_isSet;
}

bool OAIUpdateSourceLocationResponse::is_source_location_name_Valid() const{
    return m_source_location_name_isValid;
}

QMap OAIUpdateSourceLocationResponse::getTags() const {
    return m_tags;
}
void OAIUpdateSourceLocationResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIUpdateSourceLocationResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIUpdateSourceLocationResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIUpdateSourceLocationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_segment_delivery_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_delivery_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_location_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateSourceLocationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
