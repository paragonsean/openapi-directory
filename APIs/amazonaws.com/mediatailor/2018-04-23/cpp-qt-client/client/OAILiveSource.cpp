/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILiveSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILiveSource::OAILiveSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILiveSource::OAILiveSource() {
    this->initializeModel();
}

OAILiveSource::~OAILiveSource() {}

void OAILiveSource::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_http_package_configurations_isSet = false;
    m_http_package_configurations_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_live_source_name_isSet = false;
    m_live_source_name_isValid = false;

    m_source_location_name_isSet = false;
    m_source_location_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAILiveSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILiveSource::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_http_package_configurations_isValid = ::OpenAPI::fromJsonValue(m_http_package_configurations, json[QString("HttpPackageConfigurations")]);
    m_http_package_configurations_isSet = !json[QString("HttpPackageConfigurations")].isNull() && m_http_package_configurations_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_live_source_name_isValid = ::OpenAPI::fromJsonValue(m_live_source_name, json[QString("LiveSourceName")]);
    m_live_source_name_isSet = !json[QString("LiveSourceName")].isNull() && m_live_source_name_isValid;

    m_source_location_name_isValid = ::OpenAPI::fromJsonValue(m_source_location_name, json[QString("SourceLocationName")]);
    m_source_location_name_isSet = !json[QString("SourceLocationName")].isNull() && m_source_location_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAILiveSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILiveSource::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_http_package_configurations.isSet()) {
        obj.insert(QString("HttpPackageConfigurations"), ::OpenAPI::toJsonValue(m_http_package_configurations));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_live_source_name_isSet) {
        obj.insert(QString("LiveSourceName"), ::OpenAPI::toJsonValue(m_live_source_name));
    }
    if (m_source_location_name_isSet) {
        obj.insert(QString("SourceLocationName"), ::OpenAPI::toJsonValue(m_source_location_name));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAILiveSource::getArn() const {
    return m_arn;
}
void OAILiveSource::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAILiveSource::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAILiveSource::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAILiveSource::getCreationTime() const {
    return m_creation_time;
}
void OAILiveSource::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAILiveSource::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAILiveSource::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QList OAILiveSource::getHttpPackageConfigurations() const {
    return m_http_package_configurations;
}
void OAILiveSource::setHttpPackageConfigurations(const QList &http_package_configurations) {
    m_http_package_configurations = http_package_configurations;
    m_http_package_configurations_isSet = true;
}

bool OAILiveSource::is_http_package_configurations_Set() const{
    return m_http_package_configurations_isSet;
}

bool OAILiveSource::is_http_package_configurations_Valid() const{
    return m_http_package_configurations_isValid;
}

QDateTime OAILiveSource::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAILiveSource::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAILiveSource::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAILiveSource::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QString OAILiveSource::getLiveSourceName() const {
    return m_live_source_name;
}
void OAILiveSource::setLiveSourceName(const QString &live_source_name) {
    m_live_source_name = live_source_name;
    m_live_source_name_isSet = true;
}

bool OAILiveSource::is_live_source_name_Set() const{
    return m_live_source_name_isSet;
}

bool OAILiveSource::is_live_source_name_Valid() const{
    return m_live_source_name_isValid;
}

QString OAILiveSource::getSourceLocationName() const {
    return m_source_location_name;
}
void OAILiveSource::setSourceLocationName(const QString &source_location_name) {
    m_source_location_name = source_location_name;
    m_source_location_name_isSet = true;
}

bool OAILiveSource::is_source_location_name_Set() const{
    return m_source_location_name_isSet;
}

bool OAILiveSource::is_source_location_name_Valid() const{
    return m_source_location_name_isValid;
}

QMap OAILiveSource::getTags() const {
    return m_tags;
}
void OAILiveSource::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAILiveSource::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAILiveSource::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAILiveSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_package_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_source_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_location_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILiveSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && m_http_package_configurations_isValid && m_live_source_name_isValid && m_source_location_name_isValid && true;
}

} // namespace OpenAPI
