/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdBreak_SpliceInsertMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdBreak_SpliceInsertMessage::OAIAdBreak_SpliceInsertMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdBreak_SpliceInsertMessage::OAIAdBreak_SpliceInsertMessage() {
    this->initializeModel();
}

OAIAdBreak_SpliceInsertMessage::~OAIAdBreak_SpliceInsertMessage() {}

void OAIAdBreak_SpliceInsertMessage::initializeModel() {

    m_avail_num_isSet = false;
    m_avail_num_isValid = false;

    m_avails_expected_isSet = false;
    m_avails_expected_isValid = false;

    m_splice_event_id_isSet = false;
    m_splice_event_id_isValid = false;

    m_unique_program_id_isSet = false;
    m_unique_program_id_isValid = false;
}

void OAIAdBreak_SpliceInsertMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdBreak_SpliceInsertMessage::fromJsonObject(QJsonObject json) {

    m_avail_num_isValid = ::OpenAPI::fromJsonValue(m_avail_num, json[QString("AvailNum")]);
    m_avail_num_isSet = !json[QString("AvailNum")].isNull() && m_avail_num_isValid;

    m_avails_expected_isValid = ::OpenAPI::fromJsonValue(m_avails_expected, json[QString("AvailsExpected")]);
    m_avails_expected_isSet = !json[QString("AvailsExpected")].isNull() && m_avails_expected_isValid;

    m_splice_event_id_isValid = ::OpenAPI::fromJsonValue(m_splice_event_id, json[QString("SpliceEventId")]);
    m_splice_event_id_isSet = !json[QString("SpliceEventId")].isNull() && m_splice_event_id_isValid;

    m_unique_program_id_isValid = ::OpenAPI::fromJsonValue(m_unique_program_id, json[QString("UniqueProgramId")]);
    m_unique_program_id_isSet = !json[QString("UniqueProgramId")].isNull() && m_unique_program_id_isValid;
}

QString OAIAdBreak_SpliceInsertMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdBreak_SpliceInsertMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_avail_num_isSet) {
        obj.insert(QString("AvailNum"), ::OpenAPI::toJsonValue(m_avail_num));
    }
    if (m_avails_expected_isSet) {
        obj.insert(QString("AvailsExpected"), ::OpenAPI::toJsonValue(m_avails_expected));
    }
    if (m_splice_event_id_isSet) {
        obj.insert(QString("SpliceEventId"), ::OpenAPI::toJsonValue(m_splice_event_id));
    }
    if (m_unique_program_id_isSet) {
        obj.insert(QString("UniqueProgramId"), ::OpenAPI::toJsonValue(m_unique_program_id));
    }
    return obj;
}

qint32 OAIAdBreak_SpliceInsertMessage::getAvailNum() const {
    return m_avail_num;
}
void OAIAdBreak_SpliceInsertMessage::setAvailNum(const qint32 &avail_num) {
    m_avail_num = avail_num;
    m_avail_num_isSet = true;
}

bool OAIAdBreak_SpliceInsertMessage::is_avail_num_Set() const{
    return m_avail_num_isSet;
}

bool OAIAdBreak_SpliceInsertMessage::is_avail_num_Valid() const{
    return m_avail_num_isValid;
}

qint32 OAIAdBreak_SpliceInsertMessage::getAvailsExpected() const {
    return m_avails_expected;
}
void OAIAdBreak_SpliceInsertMessage::setAvailsExpected(const qint32 &avails_expected) {
    m_avails_expected = avails_expected;
    m_avails_expected_isSet = true;
}

bool OAIAdBreak_SpliceInsertMessage::is_avails_expected_Set() const{
    return m_avails_expected_isSet;
}

bool OAIAdBreak_SpliceInsertMessage::is_avails_expected_Valid() const{
    return m_avails_expected_isValid;
}

qint32 OAIAdBreak_SpliceInsertMessage::getSpliceEventId() const {
    return m_splice_event_id;
}
void OAIAdBreak_SpliceInsertMessage::setSpliceEventId(const qint32 &splice_event_id) {
    m_splice_event_id = splice_event_id;
    m_splice_event_id_isSet = true;
}

bool OAIAdBreak_SpliceInsertMessage::is_splice_event_id_Set() const{
    return m_splice_event_id_isSet;
}

bool OAIAdBreak_SpliceInsertMessage::is_splice_event_id_Valid() const{
    return m_splice_event_id_isValid;
}

qint32 OAIAdBreak_SpliceInsertMessage::getUniqueProgramId() const {
    return m_unique_program_id;
}
void OAIAdBreak_SpliceInsertMessage::setUniqueProgramId(const qint32 &unique_program_id) {
    m_unique_program_id = unique_program_id;
    m_unique_program_id_isSet = true;
}

bool OAIAdBreak_SpliceInsertMessage::is_unique_program_id_Set() const{
    return m_unique_program_id_isSet;
}

bool OAIAdBreak_SpliceInsertMessage::is_unique_program_id_Valid() const{
    return m_unique_program_id_isValid;
}

bool OAIAdBreak_SpliceInsertMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avail_num_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avails_expected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_splice_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_program_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdBreak_SpliceInsertMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
