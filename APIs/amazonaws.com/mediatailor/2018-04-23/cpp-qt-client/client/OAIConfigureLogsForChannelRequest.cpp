/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigureLogsForChannelRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigureLogsForChannelRequest::OAIConfigureLogsForChannelRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigureLogsForChannelRequest::OAIConfigureLogsForChannelRequest() {
    this->initializeModel();
}

OAIConfigureLogsForChannelRequest::~OAIConfigureLogsForChannelRequest() {}

void OAIConfigureLogsForChannelRequest::initializeModel() {

    m_channel_name_isSet = false;
    m_channel_name_isValid = false;

    m_log_types_isSet = false;
    m_log_types_isValid = false;
}

void OAIConfigureLogsForChannelRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigureLogsForChannelRequest::fromJsonObject(QJsonObject json) {

    m_channel_name_isValid = ::OpenAPI::fromJsonValue(m_channel_name, json[QString("ChannelName")]);
    m_channel_name_isSet = !json[QString("ChannelName")].isNull() && m_channel_name_isValid;

    m_log_types_isValid = ::OpenAPI::fromJsonValue(m_log_types, json[QString("LogTypes")]);
    m_log_types_isSet = !json[QString("LogTypes")].isNull() && m_log_types_isValid;
}

QString OAIConfigureLogsForChannelRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigureLogsForChannelRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_name_isSet) {
        obj.insert(QString("ChannelName"), ::OpenAPI::toJsonValue(m_channel_name));
    }
    if (m_log_types.isSet()) {
        obj.insert(QString("LogTypes"), ::OpenAPI::toJsonValue(m_log_types));
    }
    return obj;
}

QString OAIConfigureLogsForChannelRequest::getChannelName() const {
    return m_channel_name;
}
void OAIConfigureLogsForChannelRequest::setChannelName(const QString &channel_name) {
    m_channel_name = channel_name;
    m_channel_name_isSet = true;
}

bool OAIConfigureLogsForChannelRequest::is_channel_name_Set() const{
    return m_channel_name_isSet;
}

bool OAIConfigureLogsForChannelRequest::is_channel_name_Valid() const{
    return m_channel_name_isValid;
}

QList OAIConfigureLogsForChannelRequest::getLogTypes() const {
    return m_log_types;
}
void OAIConfigureLogsForChannelRequest::setLogTypes(const QList &log_types) {
    m_log_types = log_types;
    m_log_types_isSet = true;
}

bool OAIConfigureLogsForChannelRequest::is_log_types_Set() const{
    return m_log_types_isSet;
}

bool OAIConfigureLogsForChannelRequest::is_log_types_Valid() const{
    return m_log_types_isValid;
}

bool OAIConfigureLogsForChannelRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_types.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigureLogsForChannelRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_channel_name_isValid && m_log_types_isValid && true;
}

} // namespace OpenAPI
