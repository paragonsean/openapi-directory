/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListPrefetchSchedules_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListPrefetchSchedules_request::OAIListPrefetchSchedules_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListPrefetchSchedules_request::OAIListPrefetchSchedules_request() {
    this->initializeModel();
}

OAIListPrefetchSchedules_request::~OAIListPrefetchSchedules_request() {}

void OAIListPrefetchSchedules_request::initializeModel() {

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_stream_id_isSet = false;
    m_stream_id_isValid = false;
}

void OAIListPrefetchSchedules_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListPrefetchSchedules_request::fromJsonObject(QJsonObject json) {

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_stream_id_isValid = ::OpenAPI::fromJsonValue(m_stream_id, json[QString("StreamId")]);
    m_stream_id_isSet = !json[QString("StreamId")].isNull() && m_stream_id_isValid;
}

QString OAIListPrefetchSchedules_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListPrefetchSchedules_request::asJsonObject() const {
    QJsonObject obj;
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_stream_id_isSet) {
        obj.insert(QString("StreamId"), ::OpenAPI::toJsonValue(m_stream_id));
    }
    return obj;
}

qint32 OAIListPrefetchSchedules_request::getMaxResults() const {
    return m_max_results;
}
void OAIListPrefetchSchedules_request::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListPrefetchSchedules_request::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListPrefetchSchedules_request::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListPrefetchSchedules_request::getNextToken() const {
    return m_next_token;
}
void OAIListPrefetchSchedules_request::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListPrefetchSchedules_request::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListPrefetchSchedules_request::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QString OAIListPrefetchSchedules_request::getStreamId() const {
    return m_stream_id;
}
void OAIListPrefetchSchedules_request::setStreamId(const QString &stream_id) {
    m_stream_id = stream_id;
    m_stream_id_isSet = true;
}

bool OAIListPrefetchSchedules_request::is_stream_id_Set() const{
    return m_stream_id_isSet;
}

bool OAIListPrefetchSchedules_request::is_stream_id_Valid() const{
    return m_stream_id_isValid;
}

bool OAIListPrefetchSchedules_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListPrefetchSchedules_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
