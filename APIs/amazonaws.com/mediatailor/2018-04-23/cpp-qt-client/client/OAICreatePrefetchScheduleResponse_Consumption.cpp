/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreatePrefetchScheduleResponse_Consumption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreatePrefetchScheduleResponse_Consumption::OAICreatePrefetchScheduleResponse_Consumption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreatePrefetchScheduleResponse_Consumption::OAICreatePrefetchScheduleResponse_Consumption() {
    this->initializeModel();
}

OAICreatePrefetchScheduleResponse_Consumption::~OAICreatePrefetchScheduleResponse_Consumption() {}

void OAICreatePrefetchScheduleResponse_Consumption::initializeModel() {

    m_avail_matching_criteria_isSet = false;
    m_avail_matching_criteria_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAICreatePrefetchScheduleResponse_Consumption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreatePrefetchScheduleResponse_Consumption::fromJsonObject(QJsonObject json) {

    m_avail_matching_criteria_isValid = ::OpenAPI::fromJsonValue(m_avail_matching_criteria, json[QString("AvailMatchingCriteria")]);
    m_avail_matching_criteria_isSet = !json[QString("AvailMatchingCriteria")].isNull() && m_avail_matching_criteria_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;
}

QString OAICreatePrefetchScheduleResponse_Consumption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreatePrefetchScheduleResponse_Consumption::asJsonObject() const {
    QJsonObject obj;
    if (m_avail_matching_criteria.isSet()) {
        obj.insert(QString("AvailMatchingCriteria"), ::OpenAPI::toJsonValue(m_avail_matching_criteria));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

QList OAICreatePrefetchScheduleResponse_Consumption::getAvailMatchingCriteria() const {
    return m_avail_matching_criteria;
}
void OAICreatePrefetchScheduleResponse_Consumption::setAvailMatchingCriteria(const QList &avail_matching_criteria) {
    m_avail_matching_criteria = avail_matching_criteria;
    m_avail_matching_criteria_isSet = true;
}

bool OAICreatePrefetchScheduleResponse_Consumption::is_avail_matching_criteria_Set() const{
    return m_avail_matching_criteria_isSet;
}

bool OAICreatePrefetchScheduleResponse_Consumption::is_avail_matching_criteria_Valid() const{
    return m_avail_matching_criteria_isValid;
}

QDateTime OAICreatePrefetchScheduleResponse_Consumption::getEndTime() const {
    return m_end_time;
}
void OAICreatePrefetchScheduleResponse_Consumption::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAICreatePrefetchScheduleResponse_Consumption::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAICreatePrefetchScheduleResponse_Consumption::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QDateTime OAICreatePrefetchScheduleResponse_Consumption::getStartTime() const {
    return m_start_time;
}
void OAICreatePrefetchScheduleResponse_Consumption::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAICreatePrefetchScheduleResponse_Consumption::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAICreatePrefetchScheduleResponse_Consumption::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAICreatePrefetchScheduleResponse_Consumption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avail_matching_criteria.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreatePrefetchScheduleResponse_Consumption::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_end_time_isValid && true;
}

} // namespace OpenAPI
