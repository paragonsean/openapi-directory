/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateChannel_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateChannel_request::OAIUpdateChannel_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateChannel_request::OAIUpdateChannel_request() {
    this->initializeModel();
}

OAIUpdateChannel_request::~OAIUpdateChannel_request() {}

void OAIUpdateChannel_request::initializeModel() {

    m_filler_slate_isSet = false;
    m_filler_slate_isValid = false;

    m_outputs_isSet = false;
    m_outputs_isValid = false;
}

void OAIUpdateChannel_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateChannel_request::fromJsonObject(QJsonObject json) {

    m_filler_slate_isValid = ::OpenAPI::fromJsonValue(m_filler_slate, json[QString("FillerSlate")]);
    m_filler_slate_isSet = !json[QString("FillerSlate")].isNull() && m_filler_slate_isValid;

    m_outputs_isValid = ::OpenAPI::fromJsonValue(m_outputs, json[QString("Outputs")]);
    m_outputs_isSet = !json[QString("Outputs")].isNull() && m_outputs_isValid;
}

QString OAIUpdateChannel_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateChannel_request::asJsonObject() const {
    QJsonObject obj;
    if (m_filler_slate.isSet()) {
        obj.insert(QString("FillerSlate"), ::OpenAPI::toJsonValue(m_filler_slate));
    }
    if (m_outputs.size() > 0) {
        obj.insert(QString("Outputs"), ::OpenAPI::toJsonValue(m_outputs));
    }
    return obj;
}

OAIUpdateChannel_request_FillerSlate OAIUpdateChannel_request::getFillerSlate() const {
    return m_filler_slate;
}
void OAIUpdateChannel_request::setFillerSlate(const OAIUpdateChannel_request_FillerSlate &filler_slate) {
    m_filler_slate = filler_slate;
    m_filler_slate_isSet = true;
}

bool OAIUpdateChannel_request::is_filler_slate_Set() const{
    return m_filler_slate_isSet;
}

bool OAIUpdateChannel_request::is_filler_slate_Valid() const{
    return m_filler_slate_isValid;
}

QList<OAIRequestOutputItem> OAIUpdateChannel_request::getOutputs() const {
    return m_outputs;
}
void OAIUpdateChannel_request::setOutputs(const QList<OAIRequestOutputItem> &outputs) {
    m_outputs = outputs;
    m_outputs_isSet = true;
}

bool OAIUpdateChannel_request::is_outputs_Set() const{
    return m_outputs_isSet;
}

bool OAIUpdateChannel_request::is_outputs_Valid() const{
    return m_outputs_isValid;
}

bool OAIUpdateChannel_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filler_slate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_outputs.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateChannel_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_outputs_isValid && true;
}

} // namespace OpenAPI
