/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdBreak_TimeSignalMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdBreak_TimeSignalMessage::OAIAdBreak_TimeSignalMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdBreak_TimeSignalMessage::OAIAdBreak_TimeSignalMessage() {
    this->initializeModel();
}

OAIAdBreak_TimeSignalMessage::~OAIAdBreak_TimeSignalMessage() {}

void OAIAdBreak_TimeSignalMessage::initializeModel() {

    m_segmentation_descriptors_isSet = false;
    m_segmentation_descriptors_isValid = false;
}

void OAIAdBreak_TimeSignalMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdBreak_TimeSignalMessage::fromJsonObject(QJsonObject json) {

    m_segmentation_descriptors_isValid = ::OpenAPI::fromJsonValue(m_segmentation_descriptors, json[QString("SegmentationDescriptors")]);
    m_segmentation_descriptors_isSet = !json[QString("SegmentationDescriptors")].isNull() && m_segmentation_descriptors_isValid;
}

QString OAIAdBreak_TimeSignalMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdBreak_TimeSignalMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_segmentation_descriptors.isSet()) {
        obj.insert(QString("SegmentationDescriptors"), ::OpenAPI::toJsonValue(m_segmentation_descriptors));
    }
    return obj;
}

QList OAIAdBreak_TimeSignalMessage::getSegmentationDescriptors() const {
    return m_segmentation_descriptors;
}
void OAIAdBreak_TimeSignalMessage::setSegmentationDescriptors(const QList &segmentation_descriptors) {
    m_segmentation_descriptors = segmentation_descriptors;
    m_segmentation_descriptors_isSet = true;
}

bool OAIAdBreak_TimeSignalMessage::is_segmentation_descriptors_Set() const{
    return m_segmentation_descriptors_isSet;
}

bool OAIAdBreak_TimeSignalMessage::is_segmentation_descriptors_Valid() const{
    return m_segmentation_descriptors_isValid;
}

bool OAIAdBreak_TimeSignalMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_segmentation_descriptors.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdBreak_TimeSignalMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
