/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIResponseOutputItem_DashPlaylistSettings.h
 *
 * 
 */

#ifndef OAIResponseOutputItem_DashPlaylistSettings_H
#define OAIResponseOutputItem_DashPlaylistSettings_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIResponseOutputItem_DashPlaylistSettings : public OAIObject {
public:
    OAIResponseOutputItem_DashPlaylistSettings();
    OAIResponseOutputItem_DashPlaylistSettings(QString json);
    ~OAIResponseOutputItem_DashPlaylistSettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getManifestWindowSeconds() const;
    void setManifestWindowSeconds(const qint32 &manifest_window_seconds);
    bool is_manifest_window_seconds_Set() const;
    bool is_manifest_window_seconds_Valid() const;

    qint32 getMinBufferTimeSeconds() const;
    void setMinBufferTimeSeconds(const qint32 &min_buffer_time_seconds);
    bool is_min_buffer_time_seconds_Set() const;
    bool is_min_buffer_time_seconds_Valid() const;

    qint32 getMinUpdatePeriodSeconds() const;
    void setMinUpdatePeriodSeconds(const qint32 &min_update_period_seconds);
    bool is_min_update_period_seconds_Set() const;
    bool is_min_update_period_seconds_Valid() const;

    qint32 getSuggestedPresentationDelaySeconds() const;
    void setSuggestedPresentationDelaySeconds(const qint32 &suggested_presentation_delay_seconds);
    bool is_suggested_presentation_delay_seconds_Set() const;
    bool is_suggested_presentation_delay_seconds_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_manifest_window_seconds;
    bool m_manifest_window_seconds_isSet;
    bool m_manifest_window_seconds_isValid;

    qint32 m_min_buffer_time_seconds;
    bool m_min_buffer_time_seconds_isSet;
    bool m_min_buffer_time_seconds_isValid;

    qint32 m_min_update_period_seconds;
    bool m_min_update_period_seconds_isSet;
    bool m_min_update_period_seconds_isValid;

    qint32 m_suggested_presentation_delay_seconds;
    bool m_suggested_presentation_delay_seconds_isSet;
    bool m_suggested_presentation_delay_seconds_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIResponseOutputItem_DashPlaylistSettings)

#endif // OAIResponseOutputItem_DashPlaylistSettings_H
