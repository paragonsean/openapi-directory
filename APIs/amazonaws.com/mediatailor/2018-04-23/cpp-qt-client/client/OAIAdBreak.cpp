/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdBreak.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdBreak::OAIAdBreak(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdBreak::OAIAdBreak() {
    this->initializeModel();
}

OAIAdBreak::~OAIAdBreak() {}

void OAIAdBreak::initializeModel() {

    m_ad_break_metadata_isSet = false;
    m_ad_break_metadata_isValid = false;

    m_message_type_isSet = false;
    m_message_type_isValid = false;

    m_offset_millis_isSet = false;
    m_offset_millis_isValid = false;

    m_slate_isSet = false;
    m_slate_isValid = false;

    m_splice_insert_message_isSet = false;
    m_splice_insert_message_isValid = false;

    m_time_signal_message_isSet = false;
    m_time_signal_message_isValid = false;
}

void OAIAdBreak::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdBreak::fromJsonObject(QJsonObject json) {

    m_ad_break_metadata_isValid = ::OpenAPI::fromJsonValue(m_ad_break_metadata, json[QString("AdBreakMetadata")]);
    m_ad_break_metadata_isSet = !json[QString("AdBreakMetadata")].isNull() && m_ad_break_metadata_isValid;

    m_message_type_isValid = ::OpenAPI::fromJsonValue(m_message_type, json[QString("MessageType")]);
    m_message_type_isSet = !json[QString("MessageType")].isNull() && m_message_type_isValid;

    m_offset_millis_isValid = ::OpenAPI::fromJsonValue(m_offset_millis, json[QString("OffsetMillis")]);
    m_offset_millis_isSet = !json[QString("OffsetMillis")].isNull() && m_offset_millis_isValid;

    m_slate_isValid = ::OpenAPI::fromJsonValue(m_slate, json[QString("Slate")]);
    m_slate_isSet = !json[QString("Slate")].isNull() && m_slate_isValid;

    m_splice_insert_message_isValid = ::OpenAPI::fromJsonValue(m_splice_insert_message, json[QString("SpliceInsertMessage")]);
    m_splice_insert_message_isSet = !json[QString("SpliceInsertMessage")].isNull() && m_splice_insert_message_isValid;

    m_time_signal_message_isValid = ::OpenAPI::fromJsonValue(m_time_signal_message, json[QString("TimeSignalMessage")]);
    m_time_signal_message_isSet = !json[QString("TimeSignalMessage")].isNull() && m_time_signal_message_isValid;
}

QString OAIAdBreak::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdBreak::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_break_metadata.isSet()) {
        obj.insert(QString("AdBreakMetadata"), ::OpenAPI::toJsonValue(m_ad_break_metadata));
    }
    if (m_message_type.isSet()) {
        obj.insert(QString("MessageType"), ::OpenAPI::toJsonValue(m_message_type));
    }
    if (m_offset_millis_isSet) {
        obj.insert(QString("OffsetMillis"), ::OpenAPI::toJsonValue(m_offset_millis));
    }
    if (m_slate.isSet()) {
        obj.insert(QString("Slate"), ::OpenAPI::toJsonValue(m_slate));
    }
    if (m_splice_insert_message.isSet()) {
        obj.insert(QString("SpliceInsertMessage"), ::OpenAPI::toJsonValue(m_splice_insert_message));
    }
    if (m_time_signal_message.isSet()) {
        obj.insert(QString("TimeSignalMessage"), ::OpenAPI::toJsonValue(m_time_signal_message));
    }
    return obj;
}

QList OAIAdBreak::getAdBreakMetadata() const {
    return m_ad_break_metadata;
}
void OAIAdBreak::setAdBreakMetadata(const QList &ad_break_metadata) {
    m_ad_break_metadata = ad_break_metadata;
    m_ad_break_metadata_isSet = true;
}

bool OAIAdBreak::is_ad_break_metadata_Set() const{
    return m_ad_break_metadata_isSet;
}

bool OAIAdBreak::is_ad_break_metadata_Valid() const{
    return m_ad_break_metadata_isValid;
}

OAIMessageType OAIAdBreak::getMessageType() const {
    return m_message_type;
}
void OAIAdBreak::setMessageType(const OAIMessageType &message_type) {
    m_message_type = message_type;
    m_message_type_isSet = true;
}

bool OAIAdBreak::is_message_type_Set() const{
    return m_message_type_isSet;
}

bool OAIAdBreak::is_message_type_Valid() const{
    return m_message_type_isValid;
}

qint32 OAIAdBreak::getOffsetMillis() const {
    return m_offset_millis;
}
void OAIAdBreak::setOffsetMillis(const qint32 &offset_millis) {
    m_offset_millis = offset_millis;
    m_offset_millis_isSet = true;
}

bool OAIAdBreak::is_offset_millis_Set() const{
    return m_offset_millis_isSet;
}

bool OAIAdBreak::is_offset_millis_Valid() const{
    return m_offset_millis_isValid;
}

OAIAdBreak_Slate OAIAdBreak::getSlate() const {
    return m_slate;
}
void OAIAdBreak::setSlate(const OAIAdBreak_Slate &slate) {
    m_slate = slate;
    m_slate_isSet = true;
}

bool OAIAdBreak::is_slate_Set() const{
    return m_slate_isSet;
}

bool OAIAdBreak::is_slate_Valid() const{
    return m_slate_isValid;
}

OAIAdBreak_SpliceInsertMessage OAIAdBreak::getSpliceInsertMessage() const {
    return m_splice_insert_message;
}
void OAIAdBreak::setSpliceInsertMessage(const OAIAdBreak_SpliceInsertMessage &splice_insert_message) {
    m_splice_insert_message = splice_insert_message;
    m_splice_insert_message_isSet = true;
}

bool OAIAdBreak::is_splice_insert_message_Set() const{
    return m_splice_insert_message_isSet;
}

bool OAIAdBreak::is_splice_insert_message_Valid() const{
    return m_splice_insert_message_isValid;
}

OAIAdBreak_TimeSignalMessage OAIAdBreak::getTimeSignalMessage() const {
    return m_time_signal_message;
}
void OAIAdBreak::setTimeSignalMessage(const OAIAdBreak_TimeSignalMessage &time_signal_message) {
    m_time_signal_message = time_signal_message;
    m_time_signal_message_isSet = true;
}

bool OAIAdBreak::is_time_signal_message_Set() const{
    return m_time_signal_message_isSet;
}

bool OAIAdBreak::is_time_signal_message_Valid() const{
    return m_time_signal_message_isValid;
}

bool OAIAdBreak::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_break_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_splice_insert_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_signal_message.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdBreak::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
