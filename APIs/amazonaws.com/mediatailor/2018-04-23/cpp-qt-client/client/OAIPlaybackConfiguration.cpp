/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlaybackConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlaybackConfiguration::OAIPlaybackConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlaybackConfiguration::OAIPlaybackConfiguration() {
    this->initializeModel();
}

OAIPlaybackConfiguration::~OAIPlaybackConfiguration() {}

void OAIPlaybackConfiguration::initializeModel() {

    m_ad_decision_server_url_isSet = false;
    m_ad_decision_server_url_isValid = false;

    m_avail_suppression_isSet = false;
    m_avail_suppression_isValid = false;

    m_bumper_isSet = false;
    m_bumper_isValid = false;

    m_cdn_configuration_isSet = false;
    m_cdn_configuration_isValid = false;

    m_configuration_aliases_isSet = false;
    m_configuration_aliases_isValid = false;

    m_dash_configuration_isSet = false;
    m_dash_configuration_isValid = false;

    m_hls_configuration_isSet = false;
    m_hls_configuration_isValid = false;

    m_live_pre_roll_configuration_isSet = false;
    m_live_pre_roll_configuration_isValid = false;

    m_log_configuration_isSet = false;
    m_log_configuration_isValid = false;

    m_manifest_processing_rules_isSet = false;
    m_manifest_processing_rules_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_personalization_threshold_seconds_isSet = false;
    m_personalization_threshold_seconds_isValid = false;

    m_playback_configuration_arn_isSet = false;
    m_playback_configuration_arn_isValid = false;

    m_playback_endpoint_prefix_isSet = false;
    m_playback_endpoint_prefix_isValid = false;

    m_session_initialization_endpoint_prefix_isSet = false;
    m_session_initialization_endpoint_prefix_isValid = false;

    m_slate_ad_url_isSet = false;
    m_slate_ad_url_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_transcode_profile_name_isSet = false;
    m_transcode_profile_name_isValid = false;

    m_video_content_source_url_isSet = false;
    m_video_content_source_url_isValid = false;
}

void OAIPlaybackConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlaybackConfiguration::fromJsonObject(QJsonObject json) {

    m_ad_decision_server_url_isValid = ::OpenAPI::fromJsonValue(m_ad_decision_server_url, json[QString("AdDecisionServerUrl")]);
    m_ad_decision_server_url_isSet = !json[QString("AdDecisionServerUrl")].isNull() && m_ad_decision_server_url_isValid;

    m_avail_suppression_isValid = ::OpenAPI::fromJsonValue(m_avail_suppression, json[QString("AvailSuppression")]);
    m_avail_suppression_isSet = !json[QString("AvailSuppression")].isNull() && m_avail_suppression_isValid;

    m_bumper_isValid = ::OpenAPI::fromJsonValue(m_bumper, json[QString("Bumper")]);
    m_bumper_isSet = !json[QString("Bumper")].isNull() && m_bumper_isValid;

    m_cdn_configuration_isValid = ::OpenAPI::fromJsonValue(m_cdn_configuration, json[QString("CdnConfiguration")]);
    m_cdn_configuration_isSet = !json[QString("CdnConfiguration")].isNull() && m_cdn_configuration_isValid;

    m_configuration_aliases_isValid = ::OpenAPI::fromJsonValue(m_configuration_aliases, json[QString("ConfigurationAliases")]);
    m_configuration_aliases_isSet = !json[QString("ConfigurationAliases")].isNull() && m_configuration_aliases_isValid;

    m_dash_configuration_isValid = ::OpenAPI::fromJsonValue(m_dash_configuration, json[QString("DashConfiguration")]);
    m_dash_configuration_isSet = !json[QString("DashConfiguration")].isNull() && m_dash_configuration_isValid;

    m_hls_configuration_isValid = ::OpenAPI::fromJsonValue(m_hls_configuration, json[QString("HlsConfiguration")]);
    m_hls_configuration_isSet = !json[QString("HlsConfiguration")].isNull() && m_hls_configuration_isValid;

    m_live_pre_roll_configuration_isValid = ::OpenAPI::fromJsonValue(m_live_pre_roll_configuration, json[QString("LivePreRollConfiguration")]);
    m_live_pre_roll_configuration_isSet = !json[QString("LivePreRollConfiguration")].isNull() && m_live_pre_roll_configuration_isValid;

    m_log_configuration_isValid = ::OpenAPI::fromJsonValue(m_log_configuration, json[QString("LogConfiguration")]);
    m_log_configuration_isSet = !json[QString("LogConfiguration")].isNull() && m_log_configuration_isValid;

    m_manifest_processing_rules_isValid = ::OpenAPI::fromJsonValue(m_manifest_processing_rules, json[QString("ManifestProcessingRules")]);
    m_manifest_processing_rules_isSet = !json[QString("ManifestProcessingRules")].isNull() && m_manifest_processing_rules_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_personalization_threshold_seconds_isValid = ::OpenAPI::fromJsonValue(m_personalization_threshold_seconds, json[QString("PersonalizationThresholdSeconds")]);
    m_personalization_threshold_seconds_isSet = !json[QString("PersonalizationThresholdSeconds")].isNull() && m_personalization_threshold_seconds_isValid;

    m_playback_configuration_arn_isValid = ::OpenAPI::fromJsonValue(m_playback_configuration_arn, json[QString("PlaybackConfigurationArn")]);
    m_playback_configuration_arn_isSet = !json[QString("PlaybackConfigurationArn")].isNull() && m_playback_configuration_arn_isValid;

    m_playback_endpoint_prefix_isValid = ::OpenAPI::fromJsonValue(m_playback_endpoint_prefix, json[QString("PlaybackEndpointPrefix")]);
    m_playback_endpoint_prefix_isSet = !json[QString("PlaybackEndpointPrefix")].isNull() && m_playback_endpoint_prefix_isValid;

    m_session_initialization_endpoint_prefix_isValid = ::OpenAPI::fromJsonValue(m_session_initialization_endpoint_prefix, json[QString("SessionInitializationEndpointPrefix")]);
    m_session_initialization_endpoint_prefix_isSet = !json[QString("SessionInitializationEndpointPrefix")].isNull() && m_session_initialization_endpoint_prefix_isValid;

    m_slate_ad_url_isValid = ::OpenAPI::fromJsonValue(m_slate_ad_url, json[QString("SlateAdUrl")]);
    m_slate_ad_url_isSet = !json[QString("SlateAdUrl")].isNull() && m_slate_ad_url_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_transcode_profile_name_isValid = ::OpenAPI::fromJsonValue(m_transcode_profile_name, json[QString("TranscodeProfileName")]);
    m_transcode_profile_name_isSet = !json[QString("TranscodeProfileName")].isNull() && m_transcode_profile_name_isValid;

    m_video_content_source_url_isValid = ::OpenAPI::fromJsonValue(m_video_content_source_url, json[QString("VideoContentSourceUrl")]);
    m_video_content_source_url_isSet = !json[QString("VideoContentSourceUrl")].isNull() && m_video_content_source_url_isValid;
}

QString OAIPlaybackConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlaybackConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_decision_server_url_isSet) {
        obj.insert(QString("AdDecisionServerUrl"), ::OpenAPI::toJsonValue(m_ad_decision_server_url));
    }
    if (m_avail_suppression.isSet()) {
        obj.insert(QString("AvailSuppression"), ::OpenAPI::toJsonValue(m_avail_suppression));
    }
    if (m_bumper.isSet()) {
        obj.insert(QString("Bumper"), ::OpenAPI::toJsonValue(m_bumper));
    }
    if (m_cdn_configuration.isSet()) {
        obj.insert(QString("CdnConfiguration"), ::OpenAPI::toJsonValue(m_cdn_configuration));
    }
    if (m_configuration_aliases.isSet()) {
        obj.insert(QString("ConfigurationAliases"), ::OpenAPI::toJsonValue(m_configuration_aliases));
    }
    if (m_dash_configuration.isSet()) {
        obj.insert(QString("DashConfiguration"), ::OpenAPI::toJsonValue(m_dash_configuration));
    }
    if (m_hls_configuration.isSet()) {
        obj.insert(QString("HlsConfiguration"), ::OpenAPI::toJsonValue(m_hls_configuration));
    }
    if (m_live_pre_roll_configuration.isSet()) {
        obj.insert(QString("LivePreRollConfiguration"), ::OpenAPI::toJsonValue(m_live_pre_roll_configuration));
    }
    if (m_log_configuration.isSet()) {
        obj.insert(QString("LogConfiguration"), ::OpenAPI::toJsonValue(m_log_configuration));
    }
    if (m_manifest_processing_rules.isSet()) {
        obj.insert(QString("ManifestProcessingRules"), ::OpenAPI::toJsonValue(m_manifest_processing_rules));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_personalization_threshold_seconds_isSet) {
        obj.insert(QString("PersonalizationThresholdSeconds"), ::OpenAPI::toJsonValue(m_personalization_threshold_seconds));
    }
    if (m_playback_configuration_arn_isSet) {
        obj.insert(QString("PlaybackConfigurationArn"), ::OpenAPI::toJsonValue(m_playback_configuration_arn));
    }
    if (m_playback_endpoint_prefix_isSet) {
        obj.insert(QString("PlaybackEndpointPrefix"), ::OpenAPI::toJsonValue(m_playback_endpoint_prefix));
    }
    if (m_session_initialization_endpoint_prefix_isSet) {
        obj.insert(QString("SessionInitializationEndpointPrefix"), ::OpenAPI::toJsonValue(m_session_initialization_endpoint_prefix));
    }
    if (m_slate_ad_url_isSet) {
        obj.insert(QString("SlateAdUrl"), ::OpenAPI::toJsonValue(m_slate_ad_url));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_transcode_profile_name_isSet) {
        obj.insert(QString("TranscodeProfileName"), ::OpenAPI::toJsonValue(m_transcode_profile_name));
    }
    if (m_video_content_source_url_isSet) {
        obj.insert(QString("VideoContentSourceUrl"), ::OpenAPI::toJsonValue(m_video_content_source_url));
    }
    return obj;
}

QString OAIPlaybackConfiguration::getAdDecisionServerUrl() const {
    return m_ad_decision_server_url;
}
void OAIPlaybackConfiguration::setAdDecisionServerUrl(const QString &ad_decision_server_url) {
    m_ad_decision_server_url = ad_decision_server_url;
    m_ad_decision_server_url_isSet = true;
}

bool OAIPlaybackConfiguration::is_ad_decision_server_url_Set() const{
    return m_ad_decision_server_url_isSet;
}

bool OAIPlaybackConfiguration::is_ad_decision_server_url_Valid() const{
    return m_ad_decision_server_url_isValid;
}

OAIGetPlaybackConfigurationResponse_AvailSuppression OAIPlaybackConfiguration::getAvailSuppression() const {
    return m_avail_suppression;
}
void OAIPlaybackConfiguration::setAvailSuppression(const OAIGetPlaybackConfigurationResponse_AvailSuppression &avail_suppression) {
    m_avail_suppression = avail_suppression;
    m_avail_suppression_isSet = true;
}

bool OAIPlaybackConfiguration::is_avail_suppression_Set() const{
    return m_avail_suppression_isSet;
}

bool OAIPlaybackConfiguration::is_avail_suppression_Valid() const{
    return m_avail_suppression_isValid;
}

OAIGetPlaybackConfigurationResponse_Bumper OAIPlaybackConfiguration::getBumper() const {
    return m_bumper;
}
void OAIPlaybackConfiguration::setBumper(const OAIGetPlaybackConfigurationResponse_Bumper &bumper) {
    m_bumper = bumper;
    m_bumper_isSet = true;
}

bool OAIPlaybackConfiguration::is_bumper_Set() const{
    return m_bumper_isSet;
}

bool OAIPlaybackConfiguration::is_bumper_Valid() const{
    return m_bumper_isValid;
}

OAIGetPlaybackConfigurationResponse_CdnConfiguration OAIPlaybackConfiguration::getCdnConfiguration() const {
    return m_cdn_configuration;
}
void OAIPlaybackConfiguration::setCdnConfiguration(const OAIGetPlaybackConfigurationResponse_CdnConfiguration &cdn_configuration) {
    m_cdn_configuration = cdn_configuration;
    m_cdn_configuration_isSet = true;
}

bool OAIPlaybackConfiguration::is_cdn_configuration_Set() const{
    return m_cdn_configuration_isSet;
}

bool OAIPlaybackConfiguration::is_cdn_configuration_Valid() const{
    return m_cdn_configuration_isValid;
}

QMap OAIPlaybackConfiguration::getConfigurationAliases() const {
    return m_configuration_aliases;
}
void OAIPlaybackConfiguration::setConfigurationAliases(const QMap &configuration_aliases) {
    m_configuration_aliases = configuration_aliases;
    m_configuration_aliases_isSet = true;
}

bool OAIPlaybackConfiguration::is_configuration_aliases_Set() const{
    return m_configuration_aliases_isSet;
}

bool OAIPlaybackConfiguration::is_configuration_aliases_Valid() const{
    return m_configuration_aliases_isValid;
}

OAIPlaybackConfiguration_DashConfiguration OAIPlaybackConfiguration::getDashConfiguration() const {
    return m_dash_configuration;
}
void OAIPlaybackConfiguration::setDashConfiguration(const OAIPlaybackConfiguration_DashConfiguration &dash_configuration) {
    m_dash_configuration = dash_configuration;
    m_dash_configuration_isSet = true;
}

bool OAIPlaybackConfiguration::is_dash_configuration_Set() const{
    return m_dash_configuration_isSet;
}

bool OAIPlaybackConfiguration::is_dash_configuration_Valid() const{
    return m_dash_configuration_isValid;
}

OAIGetPlaybackConfigurationResponse_HlsConfiguration OAIPlaybackConfiguration::getHlsConfiguration() const {
    return m_hls_configuration;
}
void OAIPlaybackConfiguration::setHlsConfiguration(const OAIGetPlaybackConfigurationResponse_HlsConfiguration &hls_configuration) {
    m_hls_configuration = hls_configuration;
    m_hls_configuration_isSet = true;
}

bool OAIPlaybackConfiguration::is_hls_configuration_Set() const{
    return m_hls_configuration_isSet;
}

bool OAIPlaybackConfiguration::is_hls_configuration_Valid() const{
    return m_hls_configuration_isValid;
}

OAIGetPlaybackConfigurationResponse_LivePreRollConfiguration OAIPlaybackConfiguration::getLivePreRollConfiguration() const {
    return m_live_pre_roll_configuration;
}
void OAIPlaybackConfiguration::setLivePreRollConfiguration(const OAIGetPlaybackConfigurationResponse_LivePreRollConfiguration &live_pre_roll_configuration) {
    m_live_pre_roll_configuration = live_pre_roll_configuration;
    m_live_pre_roll_configuration_isSet = true;
}

bool OAIPlaybackConfiguration::is_live_pre_roll_configuration_Set() const{
    return m_live_pre_roll_configuration_isSet;
}

bool OAIPlaybackConfiguration::is_live_pre_roll_configuration_Valid() const{
    return m_live_pre_roll_configuration_isValid;
}

OAIGetPlaybackConfigurationResponse_LogConfiguration OAIPlaybackConfiguration::getLogConfiguration() const {
    return m_log_configuration;
}
void OAIPlaybackConfiguration::setLogConfiguration(const OAIGetPlaybackConfigurationResponse_LogConfiguration &log_configuration) {
    m_log_configuration = log_configuration;
    m_log_configuration_isSet = true;
}

bool OAIPlaybackConfiguration::is_log_configuration_Set() const{
    return m_log_configuration_isSet;
}

bool OAIPlaybackConfiguration::is_log_configuration_Valid() const{
    return m_log_configuration_isValid;
}

OAIGetPlaybackConfigurationResponse_ManifestProcessingRules OAIPlaybackConfiguration::getManifestProcessingRules() const {
    return m_manifest_processing_rules;
}
void OAIPlaybackConfiguration::setManifestProcessingRules(const OAIGetPlaybackConfigurationResponse_ManifestProcessingRules &manifest_processing_rules) {
    m_manifest_processing_rules = manifest_processing_rules;
    m_manifest_processing_rules_isSet = true;
}

bool OAIPlaybackConfiguration::is_manifest_processing_rules_Set() const{
    return m_manifest_processing_rules_isSet;
}

bool OAIPlaybackConfiguration::is_manifest_processing_rules_Valid() const{
    return m_manifest_processing_rules_isValid;
}

QString OAIPlaybackConfiguration::getName() const {
    return m_name;
}
void OAIPlaybackConfiguration::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlaybackConfiguration::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlaybackConfiguration::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIPlaybackConfiguration::getPersonalizationThresholdSeconds() const {
    return m_personalization_threshold_seconds;
}
void OAIPlaybackConfiguration::setPersonalizationThresholdSeconds(const qint32 &personalization_threshold_seconds) {
    m_personalization_threshold_seconds = personalization_threshold_seconds;
    m_personalization_threshold_seconds_isSet = true;
}

bool OAIPlaybackConfiguration::is_personalization_threshold_seconds_Set() const{
    return m_personalization_threshold_seconds_isSet;
}

bool OAIPlaybackConfiguration::is_personalization_threshold_seconds_Valid() const{
    return m_personalization_threshold_seconds_isValid;
}

QString OAIPlaybackConfiguration::getPlaybackConfigurationArn() const {
    return m_playback_configuration_arn;
}
void OAIPlaybackConfiguration::setPlaybackConfigurationArn(const QString &playback_configuration_arn) {
    m_playback_configuration_arn = playback_configuration_arn;
    m_playback_configuration_arn_isSet = true;
}

bool OAIPlaybackConfiguration::is_playback_configuration_arn_Set() const{
    return m_playback_configuration_arn_isSet;
}

bool OAIPlaybackConfiguration::is_playback_configuration_arn_Valid() const{
    return m_playback_configuration_arn_isValid;
}

QString OAIPlaybackConfiguration::getPlaybackEndpointPrefix() const {
    return m_playback_endpoint_prefix;
}
void OAIPlaybackConfiguration::setPlaybackEndpointPrefix(const QString &playback_endpoint_prefix) {
    m_playback_endpoint_prefix = playback_endpoint_prefix;
    m_playback_endpoint_prefix_isSet = true;
}

bool OAIPlaybackConfiguration::is_playback_endpoint_prefix_Set() const{
    return m_playback_endpoint_prefix_isSet;
}

bool OAIPlaybackConfiguration::is_playback_endpoint_prefix_Valid() const{
    return m_playback_endpoint_prefix_isValid;
}

QString OAIPlaybackConfiguration::getSessionInitializationEndpointPrefix() const {
    return m_session_initialization_endpoint_prefix;
}
void OAIPlaybackConfiguration::setSessionInitializationEndpointPrefix(const QString &session_initialization_endpoint_prefix) {
    m_session_initialization_endpoint_prefix = session_initialization_endpoint_prefix;
    m_session_initialization_endpoint_prefix_isSet = true;
}

bool OAIPlaybackConfiguration::is_session_initialization_endpoint_prefix_Set() const{
    return m_session_initialization_endpoint_prefix_isSet;
}

bool OAIPlaybackConfiguration::is_session_initialization_endpoint_prefix_Valid() const{
    return m_session_initialization_endpoint_prefix_isValid;
}

QString OAIPlaybackConfiguration::getSlateAdUrl() const {
    return m_slate_ad_url;
}
void OAIPlaybackConfiguration::setSlateAdUrl(const QString &slate_ad_url) {
    m_slate_ad_url = slate_ad_url;
    m_slate_ad_url_isSet = true;
}

bool OAIPlaybackConfiguration::is_slate_ad_url_Set() const{
    return m_slate_ad_url_isSet;
}

bool OAIPlaybackConfiguration::is_slate_ad_url_Valid() const{
    return m_slate_ad_url_isValid;
}

QMap OAIPlaybackConfiguration::getTags() const {
    return m_tags;
}
void OAIPlaybackConfiguration::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIPlaybackConfiguration::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIPlaybackConfiguration::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIPlaybackConfiguration::getTranscodeProfileName() const {
    return m_transcode_profile_name;
}
void OAIPlaybackConfiguration::setTranscodeProfileName(const QString &transcode_profile_name) {
    m_transcode_profile_name = transcode_profile_name;
    m_transcode_profile_name_isSet = true;
}

bool OAIPlaybackConfiguration::is_transcode_profile_name_Set() const{
    return m_transcode_profile_name_isSet;
}

bool OAIPlaybackConfiguration::is_transcode_profile_name_Valid() const{
    return m_transcode_profile_name_isValid;
}

QString OAIPlaybackConfiguration::getVideoContentSourceUrl() const {
    return m_video_content_source_url;
}
void OAIPlaybackConfiguration::setVideoContentSourceUrl(const QString &video_content_source_url) {
    m_video_content_source_url = video_content_source_url;
    m_video_content_source_url_isSet = true;
}

bool OAIPlaybackConfiguration::is_video_content_source_url_Set() const{
    return m_video_content_source_url_isSet;
}

bool OAIPlaybackConfiguration::is_video_content_source_url_Valid() const{
    return m_video_content_source_url_isValid;
}

bool OAIPlaybackConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_decision_server_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avail_suppression.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bumper.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cdn_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_aliases.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dash_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hls_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_pre_roll_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest_processing_rules.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_personalization_threshold_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playback_configuration_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playback_endpoint_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_initialization_endpoint_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slate_ad_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transcode_profile_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_content_source_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlaybackConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
