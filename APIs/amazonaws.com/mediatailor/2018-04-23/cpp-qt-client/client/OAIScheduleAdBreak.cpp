/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduleAdBreak.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduleAdBreak::OAIScheduleAdBreak(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduleAdBreak::OAIScheduleAdBreak() {
    this->initializeModel();
}

OAIScheduleAdBreak::~OAIScheduleAdBreak() {}

void OAIScheduleAdBreak::initializeModel() {

    m_approximate_duration_seconds_isSet = false;
    m_approximate_duration_seconds_isValid = false;

    m_approximate_start_time_isSet = false;
    m_approximate_start_time_isValid = false;

    m_source_location_name_isSet = false;
    m_source_location_name_isValid = false;

    m_vod_source_name_isSet = false;
    m_vod_source_name_isValid = false;
}

void OAIScheduleAdBreak::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduleAdBreak::fromJsonObject(QJsonObject json) {

    m_approximate_duration_seconds_isValid = ::OpenAPI::fromJsonValue(m_approximate_duration_seconds, json[QString("ApproximateDurationSeconds")]);
    m_approximate_duration_seconds_isSet = !json[QString("ApproximateDurationSeconds")].isNull() && m_approximate_duration_seconds_isValid;

    m_approximate_start_time_isValid = ::OpenAPI::fromJsonValue(m_approximate_start_time, json[QString("ApproximateStartTime")]);
    m_approximate_start_time_isSet = !json[QString("ApproximateStartTime")].isNull() && m_approximate_start_time_isValid;

    m_source_location_name_isValid = ::OpenAPI::fromJsonValue(m_source_location_name, json[QString("SourceLocationName")]);
    m_source_location_name_isSet = !json[QString("SourceLocationName")].isNull() && m_source_location_name_isValid;

    m_vod_source_name_isValid = ::OpenAPI::fromJsonValue(m_vod_source_name, json[QString("VodSourceName")]);
    m_vod_source_name_isSet = !json[QString("VodSourceName")].isNull() && m_vod_source_name_isValid;
}

QString OAIScheduleAdBreak::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduleAdBreak::asJsonObject() const {
    QJsonObject obj;
    if (m_approximate_duration_seconds_isSet) {
        obj.insert(QString("ApproximateDurationSeconds"), ::OpenAPI::toJsonValue(m_approximate_duration_seconds));
    }
    if (m_approximate_start_time_isSet) {
        obj.insert(QString("ApproximateStartTime"), ::OpenAPI::toJsonValue(m_approximate_start_time));
    }
    if (m_source_location_name_isSet) {
        obj.insert(QString("SourceLocationName"), ::OpenAPI::toJsonValue(m_source_location_name));
    }
    if (m_vod_source_name_isSet) {
        obj.insert(QString("VodSourceName"), ::OpenAPI::toJsonValue(m_vod_source_name));
    }
    return obj;
}

qint32 OAIScheduleAdBreak::getApproximateDurationSeconds() const {
    return m_approximate_duration_seconds;
}
void OAIScheduleAdBreak::setApproximateDurationSeconds(const qint32 &approximate_duration_seconds) {
    m_approximate_duration_seconds = approximate_duration_seconds;
    m_approximate_duration_seconds_isSet = true;
}

bool OAIScheduleAdBreak::is_approximate_duration_seconds_Set() const{
    return m_approximate_duration_seconds_isSet;
}

bool OAIScheduleAdBreak::is_approximate_duration_seconds_Valid() const{
    return m_approximate_duration_seconds_isValid;
}

QDateTime OAIScheduleAdBreak::getApproximateStartTime() const {
    return m_approximate_start_time;
}
void OAIScheduleAdBreak::setApproximateStartTime(const QDateTime &approximate_start_time) {
    m_approximate_start_time = approximate_start_time;
    m_approximate_start_time_isSet = true;
}

bool OAIScheduleAdBreak::is_approximate_start_time_Set() const{
    return m_approximate_start_time_isSet;
}

bool OAIScheduleAdBreak::is_approximate_start_time_Valid() const{
    return m_approximate_start_time_isValid;
}

QString OAIScheduleAdBreak::getSourceLocationName() const {
    return m_source_location_name;
}
void OAIScheduleAdBreak::setSourceLocationName(const QString &source_location_name) {
    m_source_location_name = source_location_name;
    m_source_location_name_isSet = true;
}

bool OAIScheduleAdBreak::is_source_location_name_Set() const{
    return m_source_location_name_isSet;
}

bool OAIScheduleAdBreak::is_source_location_name_Valid() const{
    return m_source_location_name_isValid;
}

QString OAIScheduleAdBreak::getVodSourceName() const {
    return m_vod_source_name;
}
void OAIScheduleAdBreak::setVodSourceName(const QString &vod_source_name) {
    m_vod_source_name = vod_source_name;
    m_vod_source_name_isSet = true;
}

bool OAIScheduleAdBreak::is_vod_source_name_Set() const{
    return m_vod_source_name_isSet;
}

bool OAIScheduleAdBreak::is_vod_source_name_Valid() const{
    return m_vod_source_name_isValid;
}

bool OAIScheduleAdBreak::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_approximate_duration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approximate_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_location_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vod_source_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduleAdBreak::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
