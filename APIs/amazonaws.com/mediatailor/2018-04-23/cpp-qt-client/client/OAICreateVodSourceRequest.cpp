/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateVodSourceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateVodSourceRequest::OAICreateVodSourceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateVodSourceRequest::OAICreateVodSourceRequest() {
    this->initializeModel();
}

OAICreateVodSourceRequest::~OAICreateVodSourceRequest() {}

void OAICreateVodSourceRequest::initializeModel() {

    m_http_package_configurations_isSet = false;
    m_http_package_configurations_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateVodSourceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateVodSourceRequest::fromJsonObject(QJsonObject json) {

    m_http_package_configurations_isValid = ::OpenAPI::fromJsonValue(m_http_package_configurations, json[QString("HttpPackageConfigurations")]);
    m_http_package_configurations_isSet = !json[QString("HttpPackageConfigurations")].isNull() && m_http_package_configurations_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateVodSourceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateVodSourceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_http_package_configurations.isSet()) {
        obj.insert(QString("HttpPackageConfigurations"), ::OpenAPI::toJsonValue(m_http_package_configurations));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QList OAICreateVodSourceRequest::getHttpPackageConfigurations() const {
    return m_http_package_configurations;
}
void OAICreateVodSourceRequest::setHttpPackageConfigurations(const QList &http_package_configurations) {
    m_http_package_configurations = http_package_configurations;
    m_http_package_configurations_isSet = true;
}

bool OAICreateVodSourceRequest::is_http_package_configurations_Set() const{
    return m_http_package_configurations_isSet;
}

bool OAICreateVodSourceRequest::is_http_package_configurations_Valid() const{
    return m_http_package_configurations_isValid;
}

QMap OAICreateVodSourceRequest::getTags() const {
    return m_tags;
}
void OAICreateVodSourceRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateVodSourceRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateVodSourceRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateVodSourceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_http_package_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateVodSourceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_http_package_configurations_isValid && true;
}

} // namespace OpenAPI
