/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefaultSegmentDeliveryConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDefaultSegmentDeliveryConfiguration::OAIDefaultSegmentDeliveryConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDefaultSegmentDeliveryConfiguration::OAIDefaultSegmentDeliveryConfiguration() {
    this->initializeModel();
}

OAIDefaultSegmentDeliveryConfiguration::~OAIDefaultSegmentDeliveryConfiguration() {}

void OAIDefaultSegmentDeliveryConfiguration::initializeModel() {

    m_base_url_isSet = false;
    m_base_url_isValid = false;
}

void OAIDefaultSegmentDeliveryConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDefaultSegmentDeliveryConfiguration::fromJsonObject(QJsonObject json) {

    m_base_url_isValid = ::OpenAPI::fromJsonValue(m_base_url, json[QString("BaseUrl")]);
    m_base_url_isSet = !json[QString("BaseUrl")].isNull() && m_base_url_isValid;
}

QString OAIDefaultSegmentDeliveryConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDefaultSegmentDeliveryConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_base_url_isSet) {
        obj.insert(QString("BaseUrl"), ::OpenAPI::toJsonValue(m_base_url));
    }
    return obj;
}

QString OAIDefaultSegmentDeliveryConfiguration::getBaseUrl() const {
    return m_base_url;
}
void OAIDefaultSegmentDeliveryConfiguration::setBaseUrl(const QString &base_url) {
    m_base_url = base_url;
    m_base_url_isSet = true;
}

bool OAIDefaultSegmentDeliveryConfiguration::is_base_url_Set() const{
    return m_base_url_isSet;
}

bool OAIDefaultSegmentDeliveryConfiguration::is_base_url_Valid() const{
    return m_base_url_isValid;
}

bool OAIDefaultSegmentDeliveryConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDefaultSegmentDeliveryConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
