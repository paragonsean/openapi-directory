/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAdBreak.h
 *
 * Ad break configuration parameters.
 */

#ifndef OAIAdBreak_H
#define OAIAdBreak_H

#include <QJsonObject>

#include "OAIAdBreak_Slate.h"
#include "OAIAdBreak_SpliceInsertMessage.h"
#include "OAIAdBreak_TimeSignalMessage.h"
#include "OAIMessageType.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAdBreak_Slate;
class OAIAdBreak_SpliceInsertMessage;
class OAIAdBreak_TimeSignalMessage;

class OAIAdBreak : public OAIObject {
public:
    OAIAdBreak();
    OAIAdBreak(QString json);
    ~OAIAdBreak() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getAdBreakMetadata() const;
    void setAdBreakMetadata(const QList &ad_break_metadata);
    bool is_ad_break_metadata_Set() const;
    bool is_ad_break_metadata_Valid() const;

    OAIMessageType getMessageType() const;
    void setMessageType(const OAIMessageType &message_type);
    bool is_message_type_Set() const;
    bool is_message_type_Valid() const;

    qint32 getOffsetMillis() const;
    void setOffsetMillis(const qint32 &offset_millis);
    bool is_offset_millis_Set() const;
    bool is_offset_millis_Valid() const;

    OAIAdBreak_Slate getSlate() const;
    void setSlate(const OAIAdBreak_Slate &slate);
    bool is_slate_Set() const;
    bool is_slate_Valid() const;

    OAIAdBreak_SpliceInsertMessage getSpliceInsertMessage() const;
    void setSpliceInsertMessage(const OAIAdBreak_SpliceInsertMessage &splice_insert_message);
    bool is_splice_insert_message_Set() const;
    bool is_splice_insert_message_Valid() const;

    OAIAdBreak_TimeSignalMessage getTimeSignalMessage() const;
    void setTimeSignalMessage(const OAIAdBreak_TimeSignalMessage &time_signal_message);
    bool is_time_signal_message_Set() const;
    bool is_time_signal_message_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_ad_break_metadata;
    bool m_ad_break_metadata_isSet;
    bool m_ad_break_metadata_isValid;

    OAIMessageType m_message_type;
    bool m_message_type_isSet;
    bool m_message_type_isValid;

    qint32 m_offset_millis;
    bool m_offset_millis_isSet;
    bool m_offset_millis_isValid;

    OAIAdBreak_Slate m_slate;
    bool m_slate_isSet;
    bool m_slate_isValid;

    OAIAdBreak_SpliceInsertMessage m_splice_insert_message;
    bool m_splice_insert_message_isSet;
    bool m_splice_insert_message_isValid;

    OAIAdBreak_TimeSignalMessage m_time_signal_message;
    bool m_time_signal_message_isSet;
    bool m_time_signal_message_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAdBreak)

#endif // OAIAdBreak_H
