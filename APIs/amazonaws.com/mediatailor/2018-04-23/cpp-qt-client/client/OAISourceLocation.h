/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISourceLocation.h
 *
 * A source location is a container for sources. For more information about source locations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-source-locations.html\&quot;&gt;Working with source locations&lt;/a&gt; in the &lt;i&gt;MediaTailor User Guide&lt;/i&gt;.
 */

#ifndef OAISourceLocation_H
#define OAISourceLocation_H

#include <QJsonObject>

#include "OAIDescribeSourceLocationResponse_AccessConfiguration.h"
#include "OAISourceLocation_DefaultSegmentDeliveryConfiguration.h"
#include "OAIUpdateSourceLocationResponse_HttpConfiguration.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDescribeSourceLocationResponse_AccessConfiguration;
class OAISourceLocation_DefaultSegmentDeliveryConfiguration;
class OAIUpdateSourceLocationResponse_HttpConfiguration;

class OAISourceLocation : public OAIObject {
public:
    OAISourceLocation();
    OAISourceLocation(QString json);
    ~OAISourceLocation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIDescribeSourceLocationResponse_AccessConfiguration getAccessConfiguration() const;
    void setAccessConfiguration(const OAIDescribeSourceLocationResponse_AccessConfiguration &access_configuration);
    bool is_access_configuration_Set() const;
    bool is_access_configuration_Valid() const;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QDateTime getCreationTime() const;
    void setCreationTime(const QDateTime &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    OAISourceLocation_DefaultSegmentDeliveryConfiguration getDefaultSegmentDeliveryConfiguration() const;
    void setDefaultSegmentDeliveryConfiguration(const OAISourceLocation_DefaultSegmentDeliveryConfiguration &default_segment_delivery_configuration);
    bool is_default_segment_delivery_configuration_Set() const;
    bool is_default_segment_delivery_configuration_Valid() const;

    OAIUpdateSourceLocationResponse_HttpConfiguration getHttpConfiguration() const;
    void setHttpConfiguration(const OAIUpdateSourceLocationResponse_HttpConfiguration &http_configuration);
    bool is_http_configuration_Set() const;
    bool is_http_configuration_Valid() const;

    QDateTime getLastModifiedTime() const;
    void setLastModifiedTime(const QDateTime &last_modified_time);
    bool is_last_modified_time_Set() const;
    bool is_last_modified_time_Valid() const;

    QList getSegmentDeliveryConfigurations() const;
    void setSegmentDeliveryConfigurations(const QList &segment_delivery_configurations);
    bool is_segment_delivery_configurations_Set() const;
    bool is_segment_delivery_configurations_Valid() const;

    QString getSourceLocationName() const;
    void setSourceLocationName(const QString &source_location_name);
    bool is_source_location_name_Set() const;
    bool is_source_location_name_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIDescribeSourceLocationResponse_AccessConfiguration m_access_configuration;
    bool m_access_configuration_isSet;
    bool m_access_configuration_isValid;

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QDateTime m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;

    OAISourceLocation_DefaultSegmentDeliveryConfiguration m_default_segment_delivery_configuration;
    bool m_default_segment_delivery_configuration_isSet;
    bool m_default_segment_delivery_configuration_isValid;

    OAIUpdateSourceLocationResponse_HttpConfiguration m_http_configuration;
    bool m_http_configuration_isSet;
    bool m_http_configuration_isValid;

    QDateTime m_last_modified_time;
    bool m_last_modified_time_isSet;
    bool m_last_modified_time_isValid;

    QList m_segment_delivery_configurations;
    bool m_segment_delivery_configurations_isSet;
    bool m_segment_delivery_configurations_isValid;

    QString m_source_location_name;
    bool m_source_location_name_isSet;
    bool m_source_location_name_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISourceLocation)

#endif // OAISourceLocation_H
