/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponseOutputItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponseOutputItem::OAIResponseOutputItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponseOutputItem::OAIResponseOutputItem() {
    this->initializeModel();
}

OAIResponseOutputItem::~OAIResponseOutputItem() {}

void OAIResponseOutputItem::initializeModel() {

    m_dash_playlist_settings_isSet = false;
    m_dash_playlist_settings_isValid = false;

    m_hls_playlist_settings_isSet = false;
    m_hls_playlist_settings_isValid = false;

    m_manifest_name_isSet = false;
    m_manifest_name_isValid = false;

    m_playback_url_isSet = false;
    m_playback_url_isValid = false;

    m_source_group_isSet = false;
    m_source_group_isValid = false;
}

void OAIResponseOutputItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponseOutputItem::fromJsonObject(QJsonObject json) {

    m_dash_playlist_settings_isValid = ::OpenAPI::fromJsonValue(m_dash_playlist_settings, json[QString("DashPlaylistSettings")]);
    m_dash_playlist_settings_isSet = !json[QString("DashPlaylistSettings")].isNull() && m_dash_playlist_settings_isValid;

    m_hls_playlist_settings_isValid = ::OpenAPI::fromJsonValue(m_hls_playlist_settings, json[QString("HlsPlaylistSettings")]);
    m_hls_playlist_settings_isSet = !json[QString("HlsPlaylistSettings")].isNull() && m_hls_playlist_settings_isValid;

    m_manifest_name_isValid = ::OpenAPI::fromJsonValue(m_manifest_name, json[QString("ManifestName")]);
    m_manifest_name_isSet = !json[QString("ManifestName")].isNull() && m_manifest_name_isValid;

    m_playback_url_isValid = ::OpenAPI::fromJsonValue(m_playback_url, json[QString("PlaybackUrl")]);
    m_playback_url_isSet = !json[QString("PlaybackUrl")].isNull() && m_playback_url_isValid;

    m_source_group_isValid = ::OpenAPI::fromJsonValue(m_source_group, json[QString("SourceGroup")]);
    m_source_group_isSet = !json[QString("SourceGroup")].isNull() && m_source_group_isValid;
}

QString OAIResponseOutputItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponseOutputItem::asJsonObject() const {
    QJsonObject obj;
    if (m_dash_playlist_settings.isSet()) {
        obj.insert(QString("DashPlaylistSettings"), ::OpenAPI::toJsonValue(m_dash_playlist_settings));
    }
    if (m_hls_playlist_settings.isSet()) {
        obj.insert(QString("HlsPlaylistSettings"), ::OpenAPI::toJsonValue(m_hls_playlist_settings));
    }
    if (m_manifest_name_isSet) {
        obj.insert(QString("ManifestName"), ::OpenAPI::toJsonValue(m_manifest_name));
    }
    if (m_playback_url_isSet) {
        obj.insert(QString("PlaybackUrl"), ::OpenAPI::toJsonValue(m_playback_url));
    }
    if (m_source_group_isSet) {
        obj.insert(QString("SourceGroup"), ::OpenAPI::toJsonValue(m_source_group));
    }
    return obj;
}

OAIResponseOutputItem_DashPlaylistSettings OAIResponseOutputItem::getDashPlaylistSettings() const {
    return m_dash_playlist_settings;
}
void OAIResponseOutputItem::setDashPlaylistSettings(const OAIResponseOutputItem_DashPlaylistSettings &dash_playlist_settings) {
    m_dash_playlist_settings = dash_playlist_settings;
    m_dash_playlist_settings_isSet = true;
}

bool OAIResponseOutputItem::is_dash_playlist_settings_Set() const{
    return m_dash_playlist_settings_isSet;
}

bool OAIResponseOutputItem::is_dash_playlist_settings_Valid() const{
    return m_dash_playlist_settings_isValid;
}

OAIResponseOutputItem_HlsPlaylistSettings OAIResponseOutputItem::getHlsPlaylistSettings() const {
    return m_hls_playlist_settings;
}
void OAIResponseOutputItem::setHlsPlaylistSettings(const OAIResponseOutputItem_HlsPlaylistSettings &hls_playlist_settings) {
    m_hls_playlist_settings = hls_playlist_settings;
    m_hls_playlist_settings_isSet = true;
}

bool OAIResponseOutputItem::is_hls_playlist_settings_Set() const{
    return m_hls_playlist_settings_isSet;
}

bool OAIResponseOutputItem::is_hls_playlist_settings_Valid() const{
    return m_hls_playlist_settings_isValid;
}

QString OAIResponseOutputItem::getManifestName() const {
    return m_manifest_name;
}
void OAIResponseOutputItem::setManifestName(const QString &manifest_name) {
    m_manifest_name = manifest_name;
    m_manifest_name_isSet = true;
}

bool OAIResponseOutputItem::is_manifest_name_Set() const{
    return m_manifest_name_isSet;
}

bool OAIResponseOutputItem::is_manifest_name_Valid() const{
    return m_manifest_name_isValid;
}

QString OAIResponseOutputItem::getPlaybackUrl() const {
    return m_playback_url;
}
void OAIResponseOutputItem::setPlaybackUrl(const QString &playback_url) {
    m_playback_url = playback_url;
    m_playback_url_isSet = true;
}

bool OAIResponseOutputItem::is_playback_url_Set() const{
    return m_playback_url_isSet;
}

bool OAIResponseOutputItem::is_playback_url_Valid() const{
    return m_playback_url_isValid;
}

QString OAIResponseOutputItem::getSourceGroup() const {
    return m_source_group;
}
void OAIResponseOutputItem::setSourceGroup(const QString &source_group) {
    m_source_group = source_group;
    m_source_group_isSet = true;
}

bool OAIResponseOutputItem::is_source_group_Set() const{
    return m_source_group_isSet;
}

bool OAIResponseOutputItem::is_source_group_Valid() const{
    return m_source_group_isValid;
}

bool OAIResponseOutputItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dash_playlist_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hls_playlist_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_group_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponseOutputItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_manifest_name_isValid && m_playback_url_isValid && m_source_group_isValid && true;
}

} // namespace OpenAPI
