/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateChannelRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateChannelRequest::OAICreateChannelRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateChannelRequest::OAICreateChannelRequest() {
    this->initializeModel();
}

OAICreateChannelRequest::~OAICreateChannelRequest() {}

void OAICreateChannelRequest::initializeModel() {

    m_filler_slate_isSet = false;
    m_filler_slate_isValid = false;

    m_outputs_isSet = false;
    m_outputs_isValid = false;

    m_playback_mode_isSet = false;
    m_playback_mode_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_tier_isSet = false;
    m_tier_isValid = false;
}

void OAICreateChannelRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateChannelRequest::fromJsonObject(QJsonObject json) {

    m_filler_slate_isValid = ::OpenAPI::fromJsonValue(m_filler_slate, json[QString("FillerSlate")]);
    m_filler_slate_isSet = !json[QString("FillerSlate")].isNull() && m_filler_slate_isValid;

    m_outputs_isValid = ::OpenAPI::fromJsonValue(m_outputs, json[QString("Outputs")]);
    m_outputs_isSet = !json[QString("Outputs")].isNull() && m_outputs_isValid;

    m_playback_mode_isValid = ::OpenAPI::fromJsonValue(m_playback_mode, json[QString("PlaybackMode")]);
    m_playback_mode_isSet = !json[QString("PlaybackMode")].isNull() && m_playback_mode_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_tier_isValid = ::OpenAPI::fromJsonValue(m_tier, json[QString("Tier")]);
    m_tier_isSet = !json[QString("Tier")].isNull() && m_tier_isValid;
}

QString OAICreateChannelRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateChannelRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_filler_slate.isSet()) {
        obj.insert(QString("FillerSlate"), ::OpenAPI::toJsonValue(m_filler_slate));
    }
    if (m_outputs.isSet()) {
        obj.insert(QString("Outputs"), ::OpenAPI::toJsonValue(m_outputs));
    }
    if (m_playback_mode.isSet()) {
        obj.insert(QString("PlaybackMode"), ::OpenAPI::toJsonValue(m_playback_mode));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_tier.isSet()) {
        obj.insert(QString("Tier"), ::OpenAPI::toJsonValue(m_tier));
    }
    return obj;
}

OAIUpdateChannelResponse_FillerSlate OAICreateChannelRequest::getFillerSlate() const {
    return m_filler_slate;
}
void OAICreateChannelRequest::setFillerSlate(const OAIUpdateChannelResponse_FillerSlate &filler_slate) {
    m_filler_slate = filler_slate;
    m_filler_slate_isSet = true;
}

bool OAICreateChannelRequest::is_filler_slate_Set() const{
    return m_filler_slate_isSet;
}

bool OAICreateChannelRequest::is_filler_slate_Valid() const{
    return m_filler_slate_isValid;
}

QList OAICreateChannelRequest::getOutputs() const {
    return m_outputs;
}
void OAICreateChannelRequest::setOutputs(const QList &outputs) {
    m_outputs = outputs;
    m_outputs_isSet = true;
}

bool OAICreateChannelRequest::is_outputs_Set() const{
    return m_outputs_isSet;
}

bool OAICreateChannelRequest::is_outputs_Valid() const{
    return m_outputs_isValid;
}

OAIPlaybackMode OAICreateChannelRequest::getPlaybackMode() const {
    return m_playback_mode;
}
void OAICreateChannelRequest::setPlaybackMode(const OAIPlaybackMode &playback_mode) {
    m_playback_mode = playback_mode;
    m_playback_mode_isSet = true;
}

bool OAICreateChannelRequest::is_playback_mode_Set() const{
    return m_playback_mode_isSet;
}

bool OAICreateChannelRequest::is_playback_mode_Valid() const{
    return m_playback_mode_isValid;
}

QMap OAICreateChannelRequest::getTags() const {
    return m_tags;
}
void OAICreateChannelRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateChannelRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateChannelRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

OAITier OAICreateChannelRequest::getTier() const {
    return m_tier;
}
void OAICreateChannelRequest::setTier(const OAITier &tier) {
    m_tier = tier;
    m_tier_isSet = true;
}

bool OAICreateChannelRequest::is_tier_Set() const{
    return m_tier_isSet;
}

bool OAICreateChannelRequest::is_tier_Valid() const{
    return m_tier_isValid;
}

bool OAICreateChannelRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filler_slate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_outputs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_playback_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateChannelRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_outputs_isValid && m_playback_mode_isValid && true;
}

} // namespace OpenAPI
