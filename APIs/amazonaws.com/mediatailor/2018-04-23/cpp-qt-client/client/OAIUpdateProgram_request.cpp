/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateProgram_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateProgram_request::OAIUpdateProgram_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateProgram_request::OAIUpdateProgram_request() {
    this->initializeModel();
}

OAIUpdateProgram_request::~OAIUpdateProgram_request() {}

void OAIUpdateProgram_request::initializeModel() {

    m_ad_breaks_isSet = false;
    m_ad_breaks_isValid = false;

    m_schedule_configuration_isSet = false;
    m_schedule_configuration_isValid = false;
}

void OAIUpdateProgram_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateProgram_request::fromJsonObject(QJsonObject json) {

    m_ad_breaks_isValid = ::OpenAPI::fromJsonValue(m_ad_breaks, json[QString("AdBreaks")]);
    m_ad_breaks_isSet = !json[QString("AdBreaks")].isNull() && m_ad_breaks_isValid;

    m_schedule_configuration_isValid = ::OpenAPI::fromJsonValue(m_schedule_configuration, json[QString("ScheduleConfiguration")]);
    m_schedule_configuration_isSet = !json[QString("ScheduleConfiguration")].isNull() && m_schedule_configuration_isValid;
}

QString OAIUpdateProgram_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateProgram_request::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_breaks.size() > 0) {
        obj.insert(QString("AdBreaks"), ::OpenAPI::toJsonValue(m_ad_breaks));
    }
    if (m_schedule_configuration.isSet()) {
        obj.insert(QString("ScheduleConfiguration"), ::OpenAPI::toJsonValue(m_schedule_configuration));
    }
    return obj;
}

QList<OAIAdBreak> OAIUpdateProgram_request::getAdBreaks() const {
    return m_ad_breaks;
}
void OAIUpdateProgram_request::setAdBreaks(const QList<OAIAdBreak> &ad_breaks) {
    m_ad_breaks = ad_breaks;
    m_ad_breaks_isSet = true;
}

bool OAIUpdateProgram_request::is_ad_breaks_Set() const{
    return m_ad_breaks_isSet;
}

bool OAIUpdateProgram_request::is_ad_breaks_Valid() const{
    return m_ad_breaks_isValid;
}

OAIUpdateProgram_request_ScheduleConfiguration OAIUpdateProgram_request::getScheduleConfiguration() const {
    return m_schedule_configuration;
}
void OAIUpdateProgram_request::setScheduleConfiguration(const OAIUpdateProgram_request_ScheduleConfiguration &schedule_configuration) {
    m_schedule_configuration = schedule_configuration;
    m_schedule_configuration_isSet = true;
}

bool OAIUpdateProgram_request::is_schedule_configuration_Set() const{
    return m_schedule_configuration_isSet;
}

bool OAIUpdateProgram_request::is_schedule_configuration_Valid() const{
    return m_schedule_configuration_isValid;
}

bool OAIUpdateProgram_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_breaks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateProgram_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_schedule_configuration_isValid && true;
}

} // namespace OpenAPI
