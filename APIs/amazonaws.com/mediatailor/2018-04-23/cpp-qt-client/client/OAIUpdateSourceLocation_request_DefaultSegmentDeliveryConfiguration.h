/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateSourceLocation_request_DefaultSegmentDeliveryConfiguration.h
 *
 * The optional configuration for a server that serves segments. Use this if you want the segment delivery server to be different from the source location server. For example, you can configure your source location server to be an origination server, such as MediaPackage, and the segment delivery server to be a content delivery network (CDN), such as CloudFront. If you don&#39;t specify a segment delivery server, then the source location server is used.
 */

#ifndef OAIUpdateSourceLocation_request_DefaultSegmentDeliveryConfiguration_H
#define OAIUpdateSourceLocation_request_DefaultSegmentDeliveryConfiguration_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUpdateSourceLocation_request_DefaultSegmentDeliveryConfiguration : public OAIObject {
public:
    OAIUpdateSourceLocation_request_DefaultSegmentDeliveryConfiguration();
    OAIUpdateSourceLocation_request_DefaultSegmentDeliveryConfiguration(QString json);
    ~OAIUpdateSourceLocation_request_DefaultSegmentDeliveryConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBaseUrl() const;
    void setBaseUrl(const QString &base_url);
    bool is_base_url_Set() const;
    bool is_base_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_base_url;
    bool m_base_url_isSet;
    bool m_base_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateSourceLocation_request_DefaultSegmentDeliveryConfiguration)

#endif // OAIUpdateSourceLocation_request_DefaultSegmentDeliveryConfiguration_H
