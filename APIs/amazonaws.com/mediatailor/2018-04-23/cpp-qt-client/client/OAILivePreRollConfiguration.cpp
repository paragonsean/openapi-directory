/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILivePreRollConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILivePreRollConfiguration::OAILivePreRollConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILivePreRollConfiguration::OAILivePreRollConfiguration() {
    this->initializeModel();
}

OAILivePreRollConfiguration::~OAILivePreRollConfiguration() {}

void OAILivePreRollConfiguration::initializeModel() {

    m_ad_decision_server_url_isSet = false;
    m_ad_decision_server_url_isValid = false;

    m_max_duration_seconds_isSet = false;
    m_max_duration_seconds_isValid = false;
}

void OAILivePreRollConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILivePreRollConfiguration::fromJsonObject(QJsonObject json) {

    m_ad_decision_server_url_isValid = ::OpenAPI::fromJsonValue(m_ad_decision_server_url, json[QString("AdDecisionServerUrl")]);
    m_ad_decision_server_url_isSet = !json[QString("AdDecisionServerUrl")].isNull() && m_ad_decision_server_url_isValid;

    m_max_duration_seconds_isValid = ::OpenAPI::fromJsonValue(m_max_duration_seconds, json[QString("MaxDurationSeconds")]);
    m_max_duration_seconds_isSet = !json[QString("MaxDurationSeconds")].isNull() && m_max_duration_seconds_isValid;
}

QString OAILivePreRollConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILivePreRollConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_decision_server_url_isSet) {
        obj.insert(QString("AdDecisionServerUrl"), ::OpenAPI::toJsonValue(m_ad_decision_server_url));
    }
    if (m_max_duration_seconds_isSet) {
        obj.insert(QString("MaxDurationSeconds"), ::OpenAPI::toJsonValue(m_max_duration_seconds));
    }
    return obj;
}

QString OAILivePreRollConfiguration::getAdDecisionServerUrl() const {
    return m_ad_decision_server_url;
}
void OAILivePreRollConfiguration::setAdDecisionServerUrl(const QString &ad_decision_server_url) {
    m_ad_decision_server_url = ad_decision_server_url;
    m_ad_decision_server_url_isSet = true;
}

bool OAILivePreRollConfiguration::is_ad_decision_server_url_Set() const{
    return m_ad_decision_server_url_isSet;
}

bool OAILivePreRollConfiguration::is_ad_decision_server_url_Valid() const{
    return m_ad_decision_server_url_isValid;
}

qint32 OAILivePreRollConfiguration::getMaxDurationSeconds() const {
    return m_max_duration_seconds;
}
void OAILivePreRollConfiguration::setMaxDurationSeconds(const qint32 &max_duration_seconds) {
    m_max_duration_seconds = max_duration_seconds;
    m_max_duration_seconds_isSet = true;
}

bool OAILivePreRollConfiguration::is_max_duration_seconds_Set() const{
    return m_max_duration_seconds_isSet;
}

bool OAILivePreRollConfiguration::is_max_duration_seconds_Valid() const{
    return m_max_duration_seconds_isValid;
}

bool OAILivePreRollConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_decision_server_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_duration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILivePreRollConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
