/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListSourceLocationsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListSourceLocationsResponse::OAIListSourceLocationsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListSourceLocationsResponse::OAIListSourceLocationsResponse() {
    this->initializeModel();
}

OAIListSourceLocationsResponse::~OAIListSourceLocationsResponse() {}

void OAIListSourceLocationsResponse::initializeModel() {

    m_items_isSet = false;
    m_items_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListSourceLocationsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListSourceLocationsResponse::fromJsonObject(QJsonObject json) {

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("Items")]);
    m_items_isSet = !json[QString("Items")].isNull() && m_items_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListSourceLocationsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListSourceLocationsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_items.isSet()) {
        obj.insert(QString("Items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListSourceLocationsResponse::getItems() const {
    return m_items;
}
void OAIListSourceLocationsResponse::setItems(const QList &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIListSourceLocationsResponse::is_items_Set() const{
    return m_items_isSet;
}

bool OAIListSourceLocationsResponse::is_items_Valid() const{
    return m_items_isValid;
}

QString OAIListSourceLocationsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListSourceLocationsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListSourceLocationsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListSourceLocationsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListSourceLocationsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_items.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListSourceLocationsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
