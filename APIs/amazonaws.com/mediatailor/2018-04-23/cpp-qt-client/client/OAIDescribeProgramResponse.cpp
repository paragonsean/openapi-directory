/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeProgramResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeProgramResponse::OAIDescribeProgramResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeProgramResponse::OAIDescribeProgramResponse() {
    this->initializeModel();
}

OAIDescribeProgramResponse::~OAIDescribeProgramResponse() {}

void OAIDescribeProgramResponse::initializeModel() {

    m_ad_breaks_isSet = false;
    m_ad_breaks_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_channel_name_isSet = false;
    m_channel_name_isValid = false;

    m_clip_range_isSet = false;
    m_clip_range_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_duration_millis_isSet = false;
    m_duration_millis_isValid = false;

    m_live_source_name_isSet = false;
    m_live_source_name_isValid = false;

    m_program_name_isSet = false;
    m_program_name_isValid = false;

    m_scheduled_start_time_isSet = false;
    m_scheduled_start_time_isValid = false;

    m_source_location_name_isSet = false;
    m_source_location_name_isValid = false;

    m_vod_source_name_isSet = false;
    m_vod_source_name_isValid = false;
}

void OAIDescribeProgramResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeProgramResponse::fromJsonObject(QJsonObject json) {

    m_ad_breaks_isValid = ::OpenAPI::fromJsonValue(m_ad_breaks, json[QString("AdBreaks")]);
    m_ad_breaks_isSet = !json[QString("AdBreaks")].isNull() && m_ad_breaks_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_channel_name_isValid = ::OpenAPI::fromJsonValue(m_channel_name, json[QString("ChannelName")]);
    m_channel_name_isSet = !json[QString("ChannelName")].isNull() && m_channel_name_isValid;

    m_clip_range_isValid = ::OpenAPI::fromJsonValue(m_clip_range, json[QString("ClipRange")]);
    m_clip_range_isSet = !json[QString("ClipRange")].isNull() && m_clip_range_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_duration_millis_isValid = ::OpenAPI::fromJsonValue(m_duration_millis, json[QString("DurationMillis")]);
    m_duration_millis_isSet = !json[QString("DurationMillis")].isNull() && m_duration_millis_isValid;

    m_live_source_name_isValid = ::OpenAPI::fromJsonValue(m_live_source_name, json[QString("LiveSourceName")]);
    m_live_source_name_isSet = !json[QString("LiveSourceName")].isNull() && m_live_source_name_isValid;

    m_program_name_isValid = ::OpenAPI::fromJsonValue(m_program_name, json[QString("ProgramName")]);
    m_program_name_isSet = !json[QString("ProgramName")].isNull() && m_program_name_isValid;

    m_scheduled_start_time_isValid = ::OpenAPI::fromJsonValue(m_scheduled_start_time, json[QString("ScheduledStartTime")]);
    m_scheduled_start_time_isSet = !json[QString("ScheduledStartTime")].isNull() && m_scheduled_start_time_isValid;

    m_source_location_name_isValid = ::OpenAPI::fromJsonValue(m_source_location_name, json[QString("SourceLocationName")]);
    m_source_location_name_isSet = !json[QString("SourceLocationName")].isNull() && m_source_location_name_isValid;

    m_vod_source_name_isValid = ::OpenAPI::fromJsonValue(m_vod_source_name, json[QString("VodSourceName")]);
    m_vod_source_name_isSet = !json[QString("VodSourceName")].isNull() && m_vod_source_name_isValid;
}

QString OAIDescribeProgramResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeProgramResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_breaks.isSet()) {
        obj.insert(QString("AdBreaks"), ::OpenAPI::toJsonValue(m_ad_breaks));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_channel_name_isSet) {
        obj.insert(QString("ChannelName"), ::OpenAPI::toJsonValue(m_channel_name));
    }
    if (m_clip_range.isSet()) {
        obj.insert(QString("ClipRange"), ::OpenAPI::toJsonValue(m_clip_range));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_duration_millis_isSet) {
        obj.insert(QString("DurationMillis"), ::OpenAPI::toJsonValue(m_duration_millis));
    }
    if (m_live_source_name_isSet) {
        obj.insert(QString("LiveSourceName"), ::OpenAPI::toJsonValue(m_live_source_name));
    }
    if (m_program_name_isSet) {
        obj.insert(QString("ProgramName"), ::OpenAPI::toJsonValue(m_program_name));
    }
    if (m_scheduled_start_time_isSet) {
        obj.insert(QString("ScheduledStartTime"), ::OpenAPI::toJsonValue(m_scheduled_start_time));
    }
    if (m_source_location_name_isSet) {
        obj.insert(QString("SourceLocationName"), ::OpenAPI::toJsonValue(m_source_location_name));
    }
    if (m_vod_source_name_isSet) {
        obj.insert(QString("VodSourceName"), ::OpenAPI::toJsonValue(m_vod_source_name));
    }
    return obj;
}

QList OAIDescribeProgramResponse::getAdBreaks() const {
    return m_ad_breaks;
}
void OAIDescribeProgramResponse::setAdBreaks(const QList &ad_breaks) {
    m_ad_breaks = ad_breaks;
    m_ad_breaks_isSet = true;
}

bool OAIDescribeProgramResponse::is_ad_breaks_Set() const{
    return m_ad_breaks_isSet;
}

bool OAIDescribeProgramResponse::is_ad_breaks_Valid() const{
    return m_ad_breaks_isValid;
}

QString OAIDescribeProgramResponse::getArn() const {
    return m_arn;
}
void OAIDescribeProgramResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDescribeProgramResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDescribeProgramResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDescribeProgramResponse::getChannelName() const {
    return m_channel_name;
}
void OAIDescribeProgramResponse::setChannelName(const QString &channel_name) {
    m_channel_name = channel_name;
    m_channel_name_isSet = true;
}

bool OAIDescribeProgramResponse::is_channel_name_Set() const{
    return m_channel_name_isSet;
}

bool OAIDescribeProgramResponse::is_channel_name_Valid() const{
    return m_channel_name_isValid;
}

OAICreateProgramResponse_ClipRange OAIDescribeProgramResponse::getClipRange() const {
    return m_clip_range;
}
void OAIDescribeProgramResponse::setClipRange(const OAICreateProgramResponse_ClipRange &clip_range) {
    m_clip_range = clip_range;
    m_clip_range_isSet = true;
}

bool OAIDescribeProgramResponse::is_clip_range_Set() const{
    return m_clip_range_isSet;
}

bool OAIDescribeProgramResponse::is_clip_range_Valid() const{
    return m_clip_range_isValid;
}

QDateTime OAIDescribeProgramResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeProgramResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeProgramResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeProgramResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

qint32 OAIDescribeProgramResponse::getDurationMillis() const {
    return m_duration_millis;
}
void OAIDescribeProgramResponse::setDurationMillis(const qint32 &duration_millis) {
    m_duration_millis = duration_millis;
    m_duration_millis_isSet = true;
}

bool OAIDescribeProgramResponse::is_duration_millis_Set() const{
    return m_duration_millis_isSet;
}

bool OAIDescribeProgramResponse::is_duration_millis_Valid() const{
    return m_duration_millis_isValid;
}

QString OAIDescribeProgramResponse::getLiveSourceName() const {
    return m_live_source_name;
}
void OAIDescribeProgramResponse::setLiveSourceName(const QString &live_source_name) {
    m_live_source_name = live_source_name;
    m_live_source_name_isSet = true;
}

bool OAIDescribeProgramResponse::is_live_source_name_Set() const{
    return m_live_source_name_isSet;
}

bool OAIDescribeProgramResponse::is_live_source_name_Valid() const{
    return m_live_source_name_isValid;
}

QString OAIDescribeProgramResponse::getProgramName() const {
    return m_program_name;
}
void OAIDescribeProgramResponse::setProgramName(const QString &program_name) {
    m_program_name = program_name;
    m_program_name_isSet = true;
}

bool OAIDescribeProgramResponse::is_program_name_Set() const{
    return m_program_name_isSet;
}

bool OAIDescribeProgramResponse::is_program_name_Valid() const{
    return m_program_name_isValid;
}

QDateTime OAIDescribeProgramResponse::getScheduledStartTime() const {
    return m_scheduled_start_time;
}
void OAIDescribeProgramResponse::setScheduledStartTime(const QDateTime &scheduled_start_time) {
    m_scheduled_start_time = scheduled_start_time;
    m_scheduled_start_time_isSet = true;
}

bool OAIDescribeProgramResponse::is_scheduled_start_time_Set() const{
    return m_scheduled_start_time_isSet;
}

bool OAIDescribeProgramResponse::is_scheduled_start_time_Valid() const{
    return m_scheduled_start_time_isValid;
}

QString OAIDescribeProgramResponse::getSourceLocationName() const {
    return m_source_location_name;
}
void OAIDescribeProgramResponse::setSourceLocationName(const QString &source_location_name) {
    m_source_location_name = source_location_name;
    m_source_location_name_isSet = true;
}

bool OAIDescribeProgramResponse::is_source_location_name_Set() const{
    return m_source_location_name_isSet;
}

bool OAIDescribeProgramResponse::is_source_location_name_Valid() const{
    return m_source_location_name_isValid;
}

QString OAIDescribeProgramResponse::getVodSourceName() const {
    return m_vod_source_name;
}
void OAIDescribeProgramResponse::setVodSourceName(const QString &vod_source_name) {
    m_vod_source_name = vod_source_name;
    m_vod_source_name_isSet = true;
}

bool OAIDescribeProgramResponse::is_vod_source_name_Set() const{
    return m_vod_source_name_isSet;
}

bool OAIDescribeProgramResponse::is_vod_source_name_Valid() const{
    return m_vod_source_name_isValid;
}

bool OAIDescribeProgramResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_breaks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clip_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_source_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_location_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vod_source_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeProgramResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
