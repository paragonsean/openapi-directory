/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAvailMatchingCriteria.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAvailMatchingCriteria::OAIAvailMatchingCriteria(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAvailMatchingCriteria::OAIAvailMatchingCriteria() {
    this->initializeModel();
}

OAIAvailMatchingCriteria::~OAIAvailMatchingCriteria() {}

void OAIAvailMatchingCriteria::initializeModel() {

    m_dynamic_variable_isSet = false;
    m_dynamic_variable_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;
}

void OAIAvailMatchingCriteria::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAvailMatchingCriteria::fromJsonObject(QJsonObject json) {

    m_dynamic_variable_isValid = ::OpenAPI::fromJsonValue(m_dynamic_variable, json[QString("DynamicVariable")]);
    m_dynamic_variable_isSet = !json[QString("DynamicVariable")].isNull() && m_dynamic_variable_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("Operator")]);
    m_r_operator_isSet = !json[QString("Operator")].isNull() && m_r_operator_isValid;
}

QString OAIAvailMatchingCriteria::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAvailMatchingCriteria::asJsonObject() const {
    QJsonObject obj;
    if (m_dynamic_variable_isSet) {
        obj.insert(QString("DynamicVariable"), ::OpenAPI::toJsonValue(m_dynamic_variable));
    }
    if (m_r_operator.isSet()) {
        obj.insert(QString("Operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    return obj;
}

QString OAIAvailMatchingCriteria::getDynamicVariable() const {
    return m_dynamic_variable;
}
void OAIAvailMatchingCriteria::setDynamicVariable(const QString &dynamic_variable) {
    m_dynamic_variable = dynamic_variable;
    m_dynamic_variable_isSet = true;
}

bool OAIAvailMatchingCriteria::is_dynamic_variable_Set() const{
    return m_dynamic_variable_isSet;
}

bool OAIAvailMatchingCriteria::is_dynamic_variable_Valid() const{
    return m_dynamic_variable_isValid;
}

OAIOperator OAIAvailMatchingCriteria::getROperator() const {
    return m_r_operator;
}
void OAIAvailMatchingCriteria::setROperator(const OAIOperator &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAIAvailMatchingCriteria::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAIAvailMatchingCriteria::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

bool OAIAvailMatchingCriteria::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dynamic_variable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAvailMatchingCriteria::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dynamic_variable_isValid && m_r_operator_isValid && true;
}

} // namespace OpenAPI
