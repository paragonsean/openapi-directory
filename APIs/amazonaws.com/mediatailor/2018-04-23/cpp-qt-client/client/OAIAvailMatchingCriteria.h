/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAvailMatchingCriteria.h
 *
 * &lt;p&gt;MediaTailor only places (consumes) prefetched ads if the ad break meets the criteria defined by the dynamic variables. This gives you granular control over which ad break to place the prefetched ads into.&lt;/p&gt; &lt;p&gt;As an example, let&#39;s say that you set &lt;code&gt;DynamicVariable&lt;/code&gt; to &lt;code&gt;scte.event_id&lt;/code&gt; and &lt;code&gt;Operator&lt;/code&gt; to &lt;code&gt;EQUALS&lt;/code&gt;, and your playback configuration has an ADS URL of &lt;code&gt;https://my.ads.server.com/path?&amp;amp;podId&#x3D;[scte.avail_num]&amp;amp;event&#x3D;[scte.event_id]&amp;amp;duration&#x3D;[session.avail_duration_secs]&lt;/code&gt;. And the prefetch request to the ADS contains these values &lt;code&gt;https://my.ads.server.com/path?&amp;amp;podId&#x3D;3&amp;amp;event&#x3D;my-awesome-event&amp;amp;duration&#x3D;30&lt;/code&gt;. MediaTailor will only insert the prefetched ads into the ad break if has a SCTE marker with an event id of &lt;code&gt;my-awesome-event&lt;/code&gt;, since it must match the event id that MediaTailor uses to query the ADS.&lt;/p&gt; &lt;p&gt;You can specify up to five &lt;code&gt;AvailMatchingCriteria&lt;/code&gt;. If you specify multiple &lt;code&gt;AvailMatchingCriteria&lt;/code&gt;, MediaTailor combines them to match using a logical &lt;code&gt;AND&lt;/code&gt;. You can model logical &lt;code&gt;OR&lt;/code&gt; combinations by creating multiple prefetch schedules.&lt;/p&gt;
 */

#ifndef OAIAvailMatchingCriteria_H
#define OAIAvailMatchingCriteria_H

#include <QJsonObject>

#include "OAIOperator.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAvailMatchingCriteria : public OAIObject {
public:
    OAIAvailMatchingCriteria();
    OAIAvailMatchingCriteria(QString json);
    ~OAIAvailMatchingCriteria() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDynamicVariable() const;
    void setDynamicVariable(const QString &dynamic_variable);
    bool is_dynamic_variable_Set() const;
    bool is_dynamic_variable_Valid() const;

    OAIOperator getROperator() const;
    void setROperator(const OAIOperator &r_operator);
    bool is_r_operator_Set() const;
    bool is_r_operator_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_dynamic_variable;
    bool m_dynamic_variable_isSet;
    bool m_dynamic_variable_isValid;

    OAIOperator m_r_operator;
    bool m_r_operator_isSet;
    bool m_r_operator_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAvailMatchingCriteria)

#endif // OAIAvailMatchingCriteria_H
