/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateProgram_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateProgram_request::OAICreateProgram_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateProgram_request::OAICreateProgram_request() {
    this->initializeModel();
}

OAICreateProgram_request::~OAICreateProgram_request() {}

void OAICreateProgram_request::initializeModel() {

    m_ad_breaks_isSet = false;
    m_ad_breaks_isValid = false;

    m_live_source_name_isSet = false;
    m_live_source_name_isValid = false;

    m_schedule_configuration_isSet = false;
    m_schedule_configuration_isValid = false;

    m_source_location_name_isSet = false;
    m_source_location_name_isValid = false;

    m_vod_source_name_isSet = false;
    m_vod_source_name_isValid = false;
}

void OAICreateProgram_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateProgram_request::fromJsonObject(QJsonObject json) {

    m_ad_breaks_isValid = ::OpenAPI::fromJsonValue(m_ad_breaks, json[QString("AdBreaks")]);
    m_ad_breaks_isSet = !json[QString("AdBreaks")].isNull() && m_ad_breaks_isValid;

    m_live_source_name_isValid = ::OpenAPI::fromJsonValue(m_live_source_name, json[QString("LiveSourceName")]);
    m_live_source_name_isSet = !json[QString("LiveSourceName")].isNull() && m_live_source_name_isValid;

    m_schedule_configuration_isValid = ::OpenAPI::fromJsonValue(m_schedule_configuration, json[QString("ScheduleConfiguration")]);
    m_schedule_configuration_isSet = !json[QString("ScheduleConfiguration")].isNull() && m_schedule_configuration_isValid;

    m_source_location_name_isValid = ::OpenAPI::fromJsonValue(m_source_location_name, json[QString("SourceLocationName")]);
    m_source_location_name_isSet = !json[QString("SourceLocationName")].isNull() && m_source_location_name_isValid;

    m_vod_source_name_isValid = ::OpenAPI::fromJsonValue(m_vod_source_name, json[QString("VodSourceName")]);
    m_vod_source_name_isSet = !json[QString("VodSourceName")].isNull() && m_vod_source_name_isValid;
}

QString OAICreateProgram_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateProgram_request::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_breaks.size() > 0) {
        obj.insert(QString("AdBreaks"), ::OpenAPI::toJsonValue(m_ad_breaks));
    }
    if (m_live_source_name_isSet) {
        obj.insert(QString("LiveSourceName"), ::OpenAPI::toJsonValue(m_live_source_name));
    }
    if (m_schedule_configuration.isSet()) {
        obj.insert(QString("ScheduleConfiguration"), ::OpenAPI::toJsonValue(m_schedule_configuration));
    }
    if (m_source_location_name_isSet) {
        obj.insert(QString("SourceLocationName"), ::OpenAPI::toJsonValue(m_source_location_name));
    }
    if (m_vod_source_name_isSet) {
        obj.insert(QString("VodSourceName"), ::OpenAPI::toJsonValue(m_vod_source_name));
    }
    return obj;
}

QList<OAIAdBreak> OAICreateProgram_request::getAdBreaks() const {
    return m_ad_breaks;
}
void OAICreateProgram_request::setAdBreaks(const QList<OAIAdBreak> &ad_breaks) {
    m_ad_breaks = ad_breaks;
    m_ad_breaks_isSet = true;
}

bool OAICreateProgram_request::is_ad_breaks_Set() const{
    return m_ad_breaks_isSet;
}

bool OAICreateProgram_request::is_ad_breaks_Valid() const{
    return m_ad_breaks_isValid;
}

QString OAICreateProgram_request::getLiveSourceName() const {
    return m_live_source_name;
}
void OAICreateProgram_request::setLiveSourceName(const QString &live_source_name) {
    m_live_source_name = live_source_name;
    m_live_source_name_isSet = true;
}

bool OAICreateProgram_request::is_live_source_name_Set() const{
    return m_live_source_name_isSet;
}

bool OAICreateProgram_request::is_live_source_name_Valid() const{
    return m_live_source_name_isValid;
}

OAICreateProgram_request_ScheduleConfiguration OAICreateProgram_request::getScheduleConfiguration() const {
    return m_schedule_configuration;
}
void OAICreateProgram_request::setScheduleConfiguration(const OAICreateProgram_request_ScheduleConfiguration &schedule_configuration) {
    m_schedule_configuration = schedule_configuration;
    m_schedule_configuration_isSet = true;
}

bool OAICreateProgram_request::is_schedule_configuration_Set() const{
    return m_schedule_configuration_isSet;
}

bool OAICreateProgram_request::is_schedule_configuration_Valid() const{
    return m_schedule_configuration_isValid;
}

QString OAICreateProgram_request::getSourceLocationName() const {
    return m_source_location_name;
}
void OAICreateProgram_request::setSourceLocationName(const QString &source_location_name) {
    m_source_location_name = source_location_name;
    m_source_location_name_isSet = true;
}

bool OAICreateProgram_request::is_source_location_name_Set() const{
    return m_source_location_name_isSet;
}

bool OAICreateProgram_request::is_source_location_name_Valid() const{
    return m_source_location_name_isValid;
}

QString OAICreateProgram_request::getVodSourceName() const {
    return m_vod_source_name;
}
void OAICreateProgram_request::setVodSourceName(const QString &vod_source_name) {
    m_vod_source_name = vod_source_name;
    m_vod_source_name_isSet = true;
}

bool OAICreateProgram_request::is_vod_source_name_Set() const{
    return m_vod_source_name_isSet;
}

bool OAICreateProgram_request::is_vod_source_name_Valid() const{
    return m_vod_source_name_isValid;
}

bool OAICreateProgram_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_breaks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_source_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_location_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vod_source_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateProgram_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_schedule_configuration_isValid && m_source_location_name_isValid && true;
}

} // namespace OpenAPI
