/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateProgramRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateProgramRequest::OAIUpdateProgramRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateProgramRequest::OAIUpdateProgramRequest() {
    this->initializeModel();
}

OAIUpdateProgramRequest::~OAIUpdateProgramRequest() {}

void OAIUpdateProgramRequest::initializeModel() {

    m_ad_breaks_isSet = false;
    m_ad_breaks_isValid = false;

    m_schedule_configuration_isSet = false;
    m_schedule_configuration_isValid = false;
}

void OAIUpdateProgramRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateProgramRequest::fromJsonObject(QJsonObject json) {

    m_ad_breaks_isValid = ::OpenAPI::fromJsonValue(m_ad_breaks, json[QString("AdBreaks")]);
    m_ad_breaks_isSet = !json[QString("AdBreaks")].isNull() && m_ad_breaks_isValid;

    m_schedule_configuration_isValid = ::OpenAPI::fromJsonValue(m_schedule_configuration, json[QString("ScheduleConfiguration")]);
    m_schedule_configuration_isSet = !json[QString("ScheduleConfiguration")].isNull() && m_schedule_configuration_isValid;
}

QString OAIUpdateProgramRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateProgramRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_breaks.isSet()) {
        obj.insert(QString("AdBreaks"), ::OpenAPI::toJsonValue(m_ad_breaks));
    }
    if (m_schedule_configuration.isSet()) {
        obj.insert(QString("ScheduleConfiguration"), ::OpenAPI::toJsonValue(m_schedule_configuration));
    }
    return obj;
}

QList OAIUpdateProgramRequest::getAdBreaks() const {
    return m_ad_breaks;
}
void OAIUpdateProgramRequest::setAdBreaks(const QList &ad_breaks) {
    m_ad_breaks = ad_breaks;
    m_ad_breaks_isSet = true;
}

bool OAIUpdateProgramRequest::is_ad_breaks_Set() const{
    return m_ad_breaks_isSet;
}

bool OAIUpdateProgramRequest::is_ad_breaks_Valid() const{
    return m_ad_breaks_isValid;
}

OAIUpdateProgramRequest_ScheduleConfiguration OAIUpdateProgramRequest::getScheduleConfiguration() const {
    return m_schedule_configuration;
}
void OAIUpdateProgramRequest::setScheduleConfiguration(const OAIUpdateProgramRequest_ScheduleConfiguration &schedule_configuration) {
    m_schedule_configuration = schedule_configuration;
    m_schedule_configuration_isSet = true;
}

bool OAIUpdateProgramRequest::is_schedule_configuration_Set() const{
    return m_schedule_configuration_isSet;
}

bool OAIUpdateProgramRequest::is_schedule_configuration_Valid() const{
    return m_schedule_configuration_isValid;
}

bool OAIUpdateProgramRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_breaks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateProgramRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_schedule_configuration_isValid && true;
}

} // namespace OpenAPI
