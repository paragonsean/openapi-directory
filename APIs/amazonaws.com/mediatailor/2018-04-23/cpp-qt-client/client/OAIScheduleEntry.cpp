/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduleEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduleEntry::OAIScheduleEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduleEntry::OAIScheduleEntry() {
    this->initializeModel();
}

OAIScheduleEntry::~OAIScheduleEntry() {}

void OAIScheduleEntry::initializeModel() {

    m_approximate_duration_seconds_isSet = false;
    m_approximate_duration_seconds_isValid = false;

    m_approximate_start_time_isSet = false;
    m_approximate_start_time_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_channel_name_isSet = false;
    m_channel_name_isValid = false;

    m_live_source_name_isSet = false;
    m_live_source_name_isValid = false;

    m_program_name_isSet = false;
    m_program_name_isValid = false;

    m_schedule_ad_breaks_isSet = false;
    m_schedule_ad_breaks_isValid = false;

    m_schedule_entry_type_isSet = false;
    m_schedule_entry_type_isValid = false;

    m_source_location_name_isSet = false;
    m_source_location_name_isValid = false;

    m_vod_source_name_isSet = false;
    m_vod_source_name_isValid = false;
}

void OAIScheduleEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduleEntry::fromJsonObject(QJsonObject json) {

    m_approximate_duration_seconds_isValid = ::OpenAPI::fromJsonValue(m_approximate_duration_seconds, json[QString("ApproximateDurationSeconds")]);
    m_approximate_duration_seconds_isSet = !json[QString("ApproximateDurationSeconds")].isNull() && m_approximate_duration_seconds_isValid;

    m_approximate_start_time_isValid = ::OpenAPI::fromJsonValue(m_approximate_start_time, json[QString("ApproximateStartTime")]);
    m_approximate_start_time_isSet = !json[QString("ApproximateStartTime")].isNull() && m_approximate_start_time_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_channel_name_isValid = ::OpenAPI::fromJsonValue(m_channel_name, json[QString("ChannelName")]);
    m_channel_name_isSet = !json[QString("ChannelName")].isNull() && m_channel_name_isValid;

    m_live_source_name_isValid = ::OpenAPI::fromJsonValue(m_live_source_name, json[QString("LiveSourceName")]);
    m_live_source_name_isSet = !json[QString("LiveSourceName")].isNull() && m_live_source_name_isValid;

    m_program_name_isValid = ::OpenAPI::fromJsonValue(m_program_name, json[QString("ProgramName")]);
    m_program_name_isSet = !json[QString("ProgramName")].isNull() && m_program_name_isValid;

    m_schedule_ad_breaks_isValid = ::OpenAPI::fromJsonValue(m_schedule_ad_breaks, json[QString("ScheduleAdBreaks")]);
    m_schedule_ad_breaks_isSet = !json[QString("ScheduleAdBreaks")].isNull() && m_schedule_ad_breaks_isValid;

    m_schedule_entry_type_isValid = ::OpenAPI::fromJsonValue(m_schedule_entry_type, json[QString("ScheduleEntryType")]);
    m_schedule_entry_type_isSet = !json[QString("ScheduleEntryType")].isNull() && m_schedule_entry_type_isValid;

    m_source_location_name_isValid = ::OpenAPI::fromJsonValue(m_source_location_name, json[QString("SourceLocationName")]);
    m_source_location_name_isSet = !json[QString("SourceLocationName")].isNull() && m_source_location_name_isValid;

    m_vod_source_name_isValid = ::OpenAPI::fromJsonValue(m_vod_source_name, json[QString("VodSourceName")]);
    m_vod_source_name_isSet = !json[QString("VodSourceName")].isNull() && m_vod_source_name_isValid;
}

QString OAIScheduleEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduleEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_approximate_duration_seconds_isSet) {
        obj.insert(QString("ApproximateDurationSeconds"), ::OpenAPI::toJsonValue(m_approximate_duration_seconds));
    }
    if (m_approximate_start_time_isSet) {
        obj.insert(QString("ApproximateStartTime"), ::OpenAPI::toJsonValue(m_approximate_start_time));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_channel_name_isSet) {
        obj.insert(QString("ChannelName"), ::OpenAPI::toJsonValue(m_channel_name));
    }
    if (m_live_source_name_isSet) {
        obj.insert(QString("LiveSourceName"), ::OpenAPI::toJsonValue(m_live_source_name));
    }
    if (m_program_name_isSet) {
        obj.insert(QString("ProgramName"), ::OpenAPI::toJsonValue(m_program_name));
    }
    if (m_schedule_ad_breaks.isSet()) {
        obj.insert(QString("ScheduleAdBreaks"), ::OpenAPI::toJsonValue(m_schedule_ad_breaks));
    }
    if (m_schedule_entry_type.isSet()) {
        obj.insert(QString("ScheduleEntryType"), ::OpenAPI::toJsonValue(m_schedule_entry_type));
    }
    if (m_source_location_name_isSet) {
        obj.insert(QString("SourceLocationName"), ::OpenAPI::toJsonValue(m_source_location_name));
    }
    if (m_vod_source_name_isSet) {
        obj.insert(QString("VodSourceName"), ::OpenAPI::toJsonValue(m_vod_source_name));
    }
    return obj;
}

qint32 OAIScheduleEntry::getApproximateDurationSeconds() const {
    return m_approximate_duration_seconds;
}
void OAIScheduleEntry::setApproximateDurationSeconds(const qint32 &approximate_duration_seconds) {
    m_approximate_duration_seconds = approximate_duration_seconds;
    m_approximate_duration_seconds_isSet = true;
}

bool OAIScheduleEntry::is_approximate_duration_seconds_Set() const{
    return m_approximate_duration_seconds_isSet;
}

bool OAIScheduleEntry::is_approximate_duration_seconds_Valid() const{
    return m_approximate_duration_seconds_isValid;
}

QDateTime OAIScheduleEntry::getApproximateStartTime() const {
    return m_approximate_start_time;
}
void OAIScheduleEntry::setApproximateStartTime(const QDateTime &approximate_start_time) {
    m_approximate_start_time = approximate_start_time;
    m_approximate_start_time_isSet = true;
}

bool OAIScheduleEntry::is_approximate_start_time_Set() const{
    return m_approximate_start_time_isSet;
}

bool OAIScheduleEntry::is_approximate_start_time_Valid() const{
    return m_approximate_start_time_isValid;
}

QString OAIScheduleEntry::getArn() const {
    return m_arn;
}
void OAIScheduleEntry::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIScheduleEntry::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIScheduleEntry::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIScheduleEntry::getChannelName() const {
    return m_channel_name;
}
void OAIScheduleEntry::setChannelName(const QString &channel_name) {
    m_channel_name = channel_name;
    m_channel_name_isSet = true;
}

bool OAIScheduleEntry::is_channel_name_Set() const{
    return m_channel_name_isSet;
}

bool OAIScheduleEntry::is_channel_name_Valid() const{
    return m_channel_name_isValid;
}

QString OAIScheduleEntry::getLiveSourceName() const {
    return m_live_source_name;
}
void OAIScheduleEntry::setLiveSourceName(const QString &live_source_name) {
    m_live_source_name = live_source_name;
    m_live_source_name_isSet = true;
}

bool OAIScheduleEntry::is_live_source_name_Set() const{
    return m_live_source_name_isSet;
}

bool OAIScheduleEntry::is_live_source_name_Valid() const{
    return m_live_source_name_isValid;
}

QString OAIScheduleEntry::getProgramName() const {
    return m_program_name;
}
void OAIScheduleEntry::setProgramName(const QString &program_name) {
    m_program_name = program_name;
    m_program_name_isSet = true;
}

bool OAIScheduleEntry::is_program_name_Set() const{
    return m_program_name_isSet;
}

bool OAIScheduleEntry::is_program_name_Valid() const{
    return m_program_name_isValid;
}

QList OAIScheduleEntry::getScheduleAdBreaks() const {
    return m_schedule_ad_breaks;
}
void OAIScheduleEntry::setScheduleAdBreaks(const QList &schedule_ad_breaks) {
    m_schedule_ad_breaks = schedule_ad_breaks;
    m_schedule_ad_breaks_isSet = true;
}

bool OAIScheduleEntry::is_schedule_ad_breaks_Set() const{
    return m_schedule_ad_breaks_isSet;
}

bool OAIScheduleEntry::is_schedule_ad_breaks_Valid() const{
    return m_schedule_ad_breaks_isValid;
}

OAIScheduleEntryType OAIScheduleEntry::getScheduleEntryType() const {
    return m_schedule_entry_type;
}
void OAIScheduleEntry::setScheduleEntryType(const OAIScheduleEntryType &schedule_entry_type) {
    m_schedule_entry_type = schedule_entry_type;
    m_schedule_entry_type_isSet = true;
}

bool OAIScheduleEntry::is_schedule_entry_type_Set() const{
    return m_schedule_entry_type_isSet;
}

bool OAIScheduleEntry::is_schedule_entry_type_Valid() const{
    return m_schedule_entry_type_isValid;
}

QString OAIScheduleEntry::getSourceLocationName() const {
    return m_source_location_name;
}
void OAIScheduleEntry::setSourceLocationName(const QString &source_location_name) {
    m_source_location_name = source_location_name;
    m_source_location_name_isSet = true;
}

bool OAIScheduleEntry::is_source_location_name_Set() const{
    return m_source_location_name_isSet;
}

bool OAIScheduleEntry::is_source_location_name_Valid() const{
    return m_source_location_name_isValid;
}

QString OAIScheduleEntry::getVodSourceName() const {
    return m_vod_source_name;
}
void OAIScheduleEntry::setVodSourceName(const QString &vod_source_name) {
    m_vod_source_name = vod_source_name;
    m_vod_source_name_isSet = true;
}

bool OAIScheduleEntry::is_vod_source_name_Set() const{
    return m_vod_source_name_isSet;
}

bool OAIScheduleEntry::is_vod_source_name_Valid() const{
    return m_vod_source_name_isValid;
}

bool OAIScheduleEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_approximate_duration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approximate_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_source_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_ad_breaks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_entry_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_location_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vod_source_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduleEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && m_channel_name_isValid && m_program_name_isValid && m_source_location_name_isValid && true;
}

} // namespace OpenAPI
