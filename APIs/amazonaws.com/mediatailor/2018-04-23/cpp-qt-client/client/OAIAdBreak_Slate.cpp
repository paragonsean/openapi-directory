/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdBreak_Slate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdBreak_Slate::OAIAdBreak_Slate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdBreak_Slate::OAIAdBreak_Slate() {
    this->initializeModel();
}

OAIAdBreak_Slate::~OAIAdBreak_Slate() {}

void OAIAdBreak_Slate::initializeModel() {

    m_source_location_name_isSet = false;
    m_source_location_name_isValid = false;

    m_vod_source_name_isSet = false;
    m_vod_source_name_isValid = false;
}

void OAIAdBreak_Slate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdBreak_Slate::fromJsonObject(QJsonObject json) {

    m_source_location_name_isValid = ::OpenAPI::fromJsonValue(m_source_location_name, json[QString("SourceLocationName")]);
    m_source_location_name_isSet = !json[QString("SourceLocationName")].isNull() && m_source_location_name_isValid;

    m_vod_source_name_isValid = ::OpenAPI::fromJsonValue(m_vod_source_name, json[QString("VodSourceName")]);
    m_vod_source_name_isSet = !json[QString("VodSourceName")].isNull() && m_vod_source_name_isValid;
}

QString OAIAdBreak_Slate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdBreak_Slate::asJsonObject() const {
    QJsonObject obj;
    if (m_source_location_name_isSet) {
        obj.insert(QString("SourceLocationName"), ::OpenAPI::toJsonValue(m_source_location_name));
    }
    if (m_vod_source_name_isSet) {
        obj.insert(QString("VodSourceName"), ::OpenAPI::toJsonValue(m_vod_source_name));
    }
    return obj;
}

QString OAIAdBreak_Slate::getSourceLocationName() const {
    return m_source_location_name;
}
void OAIAdBreak_Slate::setSourceLocationName(const QString &source_location_name) {
    m_source_location_name = source_location_name;
    m_source_location_name_isSet = true;
}

bool OAIAdBreak_Slate::is_source_location_name_Set() const{
    return m_source_location_name_isSet;
}

bool OAIAdBreak_Slate::is_source_location_name_Valid() const{
    return m_source_location_name_isValid;
}

QString OAIAdBreak_Slate::getVodSourceName() const {
    return m_vod_source_name;
}
void OAIAdBreak_Slate::setVodSourceName(const QString &vod_source_name) {
    m_vod_source_name = vod_source_name;
    m_vod_source_name_isSet = true;
}

bool OAIAdBreak_Slate::is_vod_source_name_Set() const{
    return m_vod_source_name_isSet;
}

bool OAIAdBreak_Slate::is_vod_source_name_Valid() const{
    return m_vod_source_name_isValid;
}

bool OAIAdBreak_Slate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_location_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vod_source_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdBreak_Slate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
