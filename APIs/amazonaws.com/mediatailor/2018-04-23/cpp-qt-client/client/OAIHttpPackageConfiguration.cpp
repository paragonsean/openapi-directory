/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpPackageConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpPackageConfiguration::OAIHttpPackageConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpPackageConfiguration::OAIHttpPackageConfiguration() {
    this->initializeModel();
}

OAIHttpPackageConfiguration::~OAIHttpPackageConfiguration() {}

void OAIHttpPackageConfiguration::initializeModel() {

    m_path_isSet = false;
    m_path_isValid = false;

    m_source_group_isSet = false;
    m_source_group_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIHttpPackageConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHttpPackageConfiguration::fromJsonObject(QJsonObject json) {

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("Path")]);
    m_path_isSet = !json[QString("Path")].isNull() && m_path_isValid;

    m_source_group_isValid = ::OpenAPI::fromJsonValue(m_source_group, json[QString("SourceGroup")]);
    m_source_group_isSet = !json[QString("SourceGroup")].isNull() && m_source_group_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIHttpPackageConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHttpPackageConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_path_isSet) {
        obj.insert(QString("Path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_source_group_isSet) {
        obj.insert(QString("SourceGroup"), ::OpenAPI::toJsonValue(m_source_group));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIHttpPackageConfiguration::getPath() const {
    return m_path;
}
void OAIHttpPackageConfiguration::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIHttpPackageConfiguration::is_path_Set() const{
    return m_path_isSet;
}

bool OAIHttpPackageConfiguration::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIHttpPackageConfiguration::getSourceGroup() const {
    return m_source_group;
}
void OAIHttpPackageConfiguration::setSourceGroup(const QString &source_group) {
    m_source_group = source_group;
    m_source_group_isSet = true;
}

bool OAIHttpPackageConfiguration::is_source_group_Set() const{
    return m_source_group_isSet;
}

bool OAIHttpPackageConfiguration::is_source_group_Valid() const{
    return m_source_group_isValid;
}

OAIType OAIHttpPackageConfiguration::getType() const {
    return m_type;
}
void OAIHttpPackageConfiguration::setType(const OAIType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIHttpPackageConfiguration::is_type_Set() const{
    return m_type_isSet;
}

bool OAIHttpPackageConfiguration::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIHttpPackageConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHttpPackageConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_path_isValid && m_source_group_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
