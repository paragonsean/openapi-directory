/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigureLogsForChannel_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigureLogsForChannel_request::OAIConfigureLogsForChannel_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigureLogsForChannel_request::OAIConfigureLogsForChannel_request() {
    this->initializeModel();
}

OAIConfigureLogsForChannel_request::~OAIConfigureLogsForChannel_request() {}

void OAIConfigureLogsForChannel_request::initializeModel() {

    m_channel_name_isSet = false;
    m_channel_name_isValid = false;

    m_log_types_isSet = false;
    m_log_types_isValid = false;
}

void OAIConfigureLogsForChannel_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigureLogsForChannel_request::fromJsonObject(QJsonObject json) {

    m_channel_name_isValid = ::OpenAPI::fromJsonValue(m_channel_name, json[QString("ChannelName")]);
    m_channel_name_isSet = !json[QString("ChannelName")].isNull() && m_channel_name_isValid;

    m_log_types_isValid = ::OpenAPI::fromJsonValue(m_log_types, json[QString("LogTypes")]);
    m_log_types_isSet = !json[QString("LogTypes")].isNull() && m_log_types_isValid;
}

QString OAIConfigureLogsForChannel_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigureLogsForChannel_request::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_name_isSet) {
        obj.insert(QString("ChannelName"), ::OpenAPI::toJsonValue(m_channel_name));
    }
    if (m_log_types.size() > 0) {
        obj.insert(QString("LogTypes"), ::OpenAPI::toJsonValue(m_log_types));
    }
    return obj;
}

QString OAIConfigureLogsForChannel_request::getChannelName() const {
    return m_channel_name;
}
void OAIConfigureLogsForChannel_request::setChannelName(const QString &channel_name) {
    m_channel_name = channel_name;
    m_channel_name_isSet = true;
}

bool OAIConfigureLogsForChannel_request::is_channel_name_Set() const{
    return m_channel_name_isSet;
}

bool OAIConfigureLogsForChannel_request::is_channel_name_Valid() const{
    return m_channel_name_isValid;
}

QList<OAILogType> OAIConfigureLogsForChannel_request::getLogTypes() const {
    return m_log_types;
}
void OAIConfigureLogsForChannel_request::setLogTypes(const QList<OAILogType> &log_types) {
    m_log_types = log_types;
    m_log_types_isSet = true;
}

bool OAIConfigureLogsForChannel_request::is_log_types_Set() const{
    return m_log_types_isSet;
}

bool OAIConfigureLogsForChannel_request::is_log_types_Valid() const{
    return m_log_types_isValid;
}

bool OAIConfigureLogsForChannel_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigureLogsForChannel_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_channel_name_isValid && m_log_types_isValid && true;
}

} // namespace OpenAPI
