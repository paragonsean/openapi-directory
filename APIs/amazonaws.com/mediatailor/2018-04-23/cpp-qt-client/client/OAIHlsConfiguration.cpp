/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHlsConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHlsConfiguration::OAIHlsConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHlsConfiguration::OAIHlsConfiguration() {
    this->initializeModel();
}

OAIHlsConfiguration::~OAIHlsConfiguration() {}

void OAIHlsConfiguration::initializeModel() {

    m_manifest_endpoint_prefix_isSet = false;
    m_manifest_endpoint_prefix_isValid = false;
}

void OAIHlsConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHlsConfiguration::fromJsonObject(QJsonObject json) {

    m_manifest_endpoint_prefix_isValid = ::OpenAPI::fromJsonValue(m_manifest_endpoint_prefix, json[QString("ManifestEndpointPrefix")]);
    m_manifest_endpoint_prefix_isSet = !json[QString("ManifestEndpointPrefix")].isNull() && m_manifest_endpoint_prefix_isValid;
}

QString OAIHlsConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHlsConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_manifest_endpoint_prefix_isSet) {
        obj.insert(QString("ManifestEndpointPrefix"), ::OpenAPI::toJsonValue(m_manifest_endpoint_prefix));
    }
    return obj;
}

QString OAIHlsConfiguration::getManifestEndpointPrefix() const {
    return m_manifest_endpoint_prefix;
}
void OAIHlsConfiguration::setManifestEndpointPrefix(const QString &manifest_endpoint_prefix) {
    m_manifest_endpoint_prefix = manifest_endpoint_prefix;
    m_manifest_endpoint_prefix_isSet = true;
}

bool OAIHlsConfiguration::is_manifest_endpoint_prefix_Set() const{
    return m_manifest_endpoint_prefix_isSet;
}

bool OAIHlsConfiguration::is_manifest_endpoint_prefix_Valid() const{
    return m_manifest_endpoint_prefix_isValid;
}

bool OAIHlsConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_manifest_endpoint_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHlsConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
