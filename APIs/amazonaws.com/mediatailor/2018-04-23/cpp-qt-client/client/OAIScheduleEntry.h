/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIScheduleEntry.h
 *
 * The properties for a schedule.
 */

#ifndef OAIScheduleEntry_H
#define OAIScheduleEntry_H

#include <QJsonObject>

#include "OAIScheduleEntryType.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIScheduleEntry : public OAIObject {
public:
    OAIScheduleEntry();
    OAIScheduleEntry(QString json);
    ~OAIScheduleEntry() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getApproximateDurationSeconds() const;
    void setApproximateDurationSeconds(const qint32 &approximate_duration_seconds);
    bool is_approximate_duration_seconds_Set() const;
    bool is_approximate_duration_seconds_Valid() const;

    QDateTime getApproximateStartTime() const;
    void setApproximateStartTime(const QDateTime &approximate_start_time);
    bool is_approximate_start_time_Set() const;
    bool is_approximate_start_time_Valid() const;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QString getChannelName() const;
    void setChannelName(const QString &channel_name);
    bool is_channel_name_Set() const;
    bool is_channel_name_Valid() const;

    QString getLiveSourceName() const;
    void setLiveSourceName(const QString &live_source_name);
    bool is_live_source_name_Set() const;
    bool is_live_source_name_Valid() const;

    QString getProgramName() const;
    void setProgramName(const QString &program_name);
    bool is_program_name_Set() const;
    bool is_program_name_Valid() const;

    QList getScheduleAdBreaks() const;
    void setScheduleAdBreaks(const QList &schedule_ad_breaks);
    bool is_schedule_ad_breaks_Set() const;
    bool is_schedule_ad_breaks_Valid() const;

    OAIScheduleEntryType getScheduleEntryType() const;
    void setScheduleEntryType(const OAIScheduleEntryType &schedule_entry_type);
    bool is_schedule_entry_type_Set() const;
    bool is_schedule_entry_type_Valid() const;

    QString getSourceLocationName() const;
    void setSourceLocationName(const QString &source_location_name);
    bool is_source_location_name_Set() const;
    bool is_source_location_name_Valid() const;

    QString getVodSourceName() const;
    void setVodSourceName(const QString &vod_source_name);
    bool is_vod_source_name_Set() const;
    bool is_vod_source_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_approximate_duration_seconds;
    bool m_approximate_duration_seconds_isSet;
    bool m_approximate_duration_seconds_isValid;

    QDateTime m_approximate_start_time;
    bool m_approximate_start_time_isSet;
    bool m_approximate_start_time_isValid;

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QString m_channel_name;
    bool m_channel_name_isSet;
    bool m_channel_name_isValid;

    QString m_live_source_name;
    bool m_live_source_name_isSet;
    bool m_live_source_name_isValid;

    QString m_program_name;
    bool m_program_name_isSet;
    bool m_program_name_isValid;

    QList m_schedule_ad_breaks;
    bool m_schedule_ad_breaks_isSet;
    bool m_schedule_ad_breaks_isValid;

    OAIScheduleEntryType m_schedule_entry_type;
    bool m_schedule_entry_type_isSet;
    bool m_schedule_entry_type_isValid;

    QString m_source_location_name;
    bool m_source_location_name_isSet;
    bool m_source_location_name_isValid;

    QString m_vod_source_name;
    bool m_vod_source_name_isSet;
    bool m_vod_source_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIScheduleEntry)

#endif // OAIScheduleEntry_H
