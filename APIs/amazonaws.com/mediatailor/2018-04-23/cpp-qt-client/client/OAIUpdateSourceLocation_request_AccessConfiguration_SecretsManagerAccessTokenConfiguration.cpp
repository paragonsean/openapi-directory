/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateSourceLocation_request_AccessConfiguration_SecretsManagerAccessTokenConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateSourceLocation_request_AccessConfiguration_SecretsManagerAccessTokenConfiguration::OAIUpdateSourceLocation_request_AccessConfiguration_SecretsManagerAccessTokenConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateSourceLocation_request_AccessConfiguration_SecretsManagerAccessTokenConfiguration::OAIUpdateSourceLocation_request_AccessConfiguration_SecretsManagerAccessTokenConfiguration() {
    this->initializeModel();
}

OAIUpdateSourceLocation_request_AccessConfiguration_SecretsManagerAccessTokenConfiguration::~OAIUpdateSourceLocation_request_AccessConfiguration_SecretsManagerAccessTokenConfiguration() {}

void OAIUpdateSourceLocation_request_AccessConfiguration_SecretsManagerAccessTokenConfiguration::initializeModel() {

    m_header_name_isSet = false;
    m_header_name_isValid = false;

    m_secret_arn_isSet = false;
    m_secret_arn_isValid = false;

    m_secret_string_key_isSet = false;
    m_secret_string_key_isValid = false;
}

void OAIUpdateSourceLocation_request_AccessConfiguration_SecretsManagerAccessTokenConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateSourceLocation_request_AccessConfiguration_SecretsManagerAccessTokenConfiguration::fromJsonObject(QJsonObject json) {

    m_header_name_isValid = ::OpenAPI::fromJsonValue(m_header_name, json[QString("HeaderName")]);
    m_header_name_isSet = !json[QString("HeaderName")].isNull() && m_header_name_isValid;

    m_secret_arn_isValid = ::OpenAPI::fromJsonValue(m_secret_arn, json[QString("SecretArn")]);
    m_secret_arn_isSet = !json[QString("SecretArn")].isNull() && m_secret_arn_isValid;

    m_secret_string_key_isValid = ::OpenAPI::fromJsonValue(m_secret_string_key, json[QString("SecretStringKey")]);
    m_secret_string_key_isSet = !json[QString("SecretStringKey")].isNull() && m_secret_string_key_isValid;
}

QString OAIUpdateSourceLocation_request_AccessConfiguration_SecretsManagerAccessTokenConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateSourceLocation_request_AccessConfiguration_SecretsManagerAccessTokenConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_header_name_isSet) {
        obj.insert(QString("HeaderName"), ::OpenAPI::toJsonValue(m_header_name));
    }
    if (m_secret_arn_isSet) {
        obj.insert(QString("SecretArn"), ::OpenAPI::toJsonValue(m_secret_arn));
    }
    if (m_secret_string_key_isSet) {
        obj.insert(QString("SecretStringKey"), ::OpenAPI::toJsonValue(m_secret_string_key));
    }
    return obj;
}

QString OAIUpdateSourceLocation_request_AccessConfiguration_SecretsManagerAccessTokenConfiguration::getHeaderName() const {
    return m_header_name;
}
void OAIUpdateSourceLocation_request_AccessConfiguration_SecretsManagerAccessTokenConfiguration::setHeaderName(const QString &header_name) {
    m_header_name = header_name;
    m_header_name_isSet = true;
}

bool OAIUpdateSourceLocation_request_AccessConfiguration_SecretsManagerAccessTokenConfiguration::is_header_name_Set() const{
    return m_header_name_isSet;
}

bool OAIUpdateSourceLocation_request_AccessConfiguration_SecretsManagerAccessTokenConfiguration::is_header_name_Valid() const{
    return m_header_name_isValid;
}

QString OAIUpdateSourceLocation_request_AccessConfiguration_SecretsManagerAccessTokenConfiguration::getSecretArn() const {
    return m_secret_arn;
}
void OAIUpdateSourceLocation_request_AccessConfiguration_SecretsManagerAccessTokenConfiguration::setSecretArn(const QString &secret_arn) {
    m_secret_arn = secret_arn;
    m_secret_arn_isSet = true;
}

bool OAIUpdateSourceLocation_request_AccessConfiguration_SecretsManagerAccessTokenConfiguration::is_secret_arn_Set() const{
    return m_secret_arn_isSet;
}

bool OAIUpdateSourceLocation_request_AccessConfiguration_SecretsManagerAccessTokenConfiguration::is_secret_arn_Valid() const{
    return m_secret_arn_isValid;
}

QString OAIUpdateSourceLocation_request_AccessConfiguration_SecretsManagerAccessTokenConfiguration::getSecretStringKey() const {
    return m_secret_string_key;
}
void OAIUpdateSourceLocation_request_AccessConfiguration_SecretsManagerAccessTokenConfiguration::setSecretStringKey(const QString &secret_string_key) {
    m_secret_string_key = secret_string_key;
    m_secret_string_key_isSet = true;
}

bool OAIUpdateSourceLocation_request_AccessConfiguration_SecretsManagerAccessTokenConfiguration::is_secret_string_key_Set() const{
    return m_secret_string_key_isSet;
}

bool OAIUpdateSourceLocation_request_AccessConfiguration_SecretsManagerAccessTokenConfiguration::is_secret_string_key_Valid() const{
    return m_secret_string_key_isValid;
}

bool OAIUpdateSourceLocation_request_AccessConfiguration_SecretsManagerAccessTokenConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_header_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_string_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateSourceLocation_request_AccessConfiguration_SecretsManagerAccessTokenConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
