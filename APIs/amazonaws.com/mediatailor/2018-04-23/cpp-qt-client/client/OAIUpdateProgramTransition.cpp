/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateProgramTransition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateProgramTransition::OAIUpdateProgramTransition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateProgramTransition::OAIUpdateProgramTransition() {
    this->initializeModel();
}

OAIUpdateProgramTransition::~OAIUpdateProgramTransition() {}

void OAIUpdateProgramTransition::initializeModel() {

    m_duration_millis_isSet = false;
    m_duration_millis_isValid = false;

    m_scheduled_start_time_millis_isSet = false;
    m_scheduled_start_time_millis_isValid = false;
}

void OAIUpdateProgramTransition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateProgramTransition::fromJsonObject(QJsonObject json) {

    m_duration_millis_isValid = ::OpenAPI::fromJsonValue(m_duration_millis, json[QString("DurationMillis")]);
    m_duration_millis_isSet = !json[QString("DurationMillis")].isNull() && m_duration_millis_isValid;

    m_scheduled_start_time_millis_isValid = ::OpenAPI::fromJsonValue(m_scheduled_start_time_millis, json[QString("ScheduledStartTimeMillis")]);
    m_scheduled_start_time_millis_isSet = !json[QString("ScheduledStartTimeMillis")].isNull() && m_scheduled_start_time_millis_isValid;
}

QString OAIUpdateProgramTransition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateProgramTransition::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_millis_isSet) {
        obj.insert(QString("DurationMillis"), ::OpenAPI::toJsonValue(m_duration_millis));
    }
    if (m_scheduled_start_time_millis_isSet) {
        obj.insert(QString("ScheduledStartTimeMillis"), ::OpenAPI::toJsonValue(m_scheduled_start_time_millis));
    }
    return obj;
}

qint32 OAIUpdateProgramTransition::getDurationMillis() const {
    return m_duration_millis;
}
void OAIUpdateProgramTransition::setDurationMillis(const qint32 &duration_millis) {
    m_duration_millis = duration_millis;
    m_duration_millis_isSet = true;
}

bool OAIUpdateProgramTransition::is_duration_millis_Set() const{
    return m_duration_millis_isSet;
}

bool OAIUpdateProgramTransition::is_duration_millis_Valid() const{
    return m_duration_millis_isValid;
}

qint32 OAIUpdateProgramTransition::getScheduledStartTimeMillis() const {
    return m_scheduled_start_time_millis;
}
void OAIUpdateProgramTransition::setScheduledStartTimeMillis(const qint32 &scheduled_start_time_millis) {
    m_scheduled_start_time_millis = scheduled_start_time_millis;
    m_scheduled_start_time_millis_isSet = true;
}

bool OAIUpdateProgramTransition::is_scheduled_start_time_millis_Set() const{
    return m_scheduled_start_time_millis_isSet;
}

bool OAIUpdateProgramTransition::is_scheduled_start_time_millis_Valid() const{
    return m_scheduled_start_time_millis_isValid;
}

bool OAIUpdateProgramTransition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_start_time_millis_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateProgramTransition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
