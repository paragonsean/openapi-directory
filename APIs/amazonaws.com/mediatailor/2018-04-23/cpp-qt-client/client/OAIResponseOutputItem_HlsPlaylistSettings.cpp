/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponseOutputItem_HlsPlaylistSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponseOutputItem_HlsPlaylistSettings::OAIResponseOutputItem_HlsPlaylistSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponseOutputItem_HlsPlaylistSettings::OAIResponseOutputItem_HlsPlaylistSettings() {
    this->initializeModel();
}

OAIResponseOutputItem_HlsPlaylistSettings::~OAIResponseOutputItem_HlsPlaylistSettings() {}

void OAIResponseOutputItem_HlsPlaylistSettings::initializeModel() {

    m_ad_markup_type_isSet = false;
    m_ad_markup_type_isValid = false;

    m_manifest_window_seconds_isSet = false;
    m_manifest_window_seconds_isValid = false;
}

void OAIResponseOutputItem_HlsPlaylistSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponseOutputItem_HlsPlaylistSettings::fromJsonObject(QJsonObject json) {

    m_ad_markup_type_isValid = ::OpenAPI::fromJsonValue(m_ad_markup_type, json[QString("AdMarkupType")]);
    m_ad_markup_type_isSet = !json[QString("AdMarkupType")].isNull() && m_ad_markup_type_isValid;

    m_manifest_window_seconds_isValid = ::OpenAPI::fromJsonValue(m_manifest_window_seconds, json[QString("ManifestWindowSeconds")]);
    m_manifest_window_seconds_isSet = !json[QString("ManifestWindowSeconds")].isNull() && m_manifest_window_seconds_isValid;
}

QString OAIResponseOutputItem_HlsPlaylistSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponseOutputItem_HlsPlaylistSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_markup_type.isSet()) {
        obj.insert(QString("AdMarkupType"), ::OpenAPI::toJsonValue(m_ad_markup_type));
    }
    if (m_manifest_window_seconds_isSet) {
        obj.insert(QString("ManifestWindowSeconds"), ::OpenAPI::toJsonValue(m_manifest_window_seconds));
    }
    return obj;
}

QList OAIResponseOutputItem_HlsPlaylistSettings::getAdMarkupType() const {
    return m_ad_markup_type;
}
void OAIResponseOutputItem_HlsPlaylistSettings::setAdMarkupType(const QList &ad_markup_type) {
    m_ad_markup_type = ad_markup_type;
    m_ad_markup_type_isSet = true;
}

bool OAIResponseOutputItem_HlsPlaylistSettings::is_ad_markup_type_Set() const{
    return m_ad_markup_type_isSet;
}

bool OAIResponseOutputItem_HlsPlaylistSettings::is_ad_markup_type_Valid() const{
    return m_ad_markup_type_isValid;
}

qint32 OAIResponseOutputItem_HlsPlaylistSettings::getManifestWindowSeconds() const {
    return m_manifest_window_seconds;
}
void OAIResponseOutputItem_HlsPlaylistSettings::setManifestWindowSeconds(const qint32 &manifest_window_seconds) {
    m_manifest_window_seconds = manifest_window_seconds;
    m_manifest_window_seconds_isSet = true;
}

bool OAIResponseOutputItem_HlsPlaylistSettings::is_manifest_window_seconds_Set() const{
    return m_manifest_window_seconds_isSet;
}

bool OAIResponseOutputItem_HlsPlaylistSettings::is_manifest_window_seconds_Valid() const{
    return m_manifest_window_seconds_isValid;
}

bool OAIResponseOutputItem_HlsPlaylistSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_markup_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest_window_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponseOutputItem_HlsPlaylistSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
