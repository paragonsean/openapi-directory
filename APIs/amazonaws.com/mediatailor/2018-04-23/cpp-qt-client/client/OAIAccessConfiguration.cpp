/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessConfiguration::OAIAccessConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessConfiguration::OAIAccessConfiguration() {
    this->initializeModel();
}

OAIAccessConfiguration::~OAIAccessConfiguration() {}

void OAIAccessConfiguration::initializeModel() {

    m_access_type_isSet = false;
    m_access_type_isValid = false;

    m_secrets_manager_access_token_configuration_isSet = false;
    m_secrets_manager_access_token_configuration_isValid = false;
}

void OAIAccessConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessConfiguration::fromJsonObject(QJsonObject json) {

    m_access_type_isValid = ::OpenAPI::fromJsonValue(m_access_type, json[QString("AccessType")]);
    m_access_type_isSet = !json[QString("AccessType")].isNull() && m_access_type_isValid;

    m_secrets_manager_access_token_configuration_isValid = ::OpenAPI::fromJsonValue(m_secrets_manager_access_token_configuration, json[QString("SecretsManagerAccessTokenConfiguration")]);
    m_secrets_manager_access_token_configuration_isSet = !json[QString("SecretsManagerAccessTokenConfiguration")].isNull() && m_secrets_manager_access_token_configuration_isValid;
}

QString OAIAccessConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_access_type.isSet()) {
        obj.insert(QString("AccessType"), ::OpenAPI::toJsonValue(m_access_type));
    }
    if (m_secrets_manager_access_token_configuration.isSet()) {
        obj.insert(QString("SecretsManagerAccessTokenConfiguration"), ::OpenAPI::toJsonValue(m_secrets_manager_access_token_configuration));
    }
    return obj;
}

OAIAccessType OAIAccessConfiguration::getAccessType() const {
    return m_access_type;
}
void OAIAccessConfiguration::setAccessType(const OAIAccessType &access_type) {
    m_access_type = access_type;
    m_access_type_isSet = true;
}

bool OAIAccessConfiguration::is_access_type_Set() const{
    return m_access_type_isSet;
}

bool OAIAccessConfiguration::is_access_type_Valid() const{
    return m_access_type_isValid;
}

OAIUpdateSourceLocation_request_AccessConfiguration_SecretsManagerAccessTokenConfiguration OAIAccessConfiguration::getSecretsManagerAccessTokenConfiguration() const {
    return m_secrets_manager_access_token_configuration;
}
void OAIAccessConfiguration::setSecretsManagerAccessTokenConfiguration(const OAIUpdateSourceLocation_request_AccessConfiguration_SecretsManagerAccessTokenConfiguration &secrets_manager_access_token_configuration) {
    m_secrets_manager_access_token_configuration = secrets_manager_access_token_configuration;
    m_secrets_manager_access_token_configuration_isSet = true;
}

bool OAIAccessConfiguration::is_secrets_manager_access_token_configuration_Set() const{
    return m_secrets_manager_access_token_configuration_isSet;
}

bool OAIAccessConfiguration::is_secrets_manager_access_token_configuration_Valid() const{
    return m_secrets_manager_access_token_configuration_isValid;
}

bool OAIAccessConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secrets_manager_access_token_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
