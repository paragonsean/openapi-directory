/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISegmentationDescriptor.h
 *
 * &lt;p&gt;The &lt;code&gt;segmentation_descriptor&lt;/code&gt; message can contain advanced metadata fields, like content identifiers, to convey a wide range of information about the ad break. MediaTailor writes the ad metadata in the egress manifest as part of the &lt;code&gt;EXT-X-DATERANGE&lt;/code&gt; or &lt;code&gt;EventStream&lt;/code&gt; ad marker&#39;s SCTE-35 data.&lt;/p&gt; &lt;p&gt; &lt;code&gt;segmentation_descriptor&lt;/code&gt; messages must be sent with the &lt;code&gt;time_signal&lt;/code&gt; message type.&lt;/p&gt; &lt;p&gt;See the &lt;code&gt;segmentation_descriptor()&lt;/code&gt; table of the 2022 SCTE-35 specification for more information.&lt;/p&gt;
 */

#ifndef OAISegmentationDescriptor_H
#define OAISegmentationDescriptor_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISegmentationDescriptor : public OAIObject {
public:
    OAISegmentationDescriptor();
    OAISegmentationDescriptor(QString json);
    ~OAISegmentationDescriptor() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getSegmentNum() const;
    void setSegmentNum(const qint32 &segment_num);
    bool is_segment_num_Set() const;
    bool is_segment_num_Valid() const;

    qint32 getSegmentationEventId() const;
    void setSegmentationEventId(const qint32 &segmentation_event_id);
    bool is_segmentation_event_id_Set() const;
    bool is_segmentation_event_id_Valid() const;

    qint32 getSegmentationTypeId() const;
    void setSegmentationTypeId(const qint32 &segmentation_type_id);
    bool is_segmentation_type_id_Set() const;
    bool is_segmentation_type_id_Valid() const;

    QString getSegmentationUpid() const;
    void setSegmentationUpid(const QString &segmentation_upid);
    bool is_segmentation_upid_Set() const;
    bool is_segmentation_upid_Valid() const;

    qint32 getSegmentationUpidType() const;
    void setSegmentationUpidType(const qint32 &segmentation_upid_type);
    bool is_segmentation_upid_type_Set() const;
    bool is_segmentation_upid_type_Valid() const;

    qint32 getSegmentsExpected() const;
    void setSegmentsExpected(const qint32 &segments_expected);
    bool is_segments_expected_Set() const;
    bool is_segments_expected_Valid() const;

    qint32 getSubSegmentNum() const;
    void setSubSegmentNum(const qint32 &sub_segment_num);
    bool is_sub_segment_num_Set() const;
    bool is_sub_segment_num_Valid() const;

    qint32 getSubSegmentsExpected() const;
    void setSubSegmentsExpected(const qint32 &sub_segments_expected);
    bool is_sub_segments_expected_Set() const;
    bool is_sub_segments_expected_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_segment_num;
    bool m_segment_num_isSet;
    bool m_segment_num_isValid;

    qint32 m_segmentation_event_id;
    bool m_segmentation_event_id_isSet;
    bool m_segmentation_event_id_isValid;

    qint32 m_segmentation_type_id;
    bool m_segmentation_type_id_isSet;
    bool m_segmentation_type_id_isValid;

    QString m_segmentation_upid;
    bool m_segmentation_upid_isSet;
    bool m_segmentation_upid_isValid;

    qint32 m_segmentation_upid_type;
    bool m_segmentation_upid_type_isSet;
    bool m_segmentation_upid_type_isValid;

    qint32 m_segments_expected;
    bool m_segments_expected_isSet;
    bool m_segments_expected_isValid;

    qint32 m_sub_segment_num;
    bool m_sub_segment_num_isSet;
    bool m_sub_segment_num_isValid;

    qint32 m_sub_segments_expected;
    bool m_sub_segments_expected_isSet;
    bool m_sub_segments_expected_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISegmentationDescriptor)

#endif // OAISegmentationDescriptor_H
