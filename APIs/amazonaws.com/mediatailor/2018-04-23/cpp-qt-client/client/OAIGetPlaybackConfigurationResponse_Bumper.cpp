/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetPlaybackConfigurationResponse_Bumper.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetPlaybackConfigurationResponse_Bumper::OAIGetPlaybackConfigurationResponse_Bumper(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetPlaybackConfigurationResponse_Bumper::OAIGetPlaybackConfigurationResponse_Bumper() {
    this->initializeModel();
}

OAIGetPlaybackConfigurationResponse_Bumper::~OAIGetPlaybackConfigurationResponse_Bumper() {}

void OAIGetPlaybackConfigurationResponse_Bumper::initializeModel() {

    m_end_url_isSet = false;
    m_end_url_isValid = false;

    m_start_url_isSet = false;
    m_start_url_isValid = false;
}

void OAIGetPlaybackConfigurationResponse_Bumper::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetPlaybackConfigurationResponse_Bumper::fromJsonObject(QJsonObject json) {

    m_end_url_isValid = ::OpenAPI::fromJsonValue(m_end_url, json[QString("EndUrl")]);
    m_end_url_isSet = !json[QString("EndUrl")].isNull() && m_end_url_isValid;

    m_start_url_isValid = ::OpenAPI::fromJsonValue(m_start_url, json[QString("StartUrl")]);
    m_start_url_isSet = !json[QString("StartUrl")].isNull() && m_start_url_isValid;
}

QString OAIGetPlaybackConfigurationResponse_Bumper::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetPlaybackConfigurationResponse_Bumper::asJsonObject() const {
    QJsonObject obj;
    if (m_end_url_isSet) {
        obj.insert(QString("EndUrl"), ::OpenAPI::toJsonValue(m_end_url));
    }
    if (m_start_url_isSet) {
        obj.insert(QString("StartUrl"), ::OpenAPI::toJsonValue(m_start_url));
    }
    return obj;
}

QString OAIGetPlaybackConfigurationResponse_Bumper::getEndUrl() const {
    return m_end_url;
}
void OAIGetPlaybackConfigurationResponse_Bumper::setEndUrl(const QString &end_url) {
    m_end_url = end_url;
    m_end_url_isSet = true;
}

bool OAIGetPlaybackConfigurationResponse_Bumper::is_end_url_Set() const{
    return m_end_url_isSet;
}

bool OAIGetPlaybackConfigurationResponse_Bumper::is_end_url_Valid() const{
    return m_end_url_isValid;
}

QString OAIGetPlaybackConfigurationResponse_Bumper::getStartUrl() const {
    return m_start_url;
}
void OAIGetPlaybackConfigurationResponse_Bumper::setStartUrl(const QString &start_url) {
    m_start_url = start_url;
    m_start_url_isSet = true;
}

bool OAIGetPlaybackConfigurationResponse_Bumper::is_start_url_Set() const{
    return m_start_url_isSet;
}

bool OAIGetPlaybackConfigurationResponse_Bumper::is_start_url_Valid() const{
    return m_start_url_isValid;
}

bool OAIGetPlaybackConfigurationResponse_Bumper::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetPlaybackConfigurationResponse_Bumper::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
