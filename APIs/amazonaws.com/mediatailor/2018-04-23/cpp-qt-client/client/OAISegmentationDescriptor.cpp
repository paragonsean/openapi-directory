/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISegmentationDescriptor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISegmentationDescriptor::OAISegmentationDescriptor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISegmentationDescriptor::OAISegmentationDescriptor() {
    this->initializeModel();
}

OAISegmentationDescriptor::~OAISegmentationDescriptor() {}

void OAISegmentationDescriptor::initializeModel() {

    m_segment_num_isSet = false;
    m_segment_num_isValid = false;

    m_segmentation_event_id_isSet = false;
    m_segmentation_event_id_isValid = false;

    m_segmentation_type_id_isSet = false;
    m_segmentation_type_id_isValid = false;

    m_segmentation_upid_isSet = false;
    m_segmentation_upid_isValid = false;

    m_segmentation_upid_type_isSet = false;
    m_segmentation_upid_type_isValid = false;

    m_segments_expected_isSet = false;
    m_segments_expected_isValid = false;

    m_sub_segment_num_isSet = false;
    m_sub_segment_num_isValid = false;

    m_sub_segments_expected_isSet = false;
    m_sub_segments_expected_isValid = false;
}

void OAISegmentationDescriptor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISegmentationDescriptor::fromJsonObject(QJsonObject json) {

    m_segment_num_isValid = ::OpenAPI::fromJsonValue(m_segment_num, json[QString("SegmentNum")]);
    m_segment_num_isSet = !json[QString("SegmentNum")].isNull() && m_segment_num_isValid;

    m_segmentation_event_id_isValid = ::OpenAPI::fromJsonValue(m_segmentation_event_id, json[QString("SegmentationEventId")]);
    m_segmentation_event_id_isSet = !json[QString("SegmentationEventId")].isNull() && m_segmentation_event_id_isValid;

    m_segmentation_type_id_isValid = ::OpenAPI::fromJsonValue(m_segmentation_type_id, json[QString("SegmentationTypeId")]);
    m_segmentation_type_id_isSet = !json[QString("SegmentationTypeId")].isNull() && m_segmentation_type_id_isValid;

    m_segmentation_upid_isValid = ::OpenAPI::fromJsonValue(m_segmentation_upid, json[QString("SegmentationUpid")]);
    m_segmentation_upid_isSet = !json[QString("SegmentationUpid")].isNull() && m_segmentation_upid_isValid;

    m_segmentation_upid_type_isValid = ::OpenAPI::fromJsonValue(m_segmentation_upid_type, json[QString("SegmentationUpidType")]);
    m_segmentation_upid_type_isSet = !json[QString("SegmentationUpidType")].isNull() && m_segmentation_upid_type_isValid;

    m_segments_expected_isValid = ::OpenAPI::fromJsonValue(m_segments_expected, json[QString("SegmentsExpected")]);
    m_segments_expected_isSet = !json[QString("SegmentsExpected")].isNull() && m_segments_expected_isValid;

    m_sub_segment_num_isValid = ::OpenAPI::fromJsonValue(m_sub_segment_num, json[QString("SubSegmentNum")]);
    m_sub_segment_num_isSet = !json[QString("SubSegmentNum")].isNull() && m_sub_segment_num_isValid;

    m_sub_segments_expected_isValid = ::OpenAPI::fromJsonValue(m_sub_segments_expected, json[QString("SubSegmentsExpected")]);
    m_sub_segments_expected_isSet = !json[QString("SubSegmentsExpected")].isNull() && m_sub_segments_expected_isValid;
}

QString OAISegmentationDescriptor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISegmentationDescriptor::asJsonObject() const {
    QJsonObject obj;
    if (m_segment_num_isSet) {
        obj.insert(QString("SegmentNum"), ::OpenAPI::toJsonValue(m_segment_num));
    }
    if (m_segmentation_event_id_isSet) {
        obj.insert(QString("SegmentationEventId"), ::OpenAPI::toJsonValue(m_segmentation_event_id));
    }
    if (m_segmentation_type_id_isSet) {
        obj.insert(QString("SegmentationTypeId"), ::OpenAPI::toJsonValue(m_segmentation_type_id));
    }
    if (m_segmentation_upid_isSet) {
        obj.insert(QString("SegmentationUpid"), ::OpenAPI::toJsonValue(m_segmentation_upid));
    }
    if (m_segmentation_upid_type_isSet) {
        obj.insert(QString("SegmentationUpidType"), ::OpenAPI::toJsonValue(m_segmentation_upid_type));
    }
    if (m_segments_expected_isSet) {
        obj.insert(QString("SegmentsExpected"), ::OpenAPI::toJsonValue(m_segments_expected));
    }
    if (m_sub_segment_num_isSet) {
        obj.insert(QString("SubSegmentNum"), ::OpenAPI::toJsonValue(m_sub_segment_num));
    }
    if (m_sub_segments_expected_isSet) {
        obj.insert(QString("SubSegmentsExpected"), ::OpenAPI::toJsonValue(m_sub_segments_expected));
    }
    return obj;
}

qint32 OAISegmentationDescriptor::getSegmentNum() const {
    return m_segment_num;
}
void OAISegmentationDescriptor::setSegmentNum(const qint32 &segment_num) {
    m_segment_num = segment_num;
    m_segment_num_isSet = true;
}

bool OAISegmentationDescriptor::is_segment_num_Set() const{
    return m_segment_num_isSet;
}

bool OAISegmentationDescriptor::is_segment_num_Valid() const{
    return m_segment_num_isValid;
}

qint32 OAISegmentationDescriptor::getSegmentationEventId() const {
    return m_segmentation_event_id;
}
void OAISegmentationDescriptor::setSegmentationEventId(const qint32 &segmentation_event_id) {
    m_segmentation_event_id = segmentation_event_id;
    m_segmentation_event_id_isSet = true;
}

bool OAISegmentationDescriptor::is_segmentation_event_id_Set() const{
    return m_segmentation_event_id_isSet;
}

bool OAISegmentationDescriptor::is_segmentation_event_id_Valid() const{
    return m_segmentation_event_id_isValid;
}

qint32 OAISegmentationDescriptor::getSegmentationTypeId() const {
    return m_segmentation_type_id;
}
void OAISegmentationDescriptor::setSegmentationTypeId(const qint32 &segmentation_type_id) {
    m_segmentation_type_id = segmentation_type_id;
    m_segmentation_type_id_isSet = true;
}

bool OAISegmentationDescriptor::is_segmentation_type_id_Set() const{
    return m_segmentation_type_id_isSet;
}

bool OAISegmentationDescriptor::is_segmentation_type_id_Valid() const{
    return m_segmentation_type_id_isValid;
}

QString OAISegmentationDescriptor::getSegmentationUpid() const {
    return m_segmentation_upid;
}
void OAISegmentationDescriptor::setSegmentationUpid(const QString &segmentation_upid) {
    m_segmentation_upid = segmentation_upid;
    m_segmentation_upid_isSet = true;
}

bool OAISegmentationDescriptor::is_segmentation_upid_Set() const{
    return m_segmentation_upid_isSet;
}

bool OAISegmentationDescriptor::is_segmentation_upid_Valid() const{
    return m_segmentation_upid_isValid;
}

qint32 OAISegmentationDescriptor::getSegmentationUpidType() const {
    return m_segmentation_upid_type;
}
void OAISegmentationDescriptor::setSegmentationUpidType(const qint32 &segmentation_upid_type) {
    m_segmentation_upid_type = segmentation_upid_type;
    m_segmentation_upid_type_isSet = true;
}

bool OAISegmentationDescriptor::is_segmentation_upid_type_Set() const{
    return m_segmentation_upid_type_isSet;
}

bool OAISegmentationDescriptor::is_segmentation_upid_type_Valid() const{
    return m_segmentation_upid_type_isValid;
}

qint32 OAISegmentationDescriptor::getSegmentsExpected() const {
    return m_segments_expected;
}
void OAISegmentationDescriptor::setSegmentsExpected(const qint32 &segments_expected) {
    m_segments_expected = segments_expected;
    m_segments_expected_isSet = true;
}

bool OAISegmentationDescriptor::is_segments_expected_Set() const{
    return m_segments_expected_isSet;
}

bool OAISegmentationDescriptor::is_segments_expected_Valid() const{
    return m_segments_expected_isValid;
}

qint32 OAISegmentationDescriptor::getSubSegmentNum() const {
    return m_sub_segment_num;
}
void OAISegmentationDescriptor::setSubSegmentNum(const qint32 &sub_segment_num) {
    m_sub_segment_num = sub_segment_num;
    m_sub_segment_num_isSet = true;
}

bool OAISegmentationDescriptor::is_sub_segment_num_Set() const{
    return m_sub_segment_num_isSet;
}

bool OAISegmentationDescriptor::is_sub_segment_num_Valid() const{
    return m_sub_segment_num_isValid;
}

qint32 OAISegmentationDescriptor::getSubSegmentsExpected() const {
    return m_sub_segments_expected;
}
void OAISegmentationDescriptor::setSubSegmentsExpected(const qint32 &sub_segments_expected) {
    m_sub_segments_expected = sub_segments_expected;
    m_sub_segments_expected_isSet = true;
}

bool OAISegmentationDescriptor::is_sub_segments_expected_Set() const{
    return m_sub_segments_expected_isSet;
}

bool OAISegmentationDescriptor::is_sub_segments_expected_Valid() const{
    return m_sub_segments_expected_isValid;
}

bool OAISegmentationDescriptor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_segment_num_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segmentation_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segmentation_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segmentation_upid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segmentation_upid_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segments_expected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_segment_num_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_segments_expected_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISegmentationDescriptor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
