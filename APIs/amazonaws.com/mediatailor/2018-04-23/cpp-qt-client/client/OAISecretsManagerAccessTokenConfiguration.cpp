/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecretsManagerAccessTokenConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecretsManagerAccessTokenConfiguration::OAISecretsManagerAccessTokenConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecretsManagerAccessTokenConfiguration::OAISecretsManagerAccessTokenConfiguration() {
    this->initializeModel();
}

OAISecretsManagerAccessTokenConfiguration::~OAISecretsManagerAccessTokenConfiguration() {}

void OAISecretsManagerAccessTokenConfiguration::initializeModel() {

    m_header_name_isSet = false;
    m_header_name_isValid = false;

    m_secret_arn_isSet = false;
    m_secret_arn_isValid = false;

    m_secret_string_key_isSet = false;
    m_secret_string_key_isValid = false;
}

void OAISecretsManagerAccessTokenConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecretsManagerAccessTokenConfiguration::fromJsonObject(QJsonObject json) {

    m_header_name_isValid = ::OpenAPI::fromJsonValue(m_header_name, json[QString("HeaderName")]);
    m_header_name_isSet = !json[QString("HeaderName")].isNull() && m_header_name_isValid;

    m_secret_arn_isValid = ::OpenAPI::fromJsonValue(m_secret_arn, json[QString("SecretArn")]);
    m_secret_arn_isSet = !json[QString("SecretArn")].isNull() && m_secret_arn_isValid;

    m_secret_string_key_isValid = ::OpenAPI::fromJsonValue(m_secret_string_key, json[QString("SecretStringKey")]);
    m_secret_string_key_isSet = !json[QString("SecretStringKey")].isNull() && m_secret_string_key_isValid;
}

QString OAISecretsManagerAccessTokenConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecretsManagerAccessTokenConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_header_name_isSet) {
        obj.insert(QString("HeaderName"), ::OpenAPI::toJsonValue(m_header_name));
    }
    if (m_secret_arn_isSet) {
        obj.insert(QString("SecretArn"), ::OpenAPI::toJsonValue(m_secret_arn));
    }
    if (m_secret_string_key_isSet) {
        obj.insert(QString("SecretStringKey"), ::OpenAPI::toJsonValue(m_secret_string_key));
    }
    return obj;
}

QString OAISecretsManagerAccessTokenConfiguration::getHeaderName() const {
    return m_header_name;
}
void OAISecretsManagerAccessTokenConfiguration::setHeaderName(const QString &header_name) {
    m_header_name = header_name;
    m_header_name_isSet = true;
}

bool OAISecretsManagerAccessTokenConfiguration::is_header_name_Set() const{
    return m_header_name_isSet;
}

bool OAISecretsManagerAccessTokenConfiguration::is_header_name_Valid() const{
    return m_header_name_isValid;
}

QString OAISecretsManagerAccessTokenConfiguration::getSecretArn() const {
    return m_secret_arn;
}
void OAISecretsManagerAccessTokenConfiguration::setSecretArn(const QString &secret_arn) {
    m_secret_arn = secret_arn;
    m_secret_arn_isSet = true;
}

bool OAISecretsManagerAccessTokenConfiguration::is_secret_arn_Set() const{
    return m_secret_arn_isSet;
}

bool OAISecretsManagerAccessTokenConfiguration::is_secret_arn_Valid() const{
    return m_secret_arn_isValid;
}

QString OAISecretsManagerAccessTokenConfiguration::getSecretStringKey() const {
    return m_secret_string_key;
}
void OAISecretsManagerAccessTokenConfiguration::setSecretStringKey(const QString &secret_string_key) {
    m_secret_string_key = secret_string_key;
    m_secret_string_key_isSet = true;
}

bool OAISecretsManagerAccessTokenConfiguration::is_secret_string_key_Set() const{
    return m_secret_string_key_isSet;
}

bool OAISecretsManagerAccessTokenConfiguration::is_secret_string_key_Valid() const{
    return m_secret_string_key_isValid;
}

bool OAISecretsManagerAccessTokenConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_header_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_string_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecretsManagerAccessTokenConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
