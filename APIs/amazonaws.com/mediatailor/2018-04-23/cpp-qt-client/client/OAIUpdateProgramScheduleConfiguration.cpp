/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateProgramScheduleConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateProgramScheduleConfiguration::OAIUpdateProgramScheduleConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateProgramScheduleConfiguration::OAIUpdateProgramScheduleConfiguration() {
    this->initializeModel();
}

OAIUpdateProgramScheduleConfiguration::~OAIUpdateProgramScheduleConfiguration() {}

void OAIUpdateProgramScheduleConfiguration::initializeModel() {

    m_clip_range_isSet = false;
    m_clip_range_isValid = false;

    m_transition_isSet = false;
    m_transition_isValid = false;
}

void OAIUpdateProgramScheduleConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateProgramScheduleConfiguration::fromJsonObject(QJsonObject json) {

    m_clip_range_isValid = ::OpenAPI::fromJsonValue(m_clip_range, json[QString("ClipRange")]);
    m_clip_range_isSet = !json[QString("ClipRange")].isNull() && m_clip_range_isValid;

    m_transition_isValid = ::OpenAPI::fromJsonValue(m_transition, json[QString("Transition")]);
    m_transition_isSet = !json[QString("Transition")].isNull() && m_transition_isValid;
}

QString OAIUpdateProgramScheduleConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateProgramScheduleConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_clip_range.isSet()) {
        obj.insert(QString("ClipRange"), ::OpenAPI::toJsonValue(m_clip_range));
    }
    if (m_transition.isSet()) {
        obj.insert(QString("Transition"), ::OpenAPI::toJsonValue(m_transition));
    }
    return obj;
}

OAIUpdateProgram_request_ScheduleConfiguration_ClipRange OAIUpdateProgramScheduleConfiguration::getClipRange() const {
    return m_clip_range;
}
void OAIUpdateProgramScheduleConfiguration::setClipRange(const OAIUpdateProgram_request_ScheduleConfiguration_ClipRange &clip_range) {
    m_clip_range = clip_range;
    m_clip_range_isSet = true;
}

bool OAIUpdateProgramScheduleConfiguration::is_clip_range_Set() const{
    return m_clip_range_isSet;
}

bool OAIUpdateProgramScheduleConfiguration::is_clip_range_Valid() const{
    return m_clip_range_isValid;
}

OAIUpdateProgram_request_ScheduleConfiguration_Transition OAIUpdateProgramScheduleConfiguration::getTransition() const {
    return m_transition;
}
void OAIUpdateProgramScheduleConfiguration::setTransition(const OAIUpdateProgram_request_ScheduleConfiguration_Transition &transition) {
    m_transition = transition;
    m_transition_isSet = true;
}

bool OAIUpdateProgramScheduleConfiguration::is_transition_Set() const{
    return m_transition_isSet;
}

bool OAIUpdateProgramScheduleConfiguration::is_transition_Valid() const{
    return m_transition_isValid;
}

bool OAIUpdateProgramScheduleConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clip_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transition.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateProgramScheduleConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
