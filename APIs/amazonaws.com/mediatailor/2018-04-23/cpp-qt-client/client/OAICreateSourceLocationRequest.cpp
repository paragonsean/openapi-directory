/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateSourceLocationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateSourceLocationRequest::OAICreateSourceLocationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateSourceLocationRequest::OAICreateSourceLocationRequest() {
    this->initializeModel();
}

OAICreateSourceLocationRequest::~OAICreateSourceLocationRequest() {}

void OAICreateSourceLocationRequest::initializeModel() {

    m_access_configuration_isSet = false;
    m_access_configuration_isValid = false;

    m_default_segment_delivery_configuration_isSet = false;
    m_default_segment_delivery_configuration_isValid = false;

    m_http_configuration_isSet = false;
    m_http_configuration_isValid = false;

    m_segment_delivery_configurations_isSet = false;
    m_segment_delivery_configurations_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateSourceLocationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateSourceLocationRequest::fromJsonObject(QJsonObject json) {

    m_access_configuration_isValid = ::OpenAPI::fromJsonValue(m_access_configuration, json[QString("AccessConfiguration")]);
    m_access_configuration_isSet = !json[QString("AccessConfiguration")].isNull() && m_access_configuration_isValid;

    m_default_segment_delivery_configuration_isValid = ::OpenAPI::fromJsonValue(m_default_segment_delivery_configuration, json[QString("DefaultSegmentDeliveryConfiguration")]);
    m_default_segment_delivery_configuration_isSet = !json[QString("DefaultSegmentDeliveryConfiguration")].isNull() && m_default_segment_delivery_configuration_isValid;

    m_http_configuration_isValid = ::OpenAPI::fromJsonValue(m_http_configuration, json[QString("HttpConfiguration")]);
    m_http_configuration_isSet = !json[QString("HttpConfiguration")].isNull() && m_http_configuration_isValid;

    m_segment_delivery_configurations_isValid = ::OpenAPI::fromJsonValue(m_segment_delivery_configurations, json[QString("SegmentDeliveryConfigurations")]);
    m_segment_delivery_configurations_isSet = !json[QString("SegmentDeliveryConfigurations")].isNull() && m_segment_delivery_configurations_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateSourceLocationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateSourceLocationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_access_configuration.isSet()) {
        obj.insert(QString("AccessConfiguration"), ::OpenAPI::toJsonValue(m_access_configuration));
    }
    if (m_default_segment_delivery_configuration.isSet()) {
        obj.insert(QString("DefaultSegmentDeliveryConfiguration"), ::OpenAPI::toJsonValue(m_default_segment_delivery_configuration));
    }
    if (m_http_configuration.isSet()) {
        obj.insert(QString("HttpConfiguration"), ::OpenAPI::toJsonValue(m_http_configuration));
    }
    if (m_segment_delivery_configurations.isSet()) {
        obj.insert(QString("SegmentDeliveryConfigurations"), ::OpenAPI::toJsonValue(m_segment_delivery_configurations));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAICreateSourceLocationResponse_AccessConfiguration OAICreateSourceLocationRequest::getAccessConfiguration() const {
    return m_access_configuration;
}
void OAICreateSourceLocationRequest::setAccessConfiguration(const OAICreateSourceLocationResponse_AccessConfiguration &access_configuration) {
    m_access_configuration = access_configuration;
    m_access_configuration_isSet = true;
}

bool OAICreateSourceLocationRequest::is_access_configuration_Set() const{
    return m_access_configuration_isSet;
}

bool OAICreateSourceLocationRequest::is_access_configuration_Valid() const{
    return m_access_configuration_isValid;
}

OAICreateSourceLocationResponse_DefaultSegmentDeliveryConfiguration OAICreateSourceLocationRequest::getDefaultSegmentDeliveryConfiguration() const {
    return m_default_segment_delivery_configuration;
}
void OAICreateSourceLocationRequest::setDefaultSegmentDeliveryConfiguration(const OAICreateSourceLocationResponse_DefaultSegmentDeliveryConfiguration &default_segment_delivery_configuration) {
    m_default_segment_delivery_configuration = default_segment_delivery_configuration;
    m_default_segment_delivery_configuration_isSet = true;
}

bool OAICreateSourceLocationRequest::is_default_segment_delivery_configuration_Set() const{
    return m_default_segment_delivery_configuration_isSet;
}

bool OAICreateSourceLocationRequest::is_default_segment_delivery_configuration_Valid() const{
    return m_default_segment_delivery_configuration_isValid;
}

OAICreateSourceLocationResponse_HttpConfiguration OAICreateSourceLocationRequest::getHttpConfiguration() const {
    return m_http_configuration;
}
void OAICreateSourceLocationRequest::setHttpConfiguration(const OAICreateSourceLocationResponse_HttpConfiguration &http_configuration) {
    m_http_configuration = http_configuration;
    m_http_configuration_isSet = true;
}

bool OAICreateSourceLocationRequest::is_http_configuration_Set() const{
    return m_http_configuration_isSet;
}

bool OAICreateSourceLocationRequest::is_http_configuration_Valid() const{
    return m_http_configuration_isValid;
}

QList OAICreateSourceLocationRequest::getSegmentDeliveryConfigurations() const {
    return m_segment_delivery_configurations;
}
void OAICreateSourceLocationRequest::setSegmentDeliveryConfigurations(const QList &segment_delivery_configurations) {
    m_segment_delivery_configurations = segment_delivery_configurations;
    m_segment_delivery_configurations_isSet = true;
}

bool OAICreateSourceLocationRequest::is_segment_delivery_configurations_Set() const{
    return m_segment_delivery_configurations_isSet;
}

bool OAICreateSourceLocationRequest::is_segment_delivery_configurations_Valid() const{
    return m_segment_delivery_configurations_isValid;
}

QMap OAICreateSourceLocationRequest::getTags() const {
    return m_tags;
}
void OAICreateSourceLocationRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateSourceLocationRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateSourceLocationRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateSourceLocationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_segment_delivery_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_delivery_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateSourceLocationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_http_configuration_isValid && true;
}

} // namespace OpenAPI
