/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateLiveSource_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateLiveSource_request::OAICreateLiveSource_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateLiveSource_request::OAICreateLiveSource_request() {
    this->initializeModel();
}

OAICreateLiveSource_request::~OAICreateLiveSource_request() {}

void OAICreateLiveSource_request::initializeModel() {

    m_http_package_configurations_isSet = false;
    m_http_package_configurations_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateLiveSource_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateLiveSource_request::fromJsonObject(QJsonObject json) {

    m_http_package_configurations_isValid = ::OpenAPI::fromJsonValue(m_http_package_configurations, json[QString("HttpPackageConfigurations")]);
    m_http_package_configurations_isSet = !json[QString("HttpPackageConfigurations")].isNull() && m_http_package_configurations_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateLiveSource_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateLiveSource_request::asJsonObject() const {
    QJsonObject obj;
    if (m_http_package_configurations.size() > 0) {
        obj.insert(QString("HttpPackageConfigurations"), ::OpenAPI::toJsonValue(m_http_package_configurations));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QList<OAIHttpPackageConfiguration> OAICreateLiveSource_request::getHttpPackageConfigurations() const {
    return m_http_package_configurations;
}
void OAICreateLiveSource_request::setHttpPackageConfigurations(const QList<OAIHttpPackageConfiguration> &http_package_configurations) {
    m_http_package_configurations = http_package_configurations;
    m_http_package_configurations_isSet = true;
}

bool OAICreateLiveSource_request::is_http_package_configurations_Set() const{
    return m_http_package_configurations_isSet;
}

bool OAICreateLiveSource_request::is_http_package_configurations_Valid() const{
    return m_http_package_configurations_isValid;
}

QMap<QString, QString> OAICreateLiveSource_request::getTags() const {
    return m_tags;
}
void OAICreateLiveSource_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateLiveSource_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateLiveSource_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateLiveSource_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_http_package_configurations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateLiveSource_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_http_package_configurations_isValid && true;
}

} // namespace OpenAPI
