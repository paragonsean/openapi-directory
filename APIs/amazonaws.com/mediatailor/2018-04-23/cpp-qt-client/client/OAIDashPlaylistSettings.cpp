/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDashPlaylistSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDashPlaylistSettings::OAIDashPlaylistSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDashPlaylistSettings::OAIDashPlaylistSettings() {
    this->initializeModel();
}

OAIDashPlaylistSettings::~OAIDashPlaylistSettings() {}

void OAIDashPlaylistSettings::initializeModel() {

    m_manifest_window_seconds_isSet = false;
    m_manifest_window_seconds_isValid = false;

    m_min_buffer_time_seconds_isSet = false;
    m_min_buffer_time_seconds_isValid = false;

    m_min_update_period_seconds_isSet = false;
    m_min_update_period_seconds_isValid = false;

    m_suggested_presentation_delay_seconds_isSet = false;
    m_suggested_presentation_delay_seconds_isValid = false;
}

void OAIDashPlaylistSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDashPlaylistSettings::fromJsonObject(QJsonObject json) {

    m_manifest_window_seconds_isValid = ::OpenAPI::fromJsonValue(m_manifest_window_seconds, json[QString("ManifestWindowSeconds")]);
    m_manifest_window_seconds_isSet = !json[QString("ManifestWindowSeconds")].isNull() && m_manifest_window_seconds_isValid;

    m_min_buffer_time_seconds_isValid = ::OpenAPI::fromJsonValue(m_min_buffer_time_seconds, json[QString("MinBufferTimeSeconds")]);
    m_min_buffer_time_seconds_isSet = !json[QString("MinBufferTimeSeconds")].isNull() && m_min_buffer_time_seconds_isValid;

    m_min_update_period_seconds_isValid = ::OpenAPI::fromJsonValue(m_min_update_period_seconds, json[QString("MinUpdatePeriodSeconds")]);
    m_min_update_period_seconds_isSet = !json[QString("MinUpdatePeriodSeconds")].isNull() && m_min_update_period_seconds_isValid;

    m_suggested_presentation_delay_seconds_isValid = ::OpenAPI::fromJsonValue(m_suggested_presentation_delay_seconds, json[QString("SuggestedPresentationDelaySeconds")]);
    m_suggested_presentation_delay_seconds_isSet = !json[QString("SuggestedPresentationDelaySeconds")].isNull() && m_suggested_presentation_delay_seconds_isValid;
}

QString OAIDashPlaylistSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDashPlaylistSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_manifest_window_seconds_isSet) {
        obj.insert(QString("ManifestWindowSeconds"), ::OpenAPI::toJsonValue(m_manifest_window_seconds));
    }
    if (m_min_buffer_time_seconds_isSet) {
        obj.insert(QString("MinBufferTimeSeconds"), ::OpenAPI::toJsonValue(m_min_buffer_time_seconds));
    }
    if (m_min_update_period_seconds_isSet) {
        obj.insert(QString("MinUpdatePeriodSeconds"), ::OpenAPI::toJsonValue(m_min_update_period_seconds));
    }
    if (m_suggested_presentation_delay_seconds_isSet) {
        obj.insert(QString("SuggestedPresentationDelaySeconds"), ::OpenAPI::toJsonValue(m_suggested_presentation_delay_seconds));
    }
    return obj;
}

qint32 OAIDashPlaylistSettings::getManifestWindowSeconds() const {
    return m_manifest_window_seconds;
}
void OAIDashPlaylistSettings::setManifestWindowSeconds(const qint32 &manifest_window_seconds) {
    m_manifest_window_seconds = manifest_window_seconds;
    m_manifest_window_seconds_isSet = true;
}

bool OAIDashPlaylistSettings::is_manifest_window_seconds_Set() const{
    return m_manifest_window_seconds_isSet;
}

bool OAIDashPlaylistSettings::is_manifest_window_seconds_Valid() const{
    return m_manifest_window_seconds_isValid;
}

qint32 OAIDashPlaylistSettings::getMinBufferTimeSeconds() const {
    return m_min_buffer_time_seconds;
}
void OAIDashPlaylistSettings::setMinBufferTimeSeconds(const qint32 &min_buffer_time_seconds) {
    m_min_buffer_time_seconds = min_buffer_time_seconds;
    m_min_buffer_time_seconds_isSet = true;
}

bool OAIDashPlaylistSettings::is_min_buffer_time_seconds_Set() const{
    return m_min_buffer_time_seconds_isSet;
}

bool OAIDashPlaylistSettings::is_min_buffer_time_seconds_Valid() const{
    return m_min_buffer_time_seconds_isValid;
}

qint32 OAIDashPlaylistSettings::getMinUpdatePeriodSeconds() const {
    return m_min_update_period_seconds;
}
void OAIDashPlaylistSettings::setMinUpdatePeriodSeconds(const qint32 &min_update_period_seconds) {
    m_min_update_period_seconds = min_update_period_seconds;
    m_min_update_period_seconds_isSet = true;
}

bool OAIDashPlaylistSettings::is_min_update_period_seconds_Set() const{
    return m_min_update_period_seconds_isSet;
}

bool OAIDashPlaylistSettings::is_min_update_period_seconds_Valid() const{
    return m_min_update_period_seconds_isValid;
}

qint32 OAIDashPlaylistSettings::getSuggestedPresentationDelaySeconds() const {
    return m_suggested_presentation_delay_seconds;
}
void OAIDashPlaylistSettings::setSuggestedPresentationDelaySeconds(const qint32 &suggested_presentation_delay_seconds) {
    m_suggested_presentation_delay_seconds = suggested_presentation_delay_seconds;
    m_suggested_presentation_delay_seconds_isSet = true;
}

bool OAIDashPlaylistSettings::is_suggested_presentation_delay_seconds_Set() const{
    return m_suggested_presentation_delay_seconds_isSet;
}

bool OAIDashPlaylistSettings::is_suggested_presentation_delay_seconds_Valid() const{
    return m_suggested_presentation_delay_seconds_isValid;
}

bool OAIDashPlaylistSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_manifest_window_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_buffer_time_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_update_period_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_presentation_delay_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDashPlaylistSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
