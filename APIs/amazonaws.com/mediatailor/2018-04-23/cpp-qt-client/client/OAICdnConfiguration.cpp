/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICdnConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICdnConfiguration::OAICdnConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICdnConfiguration::OAICdnConfiguration() {
    this->initializeModel();
}

OAICdnConfiguration::~OAICdnConfiguration() {}

void OAICdnConfiguration::initializeModel() {

    m_ad_segment_url_prefix_isSet = false;
    m_ad_segment_url_prefix_isValid = false;

    m_content_segment_url_prefix_isSet = false;
    m_content_segment_url_prefix_isValid = false;
}

void OAICdnConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICdnConfiguration::fromJsonObject(QJsonObject json) {

    m_ad_segment_url_prefix_isValid = ::OpenAPI::fromJsonValue(m_ad_segment_url_prefix, json[QString("AdSegmentUrlPrefix")]);
    m_ad_segment_url_prefix_isSet = !json[QString("AdSegmentUrlPrefix")].isNull() && m_ad_segment_url_prefix_isValid;

    m_content_segment_url_prefix_isValid = ::OpenAPI::fromJsonValue(m_content_segment_url_prefix, json[QString("ContentSegmentUrlPrefix")]);
    m_content_segment_url_prefix_isSet = !json[QString("ContentSegmentUrlPrefix")].isNull() && m_content_segment_url_prefix_isValid;
}

QString OAICdnConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICdnConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_segment_url_prefix_isSet) {
        obj.insert(QString("AdSegmentUrlPrefix"), ::OpenAPI::toJsonValue(m_ad_segment_url_prefix));
    }
    if (m_content_segment_url_prefix_isSet) {
        obj.insert(QString("ContentSegmentUrlPrefix"), ::OpenAPI::toJsonValue(m_content_segment_url_prefix));
    }
    return obj;
}

QString OAICdnConfiguration::getAdSegmentUrlPrefix() const {
    return m_ad_segment_url_prefix;
}
void OAICdnConfiguration::setAdSegmentUrlPrefix(const QString &ad_segment_url_prefix) {
    m_ad_segment_url_prefix = ad_segment_url_prefix;
    m_ad_segment_url_prefix_isSet = true;
}

bool OAICdnConfiguration::is_ad_segment_url_prefix_Set() const{
    return m_ad_segment_url_prefix_isSet;
}

bool OAICdnConfiguration::is_ad_segment_url_prefix_Valid() const{
    return m_ad_segment_url_prefix_isValid;
}

QString OAICdnConfiguration::getContentSegmentUrlPrefix() const {
    return m_content_segment_url_prefix;
}
void OAICdnConfiguration::setContentSegmentUrlPrefix(const QString &content_segment_url_prefix) {
    m_content_segment_url_prefix = content_segment_url_prefix;
    m_content_segment_url_prefix_isSet = true;
}

bool OAICdnConfiguration::is_content_segment_url_prefix_Set() const{
    return m_content_segment_url_prefix_isSet;
}

bool OAICdnConfiguration::is_content_segment_url_prefix_Valid() const{
    return m_content_segment_url_prefix_isValid;
}

bool OAICdnConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_segment_url_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_segment_url_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICdnConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
