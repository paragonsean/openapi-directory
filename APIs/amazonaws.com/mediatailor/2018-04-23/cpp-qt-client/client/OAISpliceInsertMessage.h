/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISpliceInsertMessage.h
 *
 * Splice insert message configuration.
 */

#ifndef OAISpliceInsertMessage_H
#define OAISpliceInsertMessage_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISpliceInsertMessage : public OAIObject {
public:
    OAISpliceInsertMessage();
    OAISpliceInsertMessage(QString json);
    ~OAISpliceInsertMessage() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAvailNum() const;
    void setAvailNum(const qint32 &avail_num);
    bool is_avail_num_Set() const;
    bool is_avail_num_Valid() const;

    qint32 getAvailsExpected() const;
    void setAvailsExpected(const qint32 &avails_expected);
    bool is_avails_expected_Set() const;
    bool is_avails_expected_Valid() const;

    qint32 getSpliceEventId() const;
    void setSpliceEventId(const qint32 &splice_event_id);
    bool is_splice_event_id_Set() const;
    bool is_splice_event_id_Valid() const;

    qint32 getUniqueProgramId() const;
    void setUniqueProgramId(const qint32 &unique_program_id);
    bool is_unique_program_id_Set() const;
    bool is_unique_program_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_avail_num;
    bool m_avail_num_isSet;
    bool m_avail_num_isValid;

    qint32 m_avails_expected;
    bool m_avails_expected_isSet;
    bool m_avails_expected_isValid;

    qint32 m_splice_event_id;
    bool m_splice_event_id_isSet;
    bool m_splice_event_id_isValid;

    qint32 m_unique_program_id;
    bool m_unique_program_id_isSet;
    bool m_unique_program_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISpliceInsertMessage)

#endif // OAISpliceInsertMessage_H
