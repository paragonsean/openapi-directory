/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreatePrefetchScheduleRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreatePrefetchScheduleRequest::OAICreatePrefetchScheduleRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreatePrefetchScheduleRequest::OAICreatePrefetchScheduleRequest() {
    this->initializeModel();
}

OAICreatePrefetchScheduleRequest::~OAICreatePrefetchScheduleRequest() {}

void OAICreatePrefetchScheduleRequest::initializeModel() {

    m_consumption_isSet = false;
    m_consumption_isValid = false;

    m_retrieval_isSet = false;
    m_retrieval_isValid = false;

    m_stream_id_isSet = false;
    m_stream_id_isValid = false;
}

void OAICreatePrefetchScheduleRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreatePrefetchScheduleRequest::fromJsonObject(QJsonObject json) {

    m_consumption_isValid = ::OpenAPI::fromJsonValue(m_consumption, json[QString("Consumption")]);
    m_consumption_isSet = !json[QString("Consumption")].isNull() && m_consumption_isValid;

    m_retrieval_isValid = ::OpenAPI::fromJsonValue(m_retrieval, json[QString("Retrieval")]);
    m_retrieval_isSet = !json[QString("Retrieval")].isNull() && m_retrieval_isValid;

    m_stream_id_isValid = ::OpenAPI::fromJsonValue(m_stream_id, json[QString("StreamId")]);
    m_stream_id_isSet = !json[QString("StreamId")].isNull() && m_stream_id_isValid;
}

QString OAICreatePrefetchScheduleRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreatePrefetchScheduleRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_consumption.isSet()) {
        obj.insert(QString("Consumption"), ::OpenAPI::toJsonValue(m_consumption));
    }
    if (m_retrieval.isSet()) {
        obj.insert(QString("Retrieval"), ::OpenAPI::toJsonValue(m_retrieval));
    }
    if (m_stream_id_isSet) {
        obj.insert(QString("StreamId"), ::OpenAPI::toJsonValue(m_stream_id));
    }
    return obj;
}

OAICreatePrefetchScheduleResponse_Consumption OAICreatePrefetchScheduleRequest::getConsumption() const {
    return m_consumption;
}
void OAICreatePrefetchScheduleRequest::setConsumption(const OAICreatePrefetchScheduleResponse_Consumption &consumption) {
    m_consumption = consumption;
    m_consumption_isSet = true;
}

bool OAICreatePrefetchScheduleRequest::is_consumption_Set() const{
    return m_consumption_isSet;
}

bool OAICreatePrefetchScheduleRequest::is_consumption_Valid() const{
    return m_consumption_isValid;
}

OAICreatePrefetchScheduleResponse_Retrieval OAICreatePrefetchScheduleRequest::getRetrieval() const {
    return m_retrieval;
}
void OAICreatePrefetchScheduleRequest::setRetrieval(const OAICreatePrefetchScheduleResponse_Retrieval &retrieval) {
    m_retrieval = retrieval;
    m_retrieval_isSet = true;
}

bool OAICreatePrefetchScheduleRequest::is_retrieval_Set() const{
    return m_retrieval_isSet;
}

bool OAICreatePrefetchScheduleRequest::is_retrieval_Valid() const{
    return m_retrieval_isValid;
}

QString OAICreatePrefetchScheduleRequest::getStreamId() const {
    return m_stream_id;
}
void OAICreatePrefetchScheduleRequest::setStreamId(const QString &stream_id) {
    m_stream_id = stream_id;
    m_stream_id_isSet = true;
}

bool OAICreatePrefetchScheduleRequest::is_stream_id_Set() const{
    return m_stream_id_isSet;
}

bool OAICreatePrefetchScheduleRequest::is_stream_id_Valid() const{
    return m_stream_id_isValid;
}

bool OAICreatePrefetchScheduleRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consumption.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retrieval.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreatePrefetchScheduleRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_consumption_isValid && m_retrieval_isValid && true;
}

} // namespace OpenAPI
