/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrefetchConsumption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrefetchConsumption::OAIPrefetchConsumption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrefetchConsumption::OAIPrefetchConsumption() {
    this->initializeModel();
}

OAIPrefetchConsumption::~OAIPrefetchConsumption() {}

void OAIPrefetchConsumption::initializeModel() {

    m_avail_matching_criteria_isSet = false;
    m_avail_matching_criteria_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIPrefetchConsumption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrefetchConsumption::fromJsonObject(QJsonObject json) {

    m_avail_matching_criteria_isValid = ::OpenAPI::fromJsonValue(m_avail_matching_criteria, json[QString("AvailMatchingCriteria")]);
    m_avail_matching_criteria_isSet = !json[QString("AvailMatchingCriteria")].isNull() && m_avail_matching_criteria_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;
}

QString OAIPrefetchConsumption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrefetchConsumption::asJsonObject() const {
    QJsonObject obj;
    if (m_avail_matching_criteria.isSet()) {
        obj.insert(QString("AvailMatchingCriteria"), ::OpenAPI::toJsonValue(m_avail_matching_criteria));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

QList OAIPrefetchConsumption::getAvailMatchingCriteria() const {
    return m_avail_matching_criteria;
}
void OAIPrefetchConsumption::setAvailMatchingCriteria(const QList &avail_matching_criteria) {
    m_avail_matching_criteria = avail_matching_criteria;
    m_avail_matching_criteria_isSet = true;
}

bool OAIPrefetchConsumption::is_avail_matching_criteria_Set() const{
    return m_avail_matching_criteria_isSet;
}

bool OAIPrefetchConsumption::is_avail_matching_criteria_Valid() const{
    return m_avail_matching_criteria_isValid;
}

QDateTime OAIPrefetchConsumption::getEndTime() const {
    return m_end_time;
}
void OAIPrefetchConsumption::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIPrefetchConsumption::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIPrefetchConsumption::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QDateTime OAIPrefetchConsumption::getStartTime() const {
    return m_start_time;
}
void OAIPrefetchConsumption::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIPrefetchConsumption::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIPrefetchConsumption::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIPrefetchConsumption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avail_matching_criteria.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrefetchConsumption::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_end_time_isValid && true;
}

} // namespace OpenAPI
