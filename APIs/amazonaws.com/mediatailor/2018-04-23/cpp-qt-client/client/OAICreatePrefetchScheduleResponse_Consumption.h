/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreatePrefetchScheduleResponse_Consumption.h
 *
 * 
 */

#ifndef OAICreatePrefetchScheduleResponse_Consumption_H
#define OAICreatePrefetchScheduleResponse_Consumption_H

#include <QJsonObject>

#include <QDateTime>
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreatePrefetchScheduleResponse_Consumption : public OAIObject {
public:
    OAICreatePrefetchScheduleResponse_Consumption();
    OAICreatePrefetchScheduleResponse_Consumption(QString json);
    ~OAICreatePrefetchScheduleResponse_Consumption() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getAvailMatchingCriteria() const;
    void setAvailMatchingCriteria(const QList &avail_matching_criteria);
    bool is_avail_matching_criteria_Set() const;
    bool is_avail_matching_criteria_Valid() const;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_avail_matching_criteria;
    bool m_avail_matching_criteria_isSet;
    bool m_avail_matching_criteria_isValid;

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreatePrefetchScheduleResponse_Consumption)

#endif // OAICreatePrefetchScheduleResponse_Consumption_H
