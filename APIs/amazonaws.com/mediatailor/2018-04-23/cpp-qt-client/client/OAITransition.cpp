/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransition::OAITransition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransition::OAITransition() {
    this->initializeModel();
}

OAITransition::~OAITransition() {}

void OAITransition::initializeModel() {

    m_duration_millis_isSet = false;
    m_duration_millis_isValid = false;

    m_relative_position_isSet = false;
    m_relative_position_isValid = false;

    m_relative_program_isSet = false;
    m_relative_program_isValid = false;

    m_scheduled_start_time_millis_isSet = false;
    m_scheduled_start_time_millis_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAITransition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransition::fromJsonObject(QJsonObject json) {

    m_duration_millis_isValid = ::OpenAPI::fromJsonValue(m_duration_millis, json[QString("DurationMillis")]);
    m_duration_millis_isSet = !json[QString("DurationMillis")].isNull() && m_duration_millis_isValid;

    m_relative_position_isValid = ::OpenAPI::fromJsonValue(m_relative_position, json[QString("RelativePosition")]);
    m_relative_position_isSet = !json[QString("RelativePosition")].isNull() && m_relative_position_isValid;

    m_relative_program_isValid = ::OpenAPI::fromJsonValue(m_relative_program, json[QString("RelativeProgram")]);
    m_relative_program_isSet = !json[QString("RelativeProgram")].isNull() && m_relative_program_isValid;

    m_scheduled_start_time_millis_isValid = ::OpenAPI::fromJsonValue(m_scheduled_start_time_millis, json[QString("ScheduledStartTimeMillis")]);
    m_scheduled_start_time_millis_isSet = !json[QString("ScheduledStartTimeMillis")].isNull() && m_scheduled_start_time_millis_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAITransition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransition::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_millis_isSet) {
        obj.insert(QString("DurationMillis"), ::OpenAPI::toJsonValue(m_duration_millis));
    }
    if (m_relative_position.isSet()) {
        obj.insert(QString("RelativePosition"), ::OpenAPI::toJsonValue(m_relative_position));
    }
    if (m_relative_program_isSet) {
        obj.insert(QString("RelativeProgram"), ::OpenAPI::toJsonValue(m_relative_program));
    }
    if (m_scheduled_start_time_millis_isSet) {
        obj.insert(QString("ScheduledStartTimeMillis"), ::OpenAPI::toJsonValue(m_scheduled_start_time_millis));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAITransition::getDurationMillis() const {
    return m_duration_millis;
}
void OAITransition::setDurationMillis(const qint32 &duration_millis) {
    m_duration_millis = duration_millis;
    m_duration_millis_isSet = true;
}

bool OAITransition::is_duration_millis_Set() const{
    return m_duration_millis_isSet;
}

bool OAITransition::is_duration_millis_Valid() const{
    return m_duration_millis_isValid;
}

OAIRelativePosition OAITransition::getRelativePosition() const {
    return m_relative_position;
}
void OAITransition::setRelativePosition(const OAIRelativePosition &relative_position) {
    m_relative_position = relative_position;
    m_relative_position_isSet = true;
}

bool OAITransition::is_relative_position_Set() const{
    return m_relative_position_isSet;
}

bool OAITransition::is_relative_position_Valid() const{
    return m_relative_position_isValid;
}

QString OAITransition::getRelativeProgram() const {
    return m_relative_program;
}
void OAITransition::setRelativeProgram(const QString &relative_program) {
    m_relative_program = relative_program;
    m_relative_program_isSet = true;
}

bool OAITransition::is_relative_program_Set() const{
    return m_relative_program_isSet;
}

bool OAITransition::is_relative_program_Valid() const{
    return m_relative_program_isValid;
}

qint32 OAITransition::getScheduledStartTimeMillis() const {
    return m_scheduled_start_time_millis;
}
void OAITransition::setScheduledStartTimeMillis(const qint32 &scheduled_start_time_millis) {
    m_scheduled_start_time_millis = scheduled_start_time_millis;
    m_scheduled_start_time_millis_isSet = true;
}

bool OAITransition::is_scheduled_start_time_millis_Set() const{
    return m_scheduled_start_time_millis_isSet;
}

bool OAITransition::is_scheduled_start_time_millis_Valid() const{
    return m_scheduled_start_time_millis_isValid;
}

QString OAITransition::getType() const {
    return m_type;
}
void OAITransition::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITransition::is_type_Set() const{
    return m_type_isSet;
}

bool OAITransition::is_type_Valid() const{
    return m_type_isValid;
}

bool OAITransition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_program_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_start_time_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_relative_position_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
