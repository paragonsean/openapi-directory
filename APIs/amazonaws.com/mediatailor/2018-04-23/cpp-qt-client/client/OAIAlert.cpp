/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlert.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlert::OAIAlert(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlert::OAIAlert() {
    this->initializeModel();
}

OAIAlert::~OAIAlert() {}

void OAIAlert::initializeModel() {

    m_alert_code_isSet = false;
    m_alert_code_isValid = false;

    m_alert_message_isSet = false;
    m_alert_message_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_related_resource_arns_isSet = false;
    m_related_resource_arns_isValid = false;

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;
}

void OAIAlert::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlert::fromJsonObject(QJsonObject json) {

    m_alert_code_isValid = ::OpenAPI::fromJsonValue(m_alert_code, json[QString("AlertCode")]);
    m_alert_code_isSet = !json[QString("AlertCode")].isNull() && m_alert_code_isValid;

    m_alert_message_isValid = ::OpenAPI::fromJsonValue(m_alert_message, json[QString("AlertMessage")]);
    m_alert_message_isSet = !json[QString("AlertMessage")].isNull() && m_alert_message_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("Category")]);
    m_category_isSet = !json[QString("Category")].isNull() && m_category_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_related_resource_arns_isValid = ::OpenAPI::fromJsonValue(m_related_resource_arns, json[QString("RelatedResourceArns")]);
    m_related_resource_arns_isSet = !json[QString("RelatedResourceArns")].isNull() && m_related_resource_arns_isValid;

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceArn")]);
    m_resource_arn_isSet = !json[QString("ResourceArn")].isNull() && m_resource_arn_isValid;
}

QString OAIAlert::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlert::asJsonObject() const {
    QJsonObject obj;
    if (m_alert_code_isSet) {
        obj.insert(QString("AlertCode"), ::OpenAPI::toJsonValue(m_alert_code));
    }
    if (m_alert_message_isSet) {
        obj.insert(QString("AlertMessage"), ::OpenAPI::toJsonValue(m_alert_message));
    }
    if (m_category.isSet()) {
        obj.insert(QString("Category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_related_resource_arns.isSet()) {
        obj.insert(QString("RelatedResourceArns"), ::OpenAPI::toJsonValue(m_related_resource_arns));
    }
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    return obj;
}

QString OAIAlert::getAlertCode() const {
    return m_alert_code;
}
void OAIAlert::setAlertCode(const QString &alert_code) {
    m_alert_code = alert_code;
    m_alert_code_isSet = true;
}

bool OAIAlert::is_alert_code_Set() const{
    return m_alert_code_isSet;
}

bool OAIAlert::is_alert_code_Valid() const{
    return m_alert_code_isValid;
}

QString OAIAlert::getAlertMessage() const {
    return m_alert_message;
}
void OAIAlert::setAlertMessage(const QString &alert_message) {
    m_alert_message = alert_message;
    m_alert_message_isSet = true;
}

bool OAIAlert::is_alert_message_Set() const{
    return m_alert_message_isSet;
}

bool OAIAlert::is_alert_message_Valid() const{
    return m_alert_message_isValid;
}

OAIAlertCategory OAIAlert::getCategory() const {
    return m_category;
}
void OAIAlert::setCategory(const OAIAlertCategory &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIAlert::is_category_Set() const{
    return m_category_isSet;
}

bool OAIAlert::is_category_Valid() const{
    return m_category_isValid;
}

QDateTime OAIAlert::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIAlert::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIAlert::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIAlert::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QList OAIAlert::getRelatedResourceArns() const {
    return m_related_resource_arns;
}
void OAIAlert::setRelatedResourceArns(const QList &related_resource_arns) {
    m_related_resource_arns = related_resource_arns;
    m_related_resource_arns_isSet = true;
}

bool OAIAlert::is_related_resource_arns_Set() const{
    return m_related_resource_arns_isSet;
}

bool OAIAlert::is_related_resource_arns_Valid() const{
    return m_related_resource_arns_isValid;
}

QString OAIAlert::getResourceArn() const {
    return m_resource_arn;
}
void OAIAlert::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIAlert::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIAlert::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

bool OAIAlert::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alert_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_resource_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlert::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_alert_code_isValid && m_alert_message_isValid && m_last_modified_time_isValid && m_related_resource_arns_isValid && m_resource_arn_isValid && true;
}

} // namespace OpenAPI
