/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreatePrefetchScheduleResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreatePrefetchScheduleResponse::OAICreatePrefetchScheduleResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreatePrefetchScheduleResponse::OAICreatePrefetchScheduleResponse() {
    this->initializeModel();
}

OAICreatePrefetchScheduleResponse::~OAICreatePrefetchScheduleResponse() {}

void OAICreatePrefetchScheduleResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_consumption_isSet = false;
    m_consumption_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_playback_configuration_name_isSet = false;
    m_playback_configuration_name_isValid = false;

    m_retrieval_isSet = false;
    m_retrieval_isValid = false;

    m_stream_id_isSet = false;
    m_stream_id_isValid = false;
}

void OAICreatePrefetchScheduleResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreatePrefetchScheduleResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_consumption_isValid = ::OpenAPI::fromJsonValue(m_consumption, json[QString("Consumption")]);
    m_consumption_isSet = !json[QString("Consumption")].isNull() && m_consumption_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_playback_configuration_name_isValid = ::OpenAPI::fromJsonValue(m_playback_configuration_name, json[QString("PlaybackConfigurationName")]);
    m_playback_configuration_name_isSet = !json[QString("PlaybackConfigurationName")].isNull() && m_playback_configuration_name_isValid;

    m_retrieval_isValid = ::OpenAPI::fromJsonValue(m_retrieval, json[QString("Retrieval")]);
    m_retrieval_isSet = !json[QString("Retrieval")].isNull() && m_retrieval_isValid;

    m_stream_id_isValid = ::OpenAPI::fromJsonValue(m_stream_id, json[QString("StreamId")]);
    m_stream_id_isSet = !json[QString("StreamId")].isNull() && m_stream_id_isValid;
}

QString OAICreatePrefetchScheduleResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreatePrefetchScheduleResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_consumption.isSet()) {
        obj.insert(QString("Consumption"), ::OpenAPI::toJsonValue(m_consumption));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_playback_configuration_name_isSet) {
        obj.insert(QString("PlaybackConfigurationName"), ::OpenAPI::toJsonValue(m_playback_configuration_name));
    }
    if (m_retrieval.isSet()) {
        obj.insert(QString("Retrieval"), ::OpenAPI::toJsonValue(m_retrieval));
    }
    if (m_stream_id_isSet) {
        obj.insert(QString("StreamId"), ::OpenAPI::toJsonValue(m_stream_id));
    }
    return obj;
}

QString OAICreatePrefetchScheduleResponse::getArn() const {
    return m_arn;
}
void OAICreatePrefetchScheduleResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICreatePrefetchScheduleResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICreatePrefetchScheduleResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

OAICreatePrefetchScheduleResponse_Consumption OAICreatePrefetchScheduleResponse::getConsumption() const {
    return m_consumption;
}
void OAICreatePrefetchScheduleResponse::setConsumption(const OAICreatePrefetchScheduleResponse_Consumption &consumption) {
    m_consumption = consumption;
    m_consumption_isSet = true;
}

bool OAICreatePrefetchScheduleResponse::is_consumption_Set() const{
    return m_consumption_isSet;
}

bool OAICreatePrefetchScheduleResponse::is_consumption_Valid() const{
    return m_consumption_isValid;
}

QString OAICreatePrefetchScheduleResponse::getName() const {
    return m_name;
}
void OAICreatePrefetchScheduleResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreatePrefetchScheduleResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreatePrefetchScheduleResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreatePrefetchScheduleResponse::getPlaybackConfigurationName() const {
    return m_playback_configuration_name;
}
void OAICreatePrefetchScheduleResponse::setPlaybackConfigurationName(const QString &playback_configuration_name) {
    m_playback_configuration_name = playback_configuration_name;
    m_playback_configuration_name_isSet = true;
}

bool OAICreatePrefetchScheduleResponse::is_playback_configuration_name_Set() const{
    return m_playback_configuration_name_isSet;
}

bool OAICreatePrefetchScheduleResponse::is_playback_configuration_name_Valid() const{
    return m_playback_configuration_name_isValid;
}

OAICreatePrefetchScheduleResponse_Retrieval OAICreatePrefetchScheduleResponse::getRetrieval() const {
    return m_retrieval;
}
void OAICreatePrefetchScheduleResponse::setRetrieval(const OAICreatePrefetchScheduleResponse_Retrieval &retrieval) {
    m_retrieval = retrieval;
    m_retrieval_isSet = true;
}

bool OAICreatePrefetchScheduleResponse::is_retrieval_Set() const{
    return m_retrieval_isSet;
}

bool OAICreatePrefetchScheduleResponse::is_retrieval_Valid() const{
    return m_retrieval_isValid;
}

QString OAICreatePrefetchScheduleResponse::getStreamId() const {
    return m_stream_id;
}
void OAICreatePrefetchScheduleResponse::setStreamId(const QString &stream_id) {
    m_stream_id = stream_id;
    m_stream_id_isSet = true;
}

bool OAICreatePrefetchScheduleResponse::is_stream_id_Set() const{
    return m_stream_id_isSet;
}

bool OAICreatePrefetchScheduleResponse::is_stream_id_Valid() const{
    return m_stream_id_isValid;
}

bool OAICreatePrefetchScheduleResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumption.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playback_configuration_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retrieval.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreatePrefetchScheduleResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
