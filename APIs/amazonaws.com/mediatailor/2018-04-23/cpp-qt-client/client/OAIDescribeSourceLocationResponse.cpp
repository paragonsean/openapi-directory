/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeSourceLocationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeSourceLocationResponse::OAIDescribeSourceLocationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeSourceLocationResponse::OAIDescribeSourceLocationResponse() {
    this->initializeModel();
}

OAIDescribeSourceLocationResponse::~OAIDescribeSourceLocationResponse() {}

void OAIDescribeSourceLocationResponse::initializeModel() {

    m_access_configuration_isSet = false;
    m_access_configuration_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_default_segment_delivery_configuration_isSet = false;
    m_default_segment_delivery_configuration_isValid = false;

    m_http_configuration_isSet = false;
    m_http_configuration_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_segment_delivery_configurations_isSet = false;
    m_segment_delivery_configurations_isValid = false;

    m_source_location_name_isSet = false;
    m_source_location_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIDescribeSourceLocationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeSourceLocationResponse::fromJsonObject(QJsonObject json) {

    m_access_configuration_isValid = ::OpenAPI::fromJsonValue(m_access_configuration, json[QString("AccessConfiguration")]);
    m_access_configuration_isSet = !json[QString("AccessConfiguration")].isNull() && m_access_configuration_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_default_segment_delivery_configuration_isValid = ::OpenAPI::fromJsonValue(m_default_segment_delivery_configuration, json[QString("DefaultSegmentDeliveryConfiguration")]);
    m_default_segment_delivery_configuration_isSet = !json[QString("DefaultSegmentDeliveryConfiguration")].isNull() && m_default_segment_delivery_configuration_isValid;

    m_http_configuration_isValid = ::OpenAPI::fromJsonValue(m_http_configuration, json[QString("HttpConfiguration")]);
    m_http_configuration_isSet = !json[QString("HttpConfiguration")].isNull() && m_http_configuration_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_segment_delivery_configurations_isValid = ::OpenAPI::fromJsonValue(m_segment_delivery_configurations, json[QString("SegmentDeliveryConfigurations")]);
    m_segment_delivery_configurations_isSet = !json[QString("SegmentDeliveryConfigurations")].isNull() && m_segment_delivery_configurations_isValid;

    m_source_location_name_isValid = ::OpenAPI::fromJsonValue(m_source_location_name, json[QString("SourceLocationName")]);
    m_source_location_name_isSet = !json[QString("SourceLocationName")].isNull() && m_source_location_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIDescribeSourceLocationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeSourceLocationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_access_configuration.isSet()) {
        obj.insert(QString("AccessConfiguration"), ::OpenAPI::toJsonValue(m_access_configuration));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_default_segment_delivery_configuration.isSet()) {
        obj.insert(QString("DefaultSegmentDeliveryConfiguration"), ::OpenAPI::toJsonValue(m_default_segment_delivery_configuration));
    }
    if (m_http_configuration.isSet()) {
        obj.insert(QString("HttpConfiguration"), ::OpenAPI::toJsonValue(m_http_configuration));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_segment_delivery_configurations.isSet()) {
        obj.insert(QString("SegmentDeliveryConfigurations"), ::OpenAPI::toJsonValue(m_segment_delivery_configurations));
    }
    if (m_source_location_name_isSet) {
        obj.insert(QString("SourceLocationName"), ::OpenAPI::toJsonValue(m_source_location_name));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAIDescribeSourceLocationResponse_AccessConfiguration OAIDescribeSourceLocationResponse::getAccessConfiguration() const {
    return m_access_configuration;
}
void OAIDescribeSourceLocationResponse::setAccessConfiguration(const OAIDescribeSourceLocationResponse_AccessConfiguration &access_configuration) {
    m_access_configuration = access_configuration;
    m_access_configuration_isSet = true;
}

bool OAIDescribeSourceLocationResponse::is_access_configuration_Set() const{
    return m_access_configuration_isSet;
}

bool OAIDescribeSourceLocationResponse::is_access_configuration_Valid() const{
    return m_access_configuration_isValid;
}

QString OAIDescribeSourceLocationResponse::getArn() const {
    return m_arn;
}
void OAIDescribeSourceLocationResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDescribeSourceLocationResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDescribeSourceLocationResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIDescribeSourceLocationResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeSourceLocationResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeSourceLocationResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeSourceLocationResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

OAIDescribeSourceLocationResponse_DefaultSegmentDeliveryConfiguration OAIDescribeSourceLocationResponse::getDefaultSegmentDeliveryConfiguration() const {
    return m_default_segment_delivery_configuration;
}
void OAIDescribeSourceLocationResponse::setDefaultSegmentDeliveryConfiguration(const OAIDescribeSourceLocationResponse_DefaultSegmentDeliveryConfiguration &default_segment_delivery_configuration) {
    m_default_segment_delivery_configuration = default_segment_delivery_configuration;
    m_default_segment_delivery_configuration_isSet = true;
}

bool OAIDescribeSourceLocationResponse::is_default_segment_delivery_configuration_Set() const{
    return m_default_segment_delivery_configuration_isSet;
}

bool OAIDescribeSourceLocationResponse::is_default_segment_delivery_configuration_Valid() const{
    return m_default_segment_delivery_configuration_isValid;
}

OAIDescribeSourceLocationResponse_HttpConfiguration OAIDescribeSourceLocationResponse::getHttpConfiguration() const {
    return m_http_configuration;
}
void OAIDescribeSourceLocationResponse::setHttpConfiguration(const OAIDescribeSourceLocationResponse_HttpConfiguration &http_configuration) {
    m_http_configuration = http_configuration;
    m_http_configuration_isSet = true;
}

bool OAIDescribeSourceLocationResponse::is_http_configuration_Set() const{
    return m_http_configuration_isSet;
}

bool OAIDescribeSourceLocationResponse::is_http_configuration_Valid() const{
    return m_http_configuration_isValid;
}

QDateTime OAIDescribeSourceLocationResponse::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIDescribeSourceLocationResponse::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIDescribeSourceLocationResponse::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIDescribeSourceLocationResponse::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QList OAIDescribeSourceLocationResponse::getSegmentDeliveryConfigurations() const {
    return m_segment_delivery_configurations;
}
void OAIDescribeSourceLocationResponse::setSegmentDeliveryConfigurations(const QList &segment_delivery_configurations) {
    m_segment_delivery_configurations = segment_delivery_configurations;
    m_segment_delivery_configurations_isSet = true;
}

bool OAIDescribeSourceLocationResponse::is_segment_delivery_configurations_Set() const{
    return m_segment_delivery_configurations_isSet;
}

bool OAIDescribeSourceLocationResponse::is_segment_delivery_configurations_Valid() const{
    return m_segment_delivery_configurations_isValid;
}

QString OAIDescribeSourceLocationResponse::getSourceLocationName() const {
    return m_source_location_name;
}
void OAIDescribeSourceLocationResponse::setSourceLocationName(const QString &source_location_name) {
    m_source_location_name = source_location_name;
    m_source_location_name_isSet = true;
}

bool OAIDescribeSourceLocationResponse::is_source_location_name_Set() const{
    return m_source_location_name_isSet;
}

bool OAIDescribeSourceLocationResponse::is_source_location_name_Valid() const{
    return m_source_location_name_isValid;
}

QMap OAIDescribeSourceLocationResponse::getTags() const {
    return m_tags;
}
void OAIDescribeSourceLocationResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDescribeSourceLocationResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDescribeSourceLocationResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIDescribeSourceLocationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_segment_delivery_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_delivery_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_location_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeSourceLocationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
