/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutPlaybackConfigurationRequest_DashConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutPlaybackConfigurationRequest_DashConfiguration::OAIPutPlaybackConfigurationRequest_DashConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutPlaybackConfigurationRequest_DashConfiguration::OAIPutPlaybackConfigurationRequest_DashConfiguration() {
    this->initializeModel();
}

OAIPutPlaybackConfigurationRequest_DashConfiguration::~OAIPutPlaybackConfigurationRequest_DashConfiguration() {}

void OAIPutPlaybackConfigurationRequest_DashConfiguration::initializeModel() {

    m_mpd_location_isSet = false;
    m_mpd_location_isValid = false;

    m_origin_manifest_type_isSet = false;
    m_origin_manifest_type_isValid = false;
}

void OAIPutPlaybackConfigurationRequest_DashConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutPlaybackConfigurationRequest_DashConfiguration::fromJsonObject(QJsonObject json) {

    m_mpd_location_isValid = ::OpenAPI::fromJsonValue(m_mpd_location, json[QString("MpdLocation")]);
    m_mpd_location_isSet = !json[QString("MpdLocation")].isNull() && m_mpd_location_isValid;

    m_origin_manifest_type_isValid = ::OpenAPI::fromJsonValue(m_origin_manifest_type, json[QString("OriginManifestType")]);
    m_origin_manifest_type_isSet = !json[QString("OriginManifestType")].isNull() && m_origin_manifest_type_isValid;
}

QString OAIPutPlaybackConfigurationRequest_DashConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutPlaybackConfigurationRequest_DashConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_mpd_location_isSet) {
        obj.insert(QString("MpdLocation"), ::OpenAPI::toJsonValue(m_mpd_location));
    }
    if (m_origin_manifest_type.isSet()) {
        obj.insert(QString("OriginManifestType"), ::OpenAPI::toJsonValue(m_origin_manifest_type));
    }
    return obj;
}

QString OAIPutPlaybackConfigurationRequest_DashConfiguration::getMpdLocation() const {
    return m_mpd_location;
}
void OAIPutPlaybackConfigurationRequest_DashConfiguration::setMpdLocation(const QString &mpd_location) {
    m_mpd_location = mpd_location;
    m_mpd_location_isSet = true;
}

bool OAIPutPlaybackConfigurationRequest_DashConfiguration::is_mpd_location_Set() const{
    return m_mpd_location_isSet;
}

bool OAIPutPlaybackConfigurationRequest_DashConfiguration::is_mpd_location_Valid() const{
    return m_mpd_location_isValid;
}

OAIOriginManifestType OAIPutPlaybackConfigurationRequest_DashConfiguration::getOriginManifestType() const {
    return m_origin_manifest_type;
}
void OAIPutPlaybackConfigurationRequest_DashConfiguration::setOriginManifestType(const OAIOriginManifestType &origin_manifest_type) {
    m_origin_manifest_type = origin_manifest_type;
    m_origin_manifest_type_isSet = true;
}

bool OAIPutPlaybackConfigurationRequest_DashConfiguration::is_origin_manifest_type_Set() const{
    return m_origin_manifest_type_isSet;
}

bool OAIPutPlaybackConfigurationRequest_DashConfiguration::is_origin_manifest_type_Valid() const{
    return m_origin_manifest_type_isValid;
}

bool OAIPutPlaybackConfigurationRequest_DashConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mpd_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_manifest_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutPlaybackConfigurationRequest_DashConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
