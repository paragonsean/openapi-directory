/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPrefetchSchedule.h
 *
 * A prefetch schedule allows you to tell MediaTailor to fetch and prepare certain ads before an ad break happens. For more information about ad prefetching, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mediatailor/latest/ug/prefetching-ads.html\&quot;&gt;Using ad prefetching&lt;/a&gt; in the &lt;i&gt;MediaTailor User Guide&lt;/i&gt;.
 */

#ifndef OAIPrefetchSchedule_H
#define OAIPrefetchSchedule_H

#include <QJsonObject>

#include "OAIGetPrefetchScheduleResponse_Consumption.h"
#include "OAIGetPrefetchScheduleResponse_Retrieval.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetPrefetchScheduleResponse_Consumption;
class OAIGetPrefetchScheduleResponse_Retrieval;

class OAIPrefetchSchedule : public OAIObject {
public:
    OAIPrefetchSchedule();
    OAIPrefetchSchedule(QString json);
    ~OAIPrefetchSchedule() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    OAIGetPrefetchScheduleResponse_Consumption getConsumption() const;
    void setConsumption(const OAIGetPrefetchScheduleResponse_Consumption &consumption);
    bool is_consumption_Set() const;
    bool is_consumption_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPlaybackConfigurationName() const;
    void setPlaybackConfigurationName(const QString &playback_configuration_name);
    bool is_playback_configuration_name_Set() const;
    bool is_playback_configuration_name_Valid() const;

    OAIGetPrefetchScheduleResponse_Retrieval getRetrieval() const;
    void setRetrieval(const OAIGetPrefetchScheduleResponse_Retrieval &retrieval);
    bool is_retrieval_Set() const;
    bool is_retrieval_Valid() const;

    QString getStreamId() const;
    void setStreamId(const QString &stream_id);
    bool is_stream_id_Set() const;
    bool is_stream_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    OAIGetPrefetchScheduleResponse_Consumption m_consumption;
    bool m_consumption_isSet;
    bool m_consumption_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_playback_configuration_name;
    bool m_playback_configuration_name_isSet;
    bool m_playback_configuration_name_isValid;

    OAIGetPrefetchScheduleResponse_Retrieval m_retrieval;
    bool m_retrieval_isSet;
    bool m_retrieval_isValid;

    QString m_stream_id;
    bool m_stream_id_isSet;
    bool m_stream_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPrefetchSchedule)

#endif // OAIPrefetchSchedule_H
