/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateLiveSource_request.h
 *
 * 
 */

#ifndef OAICreateLiveSource_request_H
#define OAICreateLiveSource_request_H

#include <QJsonObject>

#include "OAIHttpPackageConfiguration.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIHttpPackageConfiguration;

class OAICreateLiveSource_request : public OAIObject {
public:
    OAICreateLiveSource_request();
    OAICreateLiveSource_request(QString json);
    ~OAICreateLiveSource_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIHttpPackageConfiguration> getHttpPackageConfigurations() const;
    void setHttpPackageConfigurations(const QList<OAIHttpPackageConfiguration> &http_package_configurations);
    bool is_http_package_configurations_Set() const;
    bool is_http_package_configurations_Valid() const;

    QMap<QString, QString> getTags() const;
    void setTags(const QMap<QString, QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIHttpPackageConfiguration> m_http_package_configurations;
    bool m_http_package_configurations_isSet;
    bool m_http_package_configurations_isValid;

    QMap<QString, QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateLiveSource_request)

#endif // OAICreateLiveSource_request_H
