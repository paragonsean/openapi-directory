/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPutPlaybackConfiguration_request.h
 *
 * 
 */

#ifndef OAIPutPlaybackConfiguration_request_H
#define OAIPutPlaybackConfiguration_request_H

#include <QJsonObject>

#include "OAIPutPlaybackConfiguration_request_AvailSuppression.h"
#include "OAIPutPlaybackConfiguration_request_Bumper.h"
#include "OAIPutPlaybackConfiguration_request_CdnConfiguration.h"
#include "OAIPutPlaybackConfiguration_request_DashConfiguration.h"
#include "OAIPutPlaybackConfiguration_request_LivePreRollConfiguration.h"
#include "OAIPutPlaybackConfiguration_request_ManifestProcessingRules.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPutPlaybackConfiguration_request_AvailSuppression;
class OAIPutPlaybackConfiguration_request_Bumper;
class OAIPutPlaybackConfiguration_request_CdnConfiguration;
class OAIPutPlaybackConfiguration_request_DashConfiguration;
class OAIPutPlaybackConfiguration_request_LivePreRollConfiguration;
class OAIPutPlaybackConfiguration_request_ManifestProcessingRules;

class OAIPutPlaybackConfiguration_request : public OAIObject {
public:
    OAIPutPlaybackConfiguration_request();
    OAIPutPlaybackConfiguration_request(QString json);
    ~OAIPutPlaybackConfiguration_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAdDecisionServerUrl() const;
    void setAdDecisionServerUrl(const QString &ad_decision_server_url);
    bool is_ad_decision_server_url_Set() const;
    bool is_ad_decision_server_url_Valid() const;

    OAIPutPlaybackConfiguration_request_AvailSuppression getAvailSuppression() const;
    void setAvailSuppression(const OAIPutPlaybackConfiguration_request_AvailSuppression &avail_suppression);
    bool is_avail_suppression_Set() const;
    bool is_avail_suppression_Valid() const;

    OAIPutPlaybackConfiguration_request_Bumper getBumper() const;
    void setBumper(const OAIPutPlaybackConfiguration_request_Bumper &bumper);
    bool is_bumper_Set() const;
    bool is_bumper_Valid() const;

    OAIPutPlaybackConfiguration_request_CdnConfiguration getCdnConfiguration() const;
    void setCdnConfiguration(const OAIPutPlaybackConfiguration_request_CdnConfiguration &cdn_configuration);
    bool is_cdn_configuration_Set() const;
    bool is_cdn_configuration_Valid() const;

    QMap<QString, QMap> getConfigurationAliases() const;
    void setConfigurationAliases(const QMap<QString, QMap> &configuration_aliases);
    bool is_configuration_aliases_Set() const;
    bool is_configuration_aliases_Valid() const;

    OAIPutPlaybackConfiguration_request_DashConfiguration getDashConfiguration() const;
    void setDashConfiguration(const OAIPutPlaybackConfiguration_request_DashConfiguration &dash_configuration);
    bool is_dash_configuration_Set() const;
    bool is_dash_configuration_Valid() const;

    OAIPutPlaybackConfiguration_request_LivePreRollConfiguration getLivePreRollConfiguration() const;
    void setLivePreRollConfiguration(const OAIPutPlaybackConfiguration_request_LivePreRollConfiguration &live_pre_roll_configuration);
    bool is_live_pre_roll_configuration_Set() const;
    bool is_live_pre_roll_configuration_Valid() const;

    OAIPutPlaybackConfiguration_request_ManifestProcessingRules getManifestProcessingRules() const;
    void setManifestProcessingRules(const OAIPutPlaybackConfiguration_request_ManifestProcessingRules &manifest_processing_rules);
    bool is_manifest_processing_rules_Set() const;
    bool is_manifest_processing_rules_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getPersonalizationThresholdSeconds() const;
    void setPersonalizationThresholdSeconds(const qint32 &personalization_threshold_seconds);
    bool is_personalization_threshold_seconds_Set() const;
    bool is_personalization_threshold_seconds_Valid() const;

    QString getSlateAdUrl() const;
    void setSlateAdUrl(const QString &slate_ad_url);
    bool is_slate_ad_url_Set() const;
    bool is_slate_ad_url_Valid() const;

    QMap<QString, QString> getTags() const;
    void setTags(const QMap<QString, QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getTranscodeProfileName() const;
    void setTranscodeProfileName(const QString &transcode_profile_name);
    bool is_transcode_profile_name_Set() const;
    bool is_transcode_profile_name_Valid() const;

    QString getVideoContentSourceUrl() const;
    void setVideoContentSourceUrl(const QString &video_content_source_url);
    bool is_video_content_source_url_Set() const;
    bool is_video_content_source_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_ad_decision_server_url;
    bool m_ad_decision_server_url_isSet;
    bool m_ad_decision_server_url_isValid;

    OAIPutPlaybackConfiguration_request_AvailSuppression m_avail_suppression;
    bool m_avail_suppression_isSet;
    bool m_avail_suppression_isValid;

    OAIPutPlaybackConfiguration_request_Bumper m_bumper;
    bool m_bumper_isSet;
    bool m_bumper_isValid;

    OAIPutPlaybackConfiguration_request_CdnConfiguration m_cdn_configuration;
    bool m_cdn_configuration_isSet;
    bool m_cdn_configuration_isValid;

    QMap<QString, QMap> m_configuration_aliases;
    bool m_configuration_aliases_isSet;
    bool m_configuration_aliases_isValid;

    OAIPutPlaybackConfiguration_request_DashConfiguration m_dash_configuration;
    bool m_dash_configuration_isSet;
    bool m_dash_configuration_isValid;

    OAIPutPlaybackConfiguration_request_LivePreRollConfiguration m_live_pre_roll_configuration;
    bool m_live_pre_roll_configuration_isSet;
    bool m_live_pre_roll_configuration_isValid;

    OAIPutPlaybackConfiguration_request_ManifestProcessingRules m_manifest_processing_rules;
    bool m_manifest_processing_rules_isSet;
    bool m_manifest_processing_rules_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_personalization_threshold_seconds;
    bool m_personalization_threshold_seconds_isSet;
    bool m_personalization_threshold_seconds_isValid;

    QString m_slate_ad_url;
    bool m_slate_ad_url_isSet;
    bool m_slate_ad_url_isValid;

    QMap<QString, QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_transcode_profile_name;
    bool m_transcode_profile_name_isSet;
    bool m_transcode_profile_name_isValid;

    QString m_video_content_source_url;
    bool m_video_content_source_url_isSet;
    bool m_video_content_source_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPutPlaybackConfiguration_request)

#endif // OAIPutPlaybackConfiguration_request_H
