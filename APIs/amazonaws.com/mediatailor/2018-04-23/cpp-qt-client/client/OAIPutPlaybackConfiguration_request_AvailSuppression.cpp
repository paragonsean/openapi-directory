/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutPlaybackConfiguration_request_AvailSuppression.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutPlaybackConfiguration_request_AvailSuppression::OAIPutPlaybackConfiguration_request_AvailSuppression(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutPlaybackConfiguration_request_AvailSuppression::OAIPutPlaybackConfiguration_request_AvailSuppression() {
    this->initializeModel();
}

OAIPutPlaybackConfiguration_request_AvailSuppression::~OAIPutPlaybackConfiguration_request_AvailSuppression() {}

void OAIPutPlaybackConfiguration_request_AvailSuppression::initializeModel() {

    m_fill_policy_isSet = false;
    m_fill_policy_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIPutPlaybackConfiguration_request_AvailSuppression::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutPlaybackConfiguration_request_AvailSuppression::fromJsonObject(QJsonObject json) {

    m_fill_policy_isValid = ::OpenAPI::fromJsonValue(m_fill_policy, json[QString("FillPolicy")]);
    m_fill_policy_isSet = !json[QString("FillPolicy")].isNull() && m_fill_policy_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("Mode")]);
    m_mode_isSet = !json[QString("Mode")].isNull() && m_mode_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;
}

QString OAIPutPlaybackConfiguration_request_AvailSuppression::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutPlaybackConfiguration_request_AvailSuppression::asJsonObject() const {
    QJsonObject obj;
    if (m_fill_policy.isSet()) {
        obj.insert(QString("FillPolicy"), ::OpenAPI::toJsonValue(m_fill_policy));
    }
    if (m_mode.isSet()) {
        obj.insert(QString("Mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

OAIFillPolicy OAIPutPlaybackConfiguration_request_AvailSuppression::getFillPolicy() const {
    return m_fill_policy;
}
void OAIPutPlaybackConfiguration_request_AvailSuppression::setFillPolicy(const OAIFillPolicy &fill_policy) {
    m_fill_policy = fill_policy;
    m_fill_policy_isSet = true;
}

bool OAIPutPlaybackConfiguration_request_AvailSuppression::is_fill_policy_Set() const{
    return m_fill_policy_isSet;
}

bool OAIPutPlaybackConfiguration_request_AvailSuppression::is_fill_policy_Valid() const{
    return m_fill_policy_isValid;
}

OAIMode OAIPutPlaybackConfiguration_request_AvailSuppression::getMode() const {
    return m_mode;
}
void OAIPutPlaybackConfiguration_request_AvailSuppression::setMode(const OAIMode &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIPutPlaybackConfiguration_request_AvailSuppression::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIPutPlaybackConfiguration_request_AvailSuppression::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAIPutPlaybackConfiguration_request_AvailSuppression::getValue() const {
    return m_value;
}
void OAIPutPlaybackConfiguration_request_AvailSuppression::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIPutPlaybackConfiguration_request_AvailSuppression::is_value_Set() const{
    return m_value_isSet;
}

bool OAIPutPlaybackConfiguration_request_AvailSuppression::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIPutPlaybackConfiguration_request_AvailSuppression::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fill_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutPlaybackConfiguration_request_AvailSuppression::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
