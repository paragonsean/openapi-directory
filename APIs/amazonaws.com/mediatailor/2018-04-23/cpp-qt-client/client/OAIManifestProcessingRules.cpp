/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManifestProcessingRules.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManifestProcessingRules::OAIManifestProcessingRules(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManifestProcessingRules::OAIManifestProcessingRules() {
    this->initializeModel();
}

OAIManifestProcessingRules::~OAIManifestProcessingRules() {}

void OAIManifestProcessingRules::initializeModel() {

    m_ad_marker_passthrough_isSet = false;
    m_ad_marker_passthrough_isValid = false;
}

void OAIManifestProcessingRules::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManifestProcessingRules::fromJsonObject(QJsonObject json) {

    m_ad_marker_passthrough_isValid = ::OpenAPI::fromJsonValue(m_ad_marker_passthrough, json[QString("AdMarkerPassthrough")]);
    m_ad_marker_passthrough_isSet = !json[QString("AdMarkerPassthrough")].isNull() && m_ad_marker_passthrough_isValid;
}

QString OAIManifestProcessingRules::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManifestProcessingRules::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_marker_passthrough.isSet()) {
        obj.insert(QString("AdMarkerPassthrough"), ::OpenAPI::toJsonValue(m_ad_marker_passthrough));
    }
    return obj;
}

OAIPutPlaybackConfiguration_request_ManifestProcessingRules_AdMarkerPassthrough OAIManifestProcessingRules::getAdMarkerPassthrough() const {
    return m_ad_marker_passthrough;
}
void OAIManifestProcessingRules::setAdMarkerPassthrough(const OAIPutPlaybackConfiguration_request_ManifestProcessingRules_AdMarkerPassthrough &ad_marker_passthrough) {
    m_ad_marker_passthrough = ad_marker_passthrough;
    m_ad_marker_passthrough_isSet = true;
}

bool OAIManifestProcessingRules::is_ad_marker_passthrough_Set() const{
    return m_ad_marker_passthrough_isSet;
}

bool OAIManifestProcessingRules::is_ad_marker_passthrough_Valid() const{
    return m_ad_marker_passthrough_isValid;
}

bool OAIManifestProcessingRules::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_marker_passthrough.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManifestProcessingRules::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
