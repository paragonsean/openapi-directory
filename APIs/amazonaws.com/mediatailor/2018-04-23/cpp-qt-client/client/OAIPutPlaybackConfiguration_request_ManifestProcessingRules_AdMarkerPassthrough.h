/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPutPlaybackConfiguration_request_ManifestProcessingRules_AdMarkerPassthrough.h
 *
 * 
 */

#ifndef OAIPutPlaybackConfiguration_request_ManifestProcessingRules_AdMarkerPassthrough_H
#define OAIPutPlaybackConfiguration_request_ManifestProcessingRules_AdMarkerPassthrough_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPutPlaybackConfiguration_request_ManifestProcessingRules_AdMarkerPassthrough : public OAIObject {
public:
    OAIPutPlaybackConfiguration_request_ManifestProcessingRules_AdMarkerPassthrough();
    OAIPutPlaybackConfiguration_request_ManifestProcessingRules_AdMarkerPassthrough(QString json);
    ~OAIPutPlaybackConfiguration_request_ManifestProcessingRules_AdMarkerPassthrough() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool getEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPutPlaybackConfiguration_request_ManifestProcessingRules_AdMarkerPassthrough)

#endif // OAIPutPlaybackConfiguration_request_ManifestProcessingRules_AdMarkerPassthrough_H
