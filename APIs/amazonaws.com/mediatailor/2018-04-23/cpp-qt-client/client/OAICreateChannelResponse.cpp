/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateChannelResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateChannelResponse::OAICreateChannelResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateChannelResponse::OAICreateChannelResponse() {
    this->initializeModel();
}

OAICreateChannelResponse::~OAICreateChannelResponse() {}

void OAICreateChannelResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_channel_name_isSet = false;
    m_channel_name_isValid = false;

    m_channel_state_isSet = false;
    m_channel_state_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_filler_slate_isSet = false;
    m_filler_slate_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_outputs_isSet = false;
    m_outputs_isValid = false;

    m_playback_mode_isSet = false;
    m_playback_mode_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_tier_isSet = false;
    m_tier_isValid = false;
}

void OAICreateChannelResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateChannelResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_channel_name_isValid = ::OpenAPI::fromJsonValue(m_channel_name, json[QString("ChannelName")]);
    m_channel_name_isSet = !json[QString("ChannelName")].isNull() && m_channel_name_isValid;

    m_channel_state_isValid = ::OpenAPI::fromJsonValue(m_channel_state, json[QString("ChannelState")]);
    m_channel_state_isSet = !json[QString("ChannelState")].isNull() && m_channel_state_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_filler_slate_isValid = ::OpenAPI::fromJsonValue(m_filler_slate, json[QString("FillerSlate")]);
    m_filler_slate_isSet = !json[QString("FillerSlate")].isNull() && m_filler_slate_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_outputs_isValid = ::OpenAPI::fromJsonValue(m_outputs, json[QString("Outputs")]);
    m_outputs_isSet = !json[QString("Outputs")].isNull() && m_outputs_isValid;

    m_playback_mode_isValid = ::OpenAPI::fromJsonValue(m_playback_mode, json[QString("PlaybackMode")]);
    m_playback_mode_isSet = !json[QString("PlaybackMode")].isNull() && m_playback_mode_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_tier_isValid = ::OpenAPI::fromJsonValue(m_tier, json[QString("Tier")]);
    m_tier_isSet = !json[QString("Tier")].isNull() && m_tier_isValid;
}

QString OAICreateChannelResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateChannelResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_channel_name_isSet) {
        obj.insert(QString("ChannelName"), ::OpenAPI::toJsonValue(m_channel_name));
    }
    if (m_channel_state.isSet()) {
        obj.insert(QString("ChannelState"), ::OpenAPI::toJsonValue(m_channel_state));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_filler_slate.isSet()) {
        obj.insert(QString("FillerSlate"), ::OpenAPI::toJsonValue(m_filler_slate));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_outputs.isSet()) {
        obj.insert(QString("Outputs"), ::OpenAPI::toJsonValue(m_outputs));
    }
    if (m_playback_mode_isSet) {
        obj.insert(QString("PlaybackMode"), ::OpenAPI::toJsonValue(m_playback_mode));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_tier_isSet) {
        obj.insert(QString("Tier"), ::OpenAPI::toJsonValue(m_tier));
    }
    return obj;
}

QString OAICreateChannelResponse::getArn() const {
    return m_arn;
}
void OAICreateChannelResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICreateChannelResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICreateChannelResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAICreateChannelResponse::getChannelName() const {
    return m_channel_name;
}
void OAICreateChannelResponse::setChannelName(const QString &channel_name) {
    m_channel_name = channel_name;
    m_channel_name_isSet = true;
}

bool OAICreateChannelResponse::is_channel_name_Set() const{
    return m_channel_name_isSet;
}

bool OAICreateChannelResponse::is_channel_name_Valid() const{
    return m_channel_name_isValid;
}

OAIChannelState OAICreateChannelResponse::getChannelState() const {
    return m_channel_state;
}
void OAICreateChannelResponse::setChannelState(const OAIChannelState &channel_state) {
    m_channel_state = channel_state;
    m_channel_state_isSet = true;
}

bool OAICreateChannelResponse::is_channel_state_Set() const{
    return m_channel_state_isSet;
}

bool OAICreateChannelResponse::is_channel_state_Valid() const{
    return m_channel_state_isValid;
}

QDateTime OAICreateChannelResponse::getCreationTime() const {
    return m_creation_time;
}
void OAICreateChannelResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAICreateChannelResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAICreateChannelResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

OAICreateChannelResponse_FillerSlate OAICreateChannelResponse::getFillerSlate() const {
    return m_filler_slate;
}
void OAICreateChannelResponse::setFillerSlate(const OAICreateChannelResponse_FillerSlate &filler_slate) {
    m_filler_slate = filler_slate;
    m_filler_slate_isSet = true;
}

bool OAICreateChannelResponse::is_filler_slate_Set() const{
    return m_filler_slate_isSet;
}

bool OAICreateChannelResponse::is_filler_slate_Valid() const{
    return m_filler_slate_isValid;
}

QDateTime OAICreateChannelResponse::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAICreateChannelResponse::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAICreateChannelResponse::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAICreateChannelResponse::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QList OAICreateChannelResponse::getOutputs() const {
    return m_outputs;
}
void OAICreateChannelResponse::setOutputs(const QList &outputs) {
    m_outputs = outputs;
    m_outputs_isSet = true;
}

bool OAICreateChannelResponse::is_outputs_Set() const{
    return m_outputs_isSet;
}

bool OAICreateChannelResponse::is_outputs_Valid() const{
    return m_outputs_isValid;
}

QString OAICreateChannelResponse::getPlaybackMode() const {
    return m_playback_mode;
}
void OAICreateChannelResponse::setPlaybackMode(const QString &playback_mode) {
    m_playback_mode = playback_mode;
    m_playback_mode_isSet = true;
}

bool OAICreateChannelResponse::is_playback_mode_Set() const{
    return m_playback_mode_isSet;
}

bool OAICreateChannelResponse::is_playback_mode_Valid() const{
    return m_playback_mode_isValid;
}

QMap OAICreateChannelResponse::getTags() const {
    return m_tags;
}
void OAICreateChannelResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateChannelResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateChannelResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateChannelResponse::getTier() const {
    return m_tier;
}
void OAICreateChannelResponse::setTier(const QString &tier) {
    m_tier = tier;
    m_tier_isSet = true;
}

bool OAICreateChannelResponse::is_tier_Set() const{
    return m_tier_isSet;
}

bool OAICreateChannelResponse::is_tier_Valid() const{
    return m_tier_isValid;
}

bool OAICreateChannelResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filler_slate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outputs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_playback_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateChannelResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
