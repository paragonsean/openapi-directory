/*
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ConfigureLogsForChannelRequest;
import org.openapitools.client.model.ConfigureLogsForChannelResponse;
import org.openapitools.client.model.ConfigureLogsForPlaybackConfigurationRequest;
import org.openapitools.client.model.ConfigureLogsForPlaybackConfigurationResponse;
import org.openapitools.client.model.CreateChannelRequest;
import org.openapitools.client.model.CreateChannelResponse;
import org.openapitools.client.model.CreateLiveSourceRequest;
import org.openapitools.client.model.CreateLiveSourceResponse;
import org.openapitools.client.model.CreatePrefetchScheduleRequest;
import org.openapitools.client.model.CreatePrefetchScheduleResponse;
import org.openapitools.client.model.CreateProgramRequest;
import org.openapitools.client.model.CreateProgramResponse;
import org.openapitools.client.model.CreateSourceLocationRequest;
import org.openapitools.client.model.CreateSourceLocationResponse;
import org.openapitools.client.model.CreateVodSourceRequest;
import org.openapitools.client.model.CreateVodSourceResponse;
import org.openapitools.client.model.DescribeChannelResponse;
import org.openapitools.client.model.DescribeLiveSourceResponse;
import org.openapitools.client.model.DescribeProgramResponse;
import org.openapitools.client.model.DescribeSourceLocationResponse;
import org.openapitools.client.model.DescribeVodSourceResponse;
import org.openapitools.client.model.GetChannelPolicyResponse;
import org.openapitools.client.model.GetChannelScheduleResponse;
import org.openapitools.client.model.GetPlaybackConfigurationResponse;
import org.openapitools.client.model.GetPrefetchScheduleResponse;
import org.openapitools.client.model.ListAlertsResponse;
import org.openapitools.client.model.ListChannelsResponse;
import org.openapitools.client.model.ListLiveSourcesResponse;
import org.openapitools.client.model.ListPlaybackConfigurationsResponse;
import org.openapitools.client.model.ListPrefetchSchedulesRequest;
import org.openapitools.client.model.ListPrefetchSchedulesResponse;
import org.openapitools.client.model.ListSourceLocationsResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ListVodSourcesResponse;
import org.openapitools.client.model.PutChannelPolicyRequest;
import org.openapitools.client.model.PutPlaybackConfigurationRequest;
import org.openapitools.client.model.PutPlaybackConfigurationResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UpdateChannelRequest;
import org.openapitools.client.model.UpdateChannelResponse;
import org.openapitools.client.model.UpdateLiveSourceRequest;
import org.openapitools.client.model.UpdateLiveSourceResponse;
import org.openapitools.client.model.UpdateProgramRequest;
import org.openapitools.client.model.UpdateProgramResponse;
import org.openapitools.client.model.UpdateSourceLocationRequest;
import org.openapitools.client.model.UpdateSourceLocationResponse;
import org.openapitools.client.model.UpdateVodSourceResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Configures Amazon CloudWatch log settings for a channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureLogsForChannelTest() throws ApiException {
        ConfigureLogsForChannelRequest configureLogsForChannelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ConfigureLogsForChannelResponse response = api.configureLogsForChannel(configureLogsForChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Amazon CloudWatch log settings for a playback configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureLogsForPlaybackConfigurationTest() throws ApiException {
        ConfigureLogsForPlaybackConfigurationRequest configureLogsForPlaybackConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ConfigureLogsForPlaybackConfigurationResponse response = api.configureLogsForPlaybackConfiguration(configureLogsForPlaybackConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a channel. For information about MediaTailor channels, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-channels.html\&quot;&gt;Working with channels&lt;/a&gt; in the &lt;i&gt;MediaTailor User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createChannelTest() throws ApiException {
        String channelName = null;
        CreateChannelRequest createChannelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateChannelResponse response = api.createChannel(channelName, createChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * The live source configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLiveSourceTest() throws ApiException {
        String liveSourceName = null;
        String sourceLocationName = null;
        CreateLiveSourceRequest createLiveSourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateLiveSourceResponse response = api.createLiveSource(liveSourceName, sourceLocationName, createLiveSourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a prefetch schedule for a playback configuration. A prefetch schedule allows you to tell MediaTailor to fetch and prepare certain ads before an ad break happens. For more information about ad prefetching, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mediatailor/latest/ug/prefetching-ads.html\&quot;&gt;Using ad prefetching&lt;/a&gt; in the &lt;i&gt;MediaTailor User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPrefetchScheduleTest() throws ApiException {
        String name = null;
        String playbackConfigurationName = null;
        CreatePrefetchScheduleRequest createPrefetchScheduleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreatePrefetchScheduleResponse response = api.createPrefetchSchedule(name, playbackConfigurationName, createPrefetchScheduleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a program within a channel. For information about programs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-programs.html\&quot;&gt;Working with programs&lt;/a&gt; in the &lt;i&gt;MediaTailor User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProgramTest() throws ApiException {
        String channelName = null;
        String programName = null;
        CreateProgramRequest createProgramRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateProgramResponse response = api.createProgram(channelName, programName, createProgramRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a source location. A source location is a container for sources. For more information about source locations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-source-locations.html\&quot;&gt;Working with source locations&lt;/a&gt; in the &lt;i&gt;MediaTailor User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSourceLocationTest() throws ApiException {
        String sourceLocationName = null;
        CreateSourceLocationRequest createSourceLocationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateSourceLocationResponse response = api.createSourceLocation(sourceLocationName, createSourceLocationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * The VOD source configuration parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createVodSourceTest() throws ApiException {
        String sourceLocationName = null;
        String vodSourceName = null;
        CreateVodSourceRequest createVodSourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateVodSourceResponse response = api.createVodSource(sourceLocationName, vodSourceName, createVodSourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a channel. For information about MediaTailor channels, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-channels.html\&quot;&gt;Working with channels&lt;/a&gt; in the &lt;i&gt;MediaTailor User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteChannelTest() throws ApiException {
        String channelName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteChannel(channelName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * The channel policy to delete.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteChannelPolicyTest() throws ApiException {
        String channelName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteChannelPolicy(channelName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * The live source to delete.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteLiveSourceTest() throws ApiException {
        String liveSourceName = null;
        String sourceLocationName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteLiveSource(liveSourceName, sourceLocationName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a playback configuration. For information about MediaTailor configurations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mediatailor/latest/ug/configurations.html\&quot;&gt;Working with configurations in AWS Elemental MediaTailor&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePlaybackConfigurationTest() throws ApiException {
        String name = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deletePlaybackConfiguration(name, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a prefetch schedule for a specific playback configuration. If you call &lt;code&gt;DeletePrefetchSchedule&lt;/code&gt; on an expired prefetch schedule, MediaTailor returns an HTTP 404 status code. For more information about ad prefetching, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mediatailor/latest/ug/prefetching-ads.html\&quot;&gt;Using ad prefetching&lt;/a&gt; in the &lt;i&gt;MediaTailor User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePrefetchScheduleTest() throws ApiException {
        String name = null;
        String playbackConfigurationName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deletePrefetchSchedule(name, playbackConfigurationName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a program within a channel. For information about programs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-programs.html\&quot;&gt;Working with programs&lt;/a&gt; in the &lt;i&gt;MediaTailor User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProgramTest() throws ApiException {
        String channelName = null;
        String programName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteProgram(channelName, programName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a source location. A source location is a container for sources. For more information about source locations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-source-locations.html\&quot;&gt;Working with source locations&lt;/a&gt; in the &lt;i&gt;MediaTailor User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSourceLocationTest() throws ApiException {
        String sourceLocationName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteSourceLocation(sourceLocationName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * The video on demand (VOD) source to delete.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteVodSourceTest() throws ApiException {
        String sourceLocationName = null;
        String vodSourceName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteVodSource(sourceLocationName, vodSourceName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes a channel. For information about MediaTailor channels, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-channels.html\&quot;&gt;Working with channels&lt;/a&gt; in the &lt;i&gt;MediaTailor User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeChannelTest() throws ApiException {
        String channelName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeChannelResponse response = api.describeChannel(channelName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * The live source to describe.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeLiveSourceTest() throws ApiException {
        String liveSourceName = null;
        String sourceLocationName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeLiveSourceResponse response = api.describeLiveSource(liveSourceName, sourceLocationName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes a program within a channel. For information about programs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-programs.html\&quot;&gt;Working with programs&lt;/a&gt; in the &lt;i&gt;MediaTailor User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeProgramTest() throws ApiException {
        String channelName = null;
        String programName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeProgramResponse response = api.describeProgram(channelName, programName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes a source location. A source location is a container for sources. For more information about source locations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-source-locations.html\&quot;&gt;Working with source locations&lt;/a&gt; in the &lt;i&gt;MediaTailor User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeSourceLocationTest() throws ApiException {
        String sourceLocationName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeSourceLocationResponse response = api.describeSourceLocation(sourceLocationName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Provides details about a specific video on demand (VOD) source in a specific source location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeVodSourceTest() throws ApiException {
        String sourceLocationName = null;
        String vodSourceName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeVodSourceResponse response = api.describeVodSource(sourceLocationName, vodSourceName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the channel&#39;s IAM policy. IAM policies are used to control access to your channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChannelPolicyTest() throws ApiException {
        String channelName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetChannelPolicyResponse response = api.getChannelPolicy(channelName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about your channel&#39;s schedule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChannelScheduleTest() throws ApiException {
        String channelName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String durationMinutes = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        GetChannelScheduleResponse response = api.getChannelSchedule(channelName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, durationMinutes, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Retrieves a playback configuration. For information about MediaTailor configurations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mediatailor/latest/ug/configurations.html\&quot;&gt;Working with configurations in AWS Elemental MediaTailor&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPlaybackConfigurationTest() throws ApiException {
        String name = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetPlaybackConfigurationResponse response = api.getPlaybackConfiguration(name, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a prefetch schedule for a playback configuration. A prefetch schedule allows you to tell MediaTailor to fetch and prepare certain ads before an ad break happens. For more information about ad prefetching, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mediatailor/latest/ug/prefetching-ads.html\&quot;&gt;Using ad prefetching&lt;/a&gt; in the &lt;i&gt;MediaTailor User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPrefetchScheduleTest() throws ApiException {
        String name = null;
        String playbackConfigurationName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetPrefetchScheduleResponse response = api.getPrefetchSchedule(name, playbackConfigurationName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists the alerts that are associated with a MediaTailor channel assembly resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAlertsTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListAlertsResponse response = api.listAlerts(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Retrieves information about the channels that are associated with the current AWS account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listChannelsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListChannelsResponse response = api.listChannels(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Lists the live sources contained in a source location. A source represents a piece of content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLiveSourcesTest() throws ApiException {
        String sourceLocationName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListLiveSourcesResponse response = api.listLiveSources(sourceLocationName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Retrieves existing playback configurations. For information about MediaTailor configurations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mediatailor/latest/ug/configurations.html\&quot;&gt;Working with Configurations in AWS Elemental MediaTailor&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPlaybackConfigurationsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListPlaybackConfigurationsResponse response = api.listPlaybackConfigurations(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the prefetch schedules for a playback configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPrefetchSchedulesTest() throws ApiException {
        String playbackConfigurationName = null;
        ListPrefetchSchedulesRequest listPrefetchSchedulesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListPrefetchSchedulesResponse response = api.listPrefetchSchedules(playbackConfigurationName, listPrefetchSchedulesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the source locations for a channel. A source location defines the host server URL, and contains a list of sources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSourceLocationsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListSourceLocationsResponse response = api.listSourceLocations(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * A list of tags that are associated with this resource. Tags are key-value pairs that you can associate with Amazon resources to help with organization, access control, and cost tracking. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mediatailor/latest/ug/tagging.html\&quot;&gt;Tagging AWS Elemental MediaTailor Resources&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists the VOD sources contained in a source location. A source represents a piece of content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listVodSourcesTest() throws ApiException {
        String sourceLocationName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListVodSourcesResponse response = api.listVodSources(sourceLocationName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Creates an IAM policy for the channel. IAM policies are used to control access to your channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putChannelPolicyTest() throws ApiException {
        String channelName = null;
        PutChannelPolicyRequest putChannelPolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putChannelPolicy(channelName, putChannelPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a playback configuration. For information about MediaTailor configurations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mediatailor/latest/ug/configurations.html\&quot;&gt;Working with configurations in AWS Elemental MediaTailor&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putPlaybackConfigurationTest() throws ApiException {
        PutPlaybackConfigurationRequest putPlaybackConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutPlaybackConfigurationResponse response = api.putPlaybackConfiguration(putPlaybackConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts a channel. For information about MediaTailor channels, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-channels.html\&quot;&gt;Working with channels&lt;/a&gt; in the &lt;i&gt;MediaTailor User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startChannelTest() throws ApiException {
        String channelName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.startChannel(channelName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops a channel. For information about MediaTailor channels, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-channels.html\&quot;&gt;Working with channels&lt;/a&gt; in the &lt;i&gt;MediaTailor User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopChannelTest() throws ApiException {
        String channelName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.stopChannel(channelName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * The resource to tag. Tags are key-value pairs that you can associate with Amazon resources to help with organization, access control, and cost tracking. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mediatailor/latest/ug/tagging.html\&quot;&gt;Tagging AWS Elemental MediaTailor Resources&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * The resource to untag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a channel. For information about MediaTailor channels, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-channels.html\&quot;&gt;Working with channels&lt;/a&gt; in the &lt;i&gt;MediaTailor User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateChannelTest() throws ApiException {
        String channelName = null;
        UpdateChannelRequest updateChannelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateChannelResponse response = api.updateChannel(channelName, updateChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a live source&#39;s configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLiveSourceTest() throws ApiException {
        String liveSourceName = null;
        String sourceLocationName = null;
        UpdateLiveSourceRequest updateLiveSourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateLiveSourceResponse response = api.updateLiveSource(liveSourceName, sourceLocationName, updateLiveSourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a program within a channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProgramTest() throws ApiException {
        String channelName = null;
        String programName = null;
        UpdateProgramRequest updateProgramRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateProgramResponse response = api.updateProgram(channelName, programName, updateProgramRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a source location. A source location is a container for sources. For more information about source locations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-source-locations.html\&quot;&gt;Working with source locations&lt;/a&gt; in the &lt;i&gt;MediaTailor User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSourceLocationTest() throws ApiException {
        String sourceLocationName = null;
        UpdateSourceLocationRequest updateSourceLocationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateSourceLocationResponse response = api.updateSourceLocation(sourceLocationName, updateSourceLocationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a VOD source&#39;s configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateVodSourceTest() throws ApiException {
        String sourceLocationName = null;
        String vodSourceName = null;
        UpdateLiveSourceRequest updateLiveSourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateVodSourceResponse response = api.updateVodSource(sourceLocationName, vodSourceName, updateLiveSourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
