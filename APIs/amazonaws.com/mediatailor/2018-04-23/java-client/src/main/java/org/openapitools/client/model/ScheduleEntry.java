/*
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ScheduleEntryType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties for a schedule.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:49.240114-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScheduleEntry {
  public static final String SERIALIZED_NAME_APPROXIMATE_DURATION_SECONDS = "ApproximateDurationSeconds";
  @SerializedName(SERIALIZED_NAME_APPROXIMATE_DURATION_SECONDS)
  private Integer approximateDurationSeconds;

  public static final String SERIALIZED_NAME_APPROXIMATE_START_TIME = "ApproximateStartTime";
  @SerializedName(SERIALIZED_NAME_APPROXIMATE_START_TIME)
  private OffsetDateTime approximateStartTime;

  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_CHANNEL_NAME = "ChannelName";
  @SerializedName(SERIALIZED_NAME_CHANNEL_NAME)
  private String channelName;

  public static final String SERIALIZED_NAME_LIVE_SOURCE_NAME = "LiveSourceName";
  @SerializedName(SERIALIZED_NAME_LIVE_SOURCE_NAME)
  private String liveSourceName;

  public static final String SERIALIZED_NAME_PROGRAM_NAME = "ProgramName";
  @SerializedName(SERIALIZED_NAME_PROGRAM_NAME)
  private String programName;

  public static final String SERIALIZED_NAME_SCHEDULE_AD_BREAKS = "ScheduleAdBreaks";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_AD_BREAKS)
  private List scheduleAdBreaks;

  public static final String SERIALIZED_NAME_SCHEDULE_ENTRY_TYPE = "ScheduleEntryType";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_ENTRY_TYPE)
  private ScheduleEntryType scheduleEntryType;

  public static final String SERIALIZED_NAME_SOURCE_LOCATION_NAME = "SourceLocationName";
  @SerializedName(SERIALIZED_NAME_SOURCE_LOCATION_NAME)
  private String sourceLocationName;

  public static final String SERIALIZED_NAME_VOD_SOURCE_NAME = "VodSourceName";
  @SerializedName(SERIALIZED_NAME_VOD_SOURCE_NAME)
  private String vodSourceName;

  public ScheduleEntry() {
  }

  public ScheduleEntry approximateDurationSeconds(Integer approximateDurationSeconds) {
    this.approximateDurationSeconds = approximateDurationSeconds;
    return this;
  }

  /**
   * Get approximateDurationSeconds
   * @return approximateDurationSeconds
   */
  @javax.annotation.Nullable
  public Integer getApproximateDurationSeconds() {
    return approximateDurationSeconds;
  }

  public void setApproximateDurationSeconds(Integer approximateDurationSeconds) {
    this.approximateDurationSeconds = approximateDurationSeconds;
  }


  public ScheduleEntry approximateStartTime(OffsetDateTime approximateStartTime) {
    this.approximateStartTime = approximateStartTime;
    return this;
  }

  /**
   * Get approximateStartTime
   * @return approximateStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getApproximateStartTime() {
    return approximateStartTime;
  }

  public void setApproximateStartTime(OffsetDateTime approximateStartTime) {
    this.approximateStartTime = approximateStartTime;
  }


  public ScheduleEntry arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nonnull
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public ScheduleEntry channelName(String channelName) {
    this.channelName = channelName;
    return this;
  }

  /**
   * Get channelName
   * @return channelName
   */
  @javax.annotation.Nonnull
  public String getChannelName() {
    return channelName;
  }

  public void setChannelName(String channelName) {
    this.channelName = channelName;
  }


  public ScheduleEntry liveSourceName(String liveSourceName) {
    this.liveSourceName = liveSourceName;
    return this;
  }

  /**
   * Get liveSourceName
   * @return liveSourceName
   */
  @javax.annotation.Nullable
  public String getLiveSourceName() {
    return liveSourceName;
  }

  public void setLiveSourceName(String liveSourceName) {
    this.liveSourceName = liveSourceName;
  }


  public ScheduleEntry programName(String programName) {
    this.programName = programName;
    return this;
  }

  /**
   * Get programName
   * @return programName
   */
  @javax.annotation.Nonnull
  public String getProgramName() {
    return programName;
  }

  public void setProgramName(String programName) {
    this.programName = programName;
  }


  public ScheduleEntry scheduleAdBreaks(List scheduleAdBreaks) {
    this.scheduleAdBreaks = scheduleAdBreaks;
    return this;
  }

  /**
   * Get scheduleAdBreaks
   * @return scheduleAdBreaks
   */
  @javax.annotation.Nullable
  public List getScheduleAdBreaks() {
    return scheduleAdBreaks;
  }

  public void setScheduleAdBreaks(List scheduleAdBreaks) {
    this.scheduleAdBreaks = scheduleAdBreaks;
  }


  public ScheduleEntry scheduleEntryType(ScheduleEntryType scheduleEntryType) {
    this.scheduleEntryType = scheduleEntryType;
    return this;
  }

  /**
   * Get scheduleEntryType
   * @return scheduleEntryType
   */
  @javax.annotation.Nullable
  public ScheduleEntryType getScheduleEntryType() {
    return scheduleEntryType;
  }

  public void setScheduleEntryType(ScheduleEntryType scheduleEntryType) {
    this.scheduleEntryType = scheduleEntryType;
  }


  public ScheduleEntry sourceLocationName(String sourceLocationName) {
    this.sourceLocationName = sourceLocationName;
    return this;
  }

  /**
   * Get sourceLocationName
   * @return sourceLocationName
   */
  @javax.annotation.Nonnull
  public String getSourceLocationName() {
    return sourceLocationName;
  }

  public void setSourceLocationName(String sourceLocationName) {
    this.sourceLocationName = sourceLocationName;
  }


  public ScheduleEntry vodSourceName(String vodSourceName) {
    this.vodSourceName = vodSourceName;
    return this;
  }

  /**
   * Get vodSourceName
   * @return vodSourceName
   */
  @javax.annotation.Nullable
  public String getVodSourceName() {
    return vodSourceName;
  }

  public void setVodSourceName(String vodSourceName) {
    this.vodSourceName = vodSourceName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScheduleEntry scheduleEntry = (ScheduleEntry) o;
    return Objects.equals(this.approximateDurationSeconds, scheduleEntry.approximateDurationSeconds) &&
        Objects.equals(this.approximateStartTime, scheduleEntry.approximateStartTime) &&
        Objects.equals(this.arn, scheduleEntry.arn) &&
        Objects.equals(this.channelName, scheduleEntry.channelName) &&
        Objects.equals(this.liveSourceName, scheduleEntry.liveSourceName) &&
        Objects.equals(this.programName, scheduleEntry.programName) &&
        Objects.equals(this.scheduleAdBreaks, scheduleEntry.scheduleAdBreaks) &&
        Objects.equals(this.scheduleEntryType, scheduleEntry.scheduleEntryType) &&
        Objects.equals(this.sourceLocationName, scheduleEntry.sourceLocationName) &&
        Objects.equals(this.vodSourceName, scheduleEntry.vodSourceName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(approximateDurationSeconds, approximateStartTime, arn, channelName, liveSourceName, programName, scheduleAdBreaks, scheduleEntryType, sourceLocationName, vodSourceName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScheduleEntry {\n");
    sb.append("    approximateDurationSeconds: ").append(toIndentedString(approximateDurationSeconds)).append("\n");
    sb.append("    approximateStartTime: ").append(toIndentedString(approximateStartTime)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    channelName: ").append(toIndentedString(channelName)).append("\n");
    sb.append("    liveSourceName: ").append(toIndentedString(liveSourceName)).append("\n");
    sb.append("    programName: ").append(toIndentedString(programName)).append("\n");
    sb.append("    scheduleAdBreaks: ").append(toIndentedString(scheduleAdBreaks)).append("\n");
    sb.append("    scheduleEntryType: ").append(toIndentedString(scheduleEntryType)).append("\n");
    sb.append("    sourceLocationName: ").append(toIndentedString(sourceLocationName)).append("\n");
    sb.append("    vodSourceName: ").append(toIndentedString(vodSourceName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApproximateDurationSeconds");
    openapiFields.add("ApproximateStartTime");
    openapiFields.add("Arn");
    openapiFields.add("ChannelName");
    openapiFields.add("LiveSourceName");
    openapiFields.add("ProgramName");
    openapiFields.add("ScheduleAdBreaks");
    openapiFields.add("ScheduleEntryType");
    openapiFields.add("SourceLocationName");
    openapiFields.add("VodSourceName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Arn");
    openapiRequiredFields.add("ChannelName");
    openapiRequiredFields.add("ProgramName");
    openapiRequiredFields.add("SourceLocationName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScheduleEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScheduleEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScheduleEntry is not found in the empty JSON string", ScheduleEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScheduleEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScheduleEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ScheduleEntry.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ApproximateDurationSeconds`
      if (jsonObj.get("ApproximateDurationSeconds") != null && !jsonObj.get("ApproximateDurationSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ApproximateDurationSeconds"));
      }
      // validate the optional field `ApproximateStartTime`
      if (jsonObj.get("ApproximateStartTime") != null && !jsonObj.get("ApproximateStartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ApproximateStartTime"));
      }
      // validate the required field `Arn`
      String.validateJsonElement(jsonObj.get("Arn"));
      // validate the required field `ChannelName`
      String.validateJsonElement(jsonObj.get("ChannelName"));
      // validate the optional field `LiveSourceName`
      if (jsonObj.get("LiveSourceName") != null && !jsonObj.get("LiveSourceName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LiveSourceName"));
      }
      // validate the required field `ProgramName`
      String.validateJsonElement(jsonObj.get("ProgramName"));
      // validate the optional field `ScheduleAdBreaks`
      if (jsonObj.get("ScheduleAdBreaks") != null && !jsonObj.get("ScheduleAdBreaks").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ScheduleAdBreaks"));
      }
      // validate the optional field `ScheduleEntryType`
      if (jsonObj.get("ScheduleEntryType") != null && !jsonObj.get("ScheduleEntryType").isJsonNull()) {
        ScheduleEntryType.validateJsonElement(jsonObj.get("ScheduleEntryType"));
      }
      // validate the required field `SourceLocationName`
      String.validateJsonElement(jsonObj.get("SourceLocationName"));
      // validate the optional field `VodSourceName`
      if (jsonObj.get("VodSourceName") != null && !jsonObj.get("VodSourceName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VodSourceName"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScheduleEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScheduleEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScheduleEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScheduleEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<ScheduleEntry>() {
           @Override
           public void write(JsonWriter out, ScheduleEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScheduleEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScheduleEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScheduleEntry
   * @throws IOException if the JSON string is invalid with respect to ScheduleEntry
   */
  public static ScheduleEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScheduleEntry.class);
  }

  /**
   * Convert an instance of ScheduleEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

