/*
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Program transition configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:49.240114-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateProgramTransition {
  public static final String SERIALIZED_NAME_DURATION_MILLIS = "DurationMillis";
  @SerializedName(SERIALIZED_NAME_DURATION_MILLIS)
  private Integer durationMillis;

  public static final String SERIALIZED_NAME_SCHEDULED_START_TIME_MILLIS = "ScheduledStartTimeMillis";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_START_TIME_MILLIS)
  private Integer scheduledStartTimeMillis;

  public UpdateProgramTransition() {
  }

  public UpdateProgramTransition durationMillis(Integer durationMillis) {
    this.durationMillis = durationMillis;
    return this;
  }

  /**
   * Get durationMillis
   * @return durationMillis
   */
  @javax.annotation.Nullable
  public Integer getDurationMillis() {
    return durationMillis;
  }

  public void setDurationMillis(Integer durationMillis) {
    this.durationMillis = durationMillis;
  }


  public UpdateProgramTransition scheduledStartTimeMillis(Integer scheduledStartTimeMillis) {
    this.scheduledStartTimeMillis = scheduledStartTimeMillis;
    return this;
  }

  /**
   * Get scheduledStartTimeMillis
   * @return scheduledStartTimeMillis
   */
  @javax.annotation.Nullable
  public Integer getScheduledStartTimeMillis() {
    return scheduledStartTimeMillis;
  }

  public void setScheduledStartTimeMillis(Integer scheduledStartTimeMillis) {
    this.scheduledStartTimeMillis = scheduledStartTimeMillis;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateProgramTransition updateProgramTransition = (UpdateProgramTransition) o;
    return Objects.equals(this.durationMillis, updateProgramTransition.durationMillis) &&
        Objects.equals(this.scheduledStartTimeMillis, updateProgramTransition.scheduledStartTimeMillis);
  }

  @Override
  public int hashCode() {
    return Objects.hash(durationMillis, scheduledStartTimeMillis);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateProgramTransition {\n");
    sb.append("    durationMillis: ").append(toIndentedString(durationMillis)).append("\n");
    sb.append("    scheduledStartTimeMillis: ").append(toIndentedString(scheduledStartTimeMillis)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DurationMillis");
    openapiFields.add("ScheduledStartTimeMillis");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateProgramTransition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateProgramTransition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateProgramTransition is not found in the empty JSON string", UpdateProgramTransition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateProgramTransition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateProgramTransition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DurationMillis`
      if (jsonObj.get("DurationMillis") != null && !jsonObj.get("DurationMillis").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("DurationMillis"));
      }
      // validate the optional field `ScheduledStartTimeMillis`
      if (jsonObj.get("ScheduledStartTimeMillis") != null && !jsonObj.get("ScheduledStartTimeMillis").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ScheduledStartTimeMillis"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateProgramTransition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateProgramTransition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateProgramTransition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateProgramTransition.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateProgramTransition>() {
           @Override
           public void write(JsonWriter out, UpdateProgramTransition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateProgramTransition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateProgramTransition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateProgramTransition
   * @throws IOException if the JSON string is invalid with respect to UpdateProgramTransition
   */
  public static UpdateProgramTransition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateProgramTransition.class);
  }

  /**
   * Convert an instance of UpdateProgramTransition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

