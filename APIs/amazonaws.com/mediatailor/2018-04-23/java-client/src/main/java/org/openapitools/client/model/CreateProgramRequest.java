/*
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AdBreak;
import org.openapitools.client.model.CreateProgramRequestScheduleConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateProgramRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:49.240114-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateProgramRequest {
  public static final String SERIALIZED_NAME_AD_BREAKS = "AdBreaks";
  @SerializedName(SERIALIZED_NAME_AD_BREAKS)
  private List<AdBreak> adBreaks = new ArrayList<>();

  public static final String SERIALIZED_NAME_LIVE_SOURCE_NAME = "LiveSourceName";
  @SerializedName(SERIALIZED_NAME_LIVE_SOURCE_NAME)
  private String liveSourceName;

  public static final String SERIALIZED_NAME_SCHEDULE_CONFIGURATION = "ScheduleConfiguration";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_CONFIGURATION)
  private CreateProgramRequestScheduleConfiguration scheduleConfiguration;

  public static final String SERIALIZED_NAME_SOURCE_LOCATION_NAME = "SourceLocationName";
  @SerializedName(SERIALIZED_NAME_SOURCE_LOCATION_NAME)
  private String sourceLocationName;

  public static final String SERIALIZED_NAME_VOD_SOURCE_NAME = "VodSourceName";
  @SerializedName(SERIALIZED_NAME_VOD_SOURCE_NAME)
  private String vodSourceName;

  public CreateProgramRequest() {
  }

  public CreateProgramRequest adBreaks(List<AdBreak> adBreaks) {
    this.adBreaks = adBreaks;
    return this;
  }

  public CreateProgramRequest addAdBreaksItem(AdBreak adBreaksItem) {
    if (this.adBreaks == null) {
      this.adBreaks = new ArrayList<>();
    }
    this.adBreaks.add(adBreaksItem);
    return this;
  }

  /**
   * The ad break configuration settings.
   * @return adBreaks
   */
  @javax.annotation.Nullable
  public List<AdBreak> getAdBreaks() {
    return adBreaks;
  }

  public void setAdBreaks(List<AdBreak> adBreaks) {
    this.adBreaks = adBreaks;
  }


  public CreateProgramRequest liveSourceName(String liveSourceName) {
    this.liveSourceName = liveSourceName;
    return this;
  }

  /**
   * The name of the LiveSource for this Program.
   * @return liveSourceName
   */
  @javax.annotation.Nullable
  public String getLiveSourceName() {
    return liveSourceName;
  }

  public void setLiveSourceName(String liveSourceName) {
    this.liveSourceName = liveSourceName;
  }


  public CreateProgramRequest scheduleConfiguration(CreateProgramRequestScheduleConfiguration scheduleConfiguration) {
    this.scheduleConfiguration = scheduleConfiguration;
    return this;
  }

  /**
   * Get scheduleConfiguration
   * @return scheduleConfiguration
   */
  @javax.annotation.Nonnull
  public CreateProgramRequestScheduleConfiguration getScheduleConfiguration() {
    return scheduleConfiguration;
  }

  public void setScheduleConfiguration(CreateProgramRequestScheduleConfiguration scheduleConfiguration) {
    this.scheduleConfiguration = scheduleConfiguration;
  }


  public CreateProgramRequest sourceLocationName(String sourceLocationName) {
    this.sourceLocationName = sourceLocationName;
    return this;
  }

  /**
   * The name of the source location.
   * @return sourceLocationName
   */
  @javax.annotation.Nonnull
  public String getSourceLocationName() {
    return sourceLocationName;
  }

  public void setSourceLocationName(String sourceLocationName) {
    this.sourceLocationName = sourceLocationName;
  }


  public CreateProgramRequest vodSourceName(String vodSourceName) {
    this.vodSourceName = vodSourceName;
    return this;
  }

  /**
   * The name that&#39;s used to refer to a VOD source.
   * @return vodSourceName
   */
  @javax.annotation.Nullable
  public String getVodSourceName() {
    return vodSourceName;
  }

  public void setVodSourceName(String vodSourceName) {
    this.vodSourceName = vodSourceName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateProgramRequest createProgramRequest = (CreateProgramRequest) o;
    return Objects.equals(this.adBreaks, createProgramRequest.adBreaks) &&
        Objects.equals(this.liveSourceName, createProgramRequest.liveSourceName) &&
        Objects.equals(this.scheduleConfiguration, createProgramRequest.scheduleConfiguration) &&
        Objects.equals(this.sourceLocationName, createProgramRequest.sourceLocationName) &&
        Objects.equals(this.vodSourceName, createProgramRequest.vodSourceName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adBreaks, liveSourceName, scheduleConfiguration, sourceLocationName, vodSourceName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateProgramRequest {\n");
    sb.append("    adBreaks: ").append(toIndentedString(adBreaks)).append("\n");
    sb.append("    liveSourceName: ").append(toIndentedString(liveSourceName)).append("\n");
    sb.append("    scheduleConfiguration: ").append(toIndentedString(scheduleConfiguration)).append("\n");
    sb.append("    sourceLocationName: ").append(toIndentedString(sourceLocationName)).append("\n");
    sb.append("    vodSourceName: ").append(toIndentedString(vodSourceName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AdBreaks");
    openapiFields.add("LiveSourceName");
    openapiFields.add("ScheduleConfiguration");
    openapiFields.add("SourceLocationName");
    openapiFields.add("VodSourceName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ScheduleConfiguration");
    openapiRequiredFields.add("SourceLocationName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateProgramRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateProgramRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateProgramRequest is not found in the empty JSON string", CreateProgramRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateProgramRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateProgramRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateProgramRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("AdBreaks") != null && !jsonObj.get("AdBreaks").isJsonNull()) {
        JsonArray jsonArrayadBreaks = jsonObj.getAsJsonArray("AdBreaks");
        if (jsonArrayadBreaks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("AdBreaks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `AdBreaks` to be an array in the JSON string but got `%s`", jsonObj.get("AdBreaks").toString()));
          }

          // validate the optional field `AdBreaks` (array)
          for (int i = 0; i < jsonArrayadBreaks.size(); i++) {
            AdBreak.validateJsonElement(jsonArrayadBreaks.get(i));
          };
        }
      }
      if ((jsonObj.get("LiveSourceName") != null && !jsonObj.get("LiveSourceName").isJsonNull()) && !jsonObj.get("LiveSourceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LiveSourceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LiveSourceName").toString()));
      }
      // validate the required field `ScheduleConfiguration`
      CreateProgramRequestScheduleConfiguration.validateJsonElement(jsonObj.get("ScheduleConfiguration"));
      if (!jsonObj.get("SourceLocationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceLocationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceLocationName").toString()));
      }
      if ((jsonObj.get("VodSourceName") != null && !jsonObj.get("VodSourceName").isJsonNull()) && !jsonObj.get("VodSourceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VodSourceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VodSourceName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateProgramRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateProgramRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateProgramRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateProgramRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateProgramRequest>() {
           @Override
           public void write(JsonWriter out, CreateProgramRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateProgramRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateProgramRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateProgramRequest
   * @throws IOException if the JSON string is invalid with respect to CreateProgramRequest
   */
  public static CreateProgramRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateProgramRequest.class);
  }

  /**
   * Convert an instance of CreateProgramRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

