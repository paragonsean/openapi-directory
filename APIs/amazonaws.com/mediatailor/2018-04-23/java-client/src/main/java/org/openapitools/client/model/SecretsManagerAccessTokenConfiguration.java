/*
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AWS Secrets Manager access token configuration parameters. For information about Secrets Manager access token authentication, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-access-configuration-access-token.html\&quot;&gt;Working with AWS Secrets Manager access token authentication&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:49.240114-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SecretsManagerAccessTokenConfiguration {
  public static final String SERIALIZED_NAME_HEADER_NAME = "HeaderName";
  @SerializedName(SERIALIZED_NAME_HEADER_NAME)
  private String headerName;

  public static final String SERIALIZED_NAME_SECRET_ARN = "SecretArn";
  @SerializedName(SERIALIZED_NAME_SECRET_ARN)
  private String secretArn;

  public static final String SERIALIZED_NAME_SECRET_STRING_KEY = "SecretStringKey";
  @SerializedName(SERIALIZED_NAME_SECRET_STRING_KEY)
  private String secretStringKey;

  public SecretsManagerAccessTokenConfiguration() {
  }

  public SecretsManagerAccessTokenConfiguration headerName(String headerName) {
    this.headerName = headerName;
    return this;
  }

  /**
   * Get headerName
   * @return headerName
   */
  @javax.annotation.Nullable
  public String getHeaderName() {
    return headerName;
  }

  public void setHeaderName(String headerName) {
    this.headerName = headerName;
  }


  public SecretsManagerAccessTokenConfiguration secretArn(String secretArn) {
    this.secretArn = secretArn;
    return this;
  }

  /**
   * Get secretArn
   * @return secretArn
   */
  @javax.annotation.Nullable
  public String getSecretArn() {
    return secretArn;
  }

  public void setSecretArn(String secretArn) {
    this.secretArn = secretArn;
  }


  public SecretsManagerAccessTokenConfiguration secretStringKey(String secretStringKey) {
    this.secretStringKey = secretStringKey;
    return this;
  }

  /**
   * Get secretStringKey
   * @return secretStringKey
   */
  @javax.annotation.Nullable
  public String getSecretStringKey() {
    return secretStringKey;
  }

  public void setSecretStringKey(String secretStringKey) {
    this.secretStringKey = secretStringKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SecretsManagerAccessTokenConfiguration secretsManagerAccessTokenConfiguration = (SecretsManagerAccessTokenConfiguration) o;
    return Objects.equals(this.headerName, secretsManagerAccessTokenConfiguration.headerName) &&
        Objects.equals(this.secretArn, secretsManagerAccessTokenConfiguration.secretArn) &&
        Objects.equals(this.secretStringKey, secretsManagerAccessTokenConfiguration.secretStringKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(headerName, secretArn, secretStringKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SecretsManagerAccessTokenConfiguration {\n");
    sb.append("    headerName: ").append(toIndentedString(headerName)).append("\n");
    sb.append("    secretArn: ").append(toIndentedString(secretArn)).append("\n");
    sb.append("    secretStringKey: ").append(toIndentedString(secretStringKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("HeaderName");
    openapiFields.add("SecretArn");
    openapiFields.add("SecretStringKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SecretsManagerAccessTokenConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SecretsManagerAccessTokenConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SecretsManagerAccessTokenConfiguration is not found in the empty JSON string", SecretsManagerAccessTokenConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SecretsManagerAccessTokenConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SecretsManagerAccessTokenConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `HeaderName`
      if (jsonObj.get("HeaderName") != null && !jsonObj.get("HeaderName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("HeaderName"));
      }
      // validate the optional field `SecretArn`
      if (jsonObj.get("SecretArn") != null && !jsonObj.get("SecretArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SecretArn"));
      }
      // validate the optional field `SecretStringKey`
      if (jsonObj.get("SecretStringKey") != null && !jsonObj.get("SecretStringKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SecretStringKey"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SecretsManagerAccessTokenConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SecretsManagerAccessTokenConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SecretsManagerAccessTokenConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SecretsManagerAccessTokenConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<SecretsManagerAccessTokenConfiguration>() {
           @Override
           public void write(JsonWriter out, SecretsManagerAccessTokenConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SecretsManagerAccessTokenConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SecretsManagerAccessTokenConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SecretsManagerAccessTokenConfiguration
   * @throws IOException if the JSON string is invalid with respect to SecretsManagerAccessTokenConfiguration
   */
  public static SecretsManagerAccessTokenConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SecretsManagerAccessTokenConfiguration.class);
  }

  /**
   * Convert an instance of SecretsManagerAccessTokenConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

