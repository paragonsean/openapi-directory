/*
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.PutPlaybackConfigurationRequestAvailSuppression;
import org.openapitools.client.model.PutPlaybackConfigurationRequestBumper;
import org.openapitools.client.model.PutPlaybackConfigurationRequestCdnConfiguration;
import org.openapitools.client.model.PutPlaybackConfigurationRequestDashConfiguration;
import org.openapitools.client.model.PutPlaybackConfigurationRequestLivePreRollConfiguration;
import org.openapitools.client.model.PutPlaybackConfigurationRequestManifestProcessingRules;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutPlaybackConfigurationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:49.240114-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutPlaybackConfigurationRequest {
  public static final String SERIALIZED_NAME_AD_DECISION_SERVER_URL = "AdDecisionServerUrl";
  @SerializedName(SERIALIZED_NAME_AD_DECISION_SERVER_URL)
  private String adDecisionServerUrl;

  public static final String SERIALIZED_NAME_AVAIL_SUPPRESSION = "AvailSuppression";
  @SerializedName(SERIALIZED_NAME_AVAIL_SUPPRESSION)
  private PutPlaybackConfigurationRequestAvailSuppression availSuppression;

  public static final String SERIALIZED_NAME_BUMPER = "Bumper";
  @SerializedName(SERIALIZED_NAME_BUMPER)
  private PutPlaybackConfigurationRequestBumper bumper;

  public static final String SERIALIZED_NAME_CDN_CONFIGURATION = "CdnConfiguration";
  @SerializedName(SERIALIZED_NAME_CDN_CONFIGURATION)
  private PutPlaybackConfigurationRequestCdnConfiguration cdnConfiguration;

  public static final String SERIALIZED_NAME_CONFIGURATION_ALIASES = "ConfigurationAliases";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_ALIASES)
  private Map<String, Map<String, String>> configurationAliases = new HashMap<>();

  public static final String SERIALIZED_NAME_DASH_CONFIGURATION = "DashConfiguration";
  @SerializedName(SERIALIZED_NAME_DASH_CONFIGURATION)
  private PutPlaybackConfigurationRequestDashConfiguration dashConfiguration;

  public static final String SERIALIZED_NAME_LIVE_PRE_ROLL_CONFIGURATION = "LivePreRollConfiguration";
  @SerializedName(SERIALIZED_NAME_LIVE_PRE_ROLL_CONFIGURATION)
  private PutPlaybackConfigurationRequestLivePreRollConfiguration livePreRollConfiguration;

  public static final String SERIALIZED_NAME_MANIFEST_PROCESSING_RULES = "ManifestProcessingRules";
  @SerializedName(SERIALIZED_NAME_MANIFEST_PROCESSING_RULES)
  private PutPlaybackConfigurationRequestManifestProcessingRules manifestProcessingRules;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PERSONALIZATION_THRESHOLD_SECONDS = "PersonalizationThresholdSeconds";
  @SerializedName(SERIALIZED_NAME_PERSONALIZATION_THRESHOLD_SECONDS)
  private Integer personalizationThresholdSeconds;

  public static final String SERIALIZED_NAME_SLATE_AD_URL = "SlateAdUrl";
  @SerializedName(SERIALIZED_NAME_SLATE_AD_URL)
  private String slateAdUrl;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_TRANSCODE_PROFILE_NAME = "TranscodeProfileName";
  @SerializedName(SERIALIZED_NAME_TRANSCODE_PROFILE_NAME)
  private String transcodeProfileName;

  public static final String SERIALIZED_NAME_VIDEO_CONTENT_SOURCE_URL = "VideoContentSourceUrl";
  @SerializedName(SERIALIZED_NAME_VIDEO_CONTENT_SOURCE_URL)
  private String videoContentSourceUrl;

  public PutPlaybackConfigurationRequest() {
  }

  public PutPlaybackConfigurationRequest adDecisionServerUrl(String adDecisionServerUrl) {
    this.adDecisionServerUrl = adDecisionServerUrl;
    return this;
  }

  /**
   * The URL for the ad decision server (ADS). This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing you can provide a static VAST URL. The maximum length is 25,000 characters.
   * @return adDecisionServerUrl
   */
  @javax.annotation.Nullable
  public String getAdDecisionServerUrl() {
    return adDecisionServerUrl;
  }

  public void setAdDecisionServerUrl(String adDecisionServerUrl) {
    this.adDecisionServerUrl = adDecisionServerUrl;
  }


  public PutPlaybackConfigurationRequest availSuppression(PutPlaybackConfigurationRequestAvailSuppression availSuppression) {
    this.availSuppression = availSuppression;
    return this;
  }

  /**
   * Get availSuppression
   * @return availSuppression
   */
  @javax.annotation.Nullable
  public PutPlaybackConfigurationRequestAvailSuppression getAvailSuppression() {
    return availSuppression;
  }

  public void setAvailSuppression(PutPlaybackConfigurationRequestAvailSuppression availSuppression) {
    this.availSuppression = availSuppression;
  }


  public PutPlaybackConfigurationRequest bumper(PutPlaybackConfigurationRequestBumper bumper) {
    this.bumper = bumper;
    return this;
  }

  /**
   * Get bumper
   * @return bumper
   */
  @javax.annotation.Nullable
  public PutPlaybackConfigurationRequestBumper getBumper() {
    return bumper;
  }

  public void setBumper(PutPlaybackConfigurationRequestBumper bumper) {
    this.bumper = bumper;
  }


  public PutPlaybackConfigurationRequest cdnConfiguration(PutPlaybackConfigurationRequestCdnConfiguration cdnConfiguration) {
    this.cdnConfiguration = cdnConfiguration;
    return this;
  }

  /**
   * Get cdnConfiguration
   * @return cdnConfiguration
   */
  @javax.annotation.Nullable
  public PutPlaybackConfigurationRequestCdnConfiguration getCdnConfiguration() {
    return cdnConfiguration;
  }

  public void setCdnConfiguration(PutPlaybackConfigurationRequestCdnConfiguration cdnConfiguration) {
    this.cdnConfiguration = cdnConfiguration;
  }


  public PutPlaybackConfigurationRequest configurationAliases(Map<String, Map<String, String>> configurationAliases) {
    this.configurationAliases = configurationAliases;
    return this;
  }

  public PutPlaybackConfigurationRequest putConfigurationAliasesItem(String key, Map<String, String> configurationAliasesItem) {
    if (this.configurationAliases == null) {
      this.configurationAliases = new HashMap<>();
    }
    this.configurationAliases.put(key, configurationAliasesItem);
    return this;
  }

  /**
   * The predefined aliases for dynamic variables.
   * @return configurationAliases
   */
  @javax.annotation.Nullable
  public Map<String, Map<String, String>> getConfigurationAliases() {
    return configurationAliases;
  }

  public void setConfigurationAliases(Map<String, Map<String, String>> configurationAliases) {
    this.configurationAliases = configurationAliases;
  }


  public PutPlaybackConfigurationRequest dashConfiguration(PutPlaybackConfigurationRequestDashConfiguration dashConfiguration) {
    this.dashConfiguration = dashConfiguration;
    return this;
  }

  /**
   * Get dashConfiguration
   * @return dashConfiguration
   */
  @javax.annotation.Nullable
  public PutPlaybackConfigurationRequestDashConfiguration getDashConfiguration() {
    return dashConfiguration;
  }

  public void setDashConfiguration(PutPlaybackConfigurationRequestDashConfiguration dashConfiguration) {
    this.dashConfiguration = dashConfiguration;
  }


  public PutPlaybackConfigurationRequest livePreRollConfiguration(PutPlaybackConfigurationRequestLivePreRollConfiguration livePreRollConfiguration) {
    this.livePreRollConfiguration = livePreRollConfiguration;
    return this;
  }

  /**
   * Get livePreRollConfiguration
   * @return livePreRollConfiguration
   */
  @javax.annotation.Nullable
  public PutPlaybackConfigurationRequestLivePreRollConfiguration getLivePreRollConfiguration() {
    return livePreRollConfiguration;
  }

  public void setLivePreRollConfiguration(PutPlaybackConfigurationRequestLivePreRollConfiguration livePreRollConfiguration) {
    this.livePreRollConfiguration = livePreRollConfiguration;
  }


  public PutPlaybackConfigurationRequest manifestProcessingRules(PutPlaybackConfigurationRequestManifestProcessingRules manifestProcessingRules) {
    this.manifestProcessingRules = manifestProcessingRules;
    return this;
  }

  /**
   * Get manifestProcessingRules
   * @return manifestProcessingRules
   */
  @javax.annotation.Nullable
  public PutPlaybackConfigurationRequestManifestProcessingRules getManifestProcessingRules() {
    return manifestProcessingRules;
  }

  public void setManifestProcessingRules(PutPlaybackConfigurationRequestManifestProcessingRules manifestProcessingRules) {
    this.manifestProcessingRules = manifestProcessingRules;
  }


  public PutPlaybackConfigurationRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The identifier for the playback configuration.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PutPlaybackConfigurationRequest personalizationThresholdSeconds(Integer personalizationThresholdSeconds) {
    this.personalizationThresholdSeconds = personalizationThresholdSeconds;
    return this;
  }

  /**
   * Defines the maximum duration of underfilled ad time (in seconds) allowed in an ad break. If the duration of underfilled ad time exceeds the personalization threshold, then the personalization of the ad break is abandoned and the underlying content is shown. This feature applies to &lt;i&gt;ad replacement&lt;/i&gt; in live and VOD streams, rather than ad insertion, because it relies on an underlying content stream. For more information about ad break behavior, including ad replacement and insertion, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html\&quot;&gt;Ad Behavior in AWS Elemental MediaTailor&lt;/a&gt;.
   * minimum: 1
   * @return personalizationThresholdSeconds
   */
  @javax.annotation.Nullable
  public Integer getPersonalizationThresholdSeconds() {
    return personalizationThresholdSeconds;
  }

  public void setPersonalizationThresholdSeconds(Integer personalizationThresholdSeconds) {
    this.personalizationThresholdSeconds = personalizationThresholdSeconds;
  }


  public PutPlaybackConfigurationRequest slateAdUrl(String slateAdUrl) {
    this.slateAdUrl = slateAdUrl;
    return this;
  }

  /**
   * The URL for a high-quality video asset to transcode and use to fill in time that&#39;s not used by ads. AWS Elemental MediaTailor shows the slate to fill in gaps in media content. Configuring the slate is optional for non-VPAID configurations. For VPAID, the slate is required because MediaTailor provides it in the slots that are designated for dynamic ad content. The slate must be a high-quality asset that contains both audio and video.
   * @return slateAdUrl
   */
  @javax.annotation.Nullable
  public String getSlateAdUrl() {
    return slateAdUrl;
  }

  public void setSlateAdUrl(String slateAdUrl) {
    this.slateAdUrl = slateAdUrl;
  }


  public PutPlaybackConfigurationRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public PutPlaybackConfigurationRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * The tags to assign to the playback configuration. Tags are key-value pairs that you can associate with Amazon resources to help with organization, access control, and cost tracking. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mediatailor/latest/ug/tagging.html\&quot;&gt;Tagging AWS Elemental MediaTailor Resources&lt;/a&gt;.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public PutPlaybackConfigurationRequest transcodeProfileName(String transcodeProfileName) {
    this.transcodeProfileName = transcodeProfileName;
    return this;
  }

  /**
   * The name that is used to associate this playback configuration with a custom transcode profile. This overrides the dynamic transcoding defaults of MediaTailor. Use this only if you have already set up custom profiles with the help of AWS Support.
   * @return transcodeProfileName
   */
  @javax.annotation.Nullable
  public String getTranscodeProfileName() {
    return transcodeProfileName;
  }

  public void setTranscodeProfileName(String transcodeProfileName) {
    this.transcodeProfileName = transcodeProfileName;
  }


  public PutPlaybackConfigurationRequest videoContentSourceUrl(String videoContentSourceUrl) {
    this.videoContentSourceUrl = videoContentSourceUrl;
    return this;
  }

  /**
   * The URL prefix for the parent manifest for the stream, minus the asset ID. The maximum length is 512 characters.
   * @return videoContentSourceUrl
   */
  @javax.annotation.Nullable
  public String getVideoContentSourceUrl() {
    return videoContentSourceUrl;
  }

  public void setVideoContentSourceUrl(String videoContentSourceUrl) {
    this.videoContentSourceUrl = videoContentSourceUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutPlaybackConfigurationRequest putPlaybackConfigurationRequest = (PutPlaybackConfigurationRequest) o;
    return Objects.equals(this.adDecisionServerUrl, putPlaybackConfigurationRequest.adDecisionServerUrl) &&
        Objects.equals(this.availSuppression, putPlaybackConfigurationRequest.availSuppression) &&
        Objects.equals(this.bumper, putPlaybackConfigurationRequest.bumper) &&
        Objects.equals(this.cdnConfiguration, putPlaybackConfigurationRequest.cdnConfiguration) &&
        Objects.equals(this.configurationAliases, putPlaybackConfigurationRequest.configurationAliases) &&
        Objects.equals(this.dashConfiguration, putPlaybackConfigurationRequest.dashConfiguration) &&
        Objects.equals(this.livePreRollConfiguration, putPlaybackConfigurationRequest.livePreRollConfiguration) &&
        Objects.equals(this.manifestProcessingRules, putPlaybackConfigurationRequest.manifestProcessingRules) &&
        Objects.equals(this.name, putPlaybackConfigurationRequest.name) &&
        Objects.equals(this.personalizationThresholdSeconds, putPlaybackConfigurationRequest.personalizationThresholdSeconds) &&
        Objects.equals(this.slateAdUrl, putPlaybackConfigurationRequest.slateAdUrl) &&
        Objects.equals(this.tags, putPlaybackConfigurationRequest.tags) &&
        Objects.equals(this.transcodeProfileName, putPlaybackConfigurationRequest.transcodeProfileName) &&
        Objects.equals(this.videoContentSourceUrl, putPlaybackConfigurationRequest.videoContentSourceUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adDecisionServerUrl, availSuppression, bumper, cdnConfiguration, configurationAliases, dashConfiguration, livePreRollConfiguration, manifestProcessingRules, name, personalizationThresholdSeconds, slateAdUrl, tags, transcodeProfileName, videoContentSourceUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutPlaybackConfigurationRequest {\n");
    sb.append("    adDecisionServerUrl: ").append(toIndentedString(adDecisionServerUrl)).append("\n");
    sb.append("    availSuppression: ").append(toIndentedString(availSuppression)).append("\n");
    sb.append("    bumper: ").append(toIndentedString(bumper)).append("\n");
    sb.append("    cdnConfiguration: ").append(toIndentedString(cdnConfiguration)).append("\n");
    sb.append("    configurationAliases: ").append(toIndentedString(configurationAliases)).append("\n");
    sb.append("    dashConfiguration: ").append(toIndentedString(dashConfiguration)).append("\n");
    sb.append("    livePreRollConfiguration: ").append(toIndentedString(livePreRollConfiguration)).append("\n");
    sb.append("    manifestProcessingRules: ").append(toIndentedString(manifestProcessingRules)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    personalizationThresholdSeconds: ").append(toIndentedString(personalizationThresholdSeconds)).append("\n");
    sb.append("    slateAdUrl: ").append(toIndentedString(slateAdUrl)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    transcodeProfileName: ").append(toIndentedString(transcodeProfileName)).append("\n");
    sb.append("    videoContentSourceUrl: ").append(toIndentedString(videoContentSourceUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AdDecisionServerUrl");
    openapiFields.add("AvailSuppression");
    openapiFields.add("Bumper");
    openapiFields.add("CdnConfiguration");
    openapiFields.add("ConfigurationAliases");
    openapiFields.add("DashConfiguration");
    openapiFields.add("LivePreRollConfiguration");
    openapiFields.add("ManifestProcessingRules");
    openapiFields.add("Name");
    openapiFields.add("PersonalizationThresholdSeconds");
    openapiFields.add("SlateAdUrl");
    openapiFields.add("tags");
    openapiFields.add("TranscodeProfileName");
    openapiFields.add("VideoContentSourceUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutPlaybackConfigurationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutPlaybackConfigurationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutPlaybackConfigurationRequest is not found in the empty JSON string", PutPlaybackConfigurationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutPlaybackConfigurationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutPlaybackConfigurationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PutPlaybackConfigurationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AdDecisionServerUrl") != null && !jsonObj.get("AdDecisionServerUrl").isJsonNull()) && !jsonObj.get("AdDecisionServerUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AdDecisionServerUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AdDecisionServerUrl").toString()));
      }
      // validate the optional field `AvailSuppression`
      if (jsonObj.get("AvailSuppression") != null && !jsonObj.get("AvailSuppression").isJsonNull()) {
        PutPlaybackConfigurationRequestAvailSuppression.validateJsonElement(jsonObj.get("AvailSuppression"));
      }
      // validate the optional field `Bumper`
      if (jsonObj.get("Bumper") != null && !jsonObj.get("Bumper").isJsonNull()) {
        PutPlaybackConfigurationRequestBumper.validateJsonElement(jsonObj.get("Bumper"));
      }
      // validate the optional field `CdnConfiguration`
      if (jsonObj.get("CdnConfiguration") != null && !jsonObj.get("CdnConfiguration").isJsonNull()) {
        PutPlaybackConfigurationRequestCdnConfiguration.validateJsonElement(jsonObj.get("CdnConfiguration"));
      }
      // validate the optional field `DashConfiguration`
      if (jsonObj.get("DashConfiguration") != null && !jsonObj.get("DashConfiguration").isJsonNull()) {
        PutPlaybackConfigurationRequestDashConfiguration.validateJsonElement(jsonObj.get("DashConfiguration"));
      }
      // validate the optional field `LivePreRollConfiguration`
      if (jsonObj.get("LivePreRollConfiguration") != null && !jsonObj.get("LivePreRollConfiguration").isJsonNull()) {
        PutPlaybackConfigurationRequestLivePreRollConfiguration.validateJsonElement(jsonObj.get("LivePreRollConfiguration"));
      }
      // validate the optional field `ManifestProcessingRules`
      if (jsonObj.get("ManifestProcessingRules") != null && !jsonObj.get("ManifestProcessingRules").isJsonNull()) {
        PutPlaybackConfigurationRequestManifestProcessingRules.validateJsonElement(jsonObj.get("ManifestProcessingRules"));
      }
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("SlateAdUrl") != null && !jsonObj.get("SlateAdUrl").isJsonNull()) && !jsonObj.get("SlateAdUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SlateAdUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SlateAdUrl").toString()));
      }
      if ((jsonObj.get("TranscodeProfileName") != null && !jsonObj.get("TranscodeProfileName").isJsonNull()) && !jsonObj.get("TranscodeProfileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TranscodeProfileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TranscodeProfileName").toString()));
      }
      if ((jsonObj.get("VideoContentSourceUrl") != null && !jsonObj.get("VideoContentSourceUrl").isJsonNull()) && !jsonObj.get("VideoContentSourceUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VideoContentSourceUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VideoContentSourceUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutPlaybackConfigurationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutPlaybackConfigurationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutPlaybackConfigurationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutPlaybackConfigurationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutPlaybackConfigurationRequest>() {
           @Override
           public void write(JsonWriter out, PutPlaybackConfigurationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutPlaybackConfigurationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutPlaybackConfigurationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutPlaybackConfigurationRequest
   * @throws IOException if the JSON string is invalid with respect to PutPlaybackConfigurationRequest
   */
  public static PutPlaybackConfigurationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutPlaybackConfigurationRequest.class);
  }

  /**
   * Convert an instance of PutPlaybackConfigurationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

