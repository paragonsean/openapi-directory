/*
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.RequestOutputItem;
import org.openapitools.client.model.UpdateChannelRequestFillerSlate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateChannelRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:49.240114-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateChannelRequest {
  public static final String SERIALIZED_NAME_FILLER_SLATE = "FillerSlate";
  @SerializedName(SERIALIZED_NAME_FILLER_SLATE)
  private UpdateChannelRequestFillerSlate fillerSlate;

  public static final String SERIALIZED_NAME_OUTPUTS = "Outputs";
  @SerializedName(SERIALIZED_NAME_OUTPUTS)
  private List<RequestOutputItem> outputs = new ArrayList<>();

  /**
   * &lt;p&gt;The type of playback mode to use for this channel.&lt;/p&gt; &lt;p&gt; &lt;code&gt;LINEAR&lt;/code&gt; - The programs in the schedule play once back-to-back in the schedule.&lt;/p&gt; &lt;p&gt; &lt;code&gt;LOOP&lt;/code&gt; - The programs in the schedule play back-to-back in an endless loop. When the last program in the schedule stops playing, playback loops back to the first program in the schedule.&lt;/p&gt;
   */
  @JsonAdapter(PlaybackModeEnum.Adapter.class)
  public enum PlaybackModeEnum {
    LOOP("LOOP"),
    
    LINEAR("LINEAR");

    private String value;

    PlaybackModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlaybackModeEnum fromValue(String value) {
      for (PlaybackModeEnum b : PlaybackModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PlaybackModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlaybackModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlaybackModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlaybackModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PlaybackModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PLAYBACK_MODE = "PlaybackMode";
  @SerializedName(SERIALIZED_NAME_PLAYBACK_MODE)
  private PlaybackModeEnum playbackMode;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  /**
   * The tier of the channel.
   */
  @JsonAdapter(TierEnum.Adapter.class)
  public enum TierEnum {
    BASIC("BASIC"),
    
    STANDARD("STANDARD");

    private String value;

    TierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TierEnum fromValue(String value) {
      for (TierEnum b : TierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TierEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TierEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TierEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TIER = "Tier";
  @SerializedName(SERIALIZED_NAME_TIER)
  private TierEnum tier;

  public CreateChannelRequest() {
  }

  public CreateChannelRequest fillerSlate(UpdateChannelRequestFillerSlate fillerSlate) {
    this.fillerSlate = fillerSlate;
    return this;
  }

  /**
   * Get fillerSlate
   * @return fillerSlate
   */
  @javax.annotation.Nullable
  public UpdateChannelRequestFillerSlate getFillerSlate() {
    return fillerSlate;
  }

  public void setFillerSlate(UpdateChannelRequestFillerSlate fillerSlate) {
    this.fillerSlate = fillerSlate;
  }


  public CreateChannelRequest outputs(List<RequestOutputItem> outputs) {
    this.outputs = outputs;
    return this;
  }

  public CreateChannelRequest addOutputsItem(RequestOutputItem outputsItem) {
    if (this.outputs == null) {
      this.outputs = new ArrayList<>();
    }
    this.outputs.add(outputsItem);
    return this;
  }

  /**
   * An object that represents an object in the CreateChannel request.
   * @return outputs
   */
  @javax.annotation.Nonnull
  public List<RequestOutputItem> getOutputs() {
    return outputs;
  }

  public void setOutputs(List<RequestOutputItem> outputs) {
    this.outputs = outputs;
  }


  public CreateChannelRequest playbackMode(PlaybackModeEnum playbackMode) {
    this.playbackMode = playbackMode;
    return this;
  }

  /**
   * &lt;p&gt;The type of playback mode to use for this channel.&lt;/p&gt; &lt;p&gt; &lt;code&gt;LINEAR&lt;/code&gt; - The programs in the schedule play once back-to-back in the schedule.&lt;/p&gt; &lt;p&gt; &lt;code&gt;LOOP&lt;/code&gt; - The programs in the schedule play back-to-back in an endless loop. When the last program in the schedule stops playing, playback loops back to the first program in the schedule.&lt;/p&gt;
   * @return playbackMode
   */
  @javax.annotation.Nonnull
  public PlaybackModeEnum getPlaybackMode() {
    return playbackMode;
  }

  public void setPlaybackMode(PlaybackModeEnum playbackMode) {
    this.playbackMode = playbackMode;
  }


  public CreateChannelRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateChannelRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * The tags to assign to the channel. Tags are key-value pairs that you can associate with Amazon resources to help with organization, access control, and cost tracking. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mediatailor/latest/ug/tagging.html\&quot;&gt;Tagging AWS Elemental MediaTailor Resources&lt;/a&gt;.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public CreateChannelRequest tier(TierEnum tier) {
    this.tier = tier;
    return this;
  }

  /**
   * The tier of the channel.
   * @return tier
   */
  @javax.annotation.Nullable
  public TierEnum getTier() {
    return tier;
  }

  public void setTier(TierEnum tier) {
    this.tier = tier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateChannelRequest createChannelRequest = (CreateChannelRequest) o;
    return Objects.equals(this.fillerSlate, createChannelRequest.fillerSlate) &&
        Objects.equals(this.outputs, createChannelRequest.outputs) &&
        Objects.equals(this.playbackMode, createChannelRequest.playbackMode) &&
        Objects.equals(this.tags, createChannelRequest.tags) &&
        Objects.equals(this.tier, createChannelRequest.tier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fillerSlate, outputs, playbackMode, tags, tier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateChannelRequest {\n");
    sb.append("    fillerSlate: ").append(toIndentedString(fillerSlate)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("    playbackMode: ").append(toIndentedString(playbackMode)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FillerSlate");
    openapiFields.add("Outputs");
    openapiFields.add("PlaybackMode");
    openapiFields.add("tags");
    openapiFields.add("Tier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Outputs");
    openapiRequiredFields.add("PlaybackMode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateChannelRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateChannelRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateChannelRequest is not found in the empty JSON string", CreateChannelRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateChannelRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateChannelRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateChannelRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `FillerSlate`
      if (jsonObj.get("FillerSlate") != null && !jsonObj.get("FillerSlate").isJsonNull()) {
        UpdateChannelRequestFillerSlate.validateJsonElement(jsonObj.get("FillerSlate"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("Outputs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Outputs` to be an array in the JSON string but got `%s`", jsonObj.get("Outputs").toString()));
      }

      JsonArray jsonArrayoutputs = jsonObj.getAsJsonArray("Outputs");
      // validate the required field `Outputs` (array)
      for (int i = 0; i < jsonArrayoutputs.size(); i++) {
        RequestOutputItem.validateJsonElement(jsonArrayoutputs.get(i));
      };
      if (!jsonObj.get("PlaybackMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PlaybackMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PlaybackMode").toString()));
      }
      // validate the required field `PlaybackMode`
      PlaybackModeEnum.validateJsonElement(jsonObj.get("PlaybackMode"));
      if ((jsonObj.get("Tier") != null && !jsonObj.get("Tier").isJsonNull()) && !jsonObj.get("Tier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Tier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Tier").toString()));
      }
      // validate the optional field `Tier`
      if (jsonObj.get("Tier") != null && !jsonObj.get("Tier").isJsonNull()) {
        TierEnum.validateJsonElement(jsonObj.get("Tier"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateChannelRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateChannelRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateChannelRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateChannelRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateChannelRequest>() {
           @Override
           public void write(JsonWriter out, CreateChannelRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateChannelRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateChannelRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateChannelRequest
   * @throws IOException if the JSON string is invalid with respect to CreateChannelRequest
   */
  public static CreateChannelRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateChannelRequest.class);
  }

  /**
   * Convert an instance of CreateChannelRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

