/*
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;The &lt;code&gt;segmentation_descriptor&lt;/code&gt; message can contain advanced metadata fields, like content identifiers, to convey a wide range of information about the ad break. MediaTailor writes the ad metadata in the egress manifest as part of the &lt;code&gt;EXT-X-DATERANGE&lt;/code&gt; or &lt;code&gt;EventStream&lt;/code&gt; ad marker&#39;s SCTE-35 data.&lt;/p&gt; &lt;p&gt; &lt;code&gt;segmentation_descriptor&lt;/code&gt; messages must be sent with the &lt;code&gt;time_signal&lt;/code&gt; message type.&lt;/p&gt; &lt;p&gt;See the &lt;code&gt;segmentation_descriptor()&lt;/code&gt; table of the 2022 SCTE-35 specification for more information.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:49.240114-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SegmentationDescriptor {
  public static final String SERIALIZED_NAME_SEGMENT_NUM = "SegmentNum";
  @SerializedName(SERIALIZED_NAME_SEGMENT_NUM)
  private Integer segmentNum;

  public static final String SERIALIZED_NAME_SEGMENTATION_EVENT_ID = "SegmentationEventId";
  @SerializedName(SERIALIZED_NAME_SEGMENTATION_EVENT_ID)
  private Integer segmentationEventId;

  public static final String SERIALIZED_NAME_SEGMENTATION_TYPE_ID = "SegmentationTypeId";
  @SerializedName(SERIALIZED_NAME_SEGMENTATION_TYPE_ID)
  private Integer segmentationTypeId;

  public static final String SERIALIZED_NAME_SEGMENTATION_UPID = "SegmentationUpid";
  @SerializedName(SERIALIZED_NAME_SEGMENTATION_UPID)
  private String segmentationUpid;

  public static final String SERIALIZED_NAME_SEGMENTATION_UPID_TYPE = "SegmentationUpidType";
  @SerializedName(SERIALIZED_NAME_SEGMENTATION_UPID_TYPE)
  private Integer segmentationUpidType;

  public static final String SERIALIZED_NAME_SEGMENTS_EXPECTED = "SegmentsExpected";
  @SerializedName(SERIALIZED_NAME_SEGMENTS_EXPECTED)
  private Integer segmentsExpected;

  public static final String SERIALIZED_NAME_SUB_SEGMENT_NUM = "SubSegmentNum";
  @SerializedName(SERIALIZED_NAME_SUB_SEGMENT_NUM)
  private Integer subSegmentNum;

  public static final String SERIALIZED_NAME_SUB_SEGMENTS_EXPECTED = "SubSegmentsExpected";
  @SerializedName(SERIALIZED_NAME_SUB_SEGMENTS_EXPECTED)
  private Integer subSegmentsExpected;

  public SegmentationDescriptor() {
  }

  public SegmentationDescriptor segmentNum(Integer segmentNum) {
    this.segmentNum = segmentNum;
    return this;
  }

  /**
   * Get segmentNum
   * @return segmentNum
   */
  @javax.annotation.Nullable
  public Integer getSegmentNum() {
    return segmentNum;
  }

  public void setSegmentNum(Integer segmentNum) {
    this.segmentNum = segmentNum;
  }


  public SegmentationDescriptor segmentationEventId(Integer segmentationEventId) {
    this.segmentationEventId = segmentationEventId;
    return this;
  }

  /**
   * Get segmentationEventId
   * @return segmentationEventId
   */
  @javax.annotation.Nullable
  public Integer getSegmentationEventId() {
    return segmentationEventId;
  }

  public void setSegmentationEventId(Integer segmentationEventId) {
    this.segmentationEventId = segmentationEventId;
  }


  public SegmentationDescriptor segmentationTypeId(Integer segmentationTypeId) {
    this.segmentationTypeId = segmentationTypeId;
    return this;
  }

  /**
   * Get segmentationTypeId
   * @return segmentationTypeId
   */
  @javax.annotation.Nullable
  public Integer getSegmentationTypeId() {
    return segmentationTypeId;
  }

  public void setSegmentationTypeId(Integer segmentationTypeId) {
    this.segmentationTypeId = segmentationTypeId;
  }


  public SegmentationDescriptor segmentationUpid(String segmentationUpid) {
    this.segmentationUpid = segmentationUpid;
    return this;
  }

  /**
   * Get segmentationUpid
   * @return segmentationUpid
   */
  @javax.annotation.Nullable
  public String getSegmentationUpid() {
    return segmentationUpid;
  }

  public void setSegmentationUpid(String segmentationUpid) {
    this.segmentationUpid = segmentationUpid;
  }


  public SegmentationDescriptor segmentationUpidType(Integer segmentationUpidType) {
    this.segmentationUpidType = segmentationUpidType;
    return this;
  }

  /**
   * Get segmentationUpidType
   * @return segmentationUpidType
   */
  @javax.annotation.Nullable
  public Integer getSegmentationUpidType() {
    return segmentationUpidType;
  }

  public void setSegmentationUpidType(Integer segmentationUpidType) {
    this.segmentationUpidType = segmentationUpidType;
  }


  public SegmentationDescriptor segmentsExpected(Integer segmentsExpected) {
    this.segmentsExpected = segmentsExpected;
    return this;
  }

  /**
   * Get segmentsExpected
   * @return segmentsExpected
   */
  @javax.annotation.Nullable
  public Integer getSegmentsExpected() {
    return segmentsExpected;
  }

  public void setSegmentsExpected(Integer segmentsExpected) {
    this.segmentsExpected = segmentsExpected;
  }


  public SegmentationDescriptor subSegmentNum(Integer subSegmentNum) {
    this.subSegmentNum = subSegmentNum;
    return this;
  }

  /**
   * Get subSegmentNum
   * @return subSegmentNum
   */
  @javax.annotation.Nullable
  public Integer getSubSegmentNum() {
    return subSegmentNum;
  }

  public void setSubSegmentNum(Integer subSegmentNum) {
    this.subSegmentNum = subSegmentNum;
  }


  public SegmentationDescriptor subSegmentsExpected(Integer subSegmentsExpected) {
    this.subSegmentsExpected = subSegmentsExpected;
    return this;
  }

  /**
   * Get subSegmentsExpected
   * @return subSegmentsExpected
   */
  @javax.annotation.Nullable
  public Integer getSubSegmentsExpected() {
    return subSegmentsExpected;
  }

  public void setSubSegmentsExpected(Integer subSegmentsExpected) {
    this.subSegmentsExpected = subSegmentsExpected;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SegmentationDescriptor segmentationDescriptor = (SegmentationDescriptor) o;
    return Objects.equals(this.segmentNum, segmentationDescriptor.segmentNum) &&
        Objects.equals(this.segmentationEventId, segmentationDescriptor.segmentationEventId) &&
        Objects.equals(this.segmentationTypeId, segmentationDescriptor.segmentationTypeId) &&
        Objects.equals(this.segmentationUpid, segmentationDescriptor.segmentationUpid) &&
        Objects.equals(this.segmentationUpidType, segmentationDescriptor.segmentationUpidType) &&
        Objects.equals(this.segmentsExpected, segmentationDescriptor.segmentsExpected) &&
        Objects.equals(this.subSegmentNum, segmentationDescriptor.subSegmentNum) &&
        Objects.equals(this.subSegmentsExpected, segmentationDescriptor.subSegmentsExpected);
  }

  @Override
  public int hashCode() {
    return Objects.hash(segmentNum, segmentationEventId, segmentationTypeId, segmentationUpid, segmentationUpidType, segmentsExpected, subSegmentNum, subSegmentsExpected);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SegmentationDescriptor {\n");
    sb.append("    segmentNum: ").append(toIndentedString(segmentNum)).append("\n");
    sb.append("    segmentationEventId: ").append(toIndentedString(segmentationEventId)).append("\n");
    sb.append("    segmentationTypeId: ").append(toIndentedString(segmentationTypeId)).append("\n");
    sb.append("    segmentationUpid: ").append(toIndentedString(segmentationUpid)).append("\n");
    sb.append("    segmentationUpidType: ").append(toIndentedString(segmentationUpidType)).append("\n");
    sb.append("    segmentsExpected: ").append(toIndentedString(segmentsExpected)).append("\n");
    sb.append("    subSegmentNum: ").append(toIndentedString(subSegmentNum)).append("\n");
    sb.append("    subSegmentsExpected: ").append(toIndentedString(subSegmentsExpected)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SegmentNum");
    openapiFields.add("SegmentationEventId");
    openapiFields.add("SegmentationTypeId");
    openapiFields.add("SegmentationUpid");
    openapiFields.add("SegmentationUpidType");
    openapiFields.add("SegmentsExpected");
    openapiFields.add("SubSegmentNum");
    openapiFields.add("SubSegmentsExpected");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SegmentationDescriptor
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SegmentationDescriptor.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SegmentationDescriptor is not found in the empty JSON string", SegmentationDescriptor.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SegmentationDescriptor.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SegmentationDescriptor` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `SegmentNum`
      if (jsonObj.get("SegmentNum") != null && !jsonObj.get("SegmentNum").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SegmentNum"));
      }
      // validate the optional field `SegmentationEventId`
      if (jsonObj.get("SegmentationEventId") != null && !jsonObj.get("SegmentationEventId").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SegmentationEventId"));
      }
      // validate the optional field `SegmentationTypeId`
      if (jsonObj.get("SegmentationTypeId") != null && !jsonObj.get("SegmentationTypeId").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SegmentationTypeId"));
      }
      // validate the optional field `SegmentationUpid`
      if (jsonObj.get("SegmentationUpid") != null && !jsonObj.get("SegmentationUpid").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SegmentationUpid"));
      }
      // validate the optional field `SegmentationUpidType`
      if (jsonObj.get("SegmentationUpidType") != null && !jsonObj.get("SegmentationUpidType").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SegmentationUpidType"));
      }
      // validate the optional field `SegmentsExpected`
      if (jsonObj.get("SegmentsExpected") != null && !jsonObj.get("SegmentsExpected").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SegmentsExpected"));
      }
      // validate the optional field `SubSegmentNum`
      if (jsonObj.get("SubSegmentNum") != null && !jsonObj.get("SubSegmentNum").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SubSegmentNum"));
      }
      // validate the optional field `SubSegmentsExpected`
      if (jsonObj.get("SubSegmentsExpected") != null && !jsonObj.get("SubSegmentsExpected").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SubSegmentsExpected"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SegmentationDescriptor.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SegmentationDescriptor' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SegmentationDescriptor> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SegmentationDescriptor.class));

       return (TypeAdapter<T>) new TypeAdapter<SegmentationDescriptor>() {
           @Override
           public void write(JsonWriter out, SegmentationDescriptor value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SegmentationDescriptor read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SegmentationDescriptor given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SegmentationDescriptor
   * @throws IOException if the JSON string is invalid with respect to SegmentationDescriptor
   */
  public static SegmentationDescriptor fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SegmentationDescriptor.class);
  }

  /**
   * Convert an instance of SegmentationDescriptor to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

