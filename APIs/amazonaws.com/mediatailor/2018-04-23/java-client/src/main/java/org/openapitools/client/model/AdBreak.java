/*
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AdBreakSlate;
import org.openapitools.client.model.AdBreakSpliceInsertMessage;
import org.openapitools.client.model.AdBreakTimeSignalMessage;
import org.openapitools.client.model.MessageType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Ad break configuration parameters.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:49.240114-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdBreak {
  public static final String SERIALIZED_NAME_AD_BREAK_METADATA = "AdBreakMetadata";
  @SerializedName(SERIALIZED_NAME_AD_BREAK_METADATA)
  private List adBreakMetadata;

  public static final String SERIALIZED_NAME_MESSAGE_TYPE = "MessageType";
  @SerializedName(SERIALIZED_NAME_MESSAGE_TYPE)
  private MessageType messageType;

  public static final String SERIALIZED_NAME_OFFSET_MILLIS = "OffsetMillis";
  @SerializedName(SERIALIZED_NAME_OFFSET_MILLIS)
  private Integer offsetMillis;

  public static final String SERIALIZED_NAME_SLATE = "Slate";
  @SerializedName(SERIALIZED_NAME_SLATE)
  private AdBreakSlate slate;

  public static final String SERIALIZED_NAME_SPLICE_INSERT_MESSAGE = "SpliceInsertMessage";
  @SerializedName(SERIALIZED_NAME_SPLICE_INSERT_MESSAGE)
  private AdBreakSpliceInsertMessage spliceInsertMessage;

  public static final String SERIALIZED_NAME_TIME_SIGNAL_MESSAGE = "TimeSignalMessage";
  @SerializedName(SERIALIZED_NAME_TIME_SIGNAL_MESSAGE)
  private AdBreakTimeSignalMessage timeSignalMessage;

  public AdBreak() {
  }

  public AdBreak adBreakMetadata(List adBreakMetadata) {
    this.adBreakMetadata = adBreakMetadata;
    return this;
  }

  /**
   * Get adBreakMetadata
   * @return adBreakMetadata
   */
  @javax.annotation.Nullable
  public List getAdBreakMetadata() {
    return adBreakMetadata;
  }

  public void setAdBreakMetadata(List adBreakMetadata) {
    this.adBreakMetadata = adBreakMetadata;
  }


  public AdBreak messageType(MessageType messageType) {
    this.messageType = messageType;
    return this;
  }

  /**
   * Get messageType
   * @return messageType
   */
  @javax.annotation.Nullable
  public MessageType getMessageType() {
    return messageType;
  }

  public void setMessageType(MessageType messageType) {
    this.messageType = messageType;
  }


  public AdBreak offsetMillis(Integer offsetMillis) {
    this.offsetMillis = offsetMillis;
    return this;
  }

  /**
   * Get offsetMillis
   * @return offsetMillis
   */
  @javax.annotation.Nullable
  public Integer getOffsetMillis() {
    return offsetMillis;
  }

  public void setOffsetMillis(Integer offsetMillis) {
    this.offsetMillis = offsetMillis;
  }


  public AdBreak slate(AdBreakSlate slate) {
    this.slate = slate;
    return this;
  }

  /**
   * Get slate
   * @return slate
   */
  @javax.annotation.Nullable
  public AdBreakSlate getSlate() {
    return slate;
  }

  public void setSlate(AdBreakSlate slate) {
    this.slate = slate;
  }


  public AdBreak spliceInsertMessage(AdBreakSpliceInsertMessage spliceInsertMessage) {
    this.spliceInsertMessage = spliceInsertMessage;
    return this;
  }

  /**
   * Get spliceInsertMessage
   * @return spliceInsertMessage
   */
  @javax.annotation.Nullable
  public AdBreakSpliceInsertMessage getSpliceInsertMessage() {
    return spliceInsertMessage;
  }

  public void setSpliceInsertMessage(AdBreakSpliceInsertMessage spliceInsertMessage) {
    this.spliceInsertMessage = spliceInsertMessage;
  }


  public AdBreak timeSignalMessage(AdBreakTimeSignalMessage timeSignalMessage) {
    this.timeSignalMessage = timeSignalMessage;
    return this;
  }

  /**
   * Get timeSignalMessage
   * @return timeSignalMessage
   */
  @javax.annotation.Nullable
  public AdBreakTimeSignalMessage getTimeSignalMessage() {
    return timeSignalMessage;
  }

  public void setTimeSignalMessage(AdBreakTimeSignalMessage timeSignalMessage) {
    this.timeSignalMessage = timeSignalMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdBreak adBreak = (AdBreak) o;
    return Objects.equals(this.adBreakMetadata, adBreak.adBreakMetadata) &&
        Objects.equals(this.messageType, adBreak.messageType) &&
        Objects.equals(this.offsetMillis, adBreak.offsetMillis) &&
        Objects.equals(this.slate, adBreak.slate) &&
        Objects.equals(this.spliceInsertMessage, adBreak.spliceInsertMessage) &&
        Objects.equals(this.timeSignalMessage, adBreak.timeSignalMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adBreakMetadata, messageType, offsetMillis, slate, spliceInsertMessage, timeSignalMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdBreak {\n");
    sb.append("    adBreakMetadata: ").append(toIndentedString(adBreakMetadata)).append("\n");
    sb.append("    messageType: ").append(toIndentedString(messageType)).append("\n");
    sb.append("    offsetMillis: ").append(toIndentedString(offsetMillis)).append("\n");
    sb.append("    slate: ").append(toIndentedString(slate)).append("\n");
    sb.append("    spliceInsertMessage: ").append(toIndentedString(spliceInsertMessage)).append("\n");
    sb.append("    timeSignalMessage: ").append(toIndentedString(timeSignalMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AdBreakMetadata");
    openapiFields.add("MessageType");
    openapiFields.add("OffsetMillis");
    openapiFields.add("Slate");
    openapiFields.add("SpliceInsertMessage");
    openapiFields.add("TimeSignalMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdBreak
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdBreak.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdBreak is not found in the empty JSON string", AdBreak.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdBreak.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdBreak` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AdBreakMetadata`
      if (jsonObj.get("AdBreakMetadata") != null && !jsonObj.get("AdBreakMetadata").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AdBreakMetadata"));
      }
      // validate the optional field `MessageType`
      if (jsonObj.get("MessageType") != null && !jsonObj.get("MessageType").isJsonNull()) {
        MessageType.validateJsonElement(jsonObj.get("MessageType"));
      }
      // validate the optional field `OffsetMillis`
      if (jsonObj.get("OffsetMillis") != null && !jsonObj.get("OffsetMillis").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("OffsetMillis"));
      }
      // validate the optional field `Slate`
      if (jsonObj.get("Slate") != null && !jsonObj.get("Slate").isJsonNull()) {
        AdBreakSlate.validateJsonElement(jsonObj.get("Slate"));
      }
      // validate the optional field `SpliceInsertMessage`
      if (jsonObj.get("SpliceInsertMessage") != null && !jsonObj.get("SpliceInsertMessage").isJsonNull()) {
        AdBreakSpliceInsertMessage.validateJsonElement(jsonObj.get("SpliceInsertMessage"));
      }
      // validate the optional field `TimeSignalMessage`
      if (jsonObj.get("TimeSignalMessage") != null && !jsonObj.get("TimeSignalMessage").isJsonNull()) {
        AdBreakTimeSignalMessage.validateJsonElement(jsonObj.get("TimeSignalMessage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdBreak.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdBreak' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdBreak> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdBreak.class));

       return (TypeAdapter<T>) new TypeAdapter<AdBreak>() {
           @Override
           public void write(JsonWriter out, AdBreak value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdBreak read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdBreak given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdBreak
   * @throws IOException if the JSON string is invalid with respect to AdBreak
   */
  public static AdBreak fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdBreak.class);
  }

  /**
   * Convert an instance of AdBreak to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

