/*
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ChannelState;
import org.openapitools.client.model.CreateChannelResponseFillerSlate;
import org.openapitools.client.model.DescribeChannelResponseLogConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeChannelResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:49.240114-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeChannelResponse {
  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_CHANNEL_NAME = "ChannelName";
  @SerializedName(SERIALIZED_NAME_CHANNEL_NAME)
  private String channelName;

  public static final String SERIALIZED_NAME_CHANNEL_STATE = "ChannelState";
  @SerializedName(SERIALIZED_NAME_CHANNEL_STATE)
  private ChannelState channelState;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_FILLER_SLATE = "FillerSlate";
  @SerializedName(SERIALIZED_NAME_FILLER_SLATE)
  private CreateChannelResponseFillerSlate fillerSlate;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "LastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private OffsetDateTime lastModifiedTime;

  public static final String SERIALIZED_NAME_LOG_CONFIGURATION = "LogConfiguration";
  @SerializedName(SERIALIZED_NAME_LOG_CONFIGURATION)
  private DescribeChannelResponseLogConfiguration logConfiguration;

  public static final String SERIALIZED_NAME_OUTPUTS = "Outputs";
  @SerializedName(SERIALIZED_NAME_OUTPUTS)
  private List outputs;

  public static final String SERIALIZED_NAME_PLAYBACK_MODE = "PlaybackMode";
  @SerializedName(SERIALIZED_NAME_PLAYBACK_MODE)
  private String playbackMode;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_TIER = "Tier";
  @SerializedName(SERIALIZED_NAME_TIER)
  private String tier;

  public DescribeChannelResponse() {
  }

  public DescribeChannelResponse arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public DescribeChannelResponse channelName(String channelName) {
    this.channelName = channelName;
    return this;
  }

  /**
   * Get channelName
   * @return channelName
   */
  @javax.annotation.Nullable
  public String getChannelName() {
    return channelName;
  }

  public void setChannelName(String channelName) {
    this.channelName = channelName;
  }


  public DescribeChannelResponse channelState(ChannelState channelState) {
    this.channelState = channelState;
    return this;
  }

  /**
   * Get channelState
   * @return channelState
   */
  @javax.annotation.Nullable
  public ChannelState getChannelState() {
    return channelState;
  }

  public void setChannelState(ChannelState channelState) {
    this.channelState = channelState;
  }


  public DescribeChannelResponse creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public DescribeChannelResponse fillerSlate(CreateChannelResponseFillerSlate fillerSlate) {
    this.fillerSlate = fillerSlate;
    return this;
  }

  /**
   * Get fillerSlate
   * @return fillerSlate
   */
  @javax.annotation.Nullable
  public CreateChannelResponseFillerSlate getFillerSlate() {
    return fillerSlate;
  }

  public void setFillerSlate(CreateChannelResponseFillerSlate fillerSlate) {
    this.fillerSlate = fillerSlate;
  }


  public DescribeChannelResponse lastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
    return this;
  }

  /**
   * Get lastModifiedTime
   * @return lastModifiedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedTime() {
    return lastModifiedTime;
  }

  public void setLastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
  }


  public DescribeChannelResponse logConfiguration(DescribeChannelResponseLogConfiguration logConfiguration) {
    this.logConfiguration = logConfiguration;
    return this;
  }

  /**
   * Get logConfiguration
   * @return logConfiguration
   */
  @javax.annotation.Nonnull
  public DescribeChannelResponseLogConfiguration getLogConfiguration() {
    return logConfiguration;
  }

  public void setLogConfiguration(DescribeChannelResponseLogConfiguration logConfiguration) {
    this.logConfiguration = logConfiguration;
  }


  public DescribeChannelResponse outputs(List outputs) {
    this.outputs = outputs;
    return this;
  }

  /**
   * Get outputs
   * @return outputs
   */
  @javax.annotation.Nullable
  public List getOutputs() {
    return outputs;
  }

  public void setOutputs(List outputs) {
    this.outputs = outputs;
  }


  public DescribeChannelResponse playbackMode(String playbackMode) {
    this.playbackMode = playbackMode;
    return this;
  }

  /**
   * Get playbackMode
   * @return playbackMode
   */
  @javax.annotation.Nullable
  public String getPlaybackMode() {
    return playbackMode;
  }

  public void setPlaybackMode(String playbackMode) {
    this.playbackMode = playbackMode;
  }


  public DescribeChannelResponse tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public DescribeChannelResponse tier(String tier) {
    this.tier = tier;
    return this;
  }

  /**
   * Get tier
   * @return tier
   */
  @javax.annotation.Nullable
  public String getTier() {
    return tier;
  }

  public void setTier(String tier) {
    this.tier = tier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeChannelResponse describeChannelResponse = (DescribeChannelResponse) o;
    return Objects.equals(this.arn, describeChannelResponse.arn) &&
        Objects.equals(this.channelName, describeChannelResponse.channelName) &&
        Objects.equals(this.channelState, describeChannelResponse.channelState) &&
        Objects.equals(this.creationTime, describeChannelResponse.creationTime) &&
        Objects.equals(this.fillerSlate, describeChannelResponse.fillerSlate) &&
        Objects.equals(this.lastModifiedTime, describeChannelResponse.lastModifiedTime) &&
        Objects.equals(this.logConfiguration, describeChannelResponse.logConfiguration) &&
        Objects.equals(this.outputs, describeChannelResponse.outputs) &&
        Objects.equals(this.playbackMode, describeChannelResponse.playbackMode) &&
        Objects.equals(this.tags, describeChannelResponse.tags) &&
        Objects.equals(this.tier, describeChannelResponse.tier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, channelName, channelState, creationTime, fillerSlate, lastModifiedTime, logConfiguration, outputs, playbackMode, tags, tier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeChannelResponse {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    channelName: ").append(toIndentedString(channelName)).append("\n");
    sb.append("    channelState: ").append(toIndentedString(channelState)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    fillerSlate: ").append(toIndentedString(fillerSlate)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    logConfiguration: ").append(toIndentedString(logConfiguration)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("    playbackMode: ").append(toIndentedString(playbackMode)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Arn");
    openapiFields.add("ChannelName");
    openapiFields.add("ChannelState");
    openapiFields.add("CreationTime");
    openapiFields.add("FillerSlate");
    openapiFields.add("LastModifiedTime");
    openapiFields.add("LogConfiguration");
    openapiFields.add("Outputs");
    openapiFields.add("PlaybackMode");
    openapiFields.add("Tags");
    openapiFields.add("Tier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("LogConfiguration");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeChannelResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeChannelResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeChannelResponse is not found in the empty JSON string", DescribeChannelResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeChannelResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeChannelResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DescribeChannelResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Arn`
      if (jsonObj.get("Arn") != null && !jsonObj.get("Arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Arn"));
      }
      // validate the optional field `ChannelName`
      if (jsonObj.get("ChannelName") != null && !jsonObj.get("ChannelName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ChannelName"));
      }
      // validate the optional field `ChannelState`
      if (jsonObj.get("ChannelState") != null && !jsonObj.get("ChannelState").isJsonNull()) {
        ChannelState.validateJsonElement(jsonObj.get("ChannelState"));
      }
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
      // validate the optional field `FillerSlate`
      if (jsonObj.get("FillerSlate") != null && !jsonObj.get("FillerSlate").isJsonNull()) {
        CreateChannelResponseFillerSlate.validateJsonElement(jsonObj.get("FillerSlate"));
      }
      // validate the optional field `LastModifiedTime`
      if (jsonObj.get("LastModifiedTime") != null && !jsonObj.get("LastModifiedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastModifiedTime"));
      }
      // validate the required field `LogConfiguration`
      DescribeChannelResponseLogConfiguration.validateJsonElement(jsonObj.get("LogConfiguration"));
      // validate the optional field `Outputs`
      if (jsonObj.get("Outputs") != null && !jsonObj.get("Outputs").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Outputs"));
      }
      // validate the optional field `PlaybackMode`
      if (jsonObj.get("PlaybackMode") != null && !jsonObj.get("PlaybackMode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PlaybackMode"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `Tier`
      if (jsonObj.get("Tier") != null && !jsonObj.get("Tier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Tier"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeChannelResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeChannelResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeChannelResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeChannelResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeChannelResponse>() {
           @Override
           public void write(JsonWriter out, DescribeChannelResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeChannelResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeChannelResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeChannelResponse
   * @throws IOException if the JSON string is invalid with respect to DescribeChannelResponse
   */
  public static DescribeChannelResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeChannelResponse.class);
  }

  /**
   * Convert an instance of DescribeChannelResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

