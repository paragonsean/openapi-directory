/*
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateProgramResponseClipRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateProgramResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:49.240114-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateProgramResponse {
  public static final String SERIALIZED_NAME_AD_BREAKS = "AdBreaks";
  @SerializedName(SERIALIZED_NAME_AD_BREAKS)
  private List adBreaks;

  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_CHANNEL_NAME = "ChannelName";
  @SerializedName(SERIALIZED_NAME_CHANNEL_NAME)
  private String channelName;

  public static final String SERIALIZED_NAME_CLIP_RANGE = "ClipRange";
  @SerializedName(SERIALIZED_NAME_CLIP_RANGE)
  private CreateProgramResponseClipRange clipRange;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_DURATION_MILLIS = "DurationMillis";
  @SerializedName(SERIALIZED_NAME_DURATION_MILLIS)
  private Integer durationMillis;

  public static final String SERIALIZED_NAME_LIVE_SOURCE_NAME = "LiveSourceName";
  @SerializedName(SERIALIZED_NAME_LIVE_SOURCE_NAME)
  private String liveSourceName;

  public static final String SERIALIZED_NAME_PROGRAM_NAME = "ProgramName";
  @SerializedName(SERIALIZED_NAME_PROGRAM_NAME)
  private String programName;

  public static final String SERIALIZED_NAME_SCHEDULED_START_TIME = "ScheduledStartTime";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_START_TIME)
  private OffsetDateTime scheduledStartTime;

  public static final String SERIALIZED_NAME_SOURCE_LOCATION_NAME = "SourceLocationName";
  @SerializedName(SERIALIZED_NAME_SOURCE_LOCATION_NAME)
  private String sourceLocationName;

  public static final String SERIALIZED_NAME_VOD_SOURCE_NAME = "VodSourceName";
  @SerializedName(SERIALIZED_NAME_VOD_SOURCE_NAME)
  private String vodSourceName;

  public UpdateProgramResponse() {
  }

  public UpdateProgramResponse adBreaks(List adBreaks) {
    this.adBreaks = adBreaks;
    return this;
  }

  /**
   * Get adBreaks
   * @return adBreaks
   */
  @javax.annotation.Nullable
  public List getAdBreaks() {
    return adBreaks;
  }

  public void setAdBreaks(List adBreaks) {
    this.adBreaks = adBreaks;
  }


  public UpdateProgramResponse arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public UpdateProgramResponse channelName(String channelName) {
    this.channelName = channelName;
    return this;
  }

  /**
   * Get channelName
   * @return channelName
   */
  @javax.annotation.Nullable
  public String getChannelName() {
    return channelName;
  }

  public void setChannelName(String channelName) {
    this.channelName = channelName;
  }


  public UpdateProgramResponse clipRange(CreateProgramResponseClipRange clipRange) {
    this.clipRange = clipRange;
    return this;
  }

  /**
   * Get clipRange
   * @return clipRange
   */
  @javax.annotation.Nullable
  public CreateProgramResponseClipRange getClipRange() {
    return clipRange;
  }

  public void setClipRange(CreateProgramResponseClipRange clipRange) {
    this.clipRange = clipRange;
  }


  public UpdateProgramResponse creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public UpdateProgramResponse durationMillis(Integer durationMillis) {
    this.durationMillis = durationMillis;
    return this;
  }

  /**
   * Get durationMillis
   * @return durationMillis
   */
  @javax.annotation.Nullable
  public Integer getDurationMillis() {
    return durationMillis;
  }

  public void setDurationMillis(Integer durationMillis) {
    this.durationMillis = durationMillis;
  }


  public UpdateProgramResponse liveSourceName(String liveSourceName) {
    this.liveSourceName = liveSourceName;
    return this;
  }

  /**
   * Get liveSourceName
   * @return liveSourceName
   */
  @javax.annotation.Nullable
  public String getLiveSourceName() {
    return liveSourceName;
  }

  public void setLiveSourceName(String liveSourceName) {
    this.liveSourceName = liveSourceName;
  }


  public UpdateProgramResponse programName(String programName) {
    this.programName = programName;
    return this;
  }

  /**
   * Get programName
   * @return programName
   */
  @javax.annotation.Nullable
  public String getProgramName() {
    return programName;
  }

  public void setProgramName(String programName) {
    this.programName = programName;
  }


  public UpdateProgramResponse scheduledStartTime(OffsetDateTime scheduledStartTime) {
    this.scheduledStartTime = scheduledStartTime;
    return this;
  }

  /**
   * Get scheduledStartTime
   * @return scheduledStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getScheduledStartTime() {
    return scheduledStartTime;
  }

  public void setScheduledStartTime(OffsetDateTime scheduledStartTime) {
    this.scheduledStartTime = scheduledStartTime;
  }


  public UpdateProgramResponse sourceLocationName(String sourceLocationName) {
    this.sourceLocationName = sourceLocationName;
    return this;
  }

  /**
   * Get sourceLocationName
   * @return sourceLocationName
   */
  @javax.annotation.Nullable
  public String getSourceLocationName() {
    return sourceLocationName;
  }

  public void setSourceLocationName(String sourceLocationName) {
    this.sourceLocationName = sourceLocationName;
  }


  public UpdateProgramResponse vodSourceName(String vodSourceName) {
    this.vodSourceName = vodSourceName;
    return this;
  }

  /**
   * Get vodSourceName
   * @return vodSourceName
   */
  @javax.annotation.Nullable
  public String getVodSourceName() {
    return vodSourceName;
  }

  public void setVodSourceName(String vodSourceName) {
    this.vodSourceName = vodSourceName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateProgramResponse updateProgramResponse = (UpdateProgramResponse) o;
    return Objects.equals(this.adBreaks, updateProgramResponse.adBreaks) &&
        Objects.equals(this.arn, updateProgramResponse.arn) &&
        Objects.equals(this.channelName, updateProgramResponse.channelName) &&
        Objects.equals(this.clipRange, updateProgramResponse.clipRange) &&
        Objects.equals(this.creationTime, updateProgramResponse.creationTime) &&
        Objects.equals(this.durationMillis, updateProgramResponse.durationMillis) &&
        Objects.equals(this.liveSourceName, updateProgramResponse.liveSourceName) &&
        Objects.equals(this.programName, updateProgramResponse.programName) &&
        Objects.equals(this.scheduledStartTime, updateProgramResponse.scheduledStartTime) &&
        Objects.equals(this.sourceLocationName, updateProgramResponse.sourceLocationName) &&
        Objects.equals(this.vodSourceName, updateProgramResponse.vodSourceName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adBreaks, arn, channelName, clipRange, creationTime, durationMillis, liveSourceName, programName, scheduledStartTime, sourceLocationName, vodSourceName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateProgramResponse {\n");
    sb.append("    adBreaks: ").append(toIndentedString(adBreaks)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    channelName: ").append(toIndentedString(channelName)).append("\n");
    sb.append("    clipRange: ").append(toIndentedString(clipRange)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    durationMillis: ").append(toIndentedString(durationMillis)).append("\n");
    sb.append("    liveSourceName: ").append(toIndentedString(liveSourceName)).append("\n");
    sb.append("    programName: ").append(toIndentedString(programName)).append("\n");
    sb.append("    scheduledStartTime: ").append(toIndentedString(scheduledStartTime)).append("\n");
    sb.append("    sourceLocationName: ").append(toIndentedString(sourceLocationName)).append("\n");
    sb.append("    vodSourceName: ").append(toIndentedString(vodSourceName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AdBreaks");
    openapiFields.add("Arn");
    openapiFields.add("ChannelName");
    openapiFields.add("ClipRange");
    openapiFields.add("CreationTime");
    openapiFields.add("DurationMillis");
    openapiFields.add("LiveSourceName");
    openapiFields.add("ProgramName");
    openapiFields.add("ScheduledStartTime");
    openapiFields.add("SourceLocationName");
    openapiFields.add("VodSourceName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateProgramResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateProgramResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateProgramResponse is not found in the empty JSON string", UpdateProgramResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateProgramResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateProgramResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AdBreaks`
      if (jsonObj.get("AdBreaks") != null && !jsonObj.get("AdBreaks").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AdBreaks"));
      }
      // validate the optional field `Arn`
      if (jsonObj.get("Arn") != null && !jsonObj.get("Arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Arn"));
      }
      // validate the optional field `ChannelName`
      if (jsonObj.get("ChannelName") != null && !jsonObj.get("ChannelName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ChannelName"));
      }
      // validate the optional field `ClipRange`
      if (jsonObj.get("ClipRange") != null && !jsonObj.get("ClipRange").isJsonNull()) {
        CreateProgramResponseClipRange.validateJsonElement(jsonObj.get("ClipRange"));
      }
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
      // validate the optional field `DurationMillis`
      if (jsonObj.get("DurationMillis") != null && !jsonObj.get("DurationMillis").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("DurationMillis"));
      }
      // validate the optional field `LiveSourceName`
      if (jsonObj.get("LiveSourceName") != null && !jsonObj.get("LiveSourceName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LiveSourceName"));
      }
      // validate the optional field `ProgramName`
      if (jsonObj.get("ProgramName") != null && !jsonObj.get("ProgramName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ProgramName"));
      }
      // validate the optional field `ScheduledStartTime`
      if (jsonObj.get("ScheduledStartTime") != null && !jsonObj.get("ScheduledStartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ScheduledStartTime"));
      }
      // validate the optional field `SourceLocationName`
      if (jsonObj.get("SourceLocationName") != null && !jsonObj.get("SourceLocationName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SourceLocationName"));
      }
      // validate the optional field `VodSourceName`
      if (jsonObj.get("VodSourceName") != null && !jsonObj.get("VodSourceName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VodSourceName"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateProgramResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateProgramResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateProgramResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateProgramResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateProgramResponse>() {
           @Override
           public void write(JsonWriter out, UpdateProgramResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateProgramResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateProgramResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateProgramResponse
   * @throws IOException if the JSON string is invalid with respect to UpdateProgramResponse
   */
  public static UpdateProgramResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateProgramResponse.class);
  }

  /**
   * Convert an instance of UpdateProgramResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

