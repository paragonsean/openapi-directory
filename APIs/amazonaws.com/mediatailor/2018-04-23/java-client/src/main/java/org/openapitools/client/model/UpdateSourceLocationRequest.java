/*
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SegmentDeliveryConfiguration;
import org.openapitools.client.model.UpdateSourceLocationRequestAccessConfiguration;
import org.openapitools.client.model.UpdateSourceLocationRequestDefaultSegmentDeliveryConfiguration;
import org.openapitools.client.model.UpdateSourceLocationRequestHttpConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateSourceLocationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:49.240114-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateSourceLocationRequest {
  public static final String SERIALIZED_NAME_ACCESS_CONFIGURATION = "AccessConfiguration";
  @SerializedName(SERIALIZED_NAME_ACCESS_CONFIGURATION)
  private UpdateSourceLocationRequestAccessConfiguration accessConfiguration;

  public static final String SERIALIZED_NAME_DEFAULT_SEGMENT_DELIVERY_CONFIGURATION = "DefaultSegmentDeliveryConfiguration";
  @SerializedName(SERIALIZED_NAME_DEFAULT_SEGMENT_DELIVERY_CONFIGURATION)
  private UpdateSourceLocationRequestDefaultSegmentDeliveryConfiguration defaultSegmentDeliveryConfiguration;

  public static final String SERIALIZED_NAME_HTTP_CONFIGURATION = "HttpConfiguration";
  @SerializedName(SERIALIZED_NAME_HTTP_CONFIGURATION)
  private UpdateSourceLocationRequestHttpConfiguration httpConfiguration;

  public static final String SERIALIZED_NAME_SEGMENT_DELIVERY_CONFIGURATIONS = "SegmentDeliveryConfigurations";
  @SerializedName(SERIALIZED_NAME_SEGMENT_DELIVERY_CONFIGURATIONS)
  private List<SegmentDeliveryConfiguration> segmentDeliveryConfigurations = new ArrayList<>();

  public UpdateSourceLocationRequest() {
  }

  public UpdateSourceLocationRequest accessConfiguration(UpdateSourceLocationRequestAccessConfiguration accessConfiguration) {
    this.accessConfiguration = accessConfiguration;
    return this;
  }

  /**
   * Get accessConfiguration
   * @return accessConfiguration
   */
  @javax.annotation.Nullable
  public UpdateSourceLocationRequestAccessConfiguration getAccessConfiguration() {
    return accessConfiguration;
  }

  public void setAccessConfiguration(UpdateSourceLocationRequestAccessConfiguration accessConfiguration) {
    this.accessConfiguration = accessConfiguration;
  }


  public UpdateSourceLocationRequest defaultSegmentDeliveryConfiguration(UpdateSourceLocationRequestDefaultSegmentDeliveryConfiguration defaultSegmentDeliveryConfiguration) {
    this.defaultSegmentDeliveryConfiguration = defaultSegmentDeliveryConfiguration;
    return this;
  }

  /**
   * Get defaultSegmentDeliveryConfiguration
   * @return defaultSegmentDeliveryConfiguration
   */
  @javax.annotation.Nullable
  public UpdateSourceLocationRequestDefaultSegmentDeliveryConfiguration getDefaultSegmentDeliveryConfiguration() {
    return defaultSegmentDeliveryConfiguration;
  }

  public void setDefaultSegmentDeliveryConfiguration(UpdateSourceLocationRequestDefaultSegmentDeliveryConfiguration defaultSegmentDeliveryConfiguration) {
    this.defaultSegmentDeliveryConfiguration = defaultSegmentDeliveryConfiguration;
  }


  public UpdateSourceLocationRequest httpConfiguration(UpdateSourceLocationRequestHttpConfiguration httpConfiguration) {
    this.httpConfiguration = httpConfiguration;
    return this;
  }

  /**
   * Get httpConfiguration
   * @return httpConfiguration
   */
  @javax.annotation.Nonnull
  public UpdateSourceLocationRequestHttpConfiguration getHttpConfiguration() {
    return httpConfiguration;
  }

  public void setHttpConfiguration(UpdateSourceLocationRequestHttpConfiguration httpConfiguration) {
    this.httpConfiguration = httpConfiguration;
  }


  public UpdateSourceLocationRequest segmentDeliveryConfigurations(List<SegmentDeliveryConfiguration> segmentDeliveryConfigurations) {
    this.segmentDeliveryConfigurations = segmentDeliveryConfigurations;
    return this;
  }

  public UpdateSourceLocationRequest addSegmentDeliveryConfigurationsItem(SegmentDeliveryConfiguration segmentDeliveryConfigurationsItem) {
    if (this.segmentDeliveryConfigurations == null) {
      this.segmentDeliveryConfigurations = new ArrayList<>();
    }
    this.segmentDeliveryConfigurations.add(segmentDeliveryConfigurationsItem);
    return this;
  }

  /**
   * A list of the segment delivery configurations associated with this resource.
   * @return segmentDeliveryConfigurations
   */
  @javax.annotation.Nullable
  public List<SegmentDeliveryConfiguration> getSegmentDeliveryConfigurations() {
    return segmentDeliveryConfigurations;
  }

  public void setSegmentDeliveryConfigurations(List<SegmentDeliveryConfiguration> segmentDeliveryConfigurations) {
    this.segmentDeliveryConfigurations = segmentDeliveryConfigurations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateSourceLocationRequest updateSourceLocationRequest = (UpdateSourceLocationRequest) o;
    return Objects.equals(this.accessConfiguration, updateSourceLocationRequest.accessConfiguration) &&
        Objects.equals(this.defaultSegmentDeliveryConfiguration, updateSourceLocationRequest.defaultSegmentDeliveryConfiguration) &&
        Objects.equals(this.httpConfiguration, updateSourceLocationRequest.httpConfiguration) &&
        Objects.equals(this.segmentDeliveryConfigurations, updateSourceLocationRequest.segmentDeliveryConfigurations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessConfiguration, defaultSegmentDeliveryConfiguration, httpConfiguration, segmentDeliveryConfigurations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateSourceLocationRequest {\n");
    sb.append("    accessConfiguration: ").append(toIndentedString(accessConfiguration)).append("\n");
    sb.append("    defaultSegmentDeliveryConfiguration: ").append(toIndentedString(defaultSegmentDeliveryConfiguration)).append("\n");
    sb.append("    httpConfiguration: ").append(toIndentedString(httpConfiguration)).append("\n");
    sb.append("    segmentDeliveryConfigurations: ").append(toIndentedString(segmentDeliveryConfigurations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccessConfiguration");
    openapiFields.add("DefaultSegmentDeliveryConfiguration");
    openapiFields.add("HttpConfiguration");
    openapiFields.add("SegmentDeliveryConfigurations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("HttpConfiguration");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateSourceLocationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateSourceLocationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateSourceLocationRequest is not found in the empty JSON string", UpdateSourceLocationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateSourceLocationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateSourceLocationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateSourceLocationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AccessConfiguration`
      if (jsonObj.get("AccessConfiguration") != null && !jsonObj.get("AccessConfiguration").isJsonNull()) {
        UpdateSourceLocationRequestAccessConfiguration.validateJsonElement(jsonObj.get("AccessConfiguration"));
      }
      // validate the optional field `DefaultSegmentDeliveryConfiguration`
      if (jsonObj.get("DefaultSegmentDeliveryConfiguration") != null && !jsonObj.get("DefaultSegmentDeliveryConfiguration").isJsonNull()) {
        UpdateSourceLocationRequestDefaultSegmentDeliveryConfiguration.validateJsonElement(jsonObj.get("DefaultSegmentDeliveryConfiguration"));
      }
      // validate the required field `HttpConfiguration`
      UpdateSourceLocationRequestHttpConfiguration.validateJsonElement(jsonObj.get("HttpConfiguration"));
      if (jsonObj.get("SegmentDeliveryConfigurations") != null && !jsonObj.get("SegmentDeliveryConfigurations").isJsonNull()) {
        JsonArray jsonArraysegmentDeliveryConfigurations = jsonObj.getAsJsonArray("SegmentDeliveryConfigurations");
        if (jsonArraysegmentDeliveryConfigurations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("SegmentDeliveryConfigurations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `SegmentDeliveryConfigurations` to be an array in the JSON string but got `%s`", jsonObj.get("SegmentDeliveryConfigurations").toString()));
          }

          // validate the optional field `SegmentDeliveryConfigurations` (array)
          for (int i = 0; i < jsonArraysegmentDeliveryConfigurations.size(); i++) {
            SegmentDeliveryConfiguration.validateJsonElement(jsonArraysegmentDeliveryConfigurations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateSourceLocationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateSourceLocationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateSourceLocationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateSourceLocationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateSourceLocationRequest>() {
           @Override
           public void write(JsonWriter out, UpdateSourceLocationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateSourceLocationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateSourceLocationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateSourceLocationRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateSourceLocationRequest
   */
  public static UpdateSourceLocationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateSourceLocationRequest.class);
  }

  /**
   * Convert an instance of UpdateSourceLocationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

