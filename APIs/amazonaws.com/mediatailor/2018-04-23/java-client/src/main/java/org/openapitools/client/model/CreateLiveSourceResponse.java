/*
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateLiveSourceResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:49.240114-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateLiveSourceResponse {
  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_HTTP_PACKAGE_CONFIGURATIONS = "HttpPackageConfigurations";
  @SerializedName(SERIALIZED_NAME_HTTP_PACKAGE_CONFIGURATIONS)
  private List httpPackageConfigurations;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "LastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private OffsetDateTime lastModifiedTime;

  public static final String SERIALIZED_NAME_LIVE_SOURCE_NAME = "LiveSourceName";
  @SerializedName(SERIALIZED_NAME_LIVE_SOURCE_NAME)
  private String liveSourceName;

  public static final String SERIALIZED_NAME_SOURCE_LOCATION_NAME = "SourceLocationName";
  @SerializedName(SERIALIZED_NAME_SOURCE_LOCATION_NAME)
  private String sourceLocationName;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public CreateLiveSourceResponse() {
  }

  public CreateLiveSourceResponse arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public CreateLiveSourceResponse creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public CreateLiveSourceResponse httpPackageConfigurations(List httpPackageConfigurations) {
    this.httpPackageConfigurations = httpPackageConfigurations;
    return this;
  }

  /**
   * Get httpPackageConfigurations
   * @return httpPackageConfigurations
   */
  @javax.annotation.Nullable
  public List getHttpPackageConfigurations() {
    return httpPackageConfigurations;
  }

  public void setHttpPackageConfigurations(List httpPackageConfigurations) {
    this.httpPackageConfigurations = httpPackageConfigurations;
  }


  public CreateLiveSourceResponse lastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
    return this;
  }

  /**
   * Get lastModifiedTime
   * @return lastModifiedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedTime() {
    return lastModifiedTime;
  }

  public void setLastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
  }


  public CreateLiveSourceResponse liveSourceName(String liveSourceName) {
    this.liveSourceName = liveSourceName;
    return this;
  }

  /**
   * Get liveSourceName
   * @return liveSourceName
   */
  @javax.annotation.Nullable
  public String getLiveSourceName() {
    return liveSourceName;
  }

  public void setLiveSourceName(String liveSourceName) {
    this.liveSourceName = liveSourceName;
  }


  public CreateLiveSourceResponse sourceLocationName(String sourceLocationName) {
    this.sourceLocationName = sourceLocationName;
    return this;
  }

  /**
   * Get sourceLocationName
   * @return sourceLocationName
   */
  @javax.annotation.Nullable
  public String getSourceLocationName() {
    return sourceLocationName;
  }

  public void setSourceLocationName(String sourceLocationName) {
    this.sourceLocationName = sourceLocationName;
  }


  public CreateLiveSourceResponse tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateLiveSourceResponse createLiveSourceResponse = (CreateLiveSourceResponse) o;
    return Objects.equals(this.arn, createLiveSourceResponse.arn) &&
        Objects.equals(this.creationTime, createLiveSourceResponse.creationTime) &&
        Objects.equals(this.httpPackageConfigurations, createLiveSourceResponse.httpPackageConfigurations) &&
        Objects.equals(this.lastModifiedTime, createLiveSourceResponse.lastModifiedTime) &&
        Objects.equals(this.liveSourceName, createLiveSourceResponse.liveSourceName) &&
        Objects.equals(this.sourceLocationName, createLiveSourceResponse.sourceLocationName) &&
        Objects.equals(this.tags, createLiveSourceResponse.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, creationTime, httpPackageConfigurations, lastModifiedTime, liveSourceName, sourceLocationName, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateLiveSourceResponse {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    httpPackageConfigurations: ").append(toIndentedString(httpPackageConfigurations)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    liveSourceName: ").append(toIndentedString(liveSourceName)).append("\n");
    sb.append("    sourceLocationName: ").append(toIndentedString(sourceLocationName)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Arn");
    openapiFields.add("CreationTime");
    openapiFields.add("HttpPackageConfigurations");
    openapiFields.add("LastModifiedTime");
    openapiFields.add("LiveSourceName");
    openapiFields.add("SourceLocationName");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateLiveSourceResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateLiveSourceResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateLiveSourceResponse is not found in the empty JSON string", CreateLiveSourceResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateLiveSourceResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateLiveSourceResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Arn`
      if (jsonObj.get("Arn") != null && !jsonObj.get("Arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Arn"));
      }
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
      // validate the optional field `HttpPackageConfigurations`
      if (jsonObj.get("HttpPackageConfigurations") != null && !jsonObj.get("HttpPackageConfigurations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("HttpPackageConfigurations"));
      }
      // validate the optional field `LastModifiedTime`
      if (jsonObj.get("LastModifiedTime") != null && !jsonObj.get("LastModifiedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastModifiedTime"));
      }
      // validate the optional field `LiveSourceName`
      if (jsonObj.get("LiveSourceName") != null && !jsonObj.get("LiveSourceName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LiveSourceName"));
      }
      // validate the optional field `SourceLocationName`
      if (jsonObj.get("SourceLocationName") != null && !jsonObj.get("SourceLocationName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SourceLocationName"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateLiveSourceResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateLiveSourceResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateLiveSourceResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateLiveSourceResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateLiveSourceResponse>() {
           @Override
           public void write(JsonWriter out, CreateLiveSourceResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateLiveSourceResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateLiveSourceResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateLiveSourceResponse
   * @throws IOException if the JSON string is invalid with respect to CreateLiveSourceResponse
   */
  public static CreateLiveSourceResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateLiveSourceResponse.class);
  }

  /**
   * Convert an instance of CreateLiveSourceResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

