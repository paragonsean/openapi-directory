/*
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Splice insert message configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:49.240114-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SpliceInsertMessage {
  public static final String SERIALIZED_NAME_AVAIL_NUM = "AvailNum";
  @SerializedName(SERIALIZED_NAME_AVAIL_NUM)
  private Integer availNum;

  public static final String SERIALIZED_NAME_AVAILS_EXPECTED = "AvailsExpected";
  @SerializedName(SERIALIZED_NAME_AVAILS_EXPECTED)
  private Integer availsExpected;

  public static final String SERIALIZED_NAME_SPLICE_EVENT_ID = "SpliceEventId";
  @SerializedName(SERIALIZED_NAME_SPLICE_EVENT_ID)
  private Integer spliceEventId;

  public static final String SERIALIZED_NAME_UNIQUE_PROGRAM_ID = "UniqueProgramId";
  @SerializedName(SERIALIZED_NAME_UNIQUE_PROGRAM_ID)
  private Integer uniqueProgramId;

  public SpliceInsertMessage() {
  }

  public SpliceInsertMessage availNum(Integer availNum) {
    this.availNum = availNum;
    return this;
  }

  /**
   * Get availNum
   * @return availNum
   */
  @javax.annotation.Nullable
  public Integer getAvailNum() {
    return availNum;
  }

  public void setAvailNum(Integer availNum) {
    this.availNum = availNum;
  }


  public SpliceInsertMessage availsExpected(Integer availsExpected) {
    this.availsExpected = availsExpected;
    return this;
  }

  /**
   * Get availsExpected
   * @return availsExpected
   */
  @javax.annotation.Nullable
  public Integer getAvailsExpected() {
    return availsExpected;
  }

  public void setAvailsExpected(Integer availsExpected) {
    this.availsExpected = availsExpected;
  }


  public SpliceInsertMessage spliceEventId(Integer spliceEventId) {
    this.spliceEventId = spliceEventId;
    return this;
  }

  /**
   * Get spliceEventId
   * @return spliceEventId
   */
  @javax.annotation.Nullable
  public Integer getSpliceEventId() {
    return spliceEventId;
  }

  public void setSpliceEventId(Integer spliceEventId) {
    this.spliceEventId = spliceEventId;
  }


  public SpliceInsertMessage uniqueProgramId(Integer uniqueProgramId) {
    this.uniqueProgramId = uniqueProgramId;
    return this;
  }

  /**
   * Get uniqueProgramId
   * @return uniqueProgramId
   */
  @javax.annotation.Nullable
  public Integer getUniqueProgramId() {
    return uniqueProgramId;
  }

  public void setUniqueProgramId(Integer uniqueProgramId) {
    this.uniqueProgramId = uniqueProgramId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SpliceInsertMessage spliceInsertMessage = (SpliceInsertMessage) o;
    return Objects.equals(this.availNum, spliceInsertMessage.availNum) &&
        Objects.equals(this.availsExpected, spliceInsertMessage.availsExpected) &&
        Objects.equals(this.spliceEventId, spliceInsertMessage.spliceEventId) &&
        Objects.equals(this.uniqueProgramId, spliceInsertMessage.uniqueProgramId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availNum, availsExpected, spliceEventId, uniqueProgramId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SpliceInsertMessage {\n");
    sb.append("    availNum: ").append(toIndentedString(availNum)).append("\n");
    sb.append("    availsExpected: ").append(toIndentedString(availsExpected)).append("\n");
    sb.append("    spliceEventId: ").append(toIndentedString(spliceEventId)).append("\n");
    sb.append("    uniqueProgramId: ").append(toIndentedString(uniqueProgramId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AvailNum");
    openapiFields.add("AvailsExpected");
    openapiFields.add("SpliceEventId");
    openapiFields.add("UniqueProgramId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SpliceInsertMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SpliceInsertMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SpliceInsertMessage is not found in the empty JSON string", SpliceInsertMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SpliceInsertMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SpliceInsertMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AvailNum`
      if (jsonObj.get("AvailNum") != null && !jsonObj.get("AvailNum").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("AvailNum"));
      }
      // validate the optional field `AvailsExpected`
      if (jsonObj.get("AvailsExpected") != null && !jsonObj.get("AvailsExpected").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("AvailsExpected"));
      }
      // validate the optional field `SpliceEventId`
      if (jsonObj.get("SpliceEventId") != null && !jsonObj.get("SpliceEventId").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SpliceEventId"));
      }
      // validate the optional field `UniqueProgramId`
      if (jsonObj.get("UniqueProgramId") != null && !jsonObj.get("UniqueProgramId").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("UniqueProgramId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SpliceInsertMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SpliceInsertMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SpliceInsertMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SpliceInsertMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<SpliceInsertMessage>() {
           @Override
           public void write(JsonWriter out, SpliceInsertMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SpliceInsertMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SpliceInsertMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SpliceInsertMessage
   * @throws IOException if the JSON string is invalid with respect to SpliceInsertMessage
   */
  public static SpliceInsertMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SpliceInsertMessage.class);
  }

  /**
   * Convert an instance of SpliceInsertMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

