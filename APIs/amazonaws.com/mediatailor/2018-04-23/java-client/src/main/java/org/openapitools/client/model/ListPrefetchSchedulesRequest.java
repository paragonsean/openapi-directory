/*
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListPrefetchSchedulesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:49.240114-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListPrefetchSchedulesRequest {
  public static final String SERIALIZED_NAME_MAX_RESULTS = "MaxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public static final String SERIALIZED_NAME_STREAM_ID = "StreamId";
  @SerializedName(SERIALIZED_NAME_STREAM_ID)
  private String streamId;

  public ListPrefetchSchedulesRequest() {
  }

  public ListPrefetchSchedulesRequest maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * The maximum number of prefetch schedules that you want MediaTailor to return in response to the current request. If there are more than &lt;code&gt;MaxResults&lt;/code&gt; prefetch schedules, use the value of &lt;code&gt;NextToken&lt;/code&gt; in the response to get the next page of results.
   * minimum: 1
   * maximum: 100
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }


  public ListPrefetchSchedulesRequest nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * &lt;p&gt;(Optional) If the playback configuration has more than &lt;code&gt;MaxResults&lt;/code&gt; prefetch schedules, use &lt;code&gt;NextToken&lt;/code&gt; to get the second and subsequent pages of results.&lt;/p&gt; &lt;p&gt; For the first &lt;code&gt;ListPrefetchSchedulesRequest&lt;/code&gt; request, omit this value.&lt;/p&gt; &lt;p&gt; For the second and subsequent requests, get the value of &lt;code&gt;NextToken&lt;/code&gt; from the previous response and specify that value for &lt;code&gt;NextToken&lt;/code&gt; in the request.&lt;/p&gt; &lt;p&gt; If the previous response didn&#39;t include a &lt;code&gt;NextToken&lt;/code&gt; element, there are no more prefetch schedules to get.&lt;/p&gt;
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public ListPrefetchSchedulesRequest streamId(String streamId) {
    this.streamId = streamId;
    return this;
  }

  /**
   * An optional filtering parameter whereby MediaTailor filters the prefetch schedules to include only specific streams.
   * @return streamId
   */
  @javax.annotation.Nullable
  public String getStreamId() {
    return streamId;
  }

  public void setStreamId(String streamId) {
    this.streamId = streamId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListPrefetchSchedulesRequest listPrefetchSchedulesRequest = (ListPrefetchSchedulesRequest) o;
    return Objects.equals(this.maxResults, listPrefetchSchedulesRequest.maxResults) &&
        Objects.equals(this.nextToken, listPrefetchSchedulesRequest.nextToken) &&
        Objects.equals(this.streamId, listPrefetchSchedulesRequest.streamId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxResults, nextToken, streamId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListPrefetchSchedulesRequest {\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    streamId: ").append(toIndentedString(streamId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MaxResults");
    openapiFields.add("NextToken");
    openapiFields.add("StreamId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListPrefetchSchedulesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListPrefetchSchedulesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListPrefetchSchedulesRequest is not found in the empty JSON string", ListPrefetchSchedulesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListPrefetchSchedulesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListPrefetchSchedulesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) && !jsonObj.get("NextToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NextToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NextToken").toString()));
      }
      if ((jsonObj.get("StreamId") != null && !jsonObj.get("StreamId").isJsonNull()) && !jsonObj.get("StreamId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StreamId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StreamId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListPrefetchSchedulesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListPrefetchSchedulesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListPrefetchSchedulesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListPrefetchSchedulesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ListPrefetchSchedulesRequest>() {
           @Override
           public void write(JsonWriter out, ListPrefetchSchedulesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListPrefetchSchedulesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListPrefetchSchedulesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListPrefetchSchedulesRequest
   * @throws IOException if the JSON string is invalid with respect to ListPrefetchSchedulesRequest
   */
  public static ListPrefetchSchedulesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListPrefetchSchedulesRequest.class);
  }

  /**
   * Convert an instance of ListPrefetchSchedulesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

