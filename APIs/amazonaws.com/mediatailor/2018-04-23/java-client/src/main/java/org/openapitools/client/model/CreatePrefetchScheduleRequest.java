/*
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreatePrefetchScheduleRequestConsumption;
import org.openapitools.client.model.CreatePrefetchScheduleRequestRetrieval;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreatePrefetchScheduleRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:49.240114-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreatePrefetchScheduleRequest {
  public static final String SERIALIZED_NAME_CONSUMPTION = "Consumption";
  @SerializedName(SERIALIZED_NAME_CONSUMPTION)
  private CreatePrefetchScheduleRequestConsumption consumption;

  public static final String SERIALIZED_NAME_RETRIEVAL = "Retrieval";
  @SerializedName(SERIALIZED_NAME_RETRIEVAL)
  private CreatePrefetchScheduleRequestRetrieval retrieval;

  public static final String SERIALIZED_NAME_STREAM_ID = "StreamId";
  @SerializedName(SERIALIZED_NAME_STREAM_ID)
  private String streamId;

  public CreatePrefetchScheduleRequest() {
  }

  public CreatePrefetchScheduleRequest consumption(CreatePrefetchScheduleRequestConsumption consumption) {
    this.consumption = consumption;
    return this;
  }

  /**
   * Get consumption
   * @return consumption
   */
  @javax.annotation.Nonnull
  public CreatePrefetchScheduleRequestConsumption getConsumption() {
    return consumption;
  }

  public void setConsumption(CreatePrefetchScheduleRequestConsumption consumption) {
    this.consumption = consumption;
  }


  public CreatePrefetchScheduleRequest retrieval(CreatePrefetchScheduleRequestRetrieval retrieval) {
    this.retrieval = retrieval;
    return this;
  }

  /**
   * Get retrieval
   * @return retrieval
   */
  @javax.annotation.Nonnull
  public CreatePrefetchScheduleRequestRetrieval getRetrieval() {
    return retrieval;
  }

  public void setRetrieval(CreatePrefetchScheduleRequestRetrieval retrieval) {
    this.retrieval = retrieval;
  }


  public CreatePrefetchScheduleRequest streamId(String streamId) {
    this.streamId = streamId;
    return this;
  }

  /**
   * An optional stream identifier that MediaTailor uses to prefetch ads for multiple streams that use the same playback configuration. If &lt;code&gt;StreamId&lt;/code&gt; is specified, MediaTailor returns all of the prefetch schedules with an exact match on &lt;code&gt;StreamId&lt;/code&gt;. If not specified, MediaTailor returns all of the prefetch schedules for the playback configuration, regardless of &lt;code&gt;StreamId&lt;/code&gt;.
   * @return streamId
   */
  @javax.annotation.Nullable
  public String getStreamId() {
    return streamId;
  }

  public void setStreamId(String streamId) {
    this.streamId = streamId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePrefetchScheduleRequest createPrefetchScheduleRequest = (CreatePrefetchScheduleRequest) o;
    return Objects.equals(this.consumption, createPrefetchScheduleRequest.consumption) &&
        Objects.equals(this.retrieval, createPrefetchScheduleRequest.retrieval) &&
        Objects.equals(this.streamId, createPrefetchScheduleRequest.streamId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consumption, retrieval, streamId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatePrefetchScheduleRequest {\n");
    sb.append("    consumption: ").append(toIndentedString(consumption)).append("\n");
    sb.append("    retrieval: ").append(toIndentedString(retrieval)).append("\n");
    sb.append("    streamId: ").append(toIndentedString(streamId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Consumption");
    openapiFields.add("Retrieval");
    openapiFields.add("StreamId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Consumption");
    openapiRequiredFields.add("Retrieval");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreatePrefetchScheduleRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreatePrefetchScheduleRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreatePrefetchScheduleRequest is not found in the empty JSON string", CreatePrefetchScheduleRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreatePrefetchScheduleRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreatePrefetchScheduleRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreatePrefetchScheduleRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Consumption`
      CreatePrefetchScheduleRequestConsumption.validateJsonElement(jsonObj.get("Consumption"));
      // validate the required field `Retrieval`
      CreatePrefetchScheduleRequestRetrieval.validateJsonElement(jsonObj.get("Retrieval"));
      if ((jsonObj.get("StreamId") != null && !jsonObj.get("StreamId").isJsonNull()) && !jsonObj.get("StreamId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StreamId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StreamId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreatePrefetchScheduleRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreatePrefetchScheduleRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreatePrefetchScheduleRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreatePrefetchScheduleRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreatePrefetchScheduleRequest>() {
           @Override
           public void write(JsonWriter out, CreatePrefetchScheduleRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreatePrefetchScheduleRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreatePrefetchScheduleRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreatePrefetchScheduleRequest
   * @throws IOException if the JSON string is invalid with respect to CreatePrefetchScheduleRequest
   */
  public static CreatePrefetchScheduleRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreatePrefetchScheduleRequest.class);
  }

  /**
   * Convert an instance of CreatePrefetchScheduleRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

