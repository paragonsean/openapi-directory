/*
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.HttpPackageConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateLiveSourceRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:49.240114-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateLiveSourceRequest {
  public static final String SERIALIZED_NAME_HTTP_PACKAGE_CONFIGURATIONS = "HttpPackageConfigurations";
  @SerializedName(SERIALIZED_NAME_HTTP_PACKAGE_CONFIGURATIONS)
  private List<HttpPackageConfiguration> httpPackageConfigurations = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateLiveSourceRequest() {
  }

  public CreateLiveSourceRequest httpPackageConfigurations(List<HttpPackageConfiguration> httpPackageConfigurations) {
    this.httpPackageConfigurations = httpPackageConfigurations;
    return this;
  }

  public CreateLiveSourceRequest addHttpPackageConfigurationsItem(HttpPackageConfiguration httpPackageConfigurationsItem) {
    if (this.httpPackageConfigurations == null) {
      this.httpPackageConfigurations = new ArrayList<>();
    }
    this.httpPackageConfigurations.add(httpPackageConfigurationsItem);
    return this;
  }

  /**
   * The VOD source&#39;s HTTP package configuration settings.
   * @return httpPackageConfigurations
   */
  @javax.annotation.Nonnull
  public List<HttpPackageConfiguration> getHttpPackageConfigurations() {
    return httpPackageConfigurations;
  }

  public void setHttpPackageConfigurations(List<HttpPackageConfiguration> httpPackageConfigurations) {
    this.httpPackageConfigurations = httpPackageConfigurations;
  }


  public CreateLiveSourceRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateLiveSourceRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * The tags to assign to the live source. Tags are key-value pairs that you can associate with Amazon resources to help with organization, access control, and cost tracking. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mediatailor/latest/ug/tagging.html\&quot;&gt;Tagging AWS Elemental MediaTailor Resources&lt;/a&gt;.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateLiveSourceRequest createLiveSourceRequest = (CreateLiveSourceRequest) o;
    return Objects.equals(this.httpPackageConfigurations, createLiveSourceRequest.httpPackageConfigurations) &&
        Objects.equals(this.tags, createLiveSourceRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(httpPackageConfigurations, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateLiveSourceRequest {\n");
    sb.append("    httpPackageConfigurations: ").append(toIndentedString(httpPackageConfigurations)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("HttpPackageConfigurations");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("HttpPackageConfigurations");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateLiveSourceRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateLiveSourceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateLiveSourceRequest is not found in the empty JSON string", CreateLiveSourceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateLiveSourceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateLiveSourceRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateLiveSourceRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("HttpPackageConfigurations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `HttpPackageConfigurations` to be an array in the JSON string but got `%s`", jsonObj.get("HttpPackageConfigurations").toString()));
      }

      JsonArray jsonArrayhttpPackageConfigurations = jsonObj.getAsJsonArray("HttpPackageConfigurations");
      // validate the required field `HttpPackageConfigurations` (array)
      for (int i = 0; i < jsonArrayhttpPackageConfigurations.size(); i++) {
        HttpPackageConfiguration.validateJsonElement(jsonArrayhttpPackageConfigurations.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateLiveSourceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateLiveSourceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateLiveSourceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateLiveSourceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateLiveSourceRequest>() {
           @Override
           public void write(JsonWriter out, CreateLiveSourceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateLiveSourceRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateLiveSourceRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateLiveSourceRequest
   * @throws IOException if the JSON string is invalid with respect to CreateLiveSourceRequest
   */
  public static CreateLiveSourceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateLiveSourceRequest.class);
  }

  /**
   * Convert an instance of CreateLiveSourceRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

