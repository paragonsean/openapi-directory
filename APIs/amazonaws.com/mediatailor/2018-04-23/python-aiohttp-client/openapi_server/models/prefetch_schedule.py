# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_prefetch_schedule_response_consumption import GetPrefetchScheduleResponseConsumption
from openapi_server.models.get_prefetch_schedule_response_retrieval import GetPrefetchScheduleResponseRetrieval
from openapi_server import util


class PrefetchSchedule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, consumption: GetPrefetchScheduleResponseConsumption=None, name: str=None, playback_configuration_name: str=None, retrieval: GetPrefetchScheduleResponseRetrieval=None, stream_id: str=None):
        """PrefetchSchedule - a model defined in OpenAPI

        :param arn: The arn of this PrefetchSchedule.
        :param consumption: The consumption of this PrefetchSchedule.
        :param name: The name of this PrefetchSchedule.
        :param playback_configuration_name: The playback_configuration_name of this PrefetchSchedule.
        :param retrieval: The retrieval of this PrefetchSchedule.
        :param stream_id: The stream_id of this PrefetchSchedule.
        """
        self.openapi_types = {
            'arn': str,
            'consumption': GetPrefetchScheduleResponseConsumption,
            'name': str,
            'playback_configuration_name': str,
            'retrieval': GetPrefetchScheduleResponseRetrieval,
            'stream_id': str
        }

        self.attribute_map = {
            'arn': 'Arn',
            'consumption': 'Consumption',
            'name': 'Name',
            'playback_configuration_name': 'PlaybackConfigurationName',
            'retrieval': 'Retrieval',
            'stream_id': 'StreamId'
        }

        self._arn = arn
        self._consumption = consumption
        self._name = name
        self._playback_configuration_name = playback_configuration_name
        self._retrieval = retrieval
        self._stream_id = stream_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrefetchSchedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrefetchSchedule of this PrefetchSchedule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this PrefetchSchedule.


        :return: The arn of this PrefetchSchedule.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this PrefetchSchedule.


        :param arn: The arn of this PrefetchSchedule.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def consumption(self):
        """Gets the consumption of this PrefetchSchedule.


        :return: The consumption of this PrefetchSchedule.
        :rtype: GetPrefetchScheduleResponseConsumption
        """
        return self._consumption

    @consumption.setter
    def consumption(self, consumption):
        """Sets the consumption of this PrefetchSchedule.


        :param consumption: The consumption of this PrefetchSchedule.
        :type consumption: GetPrefetchScheduleResponseConsumption
        """
        if consumption is None:
            raise ValueError("Invalid value for `consumption`, must not be `None`")

        self._consumption = consumption

    @property
    def name(self):
        """Gets the name of this PrefetchSchedule.


        :return: The name of this PrefetchSchedule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PrefetchSchedule.


        :param name: The name of this PrefetchSchedule.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def playback_configuration_name(self):
        """Gets the playback_configuration_name of this PrefetchSchedule.


        :return: The playback_configuration_name of this PrefetchSchedule.
        :rtype: str
        """
        return self._playback_configuration_name

    @playback_configuration_name.setter
    def playback_configuration_name(self, playback_configuration_name):
        """Sets the playback_configuration_name of this PrefetchSchedule.


        :param playback_configuration_name: The playback_configuration_name of this PrefetchSchedule.
        :type playback_configuration_name: str
        """
        if playback_configuration_name is None:
            raise ValueError("Invalid value for `playback_configuration_name`, must not be `None`")

        self._playback_configuration_name = playback_configuration_name

    @property
    def retrieval(self):
        """Gets the retrieval of this PrefetchSchedule.


        :return: The retrieval of this PrefetchSchedule.
        :rtype: GetPrefetchScheduleResponseRetrieval
        """
        return self._retrieval

    @retrieval.setter
    def retrieval(self, retrieval):
        """Sets the retrieval of this PrefetchSchedule.


        :param retrieval: The retrieval of this PrefetchSchedule.
        :type retrieval: GetPrefetchScheduleResponseRetrieval
        """
        if retrieval is None:
            raise ValueError("Invalid value for `retrieval`, must not be `None`")

        self._retrieval = retrieval

    @property
    def stream_id(self):
        """Gets the stream_id of this PrefetchSchedule.


        :return: The stream_id of this PrefetchSchedule.
        :rtype: str
        """
        return self._stream_id

    @stream_id.setter
    def stream_id(self, stream_id):
        """Sets the stream_id of this PrefetchSchedule.


        :param stream_id: The stream_id of this PrefetchSchedule.
        :type stream_id: str
        """

        self._stream_id = stream_id
