# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_log_configuration import ChannelLogConfiguration
from openapi_server.models.update_channel_response_filler_slate import UpdateChannelResponseFillerSlate
from openapi_server import util


class Channel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, channel_name: str=None, channel_state: str=None, creation_time: datetime=None, filler_slate: UpdateChannelResponseFillerSlate=None, last_modified_time: datetime=None, log_configuration: ChannelLogConfiguration=None, outputs: List=None, playback_mode: str=None, tags: Dict=None, tier: str=None):
        """Channel - a model defined in OpenAPI

        :param arn: The arn of this Channel.
        :param channel_name: The channel_name of this Channel.
        :param channel_state: The channel_state of this Channel.
        :param creation_time: The creation_time of this Channel.
        :param filler_slate: The filler_slate of this Channel.
        :param last_modified_time: The last_modified_time of this Channel.
        :param log_configuration: The log_configuration of this Channel.
        :param outputs: The outputs of this Channel.
        :param playback_mode: The playback_mode of this Channel.
        :param tags: The tags of this Channel.
        :param tier: The tier of this Channel.
        """
        self.openapi_types = {
            'arn': str,
            'channel_name': str,
            'channel_state': str,
            'creation_time': datetime,
            'filler_slate': UpdateChannelResponseFillerSlate,
            'last_modified_time': datetime,
            'log_configuration': ChannelLogConfiguration,
            'outputs': List,
            'playback_mode': str,
            'tags': Dict,
            'tier': str
        }

        self.attribute_map = {
            'arn': 'Arn',
            'channel_name': 'ChannelName',
            'channel_state': 'ChannelState',
            'creation_time': 'CreationTime',
            'filler_slate': 'FillerSlate',
            'last_modified_time': 'LastModifiedTime',
            'log_configuration': 'LogConfiguration',
            'outputs': 'Outputs',
            'playback_mode': 'PlaybackMode',
            'tags': 'Tags',
            'tier': 'Tier'
        }

        self._arn = arn
        self._channel_name = channel_name
        self._channel_state = channel_state
        self._creation_time = creation_time
        self._filler_slate = filler_slate
        self._last_modified_time = last_modified_time
        self._log_configuration = log_configuration
        self._outputs = outputs
        self._playback_mode = playback_mode
        self._tags = tags
        self._tier = tier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Channel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Channel of this Channel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this Channel.


        :return: The arn of this Channel.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this Channel.


        :param arn: The arn of this Channel.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def channel_name(self):
        """Gets the channel_name of this Channel.


        :return: The channel_name of this Channel.
        :rtype: str
        """
        return self._channel_name

    @channel_name.setter
    def channel_name(self, channel_name):
        """Sets the channel_name of this Channel.


        :param channel_name: The channel_name of this Channel.
        :type channel_name: str
        """
        if channel_name is None:
            raise ValueError("Invalid value for `channel_name`, must not be `None`")

        self._channel_name = channel_name

    @property
    def channel_state(self):
        """Gets the channel_state of this Channel.


        :return: The channel_state of this Channel.
        :rtype: str
        """
        return self._channel_state

    @channel_state.setter
    def channel_state(self, channel_state):
        """Sets the channel_state of this Channel.


        :param channel_state: The channel_state of this Channel.
        :type channel_state: str
        """
        if channel_state is None:
            raise ValueError("Invalid value for `channel_state`, must not be `None`")

        self._channel_state = channel_state

    @property
    def creation_time(self):
        """Gets the creation_time of this Channel.


        :return: The creation_time of this Channel.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this Channel.


        :param creation_time: The creation_time of this Channel.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def filler_slate(self):
        """Gets the filler_slate of this Channel.


        :return: The filler_slate of this Channel.
        :rtype: UpdateChannelResponseFillerSlate
        """
        return self._filler_slate

    @filler_slate.setter
    def filler_slate(self, filler_slate):
        """Sets the filler_slate of this Channel.


        :param filler_slate: The filler_slate of this Channel.
        :type filler_slate: UpdateChannelResponseFillerSlate
        """

        self._filler_slate = filler_slate

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this Channel.


        :return: The last_modified_time of this Channel.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this Channel.


        :param last_modified_time: The last_modified_time of this Channel.
        :type last_modified_time: datetime
        """

        self._last_modified_time = last_modified_time

    @property
    def log_configuration(self):
        """Gets the log_configuration of this Channel.


        :return: The log_configuration of this Channel.
        :rtype: ChannelLogConfiguration
        """
        return self._log_configuration

    @log_configuration.setter
    def log_configuration(self, log_configuration):
        """Sets the log_configuration of this Channel.


        :param log_configuration: The log_configuration of this Channel.
        :type log_configuration: ChannelLogConfiguration
        """
        if log_configuration is None:
            raise ValueError("Invalid value for `log_configuration`, must not be `None`")

        self._log_configuration = log_configuration

    @property
    def outputs(self):
        """Gets the outputs of this Channel.


        :return: The outputs of this Channel.
        :rtype: List
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this Channel.


        :param outputs: The outputs of this Channel.
        :type outputs: List
        """
        if outputs is None:
            raise ValueError("Invalid value for `outputs`, must not be `None`")

        self._outputs = outputs

    @property
    def playback_mode(self):
        """Gets the playback_mode of this Channel.


        :return: The playback_mode of this Channel.
        :rtype: str
        """
        return self._playback_mode

    @playback_mode.setter
    def playback_mode(self, playback_mode):
        """Sets the playback_mode of this Channel.


        :param playback_mode: The playback_mode of this Channel.
        :type playback_mode: str
        """
        if playback_mode is None:
            raise ValueError("Invalid value for `playback_mode`, must not be `None`")

        self._playback_mode = playback_mode

    @property
    def tags(self):
        """Gets the tags of this Channel.


        :return: The tags of this Channel.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Channel.


        :param tags: The tags of this Channel.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def tier(self):
        """Gets the tier of this Channel.


        :return: The tier of this Channel.
        :rtype: str
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this Channel.


        :param tier: The tier of this Channel.
        :type tier: str
        """
        if tier is None:
            raise ValueError("Invalid value for `tier`, must not be `None`")

        self._tier = tier
