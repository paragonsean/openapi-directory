# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LiveSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, creation_time: datetime=None, http_package_configurations: List=None, last_modified_time: datetime=None, live_source_name: str=None, source_location_name: str=None, tags: Dict=None):
        """LiveSource - a model defined in OpenAPI

        :param arn: The arn of this LiveSource.
        :param creation_time: The creation_time of this LiveSource.
        :param http_package_configurations: The http_package_configurations of this LiveSource.
        :param last_modified_time: The last_modified_time of this LiveSource.
        :param live_source_name: The live_source_name of this LiveSource.
        :param source_location_name: The source_location_name of this LiveSource.
        :param tags: The tags of this LiveSource.
        """
        self.openapi_types = {
            'arn': str,
            'creation_time': datetime,
            'http_package_configurations': List,
            'last_modified_time': datetime,
            'live_source_name': str,
            'source_location_name': str,
            'tags': Dict
        }

        self.attribute_map = {
            'arn': 'Arn',
            'creation_time': 'CreationTime',
            'http_package_configurations': 'HttpPackageConfigurations',
            'last_modified_time': 'LastModifiedTime',
            'live_source_name': 'LiveSourceName',
            'source_location_name': 'SourceLocationName',
            'tags': 'Tags'
        }

        self._arn = arn
        self._creation_time = creation_time
        self._http_package_configurations = http_package_configurations
        self._last_modified_time = last_modified_time
        self._live_source_name = live_source_name
        self._source_location_name = source_location_name
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LiveSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LiveSource of this LiveSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this LiveSource.


        :return: The arn of this LiveSource.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this LiveSource.


        :param arn: The arn of this LiveSource.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def creation_time(self):
        """Gets the creation_time of this LiveSource.


        :return: The creation_time of this LiveSource.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this LiveSource.


        :param creation_time: The creation_time of this LiveSource.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def http_package_configurations(self):
        """Gets the http_package_configurations of this LiveSource.


        :return: The http_package_configurations of this LiveSource.
        :rtype: List
        """
        return self._http_package_configurations

    @http_package_configurations.setter
    def http_package_configurations(self, http_package_configurations):
        """Sets the http_package_configurations of this LiveSource.


        :param http_package_configurations: The http_package_configurations of this LiveSource.
        :type http_package_configurations: List
        """
        if http_package_configurations is None:
            raise ValueError("Invalid value for `http_package_configurations`, must not be `None`")

        self._http_package_configurations = http_package_configurations

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this LiveSource.


        :return: The last_modified_time of this LiveSource.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this LiveSource.


        :param last_modified_time: The last_modified_time of this LiveSource.
        :type last_modified_time: datetime
        """

        self._last_modified_time = last_modified_time

    @property
    def live_source_name(self):
        """Gets the live_source_name of this LiveSource.


        :return: The live_source_name of this LiveSource.
        :rtype: str
        """
        return self._live_source_name

    @live_source_name.setter
    def live_source_name(self, live_source_name):
        """Sets the live_source_name of this LiveSource.


        :param live_source_name: The live_source_name of this LiveSource.
        :type live_source_name: str
        """
        if live_source_name is None:
            raise ValueError("Invalid value for `live_source_name`, must not be `None`")

        self._live_source_name = live_source_name

    @property
    def source_location_name(self):
        """Gets the source_location_name of this LiveSource.


        :return: The source_location_name of this LiveSource.
        :rtype: str
        """
        return self._source_location_name

    @source_location_name.setter
    def source_location_name(self, source_location_name):
        """Sets the source_location_name of this LiveSource.


        :param source_location_name: The source_location_name of this LiveSource.
        :type source_location_name: str
        """
        if source_location_name is None:
            raise ValueError("Invalid value for `source_location_name`, must not be `None`")

        self._source_location_name = source_location_name

    @property
    def tags(self):
        """Gets the tags of this LiveSource.


        :return: The tags of this LiveSource.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this LiveSource.


        :param tags: The tags of this LiveSource.
        :type tags: Dict
        """

        self._tags = tags
