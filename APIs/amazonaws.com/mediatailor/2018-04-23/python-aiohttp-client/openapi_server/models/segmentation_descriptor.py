# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SegmentationDescriptor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, segment_num: int=None, segmentation_event_id: int=None, segmentation_type_id: int=None, segmentation_upid: str=None, segmentation_upid_type: int=None, segments_expected: int=None, sub_segment_num: int=None, sub_segments_expected: int=None):
        """SegmentationDescriptor - a model defined in OpenAPI

        :param segment_num: The segment_num of this SegmentationDescriptor.
        :param segmentation_event_id: The segmentation_event_id of this SegmentationDescriptor.
        :param segmentation_type_id: The segmentation_type_id of this SegmentationDescriptor.
        :param segmentation_upid: The segmentation_upid of this SegmentationDescriptor.
        :param segmentation_upid_type: The segmentation_upid_type of this SegmentationDescriptor.
        :param segments_expected: The segments_expected of this SegmentationDescriptor.
        :param sub_segment_num: The sub_segment_num of this SegmentationDescriptor.
        :param sub_segments_expected: The sub_segments_expected of this SegmentationDescriptor.
        """
        self.openapi_types = {
            'segment_num': int,
            'segmentation_event_id': int,
            'segmentation_type_id': int,
            'segmentation_upid': str,
            'segmentation_upid_type': int,
            'segments_expected': int,
            'sub_segment_num': int,
            'sub_segments_expected': int
        }

        self.attribute_map = {
            'segment_num': 'SegmentNum',
            'segmentation_event_id': 'SegmentationEventId',
            'segmentation_type_id': 'SegmentationTypeId',
            'segmentation_upid': 'SegmentationUpid',
            'segmentation_upid_type': 'SegmentationUpidType',
            'segments_expected': 'SegmentsExpected',
            'sub_segment_num': 'SubSegmentNum',
            'sub_segments_expected': 'SubSegmentsExpected'
        }

        self._segment_num = segment_num
        self._segmentation_event_id = segmentation_event_id
        self._segmentation_type_id = segmentation_type_id
        self._segmentation_upid = segmentation_upid
        self._segmentation_upid_type = segmentation_upid_type
        self._segments_expected = segments_expected
        self._sub_segment_num = sub_segment_num
        self._sub_segments_expected = sub_segments_expected

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SegmentationDescriptor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SegmentationDescriptor of this SegmentationDescriptor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def segment_num(self):
        """Gets the segment_num of this SegmentationDescriptor.


        :return: The segment_num of this SegmentationDescriptor.
        :rtype: int
        """
        return self._segment_num

    @segment_num.setter
    def segment_num(self, segment_num):
        """Sets the segment_num of this SegmentationDescriptor.


        :param segment_num: The segment_num of this SegmentationDescriptor.
        :type segment_num: int
        """

        self._segment_num = segment_num

    @property
    def segmentation_event_id(self):
        """Gets the segmentation_event_id of this SegmentationDescriptor.


        :return: The segmentation_event_id of this SegmentationDescriptor.
        :rtype: int
        """
        return self._segmentation_event_id

    @segmentation_event_id.setter
    def segmentation_event_id(self, segmentation_event_id):
        """Sets the segmentation_event_id of this SegmentationDescriptor.


        :param segmentation_event_id: The segmentation_event_id of this SegmentationDescriptor.
        :type segmentation_event_id: int
        """

        self._segmentation_event_id = segmentation_event_id

    @property
    def segmentation_type_id(self):
        """Gets the segmentation_type_id of this SegmentationDescriptor.


        :return: The segmentation_type_id of this SegmentationDescriptor.
        :rtype: int
        """
        return self._segmentation_type_id

    @segmentation_type_id.setter
    def segmentation_type_id(self, segmentation_type_id):
        """Sets the segmentation_type_id of this SegmentationDescriptor.


        :param segmentation_type_id: The segmentation_type_id of this SegmentationDescriptor.
        :type segmentation_type_id: int
        """

        self._segmentation_type_id = segmentation_type_id

    @property
    def segmentation_upid(self):
        """Gets the segmentation_upid of this SegmentationDescriptor.


        :return: The segmentation_upid of this SegmentationDescriptor.
        :rtype: str
        """
        return self._segmentation_upid

    @segmentation_upid.setter
    def segmentation_upid(self, segmentation_upid):
        """Sets the segmentation_upid of this SegmentationDescriptor.


        :param segmentation_upid: The segmentation_upid of this SegmentationDescriptor.
        :type segmentation_upid: str
        """

        self._segmentation_upid = segmentation_upid

    @property
    def segmentation_upid_type(self):
        """Gets the segmentation_upid_type of this SegmentationDescriptor.


        :return: The segmentation_upid_type of this SegmentationDescriptor.
        :rtype: int
        """
        return self._segmentation_upid_type

    @segmentation_upid_type.setter
    def segmentation_upid_type(self, segmentation_upid_type):
        """Sets the segmentation_upid_type of this SegmentationDescriptor.


        :param segmentation_upid_type: The segmentation_upid_type of this SegmentationDescriptor.
        :type segmentation_upid_type: int
        """

        self._segmentation_upid_type = segmentation_upid_type

    @property
    def segments_expected(self):
        """Gets the segments_expected of this SegmentationDescriptor.


        :return: The segments_expected of this SegmentationDescriptor.
        :rtype: int
        """
        return self._segments_expected

    @segments_expected.setter
    def segments_expected(self, segments_expected):
        """Sets the segments_expected of this SegmentationDescriptor.


        :param segments_expected: The segments_expected of this SegmentationDescriptor.
        :type segments_expected: int
        """

        self._segments_expected = segments_expected

    @property
    def sub_segment_num(self):
        """Gets the sub_segment_num of this SegmentationDescriptor.


        :return: The sub_segment_num of this SegmentationDescriptor.
        :rtype: int
        """
        return self._sub_segment_num

    @sub_segment_num.setter
    def sub_segment_num(self, sub_segment_num):
        """Sets the sub_segment_num of this SegmentationDescriptor.


        :param sub_segment_num: The sub_segment_num of this SegmentationDescriptor.
        :type sub_segment_num: int
        """

        self._sub_segment_num = sub_segment_num

    @property
    def sub_segments_expected(self):
        """Gets the sub_segments_expected of this SegmentationDescriptor.


        :return: The sub_segments_expected of this SegmentationDescriptor.
        :rtype: int
        """
        return self._sub_segments_expected

    @sub_segments_expected.setter
    def sub_segments_expected(self, sub_segments_expected):
        """Sets the sub_segments_expected of this SegmentationDescriptor.


        :param sub_segments_expected: The sub_segments_expected of this SegmentationDescriptor.
        :type sub_segments_expected: int
        """

        self._sub_segments_expected = sub_segments_expected
