# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_prefetch_schedule_request_consumption import CreatePrefetchScheduleRequestConsumption
from openapi_server.models.create_prefetch_schedule_request_retrieval import CreatePrefetchScheduleRequestRetrieval
from openapi_server import util


class CreatePrefetchScheduleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consumption: CreatePrefetchScheduleRequestConsumption=None, retrieval: CreatePrefetchScheduleRequestRetrieval=None, stream_id: str=None):
        """CreatePrefetchScheduleRequest - a model defined in OpenAPI

        :param consumption: The consumption of this CreatePrefetchScheduleRequest.
        :param retrieval: The retrieval of this CreatePrefetchScheduleRequest.
        :param stream_id: The stream_id of this CreatePrefetchScheduleRequest.
        """
        self.openapi_types = {
            'consumption': CreatePrefetchScheduleRequestConsumption,
            'retrieval': CreatePrefetchScheduleRequestRetrieval,
            'stream_id': str
        }

        self.attribute_map = {
            'consumption': 'Consumption',
            'retrieval': 'Retrieval',
            'stream_id': 'StreamId'
        }

        self._consumption = consumption
        self._retrieval = retrieval
        self._stream_id = stream_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatePrefetchScheduleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreatePrefetchSchedule_request of this CreatePrefetchScheduleRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consumption(self):
        """Gets the consumption of this CreatePrefetchScheduleRequest.


        :return: The consumption of this CreatePrefetchScheduleRequest.
        :rtype: CreatePrefetchScheduleRequestConsumption
        """
        return self._consumption

    @consumption.setter
    def consumption(self, consumption):
        """Sets the consumption of this CreatePrefetchScheduleRequest.


        :param consumption: The consumption of this CreatePrefetchScheduleRequest.
        :type consumption: CreatePrefetchScheduleRequestConsumption
        """
        if consumption is None:
            raise ValueError("Invalid value for `consumption`, must not be `None`")

        self._consumption = consumption

    @property
    def retrieval(self):
        """Gets the retrieval of this CreatePrefetchScheduleRequest.


        :return: The retrieval of this CreatePrefetchScheduleRequest.
        :rtype: CreatePrefetchScheduleRequestRetrieval
        """
        return self._retrieval

    @retrieval.setter
    def retrieval(self, retrieval):
        """Sets the retrieval of this CreatePrefetchScheduleRequest.


        :param retrieval: The retrieval of this CreatePrefetchScheduleRequest.
        :type retrieval: CreatePrefetchScheduleRequestRetrieval
        """
        if retrieval is None:
            raise ValueError("Invalid value for `retrieval`, must not be `None`")

        self._retrieval = retrieval

    @property
    def stream_id(self):
        """Gets the stream_id of this CreatePrefetchScheduleRequest.

        An optional stream identifier that MediaTailor uses to prefetch ads for multiple streams that use the same playback configuration. If <code>StreamId</code> is specified, MediaTailor returns all of the prefetch schedules with an exact match on <code>StreamId</code>. If not specified, MediaTailor returns all of the prefetch schedules for the playback configuration, regardless of <code>StreamId</code>.

        :return: The stream_id of this CreatePrefetchScheduleRequest.
        :rtype: str
        """
        return self._stream_id

    @stream_id.setter
    def stream_id(self, stream_id):
        """Sets the stream_id of this CreatePrefetchScheduleRequest.

        An optional stream identifier that MediaTailor uses to prefetch ads for multiple streams that use the same playback configuration. If <code>StreamId</code> is specified, MediaTailor returns all of the prefetch schedules with an exact match on <code>StreamId</code>. If not specified, MediaTailor returns all of the prefetch schedules for the playback configuration, regardless of <code>StreamId</code>.

        :param stream_id: The stream_id of this CreatePrefetchScheduleRequest.
        :type stream_id: str
        """

        self._stream_id = stream_id
