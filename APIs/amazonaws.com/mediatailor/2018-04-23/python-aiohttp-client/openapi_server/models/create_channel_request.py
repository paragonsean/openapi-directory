# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.request_output_item import RequestOutputItem
from openapi_server.models.update_channel_request_filler_slate import UpdateChannelRequestFillerSlate
from openapi_server import util


class CreateChannelRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filler_slate: UpdateChannelRequestFillerSlate=None, outputs: List[RequestOutputItem]=None, playback_mode: str=None, tags: Dict[str, str]=None, tier: str=None):
        """CreateChannelRequest - a model defined in OpenAPI

        :param filler_slate: The filler_slate of this CreateChannelRequest.
        :param outputs: The outputs of this CreateChannelRequest.
        :param playback_mode: The playback_mode of this CreateChannelRequest.
        :param tags: The tags of this CreateChannelRequest.
        :param tier: The tier of this CreateChannelRequest.
        """
        self.openapi_types = {
            'filler_slate': UpdateChannelRequestFillerSlate,
            'outputs': List[RequestOutputItem],
            'playback_mode': str,
            'tags': Dict[str, str],
            'tier': str
        }

        self.attribute_map = {
            'filler_slate': 'FillerSlate',
            'outputs': 'Outputs',
            'playback_mode': 'PlaybackMode',
            'tags': 'tags',
            'tier': 'Tier'
        }

        self._filler_slate = filler_slate
        self._outputs = outputs
        self._playback_mode = playback_mode
        self._tags = tags
        self._tier = tier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateChannelRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateChannel_request of this CreateChannelRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filler_slate(self):
        """Gets the filler_slate of this CreateChannelRequest.


        :return: The filler_slate of this CreateChannelRequest.
        :rtype: UpdateChannelRequestFillerSlate
        """
        return self._filler_slate

    @filler_slate.setter
    def filler_slate(self, filler_slate):
        """Sets the filler_slate of this CreateChannelRequest.


        :param filler_slate: The filler_slate of this CreateChannelRequest.
        :type filler_slate: UpdateChannelRequestFillerSlate
        """

        self._filler_slate = filler_slate

    @property
    def outputs(self):
        """Gets the outputs of this CreateChannelRequest.

        An object that represents an object in the CreateChannel request.

        :return: The outputs of this CreateChannelRequest.
        :rtype: List[RequestOutputItem]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this CreateChannelRequest.

        An object that represents an object in the CreateChannel request.

        :param outputs: The outputs of this CreateChannelRequest.
        :type outputs: List[RequestOutputItem]
        """
        if outputs is None:
            raise ValueError("Invalid value for `outputs`, must not be `None`")

        self._outputs = outputs

    @property
    def playback_mode(self):
        """Gets the playback_mode of this CreateChannelRequest.

        <p>The type of playback mode to use for this channel.</p> <p> <code>LINEAR</code> - The programs in the schedule play once back-to-back in the schedule.</p> <p> <code>LOOP</code> - The programs in the schedule play back-to-back in an endless loop. When the last program in the schedule stops playing, playback loops back to the first program in the schedule.</p>

        :return: The playback_mode of this CreateChannelRequest.
        :rtype: str
        """
        return self._playback_mode

    @playback_mode.setter
    def playback_mode(self, playback_mode):
        """Sets the playback_mode of this CreateChannelRequest.

        <p>The type of playback mode to use for this channel.</p> <p> <code>LINEAR</code> - The programs in the schedule play once back-to-back in the schedule.</p> <p> <code>LOOP</code> - The programs in the schedule play back-to-back in an endless loop. When the last program in the schedule stops playing, playback loops back to the first program in the schedule.</p>

        :param playback_mode: The playback_mode of this CreateChannelRequest.
        :type playback_mode: str
        """
        allowed_values = ["LOOP", "LINEAR"]  # noqa: E501
        if playback_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `playback_mode` ({0}), must be one of {1}"
                .format(playback_mode, allowed_values)
            )

        self._playback_mode = playback_mode

    @property
    def tags(self):
        """Gets the tags of this CreateChannelRequest.

        The tags to assign to the channel. Tags are key-value pairs that you can associate with Amazon resources to help with organization, access control, and cost tracking. For more information, see <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/tagging.html\">Tagging AWS Elemental MediaTailor Resources</a>.

        :return: The tags of this CreateChannelRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateChannelRequest.

        The tags to assign to the channel. Tags are key-value pairs that you can associate with Amazon resources to help with organization, access control, and cost tracking. For more information, see <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/tagging.html\">Tagging AWS Elemental MediaTailor Resources</a>.

        :param tags: The tags of this CreateChannelRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags

    @property
    def tier(self):
        """Gets the tier of this CreateChannelRequest.

        The tier of the channel.

        :return: The tier of this CreateChannelRequest.
        :rtype: str
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this CreateChannelRequest.

        The tier of the channel.

        :param tier: The tier of this CreateChannelRequest.
        :type tier: str
        """
        allowed_values = ["BASIC", "STANDARD"]  # noqa: E501
        if tier not in allowed_values:
            raise ValueError(
                "Invalid value for `tier` ({0}), must be one of {1}"
                .format(tier, allowed_values)
            )

        self._tier = tier
