# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.relative_position import RelativePosition
from openapi_server import util


class CreateProgramRequestScheduleConfigurationTransition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration_millis: int=None, relative_position: RelativePosition=None, relative_program: str=None, scheduled_start_time_millis: int=None, type: str=None):
        """CreateProgramRequestScheduleConfigurationTransition - a model defined in OpenAPI

        :param duration_millis: The duration_millis of this CreateProgramRequestScheduleConfigurationTransition.
        :param relative_position: The relative_position of this CreateProgramRequestScheduleConfigurationTransition.
        :param relative_program: The relative_program of this CreateProgramRequestScheduleConfigurationTransition.
        :param scheduled_start_time_millis: The scheduled_start_time_millis of this CreateProgramRequestScheduleConfigurationTransition.
        :param type: The type of this CreateProgramRequestScheduleConfigurationTransition.
        """
        self.openapi_types = {
            'duration_millis': int,
            'relative_position': RelativePosition,
            'relative_program': str,
            'scheduled_start_time_millis': int,
            'type': str
        }

        self.attribute_map = {
            'duration_millis': 'DurationMillis',
            'relative_position': 'RelativePosition',
            'relative_program': 'RelativeProgram',
            'scheduled_start_time_millis': 'ScheduledStartTimeMillis',
            'type': 'Type'
        }

        self._duration_millis = duration_millis
        self._relative_position = relative_position
        self._relative_program = relative_program
        self._scheduled_start_time_millis = scheduled_start_time_millis
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateProgramRequestScheduleConfigurationTransition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateProgram_request_ScheduleConfiguration_Transition of this CreateProgramRequestScheduleConfigurationTransition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration_millis(self):
        """Gets the duration_millis of this CreateProgramRequestScheduleConfigurationTransition.


        :return: The duration_millis of this CreateProgramRequestScheduleConfigurationTransition.
        :rtype: int
        """
        return self._duration_millis

    @duration_millis.setter
    def duration_millis(self, duration_millis):
        """Sets the duration_millis of this CreateProgramRequestScheduleConfigurationTransition.


        :param duration_millis: The duration_millis of this CreateProgramRequestScheduleConfigurationTransition.
        :type duration_millis: int
        """

        self._duration_millis = duration_millis

    @property
    def relative_position(self):
        """Gets the relative_position of this CreateProgramRequestScheduleConfigurationTransition.


        :return: The relative_position of this CreateProgramRequestScheduleConfigurationTransition.
        :rtype: RelativePosition
        """
        return self._relative_position

    @relative_position.setter
    def relative_position(self, relative_position):
        """Sets the relative_position of this CreateProgramRequestScheduleConfigurationTransition.


        :param relative_position: The relative_position of this CreateProgramRequestScheduleConfigurationTransition.
        :type relative_position: RelativePosition
        """
        if relative_position is None:
            raise ValueError("Invalid value for `relative_position`, must not be `None`")

        self._relative_position = relative_position

    @property
    def relative_program(self):
        """Gets the relative_program of this CreateProgramRequestScheduleConfigurationTransition.


        :return: The relative_program of this CreateProgramRequestScheduleConfigurationTransition.
        :rtype: str
        """
        return self._relative_program

    @relative_program.setter
    def relative_program(self, relative_program):
        """Sets the relative_program of this CreateProgramRequestScheduleConfigurationTransition.


        :param relative_program: The relative_program of this CreateProgramRequestScheduleConfigurationTransition.
        :type relative_program: str
        """

        self._relative_program = relative_program

    @property
    def scheduled_start_time_millis(self):
        """Gets the scheduled_start_time_millis of this CreateProgramRequestScheduleConfigurationTransition.


        :return: The scheduled_start_time_millis of this CreateProgramRequestScheduleConfigurationTransition.
        :rtype: int
        """
        return self._scheduled_start_time_millis

    @scheduled_start_time_millis.setter
    def scheduled_start_time_millis(self, scheduled_start_time_millis):
        """Sets the scheduled_start_time_millis of this CreateProgramRequestScheduleConfigurationTransition.


        :param scheduled_start_time_millis: The scheduled_start_time_millis of this CreateProgramRequestScheduleConfigurationTransition.
        :type scheduled_start_time_millis: int
        """

        self._scheduled_start_time_millis = scheduled_start_time_millis

    @property
    def type(self):
        """Gets the type of this CreateProgramRequestScheduleConfigurationTransition.


        :return: The type of this CreateProgramRequestScheduleConfigurationTransition.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateProgramRequestScheduleConfigurationTransition.


        :param type: The type of this CreateProgramRequestScheduleConfigurationTransition.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
