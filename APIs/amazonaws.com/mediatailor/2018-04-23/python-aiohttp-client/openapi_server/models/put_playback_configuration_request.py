# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.put_playback_configuration_request_avail_suppression import PutPlaybackConfigurationRequestAvailSuppression
from openapi_server.models.put_playback_configuration_request_bumper import PutPlaybackConfigurationRequestBumper
from openapi_server.models.put_playback_configuration_request_cdn_configuration import PutPlaybackConfigurationRequestCdnConfiguration
from openapi_server.models.put_playback_configuration_request_dash_configuration import PutPlaybackConfigurationRequestDashConfiguration
from openapi_server.models.put_playback_configuration_request_live_pre_roll_configuration import PutPlaybackConfigurationRequestLivePreRollConfiguration
from openapi_server.models.put_playback_configuration_request_manifest_processing_rules import PutPlaybackConfigurationRequestManifestProcessingRules
from openapi_server import util


class PutPlaybackConfigurationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ad_decision_server_url: str=None, avail_suppression: PutPlaybackConfigurationRequestAvailSuppression=None, bumper: PutPlaybackConfigurationRequestBumper=None, cdn_configuration: PutPlaybackConfigurationRequestCdnConfiguration=None, configuration_aliases: Dict[str, Dict[str, str]]=None, dash_configuration: PutPlaybackConfigurationRequestDashConfiguration=None, live_pre_roll_configuration: PutPlaybackConfigurationRequestLivePreRollConfiguration=None, manifest_processing_rules: PutPlaybackConfigurationRequestManifestProcessingRules=None, name: str=None, personalization_threshold_seconds: int=None, slate_ad_url: str=None, tags: Dict[str, str]=None, transcode_profile_name: str=None, video_content_source_url: str=None):
        """PutPlaybackConfigurationRequest - a model defined in OpenAPI

        :param ad_decision_server_url: The ad_decision_server_url of this PutPlaybackConfigurationRequest.
        :param avail_suppression: The avail_suppression of this PutPlaybackConfigurationRequest.
        :param bumper: The bumper of this PutPlaybackConfigurationRequest.
        :param cdn_configuration: The cdn_configuration of this PutPlaybackConfigurationRequest.
        :param configuration_aliases: The configuration_aliases of this PutPlaybackConfigurationRequest.
        :param dash_configuration: The dash_configuration of this PutPlaybackConfigurationRequest.
        :param live_pre_roll_configuration: The live_pre_roll_configuration of this PutPlaybackConfigurationRequest.
        :param manifest_processing_rules: The manifest_processing_rules of this PutPlaybackConfigurationRequest.
        :param name: The name of this PutPlaybackConfigurationRequest.
        :param personalization_threshold_seconds: The personalization_threshold_seconds of this PutPlaybackConfigurationRequest.
        :param slate_ad_url: The slate_ad_url of this PutPlaybackConfigurationRequest.
        :param tags: The tags of this PutPlaybackConfigurationRequest.
        :param transcode_profile_name: The transcode_profile_name of this PutPlaybackConfigurationRequest.
        :param video_content_source_url: The video_content_source_url of this PutPlaybackConfigurationRequest.
        """
        self.openapi_types = {
            'ad_decision_server_url': str,
            'avail_suppression': PutPlaybackConfigurationRequestAvailSuppression,
            'bumper': PutPlaybackConfigurationRequestBumper,
            'cdn_configuration': PutPlaybackConfigurationRequestCdnConfiguration,
            'configuration_aliases': Dict[str, Dict[str, str]],
            'dash_configuration': PutPlaybackConfigurationRequestDashConfiguration,
            'live_pre_roll_configuration': PutPlaybackConfigurationRequestLivePreRollConfiguration,
            'manifest_processing_rules': PutPlaybackConfigurationRequestManifestProcessingRules,
            'name': str,
            'personalization_threshold_seconds': int,
            'slate_ad_url': str,
            'tags': Dict[str, str],
            'transcode_profile_name': str,
            'video_content_source_url': str
        }

        self.attribute_map = {
            'ad_decision_server_url': 'AdDecisionServerUrl',
            'avail_suppression': 'AvailSuppression',
            'bumper': 'Bumper',
            'cdn_configuration': 'CdnConfiguration',
            'configuration_aliases': 'ConfigurationAliases',
            'dash_configuration': 'DashConfiguration',
            'live_pre_roll_configuration': 'LivePreRollConfiguration',
            'manifest_processing_rules': 'ManifestProcessingRules',
            'name': 'Name',
            'personalization_threshold_seconds': 'PersonalizationThresholdSeconds',
            'slate_ad_url': 'SlateAdUrl',
            'tags': 'tags',
            'transcode_profile_name': 'TranscodeProfileName',
            'video_content_source_url': 'VideoContentSourceUrl'
        }

        self._ad_decision_server_url = ad_decision_server_url
        self._avail_suppression = avail_suppression
        self._bumper = bumper
        self._cdn_configuration = cdn_configuration
        self._configuration_aliases = configuration_aliases
        self._dash_configuration = dash_configuration
        self._live_pre_roll_configuration = live_pre_roll_configuration
        self._manifest_processing_rules = manifest_processing_rules
        self._name = name
        self._personalization_threshold_seconds = personalization_threshold_seconds
        self._slate_ad_url = slate_ad_url
        self._tags = tags
        self._transcode_profile_name = transcode_profile_name
        self._video_content_source_url = video_content_source_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutPlaybackConfigurationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutPlaybackConfiguration_request of this PutPlaybackConfigurationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ad_decision_server_url(self):
        """Gets the ad_decision_server_url of this PutPlaybackConfigurationRequest.

        The URL for the ad decision server (ADS). This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing you can provide a static VAST URL. The maximum length is 25,000 characters.

        :return: The ad_decision_server_url of this PutPlaybackConfigurationRequest.
        :rtype: str
        """
        return self._ad_decision_server_url

    @ad_decision_server_url.setter
    def ad_decision_server_url(self, ad_decision_server_url):
        """Sets the ad_decision_server_url of this PutPlaybackConfigurationRequest.

        The URL for the ad decision server (ADS). This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing you can provide a static VAST URL. The maximum length is 25,000 characters.

        :param ad_decision_server_url: The ad_decision_server_url of this PutPlaybackConfigurationRequest.
        :type ad_decision_server_url: str
        """

        self._ad_decision_server_url = ad_decision_server_url

    @property
    def avail_suppression(self):
        """Gets the avail_suppression of this PutPlaybackConfigurationRequest.


        :return: The avail_suppression of this PutPlaybackConfigurationRequest.
        :rtype: PutPlaybackConfigurationRequestAvailSuppression
        """
        return self._avail_suppression

    @avail_suppression.setter
    def avail_suppression(self, avail_suppression):
        """Sets the avail_suppression of this PutPlaybackConfigurationRequest.


        :param avail_suppression: The avail_suppression of this PutPlaybackConfigurationRequest.
        :type avail_suppression: PutPlaybackConfigurationRequestAvailSuppression
        """

        self._avail_suppression = avail_suppression

    @property
    def bumper(self):
        """Gets the bumper of this PutPlaybackConfigurationRequest.


        :return: The bumper of this PutPlaybackConfigurationRequest.
        :rtype: PutPlaybackConfigurationRequestBumper
        """
        return self._bumper

    @bumper.setter
    def bumper(self, bumper):
        """Sets the bumper of this PutPlaybackConfigurationRequest.


        :param bumper: The bumper of this PutPlaybackConfigurationRequest.
        :type bumper: PutPlaybackConfigurationRequestBumper
        """

        self._bumper = bumper

    @property
    def cdn_configuration(self):
        """Gets the cdn_configuration of this PutPlaybackConfigurationRequest.


        :return: The cdn_configuration of this PutPlaybackConfigurationRequest.
        :rtype: PutPlaybackConfigurationRequestCdnConfiguration
        """
        return self._cdn_configuration

    @cdn_configuration.setter
    def cdn_configuration(self, cdn_configuration):
        """Sets the cdn_configuration of this PutPlaybackConfigurationRequest.


        :param cdn_configuration: The cdn_configuration of this PutPlaybackConfigurationRequest.
        :type cdn_configuration: PutPlaybackConfigurationRequestCdnConfiguration
        """

        self._cdn_configuration = cdn_configuration

    @property
    def configuration_aliases(self):
        """Gets the configuration_aliases of this PutPlaybackConfigurationRequest.

        The predefined aliases for dynamic variables.

        :return: The configuration_aliases of this PutPlaybackConfigurationRequest.
        :rtype: Dict[str, Dict[str, str]]
        """
        return self._configuration_aliases

    @configuration_aliases.setter
    def configuration_aliases(self, configuration_aliases):
        """Sets the configuration_aliases of this PutPlaybackConfigurationRequest.

        The predefined aliases for dynamic variables.

        :param configuration_aliases: The configuration_aliases of this PutPlaybackConfigurationRequest.
        :type configuration_aliases: Dict[str, Dict[str, str]]
        """

        self._configuration_aliases = configuration_aliases

    @property
    def dash_configuration(self):
        """Gets the dash_configuration of this PutPlaybackConfigurationRequest.


        :return: The dash_configuration of this PutPlaybackConfigurationRequest.
        :rtype: PutPlaybackConfigurationRequestDashConfiguration
        """
        return self._dash_configuration

    @dash_configuration.setter
    def dash_configuration(self, dash_configuration):
        """Sets the dash_configuration of this PutPlaybackConfigurationRequest.


        :param dash_configuration: The dash_configuration of this PutPlaybackConfigurationRequest.
        :type dash_configuration: PutPlaybackConfigurationRequestDashConfiguration
        """

        self._dash_configuration = dash_configuration

    @property
    def live_pre_roll_configuration(self):
        """Gets the live_pre_roll_configuration of this PutPlaybackConfigurationRequest.


        :return: The live_pre_roll_configuration of this PutPlaybackConfigurationRequest.
        :rtype: PutPlaybackConfigurationRequestLivePreRollConfiguration
        """
        return self._live_pre_roll_configuration

    @live_pre_roll_configuration.setter
    def live_pre_roll_configuration(self, live_pre_roll_configuration):
        """Sets the live_pre_roll_configuration of this PutPlaybackConfigurationRequest.


        :param live_pre_roll_configuration: The live_pre_roll_configuration of this PutPlaybackConfigurationRequest.
        :type live_pre_roll_configuration: PutPlaybackConfigurationRequestLivePreRollConfiguration
        """

        self._live_pre_roll_configuration = live_pre_roll_configuration

    @property
    def manifest_processing_rules(self):
        """Gets the manifest_processing_rules of this PutPlaybackConfigurationRequest.


        :return: The manifest_processing_rules of this PutPlaybackConfigurationRequest.
        :rtype: PutPlaybackConfigurationRequestManifestProcessingRules
        """
        return self._manifest_processing_rules

    @manifest_processing_rules.setter
    def manifest_processing_rules(self, manifest_processing_rules):
        """Sets the manifest_processing_rules of this PutPlaybackConfigurationRequest.


        :param manifest_processing_rules: The manifest_processing_rules of this PutPlaybackConfigurationRequest.
        :type manifest_processing_rules: PutPlaybackConfigurationRequestManifestProcessingRules
        """

        self._manifest_processing_rules = manifest_processing_rules

    @property
    def name(self):
        """Gets the name of this PutPlaybackConfigurationRequest.

        The identifier for the playback configuration.

        :return: The name of this PutPlaybackConfigurationRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PutPlaybackConfigurationRequest.

        The identifier for the playback configuration.

        :param name: The name of this PutPlaybackConfigurationRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def personalization_threshold_seconds(self):
        """Gets the personalization_threshold_seconds of this PutPlaybackConfigurationRequest.

        Defines the maximum duration of underfilled ad time (in seconds) allowed in an ad break. If the duration of underfilled ad time exceeds the personalization threshold, then the personalization of the ad break is abandoned and the underlying content is shown. This feature applies to <i>ad replacement</i> in live and VOD streams, rather than ad insertion, because it relies on an underlying content stream. For more information about ad break behavior, including ad replacement and insertion, see <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html\">Ad Behavior in AWS Elemental MediaTailor</a>.

        :return: The personalization_threshold_seconds of this PutPlaybackConfigurationRequest.
        :rtype: int
        """
        return self._personalization_threshold_seconds

    @personalization_threshold_seconds.setter
    def personalization_threshold_seconds(self, personalization_threshold_seconds):
        """Sets the personalization_threshold_seconds of this PutPlaybackConfigurationRequest.

        Defines the maximum duration of underfilled ad time (in seconds) allowed in an ad break. If the duration of underfilled ad time exceeds the personalization threshold, then the personalization of the ad break is abandoned and the underlying content is shown. This feature applies to <i>ad replacement</i> in live and VOD streams, rather than ad insertion, because it relies on an underlying content stream. For more information about ad break behavior, including ad replacement and insertion, see <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html\">Ad Behavior in AWS Elemental MediaTailor</a>.

        :param personalization_threshold_seconds: The personalization_threshold_seconds of this PutPlaybackConfigurationRequest.
        :type personalization_threshold_seconds: int
        """
        if personalization_threshold_seconds is not None and personalization_threshold_seconds < 1:
            raise ValueError("Invalid value for `personalization_threshold_seconds`, must be a value greater than or equal to `1`")

        self._personalization_threshold_seconds = personalization_threshold_seconds

    @property
    def slate_ad_url(self):
        """Gets the slate_ad_url of this PutPlaybackConfigurationRequest.

        The URL for a high-quality video asset to transcode and use to fill in time that's not used by ads. AWS Elemental MediaTailor shows the slate to fill in gaps in media content. Configuring the slate is optional for non-VPAID configurations. For VPAID, the slate is required because MediaTailor provides it in the slots that are designated for dynamic ad content. The slate must be a high-quality asset that contains both audio and video.

        :return: The slate_ad_url of this PutPlaybackConfigurationRequest.
        :rtype: str
        """
        return self._slate_ad_url

    @slate_ad_url.setter
    def slate_ad_url(self, slate_ad_url):
        """Sets the slate_ad_url of this PutPlaybackConfigurationRequest.

        The URL for a high-quality video asset to transcode and use to fill in time that's not used by ads. AWS Elemental MediaTailor shows the slate to fill in gaps in media content. Configuring the slate is optional for non-VPAID configurations. For VPAID, the slate is required because MediaTailor provides it in the slots that are designated for dynamic ad content. The slate must be a high-quality asset that contains both audio and video.

        :param slate_ad_url: The slate_ad_url of this PutPlaybackConfigurationRequest.
        :type slate_ad_url: str
        """

        self._slate_ad_url = slate_ad_url

    @property
    def tags(self):
        """Gets the tags of this PutPlaybackConfigurationRequest.

        The tags to assign to the playback configuration. Tags are key-value pairs that you can associate with Amazon resources to help with organization, access control, and cost tracking. For more information, see <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/tagging.html\">Tagging AWS Elemental MediaTailor Resources</a>.

        :return: The tags of this PutPlaybackConfigurationRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PutPlaybackConfigurationRequest.

        The tags to assign to the playback configuration. Tags are key-value pairs that you can associate with Amazon resources to help with organization, access control, and cost tracking. For more information, see <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/tagging.html\">Tagging AWS Elemental MediaTailor Resources</a>.

        :param tags: The tags of this PutPlaybackConfigurationRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags

    @property
    def transcode_profile_name(self):
        """Gets the transcode_profile_name of this PutPlaybackConfigurationRequest.

        The name that is used to associate this playback configuration with a custom transcode profile. This overrides the dynamic transcoding defaults of MediaTailor. Use this only if you have already set up custom profiles with the help of AWS Support.

        :return: The transcode_profile_name of this PutPlaybackConfigurationRequest.
        :rtype: str
        """
        return self._transcode_profile_name

    @transcode_profile_name.setter
    def transcode_profile_name(self, transcode_profile_name):
        """Sets the transcode_profile_name of this PutPlaybackConfigurationRequest.

        The name that is used to associate this playback configuration with a custom transcode profile. This overrides the dynamic transcoding defaults of MediaTailor. Use this only if you have already set up custom profiles with the help of AWS Support.

        :param transcode_profile_name: The transcode_profile_name of this PutPlaybackConfigurationRequest.
        :type transcode_profile_name: str
        """

        self._transcode_profile_name = transcode_profile_name

    @property
    def video_content_source_url(self):
        """Gets the video_content_source_url of this PutPlaybackConfigurationRequest.

        The URL prefix for the parent manifest for the stream, minus the asset ID. The maximum length is 512 characters.

        :return: The video_content_source_url of this PutPlaybackConfigurationRequest.
        :rtype: str
        """
        return self._video_content_source_url

    @video_content_source_url.setter
    def video_content_source_url(self, video_content_source_url):
        """Sets the video_content_source_url of this PutPlaybackConfigurationRequest.

        The URL prefix for the parent manifest for the stream, minus the asset ID. The maximum length is 512 characters.

        :param video_content_source_url: The video_content_source_url of this PutPlaybackConfigurationRequest.
        :type video_content_source_url: str
        """

        self._video_content_source_url = video_content_source_url
