# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.log_type import LogType
from openapi_server import util


class ConfigureLogsForChannelRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_name: str=None, log_types: List[LogType]=None):
        """ConfigureLogsForChannelRequest - a model defined in OpenAPI

        :param channel_name: The channel_name of this ConfigureLogsForChannelRequest.
        :param log_types: The log_types of this ConfigureLogsForChannelRequest.
        """
        self.openapi_types = {
            'channel_name': str,
            'log_types': List[LogType]
        }

        self.attribute_map = {
            'channel_name': 'ChannelName',
            'log_types': 'LogTypes'
        }

        self._channel_name = channel_name
        self._log_types = log_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigureLogsForChannelRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigureLogsForChannel_request of this ConfigureLogsForChannelRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_name(self):
        """Gets the channel_name of this ConfigureLogsForChannelRequest.

        The name of the channel.

        :return: The channel_name of this ConfigureLogsForChannelRequest.
        :rtype: str
        """
        return self._channel_name

    @channel_name.setter
    def channel_name(self, channel_name):
        """Sets the channel_name of this ConfigureLogsForChannelRequest.

        The name of the channel.

        :param channel_name: The channel_name of this ConfigureLogsForChannelRequest.
        :type channel_name: str
        """
        if channel_name is None:
            raise ValueError("Invalid value for `channel_name`, must not be `None`")

        self._channel_name = channel_name

    @property
    def log_types(self):
        """Gets the log_types of this ConfigureLogsForChannelRequest.

        The types of logs to collect.

        :return: The log_types of this ConfigureLogsForChannelRequest.
        :rtype: List[LogType]
        """
        return self._log_types

    @log_types.setter
    def log_types(self, log_types):
        """Sets the log_types of this ConfigureLogsForChannelRequest.

        The types of logs to collect.

        :param log_types: The log_types of this ConfigureLogsForChannelRequest.
        :type log_types: List[LogType]
        """
        if log_types is None:
            raise ValueError("Invalid value for `log_types`, must not be `None`")

        self._log_types = log_types
