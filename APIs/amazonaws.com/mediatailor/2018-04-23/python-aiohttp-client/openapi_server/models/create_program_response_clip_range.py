# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateProgramResponseClipRange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_offset_millis: int=None):
        """CreateProgramResponseClipRange - a model defined in OpenAPI

        :param end_offset_millis: The end_offset_millis of this CreateProgramResponseClipRange.
        """
        self.openapi_types = {
            'end_offset_millis': int
        }

        self.attribute_map = {
            'end_offset_millis': 'EndOffsetMillis'
        }

        self._end_offset_millis = end_offset_millis

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateProgramResponseClipRange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateProgramResponse_ClipRange of this CreateProgramResponseClipRange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_offset_millis(self):
        """Gets the end_offset_millis of this CreateProgramResponseClipRange.


        :return: The end_offset_millis of this CreateProgramResponseClipRange.
        :rtype: int
        """
        return self._end_offset_millis

    @end_offset_millis.setter
    def end_offset_millis(self, end_offset_millis):
        """Sets the end_offset_millis of this CreateProgramResponseClipRange.


        :param end_offset_millis: The end_offset_millis of this CreateProgramResponseClipRange.
        :type end_offset_millis: int
        """
        if end_offset_millis is None:
            raise ValueError("Invalid value for `end_offset_millis`, must not be `None`")

        self._end_offset_millis = end_offset_millis
