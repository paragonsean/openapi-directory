# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.type import Type
from openapi_server import util


class HttpPackageConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, path: str=None, source_group: str=None, type: Type=None):
        """HttpPackageConfiguration - a model defined in OpenAPI

        :param path: The path of this HttpPackageConfiguration.
        :param source_group: The source_group of this HttpPackageConfiguration.
        :param type: The type of this HttpPackageConfiguration.
        """
        self.openapi_types = {
            'path': str,
            'source_group': str,
            'type': Type
        }

        self.attribute_map = {
            'path': 'Path',
            'source_group': 'SourceGroup',
            'type': 'Type'
        }

        self._path = path
        self._source_group = source_group
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HttpPackageConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HttpPackageConfiguration of this HttpPackageConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def path(self):
        """Gets the path of this HttpPackageConfiguration.


        :return: The path of this HttpPackageConfiguration.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this HttpPackageConfiguration.


        :param path: The path of this HttpPackageConfiguration.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def source_group(self):
        """Gets the source_group of this HttpPackageConfiguration.


        :return: The source_group of this HttpPackageConfiguration.
        :rtype: str
        """
        return self._source_group

    @source_group.setter
    def source_group(self, source_group):
        """Sets the source_group of this HttpPackageConfiguration.


        :param source_group: The source_group of this HttpPackageConfiguration.
        :type source_group: str
        """
        if source_group is None:
            raise ValueError("Invalid value for `source_group`, must not be `None`")

        self._source_group = source_group

    @property
    def type(self):
        """Gets the type of this HttpPackageConfiguration.


        :return: The type of this HttpPackageConfiguration.
        :rtype: Type
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HttpPackageConfiguration.


        :param type: The type of this HttpPackageConfiguration.
        :type type: Type
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
