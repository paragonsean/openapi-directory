/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsMediaTailor);
  }
}(this, function(expect, AwsMediaTailor) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsMediaTailor.PutPlaybackConfigurationRequestBumper();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PutPlaybackConfigurationRequestBumper', function() {
    it('should create an instance of PutPlaybackConfigurationRequestBumper', function() {
      // uncomment below and update the code to test PutPlaybackConfigurationRequestBumper
      //var instance = new AwsMediaTailor.PutPlaybackConfigurationRequestBumper();
      //expect(instance).to.be.a(AwsMediaTailor.PutPlaybackConfigurationRequestBumper);
    });

    it('should have the property endUrl (base name: "EndUrl")', function() {
      // uncomment below and update the code to test the property endUrl
      //var instance = new AwsMediaTailor.PutPlaybackConfigurationRequestBumper();
      //expect(instance).to.be();
    });

    it('should have the property startUrl (base name: "StartUrl")', function() {
      // uncomment below and update the code to test the property startUrl
      //var instance = new AwsMediaTailor.PutPlaybackConfigurationRequestBumper();
      //expect(instance).to.be();
    });

  });

}));
