/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsMediaTailor);
  }
}(this, function(expect, AwsMediaTailor) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsMediaTailor.GetPlaybackConfigurationResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetPlaybackConfigurationResponse', function() {
    it('should create an instance of GetPlaybackConfigurationResponse', function() {
      // uncomment below and update the code to test GetPlaybackConfigurationResponse
      //var instance = new AwsMediaTailor.GetPlaybackConfigurationResponse();
      //expect(instance).to.be.a(AwsMediaTailor.GetPlaybackConfigurationResponse);
    });

    it('should have the property adDecisionServerUrl (base name: "AdDecisionServerUrl")', function() {
      // uncomment below and update the code to test the property adDecisionServerUrl
      //var instance = new AwsMediaTailor.GetPlaybackConfigurationResponse();
      //expect(instance).to.be();
    });

    it('should have the property availSuppression (base name: "AvailSuppression")', function() {
      // uncomment below and update the code to test the property availSuppression
      //var instance = new AwsMediaTailor.GetPlaybackConfigurationResponse();
      //expect(instance).to.be();
    });

    it('should have the property bumper (base name: "Bumper")', function() {
      // uncomment below and update the code to test the property bumper
      //var instance = new AwsMediaTailor.GetPlaybackConfigurationResponse();
      //expect(instance).to.be();
    });

    it('should have the property cdnConfiguration (base name: "CdnConfiguration")', function() {
      // uncomment below and update the code to test the property cdnConfiguration
      //var instance = new AwsMediaTailor.GetPlaybackConfigurationResponse();
      //expect(instance).to.be();
    });

    it('should have the property configurationAliases (base name: "ConfigurationAliases")', function() {
      // uncomment below and update the code to test the property configurationAliases
      //var instance = new AwsMediaTailor.GetPlaybackConfigurationResponse();
      //expect(instance).to.be();
    });

    it('should have the property dashConfiguration (base name: "DashConfiguration")', function() {
      // uncomment below and update the code to test the property dashConfiguration
      //var instance = new AwsMediaTailor.GetPlaybackConfigurationResponse();
      //expect(instance).to.be();
    });

    it('should have the property hlsConfiguration (base name: "HlsConfiguration")', function() {
      // uncomment below and update the code to test the property hlsConfiguration
      //var instance = new AwsMediaTailor.GetPlaybackConfigurationResponse();
      //expect(instance).to.be();
    });

    it('should have the property livePreRollConfiguration (base name: "LivePreRollConfiguration")', function() {
      // uncomment below and update the code to test the property livePreRollConfiguration
      //var instance = new AwsMediaTailor.GetPlaybackConfigurationResponse();
      //expect(instance).to.be();
    });

    it('should have the property logConfiguration (base name: "LogConfiguration")', function() {
      // uncomment below and update the code to test the property logConfiguration
      //var instance = new AwsMediaTailor.GetPlaybackConfigurationResponse();
      //expect(instance).to.be();
    });

    it('should have the property manifestProcessingRules (base name: "ManifestProcessingRules")', function() {
      // uncomment below and update the code to test the property manifestProcessingRules
      //var instance = new AwsMediaTailor.GetPlaybackConfigurationResponse();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "Name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new AwsMediaTailor.GetPlaybackConfigurationResponse();
      //expect(instance).to.be();
    });

    it('should have the property personalizationThresholdSeconds (base name: "PersonalizationThresholdSeconds")', function() {
      // uncomment below and update the code to test the property personalizationThresholdSeconds
      //var instance = new AwsMediaTailor.GetPlaybackConfigurationResponse();
      //expect(instance).to.be();
    });

    it('should have the property playbackConfigurationArn (base name: "PlaybackConfigurationArn")', function() {
      // uncomment below and update the code to test the property playbackConfigurationArn
      //var instance = new AwsMediaTailor.GetPlaybackConfigurationResponse();
      //expect(instance).to.be();
    });

    it('should have the property playbackEndpointPrefix (base name: "PlaybackEndpointPrefix")', function() {
      // uncomment below and update the code to test the property playbackEndpointPrefix
      //var instance = new AwsMediaTailor.GetPlaybackConfigurationResponse();
      //expect(instance).to.be();
    });

    it('should have the property sessionInitializationEndpointPrefix (base name: "SessionInitializationEndpointPrefix")', function() {
      // uncomment below and update the code to test the property sessionInitializationEndpointPrefix
      //var instance = new AwsMediaTailor.GetPlaybackConfigurationResponse();
      //expect(instance).to.be();
    });

    it('should have the property slateAdUrl (base name: "SlateAdUrl")', function() {
      // uncomment below and update the code to test the property slateAdUrl
      //var instance = new AwsMediaTailor.GetPlaybackConfigurationResponse();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "Tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new AwsMediaTailor.GetPlaybackConfigurationResponse();
      //expect(instance).to.be();
    });

    it('should have the property transcodeProfileName (base name: "TranscodeProfileName")', function() {
      // uncomment below and update the code to test the property transcodeProfileName
      //var instance = new AwsMediaTailor.GetPlaybackConfigurationResponse();
      //expect(instance).to.be();
    });

    it('should have the property videoContentSourceUrl (base name: "VideoContentSourceUrl")', function() {
      // uncomment below and update the code to test the property videoContentSourceUrl
      //var instance = new AwsMediaTailor.GetPlaybackConfigurationResponse();
      //expect(instance).to.be();
    });

  });

}));
