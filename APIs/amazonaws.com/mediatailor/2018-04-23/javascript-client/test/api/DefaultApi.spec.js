/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsMediaTailor);
  }
}(this, function(expect, AwsMediaTailor) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsMediaTailor.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('configureLogsForChannel', function() {
      it('should call configureLogsForChannel successfully', function(done) {
        //uncomment below and update the code to test configureLogsForChannel
        //instance.configureLogsForChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('configureLogsForPlaybackConfiguration', function() {
      it('should call configureLogsForPlaybackConfiguration successfully', function(done) {
        //uncomment below and update the code to test configureLogsForPlaybackConfiguration
        //instance.configureLogsForPlaybackConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createChannel', function() {
      it('should call createChannel successfully', function(done) {
        //uncomment below and update the code to test createChannel
        //instance.createChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createLiveSource', function() {
      it('should call createLiveSource successfully', function(done) {
        //uncomment below and update the code to test createLiveSource
        //instance.createLiveSource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPrefetchSchedule', function() {
      it('should call createPrefetchSchedule successfully', function(done) {
        //uncomment below and update the code to test createPrefetchSchedule
        //instance.createPrefetchSchedule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createProgram', function() {
      it('should call createProgram successfully', function(done) {
        //uncomment below and update the code to test createProgram
        //instance.createProgram(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSourceLocation', function() {
      it('should call createSourceLocation successfully', function(done) {
        //uncomment below and update the code to test createSourceLocation
        //instance.createSourceLocation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createVodSource', function() {
      it('should call createVodSource successfully', function(done) {
        //uncomment below and update the code to test createVodSource
        //instance.createVodSource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteChannel', function() {
      it('should call deleteChannel successfully', function(done) {
        //uncomment below and update the code to test deleteChannel
        //instance.deleteChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteChannelPolicy', function() {
      it('should call deleteChannelPolicy successfully', function(done) {
        //uncomment below and update the code to test deleteChannelPolicy
        //instance.deleteChannelPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteLiveSource', function() {
      it('should call deleteLiveSource successfully', function(done) {
        //uncomment below and update the code to test deleteLiveSource
        //instance.deleteLiveSource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePlaybackConfiguration', function() {
      it('should call deletePlaybackConfiguration successfully', function(done) {
        //uncomment below and update the code to test deletePlaybackConfiguration
        //instance.deletePlaybackConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePrefetchSchedule', function() {
      it('should call deletePrefetchSchedule successfully', function(done) {
        //uncomment below and update the code to test deletePrefetchSchedule
        //instance.deletePrefetchSchedule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteProgram', function() {
      it('should call deleteProgram successfully', function(done) {
        //uncomment below and update the code to test deleteProgram
        //instance.deleteProgram(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSourceLocation', function() {
      it('should call deleteSourceLocation successfully', function(done) {
        //uncomment below and update the code to test deleteSourceLocation
        //instance.deleteSourceLocation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVodSource', function() {
      it('should call deleteVodSource successfully', function(done) {
        //uncomment below and update the code to test deleteVodSource
        //instance.deleteVodSource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeChannel', function() {
      it('should call describeChannel successfully', function(done) {
        //uncomment below and update the code to test describeChannel
        //instance.describeChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeLiveSource', function() {
      it('should call describeLiveSource successfully', function(done) {
        //uncomment below and update the code to test describeLiveSource
        //instance.describeLiveSource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeProgram', function() {
      it('should call describeProgram successfully', function(done) {
        //uncomment below and update the code to test describeProgram
        //instance.describeProgram(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeSourceLocation', function() {
      it('should call describeSourceLocation successfully', function(done) {
        //uncomment below and update the code to test describeSourceLocation
        //instance.describeSourceLocation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeVodSource', function() {
      it('should call describeVodSource successfully', function(done) {
        //uncomment below and update the code to test describeVodSource
        //instance.describeVodSource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getChannelPolicy', function() {
      it('should call getChannelPolicy successfully', function(done) {
        //uncomment below and update the code to test getChannelPolicy
        //instance.getChannelPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getChannelSchedule', function() {
      it('should call getChannelSchedule successfully', function(done) {
        //uncomment below and update the code to test getChannelSchedule
        //instance.getChannelSchedule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPlaybackConfiguration', function() {
      it('should call getPlaybackConfiguration successfully', function(done) {
        //uncomment below and update the code to test getPlaybackConfiguration
        //instance.getPlaybackConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPrefetchSchedule', function() {
      it('should call getPrefetchSchedule successfully', function(done) {
        //uncomment below and update the code to test getPrefetchSchedule
        //instance.getPrefetchSchedule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAlerts', function() {
      it('should call listAlerts successfully', function(done) {
        //uncomment below and update the code to test listAlerts
        //instance.listAlerts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listChannels', function() {
      it('should call listChannels successfully', function(done) {
        //uncomment below and update the code to test listChannels
        //instance.listChannels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listLiveSources', function() {
      it('should call listLiveSources successfully', function(done) {
        //uncomment below and update the code to test listLiveSources
        //instance.listLiveSources(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPlaybackConfigurations', function() {
      it('should call listPlaybackConfigurations successfully', function(done) {
        //uncomment below and update the code to test listPlaybackConfigurations
        //instance.listPlaybackConfigurations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPrefetchSchedules', function() {
      it('should call listPrefetchSchedules successfully', function(done) {
        //uncomment below and update the code to test listPrefetchSchedules
        //instance.listPrefetchSchedules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSourceLocations', function() {
      it('should call listSourceLocations successfully', function(done) {
        //uncomment below and update the code to test listSourceLocations
        //instance.listSourceLocations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listVodSources', function() {
      it('should call listVodSources successfully', function(done) {
        //uncomment below and update the code to test listVodSources
        //instance.listVodSources(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putChannelPolicy', function() {
      it('should call putChannelPolicy successfully', function(done) {
        //uncomment below and update the code to test putChannelPolicy
        //instance.putChannelPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putPlaybackConfiguration', function() {
      it('should call putPlaybackConfiguration successfully', function(done) {
        //uncomment below and update the code to test putPlaybackConfiguration
        //instance.putPlaybackConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startChannel', function() {
      it('should call startChannel successfully', function(done) {
        //uncomment below and update the code to test startChannel
        //instance.startChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopChannel', function() {
      it('should call stopChannel successfully', function(done) {
        //uncomment below and update the code to test stopChannel
        //instance.stopChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateChannel', function() {
      it('should call updateChannel successfully', function(done) {
        //uncomment below and update the code to test updateChannel
        //instance.updateChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateLiveSource', function() {
      it('should call updateLiveSource successfully', function(done) {
        //uncomment below and update the code to test updateLiveSource
        //instance.updateLiveSource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateProgram', function() {
      it('should call updateProgram successfully', function(done) {
        //uncomment below and update the code to test updateProgram
        //instance.updateProgram(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSourceLocation', function() {
      it('should call updateSourceLocation successfully', function(done) {
        //uncomment below and update the code to test updateSourceLocation
        //instance.updateSourceLocation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateVodSource', function() {
      it('should call updateVodSource successfully', function(done) {
        //uncomment below and update the code to test updateVodSource
        //instance.updateVodSource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
