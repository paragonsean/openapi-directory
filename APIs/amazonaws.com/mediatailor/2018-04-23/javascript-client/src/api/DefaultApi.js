/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConfigureLogsForChannelRequest from '../model/ConfigureLogsForChannelRequest';
import ConfigureLogsForChannelResponse from '../model/ConfigureLogsForChannelResponse';
import ConfigureLogsForPlaybackConfigurationRequest from '../model/ConfigureLogsForPlaybackConfigurationRequest';
import ConfigureLogsForPlaybackConfigurationResponse from '../model/ConfigureLogsForPlaybackConfigurationResponse';
import CreateChannelRequest from '../model/CreateChannelRequest';
import CreateChannelResponse from '../model/CreateChannelResponse';
import CreateLiveSourceRequest from '../model/CreateLiveSourceRequest';
import CreateLiveSourceResponse from '../model/CreateLiveSourceResponse';
import CreatePrefetchScheduleRequest from '../model/CreatePrefetchScheduleRequest';
import CreatePrefetchScheduleResponse from '../model/CreatePrefetchScheduleResponse';
import CreateProgramRequest from '../model/CreateProgramRequest';
import CreateProgramResponse from '../model/CreateProgramResponse';
import CreateSourceLocationRequest from '../model/CreateSourceLocationRequest';
import CreateSourceLocationResponse from '../model/CreateSourceLocationResponse';
import CreateVodSourceRequest from '../model/CreateVodSourceRequest';
import CreateVodSourceResponse from '../model/CreateVodSourceResponse';
import DescribeChannelResponse from '../model/DescribeChannelResponse';
import DescribeLiveSourceResponse from '../model/DescribeLiveSourceResponse';
import DescribeProgramResponse from '../model/DescribeProgramResponse';
import DescribeSourceLocationResponse from '../model/DescribeSourceLocationResponse';
import DescribeVodSourceResponse from '../model/DescribeVodSourceResponse';
import GetChannelPolicyResponse from '../model/GetChannelPolicyResponse';
import GetChannelScheduleResponse from '../model/GetChannelScheduleResponse';
import GetPlaybackConfigurationResponse from '../model/GetPlaybackConfigurationResponse';
import GetPrefetchScheduleResponse from '../model/GetPrefetchScheduleResponse';
import ListAlertsResponse from '../model/ListAlertsResponse';
import ListChannelsResponse from '../model/ListChannelsResponse';
import ListLiveSourcesResponse from '../model/ListLiveSourcesResponse';
import ListPlaybackConfigurationsResponse from '../model/ListPlaybackConfigurationsResponse';
import ListPrefetchSchedulesRequest from '../model/ListPrefetchSchedulesRequest';
import ListPrefetchSchedulesResponse from '../model/ListPrefetchSchedulesResponse';
import ListSourceLocationsResponse from '../model/ListSourceLocationsResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import ListVodSourcesResponse from '../model/ListVodSourcesResponse';
import PutChannelPolicyRequest from '../model/PutChannelPolicyRequest';
import PutPlaybackConfigurationRequest from '../model/PutPlaybackConfigurationRequest';
import PutPlaybackConfigurationResponse from '../model/PutPlaybackConfigurationResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UpdateChannelRequest from '../model/UpdateChannelRequest';
import UpdateChannelResponse from '../model/UpdateChannelResponse';
import UpdateLiveSourceRequest from '../model/UpdateLiveSourceRequest';
import UpdateLiveSourceResponse from '../model/UpdateLiveSourceResponse';
import UpdateProgramRequest from '../model/UpdateProgramRequest';
import UpdateProgramResponse from '../model/UpdateProgramResponse';
import UpdateSourceLocationRequest from '../model/UpdateSourceLocationRequest';
import UpdateSourceLocationResponse from '../model/UpdateSourceLocationResponse';
import UpdateVodSourceResponse from '../model/UpdateVodSourceResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2018-04-23
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the configureLogsForChannel operation.
     * @callback module:api/DefaultApi~configureLogsForChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigureLogsForChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configures Amazon CloudWatch log settings for a channel.
     * @param {module:model/ConfigureLogsForChannelRequest} configureLogsForChannelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~configureLogsForChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigureLogsForChannelResponse}
     */
    configureLogsForChannel(configureLogsForChannelRequest, opts, callback) {
      opts = opts || {};
      let postBody = configureLogsForChannelRequest;
      // verify the required parameter 'configureLogsForChannelRequest' is set
      if (configureLogsForChannelRequest === undefined || configureLogsForChannelRequest === null) {
        throw new Error("Missing the required parameter 'configureLogsForChannelRequest' when calling configureLogsForChannel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConfigureLogsForChannelResponse;
      return this.apiClient.callApi(
        '/configureLogs/channel', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configureLogsForPlaybackConfiguration operation.
     * @callback module:api/DefaultApi~configureLogsForPlaybackConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigureLogsForPlaybackConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Amazon CloudWatch log settings for a playback configuration.
     * @param {module:model/ConfigureLogsForPlaybackConfigurationRequest} configureLogsForPlaybackConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~configureLogsForPlaybackConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigureLogsForPlaybackConfigurationResponse}
     */
    configureLogsForPlaybackConfiguration(configureLogsForPlaybackConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = configureLogsForPlaybackConfigurationRequest;
      // verify the required parameter 'configureLogsForPlaybackConfigurationRequest' is set
      if (configureLogsForPlaybackConfigurationRequest === undefined || configureLogsForPlaybackConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'configureLogsForPlaybackConfigurationRequest' when calling configureLogsForPlaybackConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConfigureLogsForPlaybackConfigurationResponse;
      return this.apiClient.callApi(
        '/configureLogs/playbackConfiguration', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createChannel operation.
     * @callback module:api/DefaultApi~createChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a channel. For information about MediaTailor channels, see <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-channels.html\">Working with channels</a> in the <i>MediaTailor User Guide</i>.
     * @param {String} channelName The name of the channel.
     * @param {module:model/CreateChannelRequest} createChannelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateChannelResponse}
     */
    createChannel(channelName, createChannelRequest, opts, callback) {
      opts = opts || {};
      let postBody = createChannelRequest;
      // verify the required parameter 'channelName' is set
      if (channelName === undefined || channelName === null) {
        throw new Error("Missing the required parameter 'channelName' when calling createChannel");
      }
      // verify the required parameter 'createChannelRequest' is set
      if (createChannelRequest === undefined || createChannelRequest === null) {
        throw new Error("Missing the required parameter 'createChannelRequest' when calling createChannel");
      }

      let pathParams = {
        'ChannelName': channelName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateChannelResponse;
      return this.apiClient.callApi(
        '/channel/{ChannelName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLiveSource operation.
     * @callback module:api/DefaultApi~createLiveSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateLiveSourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The live source configuration.
     * @param {String} liveSourceName The name of the live source.
     * @param {String} sourceLocationName The name of the source location.
     * @param {module:model/CreateLiveSourceRequest} createLiveSourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createLiveSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateLiveSourceResponse}
     */
    createLiveSource(liveSourceName, sourceLocationName, createLiveSourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = createLiveSourceRequest;
      // verify the required parameter 'liveSourceName' is set
      if (liveSourceName === undefined || liveSourceName === null) {
        throw new Error("Missing the required parameter 'liveSourceName' when calling createLiveSource");
      }
      // verify the required parameter 'sourceLocationName' is set
      if (sourceLocationName === undefined || sourceLocationName === null) {
        throw new Error("Missing the required parameter 'sourceLocationName' when calling createLiveSource");
      }
      // verify the required parameter 'createLiveSourceRequest' is set
      if (createLiveSourceRequest === undefined || createLiveSourceRequest === null) {
        throw new Error("Missing the required parameter 'createLiveSourceRequest' when calling createLiveSource");
      }

      let pathParams = {
        'LiveSourceName': liveSourceName,
        'SourceLocationName': sourceLocationName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLiveSourceResponse;
      return this.apiClient.callApi(
        '/sourceLocation/{SourceLocationName}/liveSource/{LiveSourceName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPrefetchSchedule operation.
     * @callback module:api/DefaultApi~createPrefetchScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePrefetchScheduleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a prefetch schedule for a playback configuration. A prefetch schedule allows you to tell MediaTailor to fetch and prepare certain ads before an ad break happens. For more information about ad prefetching, see <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/prefetching-ads.html\">Using ad prefetching</a> in the <i>MediaTailor User Guide</i>.
     * @param {String} name The name to assign to the schedule request.
     * @param {String} playbackConfigurationName The name to assign to the playback configuration.
     * @param {module:model/CreatePrefetchScheduleRequest} createPrefetchScheduleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createPrefetchScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePrefetchScheduleResponse}
     */
    createPrefetchSchedule(name, playbackConfigurationName, createPrefetchScheduleRequest, opts, callback) {
      opts = opts || {};
      let postBody = createPrefetchScheduleRequest;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling createPrefetchSchedule");
      }
      // verify the required parameter 'playbackConfigurationName' is set
      if (playbackConfigurationName === undefined || playbackConfigurationName === null) {
        throw new Error("Missing the required parameter 'playbackConfigurationName' when calling createPrefetchSchedule");
      }
      // verify the required parameter 'createPrefetchScheduleRequest' is set
      if (createPrefetchScheduleRequest === undefined || createPrefetchScheduleRequest === null) {
        throw new Error("Missing the required parameter 'createPrefetchScheduleRequest' when calling createPrefetchSchedule");
      }

      let pathParams = {
        'Name': name,
        'PlaybackConfigurationName': playbackConfigurationName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePrefetchScheduleResponse;
      return this.apiClient.callApi(
        '/prefetchSchedule/{PlaybackConfigurationName}/{Name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProgram operation.
     * @callback module:api/DefaultApi~createProgramCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateProgramResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a program within a channel. For information about programs, see <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-programs.html\">Working with programs</a> in the <i>MediaTailor User Guide</i>.
     * @param {String} channelName The name of the channel for this Program.
     * @param {String} programName The name of the Program.
     * @param {module:model/CreateProgramRequest} createProgramRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createProgramCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateProgramResponse}
     */
    createProgram(channelName, programName, createProgramRequest, opts, callback) {
      opts = opts || {};
      let postBody = createProgramRequest;
      // verify the required parameter 'channelName' is set
      if (channelName === undefined || channelName === null) {
        throw new Error("Missing the required parameter 'channelName' when calling createProgram");
      }
      // verify the required parameter 'programName' is set
      if (programName === undefined || programName === null) {
        throw new Error("Missing the required parameter 'programName' when calling createProgram");
      }
      // verify the required parameter 'createProgramRequest' is set
      if (createProgramRequest === undefined || createProgramRequest === null) {
        throw new Error("Missing the required parameter 'createProgramRequest' when calling createProgram");
      }

      let pathParams = {
        'ChannelName': channelName,
        'ProgramName': programName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateProgramResponse;
      return this.apiClient.callApi(
        '/channel/{ChannelName}/program/{ProgramName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSourceLocation operation.
     * @callback module:api/DefaultApi~createSourceLocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSourceLocationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a source location. A source location is a container for sources. For more information about source locations, see <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-source-locations.html\">Working with source locations</a> in the <i>MediaTailor User Guide</i>.
     * @param {String} sourceLocationName The name associated with the source location.
     * @param {module:model/CreateSourceLocationRequest} createSourceLocationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createSourceLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSourceLocationResponse}
     */
    createSourceLocation(sourceLocationName, createSourceLocationRequest, opts, callback) {
      opts = opts || {};
      let postBody = createSourceLocationRequest;
      // verify the required parameter 'sourceLocationName' is set
      if (sourceLocationName === undefined || sourceLocationName === null) {
        throw new Error("Missing the required parameter 'sourceLocationName' when calling createSourceLocation");
      }
      // verify the required parameter 'createSourceLocationRequest' is set
      if (createSourceLocationRequest === undefined || createSourceLocationRequest === null) {
        throw new Error("Missing the required parameter 'createSourceLocationRequest' when calling createSourceLocation");
      }

      let pathParams = {
        'SourceLocationName': sourceLocationName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSourceLocationResponse;
      return this.apiClient.callApi(
        '/sourceLocation/{SourceLocationName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createVodSource operation.
     * @callback module:api/DefaultApi~createVodSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateVodSourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The VOD source configuration parameters.
     * @param {String} sourceLocationName The name of the source location for this VOD source.
     * @param {String} vodSourceName The name associated with the VOD source.&gt;
     * @param {module:model/CreateVodSourceRequest} createVodSourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createVodSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateVodSourceResponse}
     */
    createVodSource(sourceLocationName, vodSourceName, createVodSourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = createVodSourceRequest;
      // verify the required parameter 'sourceLocationName' is set
      if (sourceLocationName === undefined || sourceLocationName === null) {
        throw new Error("Missing the required parameter 'sourceLocationName' when calling createVodSource");
      }
      // verify the required parameter 'vodSourceName' is set
      if (vodSourceName === undefined || vodSourceName === null) {
        throw new Error("Missing the required parameter 'vodSourceName' when calling createVodSource");
      }
      // verify the required parameter 'createVodSourceRequest' is set
      if (createVodSourceRequest === undefined || createVodSourceRequest === null) {
        throw new Error("Missing the required parameter 'createVodSourceRequest' when calling createVodSource");
      }

      let pathParams = {
        'SourceLocationName': sourceLocationName,
        'VodSourceName': vodSourceName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateVodSourceResponse;
      return this.apiClient.callApi(
        '/sourceLocation/{SourceLocationName}/vodSource/{VodSourceName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChannel operation.
     * @callback module:api/DefaultApi~deleteChannelCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a channel. For information about MediaTailor channels, see <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-channels.html\">Working with channels</a> in the <i>MediaTailor User Guide</i>.
     * @param {String} channelName The name of the channel.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteChannel(channelName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelName' is set
      if (channelName === undefined || channelName === null) {
        throw new Error("Missing the required parameter 'channelName' when calling deleteChannel");
      }

      let pathParams = {
        'ChannelName': channelName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/channel/{ChannelName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChannelPolicy operation.
     * @callback module:api/DefaultApi~deleteChannelPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The channel policy to delete.
     * @param {String} channelName The name of the channel associated with this channel policy.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteChannelPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteChannelPolicy(channelName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelName' is set
      if (channelName === undefined || channelName === null) {
        throw new Error("Missing the required parameter 'channelName' when calling deleteChannelPolicy");
      }

      let pathParams = {
        'ChannelName': channelName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/channel/{ChannelName}/policy', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLiveSource operation.
     * @callback module:api/DefaultApi~deleteLiveSourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The live source to delete.
     * @param {String} liveSourceName The name of the live source.
     * @param {String} sourceLocationName The name of the source location associated with this Live Source.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteLiveSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteLiveSource(liveSourceName, sourceLocationName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'liveSourceName' is set
      if (liveSourceName === undefined || liveSourceName === null) {
        throw new Error("Missing the required parameter 'liveSourceName' when calling deleteLiveSource");
      }
      // verify the required parameter 'sourceLocationName' is set
      if (sourceLocationName === undefined || sourceLocationName === null) {
        throw new Error("Missing the required parameter 'sourceLocationName' when calling deleteLiveSource");
      }

      let pathParams = {
        'LiveSourceName': liveSourceName,
        'SourceLocationName': sourceLocationName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/sourceLocation/{SourceLocationName}/liveSource/{LiveSourceName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePlaybackConfiguration operation.
     * @callback module:api/DefaultApi~deletePlaybackConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a playback configuration. For information about MediaTailor configurations, see <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/configurations.html\">Working with configurations in AWS Elemental MediaTailor</a>.
     * @param {String} name The name of the playback configuration.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deletePlaybackConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deletePlaybackConfiguration(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deletePlaybackConfiguration");
      }

      let pathParams = {
        'Name': name
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/playbackConfiguration/{Name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePrefetchSchedule operation.
     * @callback module:api/DefaultApi~deletePrefetchScheduleCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a prefetch schedule for a specific playback configuration. If you call <code>DeletePrefetchSchedule</code> on an expired prefetch schedule, MediaTailor returns an HTTP 404 status code. For more information about ad prefetching, see <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/prefetching-ads.html\">Using ad prefetching</a> in the <i>MediaTailor User Guide</i>.
     * @param {String} name The name of the prefetch schedule. If the action is successful, the service sends back an HTTP 204 response with an empty HTTP body.
     * @param {String} playbackConfigurationName The name of the playback configuration for this prefetch schedule.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deletePrefetchScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deletePrefetchSchedule(name, playbackConfigurationName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deletePrefetchSchedule");
      }
      // verify the required parameter 'playbackConfigurationName' is set
      if (playbackConfigurationName === undefined || playbackConfigurationName === null) {
        throw new Error("Missing the required parameter 'playbackConfigurationName' when calling deletePrefetchSchedule");
      }

      let pathParams = {
        'Name': name,
        'PlaybackConfigurationName': playbackConfigurationName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/prefetchSchedule/{PlaybackConfigurationName}/{Name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProgram operation.
     * @callback module:api/DefaultApi~deleteProgramCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a program within a channel. For information about programs, see <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-programs.html\">Working with programs</a> in the <i>MediaTailor User Guide</i>.
     * @param {String} channelName The name of the channel.
     * @param {String} programName The name of the program.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteProgramCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteProgram(channelName, programName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelName' is set
      if (channelName === undefined || channelName === null) {
        throw new Error("Missing the required parameter 'channelName' when calling deleteProgram");
      }
      // verify the required parameter 'programName' is set
      if (programName === undefined || programName === null) {
        throw new Error("Missing the required parameter 'programName' when calling deleteProgram");
      }

      let pathParams = {
        'ChannelName': channelName,
        'ProgramName': programName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/channel/{ChannelName}/program/{ProgramName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSourceLocation operation.
     * @callback module:api/DefaultApi~deleteSourceLocationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a source location. A source location is a container for sources. For more information about source locations, see <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-source-locations.html\">Working with source locations</a> in the <i>MediaTailor User Guide</i>.
     * @param {String} sourceLocationName The name of the source location.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteSourceLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteSourceLocation(sourceLocationName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sourceLocationName' is set
      if (sourceLocationName === undefined || sourceLocationName === null) {
        throw new Error("Missing the required parameter 'sourceLocationName' when calling deleteSourceLocation");
      }

      let pathParams = {
        'SourceLocationName': sourceLocationName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/sourceLocation/{SourceLocationName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVodSource operation.
     * @callback module:api/DefaultApi~deleteVodSourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The video on demand (VOD) source to delete.
     * @param {String} sourceLocationName The name of the source location associated with this VOD Source.
     * @param {String} vodSourceName The name of the VOD source.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteVodSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteVodSource(sourceLocationName, vodSourceName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sourceLocationName' is set
      if (sourceLocationName === undefined || sourceLocationName === null) {
        throw new Error("Missing the required parameter 'sourceLocationName' when calling deleteVodSource");
      }
      // verify the required parameter 'vodSourceName' is set
      if (vodSourceName === undefined || vodSourceName === null) {
        throw new Error("Missing the required parameter 'vodSourceName' when calling deleteVodSource");
      }

      let pathParams = {
        'SourceLocationName': sourceLocationName,
        'VodSourceName': vodSourceName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/sourceLocation/{SourceLocationName}/vodSource/{VodSourceName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeChannel operation.
     * @callback module:api/DefaultApi~describeChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes a channel. For information about MediaTailor channels, see <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-channels.html\">Working with channels</a> in the <i>MediaTailor User Guide</i>.
     * @param {String} channelName The name of the channel.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeChannelResponse}
     */
    describeChannel(channelName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelName' is set
      if (channelName === undefined || channelName === null) {
        throw new Error("Missing the required parameter 'channelName' when calling describeChannel");
      }

      let pathParams = {
        'ChannelName': channelName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeChannelResponse;
      return this.apiClient.callApi(
        '/channel/{ChannelName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeLiveSource operation.
     * @callback module:api/DefaultApi~describeLiveSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeLiveSourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The live source to describe.
     * @param {String} liveSourceName The name of the live source.
     * @param {String} sourceLocationName The name of the source location associated with this Live Source.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeLiveSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeLiveSourceResponse}
     */
    describeLiveSource(liveSourceName, sourceLocationName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'liveSourceName' is set
      if (liveSourceName === undefined || liveSourceName === null) {
        throw new Error("Missing the required parameter 'liveSourceName' when calling describeLiveSource");
      }
      // verify the required parameter 'sourceLocationName' is set
      if (sourceLocationName === undefined || sourceLocationName === null) {
        throw new Error("Missing the required parameter 'sourceLocationName' when calling describeLiveSource");
      }

      let pathParams = {
        'LiveSourceName': liveSourceName,
        'SourceLocationName': sourceLocationName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeLiveSourceResponse;
      return this.apiClient.callApi(
        '/sourceLocation/{SourceLocationName}/liveSource/{LiveSourceName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeProgram operation.
     * @callback module:api/DefaultApi~describeProgramCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeProgramResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes a program within a channel. For information about programs, see <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-programs.html\">Working with programs</a> in the <i>MediaTailor User Guide</i>.
     * @param {String} channelName The name of the channel associated with this Program.
     * @param {String} programName The name of the program.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeProgramCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeProgramResponse}
     */
    describeProgram(channelName, programName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelName' is set
      if (channelName === undefined || channelName === null) {
        throw new Error("Missing the required parameter 'channelName' when calling describeProgram");
      }
      // verify the required parameter 'programName' is set
      if (programName === undefined || programName === null) {
        throw new Error("Missing the required parameter 'programName' when calling describeProgram");
      }

      let pathParams = {
        'ChannelName': channelName,
        'ProgramName': programName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeProgramResponse;
      return this.apiClient.callApi(
        '/channel/{ChannelName}/program/{ProgramName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeSourceLocation operation.
     * @callback module:api/DefaultApi~describeSourceLocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeSourceLocationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes a source location. A source location is a container for sources. For more information about source locations, see <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-source-locations.html\">Working with source locations</a> in the <i>MediaTailor User Guide</i>.
     * @param {String} sourceLocationName The name of the source location.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeSourceLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeSourceLocationResponse}
     */
    describeSourceLocation(sourceLocationName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sourceLocationName' is set
      if (sourceLocationName === undefined || sourceLocationName === null) {
        throw new Error("Missing the required parameter 'sourceLocationName' when calling describeSourceLocation");
      }

      let pathParams = {
        'SourceLocationName': sourceLocationName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeSourceLocationResponse;
      return this.apiClient.callApi(
        '/sourceLocation/{SourceLocationName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeVodSource operation.
     * @callback module:api/DefaultApi~describeVodSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeVodSourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides details about a specific video on demand (VOD) source in a specific source location.
     * @param {String} sourceLocationName The name of the source location associated with this VOD Source.
     * @param {String} vodSourceName The name of the VOD Source.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeVodSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeVodSourceResponse}
     */
    describeVodSource(sourceLocationName, vodSourceName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sourceLocationName' is set
      if (sourceLocationName === undefined || sourceLocationName === null) {
        throw new Error("Missing the required parameter 'sourceLocationName' when calling describeVodSource");
      }
      // verify the required parameter 'vodSourceName' is set
      if (vodSourceName === undefined || vodSourceName === null) {
        throw new Error("Missing the required parameter 'vodSourceName' when calling describeVodSource");
      }

      let pathParams = {
        'SourceLocationName': sourceLocationName,
        'VodSourceName': vodSourceName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeVodSourceResponse;
      return this.apiClient.callApi(
        '/sourceLocation/{SourceLocationName}/vodSource/{VodSourceName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelPolicy operation.
     * @callback module:api/DefaultApi~getChannelPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetChannelPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the channel's IAM policy. IAM policies are used to control access to your channel.
     * @param {String} channelName The name of the channel associated with this Channel Policy.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getChannelPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetChannelPolicyResponse}
     */
    getChannelPolicy(channelName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelName' is set
      if (channelName === undefined || channelName === null) {
        throw new Error("Missing the required parameter 'channelName' when calling getChannelPolicy");
      }

      let pathParams = {
        'ChannelName': channelName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetChannelPolicyResponse;
      return this.apiClient.callApi(
        '/channel/{ChannelName}/policy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelSchedule operation.
     * @callback module:api/DefaultApi~getChannelScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetChannelScheduleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about your channel's schedule.
     * @param {String} channelName The name of the channel associated with this Channel Schedule.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [durationMinutes] The duration in minutes of the channel schedule.
     * @param {Number} [maxResults] The maximum number of channel schedules that you want MediaTailor to return in response to the current request. If there are more than <code>MaxResults</code> channel schedules, use the value of <code>NextToken</code> in the response to get the next page of results.
     * @param {String} [nextToken] <p>(Optional) If the playback configuration has more than <code>MaxResults</code> channel schedules, use <code>NextToken</code> to get the second and subsequent pages of results.</p> <p>For the first <code>GetChannelScheduleRequest</code> request, omit this value.</p> <p>For the second and subsequent requests, get the value of <code>NextToken</code> from the previous response and specify that value for <code>NextToken</code> in the request.</p> <p>If the previous response didn't include a <code>NextToken</code> element, there are no more channel schedules to get.</p>
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~getChannelScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetChannelScheduleResponse}
     */
    getChannelSchedule(channelName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelName' is set
      if (channelName === undefined || channelName === null) {
        throw new Error("Missing the required parameter 'channelName' when calling getChannelSchedule");
      }

      let pathParams = {
        'ChannelName': channelName
      };
      let queryParams = {
        'durationMinutes': opts['durationMinutes'],
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetChannelScheduleResponse;
      return this.apiClient.callApi(
        '/channel/{ChannelName}/schedule', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlaybackConfiguration operation.
     * @callback module:api/DefaultApi~getPlaybackConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPlaybackConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a playback configuration. For information about MediaTailor configurations, see <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/configurations.html\">Working with configurations in AWS Elemental MediaTailor</a>.
     * @param {String} name The identifier for the playback configuration.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getPlaybackConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPlaybackConfigurationResponse}
     */
    getPlaybackConfiguration(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getPlaybackConfiguration");
      }

      let pathParams = {
        'Name': name
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPlaybackConfigurationResponse;
      return this.apiClient.callApi(
        '/playbackConfiguration/{Name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPrefetchSchedule operation.
     * @callback module:api/DefaultApi~getPrefetchScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPrefetchScheduleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a prefetch schedule for a playback configuration. A prefetch schedule allows you to tell MediaTailor to fetch and prepare certain ads before an ad break happens. For more information about ad prefetching, see <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/prefetching-ads.html\">Using ad prefetching</a> in the <i>MediaTailor User Guide</i>.
     * @param {String} name The name of the prefetch schedule. The name must be unique among all prefetch schedules that are associated with the specified playback configuration.
     * @param {String} playbackConfigurationName Returns information about the prefetch schedule for a specific playback configuration. If you call <code>GetPrefetchSchedule</code> on an expired prefetch schedule, MediaTailor returns an HTTP 404 status code.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getPrefetchScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPrefetchScheduleResponse}
     */
    getPrefetchSchedule(name, playbackConfigurationName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getPrefetchSchedule");
      }
      // verify the required parameter 'playbackConfigurationName' is set
      if (playbackConfigurationName === undefined || playbackConfigurationName === null) {
        throw new Error("Missing the required parameter 'playbackConfigurationName' when calling getPrefetchSchedule");
      }

      let pathParams = {
        'Name': name,
        'PlaybackConfigurationName': playbackConfigurationName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPrefetchScheduleResponse;
      return this.apiClient.callApi(
        '/prefetchSchedule/{PlaybackConfigurationName}/{Name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAlerts operation.
     * @callback module:api/DefaultApi~listAlertsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAlertsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the alerts that are associated with a MediaTailor channel assembly resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of alerts that you want MediaTailor to return in response to the current request. If there are more than <code>MaxResults</code> alerts, use the value of <code>NextToken</code> in the response to get the next page of results.
     * @param {String} [nextToken] Pagination token returned by the list request when results exceed the maximum allowed. Use the token to fetch the next page of results.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listAlertsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAlertsResponse}
     */
    listAlerts(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listAlerts");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'resourceArn': resourceArn,
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAlertsResponse;
      return this.apiClient.callApi(
        '/alerts#resourceArn', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listChannels operation.
     * @callback module:api/DefaultApi~listChannelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListChannelsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the channels that are associated with the current AWS account.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of channels that you want MediaTailor to return in response to the current request. If there are more than <code>MaxResults</code> channels, use the value of <code>NextToken</code> in the response to get the next page of results.
     * @param {String} [nextToken] Pagination token returned by the list request when results exceed the maximum allowed. Use the token to fetch the next page of results.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListChannelsResponse}
     */
    listChannels(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListChannelsResponse;
      return this.apiClient.callApi(
        '/channels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLiveSources operation.
     * @callback module:api/DefaultApi~listLiveSourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLiveSourcesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the live sources contained in a source location. A source represents a piece of content.
     * @param {String} sourceLocationName The name of the source location associated with this Live Sources list.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of live sources that you want MediaTailor to return in response to the current request. If there are more than <code>MaxResults</code> live sources, use the value of <code>NextToken</code> in the response to get the next page of results.
     * @param {String} [nextToken] Pagination token returned by the list request when results exceed the maximum allowed. Use the token to fetch the next page of results.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listLiveSourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLiveSourcesResponse}
     */
    listLiveSources(sourceLocationName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sourceLocationName' is set
      if (sourceLocationName === undefined || sourceLocationName === null) {
        throw new Error("Missing the required parameter 'sourceLocationName' when calling listLiveSources");
      }

      let pathParams = {
        'SourceLocationName': sourceLocationName
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListLiveSourcesResponse;
      return this.apiClient.callApi(
        '/sourceLocation/{SourceLocationName}/liveSources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPlaybackConfigurations operation.
     * @callback module:api/DefaultApi~listPlaybackConfigurationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPlaybackConfigurationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves existing playback configurations. For information about MediaTailor configurations, see <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/configurations.html\">Working with Configurations in AWS Elemental MediaTailor</a>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of playback configurations that you want MediaTailor to return in response to the current request. If there are more than <code>MaxResults</code> playback configurations, use the value of <code>NextToken</code> in the response to get the next page of results.
     * @param {String} [nextToken] Pagination token returned by the list request when results exceed the maximum allowed. Use the token to fetch the next page of results.
     * @param {module:api/DefaultApi~listPlaybackConfigurationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPlaybackConfigurationsResponse}
     */
    listPlaybackConfigurations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListPlaybackConfigurationsResponse;
      return this.apiClient.callApi(
        '/playbackConfigurations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPrefetchSchedules operation.
     * @callback module:api/DefaultApi~listPrefetchSchedulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPrefetchSchedulesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the prefetch schedules for a playback configuration.
     * @param {String} playbackConfigurationName Retrieves the prefetch schedule(s) for a specific playback configuration.
     * @param {module:model/ListPrefetchSchedulesRequest} listPrefetchSchedulesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listPrefetchSchedulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPrefetchSchedulesResponse}
     */
    listPrefetchSchedules(playbackConfigurationName, listPrefetchSchedulesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listPrefetchSchedulesRequest;
      // verify the required parameter 'playbackConfigurationName' is set
      if (playbackConfigurationName === undefined || playbackConfigurationName === null) {
        throw new Error("Missing the required parameter 'playbackConfigurationName' when calling listPrefetchSchedules");
      }
      // verify the required parameter 'listPrefetchSchedulesRequest' is set
      if (listPrefetchSchedulesRequest === undefined || listPrefetchSchedulesRequest === null) {
        throw new Error("Missing the required parameter 'listPrefetchSchedulesRequest' when calling listPrefetchSchedules");
      }

      let pathParams = {
        'PlaybackConfigurationName': playbackConfigurationName
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListPrefetchSchedulesResponse;
      return this.apiClient.callApi(
        '/prefetchSchedule/{PlaybackConfigurationName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSourceLocations operation.
     * @callback module:api/DefaultApi~listSourceLocationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSourceLocationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the source locations for a channel. A source location defines the host server URL, and contains a list of sources.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults]  The maximum number of source locations that you want MediaTailor to return in response to the current request. If there are more than <code>MaxResults</code> source locations, use the value of <code>NextToken</code> in the response to get the next page of results.
     * @param {String} [nextToken] Pagination token returned by the list request when results exceed the maximum allowed. Use the token to fetch the next page of results.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listSourceLocationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSourceLocationsResponse}
     */
    listSourceLocations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSourceLocationsResponse;
      return this.apiClient.callApi(
        '/sourceLocations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A list of tags that are associated with this resource. Tags are key-value pairs that you can associate with Amazon resources to help with organization, access control, and cost tracking. For more information, see <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/tagging.html\">Tagging AWS Elemental MediaTailor Resources</a>.
     * @param {String} resourceArn The Amazon Resource Name (ARN) associated with this resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
        'ResourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/tags/{ResourceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVodSources operation.
     * @callback module:api/DefaultApi~listVodSourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListVodSourcesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the VOD sources contained in a source location. A source represents a piece of content.
     * @param {String} sourceLocationName The name of the source location associated with this VOD Source list.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults]  The maximum number of VOD sources that you want MediaTailor to return in response to the current request. If there are more than <code>MaxResults</code> VOD sources, use the value of <code>NextToken</code> in the response to get the next page of results.
     * @param {String} [nextToken] Pagination token returned by the list request when results exceed the maximum allowed. Use the token to fetch the next page of results.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listVodSourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListVodSourcesResponse}
     */
    listVodSources(sourceLocationName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sourceLocationName' is set
      if (sourceLocationName === undefined || sourceLocationName === null) {
        throw new Error("Missing the required parameter 'sourceLocationName' when calling listVodSources");
      }

      let pathParams = {
        'SourceLocationName': sourceLocationName
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListVodSourcesResponse;
      return this.apiClient.callApi(
        '/sourceLocation/{SourceLocationName}/vodSources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putChannelPolicy operation.
     * @callback module:api/DefaultApi~putChannelPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an IAM policy for the channel. IAM policies are used to control access to your channel.
     * @param {String} channelName The channel name associated with this Channel Policy.
     * @param {module:model/PutChannelPolicyRequest} putChannelPolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putChannelPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putChannelPolicy(channelName, putChannelPolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = putChannelPolicyRequest;
      // verify the required parameter 'channelName' is set
      if (channelName === undefined || channelName === null) {
        throw new Error("Missing the required parameter 'channelName' when calling putChannelPolicy");
      }
      // verify the required parameter 'putChannelPolicyRequest' is set
      if (putChannelPolicyRequest === undefined || putChannelPolicyRequest === null) {
        throw new Error("Missing the required parameter 'putChannelPolicyRequest' when calling putChannelPolicy");
      }

      let pathParams = {
        'ChannelName': channelName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/channel/{ChannelName}/policy', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPlaybackConfiguration operation.
     * @callback module:api/DefaultApi~putPlaybackConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutPlaybackConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a playback configuration. For information about MediaTailor configurations, see <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/configurations.html\">Working with configurations in AWS Elemental MediaTailor</a>.
     * @param {module:model/PutPlaybackConfigurationRequest} putPlaybackConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putPlaybackConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutPlaybackConfigurationResponse}
     */
    putPlaybackConfiguration(putPlaybackConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = putPlaybackConfigurationRequest;
      // verify the required parameter 'putPlaybackConfigurationRequest' is set
      if (putPlaybackConfigurationRequest === undefined || putPlaybackConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'putPlaybackConfigurationRequest' when calling putPlaybackConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutPlaybackConfigurationResponse;
      return this.apiClient.callApi(
        '/playbackConfiguration', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startChannel operation.
     * @callback module:api/DefaultApi~startChannelCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a channel. For information about MediaTailor channels, see <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-channels.html\">Working with channels</a> in the <i>MediaTailor User Guide</i>.
     * @param {String} channelName The name of the channel.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    startChannel(channelName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelName' is set
      if (channelName === undefined || channelName === null) {
        throw new Error("Missing the required parameter 'channelName' when calling startChannel");
      }

      let pathParams = {
        'ChannelName': channelName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/channel/{ChannelName}/start', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopChannel operation.
     * @callback module:api/DefaultApi~stopChannelCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops a channel. For information about MediaTailor channels, see <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-channels.html\">Working with channels</a> in the <i>MediaTailor User Guide</i>.
     * @param {String} channelName The name of the channel.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    stopChannel(channelName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelName' is set
      if (channelName === undefined || channelName === null) {
        throw new Error("Missing the required parameter 'channelName' when calling stopChannel");
      }

      let pathParams = {
        'ChannelName': channelName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/channel/{ChannelName}/stop', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The resource to tag. Tags are key-value pairs that you can associate with Amazon resources to help with organization, access control, and cost tracking. For more information, see <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/tagging.html\">Tagging AWS Elemental MediaTailor Resources</a>.
     * @param {String} resourceArn The Amazon Resource Name (ARN) associated with the resource.
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'ResourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tags/{ResourceArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The resource to untag.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the resource to untag.
     * @param {Array.<String>} tagKeys The tag keys associated with the resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'ResourceArn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tags/{ResourceArn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChannel operation.
     * @callback module:api/DefaultApi~updateChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a channel. For information about MediaTailor channels, see <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-channels.html\">Working with channels</a> in the <i>MediaTailor User Guide</i>.
     * @param {String} channelName The name of the channel.
     * @param {module:model/UpdateChannelRequest} updateChannelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateChannelResponse}
     */
    updateChannel(channelName, updateChannelRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateChannelRequest;
      // verify the required parameter 'channelName' is set
      if (channelName === undefined || channelName === null) {
        throw new Error("Missing the required parameter 'channelName' when calling updateChannel");
      }
      // verify the required parameter 'updateChannelRequest' is set
      if (updateChannelRequest === undefined || updateChannelRequest === null) {
        throw new Error("Missing the required parameter 'updateChannelRequest' when calling updateChannel");
      }

      let pathParams = {
        'ChannelName': channelName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateChannelResponse;
      return this.apiClient.callApi(
        '/channel/{ChannelName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLiveSource operation.
     * @callback module:api/DefaultApi~updateLiveSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateLiveSourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a live source's configuration.
     * @param {String} liveSourceName The name of the live source.
     * @param {String} sourceLocationName The name of the source location associated with this Live Source.
     * @param {module:model/UpdateLiveSourceRequest} updateLiveSourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateLiveSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateLiveSourceResponse}
     */
    updateLiveSource(liveSourceName, sourceLocationName, updateLiveSourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateLiveSourceRequest;
      // verify the required parameter 'liveSourceName' is set
      if (liveSourceName === undefined || liveSourceName === null) {
        throw new Error("Missing the required parameter 'liveSourceName' when calling updateLiveSource");
      }
      // verify the required parameter 'sourceLocationName' is set
      if (sourceLocationName === undefined || sourceLocationName === null) {
        throw new Error("Missing the required parameter 'sourceLocationName' when calling updateLiveSource");
      }
      // verify the required parameter 'updateLiveSourceRequest' is set
      if (updateLiveSourceRequest === undefined || updateLiveSourceRequest === null) {
        throw new Error("Missing the required parameter 'updateLiveSourceRequest' when calling updateLiveSource");
      }

      let pathParams = {
        'LiveSourceName': liveSourceName,
        'SourceLocationName': sourceLocationName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateLiveSourceResponse;
      return this.apiClient.callApi(
        '/sourceLocation/{SourceLocationName}/liveSource/{LiveSourceName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProgram operation.
     * @callback module:api/DefaultApi~updateProgramCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateProgramResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a program within a channel.
     * @param {String} channelName The name of the channel for this Program.
     * @param {String} programName The name of the Program.
     * @param {module:model/UpdateProgramRequest} updateProgramRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateProgramCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateProgramResponse}
     */
    updateProgram(channelName, programName, updateProgramRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateProgramRequest;
      // verify the required parameter 'channelName' is set
      if (channelName === undefined || channelName === null) {
        throw new Error("Missing the required parameter 'channelName' when calling updateProgram");
      }
      // verify the required parameter 'programName' is set
      if (programName === undefined || programName === null) {
        throw new Error("Missing the required parameter 'programName' when calling updateProgram");
      }
      // verify the required parameter 'updateProgramRequest' is set
      if (updateProgramRequest === undefined || updateProgramRequest === null) {
        throw new Error("Missing the required parameter 'updateProgramRequest' when calling updateProgram");
      }

      let pathParams = {
        'ChannelName': channelName,
        'ProgramName': programName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateProgramResponse;
      return this.apiClient.callApi(
        '/channel/{ChannelName}/program/{ProgramName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSourceLocation operation.
     * @callback module:api/DefaultApi~updateSourceLocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSourceLocationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a source location. A source location is a container for sources. For more information about source locations, see <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-source-locations.html\">Working with source locations</a> in the <i>MediaTailor User Guide</i>.
     * @param {String} sourceLocationName The name of the source location.
     * @param {module:model/UpdateSourceLocationRequest} updateSourceLocationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateSourceLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSourceLocationResponse}
     */
    updateSourceLocation(sourceLocationName, updateSourceLocationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateSourceLocationRequest;
      // verify the required parameter 'sourceLocationName' is set
      if (sourceLocationName === undefined || sourceLocationName === null) {
        throw new Error("Missing the required parameter 'sourceLocationName' when calling updateSourceLocation");
      }
      // verify the required parameter 'updateSourceLocationRequest' is set
      if (updateSourceLocationRequest === undefined || updateSourceLocationRequest === null) {
        throw new Error("Missing the required parameter 'updateSourceLocationRequest' when calling updateSourceLocation");
      }

      let pathParams = {
        'SourceLocationName': sourceLocationName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateSourceLocationResponse;
      return this.apiClient.callApi(
        '/sourceLocation/{SourceLocationName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVodSource operation.
     * @callback module:api/DefaultApi~updateVodSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateVodSourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a VOD source's configuration.
     * @param {String} sourceLocationName The name of the source location associated with this VOD Source.
     * @param {String} vodSourceName The name of the VOD source.
     * @param {module:model/UpdateLiveSourceRequest} updateLiveSourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateVodSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateVodSourceResponse}
     */
    updateVodSource(sourceLocationName, vodSourceName, updateLiveSourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateLiveSourceRequest;
      // verify the required parameter 'sourceLocationName' is set
      if (sourceLocationName === undefined || sourceLocationName === null) {
        throw new Error("Missing the required parameter 'sourceLocationName' when calling updateVodSource");
      }
      // verify the required parameter 'vodSourceName' is set
      if (vodSourceName === undefined || vodSourceName === null) {
        throw new Error("Missing the required parameter 'vodSourceName' when calling updateVodSource");
      }
      // verify the required parameter 'updateLiveSourceRequest' is set
      if (updateLiveSourceRequest === undefined || updateLiveSourceRequest === null) {
        throw new Error("Missing the required parameter 'updateLiveSourceRequest' when calling updateVodSource");
      }

      let pathParams = {
        'SourceLocationName': sourceLocationName,
        'VodSourceName': vodSourceName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateVodSourceResponse;
      return this.apiClient.callApi(
        '/sourceLocation/{SourceLocationName}/vodSource/{VodSourceName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
