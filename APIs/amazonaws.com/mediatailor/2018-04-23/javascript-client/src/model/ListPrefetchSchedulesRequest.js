/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ListPrefetchSchedulesRequest model module.
 * @module model/ListPrefetchSchedulesRequest
 * @version 2018-04-23
 */
class ListPrefetchSchedulesRequest {
    /**
     * Constructs a new <code>ListPrefetchSchedulesRequest</code>.
     * @alias module:model/ListPrefetchSchedulesRequest
     */
    constructor() { 
        
        ListPrefetchSchedulesRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ListPrefetchSchedulesRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListPrefetchSchedulesRequest} obj Optional instance to populate.
     * @return {module:model/ListPrefetchSchedulesRequest} The populated <code>ListPrefetchSchedulesRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListPrefetchSchedulesRequest();

            if (data.hasOwnProperty('MaxResults')) {
                obj['MaxResults'] = ApiClient.convertToType(data['MaxResults'], 'Number');
            }
            if (data.hasOwnProperty('NextToken')) {
                obj['NextToken'] = ApiClient.convertToType(data['NextToken'], 'String');
            }
            if (data.hasOwnProperty('StreamId')) {
                obj['StreamId'] = ApiClient.convertToType(data['StreamId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListPrefetchSchedulesRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListPrefetchSchedulesRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['NextToken'] && !(typeof data['NextToken'] === 'string' || data['NextToken'] instanceof String)) {
            throw new Error("Expected the field `NextToken` to be a primitive type in the JSON string but got " + data['NextToken']);
        }
        // ensure the json data is a string
        if (data['StreamId'] && !(typeof data['StreamId'] === 'string' || data['StreamId'] instanceof String)) {
            throw new Error("Expected the field `StreamId` to be a primitive type in the JSON string but got " + data['StreamId']);
        }

        return true;
    }


}



/**
 * The maximum number of prefetch schedules that you want MediaTailor to return in response to the current request. If there are more than <code>MaxResults</code> prefetch schedules, use the value of <code>NextToken</code> in the response to get the next page of results.
 * @member {Number} MaxResults
 */
ListPrefetchSchedulesRequest.prototype['MaxResults'] = undefined;

/**
 * <p>(Optional) If the playback configuration has more than <code>MaxResults</code> prefetch schedules, use <code>NextToken</code> to get the second and subsequent pages of results.</p> <p> For the first <code>ListPrefetchSchedulesRequest</code> request, omit this value.</p> <p> For the second and subsequent requests, get the value of <code>NextToken</code> from the previous response and specify that value for <code>NextToken</code> in the request.</p> <p> If the previous response didn't include a <code>NextToken</code> element, there are no more prefetch schedules to get.</p>
 * @member {String} NextToken
 */
ListPrefetchSchedulesRequest.prototype['NextToken'] = undefined;

/**
 * An optional filtering parameter whereby MediaTailor filters the prefetch schedules to include only specific streams.
 * @member {String} StreamId
 */
ListPrefetchSchedulesRequest.prototype['StreamId'] = undefined;






export default ListPrefetchSchedulesRequest;

