/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConfigureLogsForPlaybackConfigurationRequest model module.
 * @module model/ConfigureLogsForPlaybackConfigurationRequest
 * @version 2018-04-23
 */
class ConfigureLogsForPlaybackConfigurationRequest {
    /**
     * Constructs a new <code>ConfigureLogsForPlaybackConfigurationRequest</code>.
     * @alias module:model/ConfigureLogsForPlaybackConfigurationRequest
     * @param percentEnabled {Number} <p>The percentage of session logs that MediaTailor sends to your Cloudwatch Logs account. For example, if your playback configuration has 1000 sessions and percentEnabled is set to <code>60</code>, MediaTailor sends logs for 600 of the sessions to CloudWatch Logs. MediaTailor decides at random which of the playback configuration sessions to send logs for. If you want to view logs for a specific session, you can use the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/debug-log-mode.html\">debug log mode</a>.</p> <p>Valid values: <code>0</code> - <code>100</code> </p>
     * @param playbackConfigurationName {String} The name of the playback configuration.
     */
    constructor(percentEnabled, playbackConfigurationName) { 
        
        ConfigureLogsForPlaybackConfigurationRequest.initialize(this, percentEnabled, playbackConfigurationName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, percentEnabled, playbackConfigurationName) { 
        obj['PercentEnabled'] = percentEnabled;
        obj['PlaybackConfigurationName'] = playbackConfigurationName;
    }

    /**
     * Constructs a <code>ConfigureLogsForPlaybackConfigurationRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfigureLogsForPlaybackConfigurationRequest} obj Optional instance to populate.
     * @return {module:model/ConfigureLogsForPlaybackConfigurationRequest} The populated <code>ConfigureLogsForPlaybackConfigurationRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConfigureLogsForPlaybackConfigurationRequest();

            if (data.hasOwnProperty('PercentEnabled')) {
                obj['PercentEnabled'] = ApiClient.convertToType(data['PercentEnabled'], 'Number');
            }
            if (data.hasOwnProperty('PlaybackConfigurationName')) {
                obj['PlaybackConfigurationName'] = ApiClient.convertToType(data['PlaybackConfigurationName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConfigureLogsForPlaybackConfigurationRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConfigureLogsForPlaybackConfigurationRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ConfigureLogsForPlaybackConfigurationRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['PlaybackConfigurationName'] && !(typeof data['PlaybackConfigurationName'] === 'string' || data['PlaybackConfigurationName'] instanceof String)) {
            throw new Error("Expected the field `PlaybackConfigurationName` to be a primitive type in the JSON string but got " + data['PlaybackConfigurationName']);
        }

        return true;
    }


}

ConfigureLogsForPlaybackConfigurationRequest.RequiredProperties = ["PercentEnabled", "PlaybackConfigurationName"];

/**
 * <p>The percentage of session logs that MediaTailor sends to your Cloudwatch Logs account. For example, if your playback configuration has 1000 sessions and percentEnabled is set to <code>60</code>, MediaTailor sends logs for 600 of the sessions to CloudWatch Logs. MediaTailor decides at random which of the playback configuration sessions to send logs for. If you want to view logs for a specific session, you can use the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/debug-log-mode.html\">debug log mode</a>.</p> <p>Valid values: <code>0</code> - <code>100</code> </p>
 * @member {Number} PercentEnabled
 */
ConfigureLogsForPlaybackConfigurationRequest.prototype['PercentEnabled'] = undefined;

/**
 * The name of the playback configuration.
 * @member {String} PlaybackConfigurationName
 */
ConfigureLogsForPlaybackConfigurationRequest.prototype['PlaybackConfigurationName'] = undefined;






export default ConfigureLogsForPlaybackConfigurationRequest;

