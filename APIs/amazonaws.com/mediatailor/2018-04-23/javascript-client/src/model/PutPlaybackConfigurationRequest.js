/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PutPlaybackConfigurationRequestAvailSuppression from './PutPlaybackConfigurationRequestAvailSuppression';
import PutPlaybackConfigurationRequestBumper from './PutPlaybackConfigurationRequestBumper';
import PutPlaybackConfigurationRequestCdnConfiguration from './PutPlaybackConfigurationRequestCdnConfiguration';
import PutPlaybackConfigurationRequestDashConfiguration from './PutPlaybackConfigurationRequestDashConfiguration';
import PutPlaybackConfigurationRequestLivePreRollConfiguration from './PutPlaybackConfigurationRequestLivePreRollConfiguration';
import PutPlaybackConfigurationRequestManifestProcessingRules from './PutPlaybackConfigurationRequestManifestProcessingRules';

/**
 * The PutPlaybackConfigurationRequest model module.
 * @module model/PutPlaybackConfigurationRequest
 * @version 2018-04-23
 */
class PutPlaybackConfigurationRequest {
    /**
     * Constructs a new <code>PutPlaybackConfigurationRequest</code>.
     * @alias module:model/PutPlaybackConfigurationRequest
     * @param name {String} The identifier for the playback configuration.
     */
    constructor(name) { 
        
        PutPlaybackConfigurationRequest.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['Name'] = name;
    }

    /**
     * Constructs a <code>PutPlaybackConfigurationRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutPlaybackConfigurationRequest} obj Optional instance to populate.
     * @return {module:model/PutPlaybackConfigurationRequest} The populated <code>PutPlaybackConfigurationRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutPlaybackConfigurationRequest();

            if (data.hasOwnProperty('AdDecisionServerUrl')) {
                obj['AdDecisionServerUrl'] = ApiClient.convertToType(data['AdDecisionServerUrl'], 'String');
            }
            if (data.hasOwnProperty('AvailSuppression')) {
                obj['AvailSuppression'] = PutPlaybackConfigurationRequestAvailSuppression.constructFromObject(data['AvailSuppression']);
            }
            if (data.hasOwnProperty('Bumper')) {
                obj['Bumper'] = PutPlaybackConfigurationRequestBumper.constructFromObject(data['Bumper']);
            }
            if (data.hasOwnProperty('CdnConfiguration')) {
                obj['CdnConfiguration'] = PutPlaybackConfigurationRequestCdnConfiguration.constructFromObject(data['CdnConfiguration']);
            }
            if (data.hasOwnProperty('ConfigurationAliases')) {
                obj['ConfigurationAliases'] = ApiClient.convertToType(data['ConfigurationAliases'], {'String': Object});
            }
            if (data.hasOwnProperty('DashConfiguration')) {
                obj['DashConfiguration'] = PutPlaybackConfigurationRequestDashConfiguration.constructFromObject(data['DashConfiguration']);
            }
            if (data.hasOwnProperty('LivePreRollConfiguration')) {
                obj['LivePreRollConfiguration'] = PutPlaybackConfigurationRequestLivePreRollConfiguration.constructFromObject(data['LivePreRollConfiguration']);
            }
            if (data.hasOwnProperty('ManifestProcessingRules')) {
                obj['ManifestProcessingRules'] = PutPlaybackConfigurationRequestManifestProcessingRules.constructFromObject(data['ManifestProcessingRules']);
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('PersonalizationThresholdSeconds')) {
                obj['PersonalizationThresholdSeconds'] = ApiClient.convertToType(data['PersonalizationThresholdSeconds'], 'Number');
            }
            if (data.hasOwnProperty('SlateAdUrl')) {
                obj['SlateAdUrl'] = ApiClient.convertToType(data['SlateAdUrl'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
            if (data.hasOwnProperty('TranscodeProfileName')) {
                obj['TranscodeProfileName'] = ApiClient.convertToType(data['TranscodeProfileName'], 'String');
            }
            if (data.hasOwnProperty('VideoContentSourceUrl')) {
                obj['VideoContentSourceUrl'] = ApiClient.convertToType(data['VideoContentSourceUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutPlaybackConfigurationRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutPlaybackConfigurationRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PutPlaybackConfigurationRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['AdDecisionServerUrl'] && !(typeof data['AdDecisionServerUrl'] === 'string' || data['AdDecisionServerUrl'] instanceof String)) {
            throw new Error("Expected the field `AdDecisionServerUrl` to be a primitive type in the JSON string but got " + data['AdDecisionServerUrl']);
        }
        // validate the optional field `AvailSuppression`
        if (data['AvailSuppression']) { // data not null
          PutPlaybackConfigurationRequestAvailSuppression.validateJSON(data['AvailSuppression']);
        }
        // validate the optional field `Bumper`
        if (data['Bumper']) { // data not null
          PutPlaybackConfigurationRequestBumper.validateJSON(data['Bumper']);
        }
        // validate the optional field `CdnConfiguration`
        if (data['CdnConfiguration']) { // data not null
          PutPlaybackConfigurationRequestCdnConfiguration.validateJSON(data['CdnConfiguration']);
        }
        // validate the optional field `DashConfiguration`
        if (data['DashConfiguration']) { // data not null
          PutPlaybackConfigurationRequestDashConfiguration.validateJSON(data['DashConfiguration']);
        }
        // validate the optional field `LivePreRollConfiguration`
        if (data['LivePreRollConfiguration']) { // data not null
          PutPlaybackConfigurationRequestLivePreRollConfiguration.validateJSON(data['LivePreRollConfiguration']);
        }
        // validate the optional field `ManifestProcessingRules`
        if (data['ManifestProcessingRules']) { // data not null
          PutPlaybackConfigurationRequestManifestProcessingRules.validateJSON(data['ManifestProcessingRules']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['SlateAdUrl'] && !(typeof data['SlateAdUrl'] === 'string' || data['SlateAdUrl'] instanceof String)) {
            throw new Error("Expected the field `SlateAdUrl` to be a primitive type in the JSON string but got " + data['SlateAdUrl']);
        }
        // ensure the json data is a string
        if (data['TranscodeProfileName'] && !(typeof data['TranscodeProfileName'] === 'string' || data['TranscodeProfileName'] instanceof String)) {
            throw new Error("Expected the field `TranscodeProfileName` to be a primitive type in the JSON string but got " + data['TranscodeProfileName']);
        }
        // ensure the json data is a string
        if (data['VideoContentSourceUrl'] && !(typeof data['VideoContentSourceUrl'] === 'string' || data['VideoContentSourceUrl'] instanceof String)) {
            throw new Error("Expected the field `VideoContentSourceUrl` to be a primitive type in the JSON string but got " + data['VideoContentSourceUrl']);
        }

        return true;
    }


}

PutPlaybackConfigurationRequest.RequiredProperties = ["Name"];

/**
 * The URL for the ad decision server (ADS). This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing you can provide a static VAST URL. The maximum length is 25,000 characters.
 * @member {String} AdDecisionServerUrl
 */
PutPlaybackConfigurationRequest.prototype['AdDecisionServerUrl'] = undefined;

/**
 * @member {module:model/PutPlaybackConfigurationRequestAvailSuppression} AvailSuppression
 */
PutPlaybackConfigurationRequest.prototype['AvailSuppression'] = undefined;

/**
 * @member {module:model/PutPlaybackConfigurationRequestBumper} Bumper
 */
PutPlaybackConfigurationRequest.prototype['Bumper'] = undefined;

/**
 * @member {module:model/PutPlaybackConfigurationRequestCdnConfiguration} CdnConfiguration
 */
PutPlaybackConfigurationRequest.prototype['CdnConfiguration'] = undefined;

/**
 * The predefined aliases for dynamic variables.
 * @member {Object.<String, Object.<String, String>>} ConfigurationAliases
 */
PutPlaybackConfigurationRequest.prototype['ConfigurationAliases'] = undefined;

/**
 * @member {module:model/PutPlaybackConfigurationRequestDashConfiguration} DashConfiguration
 */
PutPlaybackConfigurationRequest.prototype['DashConfiguration'] = undefined;

/**
 * @member {module:model/PutPlaybackConfigurationRequestLivePreRollConfiguration} LivePreRollConfiguration
 */
PutPlaybackConfigurationRequest.prototype['LivePreRollConfiguration'] = undefined;

/**
 * @member {module:model/PutPlaybackConfigurationRequestManifestProcessingRules} ManifestProcessingRules
 */
PutPlaybackConfigurationRequest.prototype['ManifestProcessingRules'] = undefined;

/**
 * The identifier for the playback configuration.
 * @member {String} Name
 */
PutPlaybackConfigurationRequest.prototype['Name'] = undefined;

/**
 * Defines the maximum duration of underfilled ad time (in seconds) allowed in an ad break. If the duration of underfilled ad time exceeds the personalization threshold, then the personalization of the ad break is abandoned and the underlying content is shown. This feature applies to <i>ad replacement</i> in live and VOD streams, rather than ad insertion, because it relies on an underlying content stream. For more information about ad break behavior, including ad replacement and insertion, see <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html\">Ad Behavior in AWS Elemental MediaTailor</a>.
 * @member {Number} PersonalizationThresholdSeconds
 */
PutPlaybackConfigurationRequest.prototype['PersonalizationThresholdSeconds'] = undefined;

/**
 * The URL for a high-quality video asset to transcode and use to fill in time that's not used by ads. AWS Elemental MediaTailor shows the slate to fill in gaps in media content. Configuring the slate is optional for non-VPAID configurations. For VPAID, the slate is required because MediaTailor provides it in the slots that are designated for dynamic ad content. The slate must be a high-quality asset that contains both audio and video.
 * @member {String} SlateAdUrl
 */
PutPlaybackConfigurationRequest.prototype['SlateAdUrl'] = undefined;

/**
 * The tags to assign to the playback configuration. Tags are key-value pairs that you can associate with Amazon resources to help with organization, access control, and cost tracking. For more information, see <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/tagging.html\">Tagging AWS Elemental MediaTailor Resources</a>.
 * @member {Object.<String, String>} tags
 */
PutPlaybackConfigurationRequest.prototype['tags'] = undefined;

/**
 * The name that is used to associate this playback configuration with a custom transcode profile. This overrides the dynamic transcoding defaults of MediaTailor. Use this only if you have already set up custom profiles with the help of AWS Support.
 * @member {String} TranscodeProfileName
 */
PutPlaybackConfigurationRequest.prototype['TranscodeProfileName'] = undefined;

/**
 * The URL prefix for the parent manifest for the stream, minus the asset ID. The maximum length is 512 characters.
 * @member {String} VideoContentSourceUrl
 */
PutPlaybackConfigurationRequest.prototype['VideoContentSourceUrl'] = undefined;






export default PutPlaybackConfigurationRequest;

