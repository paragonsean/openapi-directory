/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HttpPackageConfiguration from './HttpPackageConfiguration';

/**
 * The CreateVodSourceRequest model module.
 * @module model/CreateVodSourceRequest
 * @version 2018-04-23
 */
class CreateVodSourceRequest {
    /**
     * Constructs a new <code>CreateVodSourceRequest</code>.
     * @alias module:model/CreateVodSourceRequest
     * @param httpPackageConfigurations {Array.<module:model/HttpPackageConfiguration>} The VOD source's HTTP package configuration settings.
     */
    constructor(httpPackageConfigurations) { 
        
        CreateVodSourceRequest.initialize(this, httpPackageConfigurations);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, httpPackageConfigurations) { 
        obj['HttpPackageConfigurations'] = httpPackageConfigurations;
    }

    /**
     * Constructs a <code>CreateVodSourceRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateVodSourceRequest} obj Optional instance to populate.
     * @return {module:model/CreateVodSourceRequest} The populated <code>CreateVodSourceRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateVodSourceRequest();

            if (data.hasOwnProperty('HttpPackageConfigurations')) {
                obj['HttpPackageConfigurations'] = ApiClient.convertToType(data['HttpPackageConfigurations'], [HttpPackageConfiguration]);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateVodSourceRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateVodSourceRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateVodSourceRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['HttpPackageConfigurations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['HttpPackageConfigurations'])) {
                throw new Error("Expected the field `HttpPackageConfigurations` to be an array in the JSON data but got " + data['HttpPackageConfigurations']);
            }
            // validate the optional field `HttpPackageConfigurations` (array)
            for (const item of data['HttpPackageConfigurations']) {
                HttpPackageConfiguration.validateJSON(item);
            };
        }

        return true;
    }


}

CreateVodSourceRequest.RequiredProperties = ["HttpPackageConfigurations"];

/**
 * The VOD source's HTTP package configuration settings.
 * @member {Array.<module:model/HttpPackageConfiguration>} HttpPackageConfigurations
 */
CreateVodSourceRequest.prototype['HttpPackageConfigurations'] = undefined;

/**
 * The tags to assign to the VOD source. Tags are key-value pairs that you can associate with Amazon resources to help with organization, access control, and cost tracking. For more information, see <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/tagging.html\">Tagging AWS Elemental MediaTailor Resources</a>.
 * @member {Object.<String, String>} tags
 */
CreateVodSourceRequest.prototype['tags'] = undefined;






export default CreateVodSourceRequest;

