/**
 * AWS MediaTailor
 * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href=\"https://docs.aws.amazon.com/mediatailor/latest/ug/\">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
 *
 * The version of the OpenAPI document: 2018-04-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdBreak from './AdBreak';
import CreateProgramRequestScheduleConfiguration from './CreateProgramRequestScheduleConfiguration';

/**
 * The CreateProgramRequest model module.
 * @module model/CreateProgramRequest
 * @version 2018-04-23
 */
class CreateProgramRequest {
    /**
     * Constructs a new <code>CreateProgramRequest</code>.
     * @alias module:model/CreateProgramRequest
     * @param scheduleConfiguration {module:model/CreateProgramRequestScheduleConfiguration} 
     * @param sourceLocationName {String} The name of the source location.
     */
    constructor(scheduleConfiguration, sourceLocationName) { 
        
        CreateProgramRequest.initialize(this, scheduleConfiguration, sourceLocationName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, scheduleConfiguration, sourceLocationName) { 
        obj['ScheduleConfiguration'] = scheduleConfiguration;
        obj['SourceLocationName'] = sourceLocationName;
    }

    /**
     * Constructs a <code>CreateProgramRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateProgramRequest} obj Optional instance to populate.
     * @return {module:model/CreateProgramRequest} The populated <code>CreateProgramRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateProgramRequest();

            if (data.hasOwnProperty('AdBreaks')) {
                obj['AdBreaks'] = ApiClient.convertToType(data['AdBreaks'], [AdBreak]);
            }
            if (data.hasOwnProperty('LiveSourceName')) {
                obj['LiveSourceName'] = ApiClient.convertToType(data['LiveSourceName'], 'String');
            }
            if (data.hasOwnProperty('ScheduleConfiguration')) {
                obj['ScheduleConfiguration'] = CreateProgramRequestScheduleConfiguration.constructFromObject(data['ScheduleConfiguration']);
            }
            if (data.hasOwnProperty('SourceLocationName')) {
                obj['SourceLocationName'] = ApiClient.convertToType(data['SourceLocationName'], 'String');
            }
            if (data.hasOwnProperty('VodSourceName')) {
                obj['VodSourceName'] = ApiClient.convertToType(data['VodSourceName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateProgramRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateProgramRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateProgramRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['AdBreaks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['AdBreaks'])) {
                throw new Error("Expected the field `AdBreaks` to be an array in the JSON data but got " + data['AdBreaks']);
            }
            // validate the optional field `AdBreaks` (array)
            for (const item of data['AdBreaks']) {
                AdBreak.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['LiveSourceName'] && !(typeof data['LiveSourceName'] === 'string' || data['LiveSourceName'] instanceof String)) {
            throw new Error("Expected the field `LiveSourceName` to be a primitive type in the JSON string but got " + data['LiveSourceName']);
        }
        // validate the optional field `ScheduleConfiguration`
        if (data['ScheduleConfiguration']) { // data not null
          CreateProgramRequestScheduleConfiguration.validateJSON(data['ScheduleConfiguration']);
        }
        // ensure the json data is a string
        if (data['SourceLocationName'] && !(typeof data['SourceLocationName'] === 'string' || data['SourceLocationName'] instanceof String)) {
            throw new Error("Expected the field `SourceLocationName` to be a primitive type in the JSON string but got " + data['SourceLocationName']);
        }
        // ensure the json data is a string
        if (data['VodSourceName'] && !(typeof data['VodSourceName'] === 'string' || data['VodSourceName'] instanceof String)) {
            throw new Error("Expected the field `VodSourceName` to be a primitive type in the JSON string but got " + data['VodSourceName']);
        }

        return true;
    }


}

CreateProgramRequest.RequiredProperties = ["ScheduleConfiguration", "SourceLocationName"];

/**
 * The ad break configuration settings.
 * @member {Array.<module:model/AdBreak>} AdBreaks
 */
CreateProgramRequest.prototype['AdBreaks'] = undefined;

/**
 * The name of the LiveSource for this Program.
 * @member {String} LiveSourceName
 */
CreateProgramRequest.prototype['LiveSourceName'] = undefined;

/**
 * @member {module:model/CreateProgramRequestScheduleConfiguration} ScheduleConfiguration
 */
CreateProgramRequest.prototype['ScheduleConfiguration'] = undefined;

/**
 * The name of the source location.
 * @member {String} SourceLocationName
 */
CreateProgramRequest.prototype['SourceLocationName'] = undefined;

/**
 * The name that's used to refer to a VOD source.
 * @member {String} VodSourceName
 */
CreateProgramRequest.prototype['VodSourceName'] = undefined;






export default CreateProgramRequest;

