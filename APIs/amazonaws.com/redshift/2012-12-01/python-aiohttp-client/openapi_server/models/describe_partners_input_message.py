# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribePartnersInputMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, cluster_identifier: str=None, database_name: str=None, partner_name: str=None):
        """DescribePartnersInputMessage - a model defined in OpenAPI

        :param account_id: The account_id of this DescribePartnersInputMessage.
        :param cluster_identifier: The cluster_identifier of this DescribePartnersInputMessage.
        :param database_name: The database_name of this DescribePartnersInputMessage.
        :param partner_name: The partner_name of this DescribePartnersInputMessage.
        """
        self.openapi_types = {
            'account_id': str,
            'cluster_identifier': str,
            'database_name': str,
            'partner_name': str
        }

        self.attribute_map = {
            'account_id': 'AccountId',
            'cluster_identifier': 'ClusterIdentifier',
            'database_name': 'DatabaseName',
            'partner_name': 'PartnerName'
        }

        self._account_id = account_id
        self._cluster_identifier = cluster_identifier
        self._database_name = database_name
        self._partner_name = partner_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribePartnersInputMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribePartnersInputMessage of this DescribePartnersInputMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this DescribePartnersInputMessage.


        :return: The account_id of this DescribePartnersInputMessage.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this DescribePartnersInputMessage.


        :param account_id: The account_id of this DescribePartnersInputMessage.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def cluster_identifier(self):
        """Gets the cluster_identifier of this DescribePartnersInputMessage.


        :return: The cluster_identifier of this DescribePartnersInputMessage.
        :rtype: str
        """
        return self._cluster_identifier

    @cluster_identifier.setter
    def cluster_identifier(self, cluster_identifier):
        """Sets the cluster_identifier of this DescribePartnersInputMessage.


        :param cluster_identifier: The cluster_identifier of this DescribePartnersInputMessage.
        :type cluster_identifier: str
        """
        if cluster_identifier is None:
            raise ValueError("Invalid value for `cluster_identifier`, must not be `None`")

        self._cluster_identifier = cluster_identifier

    @property
    def database_name(self):
        """Gets the database_name of this DescribePartnersInputMessage.


        :return: The database_name of this DescribePartnersInputMessage.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this DescribePartnersInputMessage.


        :param database_name: The database_name of this DescribePartnersInputMessage.
        :type database_name: str
        """

        self._database_name = database_name

    @property
    def partner_name(self):
        """Gets the partner_name of this DescribePartnersInputMessage.


        :return: The partner_name of this DescribePartnersInputMessage.
        :rtype: str
        """
        return self._partner_name

    @partner_name.setter
    def partner_name(self, partner_name):
        """Sets the partner_name of this DescribePartnersInputMessage.


        :param partner_name: The partner_name of this DescribePartnersInputMessage.
        :type partner_name: str
        """

        self._partner_name = partner_name
