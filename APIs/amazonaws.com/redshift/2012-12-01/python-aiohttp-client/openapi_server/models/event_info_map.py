# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventInfoMap(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_id: str=None, event_categories: List=None, event_description: str=None, severity: str=None):
        """EventInfoMap - a model defined in OpenAPI

        :param event_id: The event_id of this EventInfoMap.
        :param event_categories: The event_categories of this EventInfoMap.
        :param event_description: The event_description of this EventInfoMap.
        :param severity: The severity of this EventInfoMap.
        """
        self.openapi_types = {
            'event_id': str,
            'event_categories': List,
            'event_description': str,
            'severity': str
        }

        self.attribute_map = {
            'event_id': 'EventId',
            'event_categories': 'EventCategories',
            'event_description': 'EventDescription',
            'severity': 'Severity'
        }

        self._event_id = event_id
        self._event_categories = event_categories
        self._event_description = event_description
        self._severity = severity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventInfoMap':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventInfoMap of this EventInfoMap.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_id(self):
        """Gets the event_id of this EventInfoMap.


        :return: The event_id of this EventInfoMap.
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this EventInfoMap.


        :param event_id: The event_id of this EventInfoMap.
        :type event_id: str
        """

        self._event_id = event_id

    @property
    def event_categories(self):
        """Gets the event_categories of this EventInfoMap.


        :return: The event_categories of this EventInfoMap.
        :rtype: List
        """
        return self._event_categories

    @event_categories.setter
    def event_categories(self, event_categories):
        """Sets the event_categories of this EventInfoMap.


        :param event_categories: The event_categories of this EventInfoMap.
        :type event_categories: List
        """

        self._event_categories = event_categories

    @property
    def event_description(self):
        """Gets the event_description of this EventInfoMap.


        :return: The event_description of this EventInfoMap.
        :rtype: str
        """
        return self._event_description

    @event_description.setter
    def event_description(self, event_description):
        """Sets the event_description of this EventInfoMap.


        :param event_description: The event_description of this EventInfoMap.
        :type event_description: str
        """

        self._event_description = event_description

    @property
    def severity(self):
        """Gets the severity of this EventInfoMap.


        :return: The severity of this EventInfoMap.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this EventInfoMap.


        :param severity: The severity of this EventInfoMap.
        :type severity: str
        """

        self._severity = severity
