# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateCustomDomainAssociationMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_domain_name: str=None, custom_domain_certificate_arn: str=None, cluster_identifier: str=None):
        """CreateCustomDomainAssociationMessage - a model defined in OpenAPI

        :param custom_domain_name: The custom_domain_name of this CreateCustomDomainAssociationMessage.
        :param custom_domain_certificate_arn: The custom_domain_certificate_arn of this CreateCustomDomainAssociationMessage.
        :param cluster_identifier: The cluster_identifier of this CreateCustomDomainAssociationMessage.
        """
        self.openapi_types = {
            'custom_domain_name': str,
            'custom_domain_certificate_arn': str,
            'cluster_identifier': str
        }

        self.attribute_map = {
            'custom_domain_name': 'CustomDomainName',
            'custom_domain_certificate_arn': 'CustomDomainCertificateArn',
            'cluster_identifier': 'ClusterIdentifier'
        }

        self._custom_domain_name = custom_domain_name
        self._custom_domain_certificate_arn = custom_domain_certificate_arn
        self._cluster_identifier = cluster_identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCustomDomainAssociationMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCustomDomainAssociationMessage of this CreateCustomDomainAssociationMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_domain_name(self):
        """Gets the custom_domain_name of this CreateCustomDomainAssociationMessage.


        :return: The custom_domain_name of this CreateCustomDomainAssociationMessage.
        :rtype: str
        """
        return self._custom_domain_name

    @custom_domain_name.setter
    def custom_domain_name(self, custom_domain_name):
        """Sets the custom_domain_name of this CreateCustomDomainAssociationMessage.


        :param custom_domain_name: The custom_domain_name of this CreateCustomDomainAssociationMessage.
        :type custom_domain_name: str
        """
        if custom_domain_name is None:
            raise ValueError("Invalid value for `custom_domain_name`, must not be `None`")

        self._custom_domain_name = custom_domain_name

    @property
    def custom_domain_certificate_arn(self):
        """Gets the custom_domain_certificate_arn of this CreateCustomDomainAssociationMessage.


        :return: The custom_domain_certificate_arn of this CreateCustomDomainAssociationMessage.
        :rtype: str
        """
        return self._custom_domain_certificate_arn

    @custom_domain_certificate_arn.setter
    def custom_domain_certificate_arn(self, custom_domain_certificate_arn):
        """Sets the custom_domain_certificate_arn of this CreateCustomDomainAssociationMessage.


        :param custom_domain_certificate_arn: The custom_domain_certificate_arn of this CreateCustomDomainAssociationMessage.
        :type custom_domain_certificate_arn: str
        """
        if custom_domain_certificate_arn is None:
            raise ValueError("Invalid value for `custom_domain_certificate_arn`, must not be `None`")

        self._custom_domain_certificate_arn = custom_domain_certificate_arn

    @property
    def cluster_identifier(self):
        """Gets the cluster_identifier of this CreateCustomDomainAssociationMessage.


        :return: The cluster_identifier of this CreateCustomDomainAssociationMessage.
        :rtype: str
        """
        return self._cluster_identifier

    @cluster_identifier.setter
    def cluster_identifier(self, cluster_identifier):
        """Sets the cluster_identifier of this CreateCustomDomainAssociationMessage.


        :param cluster_identifier: The cluster_identifier of this CreateCustomDomainAssociationMessage.
        :type cluster_identifier: str
        """
        if cluster_identifier is None:
            raise ValueError("Invalid value for `cluster_identifier`, must not be `None`")

        self._cluster_identifier = cluster_identifier
