# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action_type import ActionType
from openapi_server import util


class DescribeNodeConfigurationOptionsMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_type: ActionType=None, cluster_identifier: str=None, snapshot_identifier: str=None, snapshot_arn: str=None, owner_account: str=None, filters: List=None, marker: str=None, max_records: int=None):
        """DescribeNodeConfigurationOptionsMessage - a model defined in OpenAPI

        :param action_type: The action_type of this DescribeNodeConfigurationOptionsMessage.
        :param cluster_identifier: The cluster_identifier of this DescribeNodeConfigurationOptionsMessage.
        :param snapshot_identifier: The snapshot_identifier of this DescribeNodeConfigurationOptionsMessage.
        :param snapshot_arn: The snapshot_arn of this DescribeNodeConfigurationOptionsMessage.
        :param owner_account: The owner_account of this DescribeNodeConfigurationOptionsMessage.
        :param filters: The filters of this DescribeNodeConfigurationOptionsMessage.
        :param marker: The marker of this DescribeNodeConfigurationOptionsMessage.
        :param max_records: The max_records of this DescribeNodeConfigurationOptionsMessage.
        """
        self.openapi_types = {
            'action_type': ActionType,
            'cluster_identifier': str,
            'snapshot_identifier': str,
            'snapshot_arn': str,
            'owner_account': str,
            'filters': List,
            'marker': str,
            'max_records': int
        }

        self.attribute_map = {
            'action_type': 'ActionType',
            'cluster_identifier': 'ClusterIdentifier',
            'snapshot_identifier': 'SnapshotIdentifier',
            'snapshot_arn': 'SnapshotArn',
            'owner_account': 'OwnerAccount',
            'filters': 'Filters',
            'marker': 'Marker',
            'max_records': 'MaxRecords'
        }

        self._action_type = action_type
        self._cluster_identifier = cluster_identifier
        self._snapshot_identifier = snapshot_identifier
        self._snapshot_arn = snapshot_arn
        self._owner_account = owner_account
        self._filters = filters
        self._marker = marker
        self._max_records = max_records

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeNodeConfigurationOptionsMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeNodeConfigurationOptionsMessage of this DescribeNodeConfigurationOptionsMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_type(self):
        """Gets the action_type of this DescribeNodeConfigurationOptionsMessage.


        :return: The action_type of this DescribeNodeConfigurationOptionsMessage.
        :rtype: ActionType
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this DescribeNodeConfigurationOptionsMessage.


        :param action_type: The action_type of this DescribeNodeConfigurationOptionsMessage.
        :type action_type: ActionType
        """
        if action_type is None:
            raise ValueError("Invalid value for `action_type`, must not be `None`")

        self._action_type = action_type

    @property
    def cluster_identifier(self):
        """Gets the cluster_identifier of this DescribeNodeConfigurationOptionsMessage.


        :return: The cluster_identifier of this DescribeNodeConfigurationOptionsMessage.
        :rtype: str
        """
        return self._cluster_identifier

    @cluster_identifier.setter
    def cluster_identifier(self, cluster_identifier):
        """Sets the cluster_identifier of this DescribeNodeConfigurationOptionsMessage.


        :param cluster_identifier: The cluster_identifier of this DescribeNodeConfigurationOptionsMessage.
        :type cluster_identifier: str
        """

        self._cluster_identifier = cluster_identifier

    @property
    def snapshot_identifier(self):
        """Gets the snapshot_identifier of this DescribeNodeConfigurationOptionsMessage.


        :return: The snapshot_identifier of this DescribeNodeConfigurationOptionsMessage.
        :rtype: str
        """
        return self._snapshot_identifier

    @snapshot_identifier.setter
    def snapshot_identifier(self, snapshot_identifier):
        """Sets the snapshot_identifier of this DescribeNodeConfigurationOptionsMessage.


        :param snapshot_identifier: The snapshot_identifier of this DescribeNodeConfigurationOptionsMessage.
        :type snapshot_identifier: str
        """

        self._snapshot_identifier = snapshot_identifier

    @property
    def snapshot_arn(self):
        """Gets the snapshot_arn of this DescribeNodeConfigurationOptionsMessage.


        :return: The snapshot_arn of this DescribeNodeConfigurationOptionsMessage.
        :rtype: str
        """
        return self._snapshot_arn

    @snapshot_arn.setter
    def snapshot_arn(self, snapshot_arn):
        """Sets the snapshot_arn of this DescribeNodeConfigurationOptionsMessage.


        :param snapshot_arn: The snapshot_arn of this DescribeNodeConfigurationOptionsMessage.
        :type snapshot_arn: str
        """

        self._snapshot_arn = snapshot_arn

    @property
    def owner_account(self):
        """Gets the owner_account of this DescribeNodeConfigurationOptionsMessage.


        :return: The owner_account of this DescribeNodeConfigurationOptionsMessage.
        :rtype: str
        """
        return self._owner_account

    @owner_account.setter
    def owner_account(self, owner_account):
        """Sets the owner_account of this DescribeNodeConfigurationOptionsMessage.


        :param owner_account: The owner_account of this DescribeNodeConfigurationOptionsMessage.
        :type owner_account: str
        """

        self._owner_account = owner_account

    @property
    def filters(self):
        """Gets the filters of this DescribeNodeConfigurationOptionsMessage.


        :return: The filters of this DescribeNodeConfigurationOptionsMessage.
        :rtype: List
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this DescribeNodeConfigurationOptionsMessage.


        :param filters: The filters of this DescribeNodeConfigurationOptionsMessage.
        :type filters: List
        """

        self._filters = filters

    @property
    def marker(self):
        """Gets the marker of this DescribeNodeConfigurationOptionsMessage.


        :return: The marker of this DescribeNodeConfigurationOptionsMessage.
        :rtype: str
        """
        return self._marker

    @marker.setter
    def marker(self, marker):
        """Sets the marker of this DescribeNodeConfigurationOptionsMessage.


        :param marker: The marker of this DescribeNodeConfigurationOptionsMessage.
        :type marker: str
        """

        self._marker = marker

    @property
    def max_records(self):
        """Gets the max_records of this DescribeNodeConfigurationOptionsMessage.


        :return: The max_records of this DescribeNodeConfigurationOptionsMessage.
        :rtype: int
        """
        return self._max_records

    @max_records.setter
    def max_records(self, max_records):
        """Sets the max_records of this DescribeNodeConfigurationOptionsMessage.


        :param max_records: The max_records of this DescribeNodeConfigurationOptionsMessage.
        :type max_records: int
        """

        self._max_records = max_records
