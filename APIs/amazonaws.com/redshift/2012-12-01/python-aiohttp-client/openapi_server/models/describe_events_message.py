# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.source_type import SourceType
from openapi_server import util


class DescribeEventsMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source_identifier: str=None, source_type: SourceType=None, start_time: datetime=None, end_time: datetime=None, duration: int=None, max_records: int=None, marker: str=None):
        """DescribeEventsMessage - a model defined in OpenAPI

        :param source_identifier: The source_identifier of this DescribeEventsMessage.
        :param source_type: The source_type of this DescribeEventsMessage.
        :param start_time: The start_time of this DescribeEventsMessage.
        :param end_time: The end_time of this DescribeEventsMessage.
        :param duration: The duration of this DescribeEventsMessage.
        :param max_records: The max_records of this DescribeEventsMessage.
        :param marker: The marker of this DescribeEventsMessage.
        """
        self.openapi_types = {
            'source_identifier': str,
            'source_type': SourceType,
            'start_time': datetime,
            'end_time': datetime,
            'duration': int,
            'max_records': int,
            'marker': str
        }

        self.attribute_map = {
            'source_identifier': 'SourceIdentifier',
            'source_type': 'SourceType',
            'start_time': 'StartTime',
            'end_time': 'EndTime',
            'duration': 'Duration',
            'max_records': 'MaxRecords',
            'marker': 'Marker'
        }

        self._source_identifier = source_identifier
        self._source_type = source_type
        self._start_time = start_time
        self._end_time = end_time
        self._duration = duration
        self._max_records = max_records
        self._marker = marker

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeEventsMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeEventsMessage of this DescribeEventsMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_identifier(self):
        """Gets the source_identifier of this DescribeEventsMessage.


        :return: The source_identifier of this DescribeEventsMessage.
        :rtype: str
        """
        return self._source_identifier

    @source_identifier.setter
    def source_identifier(self, source_identifier):
        """Sets the source_identifier of this DescribeEventsMessage.


        :param source_identifier: The source_identifier of this DescribeEventsMessage.
        :type source_identifier: str
        """

        self._source_identifier = source_identifier

    @property
    def source_type(self):
        """Gets the source_type of this DescribeEventsMessage.


        :return: The source_type of this DescribeEventsMessage.
        :rtype: SourceType
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this DescribeEventsMessage.


        :param source_type: The source_type of this DescribeEventsMessage.
        :type source_type: SourceType
        """

        self._source_type = source_type

    @property
    def start_time(self):
        """Gets the start_time of this DescribeEventsMessage.


        :return: The start_time of this DescribeEventsMessage.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this DescribeEventsMessage.


        :param start_time: The start_time of this DescribeEventsMessage.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this DescribeEventsMessage.


        :return: The end_time of this DescribeEventsMessage.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this DescribeEventsMessage.


        :param end_time: The end_time of this DescribeEventsMessage.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def duration(self):
        """Gets the duration of this DescribeEventsMessage.


        :return: The duration of this DescribeEventsMessage.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this DescribeEventsMessage.


        :param duration: The duration of this DescribeEventsMessage.
        :type duration: int
        """

        self._duration = duration

    @property
    def max_records(self):
        """Gets the max_records of this DescribeEventsMessage.


        :return: The max_records of this DescribeEventsMessage.
        :rtype: int
        """
        return self._max_records

    @max_records.setter
    def max_records(self, max_records):
        """Sets the max_records of this DescribeEventsMessage.


        :param max_records: The max_records of this DescribeEventsMessage.
        :type max_records: int
        """

        self._max_records = max_records

    @property
    def marker(self):
        """Gets the marker of this DescribeEventsMessage.


        :return: The marker of this DescribeEventsMessage.
        :rtype: str
        """
        return self._marker

    @marker.setter
    def marker(self, marker):
        """Sets the marker of this DescribeEventsMessage.


        :param marker: The marker of this DescribeEventsMessage.
        :type marker: str
        """

        self._marker = marker
