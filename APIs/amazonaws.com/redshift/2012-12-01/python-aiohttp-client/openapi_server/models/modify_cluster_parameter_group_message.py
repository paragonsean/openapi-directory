# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ModifyClusterParameterGroupMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parameter_group_name: str=None, parameters: List=None):
        """ModifyClusterParameterGroupMessage - a model defined in OpenAPI

        :param parameter_group_name: The parameter_group_name of this ModifyClusterParameterGroupMessage.
        :param parameters: The parameters of this ModifyClusterParameterGroupMessage.
        """
        self.openapi_types = {
            'parameter_group_name': str,
            'parameters': List
        }

        self.attribute_map = {
            'parameter_group_name': 'ParameterGroupName',
            'parameters': 'Parameters'
        }

        self._parameter_group_name = parameter_group_name
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModifyClusterParameterGroupMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModifyClusterParameterGroupMessage of this ModifyClusterParameterGroupMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parameter_group_name(self):
        """Gets the parameter_group_name of this ModifyClusterParameterGroupMessage.


        :return: The parameter_group_name of this ModifyClusterParameterGroupMessage.
        :rtype: str
        """
        return self._parameter_group_name

    @parameter_group_name.setter
    def parameter_group_name(self, parameter_group_name):
        """Sets the parameter_group_name of this ModifyClusterParameterGroupMessage.


        :param parameter_group_name: The parameter_group_name of this ModifyClusterParameterGroupMessage.
        :type parameter_group_name: str
        """
        if parameter_group_name is None:
            raise ValueError("Invalid value for `parameter_group_name`, must not be `None`")

        self._parameter_group_name = parameter_group_name

    @property
    def parameters(self):
        """Gets the parameters of this ModifyClusterParameterGroupMessage.


        :return: The parameters of this ModifyClusterParameterGroupMessage.
        :rtype: List
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ModifyClusterParameterGroupMessage.


        :param parameters: The parameters of this ModifyClusterParameterGroupMessage.
        :type parameters: List
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")

        self._parameters = parameters
