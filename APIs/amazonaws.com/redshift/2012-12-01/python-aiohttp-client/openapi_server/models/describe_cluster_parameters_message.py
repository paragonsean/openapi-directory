# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeClusterParametersMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parameter_group_name: str=None, source: str=None, max_records: int=None, marker: str=None):
        """DescribeClusterParametersMessage - a model defined in OpenAPI

        :param parameter_group_name: The parameter_group_name of this DescribeClusterParametersMessage.
        :param source: The source of this DescribeClusterParametersMessage.
        :param max_records: The max_records of this DescribeClusterParametersMessage.
        :param marker: The marker of this DescribeClusterParametersMessage.
        """
        self.openapi_types = {
            'parameter_group_name': str,
            'source': str,
            'max_records': int,
            'marker': str
        }

        self.attribute_map = {
            'parameter_group_name': 'ParameterGroupName',
            'source': 'Source',
            'max_records': 'MaxRecords',
            'marker': 'Marker'
        }

        self._parameter_group_name = parameter_group_name
        self._source = source
        self._max_records = max_records
        self._marker = marker

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeClusterParametersMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeClusterParametersMessage of this DescribeClusterParametersMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parameter_group_name(self):
        """Gets the parameter_group_name of this DescribeClusterParametersMessage.


        :return: The parameter_group_name of this DescribeClusterParametersMessage.
        :rtype: str
        """
        return self._parameter_group_name

    @parameter_group_name.setter
    def parameter_group_name(self, parameter_group_name):
        """Sets the parameter_group_name of this DescribeClusterParametersMessage.


        :param parameter_group_name: The parameter_group_name of this DescribeClusterParametersMessage.
        :type parameter_group_name: str
        """
        if parameter_group_name is None:
            raise ValueError("Invalid value for `parameter_group_name`, must not be `None`")

        self._parameter_group_name = parameter_group_name

    @property
    def source(self):
        """Gets the source of this DescribeClusterParametersMessage.


        :return: The source of this DescribeClusterParametersMessage.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this DescribeClusterParametersMessage.


        :param source: The source of this DescribeClusterParametersMessage.
        :type source: str
        """

        self._source = source

    @property
    def max_records(self):
        """Gets the max_records of this DescribeClusterParametersMessage.


        :return: The max_records of this DescribeClusterParametersMessage.
        :rtype: int
        """
        return self._max_records

    @max_records.setter
    def max_records(self, max_records):
        """Sets the max_records of this DescribeClusterParametersMessage.


        :param max_records: The max_records of this DescribeClusterParametersMessage.
        :type max_records: int
        """

        self._max_records = max_records

    @property
    def marker(self):
        """Gets the marker of this DescribeClusterParametersMessage.


        :return: The marker of this DescribeClusterParametersMessage.
        :rtype: str
        """
        return self._marker

    @marker.setter
    def marker(self, marker):
        """Sets the marker of this DescribeClusterParametersMessage.


        :param marker: The marker of this DescribeClusterParametersMessage.
        :type marker: str
        """

        self._marker = marker
