# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeleteClusterSnapshotMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, snapshot_identifier: str=None, snapshot_cluster_identifier: str=None):
        """DeleteClusterSnapshotMessage - a model defined in OpenAPI

        :param snapshot_identifier: The snapshot_identifier of this DeleteClusterSnapshotMessage.
        :param snapshot_cluster_identifier: The snapshot_cluster_identifier of this DeleteClusterSnapshotMessage.
        """
        self.openapi_types = {
            'snapshot_identifier': str,
            'snapshot_cluster_identifier': str
        }

        self.attribute_map = {
            'snapshot_identifier': 'SnapshotIdentifier',
            'snapshot_cluster_identifier': 'SnapshotClusterIdentifier'
        }

        self._snapshot_identifier = snapshot_identifier
        self._snapshot_cluster_identifier = snapshot_cluster_identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteClusterSnapshotMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteClusterSnapshotMessage of this DeleteClusterSnapshotMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def snapshot_identifier(self):
        """Gets the snapshot_identifier of this DeleteClusterSnapshotMessage.


        :return: The snapshot_identifier of this DeleteClusterSnapshotMessage.
        :rtype: str
        """
        return self._snapshot_identifier

    @snapshot_identifier.setter
    def snapshot_identifier(self, snapshot_identifier):
        """Sets the snapshot_identifier of this DeleteClusterSnapshotMessage.


        :param snapshot_identifier: The snapshot_identifier of this DeleteClusterSnapshotMessage.
        :type snapshot_identifier: str
        """
        if snapshot_identifier is None:
            raise ValueError("Invalid value for `snapshot_identifier`, must not be `None`")

        self._snapshot_identifier = snapshot_identifier

    @property
    def snapshot_cluster_identifier(self):
        """Gets the snapshot_cluster_identifier of this DeleteClusterSnapshotMessage.


        :return: The snapshot_cluster_identifier of this DeleteClusterSnapshotMessage.
        :rtype: str
        """
        return self._snapshot_cluster_identifier

    @snapshot_cluster_identifier.setter
    def snapshot_cluster_identifier(self, snapshot_cluster_identifier):
        """Sets the snapshot_cluster_identifier of this DeleteClusterSnapshotMessage.


        :param snapshot_cluster_identifier: The snapshot_cluster_identifier of this DeleteClusterSnapshotMessage.
        :type snapshot_cluster_identifier: str
        """

        self._snapshot_cluster_identifier = snapshot_cluster_identifier
