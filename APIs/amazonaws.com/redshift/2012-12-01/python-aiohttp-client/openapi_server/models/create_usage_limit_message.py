# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.usage_limit_breach_action import UsageLimitBreachAction
from openapi_server.models.usage_limit_feature_type import UsageLimitFeatureType
from openapi_server.models.usage_limit_limit_type import UsageLimitLimitType
from openapi_server.models.usage_limit_period import UsageLimitPeriod
from openapi_server import util


class CreateUsageLimitMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_identifier: str=None, feature_type: UsageLimitFeatureType=None, limit_type: UsageLimitLimitType=None, amount: int=None, period: UsageLimitPeriod=None, breach_action: UsageLimitBreachAction=None, tags: List=None):
        """CreateUsageLimitMessage - a model defined in OpenAPI

        :param cluster_identifier: The cluster_identifier of this CreateUsageLimitMessage.
        :param feature_type: The feature_type of this CreateUsageLimitMessage.
        :param limit_type: The limit_type of this CreateUsageLimitMessage.
        :param amount: The amount of this CreateUsageLimitMessage.
        :param period: The period of this CreateUsageLimitMessage.
        :param breach_action: The breach_action of this CreateUsageLimitMessage.
        :param tags: The tags of this CreateUsageLimitMessage.
        """
        self.openapi_types = {
            'cluster_identifier': str,
            'feature_type': UsageLimitFeatureType,
            'limit_type': UsageLimitLimitType,
            'amount': int,
            'period': UsageLimitPeriod,
            'breach_action': UsageLimitBreachAction,
            'tags': List
        }

        self.attribute_map = {
            'cluster_identifier': 'ClusterIdentifier',
            'feature_type': 'FeatureType',
            'limit_type': 'LimitType',
            'amount': 'Amount',
            'period': 'Period',
            'breach_action': 'BreachAction',
            'tags': 'Tags'
        }

        self._cluster_identifier = cluster_identifier
        self._feature_type = feature_type
        self._limit_type = limit_type
        self._amount = amount
        self._period = period
        self._breach_action = breach_action
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateUsageLimitMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateUsageLimitMessage of this CreateUsageLimitMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_identifier(self):
        """Gets the cluster_identifier of this CreateUsageLimitMessage.


        :return: The cluster_identifier of this CreateUsageLimitMessage.
        :rtype: str
        """
        return self._cluster_identifier

    @cluster_identifier.setter
    def cluster_identifier(self, cluster_identifier):
        """Sets the cluster_identifier of this CreateUsageLimitMessage.


        :param cluster_identifier: The cluster_identifier of this CreateUsageLimitMessage.
        :type cluster_identifier: str
        """
        if cluster_identifier is None:
            raise ValueError("Invalid value for `cluster_identifier`, must not be `None`")

        self._cluster_identifier = cluster_identifier

    @property
    def feature_type(self):
        """Gets the feature_type of this CreateUsageLimitMessage.


        :return: The feature_type of this CreateUsageLimitMessage.
        :rtype: UsageLimitFeatureType
        """
        return self._feature_type

    @feature_type.setter
    def feature_type(self, feature_type):
        """Sets the feature_type of this CreateUsageLimitMessage.


        :param feature_type: The feature_type of this CreateUsageLimitMessage.
        :type feature_type: UsageLimitFeatureType
        """
        if feature_type is None:
            raise ValueError("Invalid value for `feature_type`, must not be `None`")

        self._feature_type = feature_type

    @property
    def limit_type(self):
        """Gets the limit_type of this CreateUsageLimitMessage.


        :return: The limit_type of this CreateUsageLimitMessage.
        :rtype: UsageLimitLimitType
        """
        return self._limit_type

    @limit_type.setter
    def limit_type(self, limit_type):
        """Sets the limit_type of this CreateUsageLimitMessage.


        :param limit_type: The limit_type of this CreateUsageLimitMessage.
        :type limit_type: UsageLimitLimitType
        """
        if limit_type is None:
            raise ValueError("Invalid value for `limit_type`, must not be `None`")

        self._limit_type = limit_type

    @property
    def amount(self):
        """Gets the amount of this CreateUsageLimitMessage.


        :return: The amount of this CreateUsageLimitMessage.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CreateUsageLimitMessage.


        :param amount: The amount of this CreateUsageLimitMessage.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def period(self):
        """Gets the period of this CreateUsageLimitMessage.


        :return: The period of this CreateUsageLimitMessage.
        :rtype: UsageLimitPeriod
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this CreateUsageLimitMessage.


        :param period: The period of this CreateUsageLimitMessage.
        :type period: UsageLimitPeriod
        """

        self._period = period

    @property
    def breach_action(self):
        """Gets the breach_action of this CreateUsageLimitMessage.


        :return: The breach_action of this CreateUsageLimitMessage.
        :rtype: UsageLimitBreachAction
        """
        return self._breach_action

    @breach_action.setter
    def breach_action(self, breach_action):
        """Sets the breach_action of this CreateUsageLimitMessage.


        :param breach_action: The breach_action of this CreateUsageLimitMessage.
        :type breach_action: UsageLimitBreachAction
        """

        self._breach_action = breach_action

    @property
    def tags(self):
        """Gets the tags of this CreateUsageLimitMessage.


        :return: The tags of this CreateUsageLimitMessage.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateUsageLimitMessage.


        :param tags: The tags of this CreateUsageLimitMessage.
        :type tags: List
        """

        self._tags = tags
