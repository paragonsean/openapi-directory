# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.parameter_apply_type import ParameterApplyType
from openapi_server import util


class Parameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parameter_name: str=None, parameter_value: str=None, description: str=None, source: str=None, data_type: str=None, allowed_values: str=None, apply_type: ParameterApplyType=None, is_modifiable: bool=None, minimum_engine_version: str=None):
        """Parameter - a model defined in OpenAPI

        :param parameter_name: The parameter_name of this Parameter.
        :param parameter_value: The parameter_value of this Parameter.
        :param description: The description of this Parameter.
        :param source: The source of this Parameter.
        :param data_type: The data_type of this Parameter.
        :param allowed_values: The allowed_values of this Parameter.
        :param apply_type: The apply_type of this Parameter.
        :param is_modifiable: The is_modifiable of this Parameter.
        :param minimum_engine_version: The minimum_engine_version of this Parameter.
        """
        self.openapi_types = {
            'parameter_name': str,
            'parameter_value': str,
            'description': str,
            'source': str,
            'data_type': str,
            'allowed_values': str,
            'apply_type': ParameterApplyType,
            'is_modifiable': bool,
            'minimum_engine_version': str
        }

        self.attribute_map = {
            'parameter_name': 'ParameterName',
            'parameter_value': 'ParameterValue',
            'description': 'Description',
            'source': 'Source',
            'data_type': 'DataType',
            'allowed_values': 'AllowedValues',
            'apply_type': 'ApplyType',
            'is_modifiable': 'IsModifiable',
            'minimum_engine_version': 'MinimumEngineVersion'
        }

        self._parameter_name = parameter_name
        self._parameter_value = parameter_value
        self._description = description
        self._source = source
        self._data_type = data_type
        self._allowed_values = allowed_values
        self._apply_type = apply_type
        self._is_modifiable = is_modifiable
        self._minimum_engine_version = minimum_engine_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Parameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Parameter of this Parameter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parameter_name(self):
        """Gets the parameter_name of this Parameter.


        :return: The parameter_name of this Parameter.
        :rtype: str
        """
        return self._parameter_name

    @parameter_name.setter
    def parameter_name(self, parameter_name):
        """Sets the parameter_name of this Parameter.


        :param parameter_name: The parameter_name of this Parameter.
        :type parameter_name: str
        """

        self._parameter_name = parameter_name

    @property
    def parameter_value(self):
        """Gets the parameter_value of this Parameter.


        :return: The parameter_value of this Parameter.
        :rtype: str
        """
        return self._parameter_value

    @parameter_value.setter
    def parameter_value(self, parameter_value):
        """Sets the parameter_value of this Parameter.


        :param parameter_value: The parameter_value of this Parameter.
        :type parameter_value: str
        """

        self._parameter_value = parameter_value

    @property
    def description(self):
        """Gets the description of this Parameter.


        :return: The description of this Parameter.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Parameter.


        :param description: The description of this Parameter.
        :type description: str
        """

        self._description = description

    @property
    def source(self):
        """Gets the source of this Parameter.


        :return: The source of this Parameter.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Parameter.


        :param source: The source of this Parameter.
        :type source: str
        """

        self._source = source

    @property
    def data_type(self):
        """Gets the data_type of this Parameter.


        :return: The data_type of this Parameter.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this Parameter.


        :param data_type: The data_type of this Parameter.
        :type data_type: str
        """

        self._data_type = data_type

    @property
    def allowed_values(self):
        """Gets the allowed_values of this Parameter.


        :return: The allowed_values of this Parameter.
        :rtype: str
        """
        return self._allowed_values

    @allowed_values.setter
    def allowed_values(self, allowed_values):
        """Sets the allowed_values of this Parameter.


        :param allowed_values: The allowed_values of this Parameter.
        :type allowed_values: str
        """

        self._allowed_values = allowed_values

    @property
    def apply_type(self):
        """Gets the apply_type of this Parameter.


        :return: The apply_type of this Parameter.
        :rtype: ParameterApplyType
        """
        return self._apply_type

    @apply_type.setter
    def apply_type(self, apply_type):
        """Sets the apply_type of this Parameter.


        :param apply_type: The apply_type of this Parameter.
        :type apply_type: ParameterApplyType
        """

        self._apply_type = apply_type

    @property
    def is_modifiable(self):
        """Gets the is_modifiable of this Parameter.


        :return: The is_modifiable of this Parameter.
        :rtype: bool
        """
        return self._is_modifiable

    @is_modifiable.setter
    def is_modifiable(self, is_modifiable):
        """Sets the is_modifiable of this Parameter.


        :param is_modifiable: The is_modifiable of this Parameter.
        :type is_modifiable: bool
        """

        self._is_modifiable = is_modifiable

    @property
    def minimum_engine_version(self):
        """Gets the minimum_engine_version of this Parameter.


        :return: The minimum_engine_version of this Parameter.
        :rtype: str
        """
        return self._minimum_engine_version

    @minimum_engine_version.setter
    def minimum_engine_version(self, minimum_engine_version):
        """Sets the minimum_engine_version of this Parameter.


        :param minimum_engine_version: The minimum_engine_version of this Parameter.
        :type minimum_engine_version: str
        """

        self._minimum_engine_version = minimum_engine_version
