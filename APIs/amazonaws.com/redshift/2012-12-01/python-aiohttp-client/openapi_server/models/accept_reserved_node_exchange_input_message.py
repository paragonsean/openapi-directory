# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AcceptReservedNodeExchangeInputMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, reserved_node_id: str=None, target_reserved_node_offering_id: str=None):
        """AcceptReservedNodeExchangeInputMessage - a model defined in OpenAPI

        :param reserved_node_id: The reserved_node_id of this AcceptReservedNodeExchangeInputMessage.
        :param target_reserved_node_offering_id: The target_reserved_node_offering_id of this AcceptReservedNodeExchangeInputMessage.
        """
        self.openapi_types = {
            'reserved_node_id': str,
            'target_reserved_node_offering_id': str
        }

        self.attribute_map = {
            'reserved_node_id': 'ReservedNodeId',
            'target_reserved_node_offering_id': 'TargetReservedNodeOfferingId'
        }

        self._reserved_node_id = reserved_node_id
        self._target_reserved_node_offering_id = target_reserved_node_offering_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AcceptReservedNodeExchangeInputMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AcceptReservedNodeExchangeInputMessage of this AcceptReservedNodeExchangeInputMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reserved_node_id(self):
        """Gets the reserved_node_id of this AcceptReservedNodeExchangeInputMessage.


        :return: The reserved_node_id of this AcceptReservedNodeExchangeInputMessage.
        :rtype: str
        """
        return self._reserved_node_id

    @reserved_node_id.setter
    def reserved_node_id(self, reserved_node_id):
        """Sets the reserved_node_id of this AcceptReservedNodeExchangeInputMessage.


        :param reserved_node_id: The reserved_node_id of this AcceptReservedNodeExchangeInputMessage.
        :type reserved_node_id: str
        """
        if reserved_node_id is None:
            raise ValueError("Invalid value for `reserved_node_id`, must not be `None`")

        self._reserved_node_id = reserved_node_id

    @property
    def target_reserved_node_offering_id(self):
        """Gets the target_reserved_node_offering_id of this AcceptReservedNodeExchangeInputMessage.


        :return: The target_reserved_node_offering_id of this AcceptReservedNodeExchangeInputMessage.
        :rtype: str
        """
        return self._target_reserved_node_offering_id

    @target_reserved_node_offering_id.setter
    def target_reserved_node_offering_id(self, target_reserved_node_offering_id):
        """Sets the target_reserved_node_offering_id of this AcceptReservedNodeExchangeInputMessage.


        :param target_reserved_node_offering_id: The target_reserved_node_offering_id of this AcceptReservedNodeExchangeInputMessage.
        :type target_reserved_node_offering_id: str
        """
        if target_reserved_node_offering_id is None:
            raise ValueError("Invalid value for `target_reserved_node_offering_id`, must not be `None`")

        self._target_reserved_node_offering_id = target_reserved_node_offering_id
