# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateEndpointAccessMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_identifier: str=None, resource_owner: str=None, endpoint_name: str=None, subnet_group_name: str=None, vpc_security_group_ids: List=None):
        """CreateEndpointAccessMessage - a model defined in OpenAPI

        :param cluster_identifier: The cluster_identifier of this CreateEndpointAccessMessage.
        :param resource_owner: The resource_owner of this CreateEndpointAccessMessage.
        :param endpoint_name: The endpoint_name of this CreateEndpointAccessMessage.
        :param subnet_group_name: The subnet_group_name of this CreateEndpointAccessMessage.
        :param vpc_security_group_ids: The vpc_security_group_ids of this CreateEndpointAccessMessage.
        """
        self.openapi_types = {
            'cluster_identifier': str,
            'resource_owner': str,
            'endpoint_name': str,
            'subnet_group_name': str,
            'vpc_security_group_ids': List
        }

        self.attribute_map = {
            'cluster_identifier': 'ClusterIdentifier',
            'resource_owner': 'ResourceOwner',
            'endpoint_name': 'EndpointName',
            'subnet_group_name': 'SubnetGroupName',
            'vpc_security_group_ids': 'VpcSecurityGroupIds'
        }

        self._cluster_identifier = cluster_identifier
        self._resource_owner = resource_owner
        self._endpoint_name = endpoint_name
        self._subnet_group_name = subnet_group_name
        self._vpc_security_group_ids = vpc_security_group_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateEndpointAccessMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateEndpointAccessMessage of this CreateEndpointAccessMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_identifier(self):
        """Gets the cluster_identifier of this CreateEndpointAccessMessage.


        :return: The cluster_identifier of this CreateEndpointAccessMessage.
        :rtype: str
        """
        return self._cluster_identifier

    @cluster_identifier.setter
    def cluster_identifier(self, cluster_identifier):
        """Sets the cluster_identifier of this CreateEndpointAccessMessage.


        :param cluster_identifier: The cluster_identifier of this CreateEndpointAccessMessage.
        :type cluster_identifier: str
        """

        self._cluster_identifier = cluster_identifier

    @property
    def resource_owner(self):
        """Gets the resource_owner of this CreateEndpointAccessMessage.


        :return: The resource_owner of this CreateEndpointAccessMessage.
        :rtype: str
        """
        return self._resource_owner

    @resource_owner.setter
    def resource_owner(self, resource_owner):
        """Sets the resource_owner of this CreateEndpointAccessMessage.


        :param resource_owner: The resource_owner of this CreateEndpointAccessMessage.
        :type resource_owner: str
        """

        self._resource_owner = resource_owner

    @property
    def endpoint_name(self):
        """Gets the endpoint_name of this CreateEndpointAccessMessage.


        :return: The endpoint_name of this CreateEndpointAccessMessage.
        :rtype: str
        """
        return self._endpoint_name

    @endpoint_name.setter
    def endpoint_name(self, endpoint_name):
        """Sets the endpoint_name of this CreateEndpointAccessMessage.


        :param endpoint_name: The endpoint_name of this CreateEndpointAccessMessage.
        :type endpoint_name: str
        """
        if endpoint_name is None:
            raise ValueError("Invalid value for `endpoint_name`, must not be `None`")

        self._endpoint_name = endpoint_name

    @property
    def subnet_group_name(self):
        """Gets the subnet_group_name of this CreateEndpointAccessMessage.


        :return: The subnet_group_name of this CreateEndpointAccessMessage.
        :rtype: str
        """
        return self._subnet_group_name

    @subnet_group_name.setter
    def subnet_group_name(self, subnet_group_name):
        """Sets the subnet_group_name of this CreateEndpointAccessMessage.


        :param subnet_group_name: The subnet_group_name of this CreateEndpointAccessMessage.
        :type subnet_group_name: str
        """
        if subnet_group_name is None:
            raise ValueError("Invalid value for `subnet_group_name`, must not be `None`")

        self._subnet_group_name = subnet_group_name

    @property
    def vpc_security_group_ids(self):
        """Gets the vpc_security_group_ids of this CreateEndpointAccessMessage.


        :return: The vpc_security_group_ids of this CreateEndpointAccessMessage.
        :rtype: List
        """
        return self._vpc_security_group_ids

    @vpc_security_group_ids.setter
    def vpc_security_group_ids(self, vpc_security_group_ids):
        """Sets the vpc_security_group_ids of this CreateEndpointAccessMessage.


        :param vpc_security_group_ids: The vpc_security_group_ids of this CreateEndpointAccessMessage.
        :type vpc_security_group_ids: List
        """

        self._vpc_security_group_ids = vpc_security_group_ids
