# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.usage_limit_breach_action import UsageLimitBreachAction
from openapi_server import util


class ModifyUsageLimitMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, usage_limit_id: str=None, amount: int=None, breach_action: UsageLimitBreachAction=None):
        """ModifyUsageLimitMessage - a model defined in OpenAPI

        :param usage_limit_id: The usage_limit_id of this ModifyUsageLimitMessage.
        :param amount: The amount of this ModifyUsageLimitMessage.
        :param breach_action: The breach_action of this ModifyUsageLimitMessage.
        """
        self.openapi_types = {
            'usage_limit_id': str,
            'amount': int,
            'breach_action': UsageLimitBreachAction
        }

        self.attribute_map = {
            'usage_limit_id': 'UsageLimitId',
            'amount': 'Amount',
            'breach_action': 'BreachAction'
        }

        self._usage_limit_id = usage_limit_id
        self._amount = amount
        self._breach_action = breach_action

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModifyUsageLimitMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModifyUsageLimitMessage of this ModifyUsageLimitMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def usage_limit_id(self):
        """Gets the usage_limit_id of this ModifyUsageLimitMessage.


        :return: The usage_limit_id of this ModifyUsageLimitMessage.
        :rtype: str
        """
        return self._usage_limit_id

    @usage_limit_id.setter
    def usage_limit_id(self, usage_limit_id):
        """Sets the usage_limit_id of this ModifyUsageLimitMessage.


        :param usage_limit_id: The usage_limit_id of this ModifyUsageLimitMessage.
        :type usage_limit_id: str
        """
        if usage_limit_id is None:
            raise ValueError("Invalid value for `usage_limit_id`, must not be `None`")

        self._usage_limit_id = usage_limit_id

    @property
    def amount(self):
        """Gets the amount of this ModifyUsageLimitMessage.


        :return: The amount of this ModifyUsageLimitMessage.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ModifyUsageLimitMessage.


        :param amount: The amount of this ModifyUsageLimitMessage.
        :type amount: int
        """

        self._amount = amount

    @property
    def breach_action(self):
        """Gets the breach_action of this ModifyUsageLimitMessage.


        :return: The breach_action of this ModifyUsageLimitMessage.
        :rtype: UsageLimitBreachAction
        """
        return self._breach_action

    @breach_action.setter
    def breach_action(self, breach_action):
        """Sets the breach_action of this ModifyUsageLimitMessage.


        :param breach_action: The breach_action of this ModifyUsageLimitMessage.
        :type breach_action: UsageLimitBreachAction
        """

        self._breach_action = breach_action
