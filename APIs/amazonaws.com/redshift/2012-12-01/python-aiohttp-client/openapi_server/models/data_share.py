# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataShare(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_share_arn: str=None, producer_arn: str=None, allow_publicly_accessible_consumers: bool=None, data_share_associations: List=None, managed_by: str=None):
        """DataShare - a model defined in OpenAPI

        :param data_share_arn: The data_share_arn of this DataShare.
        :param producer_arn: The producer_arn of this DataShare.
        :param allow_publicly_accessible_consumers: The allow_publicly_accessible_consumers of this DataShare.
        :param data_share_associations: The data_share_associations of this DataShare.
        :param managed_by: The managed_by of this DataShare.
        """
        self.openapi_types = {
            'data_share_arn': str,
            'producer_arn': str,
            'allow_publicly_accessible_consumers': bool,
            'data_share_associations': List,
            'managed_by': str
        }

        self.attribute_map = {
            'data_share_arn': 'DataShareArn',
            'producer_arn': 'ProducerArn',
            'allow_publicly_accessible_consumers': 'AllowPubliclyAccessibleConsumers',
            'data_share_associations': 'DataShareAssociations',
            'managed_by': 'ManagedBy'
        }

        self._data_share_arn = data_share_arn
        self._producer_arn = producer_arn
        self._allow_publicly_accessible_consumers = allow_publicly_accessible_consumers
        self._data_share_associations = data_share_associations
        self._managed_by = managed_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataShare':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataShare of this DataShare.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_share_arn(self):
        """Gets the data_share_arn of this DataShare.


        :return: The data_share_arn of this DataShare.
        :rtype: str
        """
        return self._data_share_arn

    @data_share_arn.setter
    def data_share_arn(self, data_share_arn):
        """Sets the data_share_arn of this DataShare.


        :param data_share_arn: The data_share_arn of this DataShare.
        :type data_share_arn: str
        """

        self._data_share_arn = data_share_arn

    @property
    def producer_arn(self):
        """Gets the producer_arn of this DataShare.


        :return: The producer_arn of this DataShare.
        :rtype: str
        """
        return self._producer_arn

    @producer_arn.setter
    def producer_arn(self, producer_arn):
        """Sets the producer_arn of this DataShare.


        :param producer_arn: The producer_arn of this DataShare.
        :type producer_arn: str
        """

        self._producer_arn = producer_arn

    @property
    def allow_publicly_accessible_consumers(self):
        """Gets the allow_publicly_accessible_consumers of this DataShare.


        :return: The allow_publicly_accessible_consumers of this DataShare.
        :rtype: bool
        """
        return self._allow_publicly_accessible_consumers

    @allow_publicly_accessible_consumers.setter
    def allow_publicly_accessible_consumers(self, allow_publicly_accessible_consumers):
        """Sets the allow_publicly_accessible_consumers of this DataShare.


        :param allow_publicly_accessible_consumers: The allow_publicly_accessible_consumers of this DataShare.
        :type allow_publicly_accessible_consumers: bool
        """

        self._allow_publicly_accessible_consumers = allow_publicly_accessible_consumers

    @property
    def data_share_associations(self):
        """Gets the data_share_associations of this DataShare.


        :return: The data_share_associations of this DataShare.
        :rtype: List
        """
        return self._data_share_associations

    @data_share_associations.setter
    def data_share_associations(self, data_share_associations):
        """Sets the data_share_associations of this DataShare.


        :param data_share_associations: The data_share_associations of this DataShare.
        :type data_share_associations: List
        """

        self._data_share_associations = data_share_associations

    @property
    def managed_by(self):
        """Gets the managed_by of this DataShare.


        :return: The managed_by of this DataShare.
        :rtype: str
        """
        return self._managed_by

    @managed_by.setter
    def managed_by(self, managed_by):
        """Sets the managed_by of this DataShare.


        :param managed_by: The managed_by of this DataShare.
        :type managed_by: str
        """

        self._managed_by = managed_by
