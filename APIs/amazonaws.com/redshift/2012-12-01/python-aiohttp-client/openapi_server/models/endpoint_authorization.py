# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authorization_status import AuthorizationStatus
from openapi_server import util


class EndpointAuthorization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, grantor: str=None, grantee: str=None, cluster_identifier: str=None, authorize_time: datetime=None, cluster_status: str=None, status: AuthorizationStatus=None, allowed_all_vpcs: bool=None, allowed_vpcs: List=None, endpoint_count: int=None):
        """EndpointAuthorization - a model defined in OpenAPI

        :param grantor: The grantor of this EndpointAuthorization.
        :param grantee: The grantee of this EndpointAuthorization.
        :param cluster_identifier: The cluster_identifier of this EndpointAuthorization.
        :param authorize_time: The authorize_time of this EndpointAuthorization.
        :param cluster_status: The cluster_status of this EndpointAuthorization.
        :param status: The status of this EndpointAuthorization.
        :param allowed_all_vpcs: The allowed_all_vpcs of this EndpointAuthorization.
        :param allowed_vpcs: The allowed_vpcs of this EndpointAuthorization.
        :param endpoint_count: The endpoint_count of this EndpointAuthorization.
        """
        self.openapi_types = {
            'grantor': str,
            'grantee': str,
            'cluster_identifier': str,
            'authorize_time': datetime,
            'cluster_status': str,
            'status': AuthorizationStatus,
            'allowed_all_vpcs': bool,
            'allowed_vpcs': List,
            'endpoint_count': int
        }

        self.attribute_map = {
            'grantor': 'Grantor',
            'grantee': 'Grantee',
            'cluster_identifier': 'ClusterIdentifier',
            'authorize_time': 'AuthorizeTime',
            'cluster_status': 'ClusterStatus',
            'status': 'Status',
            'allowed_all_vpcs': 'AllowedAllVPCs',
            'allowed_vpcs': 'AllowedVPCs',
            'endpoint_count': 'EndpointCount'
        }

        self._grantor = grantor
        self._grantee = grantee
        self._cluster_identifier = cluster_identifier
        self._authorize_time = authorize_time
        self._cluster_status = cluster_status
        self._status = status
        self._allowed_all_vpcs = allowed_all_vpcs
        self._allowed_vpcs = allowed_vpcs
        self._endpoint_count = endpoint_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EndpointAuthorization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EndpointAuthorization of this EndpointAuthorization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def grantor(self):
        """Gets the grantor of this EndpointAuthorization.


        :return: The grantor of this EndpointAuthorization.
        :rtype: str
        """
        return self._grantor

    @grantor.setter
    def grantor(self, grantor):
        """Sets the grantor of this EndpointAuthorization.


        :param grantor: The grantor of this EndpointAuthorization.
        :type grantor: str
        """

        self._grantor = grantor

    @property
    def grantee(self):
        """Gets the grantee of this EndpointAuthorization.


        :return: The grantee of this EndpointAuthorization.
        :rtype: str
        """
        return self._grantee

    @grantee.setter
    def grantee(self, grantee):
        """Sets the grantee of this EndpointAuthorization.


        :param grantee: The grantee of this EndpointAuthorization.
        :type grantee: str
        """

        self._grantee = grantee

    @property
    def cluster_identifier(self):
        """Gets the cluster_identifier of this EndpointAuthorization.


        :return: The cluster_identifier of this EndpointAuthorization.
        :rtype: str
        """
        return self._cluster_identifier

    @cluster_identifier.setter
    def cluster_identifier(self, cluster_identifier):
        """Sets the cluster_identifier of this EndpointAuthorization.


        :param cluster_identifier: The cluster_identifier of this EndpointAuthorization.
        :type cluster_identifier: str
        """

        self._cluster_identifier = cluster_identifier

    @property
    def authorize_time(self):
        """Gets the authorize_time of this EndpointAuthorization.


        :return: The authorize_time of this EndpointAuthorization.
        :rtype: datetime
        """
        return self._authorize_time

    @authorize_time.setter
    def authorize_time(self, authorize_time):
        """Sets the authorize_time of this EndpointAuthorization.


        :param authorize_time: The authorize_time of this EndpointAuthorization.
        :type authorize_time: datetime
        """

        self._authorize_time = authorize_time

    @property
    def cluster_status(self):
        """Gets the cluster_status of this EndpointAuthorization.


        :return: The cluster_status of this EndpointAuthorization.
        :rtype: str
        """
        return self._cluster_status

    @cluster_status.setter
    def cluster_status(self, cluster_status):
        """Sets the cluster_status of this EndpointAuthorization.


        :param cluster_status: The cluster_status of this EndpointAuthorization.
        :type cluster_status: str
        """

        self._cluster_status = cluster_status

    @property
    def status(self):
        """Gets the status of this EndpointAuthorization.


        :return: The status of this EndpointAuthorization.
        :rtype: AuthorizationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EndpointAuthorization.


        :param status: The status of this EndpointAuthorization.
        :type status: AuthorizationStatus
        """

        self._status = status

    @property
    def allowed_all_vpcs(self):
        """Gets the allowed_all_vpcs of this EndpointAuthorization.


        :return: The allowed_all_vpcs of this EndpointAuthorization.
        :rtype: bool
        """
        return self._allowed_all_vpcs

    @allowed_all_vpcs.setter
    def allowed_all_vpcs(self, allowed_all_vpcs):
        """Sets the allowed_all_vpcs of this EndpointAuthorization.


        :param allowed_all_vpcs: The allowed_all_vpcs of this EndpointAuthorization.
        :type allowed_all_vpcs: bool
        """

        self._allowed_all_vpcs = allowed_all_vpcs

    @property
    def allowed_vpcs(self):
        """Gets the allowed_vpcs of this EndpointAuthorization.


        :return: The allowed_vpcs of this EndpointAuthorization.
        :rtype: List
        """
        return self._allowed_vpcs

    @allowed_vpcs.setter
    def allowed_vpcs(self, allowed_vpcs):
        """Sets the allowed_vpcs of this EndpointAuthorization.


        :param allowed_vpcs: The allowed_vpcs of this EndpointAuthorization.
        :type allowed_vpcs: List
        """

        self._allowed_vpcs = allowed_vpcs

    @property
    def endpoint_count(self):
        """Gets the endpoint_count of this EndpointAuthorization.


        :return: The endpoint_count of this EndpointAuthorization.
        :rtype: int
        """
        return self._endpoint_count

    @endpoint_count.setter
    def endpoint_count(self, endpoint_count):
        """Sets the endpoint_count of this EndpointAuthorization.


        :param endpoint_count: The endpoint_count of this EndpointAuthorization.
        :type endpoint_count: int
        """

        self._endpoint_count = endpoint_count
