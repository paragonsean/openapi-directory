# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.reserved_node import ReservedNode
from openapi_server import util


class PurchaseReservedNodeOfferingResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, reserved_node: ReservedNode=None):
        """PurchaseReservedNodeOfferingResult - a model defined in OpenAPI

        :param reserved_node: The reserved_node of this PurchaseReservedNodeOfferingResult.
        """
        self.openapi_types = {
            'reserved_node': ReservedNode
        }

        self.attribute_map = {
            'reserved_node': 'ReservedNode'
        }

        self._reserved_node = reserved_node

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PurchaseReservedNodeOfferingResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PurchaseReservedNodeOfferingResult of this PurchaseReservedNodeOfferingResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reserved_node(self):
        """Gets the reserved_node of this PurchaseReservedNodeOfferingResult.


        :return: The reserved_node of this PurchaseReservedNodeOfferingResult.
        :rtype: ReservedNode
        """
        return self._reserved_node

    @reserved_node.setter
    def reserved_node(self, reserved_node):
        """Sets the reserved_node of this PurchaseReservedNodeOfferingResult.


        :param reserved_node: The reserved_node of this PurchaseReservedNodeOfferingResult.
        :type reserved_node: ReservedNode
        """

        self._reserved_node = reserved_node
