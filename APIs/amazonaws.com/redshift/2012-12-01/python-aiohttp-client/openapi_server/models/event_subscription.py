# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventSubscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer_aws_id: str=None, cust_subscription_id: str=None, sns_topic_arn: str=None, status: str=None, subscription_creation_time: datetime=None, source_type: str=None, source_ids_list: List=None, event_categories_list: List=None, severity: str=None, enabled: bool=None, tags: List=None):
        """EventSubscription - a model defined in OpenAPI

        :param customer_aws_id: The customer_aws_id of this EventSubscription.
        :param cust_subscription_id: The cust_subscription_id of this EventSubscription.
        :param sns_topic_arn: The sns_topic_arn of this EventSubscription.
        :param status: The status of this EventSubscription.
        :param subscription_creation_time: The subscription_creation_time of this EventSubscription.
        :param source_type: The source_type of this EventSubscription.
        :param source_ids_list: The source_ids_list of this EventSubscription.
        :param event_categories_list: The event_categories_list of this EventSubscription.
        :param severity: The severity of this EventSubscription.
        :param enabled: The enabled of this EventSubscription.
        :param tags: The tags of this EventSubscription.
        """
        self.openapi_types = {
            'customer_aws_id': str,
            'cust_subscription_id': str,
            'sns_topic_arn': str,
            'status': str,
            'subscription_creation_time': datetime,
            'source_type': str,
            'source_ids_list': List,
            'event_categories_list': List,
            'severity': str,
            'enabled': bool,
            'tags': List
        }

        self.attribute_map = {
            'customer_aws_id': 'CustomerAwsId',
            'cust_subscription_id': 'CustSubscriptionId',
            'sns_topic_arn': 'SnsTopicArn',
            'status': 'Status',
            'subscription_creation_time': 'SubscriptionCreationTime',
            'source_type': 'SourceType',
            'source_ids_list': 'SourceIdsList',
            'event_categories_list': 'EventCategoriesList',
            'severity': 'Severity',
            'enabled': 'Enabled',
            'tags': 'Tags'
        }

        self._customer_aws_id = customer_aws_id
        self._cust_subscription_id = cust_subscription_id
        self._sns_topic_arn = sns_topic_arn
        self._status = status
        self._subscription_creation_time = subscription_creation_time
        self._source_type = source_type
        self._source_ids_list = source_ids_list
        self._event_categories_list = event_categories_list
        self._severity = severity
        self._enabled = enabled
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventSubscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventSubscription of this EventSubscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_aws_id(self):
        """Gets the customer_aws_id of this EventSubscription.


        :return: The customer_aws_id of this EventSubscription.
        :rtype: str
        """
        return self._customer_aws_id

    @customer_aws_id.setter
    def customer_aws_id(self, customer_aws_id):
        """Sets the customer_aws_id of this EventSubscription.


        :param customer_aws_id: The customer_aws_id of this EventSubscription.
        :type customer_aws_id: str
        """

        self._customer_aws_id = customer_aws_id

    @property
    def cust_subscription_id(self):
        """Gets the cust_subscription_id of this EventSubscription.


        :return: The cust_subscription_id of this EventSubscription.
        :rtype: str
        """
        return self._cust_subscription_id

    @cust_subscription_id.setter
    def cust_subscription_id(self, cust_subscription_id):
        """Sets the cust_subscription_id of this EventSubscription.


        :param cust_subscription_id: The cust_subscription_id of this EventSubscription.
        :type cust_subscription_id: str
        """

        self._cust_subscription_id = cust_subscription_id

    @property
    def sns_topic_arn(self):
        """Gets the sns_topic_arn of this EventSubscription.


        :return: The sns_topic_arn of this EventSubscription.
        :rtype: str
        """
        return self._sns_topic_arn

    @sns_topic_arn.setter
    def sns_topic_arn(self, sns_topic_arn):
        """Sets the sns_topic_arn of this EventSubscription.


        :param sns_topic_arn: The sns_topic_arn of this EventSubscription.
        :type sns_topic_arn: str
        """

        self._sns_topic_arn = sns_topic_arn

    @property
    def status(self):
        """Gets the status of this EventSubscription.


        :return: The status of this EventSubscription.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EventSubscription.


        :param status: The status of this EventSubscription.
        :type status: str
        """

        self._status = status

    @property
    def subscription_creation_time(self):
        """Gets the subscription_creation_time of this EventSubscription.


        :return: The subscription_creation_time of this EventSubscription.
        :rtype: datetime
        """
        return self._subscription_creation_time

    @subscription_creation_time.setter
    def subscription_creation_time(self, subscription_creation_time):
        """Sets the subscription_creation_time of this EventSubscription.


        :param subscription_creation_time: The subscription_creation_time of this EventSubscription.
        :type subscription_creation_time: datetime
        """

        self._subscription_creation_time = subscription_creation_time

    @property
    def source_type(self):
        """Gets the source_type of this EventSubscription.


        :return: The source_type of this EventSubscription.
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this EventSubscription.


        :param source_type: The source_type of this EventSubscription.
        :type source_type: str
        """

        self._source_type = source_type

    @property
    def source_ids_list(self):
        """Gets the source_ids_list of this EventSubscription.


        :return: The source_ids_list of this EventSubscription.
        :rtype: List
        """
        return self._source_ids_list

    @source_ids_list.setter
    def source_ids_list(self, source_ids_list):
        """Sets the source_ids_list of this EventSubscription.


        :param source_ids_list: The source_ids_list of this EventSubscription.
        :type source_ids_list: List
        """

        self._source_ids_list = source_ids_list

    @property
    def event_categories_list(self):
        """Gets the event_categories_list of this EventSubscription.


        :return: The event_categories_list of this EventSubscription.
        :rtype: List
        """
        return self._event_categories_list

    @event_categories_list.setter
    def event_categories_list(self, event_categories_list):
        """Sets the event_categories_list of this EventSubscription.


        :param event_categories_list: The event_categories_list of this EventSubscription.
        :type event_categories_list: List
        """

        self._event_categories_list = event_categories_list

    @property
    def severity(self):
        """Gets the severity of this EventSubscription.


        :return: The severity of this EventSubscription.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this EventSubscription.


        :param severity: The severity of this EventSubscription.
        :type severity: str
        """

        self._severity = severity

    @property
    def enabled(self):
        """Gets the enabled of this EventSubscription.


        :return: The enabled of this EventSubscription.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this EventSubscription.


        :param enabled: The enabled of this EventSubscription.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def tags(self):
        """Gets the tags of this EventSubscription.


        :return: The tags of this EventSubscription.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this EventSubscription.


        :param tags: The tags of this EventSubscription.
        :type tags: List
        """

        self._tags = tags
