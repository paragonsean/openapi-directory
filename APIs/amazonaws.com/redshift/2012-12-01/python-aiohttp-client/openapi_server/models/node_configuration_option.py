# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mode import Mode
from openapi_server import util


class NodeConfigurationOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, node_type: str=None, number_of_nodes: int=None, estimated_disk_utilization_percent: float=None, mode: Mode=None):
        """NodeConfigurationOption - a model defined in OpenAPI

        :param node_type: The node_type of this NodeConfigurationOption.
        :param number_of_nodes: The number_of_nodes of this NodeConfigurationOption.
        :param estimated_disk_utilization_percent: The estimated_disk_utilization_percent of this NodeConfigurationOption.
        :param mode: The mode of this NodeConfigurationOption.
        """
        self.openapi_types = {
            'node_type': str,
            'number_of_nodes': int,
            'estimated_disk_utilization_percent': float,
            'mode': Mode
        }

        self.attribute_map = {
            'node_type': 'NodeType',
            'number_of_nodes': 'NumberOfNodes',
            'estimated_disk_utilization_percent': 'EstimatedDiskUtilizationPercent',
            'mode': 'Mode'
        }

        self._node_type = node_type
        self._number_of_nodes = number_of_nodes
        self._estimated_disk_utilization_percent = estimated_disk_utilization_percent
        self._mode = mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeConfigurationOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeConfigurationOption of this NodeConfigurationOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node_type(self):
        """Gets the node_type of this NodeConfigurationOption.


        :return: The node_type of this NodeConfigurationOption.
        :rtype: str
        """
        return self._node_type

    @node_type.setter
    def node_type(self, node_type):
        """Sets the node_type of this NodeConfigurationOption.


        :param node_type: The node_type of this NodeConfigurationOption.
        :type node_type: str
        """

        self._node_type = node_type

    @property
    def number_of_nodes(self):
        """Gets the number_of_nodes of this NodeConfigurationOption.


        :return: The number_of_nodes of this NodeConfigurationOption.
        :rtype: int
        """
        return self._number_of_nodes

    @number_of_nodes.setter
    def number_of_nodes(self, number_of_nodes):
        """Sets the number_of_nodes of this NodeConfigurationOption.


        :param number_of_nodes: The number_of_nodes of this NodeConfigurationOption.
        :type number_of_nodes: int
        """

        self._number_of_nodes = number_of_nodes

    @property
    def estimated_disk_utilization_percent(self):
        """Gets the estimated_disk_utilization_percent of this NodeConfigurationOption.


        :return: The estimated_disk_utilization_percent of this NodeConfigurationOption.
        :rtype: float
        """
        return self._estimated_disk_utilization_percent

    @estimated_disk_utilization_percent.setter
    def estimated_disk_utilization_percent(self, estimated_disk_utilization_percent):
        """Sets the estimated_disk_utilization_percent of this NodeConfigurationOption.


        :param estimated_disk_utilization_percent: The estimated_disk_utilization_percent of this NodeConfigurationOption.
        :type estimated_disk_utilization_percent: float
        """

        self._estimated_disk_utilization_percent = estimated_disk_utilization_percent

    @property
    def mode(self):
        """Gets the mode of this NodeConfigurationOption.


        :return: The mode of this NodeConfigurationOption.
        :rtype: Mode
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this NodeConfigurationOption.


        :param mode: The mode of this NodeConfigurationOption.
        :type mode: Mode
        """

        self._mode = mode
