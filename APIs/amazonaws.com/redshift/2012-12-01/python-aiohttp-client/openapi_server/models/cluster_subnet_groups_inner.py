# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClusterSubnetGroupsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_subnet_group_name: str=None, description: str=None, vpc_id: str=None, subnet_group_status: str=None, subnets: List=None, tags: List=None):
        """ClusterSubnetGroupsInner - a model defined in OpenAPI

        :param cluster_subnet_group_name: The cluster_subnet_group_name of this ClusterSubnetGroupsInner.
        :param description: The description of this ClusterSubnetGroupsInner.
        :param vpc_id: The vpc_id of this ClusterSubnetGroupsInner.
        :param subnet_group_status: The subnet_group_status of this ClusterSubnetGroupsInner.
        :param subnets: The subnets of this ClusterSubnetGroupsInner.
        :param tags: The tags of this ClusterSubnetGroupsInner.
        """
        self.openapi_types = {
            'cluster_subnet_group_name': str,
            'description': str,
            'vpc_id': str,
            'subnet_group_status': str,
            'subnets': List,
            'tags': List
        }

        self.attribute_map = {
            'cluster_subnet_group_name': 'ClusterSubnetGroupName',
            'description': 'Description',
            'vpc_id': 'VpcId',
            'subnet_group_status': 'SubnetGroupStatus',
            'subnets': 'Subnets',
            'tags': 'Tags'
        }

        self._cluster_subnet_group_name = cluster_subnet_group_name
        self._description = description
        self._vpc_id = vpc_id
        self._subnet_group_status = subnet_group_status
        self._subnets = subnets
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterSubnetGroupsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterSubnetGroups_inner of this ClusterSubnetGroupsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_subnet_group_name(self):
        """Gets the cluster_subnet_group_name of this ClusterSubnetGroupsInner.


        :return: The cluster_subnet_group_name of this ClusterSubnetGroupsInner.
        :rtype: str
        """
        return self._cluster_subnet_group_name

    @cluster_subnet_group_name.setter
    def cluster_subnet_group_name(self, cluster_subnet_group_name):
        """Sets the cluster_subnet_group_name of this ClusterSubnetGroupsInner.


        :param cluster_subnet_group_name: The cluster_subnet_group_name of this ClusterSubnetGroupsInner.
        :type cluster_subnet_group_name: str
        """

        self._cluster_subnet_group_name = cluster_subnet_group_name

    @property
    def description(self):
        """Gets the description of this ClusterSubnetGroupsInner.


        :return: The description of this ClusterSubnetGroupsInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ClusterSubnetGroupsInner.


        :param description: The description of this ClusterSubnetGroupsInner.
        :type description: str
        """

        self._description = description

    @property
    def vpc_id(self):
        """Gets the vpc_id of this ClusterSubnetGroupsInner.


        :return: The vpc_id of this ClusterSubnetGroupsInner.
        :rtype: str
        """
        return self._vpc_id

    @vpc_id.setter
    def vpc_id(self, vpc_id):
        """Sets the vpc_id of this ClusterSubnetGroupsInner.


        :param vpc_id: The vpc_id of this ClusterSubnetGroupsInner.
        :type vpc_id: str
        """

        self._vpc_id = vpc_id

    @property
    def subnet_group_status(self):
        """Gets the subnet_group_status of this ClusterSubnetGroupsInner.


        :return: The subnet_group_status of this ClusterSubnetGroupsInner.
        :rtype: str
        """
        return self._subnet_group_status

    @subnet_group_status.setter
    def subnet_group_status(self, subnet_group_status):
        """Sets the subnet_group_status of this ClusterSubnetGroupsInner.


        :param subnet_group_status: The subnet_group_status of this ClusterSubnetGroupsInner.
        :type subnet_group_status: str
        """

        self._subnet_group_status = subnet_group_status

    @property
    def subnets(self):
        """Gets the subnets of this ClusterSubnetGroupsInner.


        :return: The subnets of this ClusterSubnetGroupsInner.
        :rtype: List
        """
        return self._subnets

    @subnets.setter
    def subnets(self, subnets):
        """Sets the subnets of this ClusterSubnetGroupsInner.


        :param subnets: The subnets of this ClusterSubnetGroupsInner.
        :type subnets: List
        """

        self._subnets = subnets

    @property
    def tags(self):
        """Gets the tags of this ClusterSubnetGroupsInner.


        :return: The tags of this ClusterSubnetGroupsInner.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ClusterSubnetGroupsInner.


        :param tags: The tags of this ClusterSubnetGroupsInner.
        :type tags: List
        """

        self._tags = tags
