# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResizeClusterMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_identifier: str=None, cluster_type: str=None, node_type: str=None, number_of_nodes: int=None, classic: bool=None, reserved_node_id: str=None, target_reserved_node_offering_id: str=None):
        """ResizeClusterMessage - a model defined in OpenAPI

        :param cluster_identifier: The cluster_identifier of this ResizeClusterMessage.
        :param cluster_type: The cluster_type of this ResizeClusterMessage.
        :param node_type: The node_type of this ResizeClusterMessage.
        :param number_of_nodes: The number_of_nodes of this ResizeClusterMessage.
        :param classic: The classic of this ResizeClusterMessage.
        :param reserved_node_id: The reserved_node_id of this ResizeClusterMessage.
        :param target_reserved_node_offering_id: The target_reserved_node_offering_id of this ResizeClusterMessage.
        """
        self.openapi_types = {
            'cluster_identifier': str,
            'cluster_type': str,
            'node_type': str,
            'number_of_nodes': int,
            'classic': bool,
            'reserved_node_id': str,
            'target_reserved_node_offering_id': str
        }

        self.attribute_map = {
            'cluster_identifier': 'ClusterIdentifier',
            'cluster_type': 'ClusterType',
            'node_type': 'NodeType',
            'number_of_nodes': 'NumberOfNodes',
            'classic': 'Classic',
            'reserved_node_id': 'ReservedNodeId',
            'target_reserved_node_offering_id': 'TargetReservedNodeOfferingId'
        }

        self._cluster_identifier = cluster_identifier
        self._cluster_type = cluster_type
        self._node_type = node_type
        self._number_of_nodes = number_of_nodes
        self._classic = classic
        self._reserved_node_id = reserved_node_id
        self._target_reserved_node_offering_id = target_reserved_node_offering_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResizeClusterMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResizeClusterMessage of this ResizeClusterMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_identifier(self):
        """Gets the cluster_identifier of this ResizeClusterMessage.


        :return: The cluster_identifier of this ResizeClusterMessage.
        :rtype: str
        """
        return self._cluster_identifier

    @cluster_identifier.setter
    def cluster_identifier(self, cluster_identifier):
        """Sets the cluster_identifier of this ResizeClusterMessage.


        :param cluster_identifier: The cluster_identifier of this ResizeClusterMessage.
        :type cluster_identifier: str
        """
        if cluster_identifier is None:
            raise ValueError("Invalid value for `cluster_identifier`, must not be `None`")

        self._cluster_identifier = cluster_identifier

    @property
    def cluster_type(self):
        """Gets the cluster_type of this ResizeClusterMessage.


        :return: The cluster_type of this ResizeClusterMessage.
        :rtype: str
        """
        return self._cluster_type

    @cluster_type.setter
    def cluster_type(self, cluster_type):
        """Sets the cluster_type of this ResizeClusterMessage.


        :param cluster_type: The cluster_type of this ResizeClusterMessage.
        :type cluster_type: str
        """

        self._cluster_type = cluster_type

    @property
    def node_type(self):
        """Gets the node_type of this ResizeClusterMessage.


        :return: The node_type of this ResizeClusterMessage.
        :rtype: str
        """
        return self._node_type

    @node_type.setter
    def node_type(self, node_type):
        """Sets the node_type of this ResizeClusterMessage.


        :param node_type: The node_type of this ResizeClusterMessage.
        :type node_type: str
        """

        self._node_type = node_type

    @property
    def number_of_nodes(self):
        """Gets the number_of_nodes of this ResizeClusterMessage.


        :return: The number_of_nodes of this ResizeClusterMessage.
        :rtype: int
        """
        return self._number_of_nodes

    @number_of_nodes.setter
    def number_of_nodes(self, number_of_nodes):
        """Sets the number_of_nodes of this ResizeClusterMessage.


        :param number_of_nodes: The number_of_nodes of this ResizeClusterMessage.
        :type number_of_nodes: int
        """

        self._number_of_nodes = number_of_nodes

    @property
    def classic(self):
        """Gets the classic of this ResizeClusterMessage.


        :return: The classic of this ResizeClusterMessage.
        :rtype: bool
        """
        return self._classic

    @classic.setter
    def classic(self, classic):
        """Sets the classic of this ResizeClusterMessage.


        :param classic: The classic of this ResizeClusterMessage.
        :type classic: bool
        """

        self._classic = classic

    @property
    def reserved_node_id(self):
        """Gets the reserved_node_id of this ResizeClusterMessage.


        :return: The reserved_node_id of this ResizeClusterMessage.
        :rtype: str
        """
        return self._reserved_node_id

    @reserved_node_id.setter
    def reserved_node_id(self, reserved_node_id):
        """Sets the reserved_node_id of this ResizeClusterMessage.


        :param reserved_node_id: The reserved_node_id of this ResizeClusterMessage.
        :type reserved_node_id: str
        """

        self._reserved_node_id = reserved_node_id

    @property
    def target_reserved_node_offering_id(self):
        """Gets the target_reserved_node_offering_id of this ResizeClusterMessage.


        :return: The target_reserved_node_offering_id of this ResizeClusterMessage.
        :rtype: str
        """
        return self._target_reserved_node_offering_id

    @target_reserved_node_offering_id.setter
    def target_reserved_node_offering_id(self, target_reserved_node_offering_id):
        """Sets the target_reserved_node_offering_id of this ResizeClusterMessage.


        :param target_reserved_node_offering_id: The target_reserved_node_offering_id of this ResizeClusterMessage.
        :type target_reserved_node_offering_id: str
        """

        self._target_reserved_node_offering_id = target_reserved_node_offering_id
