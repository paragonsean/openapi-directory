/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParameter::OAIParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParameter::OAIParameter() {
    this->initializeModel();
}

OAIParameter::~OAIParameter() {}

void OAIParameter::initializeModel() {

    m_parameter_name_isSet = false;
    m_parameter_name_isValid = false;

    m_parameter_value_isSet = false;
    m_parameter_value_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_data_type_isSet = false;
    m_data_type_isValid = false;

    m_allowed_values_isSet = false;
    m_allowed_values_isValid = false;

    m_apply_type_isSet = false;
    m_apply_type_isValid = false;

    m_is_modifiable_isSet = false;
    m_is_modifiable_isValid = false;

    m_minimum_engine_version_isSet = false;
    m_minimum_engine_version_isValid = false;
}

void OAIParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParameter::fromJsonObject(QJsonObject json) {

    m_parameter_name_isValid = ::OpenAPI::fromJsonValue(m_parameter_name, json[QString("ParameterName")]);
    m_parameter_name_isSet = !json[QString("ParameterName")].isNull() && m_parameter_name_isValid;

    m_parameter_value_isValid = ::OpenAPI::fromJsonValue(m_parameter_value, json[QString("ParameterValue")]);
    m_parameter_value_isSet = !json[QString("ParameterValue")].isNull() && m_parameter_value_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("Source")]);
    m_source_isSet = !json[QString("Source")].isNull() && m_source_isValid;

    m_data_type_isValid = ::OpenAPI::fromJsonValue(m_data_type, json[QString("DataType")]);
    m_data_type_isSet = !json[QString("DataType")].isNull() && m_data_type_isValid;

    m_allowed_values_isValid = ::OpenAPI::fromJsonValue(m_allowed_values, json[QString("AllowedValues")]);
    m_allowed_values_isSet = !json[QString("AllowedValues")].isNull() && m_allowed_values_isValid;

    m_apply_type_isValid = ::OpenAPI::fromJsonValue(m_apply_type, json[QString("ApplyType")]);
    m_apply_type_isSet = !json[QString("ApplyType")].isNull() && m_apply_type_isValid;

    m_is_modifiable_isValid = ::OpenAPI::fromJsonValue(m_is_modifiable, json[QString("IsModifiable")]);
    m_is_modifiable_isSet = !json[QString("IsModifiable")].isNull() && m_is_modifiable_isValid;

    m_minimum_engine_version_isValid = ::OpenAPI::fromJsonValue(m_minimum_engine_version, json[QString("MinimumEngineVersion")]);
    m_minimum_engine_version_isSet = !json[QString("MinimumEngineVersion")].isNull() && m_minimum_engine_version_isValid;
}

QString OAIParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_parameter_name_isSet) {
        obj.insert(QString("ParameterName"), ::OpenAPI::toJsonValue(m_parameter_name));
    }
    if (m_parameter_value_isSet) {
        obj.insert(QString("ParameterValue"), ::OpenAPI::toJsonValue(m_parameter_value));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_source_isSet) {
        obj.insert(QString("Source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_data_type_isSet) {
        obj.insert(QString("DataType"), ::OpenAPI::toJsonValue(m_data_type));
    }
    if (m_allowed_values_isSet) {
        obj.insert(QString("AllowedValues"), ::OpenAPI::toJsonValue(m_allowed_values));
    }
    if (m_apply_type.isSet()) {
        obj.insert(QString("ApplyType"), ::OpenAPI::toJsonValue(m_apply_type));
    }
    if (m_is_modifiable_isSet) {
        obj.insert(QString("IsModifiable"), ::OpenAPI::toJsonValue(m_is_modifiable));
    }
    if (m_minimum_engine_version_isSet) {
        obj.insert(QString("MinimumEngineVersion"), ::OpenAPI::toJsonValue(m_minimum_engine_version));
    }
    return obj;
}

QString OAIParameter::getParameterName() const {
    return m_parameter_name;
}
void OAIParameter::setParameterName(const QString &parameter_name) {
    m_parameter_name = parameter_name;
    m_parameter_name_isSet = true;
}

bool OAIParameter::is_parameter_name_Set() const{
    return m_parameter_name_isSet;
}

bool OAIParameter::is_parameter_name_Valid() const{
    return m_parameter_name_isValid;
}

QString OAIParameter::getParameterValue() const {
    return m_parameter_value;
}
void OAIParameter::setParameterValue(const QString &parameter_value) {
    m_parameter_value = parameter_value;
    m_parameter_value_isSet = true;
}

bool OAIParameter::is_parameter_value_Set() const{
    return m_parameter_value_isSet;
}

bool OAIParameter::is_parameter_value_Valid() const{
    return m_parameter_value_isValid;
}

QString OAIParameter::getDescription() const {
    return m_description;
}
void OAIParameter::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIParameter::is_description_Set() const{
    return m_description_isSet;
}

bool OAIParameter::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIParameter::getSource() const {
    return m_source;
}
void OAIParameter::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIParameter::is_source_Set() const{
    return m_source_isSet;
}

bool OAIParameter::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIParameter::getDataType() const {
    return m_data_type;
}
void OAIParameter::setDataType(const QString &data_type) {
    m_data_type = data_type;
    m_data_type_isSet = true;
}

bool OAIParameter::is_data_type_Set() const{
    return m_data_type_isSet;
}

bool OAIParameter::is_data_type_Valid() const{
    return m_data_type_isValid;
}

QString OAIParameter::getAllowedValues() const {
    return m_allowed_values;
}
void OAIParameter::setAllowedValues(const QString &allowed_values) {
    m_allowed_values = allowed_values;
    m_allowed_values_isSet = true;
}

bool OAIParameter::is_allowed_values_Set() const{
    return m_allowed_values_isSet;
}

bool OAIParameter::is_allowed_values_Valid() const{
    return m_allowed_values_isValid;
}

OAIParameterApplyType OAIParameter::getApplyType() const {
    return m_apply_type;
}
void OAIParameter::setApplyType(const OAIParameterApplyType &apply_type) {
    m_apply_type = apply_type;
    m_apply_type_isSet = true;
}

bool OAIParameter::is_apply_type_Set() const{
    return m_apply_type_isSet;
}

bool OAIParameter::is_apply_type_Valid() const{
    return m_apply_type_isValid;
}

bool OAIParameter::getIsModifiable() const {
    return m_is_modifiable;
}
void OAIParameter::setIsModifiable(const bool &is_modifiable) {
    m_is_modifiable = is_modifiable;
    m_is_modifiable_isSet = true;
}

bool OAIParameter::is_is_modifiable_Set() const{
    return m_is_modifiable_isSet;
}

bool OAIParameter::is_is_modifiable_Valid() const{
    return m_is_modifiable_isValid;
}

QString OAIParameter::getMinimumEngineVersion() const {
    return m_minimum_engine_version;
}
void OAIParameter::setMinimumEngineVersion(const QString &minimum_engine_version) {
    m_minimum_engine_version = minimum_engine_version;
    m_minimum_engine_version_isSet = true;
}

bool OAIParameter::is_minimum_engine_version_Set() const{
    return m_minimum_engine_version_isSet;
}

bool OAIParameter::is_minimum_engine_version_Valid() const{
    return m_minimum_engine_version_isValid;
}

bool OAIParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parameter_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_values_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_apply_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_modifiable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
