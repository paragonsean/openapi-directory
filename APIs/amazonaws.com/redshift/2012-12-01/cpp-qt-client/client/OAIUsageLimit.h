/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUsageLimit.h
 *
 * Describes a usage limit object for a cluster. 
 */

#ifndef OAIUsageLimit_H
#define OAIUsageLimit_H

#include <QJsonObject>

#include "OAIUsageLimitBreachAction.h"
#include "OAIUsageLimitFeatureType.h"
#include "OAIUsageLimitLimitType.h"
#include "OAIUsageLimitPeriod.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUsageLimit : public OAIObject {
public:
    OAIUsageLimit();
    OAIUsageLimit(QString json);
    ~OAIUsageLimit() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getUsageLimitId() const;
    void setUsageLimitId(const QString &usage_limit_id);
    bool is_usage_limit_id_Set() const;
    bool is_usage_limit_id_Valid() const;

    QString getClusterIdentifier() const;
    void setClusterIdentifier(const QString &cluster_identifier);
    bool is_cluster_identifier_Set() const;
    bool is_cluster_identifier_Valid() const;

    OAIUsageLimitFeatureType getFeatureType() const;
    void setFeatureType(const OAIUsageLimitFeatureType &feature_type);
    bool is_feature_type_Set() const;
    bool is_feature_type_Valid() const;

    OAIUsageLimitLimitType getLimitType() const;
    void setLimitType(const OAIUsageLimitLimitType &limit_type);
    bool is_limit_type_Set() const;
    bool is_limit_type_Valid() const;

    qint32 getAmount() const;
    void setAmount(const qint32 &amount);
    bool is_amount_Set() const;
    bool is_amount_Valid() const;

    OAIUsageLimitPeriod getPeriod() const;
    void setPeriod(const OAIUsageLimitPeriod &period);
    bool is_period_Set() const;
    bool is_period_Valid() const;

    OAIUsageLimitBreachAction getBreachAction() const;
    void setBreachAction(const OAIUsageLimitBreachAction &breach_action);
    bool is_breach_action_Set() const;
    bool is_breach_action_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_usage_limit_id;
    bool m_usage_limit_id_isSet;
    bool m_usage_limit_id_isValid;

    QString m_cluster_identifier;
    bool m_cluster_identifier_isSet;
    bool m_cluster_identifier_isValid;

    OAIUsageLimitFeatureType m_feature_type;
    bool m_feature_type_isSet;
    bool m_feature_type_isValid;

    OAIUsageLimitLimitType m_limit_type;
    bool m_limit_type_isSet;
    bool m_limit_type_isValid;

    qint32 m_amount;
    bool m_amount_isSet;
    bool m_amount_isValid;

    OAIUsageLimitPeriod m_period;
    bool m_period_isSet;
    bool m_period_isValid;

    OAIUsageLimitBreachAction m_breach_action;
    bool m_breach_action_isSet;
    bool m_breach_action_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUsageLimit)

#endif // OAIUsageLimit_H
