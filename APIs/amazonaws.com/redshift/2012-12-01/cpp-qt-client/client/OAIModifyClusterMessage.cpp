/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModifyClusterMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModifyClusterMessage::OAIModifyClusterMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModifyClusterMessage::OAIModifyClusterMessage() {
    this->initializeModel();
}

OAIModifyClusterMessage::~OAIModifyClusterMessage() {}

void OAIModifyClusterMessage::initializeModel() {

    m_cluster_identifier_isSet = false;
    m_cluster_identifier_isValid = false;

    m_cluster_type_isSet = false;
    m_cluster_type_isValid = false;

    m_node_type_isSet = false;
    m_node_type_isValid = false;

    m_number_of_nodes_isSet = false;
    m_number_of_nodes_isValid = false;

    m_cluster_security_groups_isSet = false;
    m_cluster_security_groups_isValid = false;

    m_vpc_security_group_ids_isSet = false;
    m_vpc_security_group_ids_isValid = false;

    m_master_user_password_isSet = false;
    m_master_user_password_isValid = false;

    m_cluster_parameter_group_name_isSet = false;
    m_cluster_parameter_group_name_isValid = false;

    m_automated_snapshot_retention_period_isSet = false;
    m_automated_snapshot_retention_period_isValid = false;

    m_manual_snapshot_retention_period_isSet = false;
    m_manual_snapshot_retention_period_isValid = false;

    m_preferred_maintenance_window_isSet = false;
    m_preferred_maintenance_window_isValid = false;

    m_cluster_version_isSet = false;
    m_cluster_version_isValid = false;

    m_allow_version_upgrade_isSet = false;
    m_allow_version_upgrade_isValid = false;

    m_hsm_client_certificate_identifier_isSet = false;
    m_hsm_client_certificate_identifier_isValid = false;

    m_hsm_configuration_identifier_isSet = false;
    m_hsm_configuration_identifier_isValid = false;

    m_new_cluster_identifier_isSet = false;
    m_new_cluster_identifier_isValid = false;

    m_publicly_accessible_isSet = false;
    m_publicly_accessible_isValid = false;

    m_elastic_ip_isSet = false;
    m_elastic_ip_isValid = false;

    m_enhanced_vpc_routing_isSet = false;
    m_enhanced_vpc_routing_isValid = false;

    m_maintenance_track_name_isSet = false;
    m_maintenance_track_name_isValid = false;

    m_encrypted_isSet = false;
    m_encrypted_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_availability_zone_relocation_isSet = false;
    m_availability_zone_relocation_isValid = false;

    m_availability_zone_isSet = false;
    m_availability_zone_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;
}

void OAIModifyClusterMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModifyClusterMessage::fromJsonObject(QJsonObject json) {

    m_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_cluster_identifier, json[QString("ClusterIdentifier")]);
    m_cluster_identifier_isSet = !json[QString("ClusterIdentifier")].isNull() && m_cluster_identifier_isValid;

    m_cluster_type_isValid = ::OpenAPI::fromJsonValue(m_cluster_type, json[QString("ClusterType")]);
    m_cluster_type_isSet = !json[QString("ClusterType")].isNull() && m_cluster_type_isValid;

    m_node_type_isValid = ::OpenAPI::fromJsonValue(m_node_type, json[QString("NodeType")]);
    m_node_type_isSet = !json[QString("NodeType")].isNull() && m_node_type_isValid;

    m_number_of_nodes_isValid = ::OpenAPI::fromJsonValue(m_number_of_nodes, json[QString("NumberOfNodes")]);
    m_number_of_nodes_isSet = !json[QString("NumberOfNodes")].isNull() && m_number_of_nodes_isValid;

    m_cluster_security_groups_isValid = ::OpenAPI::fromJsonValue(m_cluster_security_groups, json[QString("ClusterSecurityGroups")]);
    m_cluster_security_groups_isSet = !json[QString("ClusterSecurityGroups")].isNull() && m_cluster_security_groups_isValid;

    m_vpc_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_vpc_security_group_ids, json[QString("VpcSecurityGroupIds")]);
    m_vpc_security_group_ids_isSet = !json[QString("VpcSecurityGroupIds")].isNull() && m_vpc_security_group_ids_isValid;

    m_master_user_password_isValid = ::OpenAPI::fromJsonValue(m_master_user_password, json[QString("MasterUserPassword")]);
    m_master_user_password_isSet = !json[QString("MasterUserPassword")].isNull() && m_master_user_password_isValid;

    m_cluster_parameter_group_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_parameter_group_name, json[QString("ClusterParameterGroupName")]);
    m_cluster_parameter_group_name_isSet = !json[QString("ClusterParameterGroupName")].isNull() && m_cluster_parameter_group_name_isValid;

    m_automated_snapshot_retention_period_isValid = ::OpenAPI::fromJsonValue(m_automated_snapshot_retention_period, json[QString("AutomatedSnapshotRetentionPeriod")]);
    m_automated_snapshot_retention_period_isSet = !json[QString("AutomatedSnapshotRetentionPeriod")].isNull() && m_automated_snapshot_retention_period_isValid;

    m_manual_snapshot_retention_period_isValid = ::OpenAPI::fromJsonValue(m_manual_snapshot_retention_period, json[QString("ManualSnapshotRetentionPeriod")]);
    m_manual_snapshot_retention_period_isSet = !json[QString("ManualSnapshotRetentionPeriod")].isNull() && m_manual_snapshot_retention_period_isValid;

    m_preferred_maintenance_window_isValid = ::OpenAPI::fromJsonValue(m_preferred_maintenance_window, json[QString("PreferredMaintenanceWindow")]);
    m_preferred_maintenance_window_isSet = !json[QString("PreferredMaintenanceWindow")].isNull() && m_preferred_maintenance_window_isValid;

    m_cluster_version_isValid = ::OpenAPI::fromJsonValue(m_cluster_version, json[QString("ClusterVersion")]);
    m_cluster_version_isSet = !json[QString("ClusterVersion")].isNull() && m_cluster_version_isValid;

    m_allow_version_upgrade_isValid = ::OpenAPI::fromJsonValue(m_allow_version_upgrade, json[QString("AllowVersionUpgrade")]);
    m_allow_version_upgrade_isSet = !json[QString("AllowVersionUpgrade")].isNull() && m_allow_version_upgrade_isValid;

    m_hsm_client_certificate_identifier_isValid = ::OpenAPI::fromJsonValue(m_hsm_client_certificate_identifier, json[QString("HsmClientCertificateIdentifier")]);
    m_hsm_client_certificate_identifier_isSet = !json[QString("HsmClientCertificateIdentifier")].isNull() && m_hsm_client_certificate_identifier_isValid;

    m_hsm_configuration_identifier_isValid = ::OpenAPI::fromJsonValue(m_hsm_configuration_identifier, json[QString("HsmConfigurationIdentifier")]);
    m_hsm_configuration_identifier_isSet = !json[QString("HsmConfigurationIdentifier")].isNull() && m_hsm_configuration_identifier_isValid;

    m_new_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_new_cluster_identifier, json[QString("NewClusterIdentifier")]);
    m_new_cluster_identifier_isSet = !json[QString("NewClusterIdentifier")].isNull() && m_new_cluster_identifier_isValid;

    m_publicly_accessible_isValid = ::OpenAPI::fromJsonValue(m_publicly_accessible, json[QString("PubliclyAccessible")]);
    m_publicly_accessible_isSet = !json[QString("PubliclyAccessible")].isNull() && m_publicly_accessible_isValid;

    m_elastic_ip_isValid = ::OpenAPI::fromJsonValue(m_elastic_ip, json[QString("ElasticIp")]);
    m_elastic_ip_isSet = !json[QString("ElasticIp")].isNull() && m_elastic_ip_isValid;

    m_enhanced_vpc_routing_isValid = ::OpenAPI::fromJsonValue(m_enhanced_vpc_routing, json[QString("EnhancedVpcRouting")]);
    m_enhanced_vpc_routing_isSet = !json[QString("EnhancedVpcRouting")].isNull() && m_enhanced_vpc_routing_isValid;

    m_maintenance_track_name_isValid = ::OpenAPI::fromJsonValue(m_maintenance_track_name, json[QString("MaintenanceTrackName")]);
    m_maintenance_track_name_isSet = !json[QString("MaintenanceTrackName")].isNull() && m_maintenance_track_name_isValid;

    m_encrypted_isValid = ::OpenAPI::fromJsonValue(m_encrypted, json[QString("Encrypted")]);
    m_encrypted_isSet = !json[QString("Encrypted")].isNull() && m_encrypted_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_availability_zone_relocation_isValid = ::OpenAPI::fromJsonValue(m_availability_zone_relocation, json[QString("AvailabilityZoneRelocation")]);
    m_availability_zone_relocation_isSet = !json[QString("AvailabilityZoneRelocation")].isNull() && m_availability_zone_relocation_isValid;

    m_availability_zone_isValid = ::OpenAPI::fromJsonValue(m_availability_zone, json[QString("AvailabilityZone")]);
    m_availability_zone_isSet = !json[QString("AvailabilityZone")].isNull() && m_availability_zone_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("Port")]);
    m_port_isSet = !json[QString("Port")].isNull() && m_port_isValid;
}

QString OAIModifyClusterMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModifyClusterMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_identifier_isSet) {
        obj.insert(QString("ClusterIdentifier"), ::OpenAPI::toJsonValue(m_cluster_identifier));
    }
    if (m_cluster_type_isSet) {
        obj.insert(QString("ClusterType"), ::OpenAPI::toJsonValue(m_cluster_type));
    }
    if (m_node_type_isSet) {
        obj.insert(QString("NodeType"), ::OpenAPI::toJsonValue(m_node_type));
    }
    if (m_number_of_nodes_isSet) {
        obj.insert(QString("NumberOfNodes"), ::OpenAPI::toJsonValue(m_number_of_nodes));
    }
    if (m_cluster_security_groups.isSet()) {
        obj.insert(QString("ClusterSecurityGroups"), ::OpenAPI::toJsonValue(m_cluster_security_groups));
    }
    if (m_vpc_security_group_ids.isSet()) {
        obj.insert(QString("VpcSecurityGroupIds"), ::OpenAPI::toJsonValue(m_vpc_security_group_ids));
    }
    if (m_master_user_password_isSet) {
        obj.insert(QString("MasterUserPassword"), ::OpenAPI::toJsonValue(m_master_user_password));
    }
    if (m_cluster_parameter_group_name_isSet) {
        obj.insert(QString("ClusterParameterGroupName"), ::OpenAPI::toJsonValue(m_cluster_parameter_group_name));
    }
    if (m_automated_snapshot_retention_period_isSet) {
        obj.insert(QString("AutomatedSnapshotRetentionPeriod"), ::OpenAPI::toJsonValue(m_automated_snapshot_retention_period));
    }
    if (m_manual_snapshot_retention_period_isSet) {
        obj.insert(QString("ManualSnapshotRetentionPeriod"), ::OpenAPI::toJsonValue(m_manual_snapshot_retention_period));
    }
    if (m_preferred_maintenance_window_isSet) {
        obj.insert(QString("PreferredMaintenanceWindow"), ::OpenAPI::toJsonValue(m_preferred_maintenance_window));
    }
    if (m_cluster_version_isSet) {
        obj.insert(QString("ClusterVersion"), ::OpenAPI::toJsonValue(m_cluster_version));
    }
    if (m_allow_version_upgrade_isSet) {
        obj.insert(QString("AllowVersionUpgrade"), ::OpenAPI::toJsonValue(m_allow_version_upgrade));
    }
    if (m_hsm_client_certificate_identifier_isSet) {
        obj.insert(QString("HsmClientCertificateIdentifier"), ::OpenAPI::toJsonValue(m_hsm_client_certificate_identifier));
    }
    if (m_hsm_configuration_identifier_isSet) {
        obj.insert(QString("HsmConfigurationIdentifier"), ::OpenAPI::toJsonValue(m_hsm_configuration_identifier));
    }
    if (m_new_cluster_identifier_isSet) {
        obj.insert(QString("NewClusterIdentifier"), ::OpenAPI::toJsonValue(m_new_cluster_identifier));
    }
    if (m_publicly_accessible_isSet) {
        obj.insert(QString("PubliclyAccessible"), ::OpenAPI::toJsonValue(m_publicly_accessible));
    }
    if (m_elastic_ip_isSet) {
        obj.insert(QString("ElasticIp"), ::OpenAPI::toJsonValue(m_elastic_ip));
    }
    if (m_enhanced_vpc_routing_isSet) {
        obj.insert(QString("EnhancedVpcRouting"), ::OpenAPI::toJsonValue(m_enhanced_vpc_routing));
    }
    if (m_maintenance_track_name_isSet) {
        obj.insert(QString("MaintenanceTrackName"), ::OpenAPI::toJsonValue(m_maintenance_track_name));
    }
    if (m_encrypted_isSet) {
        obj.insert(QString("Encrypted"), ::OpenAPI::toJsonValue(m_encrypted));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_availability_zone_relocation_isSet) {
        obj.insert(QString("AvailabilityZoneRelocation"), ::OpenAPI::toJsonValue(m_availability_zone_relocation));
    }
    if (m_availability_zone_isSet) {
        obj.insert(QString("AvailabilityZone"), ::OpenAPI::toJsonValue(m_availability_zone));
    }
    if (m_port_isSet) {
        obj.insert(QString("Port"), ::OpenAPI::toJsonValue(m_port));
    }
    return obj;
}

QString OAIModifyClusterMessage::getClusterIdentifier() const {
    return m_cluster_identifier;
}
void OAIModifyClusterMessage::setClusterIdentifier(const QString &cluster_identifier) {
    m_cluster_identifier = cluster_identifier;
    m_cluster_identifier_isSet = true;
}

bool OAIModifyClusterMessage::is_cluster_identifier_Set() const{
    return m_cluster_identifier_isSet;
}

bool OAIModifyClusterMessage::is_cluster_identifier_Valid() const{
    return m_cluster_identifier_isValid;
}

QString OAIModifyClusterMessage::getClusterType() const {
    return m_cluster_type;
}
void OAIModifyClusterMessage::setClusterType(const QString &cluster_type) {
    m_cluster_type = cluster_type;
    m_cluster_type_isSet = true;
}

bool OAIModifyClusterMessage::is_cluster_type_Set() const{
    return m_cluster_type_isSet;
}

bool OAIModifyClusterMessage::is_cluster_type_Valid() const{
    return m_cluster_type_isValid;
}

QString OAIModifyClusterMessage::getNodeType() const {
    return m_node_type;
}
void OAIModifyClusterMessage::setNodeType(const QString &node_type) {
    m_node_type = node_type;
    m_node_type_isSet = true;
}

bool OAIModifyClusterMessage::is_node_type_Set() const{
    return m_node_type_isSet;
}

bool OAIModifyClusterMessage::is_node_type_Valid() const{
    return m_node_type_isValid;
}

qint32 OAIModifyClusterMessage::getNumberOfNodes() const {
    return m_number_of_nodes;
}
void OAIModifyClusterMessage::setNumberOfNodes(const qint32 &number_of_nodes) {
    m_number_of_nodes = number_of_nodes;
    m_number_of_nodes_isSet = true;
}

bool OAIModifyClusterMessage::is_number_of_nodes_Set() const{
    return m_number_of_nodes_isSet;
}

bool OAIModifyClusterMessage::is_number_of_nodes_Valid() const{
    return m_number_of_nodes_isValid;
}

QList OAIModifyClusterMessage::getClusterSecurityGroups() const {
    return m_cluster_security_groups;
}
void OAIModifyClusterMessage::setClusterSecurityGroups(const QList &cluster_security_groups) {
    m_cluster_security_groups = cluster_security_groups;
    m_cluster_security_groups_isSet = true;
}

bool OAIModifyClusterMessage::is_cluster_security_groups_Set() const{
    return m_cluster_security_groups_isSet;
}

bool OAIModifyClusterMessage::is_cluster_security_groups_Valid() const{
    return m_cluster_security_groups_isValid;
}

QList OAIModifyClusterMessage::getVpcSecurityGroupIds() const {
    return m_vpc_security_group_ids;
}
void OAIModifyClusterMessage::setVpcSecurityGroupIds(const QList &vpc_security_group_ids) {
    m_vpc_security_group_ids = vpc_security_group_ids;
    m_vpc_security_group_ids_isSet = true;
}

bool OAIModifyClusterMessage::is_vpc_security_group_ids_Set() const{
    return m_vpc_security_group_ids_isSet;
}

bool OAIModifyClusterMessage::is_vpc_security_group_ids_Valid() const{
    return m_vpc_security_group_ids_isValid;
}

QString OAIModifyClusterMessage::getMasterUserPassword() const {
    return m_master_user_password;
}
void OAIModifyClusterMessage::setMasterUserPassword(const QString &master_user_password) {
    m_master_user_password = master_user_password;
    m_master_user_password_isSet = true;
}

bool OAIModifyClusterMessage::is_master_user_password_Set() const{
    return m_master_user_password_isSet;
}

bool OAIModifyClusterMessage::is_master_user_password_Valid() const{
    return m_master_user_password_isValid;
}

QString OAIModifyClusterMessage::getClusterParameterGroupName() const {
    return m_cluster_parameter_group_name;
}
void OAIModifyClusterMessage::setClusterParameterGroupName(const QString &cluster_parameter_group_name) {
    m_cluster_parameter_group_name = cluster_parameter_group_name;
    m_cluster_parameter_group_name_isSet = true;
}

bool OAIModifyClusterMessage::is_cluster_parameter_group_name_Set() const{
    return m_cluster_parameter_group_name_isSet;
}

bool OAIModifyClusterMessage::is_cluster_parameter_group_name_Valid() const{
    return m_cluster_parameter_group_name_isValid;
}

qint32 OAIModifyClusterMessage::getAutomatedSnapshotRetentionPeriod() const {
    return m_automated_snapshot_retention_period;
}
void OAIModifyClusterMessage::setAutomatedSnapshotRetentionPeriod(const qint32 &automated_snapshot_retention_period) {
    m_automated_snapshot_retention_period = automated_snapshot_retention_period;
    m_automated_snapshot_retention_period_isSet = true;
}

bool OAIModifyClusterMessage::is_automated_snapshot_retention_period_Set() const{
    return m_automated_snapshot_retention_period_isSet;
}

bool OAIModifyClusterMessage::is_automated_snapshot_retention_period_Valid() const{
    return m_automated_snapshot_retention_period_isValid;
}

qint32 OAIModifyClusterMessage::getManualSnapshotRetentionPeriod() const {
    return m_manual_snapshot_retention_period;
}
void OAIModifyClusterMessage::setManualSnapshotRetentionPeriod(const qint32 &manual_snapshot_retention_period) {
    m_manual_snapshot_retention_period = manual_snapshot_retention_period;
    m_manual_snapshot_retention_period_isSet = true;
}

bool OAIModifyClusterMessage::is_manual_snapshot_retention_period_Set() const{
    return m_manual_snapshot_retention_period_isSet;
}

bool OAIModifyClusterMessage::is_manual_snapshot_retention_period_Valid() const{
    return m_manual_snapshot_retention_period_isValid;
}

QString OAIModifyClusterMessage::getPreferredMaintenanceWindow() const {
    return m_preferred_maintenance_window;
}
void OAIModifyClusterMessage::setPreferredMaintenanceWindow(const QString &preferred_maintenance_window) {
    m_preferred_maintenance_window = preferred_maintenance_window;
    m_preferred_maintenance_window_isSet = true;
}

bool OAIModifyClusterMessage::is_preferred_maintenance_window_Set() const{
    return m_preferred_maintenance_window_isSet;
}

bool OAIModifyClusterMessage::is_preferred_maintenance_window_Valid() const{
    return m_preferred_maintenance_window_isValid;
}

QString OAIModifyClusterMessage::getClusterVersion() const {
    return m_cluster_version;
}
void OAIModifyClusterMessage::setClusterVersion(const QString &cluster_version) {
    m_cluster_version = cluster_version;
    m_cluster_version_isSet = true;
}

bool OAIModifyClusterMessage::is_cluster_version_Set() const{
    return m_cluster_version_isSet;
}

bool OAIModifyClusterMessage::is_cluster_version_Valid() const{
    return m_cluster_version_isValid;
}

bool OAIModifyClusterMessage::getAllowVersionUpgrade() const {
    return m_allow_version_upgrade;
}
void OAIModifyClusterMessage::setAllowVersionUpgrade(const bool &allow_version_upgrade) {
    m_allow_version_upgrade = allow_version_upgrade;
    m_allow_version_upgrade_isSet = true;
}

bool OAIModifyClusterMessage::is_allow_version_upgrade_Set() const{
    return m_allow_version_upgrade_isSet;
}

bool OAIModifyClusterMessage::is_allow_version_upgrade_Valid() const{
    return m_allow_version_upgrade_isValid;
}

QString OAIModifyClusterMessage::getHsmClientCertificateIdentifier() const {
    return m_hsm_client_certificate_identifier;
}
void OAIModifyClusterMessage::setHsmClientCertificateIdentifier(const QString &hsm_client_certificate_identifier) {
    m_hsm_client_certificate_identifier = hsm_client_certificate_identifier;
    m_hsm_client_certificate_identifier_isSet = true;
}

bool OAIModifyClusterMessage::is_hsm_client_certificate_identifier_Set() const{
    return m_hsm_client_certificate_identifier_isSet;
}

bool OAIModifyClusterMessage::is_hsm_client_certificate_identifier_Valid() const{
    return m_hsm_client_certificate_identifier_isValid;
}

QString OAIModifyClusterMessage::getHsmConfigurationIdentifier() const {
    return m_hsm_configuration_identifier;
}
void OAIModifyClusterMessage::setHsmConfigurationIdentifier(const QString &hsm_configuration_identifier) {
    m_hsm_configuration_identifier = hsm_configuration_identifier;
    m_hsm_configuration_identifier_isSet = true;
}

bool OAIModifyClusterMessage::is_hsm_configuration_identifier_Set() const{
    return m_hsm_configuration_identifier_isSet;
}

bool OAIModifyClusterMessage::is_hsm_configuration_identifier_Valid() const{
    return m_hsm_configuration_identifier_isValid;
}

QString OAIModifyClusterMessage::getNewClusterIdentifier() const {
    return m_new_cluster_identifier;
}
void OAIModifyClusterMessage::setNewClusterIdentifier(const QString &new_cluster_identifier) {
    m_new_cluster_identifier = new_cluster_identifier;
    m_new_cluster_identifier_isSet = true;
}

bool OAIModifyClusterMessage::is_new_cluster_identifier_Set() const{
    return m_new_cluster_identifier_isSet;
}

bool OAIModifyClusterMessage::is_new_cluster_identifier_Valid() const{
    return m_new_cluster_identifier_isValid;
}

bool OAIModifyClusterMessage::getPubliclyAccessible() const {
    return m_publicly_accessible;
}
void OAIModifyClusterMessage::setPubliclyAccessible(const bool &publicly_accessible) {
    m_publicly_accessible = publicly_accessible;
    m_publicly_accessible_isSet = true;
}

bool OAIModifyClusterMessage::is_publicly_accessible_Set() const{
    return m_publicly_accessible_isSet;
}

bool OAIModifyClusterMessage::is_publicly_accessible_Valid() const{
    return m_publicly_accessible_isValid;
}

QString OAIModifyClusterMessage::getElasticIp() const {
    return m_elastic_ip;
}
void OAIModifyClusterMessage::setElasticIp(const QString &elastic_ip) {
    m_elastic_ip = elastic_ip;
    m_elastic_ip_isSet = true;
}

bool OAIModifyClusterMessage::is_elastic_ip_Set() const{
    return m_elastic_ip_isSet;
}

bool OAIModifyClusterMessage::is_elastic_ip_Valid() const{
    return m_elastic_ip_isValid;
}

bool OAIModifyClusterMessage::getEnhancedVpcRouting() const {
    return m_enhanced_vpc_routing;
}
void OAIModifyClusterMessage::setEnhancedVpcRouting(const bool &enhanced_vpc_routing) {
    m_enhanced_vpc_routing = enhanced_vpc_routing;
    m_enhanced_vpc_routing_isSet = true;
}

bool OAIModifyClusterMessage::is_enhanced_vpc_routing_Set() const{
    return m_enhanced_vpc_routing_isSet;
}

bool OAIModifyClusterMessage::is_enhanced_vpc_routing_Valid() const{
    return m_enhanced_vpc_routing_isValid;
}

QString OAIModifyClusterMessage::getMaintenanceTrackName() const {
    return m_maintenance_track_name;
}
void OAIModifyClusterMessage::setMaintenanceTrackName(const QString &maintenance_track_name) {
    m_maintenance_track_name = maintenance_track_name;
    m_maintenance_track_name_isSet = true;
}

bool OAIModifyClusterMessage::is_maintenance_track_name_Set() const{
    return m_maintenance_track_name_isSet;
}

bool OAIModifyClusterMessage::is_maintenance_track_name_Valid() const{
    return m_maintenance_track_name_isValid;
}

bool OAIModifyClusterMessage::getEncrypted() const {
    return m_encrypted;
}
void OAIModifyClusterMessage::setEncrypted(const bool &encrypted) {
    m_encrypted = encrypted;
    m_encrypted_isSet = true;
}

bool OAIModifyClusterMessage::is_encrypted_Set() const{
    return m_encrypted_isSet;
}

bool OAIModifyClusterMessage::is_encrypted_Valid() const{
    return m_encrypted_isValid;
}

QString OAIModifyClusterMessage::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAIModifyClusterMessage::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAIModifyClusterMessage::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAIModifyClusterMessage::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

bool OAIModifyClusterMessage::getAvailabilityZoneRelocation() const {
    return m_availability_zone_relocation;
}
void OAIModifyClusterMessage::setAvailabilityZoneRelocation(const bool &availability_zone_relocation) {
    m_availability_zone_relocation = availability_zone_relocation;
    m_availability_zone_relocation_isSet = true;
}

bool OAIModifyClusterMessage::is_availability_zone_relocation_Set() const{
    return m_availability_zone_relocation_isSet;
}

bool OAIModifyClusterMessage::is_availability_zone_relocation_Valid() const{
    return m_availability_zone_relocation_isValid;
}

QString OAIModifyClusterMessage::getAvailabilityZone() const {
    return m_availability_zone;
}
void OAIModifyClusterMessage::setAvailabilityZone(const QString &availability_zone) {
    m_availability_zone = availability_zone;
    m_availability_zone_isSet = true;
}

bool OAIModifyClusterMessage::is_availability_zone_Set() const{
    return m_availability_zone_isSet;
}

bool OAIModifyClusterMessage::is_availability_zone_Valid() const{
    return m_availability_zone_isValid;
}

qint32 OAIModifyClusterMessage::getPort() const {
    return m_port;
}
void OAIModifyClusterMessage::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIModifyClusterMessage::is_port_Set() const{
    return m_port_isSet;
}

bool OAIModifyClusterMessage::is_port_Valid() const{
    return m_port_isValid;
}

bool OAIModifyClusterMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_security_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_user_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_parameter_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_automated_snapshot_retention_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_snapshot_retention_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_maintenance_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_version_upgrade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hsm_client_certificate_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hsm_configuration_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publicly_accessible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elastic_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enhanced_vpc_routing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance_track_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zone_relocation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModifyClusterMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cluster_identifier_isValid && true;
}

} // namespace OpenAPI
