/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeClusterSnapshotsMessage.h
 *
 * &lt;p/&gt;
 */

#ifndef OAIDescribeClusterSnapshotsMessage_H
#define OAIDescribeClusterSnapshotsMessage_H

#include <QJsonObject>

#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDescribeClusterSnapshotsMessage : public OAIObject {
public:
    OAIDescribeClusterSnapshotsMessage();
    OAIDescribeClusterSnapshotsMessage(QString json);
    ~OAIDescribeClusterSnapshotsMessage() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getClusterIdentifier() const;
    void setClusterIdentifier(const QString &cluster_identifier);
    bool is_cluster_identifier_Set() const;
    bool is_cluster_identifier_Valid() const;

    QString getSnapshotIdentifier() const;
    void setSnapshotIdentifier(const QString &snapshot_identifier);
    bool is_snapshot_identifier_Set() const;
    bool is_snapshot_identifier_Valid() const;

    QString getSnapshotArn() const;
    void setSnapshotArn(const QString &snapshot_arn);
    bool is_snapshot_arn_Set() const;
    bool is_snapshot_arn_Valid() const;

    QString getSnapshotType() const;
    void setSnapshotType(const QString &snapshot_type);
    bool is_snapshot_type_Set() const;
    bool is_snapshot_type_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    qint32 getMaxRecords() const;
    void setMaxRecords(const qint32 &max_records);
    bool is_max_records_Set() const;
    bool is_max_records_Valid() const;

    QString getMarker() const;
    void setMarker(const QString &marker);
    bool is_marker_Set() const;
    bool is_marker_Valid() const;

    QString getOwnerAccount() const;
    void setOwnerAccount(const QString &owner_account);
    bool is_owner_account_Set() const;
    bool is_owner_account_Valid() const;

    QList getTagKeys() const;
    void setTagKeys(const QList &tag_keys);
    bool is_tag_keys_Set() const;
    bool is_tag_keys_Valid() const;

    QList getTagValues() const;
    void setTagValues(const QList &tag_values);
    bool is_tag_values_Set() const;
    bool is_tag_values_Valid() const;

    bool getClusterExists() const;
    void setClusterExists(const bool &cluster_exists);
    bool is_cluster_exists_Set() const;
    bool is_cluster_exists_Valid() const;

    QList getSortingEntities() const;
    void setSortingEntities(const QList &sorting_entities);
    bool is_sorting_entities_Set() const;
    bool is_sorting_entities_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_cluster_identifier;
    bool m_cluster_identifier_isSet;
    bool m_cluster_identifier_isValid;

    QString m_snapshot_identifier;
    bool m_snapshot_identifier_isSet;
    bool m_snapshot_identifier_isValid;

    QString m_snapshot_arn;
    bool m_snapshot_arn_isSet;
    bool m_snapshot_arn_isValid;

    QString m_snapshot_type;
    bool m_snapshot_type_isSet;
    bool m_snapshot_type_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    qint32 m_max_records;
    bool m_max_records_isSet;
    bool m_max_records_isValid;

    QString m_marker;
    bool m_marker_isSet;
    bool m_marker_isValid;

    QString m_owner_account;
    bool m_owner_account_isSet;
    bool m_owner_account_isValid;

    QList m_tag_keys;
    bool m_tag_keys_isSet;
    bool m_tag_keys_isValid;

    QList m_tag_values;
    bool m_tag_values_isSet;
    bool m_tag_values_isValid;

    bool m_cluster_exists;
    bool m_cluster_exists_isSet;
    bool m_cluster_exists_isValid;

    QList m_sorting_entities;
    bool m_sorting_entities_isSet;
    bool m_sorting_entities_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeClusterSnapshotsMessage)

#endif // OAIDescribeClusterSnapshotsMessage_H
