/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateSnapshotScheduleMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateSnapshotScheduleMessage::OAICreateSnapshotScheduleMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateSnapshotScheduleMessage::OAICreateSnapshotScheduleMessage() {
    this->initializeModel();
}

OAICreateSnapshotScheduleMessage::~OAICreateSnapshotScheduleMessage() {}

void OAICreateSnapshotScheduleMessage::initializeModel() {

    m_schedule_definitions_isSet = false;
    m_schedule_definitions_isValid = false;

    m_schedule_identifier_isSet = false;
    m_schedule_identifier_isValid = false;

    m_schedule_description_isSet = false;
    m_schedule_description_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_dry_run_isSet = false;
    m_dry_run_isValid = false;

    m_next_invocations_isSet = false;
    m_next_invocations_isValid = false;
}

void OAICreateSnapshotScheduleMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateSnapshotScheduleMessage::fromJsonObject(QJsonObject json) {

    m_schedule_definitions_isValid = ::OpenAPI::fromJsonValue(m_schedule_definitions, json[QString("ScheduleDefinitions")]);
    m_schedule_definitions_isSet = !json[QString("ScheduleDefinitions")].isNull() && m_schedule_definitions_isValid;

    m_schedule_identifier_isValid = ::OpenAPI::fromJsonValue(m_schedule_identifier, json[QString("ScheduleIdentifier")]);
    m_schedule_identifier_isSet = !json[QString("ScheduleIdentifier")].isNull() && m_schedule_identifier_isValid;

    m_schedule_description_isValid = ::OpenAPI::fromJsonValue(m_schedule_description, json[QString("ScheduleDescription")]);
    m_schedule_description_isSet = !json[QString("ScheduleDescription")].isNull() && m_schedule_description_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_dry_run_isValid = ::OpenAPI::fromJsonValue(m_dry_run, json[QString("DryRun")]);
    m_dry_run_isSet = !json[QString("DryRun")].isNull() && m_dry_run_isValid;

    m_next_invocations_isValid = ::OpenAPI::fromJsonValue(m_next_invocations, json[QString("NextInvocations")]);
    m_next_invocations_isSet = !json[QString("NextInvocations")].isNull() && m_next_invocations_isValid;
}

QString OAICreateSnapshotScheduleMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateSnapshotScheduleMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_schedule_definitions.isSet()) {
        obj.insert(QString("ScheduleDefinitions"), ::OpenAPI::toJsonValue(m_schedule_definitions));
    }
    if (m_schedule_identifier_isSet) {
        obj.insert(QString("ScheduleIdentifier"), ::OpenAPI::toJsonValue(m_schedule_identifier));
    }
    if (m_schedule_description_isSet) {
        obj.insert(QString("ScheduleDescription"), ::OpenAPI::toJsonValue(m_schedule_description));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_dry_run_isSet) {
        obj.insert(QString("DryRun"), ::OpenAPI::toJsonValue(m_dry_run));
    }
    if (m_next_invocations_isSet) {
        obj.insert(QString("NextInvocations"), ::OpenAPI::toJsonValue(m_next_invocations));
    }
    return obj;
}

QList OAICreateSnapshotScheduleMessage::getScheduleDefinitions() const {
    return m_schedule_definitions;
}
void OAICreateSnapshotScheduleMessage::setScheduleDefinitions(const QList &schedule_definitions) {
    m_schedule_definitions = schedule_definitions;
    m_schedule_definitions_isSet = true;
}

bool OAICreateSnapshotScheduleMessage::is_schedule_definitions_Set() const{
    return m_schedule_definitions_isSet;
}

bool OAICreateSnapshotScheduleMessage::is_schedule_definitions_Valid() const{
    return m_schedule_definitions_isValid;
}

QString OAICreateSnapshotScheduleMessage::getScheduleIdentifier() const {
    return m_schedule_identifier;
}
void OAICreateSnapshotScheduleMessage::setScheduleIdentifier(const QString &schedule_identifier) {
    m_schedule_identifier = schedule_identifier;
    m_schedule_identifier_isSet = true;
}

bool OAICreateSnapshotScheduleMessage::is_schedule_identifier_Set() const{
    return m_schedule_identifier_isSet;
}

bool OAICreateSnapshotScheduleMessage::is_schedule_identifier_Valid() const{
    return m_schedule_identifier_isValid;
}

QString OAICreateSnapshotScheduleMessage::getScheduleDescription() const {
    return m_schedule_description;
}
void OAICreateSnapshotScheduleMessage::setScheduleDescription(const QString &schedule_description) {
    m_schedule_description = schedule_description;
    m_schedule_description_isSet = true;
}

bool OAICreateSnapshotScheduleMessage::is_schedule_description_Set() const{
    return m_schedule_description_isSet;
}

bool OAICreateSnapshotScheduleMessage::is_schedule_description_Valid() const{
    return m_schedule_description_isValid;
}

QList OAICreateSnapshotScheduleMessage::getTags() const {
    return m_tags;
}
void OAICreateSnapshotScheduleMessage::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateSnapshotScheduleMessage::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateSnapshotScheduleMessage::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateSnapshotScheduleMessage::getDryRun() const {
    return m_dry_run;
}
void OAICreateSnapshotScheduleMessage::setDryRun(const bool &dry_run) {
    m_dry_run = dry_run;
    m_dry_run_isSet = true;
}

bool OAICreateSnapshotScheduleMessage::is_dry_run_Set() const{
    return m_dry_run_isSet;
}

bool OAICreateSnapshotScheduleMessage::is_dry_run_Valid() const{
    return m_dry_run_isValid;
}

qint32 OAICreateSnapshotScheduleMessage::getNextInvocations() const {
    return m_next_invocations;
}
void OAICreateSnapshotScheduleMessage::setNextInvocations(const qint32 &next_invocations) {
    m_next_invocations = next_invocations;
    m_next_invocations_isSet = true;
}

bool OAICreateSnapshotScheduleMessage::is_next_invocations_Set() const{
    return m_next_invocations_isSet;
}

bool OAICreateSnapshotScheduleMessage::is_next_invocations_Valid() const{
    return m_next_invocations_isValid;
}

bool OAICreateSnapshotScheduleMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_schedule_definitions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dry_run_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_invocations_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateSnapshotScheduleMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
