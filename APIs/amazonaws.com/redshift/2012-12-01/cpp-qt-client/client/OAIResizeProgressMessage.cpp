/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResizeProgressMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResizeProgressMessage::OAIResizeProgressMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResizeProgressMessage::OAIResizeProgressMessage() {
    this->initializeModel();
}

OAIResizeProgressMessage::~OAIResizeProgressMessage() {}

void OAIResizeProgressMessage::initializeModel() {

    m_target_node_type_isSet = false;
    m_target_node_type_isValid = false;

    m_target_number_of_nodes_isSet = false;
    m_target_number_of_nodes_isValid = false;

    m_target_cluster_type_isSet = false;
    m_target_cluster_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_import_tables_completed_isSet = false;
    m_import_tables_completed_isValid = false;

    m_import_tables_in_progress_isSet = false;
    m_import_tables_in_progress_isValid = false;

    m_import_tables_not_started_isSet = false;
    m_import_tables_not_started_isValid = false;

    m_avg_resize_rate_in_mega_bytes_per_second_isSet = false;
    m_avg_resize_rate_in_mega_bytes_per_second_isValid = false;

    m_total_resize_data_in_mega_bytes_isSet = false;
    m_total_resize_data_in_mega_bytes_isValid = false;

    m_progress_in_mega_bytes_isSet = false;
    m_progress_in_mega_bytes_isValid = false;

    m_elapsed_time_in_seconds_isSet = false;
    m_elapsed_time_in_seconds_isValid = false;

    m_estimated_time_to_completion_in_seconds_isSet = false;
    m_estimated_time_to_completion_in_seconds_isValid = false;

    m_resize_type_isSet = false;
    m_resize_type_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_target_encryption_type_isSet = false;
    m_target_encryption_type_isValid = false;

    m_data_transfer_progress_percent_isSet = false;
    m_data_transfer_progress_percent_isValid = false;
}

void OAIResizeProgressMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResizeProgressMessage::fromJsonObject(QJsonObject json) {

    m_target_node_type_isValid = ::OpenAPI::fromJsonValue(m_target_node_type, json[QString("TargetNodeType")]);
    m_target_node_type_isSet = !json[QString("TargetNodeType")].isNull() && m_target_node_type_isValid;

    m_target_number_of_nodes_isValid = ::OpenAPI::fromJsonValue(m_target_number_of_nodes, json[QString("TargetNumberOfNodes")]);
    m_target_number_of_nodes_isSet = !json[QString("TargetNumberOfNodes")].isNull() && m_target_number_of_nodes_isValid;

    m_target_cluster_type_isValid = ::OpenAPI::fromJsonValue(m_target_cluster_type, json[QString("TargetClusterType")]);
    m_target_cluster_type_isSet = !json[QString("TargetClusterType")].isNull() && m_target_cluster_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_import_tables_completed_isValid = ::OpenAPI::fromJsonValue(m_import_tables_completed, json[QString("ImportTablesCompleted")]);
    m_import_tables_completed_isSet = !json[QString("ImportTablesCompleted")].isNull() && m_import_tables_completed_isValid;

    m_import_tables_in_progress_isValid = ::OpenAPI::fromJsonValue(m_import_tables_in_progress, json[QString("ImportTablesInProgress")]);
    m_import_tables_in_progress_isSet = !json[QString("ImportTablesInProgress")].isNull() && m_import_tables_in_progress_isValid;

    m_import_tables_not_started_isValid = ::OpenAPI::fromJsonValue(m_import_tables_not_started, json[QString("ImportTablesNotStarted")]);
    m_import_tables_not_started_isSet = !json[QString("ImportTablesNotStarted")].isNull() && m_import_tables_not_started_isValid;

    m_avg_resize_rate_in_mega_bytes_per_second_isValid = ::OpenAPI::fromJsonValue(m_avg_resize_rate_in_mega_bytes_per_second, json[QString("AvgResizeRateInMegaBytesPerSecond")]);
    m_avg_resize_rate_in_mega_bytes_per_second_isSet = !json[QString("AvgResizeRateInMegaBytesPerSecond")].isNull() && m_avg_resize_rate_in_mega_bytes_per_second_isValid;

    m_total_resize_data_in_mega_bytes_isValid = ::OpenAPI::fromJsonValue(m_total_resize_data_in_mega_bytes, json[QString("TotalResizeDataInMegaBytes")]);
    m_total_resize_data_in_mega_bytes_isSet = !json[QString("TotalResizeDataInMegaBytes")].isNull() && m_total_resize_data_in_mega_bytes_isValid;

    m_progress_in_mega_bytes_isValid = ::OpenAPI::fromJsonValue(m_progress_in_mega_bytes, json[QString("ProgressInMegaBytes")]);
    m_progress_in_mega_bytes_isSet = !json[QString("ProgressInMegaBytes")].isNull() && m_progress_in_mega_bytes_isValid;

    m_elapsed_time_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_elapsed_time_in_seconds, json[QString("ElapsedTimeInSeconds")]);
    m_elapsed_time_in_seconds_isSet = !json[QString("ElapsedTimeInSeconds")].isNull() && m_elapsed_time_in_seconds_isValid;

    m_estimated_time_to_completion_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_estimated_time_to_completion_in_seconds, json[QString("EstimatedTimeToCompletionInSeconds")]);
    m_estimated_time_to_completion_in_seconds_isSet = !json[QString("EstimatedTimeToCompletionInSeconds")].isNull() && m_estimated_time_to_completion_in_seconds_isValid;

    m_resize_type_isValid = ::OpenAPI::fromJsonValue(m_resize_type, json[QString("ResizeType")]);
    m_resize_type_isSet = !json[QString("ResizeType")].isNull() && m_resize_type_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_target_encryption_type_isValid = ::OpenAPI::fromJsonValue(m_target_encryption_type, json[QString("TargetEncryptionType")]);
    m_target_encryption_type_isSet = !json[QString("TargetEncryptionType")].isNull() && m_target_encryption_type_isValid;

    m_data_transfer_progress_percent_isValid = ::OpenAPI::fromJsonValue(m_data_transfer_progress_percent, json[QString("DataTransferProgressPercent")]);
    m_data_transfer_progress_percent_isSet = !json[QString("DataTransferProgressPercent")].isNull() && m_data_transfer_progress_percent_isValid;
}

QString OAIResizeProgressMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResizeProgressMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_target_node_type_isSet) {
        obj.insert(QString("TargetNodeType"), ::OpenAPI::toJsonValue(m_target_node_type));
    }
    if (m_target_number_of_nodes_isSet) {
        obj.insert(QString("TargetNumberOfNodes"), ::OpenAPI::toJsonValue(m_target_number_of_nodes));
    }
    if (m_target_cluster_type_isSet) {
        obj.insert(QString("TargetClusterType"), ::OpenAPI::toJsonValue(m_target_cluster_type));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_import_tables_completed.isSet()) {
        obj.insert(QString("ImportTablesCompleted"), ::OpenAPI::toJsonValue(m_import_tables_completed));
    }
    if (m_import_tables_in_progress.isSet()) {
        obj.insert(QString("ImportTablesInProgress"), ::OpenAPI::toJsonValue(m_import_tables_in_progress));
    }
    if (m_import_tables_not_started.isSet()) {
        obj.insert(QString("ImportTablesNotStarted"), ::OpenAPI::toJsonValue(m_import_tables_not_started));
    }
    if (m_avg_resize_rate_in_mega_bytes_per_second_isSet) {
        obj.insert(QString("AvgResizeRateInMegaBytesPerSecond"), ::OpenAPI::toJsonValue(m_avg_resize_rate_in_mega_bytes_per_second));
    }
    if (m_total_resize_data_in_mega_bytes_isSet) {
        obj.insert(QString("TotalResizeDataInMegaBytes"), ::OpenAPI::toJsonValue(m_total_resize_data_in_mega_bytes));
    }
    if (m_progress_in_mega_bytes_isSet) {
        obj.insert(QString("ProgressInMegaBytes"), ::OpenAPI::toJsonValue(m_progress_in_mega_bytes));
    }
    if (m_elapsed_time_in_seconds_isSet) {
        obj.insert(QString("ElapsedTimeInSeconds"), ::OpenAPI::toJsonValue(m_elapsed_time_in_seconds));
    }
    if (m_estimated_time_to_completion_in_seconds_isSet) {
        obj.insert(QString("EstimatedTimeToCompletionInSeconds"), ::OpenAPI::toJsonValue(m_estimated_time_to_completion_in_seconds));
    }
    if (m_resize_type_isSet) {
        obj.insert(QString("ResizeType"), ::OpenAPI::toJsonValue(m_resize_type));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_target_encryption_type_isSet) {
        obj.insert(QString("TargetEncryptionType"), ::OpenAPI::toJsonValue(m_target_encryption_type));
    }
    if (m_data_transfer_progress_percent_isSet) {
        obj.insert(QString("DataTransferProgressPercent"), ::OpenAPI::toJsonValue(m_data_transfer_progress_percent));
    }
    return obj;
}

QString OAIResizeProgressMessage::getTargetNodeType() const {
    return m_target_node_type;
}
void OAIResizeProgressMessage::setTargetNodeType(const QString &target_node_type) {
    m_target_node_type = target_node_type;
    m_target_node_type_isSet = true;
}

bool OAIResizeProgressMessage::is_target_node_type_Set() const{
    return m_target_node_type_isSet;
}

bool OAIResizeProgressMessage::is_target_node_type_Valid() const{
    return m_target_node_type_isValid;
}

qint32 OAIResizeProgressMessage::getTargetNumberOfNodes() const {
    return m_target_number_of_nodes;
}
void OAIResizeProgressMessage::setTargetNumberOfNodes(const qint32 &target_number_of_nodes) {
    m_target_number_of_nodes = target_number_of_nodes;
    m_target_number_of_nodes_isSet = true;
}

bool OAIResizeProgressMessage::is_target_number_of_nodes_Set() const{
    return m_target_number_of_nodes_isSet;
}

bool OAIResizeProgressMessage::is_target_number_of_nodes_Valid() const{
    return m_target_number_of_nodes_isValid;
}

QString OAIResizeProgressMessage::getTargetClusterType() const {
    return m_target_cluster_type;
}
void OAIResizeProgressMessage::setTargetClusterType(const QString &target_cluster_type) {
    m_target_cluster_type = target_cluster_type;
    m_target_cluster_type_isSet = true;
}

bool OAIResizeProgressMessage::is_target_cluster_type_Set() const{
    return m_target_cluster_type_isSet;
}

bool OAIResizeProgressMessage::is_target_cluster_type_Valid() const{
    return m_target_cluster_type_isValid;
}

QString OAIResizeProgressMessage::getStatus() const {
    return m_status;
}
void OAIResizeProgressMessage::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIResizeProgressMessage::is_status_Set() const{
    return m_status_isSet;
}

bool OAIResizeProgressMessage::is_status_Valid() const{
    return m_status_isValid;
}

QList OAIResizeProgressMessage::getImportTablesCompleted() const {
    return m_import_tables_completed;
}
void OAIResizeProgressMessage::setImportTablesCompleted(const QList &import_tables_completed) {
    m_import_tables_completed = import_tables_completed;
    m_import_tables_completed_isSet = true;
}

bool OAIResizeProgressMessage::is_import_tables_completed_Set() const{
    return m_import_tables_completed_isSet;
}

bool OAIResizeProgressMessage::is_import_tables_completed_Valid() const{
    return m_import_tables_completed_isValid;
}

QList OAIResizeProgressMessage::getImportTablesInProgress() const {
    return m_import_tables_in_progress;
}
void OAIResizeProgressMessage::setImportTablesInProgress(const QList &import_tables_in_progress) {
    m_import_tables_in_progress = import_tables_in_progress;
    m_import_tables_in_progress_isSet = true;
}

bool OAIResizeProgressMessage::is_import_tables_in_progress_Set() const{
    return m_import_tables_in_progress_isSet;
}

bool OAIResizeProgressMessage::is_import_tables_in_progress_Valid() const{
    return m_import_tables_in_progress_isValid;
}

QList OAIResizeProgressMessage::getImportTablesNotStarted() const {
    return m_import_tables_not_started;
}
void OAIResizeProgressMessage::setImportTablesNotStarted(const QList &import_tables_not_started) {
    m_import_tables_not_started = import_tables_not_started;
    m_import_tables_not_started_isSet = true;
}

bool OAIResizeProgressMessage::is_import_tables_not_started_Set() const{
    return m_import_tables_not_started_isSet;
}

bool OAIResizeProgressMessage::is_import_tables_not_started_Valid() const{
    return m_import_tables_not_started_isValid;
}

double OAIResizeProgressMessage::getAvgResizeRateInMegaBytesPerSecond() const {
    return m_avg_resize_rate_in_mega_bytes_per_second;
}
void OAIResizeProgressMessage::setAvgResizeRateInMegaBytesPerSecond(const double &avg_resize_rate_in_mega_bytes_per_second) {
    m_avg_resize_rate_in_mega_bytes_per_second = avg_resize_rate_in_mega_bytes_per_second;
    m_avg_resize_rate_in_mega_bytes_per_second_isSet = true;
}

bool OAIResizeProgressMessage::is_avg_resize_rate_in_mega_bytes_per_second_Set() const{
    return m_avg_resize_rate_in_mega_bytes_per_second_isSet;
}

bool OAIResizeProgressMessage::is_avg_resize_rate_in_mega_bytes_per_second_Valid() const{
    return m_avg_resize_rate_in_mega_bytes_per_second_isValid;
}

qint32 OAIResizeProgressMessage::getTotalResizeDataInMegaBytes() const {
    return m_total_resize_data_in_mega_bytes;
}
void OAIResizeProgressMessage::setTotalResizeDataInMegaBytes(const qint32 &total_resize_data_in_mega_bytes) {
    m_total_resize_data_in_mega_bytes = total_resize_data_in_mega_bytes;
    m_total_resize_data_in_mega_bytes_isSet = true;
}

bool OAIResizeProgressMessage::is_total_resize_data_in_mega_bytes_Set() const{
    return m_total_resize_data_in_mega_bytes_isSet;
}

bool OAIResizeProgressMessage::is_total_resize_data_in_mega_bytes_Valid() const{
    return m_total_resize_data_in_mega_bytes_isValid;
}

qint32 OAIResizeProgressMessage::getProgressInMegaBytes() const {
    return m_progress_in_mega_bytes;
}
void OAIResizeProgressMessage::setProgressInMegaBytes(const qint32 &progress_in_mega_bytes) {
    m_progress_in_mega_bytes = progress_in_mega_bytes;
    m_progress_in_mega_bytes_isSet = true;
}

bool OAIResizeProgressMessage::is_progress_in_mega_bytes_Set() const{
    return m_progress_in_mega_bytes_isSet;
}

bool OAIResizeProgressMessage::is_progress_in_mega_bytes_Valid() const{
    return m_progress_in_mega_bytes_isValid;
}

qint32 OAIResizeProgressMessage::getElapsedTimeInSeconds() const {
    return m_elapsed_time_in_seconds;
}
void OAIResizeProgressMessage::setElapsedTimeInSeconds(const qint32 &elapsed_time_in_seconds) {
    m_elapsed_time_in_seconds = elapsed_time_in_seconds;
    m_elapsed_time_in_seconds_isSet = true;
}

bool OAIResizeProgressMessage::is_elapsed_time_in_seconds_Set() const{
    return m_elapsed_time_in_seconds_isSet;
}

bool OAIResizeProgressMessage::is_elapsed_time_in_seconds_Valid() const{
    return m_elapsed_time_in_seconds_isValid;
}

qint32 OAIResizeProgressMessage::getEstimatedTimeToCompletionInSeconds() const {
    return m_estimated_time_to_completion_in_seconds;
}
void OAIResizeProgressMessage::setEstimatedTimeToCompletionInSeconds(const qint32 &estimated_time_to_completion_in_seconds) {
    m_estimated_time_to_completion_in_seconds = estimated_time_to_completion_in_seconds;
    m_estimated_time_to_completion_in_seconds_isSet = true;
}

bool OAIResizeProgressMessage::is_estimated_time_to_completion_in_seconds_Set() const{
    return m_estimated_time_to_completion_in_seconds_isSet;
}

bool OAIResizeProgressMessage::is_estimated_time_to_completion_in_seconds_Valid() const{
    return m_estimated_time_to_completion_in_seconds_isValid;
}

QString OAIResizeProgressMessage::getResizeType() const {
    return m_resize_type;
}
void OAIResizeProgressMessage::setResizeType(const QString &resize_type) {
    m_resize_type = resize_type;
    m_resize_type_isSet = true;
}

bool OAIResizeProgressMessage::is_resize_type_Set() const{
    return m_resize_type_isSet;
}

bool OAIResizeProgressMessage::is_resize_type_Valid() const{
    return m_resize_type_isValid;
}

QString OAIResizeProgressMessage::getMessage() const {
    return m_message;
}
void OAIResizeProgressMessage::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIResizeProgressMessage::is_message_Set() const{
    return m_message_isSet;
}

bool OAIResizeProgressMessage::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIResizeProgressMessage::getTargetEncryptionType() const {
    return m_target_encryption_type;
}
void OAIResizeProgressMessage::setTargetEncryptionType(const QString &target_encryption_type) {
    m_target_encryption_type = target_encryption_type;
    m_target_encryption_type_isSet = true;
}

bool OAIResizeProgressMessage::is_target_encryption_type_Set() const{
    return m_target_encryption_type_isSet;
}

bool OAIResizeProgressMessage::is_target_encryption_type_Valid() const{
    return m_target_encryption_type_isValid;
}

double OAIResizeProgressMessage::getDataTransferProgressPercent() const {
    return m_data_transfer_progress_percent;
}
void OAIResizeProgressMessage::setDataTransferProgressPercent(const double &data_transfer_progress_percent) {
    m_data_transfer_progress_percent = data_transfer_progress_percent;
    m_data_transfer_progress_percent_isSet = true;
}

bool OAIResizeProgressMessage::is_data_transfer_progress_percent_Set() const{
    return m_data_transfer_progress_percent_isSet;
}

bool OAIResizeProgressMessage::is_data_transfer_progress_percent_Valid() const{
    return m_data_transfer_progress_percent_isValid;
}

bool OAIResizeProgressMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_node_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_number_of_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_cluster_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_tables_completed.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_tables_in_progress.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_tables_not_started.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_avg_resize_rate_in_mega_bytes_per_second_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_resize_data_in_mega_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_in_mega_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elapsed_time_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_time_to_completion_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resize_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_encryption_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_transfer_progress_percent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResizeProgressMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
