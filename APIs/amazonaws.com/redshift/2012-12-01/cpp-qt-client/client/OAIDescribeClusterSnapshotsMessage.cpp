/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeClusterSnapshotsMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeClusterSnapshotsMessage::OAIDescribeClusterSnapshotsMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeClusterSnapshotsMessage::OAIDescribeClusterSnapshotsMessage() {
    this->initializeModel();
}

OAIDescribeClusterSnapshotsMessage::~OAIDescribeClusterSnapshotsMessage() {}

void OAIDescribeClusterSnapshotsMessage::initializeModel() {

    m_cluster_identifier_isSet = false;
    m_cluster_identifier_isValid = false;

    m_snapshot_identifier_isSet = false;
    m_snapshot_identifier_isValid = false;

    m_snapshot_arn_isSet = false;
    m_snapshot_arn_isValid = false;

    m_snapshot_type_isSet = false;
    m_snapshot_type_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_max_records_isSet = false;
    m_max_records_isValid = false;

    m_marker_isSet = false;
    m_marker_isValid = false;

    m_owner_account_isSet = false;
    m_owner_account_isValid = false;

    m_tag_keys_isSet = false;
    m_tag_keys_isValid = false;

    m_tag_values_isSet = false;
    m_tag_values_isValid = false;

    m_cluster_exists_isSet = false;
    m_cluster_exists_isValid = false;

    m_sorting_entities_isSet = false;
    m_sorting_entities_isValid = false;
}

void OAIDescribeClusterSnapshotsMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeClusterSnapshotsMessage::fromJsonObject(QJsonObject json) {

    m_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_cluster_identifier, json[QString("ClusterIdentifier")]);
    m_cluster_identifier_isSet = !json[QString("ClusterIdentifier")].isNull() && m_cluster_identifier_isValid;

    m_snapshot_identifier_isValid = ::OpenAPI::fromJsonValue(m_snapshot_identifier, json[QString("SnapshotIdentifier")]);
    m_snapshot_identifier_isSet = !json[QString("SnapshotIdentifier")].isNull() && m_snapshot_identifier_isValid;

    m_snapshot_arn_isValid = ::OpenAPI::fromJsonValue(m_snapshot_arn, json[QString("SnapshotArn")]);
    m_snapshot_arn_isSet = !json[QString("SnapshotArn")].isNull() && m_snapshot_arn_isValid;

    m_snapshot_type_isValid = ::OpenAPI::fromJsonValue(m_snapshot_type, json[QString("SnapshotType")]);
    m_snapshot_type_isSet = !json[QString("SnapshotType")].isNull() && m_snapshot_type_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_max_records_isValid = ::OpenAPI::fromJsonValue(m_max_records, json[QString("MaxRecords")]);
    m_max_records_isSet = !json[QString("MaxRecords")].isNull() && m_max_records_isValid;

    m_marker_isValid = ::OpenAPI::fromJsonValue(m_marker, json[QString("Marker")]);
    m_marker_isSet = !json[QString("Marker")].isNull() && m_marker_isValid;

    m_owner_account_isValid = ::OpenAPI::fromJsonValue(m_owner_account, json[QString("OwnerAccount")]);
    m_owner_account_isSet = !json[QString("OwnerAccount")].isNull() && m_owner_account_isValid;

    m_tag_keys_isValid = ::OpenAPI::fromJsonValue(m_tag_keys, json[QString("TagKeys")]);
    m_tag_keys_isSet = !json[QString("TagKeys")].isNull() && m_tag_keys_isValid;

    m_tag_values_isValid = ::OpenAPI::fromJsonValue(m_tag_values, json[QString("TagValues")]);
    m_tag_values_isSet = !json[QString("TagValues")].isNull() && m_tag_values_isValid;

    m_cluster_exists_isValid = ::OpenAPI::fromJsonValue(m_cluster_exists, json[QString("ClusterExists")]);
    m_cluster_exists_isSet = !json[QString("ClusterExists")].isNull() && m_cluster_exists_isValid;

    m_sorting_entities_isValid = ::OpenAPI::fromJsonValue(m_sorting_entities, json[QString("SortingEntities")]);
    m_sorting_entities_isSet = !json[QString("SortingEntities")].isNull() && m_sorting_entities_isValid;
}

QString OAIDescribeClusterSnapshotsMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeClusterSnapshotsMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_identifier_isSet) {
        obj.insert(QString("ClusterIdentifier"), ::OpenAPI::toJsonValue(m_cluster_identifier));
    }
    if (m_snapshot_identifier_isSet) {
        obj.insert(QString("SnapshotIdentifier"), ::OpenAPI::toJsonValue(m_snapshot_identifier));
    }
    if (m_snapshot_arn_isSet) {
        obj.insert(QString("SnapshotArn"), ::OpenAPI::toJsonValue(m_snapshot_arn));
    }
    if (m_snapshot_type_isSet) {
        obj.insert(QString("SnapshotType"), ::OpenAPI::toJsonValue(m_snapshot_type));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_max_records_isSet) {
        obj.insert(QString("MaxRecords"), ::OpenAPI::toJsonValue(m_max_records));
    }
    if (m_marker_isSet) {
        obj.insert(QString("Marker"), ::OpenAPI::toJsonValue(m_marker));
    }
    if (m_owner_account_isSet) {
        obj.insert(QString("OwnerAccount"), ::OpenAPI::toJsonValue(m_owner_account));
    }
    if (m_tag_keys.isSet()) {
        obj.insert(QString("TagKeys"), ::OpenAPI::toJsonValue(m_tag_keys));
    }
    if (m_tag_values.isSet()) {
        obj.insert(QString("TagValues"), ::OpenAPI::toJsonValue(m_tag_values));
    }
    if (m_cluster_exists_isSet) {
        obj.insert(QString("ClusterExists"), ::OpenAPI::toJsonValue(m_cluster_exists));
    }
    if (m_sorting_entities.isSet()) {
        obj.insert(QString("SortingEntities"), ::OpenAPI::toJsonValue(m_sorting_entities));
    }
    return obj;
}

QString OAIDescribeClusterSnapshotsMessage::getClusterIdentifier() const {
    return m_cluster_identifier;
}
void OAIDescribeClusterSnapshotsMessage::setClusterIdentifier(const QString &cluster_identifier) {
    m_cluster_identifier = cluster_identifier;
    m_cluster_identifier_isSet = true;
}

bool OAIDescribeClusterSnapshotsMessage::is_cluster_identifier_Set() const{
    return m_cluster_identifier_isSet;
}

bool OAIDescribeClusterSnapshotsMessage::is_cluster_identifier_Valid() const{
    return m_cluster_identifier_isValid;
}

QString OAIDescribeClusterSnapshotsMessage::getSnapshotIdentifier() const {
    return m_snapshot_identifier;
}
void OAIDescribeClusterSnapshotsMessage::setSnapshotIdentifier(const QString &snapshot_identifier) {
    m_snapshot_identifier = snapshot_identifier;
    m_snapshot_identifier_isSet = true;
}

bool OAIDescribeClusterSnapshotsMessage::is_snapshot_identifier_Set() const{
    return m_snapshot_identifier_isSet;
}

bool OAIDescribeClusterSnapshotsMessage::is_snapshot_identifier_Valid() const{
    return m_snapshot_identifier_isValid;
}

QString OAIDescribeClusterSnapshotsMessage::getSnapshotArn() const {
    return m_snapshot_arn;
}
void OAIDescribeClusterSnapshotsMessage::setSnapshotArn(const QString &snapshot_arn) {
    m_snapshot_arn = snapshot_arn;
    m_snapshot_arn_isSet = true;
}

bool OAIDescribeClusterSnapshotsMessage::is_snapshot_arn_Set() const{
    return m_snapshot_arn_isSet;
}

bool OAIDescribeClusterSnapshotsMessage::is_snapshot_arn_Valid() const{
    return m_snapshot_arn_isValid;
}

QString OAIDescribeClusterSnapshotsMessage::getSnapshotType() const {
    return m_snapshot_type;
}
void OAIDescribeClusterSnapshotsMessage::setSnapshotType(const QString &snapshot_type) {
    m_snapshot_type = snapshot_type;
    m_snapshot_type_isSet = true;
}

bool OAIDescribeClusterSnapshotsMessage::is_snapshot_type_Set() const{
    return m_snapshot_type_isSet;
}

bool OAIDescribeClusterSnapshotsMessage::is_snapshot_type_Valid() const{
    return m_snapshot_type_isValid;
}

QDateTime OAIDescribeClusterSnapshotsMessage::getStartTime() const {
    return m_start_time;
}
void OAIDescribeClusterSnapshotsMessage::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIDescribeClusterSnapshotsMessage::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIDescribeClusterSnapshotsMessage::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIDescribeClusterSnapshotsMessage::getEndTime() const {
    return m_end_time;
}
void OAIDescribeClusterSnapshotsMessage::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIDescribeClusterSnapshotsMessage::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIDescribeClusterSnapshotsMessage::is_end_time_Valid() const{
    return m_end_time_isValid;
}

qint32 OAIDescribeClusterSnapshotsMessage::getMaxRecords() const {
    return m_max_records;
}
void OAIDescribeClusterSnapshotsMessage::setMaxRecords(const qint32 &max_records) {
    m_max_records = max_records;
    m_max_records_isSet = true;
}

bool OAIDescribeClusterSnapshotsMessage::is_max_records_Set() const{
    return m_max_records_isSet;
}

bool OAIDescribeClusterSnapshotsMessage::is_max_records_Valid() const{
    return m_max_records_isValid;
}

QString OAIDescribeClusterSnapshotsMessage::getMarker() const {
    return m_marker;
}
void OAIDescribeClusterSnapshotsMessage::setMarker(const QString &marker) {
    m_marker = marker;
    m_marker_isSet = true;
}

bool OAIDescribeClusterSnapshotsMessage::is_marker_Set() const{
    return m_marker_isSet;
}

bool OAIDescribeClusterSnapshotsMessage::is_marker_Valid() const{
    return m_marker_isValid;
}

QString OAIDescribeClusterSnapshotsMessage::getOwnerAccount() const {
    return m_owner_account;
}
void OAIDescribeClusterSnapshotsMessage::setOwnerAccount(const QString &owner_account) {
    m_owner_account = owner_account;
    m_owner_account_isSet = true;
}

bool OAIDescribeClusterSnapshotsMessage::is_owner_account_Set() const{
    return m_owner_account_isSet;
}

bool OAIDescribeClusterSnapshotsMessage::is_owner_account_Valid() const{
    return m_owner_account_isValid;
}

QList OAIDescribeClusterSnapshotsMessage::getTagKeys() const {
    return m_tag_keys;
}
void OAIDescribeClusterSnapshotsMessage::setTagKeys(const QList &tag_keys) {
    m_tag_keys = tag_keys;
    m_tag_keys_isSet = true;
}

bool OAIDescribeClusterSnapshotsMessage::is_tag_keys_Set() const{
    return m_tag_keys_isSet;
}

bool OAIDescribeClusterSnapshotsMessage::is_tag_keys_Valid() const{
    return m_tag_keys_isValid;
}

QList OAIDescribeClusterSnapshotsMessage::getTagValues() const {
    return m_tag_values;
}
void OAIDescribeClusterSnapshotsMessage::setTagValues(const QList &tag_values) {
    m_tag_values = tag_values;
    m_tag_values_isSet = true;
}

bool OAIDescribeClusterSnapshotsMessage::is_tag_values_Set() const{
    return m_tag_values_isSet;
}

bool OAIDescribeClusterSnapshotsMessage::is_tag_values_Valid() const{
    return m_tag_values_isValid;
}

bool OAIDescribeClusterSnapshotsMessage::getClusterExists() const {
    return m_cluster_exists;
}
void OAIDescribeClusterSnapshotsMessage::setClusterExists(const bool &cluster_exists) {
    m_cluster_exists = cluster_exists;
    m_cluster_exists_isSet = true;
}

bool OAIDescribeClusterSnapshotsMessage::is_cluster_exists_Set() const{
    return m_cluster_exists_isSet;
}

bool OAIDescribeClusterSnapshotsMessage::is_cluster_exists_Valid() const{
    return m_cluster_exists_isValid;
}

QList OAIDescribeClusterSnapshotsMessage::getSortingEntities() const {
    return m_sorting_entities;
}
void OAIDescribeClusterSnapshotsMessage::setSortingEntities(const QList &sorting_entities) {
    m_sorting_entities = sorting_entities;
    m_sorting_entities_isSet = true;
}

bool OAIDescribeClusterSnapshotsMessage::is_sorting_entities_Set() const{
    return m_sorting_entities_isSet;
}

bool OAIDescribeClusterSnapshotsMessage::is_sorting_entities_Valid() const{
    return m_sorting_entities_isValid;
}

bool OAIDescribeClusterSnapshotsMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_records_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_exists_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sorting_entities.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeClusterSnapshotsMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
