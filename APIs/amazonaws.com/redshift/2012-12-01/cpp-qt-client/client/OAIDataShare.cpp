/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataShare.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataShare::OAIDataShare(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataShare::OAIDataShare() {
    this->initializeModel();
}

OAIDataShare::~OAIDataShare() {}

void OAIDataShare::initializeModel() {

    m_data_share_arn_isSet = false;
    m_data_share_arn_isValid = false;

    m_producer_arn_isSet = false;
    m_producer_arn_isValid = false;

    m_allow_publicly_accessible_consumers_isSet = false;
    m_allow_publicly_accessible_consumers_isValid = false;

    m_data_share_associations_isSet = false;
    m_data_share_associations_isValid = false;

    m_managed_by_isSet = false;
    m_managed_by_isValid = false;
}

void OAIDataShare::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataShare::fromJsonObject(QJsonObject json) {

    m_data_share_arn_isValid = ::OpenAPI::fromJsonValue(m_data_share_arn, json[QString("DataShareArn")]);
    m_data_share_arn_isSet = !json[QString("DataShareArn")].isNull() && m_data_share_arn_isValid;

    m_producer_arn_isValid = ::OpenAPI::fromJsonValue(m_producer_arn, json[QString("ProducerArn")]);
    m_producer_arn_isSet = !json[QString("ProducerArn")].isNull() && m_producer_arn_isValid;

    m_allow_publicly_accessible_consumers_isValid = ::OpenAPI::fromJsonValue(m_allow_publicly_accessible_consumers, json[QString("AllowPubliclyAccessibleConsumers")]);
    m_allow_publicly_accessible_consumers_isSet = !json[QString("AllowPubliclyAccessibleConsumers")].isNull() && m_allow_publicly_accessible_consumers_isValid;

    m_data_share_associations_isValid = ::OpenAPI::fromJsonValue(m_data_share_associations, json[QString("DataShareAssociations")]);
    m_data_share_associations_isSet = !json[QString("DataShareAssociations")].isNull() && m_data_share_associations_isValid;

    m_managed_by_isValid = ::OpenAPI::fromJsonValue(m_managed_by, json[QString("ManagedBy")]);
    m_managed_by_isSet = !json[QString("ManagedBy")].isNull() && m_managed_by_isValid;
}

QString OAIDataShare::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataShare::asJsonObject() const {
    QJsonObject obj;
    if (m_data_share_arn_isSet) {
        obj.insert(QString("DataShareArn"), ::OpenAPI::toJsonValue(m_data_share_arn));
    }
    if (m_producer_arn_isSet) {
        obj.insert(QString("ProducerArn"), ::OpenAPI::toJsonValue(m_producer_arn));
    }
    if (m_allow_publicly_accessible_consumers_isSet) {
        obj.insert(QString("AllowPubliclyAccessibleConsumers"), ::OpenAPI::toJsonValue(m_allow_publicly_accessible_consumers));
    }
    if (m_data_share_associations.isSet()) {
        obj.insert(QString("DataShareAssociations"), ::OpenAPI::toJsonValue(m_data_share_associations));
    }
    if (m_managed_by_isSet) {
        obj.insert(QString("ManagedBy"), ::OpenAPI::toJsonValue(m_managed_by));
    }
    return obj;
}

QString OAIDataShare::getDataShareArn() const {
    return m_data_share_arn;
}
void OAIDataShare::setDataShareArn(const QString &data_share_arn) {
    m_data_share_arn = data_share_arn;
    m_data_share_arn_isSet = true;
}

bool OAIDataShare::is_data_share_arn_Set() const{
    return m_data_share_arn_isSet;
}

bool OAIDataShare::is_data_share_arn_Valid() const{
    return m_data_share_arn_isValid;
}

QString OAIDataShare::getProducerArn() const {
    return m_producer_arn;
}
void OAIDataShare::setProducerArn(const QString &producer_arn) {
    m_producer_arn = producer_arn;
    m_producer_arn_isSet = true;
}

bool OAIDataShare::is_producer_arn_Set() const{
    return m_producer_arn_isSet;
}

bool OAIDataShare::is_producer_arn_Valid() const{
    return m_producer_arn_isValid;
}

bool OAIDataShare::getAllowPubliclyAccessibleConsumers() const {
    return m_allow_publicly_accessible_consumers;
}
void OAIDataShare::setAllowPubliclyAccessibleConsumers(const bool &allow_publicly_accessible_consumers) {
    m_allow_publicly_accessible_consumers = allow_publicly_accessible_consumers;
    m_allow_publicly_accessible_consumers_isSet = true;
}

bool OAIDataShare::is_allow_publicly_accessible_consumers_Set() const{
    return m_allow_publicly_accessible_consumers_isSet;
}

bool OAIDataShare::is_allow_publicly_accessible_consumers_Valid() const{
    return m_allow_publicly_accessible_consumers_isValid;
}

QList OAIDataShare::getDataShareAssociations() const {
    return m_data_share_associations;
}
void OAIDataShare::setDataShareAssociations(const QList &data_share_associations) {
    m_data_share_associations = data_share_associations;
    m_data_share_associations_isSet = true;
}

bool OAIDataShare::is_data_share_associations_Set() const{
    return m_data_share_associations_isSet;
}

bool OAIDataShare::is_data_share_associations_Valid() const{
    return m_data_share_associations_isValid;
}

QString OAIDataShare::getManagedBy() const {
    return m_managed_by;
}
void OAIDataShare::setManagedBy(const QString &managed_by) {
    m_managed_by = managed_by;
    m_managed_by_isSet = true;
}

bool OAIDataShare::is_managed_by_Set() const{
    return m_managed_by_isSet;
}

bool OAIDataShare::is_managed_by_Valid() const{
    return m_managed_by_isValid;
}

bool OAIDataShare::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_share_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_producer_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_publicly_accessible_consumers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_share_associations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_by_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataShare::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
