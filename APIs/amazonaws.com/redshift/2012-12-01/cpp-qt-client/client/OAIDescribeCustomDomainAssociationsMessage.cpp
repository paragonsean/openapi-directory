/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeCustomDomainAssociationsMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeCustomDomainAssociationsMessage::OAIDescribeCustomDomainAssociationsMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeCustomDomainAssociationsMessage::OAIDescribeCustomDomainAssociationsMessage() {
    this->initializeModel();
}

OAIDescribeCustomDomainAssociationsMessage::~OAIDescribeCustomDomainAssociationsMessage() {}

void OAIDescribeCustomDomainAssociationsMessage::initializeModel() {

    m_custom_domain_name_isSet = false;
    m_custom_domain_name_isValid = false;

    m_custom_domain_certificate_arn_isSet = false;
    m_custom_domain_certificate_arn_isValid = false;

    m_max_records_isSet = false;
    m_max_records_isValid = false;

    m_marker_isSet = false;
    m_marker_isValid = false;
}

void OAIDescribeCustomDomainAssociationsMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeCustomDomainAssociationsMessage::fromJsonObject(QJsonObject json) {

    m_custom_domain_name_isValid = ::OpenAPI::fromJsonValue(m_custom_domain_name, json[QString("CustomDomainName")]);
    m_custom_domain_name_isSet = !json[QString("CustomDomainName")].isNull() && m_custom_domain_name_isValid;

    m_custom_domain_certificate_arn_isValid = ::OpenAPI::fromJsonValue(m_custom_domain_certificate_arn, json[QString("CustomDomainCertificateArn")]);
    m_custom_domain_certificate_arn_isSet = !json[QString("CustomDomainCertificateArn")].isNull() && m_custom_domain_certificate_arn_isValid;

    m_max_records_isValid = ::OpenAPI::fromJsonValue(m_max_records, json[QString("MaxRecords")]);
    m_max_records_isSet = !json[QString("MaxRecords")].isNull() && m_max_records_isValid;

    m_marker_isValid = ::OpenAPI::fromJsonValue(m_marker, json[QString("Marker")]);
    m_marker_isSet = !json[QString("Marker")].isNull() && m_marker_isValid;
}

QString OAIDescribeCustomDomainAssociationsMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeCustomDomainAssociationsMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_domain_name_isSet) {
        obj.insert(QString("CustomDomainName"), ::OpenAPI::toJsonValue(m_custom_domain_name));
    }
    if (m_custom_domain_certificate_arn_isSet) {
        obj.insert(QString("CustomDomainCertificateArn"), ::OpenAPI::toJsonValue(m_custom_domain_certificate_arn));
    }
    if (m_max_records_isSet) {
        obj.insert(QString("MaxRecords"), ::OpenAPI::toJsonValue(m_max_records));
    }
    if (m_marker_isSet) {
        obj.insert(QString("Marker"), ::OpenAPI::toJsonValue(m_marker));
    }
    return obj;
}

QString OAIDescribeCustomDomainAssociationsMessage::getCustomDomainName() const {
    return m_custom_domain_name;
}
void OAIDescribeCustomDomainAssociationsMessage::setCustomDomainName(const QString &custom_domain_name) {
    m_custom_domain_name = custom_domain_name;
    m_custom_domain_name_isSet = true;
}

bool OAIDescribeCustomDomainAssociationsMessage::is_custom_domain_name_Set() const{
    return m_custom_domain_name_isSet;
}

bool OAIDescribeCustomDomainAssociationsMessage::is_custom_domain_name_Valid() const{
    return m_custom_domain_name_isValid;
}

QString OAIDescribeCustomDomainAssociationsMessage::getCustomDomainCertificateArn() const {
    return m_custom_domain_certificate_arn;
}
void OAIDescribeCustomDomainAssociationsMessage::setCustomDomainCertificateArn(const QString &custom_domain_certificate_arn) {
    m_custom_domain_certificate_arn = custom_domain_certificate_arn;
    m_custom_domain_certificate_arn_isSet = true;
}

bool OAIDescribeCustomDomainAssociationsMessage::is_custom_domain_certificate_arn_Set() const{
    return m_custom_domain_certificate_arn_isSet;
}

bool OAIDescribeCustomDomainAssociationsMessage::is_custom_domain_certificate_arn_Valid() const{
    return m_custom_domain_certificate_arn_isValid;
}

qint32 OAIDescribeCustomDomainAssociationsMessage::getMaxRecords() const {
    return m_max_records;
}
void OAIDescribeCustomDomainAssociationsMessage::setMaxRecords(const qint32 &max_records) {
    m_max_records = max_records;
    m_max_records_isSet = true;
}

bool OAIDescribeCustomDomainAssociationsMessage::is_max_records_Set() const{
    return m_max_records_isSet;
}

bool OAIDescribeCustomDomainAssociationsMessage::is_max_records_Valid() const{
    return m_max_records_isValid;
}

QString OAIDescribeCustomDomainAssociationsMessage::getMarker() const {
    return m_marker;
}
void OAIDescribeCustomDomainAssociationsMessage::setMarker(const QString &marker) {
    m_marker = marker;
    m_marker_isSet = true;
}

bool OAIDescribeCustomDomainAssociationsMessage::is_marker_Set() const{
    return m_marker_isSet;
}

bool OAIDescribeCustomDomainAssociationsMessage::is_marker_Valid() const{
    return m_marker_isValid;
}

bool OAIDescribeCustomDomainAssociationsMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_domain_certificate_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_records_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marker_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeCustomDomainAssociationsMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
