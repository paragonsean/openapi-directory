/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISnapshot.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISnapshot::OAISnapshot(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISnapshot::OAISnapshot() {
    this->initializeModel();
}

OAISnapshot::~OAISnapshot() {}

void OAISnapshot::initializeModel() {

    m_snapshot_identifier_isSet = false;
    m_snapshot_identifier_isValid = false;

    m_cluster_identifier_isSet = false;
    m_cluster_identifier_isValid = false;

    m_snapshot_create_time_isSet = false;
    m_snapshot_create_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_availability_zone_isSet = false;
    m_availability_zone_isValid = false;

    m_cluster_create_time_isSet = false;
    m_cluster_create_time_isValid = false;

    m_master_username_isSet = false;
    m_master_username_isValid = false;

    m_cluster_version_isSet = false;
    m_cluster_version_isValid = false;

    m_engine_full_version_isSet = false;
    m_engine_full_version_isValid = false;

    m_snapshot_type_isSet = false;
    m_snapshot_type_isValid = false;

    m_node_type_isSet = false;
    m_node_type_isValid = false;

    m_number_of_nodes_isSet = false;
    m_number_of_nodes_isValid = false;

    m_db_name_isSet = false;
    m_db_name_isValid = false;

    m_vpc_id_isSet = false;
    m_vpc_id_isValid = false;

    m_encrypted_isSet = false;
    m_encrypted_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_encrypted_with_hsm_isSet = false;
    m_encrypted_with_hsm_isValid = false;

    m_accounts_with_restore_access_isSet = false;
    m_accounts_with_restore_access_isValid = false;

    m_owner_account_isSet = false;
    m_owner_account_isValid = false;

    m_total_backup_size_in_mega_bytes_isSet = false;
    m_total_backup_size_in_mega_bytes_isValid = false;

    m_actual_incremental_backup_size_in_mega_bytes_isSet = false;
    m_actual_incremental_backup_size_in_mega_bytes_isValid = false;

    m_backup_progress_in_mega_bytes_isSet = false;
    m_backup_progress_in_mega_bytes_isValid = false;

    m_current_backup_rate_in_mega_bytes_per_second_isSet = false;
    m_current_backup_rate_in_mega_bytes_per_second_isValid = false;

    m_estimated_seconds_to_completion_isSet = false;
    m_estimated_seconds_to_completion_isValid = false;

    m_elapsed_time_in_seconds_isSet = false;
    m_elapsed_time_in_seconds_isValid = false;

    m_source_region_isSet = false;
    m_source_region_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_restorable_node_types_isSet = false;
    m_restorable_node_types_isValid = false;

    m_enhanced_vpc_routing_isSet = false;
    m_enhanced_vpc_routing_isValid = false;

    m_maintenance_track_name_isSet = false;
    m_maintenance_track_name_isValid = false;

    m_manual_snapshot_retention_period_isSet = false;
    m_manual_snapshot_retention_period_isValid = false;

    m_manual_snapshot_remaining_days_isSet = false;
    m_manual_snapshot_remaining_days_isValid = false;

    m_snapshot_retention_start_time_isSet = false;
    m_snapshot_retention_start_time_isValid = false;
}

void OAISnapshot::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISnapshot::fromJsonObject(QJsonObject json) {

    m_snapshot_identifier_isValid = ::OpenAPI::fromJsonValue(m_snapshot_identifier, json[QString("SnapshotIdentifier")]);
    m_snapshot_identifier_isSet = !json[QString("SnapshotIdentifier")].isNull() && m_snapshot_identifier_isValid;

    m_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_cluster_identifier, json[QString("ClusterIdentifier")]);
    m_cluster_identifier_isSet = !json[QString("ClusterIdentifier")].isNull() && m_cluster_identifier_isValid;

    m_snapshot_create_time_isValid = ::OpenAPI::fromJsonValue(m_snapshot_create_time, json[QString("SnapshotCreateTime")]);
    m_snapshot_create_time_isSet = !json[QString("SnapshotCreateTime")].isNull() && m_snapshot_create_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("Port")]);
    m_port_isSet = !json[QString("Port")].isNull() && m_port_isValid;

    m_availability_zone_isValid = ::OpenAPI::fromJsonValue(m_availability_zone, json[QString("AvailabilityZone")]);
    m_availability_zone_isSet = !json[QString("AvailabilityZone")].isNull() && m_availability_zone_isValid;

    m_cluster_create_time_isValid = ::OpenAPI::fromJsonValue(m_cluster_create_time, json[QString("ClusterCreateTime")]);
    m_cluster_create_time_isSet = !json[QString("ClusterCreateTime")].isNull() && m_cluster_create_time_isValid;

    m_master_username_isValid = ::OpenAPI::fromJsonValue(m_master_username, json[QString("MasterUsername")]);
    m_master_username_isSet = !json[QString("MasterUsername")].isNull() && m_master_username_isValid;

    m_cluster_version_isValid = ::OpenAPI::fromJsonValue(m_cluster_version, json[QString("ClusterVersion")]);
    m_cluster_version_isSet = !json[QString("ClusterVersion")].isNull() && m_cluster_version_isValid;

    m_engine_full_version_isValid = ::OpenAPI::fromJsonValue(m_engine_full_version, json[QString("EngineFullVersion")]);
    m_engine_full_version_isSet = !json[QString("EngineFullVersion")].isNull() && m_engine_full_version_isValid;

    m_snapshot_type_isValid = ::OpenAPI::fromJsonValue(m_snapshot_type, json[QString("SnapshotType")]);
    m_snapshot_type_isSet = !json[QString("SnapshotType")].isNull() && m_snapshot_type_isValid;

    m_node_type_isValid = ::OpenAPI::fromJsonValue(m_node_type, json[QString("NodeType")]);
    m_node_type_isSet = !json[QString("NodeType")].isNull() && m_node_type_isValid;

    m_number_of_nodes_isValid = ::OpenAPI::fromJsonValue(m_number_of_nodes, json[QString("NumberOfNodes")]);
    m_number_of_nodes_isSet = !json[QString("NumberOfNodes")].isNull() && m_number_of_nodes_isValid;

    m_db_name_isValid = ::OpenAPI::fromJsonValue(m_db_name, json[QString("DBName")]);
    m_db_name_isSet = !json[QString("DBName")].isNull() && m_db_name_isValid;

    m_vpc_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_id, json[QString("VpcId")]);
    m_vpc_id_isSet = !json[QString("VpcId")].isNull() && m_vpc_id_isValid;

    m_encrypted_isValid = ::OpenAPI::fromJsonValue(m_encrypted, json[QString("Encrypted")]);
    m_encrypted_isSet = !json[QString("Encrypted")].isNull() && m_encrypted_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_encrypted_with_hsm_isValid = ::OpenAPI::fromJsonValue(m_encrypted_with_hsm, json[QString("EncryptedWithHSM")]);
    m_encrypted_with_hsm_isSet = !json[QString("EncryptedWithHSM")].isNull() && m_encrypted_with_hsm_isValid;

    m_accounts_with_restore_access_isValid = ::OpenAPI::fromJsonValue(m_accounts_with_restore_access, json[QString("AccountsWithRestoreAccess")]);
    m_accounts_with_restore_access_isSet = !json[QString("AccountsWithRestoreAccess")].isNull() && m_accounts_with_restore_access_isValid;

    m_owner_account_isValid = ::OpenAPI::fromJsonValue(m_owner_account, json[QString("OwnerAccount")]);
    m_owner_account_isSet = !json[QString("OwnerAccount")].isNull() && m_owner_account_isValid;

    m_total_backup_size_in_mega_bytes_isValid = ::OpenAPI::fromJsonValue(m_total_backup_size_in_mega_bytes, json[QString("TotalBackupSizeInMegaBytes")]);
    m_total_backup_size_in_mega_bytes_isSet = !json[QString("TotalBackupSizeInMegaBytes")].isNull() && m_total_backup_size_in_mega_bytes_isValid;

    m_actual_incremental_backup_size_in_mega_bytes_isValid = ::OpenAPI::fromJsonValue(m_actual_incremental_backup_size_in_mega_bytes, json[QString("ActualIncrementalBackupSizeInMegaBytes")]);
    m_actual_incremental_backup_size_in_mega_bytes_isSet = !json[QString("ActualIncrementalBackupSizeInMegaBytes")].isNull() && m_actual_incremental_backup_size_in_mega_bytes_isValid;

    m_backup_progress_in_mega_bytes_isValid = ::OpenAPI::fromJsonValue(m_backup_progress_in_mega_bytes, json[QString("BackupProgressInMegaBytes")]);
    m_backup_progress_in_mega_bytes_isSet = !json[QString("BackupProgressInMegaBytes")].isNull() && m_backup_progress_in_mega_bytes_isValid;

    m_current_backup_rate_in_mega_bytes_per_second_isValid = ::OpenAPI::fromJsonValue(m_current_backup_rate_in_mega_bytes_per_second, json[QString("CurrentBackupRateInMegaBytesPerSecond")]);
    m_current_backup_rate_in_mega_bytes_per_second_isSet = !json[QString("CurrentBackupRateInMegaBytesPerSecond")].isNull() && m_current_backup_rate_in_mega_bytes_per_second_isValid;

    m_estimated_seconds_to_completion_isValid = ::OpenAPI::fromJsonValue(m_estimated_seconds_to_completion, json[QString("EstimatedSecondsToCompletion")]);
    m_estimated_seconds_to_completion_isSet = !json[QString("EstimatedSecondsToCompletion")].isNull() && m_estimated_seconds_to_completion_isValid;

    m_elapsed_time_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_elapsed_time_in_seconds, json[QString("ElapsedTimeInSeconds")]);
    m_elapsed_time_in_seconds_isSet = !json[QString("ElapsedTimeInSeconds")].isNull() && m_elapsed_time_in_seconds_isValid;

    m_source_region_isValid = ::OpenAPI::fromJsonValue(m_source_region, json[QString("SourceRegion")]);
    m_source_region_isSet = !json[QString("SourceRegion")].isNull() && m_source_region_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_restorable_node_types_isValid = ::OpenAPI::fromJsonValue(m_restorable_node_types, json[QString("RestorableNodeTypes")]);
    m_restorable_node_types_isSet = !json[QString("RestorableNodeTypes")].isNull() && m_restorable_node_types_isValid;

    m_enhanced_vpc_routing_isValid = ::OpenAPI::fromJsonValue(m_enhanced_vpc_routing, json[QString("EnhancedVpcRouting")]);
    m_enhanced_vpc_routing_isSet = !json[QString("EnhancedVpcRouting")].isNull() && m_enhanced_vpc_routing_isValid;

    m_maintenance_track_name_isValid = ::OpenAPI::fromJsonValue(m_maintenance_track_name, json[QString("MaintenanceTrackName")]);
    m_maintenance_track_name_isSet = !json[QString("MaintenanceTrackName")].isNull() && m_maintenance_track_name_isValid;

    m_manual_snapshot_retention_period_isValid = ::OpenAPI::fromJsonValue(m_manual_snapshot_retention_period, json[QString("ManualSnapshotRetentionPeriod")]);
    m_manual_snapshot_retention_period_isSet = !json[QString("ManualSnapshotRetentionPeriod")].isNull() && m_manual_snapshot_retention_period_isValid;

    m_manual_snapshot_remaining_days_isValid = ::OpenAPI::fromJsonValue(m_manual_snapshot_remaining_days, json[QString("ManualSnapshotRemainingDays")]);
    m_manual_snapshot_remaining_days_isSet = !json[QString("ManualSnapshotRemainingDays")].isNull() && m_manual_snapshot_remaining_days_isValid;

    m_snapshot_retention_start_time_isValid = ::OpenAPI::fromJsonValue(m_snapshot_retention_start_time, json[QString("SnapshotRetentionStartTime")]);
    m_snapshot_retention_start_time_isSet = !json[QString("SnapshotRetentionStartTime")].isNull() && m_snapshot_retention_start_time_isValid;
}

QString OAISnapshot::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISnapshot::asJsonObject() const {
    QJsonObject obj;
    if (m_snapshot_identifier_isSet) {
        obj.insert(QString("SnapshotIdentifier"), ::OpenAPI::toJsonValue(m_snapshot_identifier));
    }
    if (m_cluster_identifier_isSet) {
        obj.insert(QString("ClusterIdentifier"), ::OpenAPI::toJsonValue(m_cluster_identifier));
    }
    if (m_snapshot_create_time_isSet) {
        obj.insert(QString("SnapshotCreateTime"), ::OpenAPI::toJsonValue(m_snapshot_create_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_port_isSet) {
        obj.insert(QString("Port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_availability_zone_isSet) {
        obj.insert(QString("AvailabilityZone"), ::OpenAPI::toJsonValue(m_availability_zone));
    }
    if (m_cluster_create_time_isSet) {
        obj.insert(QString("ClusterCreateTime"), ::OpenAPI::toJsonValue(m_cluster_create_time));
    }
    if (m_master_username_isSet) {
        obj.insert(QString("MasterUsername"), ::OpenAPI::toJsonValue(m_master_username));
    }
    if (m_cluster_version_isSet) {
        obj.insert(QString("ClusterVersion"), ::OpenAPI::toJsonValue(m_cluster_version));
    }
    if (m_engine_full_version_isSet) {
        obj.insert(QString("EngineFullVersion"), ::OpenAPI::toJsonValue(m_engine_full_version));
    }
    if (m_snapshot_type_isSet) {
        obj.insert(QString("SnapshotType"), ::OpenAPI::toJsonValue(m_snapshot_type));
    }
    if (m_node_type_isSet) {
        obj.insert(QString("NodeType"), ::OpenAPI::toJsonValue(m_node_type));
    }
    if (m_number_of_nodes_isSet) {
        obj.insert(QString("NumberOfNodes"), ::OpenAPI::toJsonValue(m_number_of_nodes));
    }
    if (m_db_name_isSet) {
        obj.insert(QString("DBName"), ::OpenAPI::toJsonValue(m_db_name));
    }
    if (m_vpc_id_isSet) {
        obj.insert(QString("VpcId"), ::OpenAPI::toJsonValue(m_vpc_id));
    }
    if (m_encrypted_isSet) {
        obj.insert(QString("Encrypted"), ::OpenAPI::toJsonValue(m_encrypted));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_encrypted_with_hsm_isSet) {
        obj.insert(QString("EncryptedWithHSM"), ::OpenAPI::toJsonValue(m_encrypted_with_hsm));
    }
    if (m_accounts_with_restore_access.isSet()) {
        obj.insert(QString("AccountsWithRestoreAccess"), ::OpenAPI::toJsonValue(m_accounts_with_restore_access));
    }
    if (m_owner_account_isSet) {
        obj.insert(QString("OwnerAccount"), ::OpenAPI::toJsonValue(m_owner_account));
    }
    if (m_total_backup_size_in_mega_bytes_isSet) {
        obj.insert(QString("TotalBackupSizeInMegaBytes"), ::OpenAPI::toJsonValue(m_total_backup_size_in_mega_bytes));
    }
    if (m_actual_incremental_backup_size_in_mega_bytes_isSet) {
        obj.insert(QString("ActualIncrementalBackupSizeInMegaBytes"), ::OpenAPI::toJsonValue(m_actual_incremental_backup_size_in_mega_bytes));
    }
    if (m_backup_progress_in_mega_bytes_isSet) {
        obj.insert(QString("BackupProgressInMegaBytes"), ::OpenAPI::toJsonValue(m_backup_progress_in_mega_bytes));
    }
    if (m_current_backup_rate_in_mega_bytes_per_second_isSet) {
        obj.insert(QString("CurrentBackupRateInMegaBytesPerSecond"), ::OpenAPI::toJsonValue(m_current_backup_rate_in_mega_bytes_per_second));
    }
    if (m_estimated_seconds_to_completion_isSet) {
        obj.insert(QString("EstimatedSecondsToCompletion"), ::OpenAPI::toJsonValue(m_estimated_seconds_to_completion));
    }
    if (m_elapsed_time_in_seconds_isSet) {
        obj.insert(QString("ElapsedTimeInSeconds"), ::OpenAPI::toJsonValue(m_elapsed_time_in_seconds));
    }
    if (m_source_region_isSet) {
        obj.insert(QString("SourceRegion"), ::OpenAPI::toJsonValue(m_source_region));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_restorable_node_types.isSet()) {
        obj.insert(QString("RestorableNodeTypes"), ::OpenAPI::toJsonValue(m_restorable_node_types));
    }
    if (m_enhanced_vpc_routing_isSet) {
        obj.insert(QString("EnhancedVpcRouting"), ::OpenAPI::toJsonValue(m_enhanced_vpc_routing));
    }
    if (m_maintenance_track_name_isSet) {
        obj.insert(QString("MaintenanceTrackName"), ::OpenAPI::toJsonValue(m_maintenance_track_name));
    }
    if (m_manual_snapshot_retention_period_isSet) {
        obj.insert(QString("ManualSnapshotRetentionPeriod"), ::OpenAPI::toJsonValue(m_manual_snapshot_retention_period));
    }
    if (m_manual_snapshot_remaining_days_isSet) {
        obj.insert(QString("ManualSnapshotRemainingDays"), ::OpenAPI::toJsonValue(m_manual_snapshot_remaining_days));
    }
    if (m_snapshot_retention_start_time_isSet) {
        obj.insert(QString("SnapshotRetentionStartTime"), ::OpenAPI::toJsonValue(m_snapshot_retention_start_time));
    }
    return obj;
}

QString OAISnapshot::getSnapshotIdentifier() const {
    return m_snapshot_identifier;
}
void OAISnapshot::setSnapshotIdentifier(const QString &snapshot_identifier) {
    m_snapshot_identifier = snapshot_identifier;
    m_snapshot_identifier_isSet = true;
}

bool OAISnapshot::is_snapshot_identifier_Set() const{
    return m_snapshot_identifier_isSet;
}

bool OAISnapshot::is_snapshot_identifier_Valid() const{
    return m_snapshot_identifier_isValid;
}

QString OAISnapshot::getClusterIdentifier() const {
    return m_cluster_identifier;
}
void OAISnapshot::setClusterIdentifier(const QString &cluster_identifier) {
    m_cluster_identifier = cluster_identifier;
    m_cluster_identifier_isSet = true;
}

bool OAISnapshot::is_cluster_identifier_Set() const{
    return m_cluster_identifier_isSet;
}

bool OAISnapshot::is_cluster_identifier_Valid() const{
    return m_cluster_identifier_isValid;
}

QDateTime OAISnapshot::getSnapshotCreateTime() const {
    return m_snapshot_create_time;
}
void OAISnapshot::setSnapshotCreateTime(const QDateTime &snapshot_create_time) {
    m_snapshot_create_time = snapshot_create_time;
    m_snapshot_create_time_isSet = true;
}

bool OAISnapshot::is_snapshot_create_time_Set() const{
    return m_snapshot_create_time_isSet;
}

bool OAISnapshot::is_snapshot_create_time_Valid() const{
    return m_snapshot_create_time_isValid;
}

QString OAISnapshot::getStatus() const {
    return m_status;
}
void OAISnapshot::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISnapshot::is_status_Set() const{
    return m_status_isSet;
}

bool OAISnapshot::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAISnapshot::getPort() const {
    return m_port;
}
void OAISnapshot::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAISnapshot::is_port_Set() const{
    return m_port_isSet;
}

bool OAISnapshot::is_port_Valid() const{
    return m_port_isValid;
}

QString OAISnapshot::getAvailabilityZone() const {
    return m_availability_zone;
}
void OAISnapshot::setAvailabilityZone(const QString &availability_zone) {
    m_availability_zone = availability_zone;
    m_availability_zone_isSet = true;
}

bool OAISnapshot::is_availability_zone_Set() const{
    return m_availability_zone_isSet;
}

bool OAISnapshot::is_availability_zone_Valid() const{
    return m_availability_zone_isValid;
}

QDateTime OAISnapshot::getClusterCreateTime() const {
    return m_cluster_create_time;
}
void OAISnapshot::setClusterCreateTime(const QDateTime &cluster_create_time) {
    m_cluster_create_time = cluster_create_time;
    m_cluster_create_time_isSet = true;
}

bool OAISnapshot::is_cluster_create_time_Set() const{
    return m_cluster_create_time_isSet;
}

bool OAISnapshot::is_cluster_create_time_Valid() const{
    return m_cluster_create_time_isValid;
}

QString OAISnapshot::getMasterUsername() const {
    return m_master_username;
}
void OAISnapshot::setMasterUsername(const QString &master_username) {
    m_master_username = master_username;
    m_master_username_isSet = true;
}

bool OAISnapshot::is_master_username_Set() const{
    return m_master_username_isSet;
}

bool OAISnapshot::is_master_username_Valid() const{
    return m_master_username_isValid;
}

QString OAISnapshot::getClusterVersion() const {
    return m_cluster_version;
}
void OAISnapshot::setClusterVersion(const QString &cluster_version) {
    m_cluster_version = cluster_version;
    m_cluster_version_isSet = true;
}

bool OAISnapshot::is_cluster_version_Set() const{
    return m_cluster_version_isSet;
}

bool OAISnapshot::is_cluster_version_Valid() const{
    return m_cluster_version_isValid;
}

QString OAISnapshot::getEngineFullVersion() const {
    return m_engine_full_version;
}
void OAISnapshot::setEngineFullVersion(const QString &engine_full_version) {
    m_engine_full_version = engine_full_version;
    m_engine_full_version_isSet = true;
}

bool OAISnapshot::is_engine_full_version_Set() const{
    return m_engine_full_version_isSet;
}

bool OAISnapshot::is_engine_full_version_Valid() const{
    return m_engine_full_version_isValid;
}

QString OAISnapshot::getSnapshotType() const {
    return m_snapshot_type;
}
void OAISnapshot::setSnapshotType(const QString &snapshot_type) {
    m_snapshot_type = snapshot_type;
    m_snapshot_type_isSet = true;
}

bool OAISnapshot::is_snapshot_type_Set() const{
    return m_snapshot_type_isSet;
}

bool OAISnapshot::is_snapshot_type_Valid() const{
    return m_snapshot_type_isValid;
}

QString OAISnapshot::getNodeType() const {
    return m_node_type;
}
void OAISnapshot::setNodeType(const QString &node_type) {
    m_node_type = node_type;
    m_node_type_isSet = true;
}

bool OAISnapshot::is_node_type_Set() const{
    return m_node_type_isSet;
}

bool OAISnapshot::is_node_type_Valid() const{
    return m_node_type_isValid;
}

qint32 OAISnapshot::getNumberOfNodes() const {
    return m_number_of_nodes;
}
void OAISnapshot::setNumberOfNodes(const qint32 &number_of_nodes) {
    m_number_of_nodes = number_of_nodes;
    m_number_of_nodes_isSet = true;
}

bool OAISnapshot::is_number_of_nodes_Set() const{
    return m_number_of_nodes_isSet;
}

bool OAISnapshot::is_number_of_nodes_Valid() const{
    return m_number_of_nodes_isValid;
}

QString OAISnapshot::getDbName() const {
    return m_db_name;
}
void OAISnapshot::setDbName(const QString &db_name) {
    m_db_name = db_name;
    m_db_name_isSet = true;
}

bool OAISnapshot::is_db_name_Set() const{
    return m_db_name_isSet;
}

bool OAISnapshot::is_db_name_Valid() const{
    return m_db_name_isValid;
}

QString OAISnapshot::getVpcId() const {
    return m_vpc_id;
}
void OAISnapshot::setVpcId(const QString &vpc_id) {
    m_vpc_id = vpc_id;
    m_vpc_id_isSet = true;
}

bool OAISnapshot::is_vpc_id_Set() const{
    return m_vpc_id_isSet;
}

bool OAISnapshot::is_vpc_id_Valid() const{
    return m_vpc_id_isValid;
}

bool OAISnapshot::getEncrypted() const {
    return m_encrypted;
}
void OAISnapshot::setEncrypted(const bool &encrypted) {
    m_encrypted = encrypted;
    m_encrypted_isSet = true;
}

bool OAISnapshot::is_encrypted_Set() const{
    return m_encrypted_isSet;
}

bool OAISnapshot::is_encrypted_Valid() const{
    return m_encrypted_isValid;
}

QString OAISnapshot::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAISnapshot::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAISnapshot::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAISnapshot::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

bool OAISnapshot::getEncryptedWithHsm() const {
    return m_encrypted_with_hsm;
}
void OAISnapshot::setEncryptedWithHsm(const bool &encrypted_with_hsm) {
    m_encrypted_with_hsm = encrypted_with_hsm;
    m_encrypted_with_hsm_isSet = true;
}

bool OAISnapshot::is_encrypted_with_hsm_Set() const{
    return m_encrypted_with_hsm_isSet;
}

bool OAISnapshot::is_encrypted_with_hsm_Valid() const{
    return m_encrypted_with_hsm_isValid;
}

QList OAISnapshot::getAccountsWithRestoreAccess() const {
    return m_accounts_with_restore_access;
}
void OAISnapshot::setAccountsWithRestoreAccess(const QList &accounts_with_restore_access) {
    m_accounts_with_restore_access = accounts_with_restore_access;
    m_accounts_with_restore_access_isSet = true;
}

bool OAISnapshot::is_accounts_with_restore_access_Set() const{
    return m_accounts_with_restore_access_isSet;
}

bool OAISnapshot::is_accounts_with_restore_access_Valid() const{
    return m_accounts_with_restore_access_isValid;
}

QString OAISnapshot::getOwnerAccount() const {
    return m_owner_account;
}
void OAISnapshot::setOwnerAccount(const QString &owner_account) {
    m_owner_account = owner_account;
    m_owner_account_isSet = true;
}

bool OAISnapshot::is_owner_account_Set() const{
    return m_owner_account_isSet;
}

bool OAISnapshot::is_owner_account_Valid() const{
    return m_owner_account_isValid;
}

double OAISnapshot::getTotalBackupSizeInMegaBytes() const {
    return m_total_backup_size_in_mega_bytes;
}
void OAISnapshot::setTotalBackupSizeInMegaBytes(const double &total_backup_size_in_mega_bytes) {
    m_total_backup_size_in_mega_bytes = total_backup_size_in_mega_bytes;
    m_total_backup_size_in_mega_bytes_isSet = true;
}

bool OAISnapshot::is_total_backup_size_in_mega_bytes_Set() const{
    return m_total_backup_size_in_mega_bytes_isSet;
}

bool OAISnapshot::is_total_backup_size_in_mega_bytes_Valid() const{
    return m_total_backup_size_in_mega_bytes_isValid;
}

double OAISnapshot::getActualIncrementalBackupSizeInMegaBytes() const {
    return m_actual_incremental_backup_size_in_mega_bytes;
}
void OAISnapshot::setActualIncrementalBackupSizeInMegaBytes(const double &actual_incremental_backup_size_in_mega_bytes) {
    m_actual_incremental_backup_size_in_mega_bytes = actual_incremental_backup_size_in_mega_bytes;
    m_actual_incremental_backup_size_in_mega_bytes_isSet = true;
}

bool OAISnapshot::is_actual_incremental_backup_size_in_mega_bytes_Set() const{
    return m_actual_incremental_backup_size_in_mega_bytes_isSet;
}

bool OAISnapshot::is_actual_incremental_backup_size_in_mega_bytes_Valid() const{
    return m_actual_incremental_backup_size_in_mega_bytes_isValid;
}

double OAISnapshot::getBackupProgressInMegaBytes() const {
    return m_backup_progress_in_mega_bytes;
}
void OAISnapshot::setBackupProgressInMegaBytes(const double &backup_progress_in_mega_bytes) {
    m_backup_progress_in_mega_bytes = backup_progress_in_mega_bytes;
    m_backup_progress_in_mega_bytes_isSet = true;
}

bool OAISnapshot::is_backup_progress_in_mega_bytes_Set() const{
    return m_backup_progress_in_mega_bytes_isSet;
}

bool OAISnapshot::is_backup_progress_in_mega_bytes_Valid() const{
    return m_backup_progress_in_mega_bytes_isValid;
}

double OAISnapshot::getCurrentBackupRateInMegaBytesPerSecond() const {
    return m_current_backup_rate_in_mega_bytes_per_second;
}
void OAISnapshot::setCurrentBackupRateInMegaBytesPerSecond(const double &current_backup_rate_in_mega_bytes_per_second) {
    m_current_backup_rate_in_mega_bytes_per_second = current_backup_rate_in_mega_bytes_per_second;
    m_current_backup_rate_in_mega_bytes_per_second_isSet = true;
}

bool OAISnapshot::is_current_backup_rate_in_mega_bytes_per_second_Set() const{
    return m_current_backup_rate_in_mega_bytes_per_second_isSet;
}

bool OAISnapshot::is_current_backup_rate_in_mega_bytes_per_second_Valid() const{
    return m_current_backup_rate_in_mega_bytes_per_second_isValid;
}

qint32 OAISnapshot::getEstimatedSecondsToCompletion() const {
    return m_estimated_seconds_to_completion;
}
void OAISnapshot::setEstimatedSecondsToCompletion(const qint32 &estimated_seconds_to_completion) {
    m_estimated_seconds_to_completion = estimated_seconds_to_completion;
    m_estimated_seconds_to_completion_isSet = true;
}

bool OAISnapshot::is_estimated_seconds_to_completion_Set() const{
    return m_estimated_seconds_to_completion_isSet;
}

bool OAISnapshot::is_estimated_seconds_to_completion_Valid() const{
    return m_estimated_seconds_to_completion_isValid;
}

qint32 OAISnapshot::getElapsedTimeInSeconds() const {
    return m_elapsed_time_in_seconds;
}
void OAISnapshot::setElapsedTimeInSeconds(const qint32 &elapsed_time_in_seconds) {
    m_elapsed_time_in_seconds = elapsed_time_in_seconds;
    m_elapsed_time_in_seconds_isSet = true;
}

bool OAISnapshot::is_elapsed_time_in_seconds_Set() const{
    return m_elapsed_time_in_seconds_isSet;
}

bool OAISnapshot::is_elapsed_time_in_seconds_Valid() const{
    return m_elapsed_time_in_seconds_isValid;
}

QString OAISnapshot::getSourceRegion() const {
    return m_source_region;
}
void OAISnapshot::setSourceRegion(const QString &source_region) {
    m_source_region = source_region;
    m_source_region_isSet = true;
}

bool OAISnapshot::is_source_region_Set() const{
    return m_source_region_isSet;
}

bool OAISnapshot::is_source_region_Valid() const{
    return m_source_region_isValid;
}

QList OAISnapshot::getTags() const {
    return m_tags;
}
void OAISnapshot::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAISnapshot::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAISnapshot::is_tags_Valid() const{
    return m_tags_isValid;
}

QList OAISnapshot::getRestorableNodeTypes() const {
    return m_restorable_node_types;
}
void OAISnapshot::setRestorableNodeTypes(const QList &restorable_node_types) {
    m_restorable_node_types = restorable_node_types;
    m_restorable_node_types_isSet = true;
}

bool OAISnapshot::is_restorable_node_types_Set() const{
    return m_restorable_node_types_isSet;
}

bool OAISnapshot::is_restorable_node_types_Valid() const{
    return m_restorable_node_types_isValid;
}

bool OAISnapshot::getEnhancedVpcRouting() const {
    return m_enhanced_vpc_routing;
}
void OAISnapshot::setEnhancedVpcRouting(const bool &enhanced_vpc_routing) {
    m_enhanced_vpc_routing = enhanced_vpc_routing;
    m_enhanced_vpc_routing_isSet = true;
}

bool OAISnapshot::is_enhanced_vpc_routing_Set() const{
    return m_enhanced_vpc_routing_isSet;
}

bool OAISnapshot::is_enhanced_vpc_routing_Valid() const{
    return m_enhanced_vpc_routing_isValid;
}

QString OAISnapshot::getMaintenanceTrackName() const {
    return m_maintenance_track_name;
}
void OAISnapshot::setMaintenanceTrackName(const QString &maintenance_track_name) {
    m_maintenance_track_name = maintenance_track_name;
    m_maintenance_track_name_isSet = true;
}

bool OAISnapshot::is_maintenance_track_name_Set() const{
    return m_maintenance_track_name_isSet;
}

bool OAISnapshot::is_maintenance_track_name_Valid() const{
    return m_maintenance_track_name_isValid;
}

qint32 OAISnapshot::getManualSnapshotRetentionPeriod() const {
    return m_manual_snapshot_retention_period;
}
void OAISnapshot::setManualSnapshotRetentionPeriod(const qint32 &manual_snapshot_retention_period) {
    m_manual_snapshot_retention_period = manual_snapshot_retention_period;
    m_manual_snapshot_retention_period_isSet = true;
}

bool OAISnapshot::is_manual_snapshot_retention_period_Set() const{
    return m_manual_snapshot_retention_period_isSet;
}

bool OAISnapshot::is_manual_snapshot_retention_period_Valid() const{
    return m_manual_snapshot_retention_period_isValid;
}

qint32 OAISnapshot::getManualSnapshotRemainingDays() const {
    return m_manual_snapshot_remaining_days;
}
void OAISnapshot::setManualSnapshotRemainingDays(const qint32 &manual_snapshot_remaining_days) {
    m_manual_snapshot_remaining_days = manual_snapshot_remaining_days;
    m_manual_snapshot_remaining_days_isSet = true;
}

bool OAISnapshot::is_manual_snapshot_remaining_days_Set() const{
    return m_manual_snapshot_remaining_days_isSet;
}

bool OAISnapshot::is_manual_snapshot_remaining_days_Valid() const{
    return m_manual_snapshot_remaining_days_isValid;
}

QDateTime OAISnapshot::getSnapshotRetentionStartTime() const {
    return m_snapshot_retention_start_time;
}
void OAISnapshot::setSnapshotRetentionStartTime(const QDateTime &snapshot_retention_start_time) {
    m_snapshot_retention_start_time = snapshot_retention_start_time;
    m_snapshot_retention_start_time_isSet = true;
}

bool OAISnapshot::is_snapshot_retention_start_time_Set() const{
    return m_snapshot_retention_start_time_isSet;
}

bool OAISnapshot::is_snapshot_retention_start_time_Valid() const{
    return m_snapshot_retention_start_time_isValid;
}

bool OAISnapshot::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_snapshot_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_full_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_with_hsm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accounts_with_restore_access.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_backup_size_in_mega_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actual_incremental_backup_size_in_mega_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_progress_in_mega_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_backup_rate_in_mega_bytes_per_second_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_seconds_to_completion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elapsed_time_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_restorable_node_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enhanced_vpc_routing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance_track_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_snapshot_retention_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_snapshot_remaining_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_retention_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISnapshot::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
