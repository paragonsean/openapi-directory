/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICluster_RestoreStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICluster_RestoreStatus::OAICluster_RestoreStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICluster_RestoreStatus::OAICluster_RestoreStatus() {
    this->initializeModel();
}

OAICluster_RestoreStatus::~OAICluster_RestoreStatus() {}

void OAICluster_RestoreStatus::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_current_restore_rate_in_mega_bytes_per_second_isSet = false;
    m_current_restore_rate_in_mega_bytes_per_second_isValid = false;

    m_snapshot_size_in_mega_bytes_isSet = false;
    m_snapshot_size_in_mega_bytes_isValid = false;

    m_progress_in_mega_bytes_isSet = false;
    m_progress_in_mega_bytes_isValid = false;

    m_elapsed_time_in_seconds_isSet = false;
    m_elapsed_time_in_seconds_isValid = false;

    m_estimated_time_to_completion_in_seconds_isSet = false;
    m_estimated_time_to_completion_in_seconds_isValid = false;
}

void OAICluster_RestoreStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICluster_RestoreStatus::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_current_restore_rate_in_mega_bytes_per_second_isValid = ::OpenAPI::fromJsonValue(m_current_restore_rate_in_mega_bytes_per_second, json[QString("CurrentRestoreRateInMegaBytesPerSecond")]);
    m_current_restore_rate_in_mega_bytes_per_second_isSet = !json[QString("CurrentRestoreRateInMegaBytesPerSecond")].isNull() && m_current_restore_rate_in_mega_bytes_per_second_isValid;

    m_snapshot_size_in_mega_bytes_isValid = ::OpenAPI::fromJsonValue(m_snapshot_size_in_mega_bytes, json[QString("SnapshotSizeInMegaBytes")]);
    m_snapshot_size_in_mega_bytes_isSet = !json[QString("SnapshotSizeInMegaBytes")].isNull() && m_snapshot_size_in_mega_bytes_isValid;

    m_progress_in_mega_bytes_isValid = ::OpenAPI::fromJsonValue(m_progress_in_mega_bytes, json[QString("ProgressInMegaBytes")]);
    m_progress_in_mega_bytes_isSet = !json[QString("ProgressInMegaBytes")].isNull() && m_progress_in_mega_bytes_isValid;

    m_elapsed_time_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_elapsed_time_in_seconds, json[QString("ElapsedTimeInSeconds")]);
    m_elapsed_time_in_seconds_isSet = !json[QString("ElapsedTimeInSeconds")].isNull() && m_elapsed_time_in_seconds_isValid;

    m_estimated_time_to_completion_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_estimated_time_to_completion_in_seconds, json[QString("EstimatedTimeToCompletionInSeconds")]);
    m_estimated_time_to_completion_in_seconds_isSet = !json[QString("EstimatedTimeToCompletionInSeconds")].isNull() && m_estimated_time_to_completion_in_seconds_isValid;
}

QString OAICluster_RestoreStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICluster_RestoreStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_current_restore_rate_in_mega_bytes_per_second_isSet) {
        obj.insert(QString("CurrentRestoreRateInMegaBytesPerSecond"), ::OpenAPI::toJsonValue(m_current_restore_rate_in_mega_bytes_per_second));
    }
    if (m_snapshot_size_in_mega_bytes_isSet) {
        obj.insert(QString("SnapshotSizeInMegaBytes"), ::OpenAPI::toJsonValue(m_snapshot_size_in_mega_bytes));
    }
    if (m_progress_in_mega_bytes_isSet) {
        obj.insert(QString("ProgressInMegaBytes"), ::OpenAPI::toJsonValue(m_progress_in_mega_bytes));
    }
    if (m_elapsed_time_in_seconds_isSet) {
        obj.insert(QString("ElapsedTimeInSeconds"), ::OpenAPI::toJsonValue(m_elapsed_time_in_seconds));
    }
    if (m_estimated_time_to_completion_in_seconds_isSet) {
        obj.insert(QString("EstimatedTimeToCompletionInSeconds"), ::OpenAPI::toJsonValue(m_estimated_time_to_completion_in_seconds));
    }
    return obj;
}

QString OAICluster_RestoreStatus::getStatus() const {
    return m_status;
}
void OAICluster_RestoreStatus::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICluster_RestoreStatus::is_status_Set() const{
    return m_status_isSet;
}

bool OAICluster_RestoreStatus::is_status_Valid() const{
    return m_status_isValid;
}

double OAICluster_RestoreStatus::getCurrentRestoreRateInMegaBytesPerSecond() const {
    return m_current_restore_rate_in_mega_bytes_per_second;
}
void OAICluster_RestoreStatus::setCurrentRestoreRateInMegaBytesPerSecond(const double &current_restore_rate_in_mega_bytes_per_second) {
    m_current_restore_rate_in_mega_bytes_per_second = current_restore_rate_in_mega_bytes_per_second;
    m_current_restore_rate_in_mega_bytes_per_second_isSet = true;
}

bool OAICluster_RestoreStatus::is_current_restore_rate_in_mega_bytes_per_second_Set() const{
    return m_current_restore_rate_in_mega_bytes_per_second_isSet;
}

bool OAICluster_RestoreStatus::is_current_restore_rate_in_mega_bytes_per_second_Valid() const{
    return m_current_restore_rate_in_mega_bytes_per_second_isValid;
}

qint32 OAICluster_RestoreStatus::getSnapshotSizeInMegaBytes() const {
    return m_snapshot_size_in_mega_bytes;
}
void OAICluster_RestoreStatus::setSnapshotSizeInMegaBytes(const qint32 &snapshot_size_in_mega_bytes) {
    m_snapshot_size_in_mega_bytes = snapshot_size_in_mega_bytes;
    m_snapshot_size_in_mega_bytes_isSet = true;
}

bool OAICluster_RestoreStatus::is_snapshot_size_in_mega_bytes_Set() const{
    return m_snapshot_size_in_mega_bytes_isSet;
}

bool OAICluster_RestoreStatus::is_snapshot_size_in_mega_bytes_Valid() const{
    return m_snapshot_size_in_mega_bytes_isValid;
}

qint32 OAICluster_RestoreStatus::getProgressInMegaBytes() const {
    return m_progress_in_mega_bytes;
}
void OAICluster_RestoreStatus::setProgressInMegaBytes(const qint32 &progress_in_mega_bytes) {
    m_progress_in_mega_bytes = progress_in_mega_bytes;
    m_progress_in_mega_bytes_isSet = true;
}

bool OAICluster_RestoreStatus::is_progress_in_mega_bytes_Set() const{
    return m_progress_in_mega_bytes_isSet;
}

bool OAICluster_RestoreStatus::is_progress_in_mega_bytes_Valid() const{
    return m_progress_in_mega_bytes_isValid;
}

qint32 OAICluster_RestoreStatus::getElapsedTimeInSeconds() const {
    return m_elapsed_time_in_seconds;
}
void OAICluster_RestoreStatus::setElapsedTimeInSeconds(const qint32 &elapsed_time_in_seconds) {
    m_elapsed_time_in_seconds = elapsed_time_in_seconds;
    m_elapsed_time_in_seconds_isSet = true;
}

bool OAICluster_RestoreStatus::is_elapsed_time_in_seconds_Set() const{
    return m_elapsed_time_in_seconds_isSet;
}

bool OAICluster_RestoreStatus::is_elapsed_time_in_seconds_Valid() const{
    return m_elapsed_time_in_seconds_isValid;
}

qint32 OAICluster_RestoreStatus::getEstimatedTimeToCompletionInSeconds() const {
    return m_estimated_time_to_completion_in_seconds;
}
void OAICluster_RestoreStatus::setEstimatedTimeToCompletionInSeconds(const qint32 &estimated_time_to_completion_in_seconds) {
    m_estimated_time_to_completion_in_seconds = estimated_time_to_completion_in_seconds;
    m_estimated_time_to_completion_in_seconds_isSet = true;
}

bool OAICluster_RestoreStatus::is_estimated_time_to_completion_in_seconds_Set() const{
    return m_estimated_time_to_completion_in_seconds_isSet;
}

bool OAICluster_RestoreStatus::is_estimated_time_to_completion_in_seconds_Valid() const{
    return m_estimated_time_to_completion_in_seconds_isValid;
}

bool OAICluster_RestoreStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_restore_rate_in_mega_bytes_per_second_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_size_in_mega_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_in_mega_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elapsed_time_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_time_to_completion_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICluster_RestoreStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
