/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReservedNode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReservedNode::OAIReservedNode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReservedNode::OAIReservedNode() {
    this->initializeModel();
}

OAIReservedNode::~OAIReservedNode() {}

void OAIReservedNode::initializeModel() {

    m_reserved_node_id_isSet = false;
    m_reserved_node_id_isValid = false;

    m_reserved_node_offering_id_isSet = false;
    m_reserved_node_offering_id_isValid = false;

    m_node_type_isSet = false;
    m_node_type_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_fixed_price_isSet = false;
    m_fixed_price_isValid = false;

    m_usage_price_isSet = false;
    m_usage_price_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_node_count_isSet = false;
    m_node_count_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_offering_type_isSet = false;
    m_offering_type_isValid = false;

    m_recurring_charges_isSet = false;
    m_recurring_charges_isValid = false;

    m_reserved_node_offering_type_isSet = false;
    m_reserved_node_offering_type_isValid = false;
}

void OAIReservedNode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReservedNode::fromJsonObject(QJsonObject json) {

    m_reserved_node_id_isValid = ::OpenAPI::fromJsonValue(m_reserved_node_id, json[QString("ReservedNodeId")]);
    m_reserved_node_id_isSet = !json[QString("ReservedNodeId")].isNull() && m_reserved_node_id_isValid;

    m_reserved_node_offering_id_isValid = ::OpenAPI::fromJsonValue(m_reserved_node_offering_id, json[QString("ReservedNodeOfferingId")]);
    m_reserved_node_offering_id_isSet = !json[QString("ReservedNodeOfferingId")].isNull() && m_reserved_node_offering_id_isValid;

    m_node_type_isValid = ::OpenAPI::fromJsonValue(m_node_type, json[QString("NodeType")]);
    m_node_type_isSet = !json[QString("NodeType")].isNull() && m_node_type_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("Duration")]);
    m_duration_isSet = !json[QString("Duration")].isNull() && m_duration_isValid;

    m_fixed_price_isValid = ::OpenAPI::fromJsonValue(m_fixed_price, json[QString("FixedPrice")]);
    m_fixed_price_isSet = !json[QString("FixedPrice")].isNull() && m_fixed_price_isValid;

    m_usage_price_isValid = ::OpenAPI::fromJsonValue(m_usage_price, json[QString("UsagePrice")]);
    m_usage_price_isSet = !json[QString("UsagePrice")].isNull() && m_usage_price_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("CurrencyCode")]);
    m_currency_code_isSet = !json[QString("CurrencyCode")].isNull() && m_currency_code_isValid;

    m_node_count_isValid = ::OpenAPI::fromJsonValue(m_node_count, json[QString("NodeCount")]);
    m_node_count_isSet = !json[QString("NodeCount")].isNull() && m_node_count_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_offering_type_isValid = ::OpenAPI::fromJsonValue(m_offering_type, json[QString("OfferingType")]);
    m_offering_type_isSet = !json[QString("OfferingType")].isNull() && m_offering_type_isValid;

    m_recurring_charges_isValid = ::OpenAPI::fromJsonValue(m_recurring_charges, json[QString("RecurringCharges")]);
    m_recurring_charges_isSet = !json[QString("RecurringCharges")].isNull() && m_recurring_charges_isValid;

    m_reserved_node_offering_type_isValid = ::OpenAPI::fromJsonValue(m_reserved_node_offering_type, json[QString("ReservedNodeOfferingType")]);
    m_reserved_node_offering_type_isSet = !json[QString("ReservedNodeOfferingType")].isNull() && m_reserved_node_offering_type_isValid;
}

QString OAIReservedNode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReservedNode::asJsonObject() const {
    QJsonObject obj;
    if (m_reserved_node_id_isSet) {
        obj.insert(QString("ReservedNodeId"), ::OpenAPI::toJsonValue(m_reserved_node_id));
    }
    if (m_reserved_node_offering_id_isSet) {
        obj.insert(QString("ReservedNodeOfferingId"), ::OpenAPI::toJsonValue(m_reserved_node_offering_id));
    }
    if (m_node_type_isSet) {
        obj.insert(QString("NodeType"), ::OpenAPI::toJsonValue(m_node_type));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_duration_isSet) {
        obj.insert(QString("Duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_fixed_price_isSet) {
        obj.insert(QString("FixedPrice"), ::OpenAPI::toJsonValue(m_fixed_price));
    }
    if (m_usage_price_isSet) {
        obj.insert(QString("UsagePrice"), ::OpenAPI::toJsonValue(m_usage_price));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("CurrencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_node_count_isSet) {
        obj.insert(QString("NodeCount"), ::OpenAPI::toJsonValue(m_node_count));
    }
    if (m_state_isSet) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_offering_type_isSet) {
        obj.insert(QString("OfferingType"), ::OpenAPI::toJsonValue(m_offering_type));
    }
    if (m_recurring_charges.isSet()) {
        obj.insert(QString("RecurringCharges"), ::OpenAPI::toJsonValue(m_recurring_charges));
    }
    if (m_reserved_node_offering_type.isSet()) {
        obj.insert(QString("ReservedNodeOfferingType"), ::OpenAPI::toJsonValue(m_reserved_node_offering_type));
    }
    return obj;
}

QString OAIReservedNode::getReservedNodeId() const {
    return m_reserved_node_id;
}
void OAIReservedNode::setReservedNodeId(const QString &reserved_node_id) {
    m_reserved_node_id = reserved_node_id;
    m_reserved_node_id_isSet = true;
}

bool OAIReservedNode::is_reserved_node_id_Set() const{
    return m_reserved_node_id_isSet;
}

bool OAIReservedNode::is_reserved_node_id_Valid() const{
    return m_reserved_node_id_isValid;
}

QString OAIReservedNode::getReservedNodeOfferingId() const {
    return m_reserved_node_offering_id;
}
void OAIReservedNode::setReservedNodeOfferingId(const QString &reserved_node_offering_id) {
    m_reserved_node_offering_id = reserved_node_offering_id;
    m_reserved_node_offering_id_isSet = true;
}

bool OAIReservedNode::is_reserved_node_offering_id_Set() const{
    return m_reserved_node_offering_id_isSet;
}

bool OAIReservedNode::is_reserved_node_offering_id_Valid() const{
    return m_reserved_node_offering_id_isValid;
}

QString OAIReservedNode::getNodeType() const {
    return m_node_type;
}
void OAIReservedNode::setNodeType(const QString &node_type) {
    m_node_type = node_type;
    m_node_type_isSet = true;
}

bool OAIReservedNode::is_node_type_Set() const{
    return m_node_type_isSet;
}

bool OAIReservedNode::is_node_type_Valid() const{
    return m_node_type_isValid;
}

QDateTime OAIReservedNode::getStartTime() const {
    return m_start_time;
}
void OAIReservedNode::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIReservedNode::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIReservedNode::is_start_time_Valid() const{
    return m_start_time_isValid;
}

qint32 OAIReservedNode::getDuration() const {
    return m_duration;
}
void OAIReservedNode::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIReservedNode::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIReservedNode::is_duration_Valid() const{
    return m_duration_isValid;
}

double OAIReservedNode::getFixedPrice() const {
    return m_fixed_price;
}
void OAIReservedNode::setFixedPrice(const double &fixed_price) {
    m_fixed_price = fixed_price;
    m_fixed_price_isSet = true;
}

bool OAIReservedNode::is_fixed_price_Set() const{
    return m_fixed_price_isSet;
}

bool OAIReservedNode::is_fixed_price_Valid() const{
    return m_fixed_price_isValid;
}

double OAIReservedNode::getUsagePrice() const {
    return m_usage_price;
}
void OAIReservedNode::setUsagePrice(const double &usage_price) {
    m_usage_price = usage_price;
    m_usage_price_isSet = true;
}

bool OAIReservedNode::is_usage_price_Set() const{
    return m_usage_price_isSet;
}

bool OAIReservedNode::is_usage_price_Valid() const{
    return m_usage_price_isValid;
}

QString OAIReservedNode::getCurrencyCode() const {
    return m_currency_code;
}
void OAIReservedNode::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIReservedNode::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIReservedNode::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

qint32 OAIReservedNode::getNodeCount() const {
    return m_node_count;
}
void OAIReservedNode::setNodeCount(const qint32 &node_count) {
    m_node_count = node_count;
    m_node_count_isSet = true;
}

bool OAIReservedNode::is_node_count_Set() const{
    return m_node_count_isSet;
}

bool OAIReservedNode::is_node_count_Valid() const{
    return m_node_count_isValid;
}

QString OAIReservedNode::getState() const {
    return m_state;
}
void OAIReservedNode::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIReservedNode::is_state_Set() const{
    return m_state_isSet;
}

bool OAIReservedNode::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIReservedNode::getOfferingType() const {
    return m_offering_type;
}
void OAIReservedNode::setOfferingType(const QString &offering_type) {
    m_offering_type = offering_type;
    m_offering_type_isSet = true;
}

bool OAIReservedNode::is_offering_type_Set() const{
    return m_offering_type_isSet;
}

bool OAIReservedNode::is_offering_type_Valid() const{
    return m_offering_type_isValid;
}

QList OAIReservedNode::getRecurringCharges() const {
    return m_recurring_charges;
}
void OAIReservedNode::setRecurringCharges(const QList &recurring_charges) {
    m_recurring_charges = recurring_charges;
    m_recurring_charges_isSet = true;
}

bool OAIReservedNode::is_recurring_charges_Set() const{
    return m_recurring_charges_isSet;
}

bool OAIReservedNode::is_recurring_charges_Valid() const{
    return m_recurring_charges_isValid;
}

OAIReservedNodeOfferingType OAIReservedNode::getReservedNodeOfferingType() const {
    return m_reserved_node_offering_type;
}
void OAIReservedNode::setReservedNodeOfferingType(const OAIReservedNodeOfferingType &reserved_node_offering_type) {
    m_reserved_node_offering_type = reserved_node_offering_type;
    m_reserved_node_offering_type_isSet = true;
}

bool OAIReservedNode::is_reserved_node_offering_type_Set() const{
    return m_reserved_node_offering_type_isSet;
}

bool OAIReservedNode::is_reserved_node_offering_type_Valid() const{
    return m_reserved_node_offering_type_isValid;
}

bool OAIReservedNode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_reserved_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_node_offering_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offering_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_charges.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_node_offering_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReservedNode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
