/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRestoreStatus.h
 *
 * Describes the status of a cluster restore action. Returns null if the cluster was not created by restoring a snapshot.
 */

#ifndef OAIRestoreStatus_H
#define OAIRestoreStatus_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRestoreStatus : public OAIObject {
public:
    OAIRestoreStatus();
    OAIRestoreStatus(QString json);
    ~OAIRestoreStatus() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    double getCurrentRestoreRateInMegaBytesPerSecond() const;
    void setCurrentRestoreRateInMegaBytesPerSecond(const double &current_restore_rate_in_mega_bytes_per_second);
    bool is_current_restore_rate_in_mega_bytes_per_second_Set() const;
    bool is_current_restore_rate_in_mega_bytes_per_second_Valid() const;

    qint32 getSnapshotSizeInMegaBytes() const;
    void setSnapshotSizeInMegaBytes(const qint32 &snapshot_size_in_mega_bytes);
    bool is_snapshot_size_in_mega_bytes_Set() const;
    bool is_snapshot_size_in_mega_bytes_Valid() const;

    qint32 getProgressInMegaBytes() const;
    void setProgressInMegaBytes(const qint32 &progress_in_mega_bytes);
    bool is_progress_in_mega_bytes_Set() const;
    bool is_progress_in_mega_bytes_Valid() const;

    qint32 getElapsedTimeInSeconds() const;
    void setElapsedTimeInSeconds(const qint32 &elapsed_time_in_seconds);
    bool is_elapsed_time_in_seconds_Set() const;
    bool is_elapsed_time_in_seconds_Valid() const;

    qint32 getEstimatedTimeToCompletionInSeconds() const;
    void setEstimatedTimeToCompletionInSeconds(const qint32 &estimated_time_to_completion_in_seconds);
    bool is_estimated_time_to_completion_in_seconds_Set() const;
    bool is_estimated_time_to_completion_in_seconds_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    double m_current_restore_rate_in_mega_bytes_per_second;
    bool m_current_restore_rate_in_mega_bytes_per_second_isSet;
    bool m_current_restore_rate_in_mega_bytes_per_second_isValid;

    qint32 m_snapshot_size_in_mega_bytes;
    bool m_snapshot_size_in_mega_bytes_isSet;
    bool m_snapshot_size_in_mega_bytes_isValid;

    qint32 m_progress_in_mega_bytes;
    bool m_progress_in_mega_bytes_isSet;
    bool m_progress_in_mega_bytes_isValid;

    qint32 m_elapsed_time_in_seconds;
    bool m_elapsed_time_in_seconds_isSet;
    bool m_elapsed_time_in_seconds_isValid;

    qint32 m_estimated_time_to_completion_in_seconds;
    bool m_estimated_time_to_completion_in_seconds_isSet;
    bool m_estimated_time_to_completion_in_seconds_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRestoreStatus)

#endif // OAIRestoreStatus_H
