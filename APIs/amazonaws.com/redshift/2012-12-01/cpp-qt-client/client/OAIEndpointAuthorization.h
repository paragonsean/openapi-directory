/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEndpointAuthorization.h
 *
 * Describes an endpoint authorization for authorizing Redshift-managed VPC endpoint access to a cluster across Amazon Web Services accounts.
 */

#ifndef OAIEndpointAuthorization_H
#define OAIEndpointAuthorization_H

#include <QJsonObject>

#include "OAIAuthorizationStatus.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEndpointAuthorization : public OAIObject {
public:
    OAIEndpointAuthorization();
    OAIEndpointAuthorization(QString json);
    ~OAIEndpointAuthorization() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getGrantor() const;
    void setGrantor(const QString &grantor);
    bool is_grantor_Set() const;
    bool is_grantor_Valid() const;

    QString getGrantee() const;
    void setGrantee(const QString &grantee);
    bool is_grantee_Set() const;
    bool is_grantee_Valid() const;

    QString getClusterIdentifier() const;
    void setClusterIdentifier(const QString &cluster_identifier);
    bool is_cluster_identifier_Set() const;
    bool is_cluster_identifier_Valid() const;

    QDateTime getAuthorizeTime() const;
    void setAuthorizeTime(const QDateTime &authorize_time);
    bool is_authorize_time_Set() const;
    bool is_authorize_time_Valid() const;

    QString getClusterStatus() const;
    void setClusterStatus(const QString &cluster_status);
    bool is_cluster_status_Set() const;
    bool is_cluster_status_Valid() const;

    OAIAuthorizationStatus getStatus() const;
    void setStatus(const OAIAuthorizationStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    bool getAllowedAllVpcs() const;
    void setAllowedAllVpcs(const bool &allowed_all_vpcs);
    bool is_allowed_all_vpcs_Set() const;
    bool is_allowed_all_vpcs_Valid() const;

    QList getAllowedVpcs() const;
    void setAllowedVpcs(const QList &allowed_vpcs);
    bool is_allowed_vpcs_Set() const;
    bool is_allowed_vpcs_Valid() const;

    qint32 getEndpointCount() const;
    void setEndpointCount(const qint32 &endpoint_count);
    bool is_endpoint_count_Set() const;
    bool is_endpoint_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_grantor;
    bool m_grantor_isSet;
    bool m_grantor_isValid;

    QString m_grantee;
    bool m_grantee_isSet;
    bool m_grantee_isValid;

    QString m_cluster_identifier;
    bool m_cluster_identifier_isSet;
    bool m_cluster_identifier_isValid;

    QDateTime m_authorize_time;
    bool m_authorize_time_isSet;
    bool m_authorize_time_isValid;

    QString m_cluster_status;
    bool m_cluster_status_isSet;
    bool m_cluster_status_isValid;

    OAIAuthorizationStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    bool m_allowed_all_vpcs;
    bool m_allowed_all_vpcs_isSet;
    bool m_allowed_all_vpcs_isValid;

    QList m_allowed_vpcs;
    bool m_allowed_vpcs_isSet;
    bool m_allowed_vpcs_isValid;

    qint32 m_endpoint_count;
    bool m_endpoint_count_isSet;
    bool m_endpoint_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEndpointAuthorization)

#endif // OAIEndpointAuthorization_H
