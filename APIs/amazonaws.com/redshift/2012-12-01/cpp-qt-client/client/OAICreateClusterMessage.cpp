/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateClusterMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateClusterMessage::OAICreateClusterMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateClusterMessage::OAICreateClusterMessage() {
    this->initializeModel();
}

OAICreateClusterMessage::~OAICreateClusterMessage() {}

void OAICreateClusterMessage::initializeModel() {

    m_db_name_isSet = false;
    m_db_name_isValid = false;

    m_cluster_identifier_isSet = false;
    m_cluster_identifier_isValid = false;

    m_cluster_type_isSet = false;
    m_cluster_type_isValid = false;

    m_node_type_isSet = false;
    m_node_type_isValid = false;

    m_master_username_isSet = false;
    m_master_username_isValid = false;

    m_master_user_password_isSet = false;
    m_master_user_password_isValid = false;

    m_cluster_security_groups_isSet = false;
    m_cluster_security_groups_isValid = false;

    m_vpc_security_group_ids_isSet = false;
    m_vpc_security_group_ids_isValid = false;

    m_cluster_subnet_group_name_isSet = false;
    m_cluster_subnet_group_name_isValid = false;

    m_availability_zone_isSet = false;
    m_availability_zone_isValid = false;

    m_preferred_maintenance_window_isSet = false;
    m_preferred_maintenance_window_isValid = false;

    m_cluster_parameter_group_name_isSet = false;
    m_cluster_parameter_group_name_isValid = false;

    m_automated_snapshot_retention_period_isSet = false;
    m_automated_snapshot_retention_period_isValid = false;

    m_manual_snapshot_retention_period_isSet = false;
    m_manual_snapshot_retention_period_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_cluster_version_isSet = false;
    m_cluster_version_isValid = false;

    m_allow_version_upgrade_isSet = false;
    m_allow_version_upgrade_isValid = false;

    m_number_of_nodes_isSet = false;
    m_number_of_nodes_isValid = false;

    m_publicly_accessible_isSet = false;
    m_publicly_accessible_isValid = false;

    m_encrypted_isSet = false;
    m_encrypted_isValid = false;

    m_hsm_client_certificate_identifier_isSet = false;
    m_hsm_client_certificate_identifier_isValid = false;

    m_hsm_configuration_identifier_isSet = false;
    m_hsm_configuration_identifier_isValid = false;

    m_elastic_ip_isSet = false;
    m_elastic_ip_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_enhanced_vpc_routing_isSet = false;
    m_enhanced_vpc_routing_isValid = false;

    m_additional_info_isSet = false;
    m_additional_info_isValid = false;

    m_iam_roles_isSet = false;
    m_iam_roles_isValid = false;

    m_maintenance_track_name_isSet = false;
    m_maintenance_track_name_isValid = false;

    m_snapshot_schedule_identifier_isSet = false;
    m_snapshot_schedule_identifier_isValid = false;

    m_availability_zone_relocation_isSet = false;
    m_availability_zone_relocation_isValid = false;

    m_aqua_configuration_status_isSet = false;
    m_aqua_configuration_status_isValid = false;

    m_default_iam_role_arn_isSet = false;
    m_default_iam_role_arn_isValid = false;

    m_load_sample_data_isSet = false;
    m_load_sample_data_isValid = false;
}

void OAICreateClusterMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateClusterMessage::fromJsonObject(QJsonObject json) {

    m_db_name_isValid = ::OpenAPI::fromJsonValue(m_db_name, json[QString("DBName")]);
    m_db_name_isSet = !json[QString("DBName")].isNull() && m_db_name_isValid;

    m_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_cluster_identifier, json[QString("ClusterIdentifier")]);
    m_cluster_identifier_isSet = !json[QString("ClusterIdentifier")].isNull() && m_cluster_identifier_isValid;

    m_cluster_type_isValid = ::OpenAPI::fromJsonValue(m_cluster_type, json[QString("ClusterType")]);
    m_cluster_type_isSet = !json[QString("ClusterType")].isNull() && m_cluster_type_isValid;

    m_node_type_isValid = ::OpenAPI::fromJsonValue(m_node_type, json[QString("NodeType")]);
    m_node_type_isSet = !json[QString("NodeType")].isNull() && m_node_type_isValid;

    m_master_username_isValid = ::OpenAPI::fromJsonValue(m_master_username, json[QString("MasterUsername")]);
    m_master_username_isSet = !json[QString("MasterUsername")].isNull() && m_master_username_isValid;

    m_master_user_password_isValid = ::OpenAPI::fromJsonValue(m_master_user_password, json[QString("MasterUserPassword")]);
    m_master_user_password_isSet = !json[QString("MasterUserPassword")].isNull() && m_master_user_password_isValid;

    m_cluster_security_groups_isValid = ::OpenAPI::fromJsonValue(m_cluster_security_groups, json[QString("ClusterSecurityGroups")]);
    m_cluster_security_groups_isSet = !json[QString("ClusterSecurityGroups")].isNull() && m_cluster_security_groups_isValid;

    m_vpc_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_vpc_security_group_ids, json[QString("VpcSecurityGroupIds")]);
    m_vpc_security_group_ids_isSet = !json[QString("VpcSecurityGroupIds")].isNull() && m_vpc_security_group_ids_isValid;

    m_cluster_subnet_group_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_subnet_group_name, json[QString("ClusterSubnetGroupName")]);
    m_cluster_subnet_group_name_isSet = !json[QString("ClusterSubnetGroupName")].isNull() && m_cluster_subnet_group_name_isValid;

    m_availability_zone_isValid = ::OpenAPI::fromJsonValue(m_availability_zone, json[QString("AvailabilityZone")]);
    m_availability_zone_isSet = !json[QString("AvailabilityZone")].isNull() && m_availability_zone_isValid;

    m_preferred_maintenance_window_isValid = ::OpenAPI::fromJsonValue(m_preferred_maintenance_window, json[QString("PreferredMaintenanceWindow")]);
    m_preferred_maintenance_window_isSet = !json[QString("PreferredMaintenanceWindow")].isNull() && m_preferred_maintenance_window_isValid;

    m_cluster_parameter_group_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_parameter_group_name, json[QString("ClusterParameterGroupName")]);
    m_cluster_parameter_group_name_isSet = !json[QString("ClusterParameterGroupName")].isNull() && m_cluster_parameter_group_name_isValid;

    m_automated_snapshot_retention_period_isValid = ::OpenAPI::fromJsonValue(m_automated_snapshot_retention_period, json[QString("AutomatedSnapshotRetentionPeriod")]);
    m_automated_snapshot_retention_period_isSet = !json[QString("AutomatedSnapshotRetentionPeriod")].isNull() && m_automated_snapshot_retention_period_isValid;

    m_manual_snapshot_retention_period_isValid = ::OpenAPI::fromJsonValue(m_manual_snapshot_retention_period, json[QString("ManualSnapshotRetentionPeriod")]);
    m_manual_snapshot_retention_period_isSet = !json[QString("ManualSnapshotRetentionPeriod")].isNull() && m_manual_snapshot_retention_period_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("Port")]);
    m_port_isSet = !json[QString("Port")].isNull() && m_port_isValid;

    m_cluster_version_isValid = ::OpenAPI::fromJsonValue(m_cluster_version, json[QString("ClusterVersion")]);
    m_cluster_version_isSet = !json[QString("ClusterVersion")].isNull() && m_cluster_version_isValid;

    m_allow_version_upgrade_isValid = ::OpenAPI::fromJsonValue(m_allow_version_upgrade, json[QString("AllowVersionUpgrade")]);
    m_allow_version_upgrade_isSet = !json[QString("AllowVersionUpgrade")].isNull() && m_allow_version_upgrade_isValid;

    m_number_of_nodes_isValid = ::OpenAPI::fromJsonValue(m_number_of_nodes, json[QString("NumberOfNodes")]);
    m_number_of_nodes_isSet = !json[QString("NumberOfNodes")].isNull() && m_number_of_nodes_isValid;

    m_publicly_accessible_isValid = ::OpenAPI::fromJsonValue(m_publicly_accessible, json[QString("PubliclyAccessible")]);
    m_publicly_accessible_isSet = !json[QString("PubliclyAccessible")].isNull() && m_publicly_accessible_isValid;

    m_encrypted_isValid = ::OpenAPI::fromJsonValue(m_encrypted, json[QString("Encrypted")]);
    m_encrypted_isSet = !json[QString("Encrypted")].isNull() && m_encrypted_isValid;

    m_hsm_client_certificate_identifier_isValid = ::OpenAPI::fromJsonValue(m_hsm_client_certificate_identifier, json[QString("HsmClientCertificateIdentifier")]);
    m_hsm_client_certificate_identifier_isSet = !json[QString("HsmClientCertificateIdentifier")].isNull() && m_hsm_client_certificate_identifier_isValid;

    m_hsm_configuration_identifier_isValid = ::OpenAPI::fromJsonValue(m_hsm_configuration_identifier, json[QString("HsmConfigurationIdentifier")]);
    m_hsm_configuration_identifier_isSet = !json[QString("HsmConfigurationIdentifier")].isNull() && m_hsm_configuration_identifier_isValid;

    m_elastic_ip_isValid = ::OpenAPI::fromJsonValue(m_elastic_ip, json[QString("ElasticIp")]);
    m_elastic_ip_isSet = !json[QString("ElasticIp")].isNull() && m_elastic_ip_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_enhanced_vpc_routing_isValid = ::OpenAPI::fromJsonValue(m_enhanced_vpc_routing, json[QString("EnhancedVpcRouting")]);
    m_enhanced_vpc_routing_isSet = !json[QString("EnhancedVpcRouting")].isNull() && m_enhanced_vpc_routing_isValid;

    m_additional_info_isValid = ::OpenAPI::fromJsonValue(m_additional_info, json[QString("AdditionalInfo")]);
    m_additional_info_isSet = !json[QString("AdditionalInfo")].isNull() && m_additional_info_isValid;

    m_iam_roles_isValid = ::OpenAPI::fromJsonValue(m_iam_roles, json[QString("IamRoles")]);
    m_iam_roles_isSet = !json[QString("IamRoles")].isNull() && m_iam_roles_isValid;

    m_maintenance_track_name_isValid = ::OpenAPI::fromJsonValue(m_maintenance_track_name, json[QString("MaintenanceTrackName")]);
    m_maintenance_track_name_isSet = !json[QString("MaintenanceTrackName")].isNull() && m_maintenance_track_name_isValid;

    m_snapshot_schedule_identifier_isValid = ::OpenAPI::fromJsonValue(m_snapshot_schedule_identifier, json[QString("SnapshotScheduleIdentifier")]);
    m_snapshot_schedule_identifier_isSet = !json[QString("SnapshotScheduleIdentifier")].isNull() && m_snapshot_schedule_identifier_isValid;

    m_availability_zone_relocation_isValid = ::OpenAPI::fromJsonValue(m_availability_zone_relocation, json[QString("AvailabilityZoneRelocation")]);
    m_availability_zone_relocation_isSet = !json[QString("AvailabilityZoneRelocation")].isNull() && m_availability_zone_relocation_isValid;

    m_aqua_configuration_status_isValid = ::OpenAPI::fromJsonValue(m_aqua_configuration_status, json[QString("AquaConfigurationStatus")]);
    m_aqua_configuration_status_isSet = !json[QString("AquaConfigurationStatus")].isNull() && m_aqua_configuration_status_isValid;

    m_default_iam_role_arn_isValid = ::OpenAPI::fromJsonValue(m_default_iam_role_arn, json[QString("DefaultIamRoleArn")]);
    m_default_iam_role_arn_isSet = !json[QString("DefaultIamRoleArn")].isNull() && m_default_iam_role_arn_isValid;

    m_load_sample_data_isValid = ::OpenAPI::fromJsonValue(m_load_sample_data, json[QString("LoadSampleData")]);
    m_load_sample_data_isSet = !json[QString("LoadSampleData")].isNull() && m_load_sample_data_isValid;
}

QString OAICreateClusterMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateClusterMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_db_name_isSet) {
        obj.insert(QString("DBName"), ::OpenAPI::toJsonValue(m_db_name));
    }
    if (m_cluster_identifier_isSet) {
        obj.insert(QString("ClusterIdentifier"), ::OpenAPI::toJsonValue(m_cluster_identifier));
    }
    if (m_cluster_type_isSet) {
        obj.insert(QString("ClusterType"), ::OpenAPI::toJsonValue(m_cluster_type));
    }
    if (m_node_type_isSet) {
        obj.insert(QString("NodeType"), ::OpenAPI::toJsonValue(m_node_type));
    }
    if (m_master_username_isSet) {
        obj.insert(QString("MasterUsername"), ::OpenAPI::toJsonValue(m_master_username));
    }
    if (m_master_user_password_isSet) {
        obj.insert(QString("MasterUserPassword"), ::OpenAPI::toJsonValue(m_master_user_password));
    }
    if (m_cluster_security_groups.isSet()) {
        obj.insert(QString("ClusterSecurityGroups"), ::OpenAPI::toJsonValue(m_cluster_security_groups));
    }
    if (m_vpc_security_group_ids.isSet()) {
        obj.insert(QString("VpcSecurityGroupIds"), ::OpenAPI::toJsonValue(m_vpc_security_group_ids));
    }
    if (m_cluster_subnet_group_name_isSet) {
        obj.insert(QString("ClusterSubnetGroupName"), ::OpenAPI::toJsonValue(m_cluster_subnet_group_name));
    }
    if (m_availability_zone_isSet) {
        obj.insert(QString("AvailabilityZone"), ::OpenAPI::toJsonValue(m_availability_zone));
    }
    if (m_preferred_maintenance_window_isSet) {
        obj.insert(QString("PreferredMaintenanceWindow"), ::OpenAPI::toJsonValue(m_preferred_maintenance_window));
    }
    if (m_cluster_parameter_group_name_isSet) {
        obj.insert(QString("ClusterParameterGroupName"), ::OpenAPI::toJsonValue(m_cluster_parameter_group_name));
    }
    if (m_automated_snapshot_retention_period_isSet) {
        obj.insert(QString("AutomatedSnapshotRetentionPeriod"), ::OpenAPI::toJsonValue(m_automated_snapshot_retention_period));
    }
    if (m_manual_snapshot_retention_period_isSet) {
        obj.insert(QString("ManualSnapshotRetentionPeriod"), ::OpenAPI::toJsonValue(m_manual_snapshot_retention_period));
    }
    if (m_port_isSet) {
        obj.insert(QString("Port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_cluster_version_isSet) {
        obj.insert(QString("ClusterVersion"), ::OpenAPI::toJsonValue(m_cluster_version));
    }
    if (m_allow_version_upgrade_isSet) {
        obj.insert(QString("AllowVersionUpgrade"), ::OpenAPI::toJsonValue(m_allow_version_upgrade));
    }
    if (m_number_of_nodes_isSet) {
        obj.insert(QString("NumberOfNodes"), ::OpenAPI::toJsonValue(m_number_of_nodes));
    }
    if (m_publicly_accessible_isSet) {
        obj.insert(QString("PubliclyAccessible"), ::OpenAPI::toJsonValue(m_publicly_accessible));
    }
    if (m_encrypted_isSet) {
        obj.insert(QString("Encrypted"), ::OpenAPI::toJsonValue(m_encrypted));
    }
    if (m_hsm_client_certificate_identifier_isSet) {
        obj.insert(QString("HsmClientCertificateIdentifier"), ::OpenAPI::toJsonValue(m_hsm_client_certificate_identifier));
    }
    if (m_hsm_configuration_identifier_isSet) {
        obj.insert(QString("HsmConfigurationIdentifier"), ::OpenAPI::toJsonValue(m_hsm_configuration_identifier));
    }
    if (m_elastic_ip_isSet) {
        obj.insert(QString("ElasticIp"), ::OpenAPI::toJsonValue(m_elastic_ip));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_enhanced_vpc_routing_isSet) {
        obj.insert(QString("EnhancedVpcRouting"), ::OpenAPI::toJsonValue(m_enhanced_vpc_routing));
    }
    if (m_additional_info_isSet) {
        obj.insert(QString("AdditionalInfo"), ::OpenAPI::toJsonValue(m_additional_info));
    }
    if (m_iam_roles.isSet()) {
        obj.insert(QString("IamRoles"), ::OpenAPI::toJsonValue(m_iam_roles));
    }
    if (m_maintenance_track_name_isSet) {
        obj.insert(QString("MaintenanceTrackName"), ::OpenAPI::toJsonValue(m_maintenance_track_name));
    }
    if (m_snapshot_schedule_identifier_isSet) {
        obj.insert(QString("SnapshotScheduleIdentifier"), ::OpenAPI::toJsonValue(m_snapshot_schedule_identifier));
    }
    if (m_availability_zone_relocation_isSet) {
        obj.insert(QString("AvailabilityZoneRelocation"), ::OpenAPI::toJsonValue(m_availability_zone_relocation));
    }
    if (m_aqua_configuration_status.isSet()) {
        obj.insert(QString("AquaConfigurationStatus"), ::OpenAPI::toJsonValue(m_aqua_configuration_status));
    }
    if (m_default_iam_role_arn_isSet) {
        obj.insert(QString("DefaultIamRoleArn"), ::OpenAPI::toJsonValue(m_default_iam_role_arn));
    }
    if (m_load_sample_data_isSet) {
        obj.insert(QString("LoadSampleData"), ::OpenAPI::toJsonValue(m_load_sample_data));
    }
    return obj;
}

QString OAICreateClusterMessage::getDbName() const {
    return m_db_name;
}
void OAICreateClusterMessage::setDbName(const QString &db_name) {
    m_db_name = db_name;
    m_db_name_isSet = true;
}

bool OAICreateClusterMessage::is_db_name_Set() const{
    return m_db_name_isSet;
}

bool OAICreateClusterMessage::is_db_name_Valid() const{
    return m_db_name_isValid;
}

QString OAICreateClusterMessage::getClusterIdentifier() const {
    return m_cluster_identifier;
}
void OAICreateClusterMessage::setClusterIdentifier(const QString &cluster_identifier) {
    m_cluster_identifier = cluster_identifier;
    m_cluster_identifier_isSet = true;
}

bool OAICreateClusterMessage::is_cluster_identifier_Set() const{
    return m_cluster_identifier_isSet;
}

bool OAICreateClusterMessage::is_cluster_identifier_Valid() const{
    return m_cluster_identifier_isValid;
}

QString OAICreateClusterMessage::getClusterType() const {
    return m_cluster_type;
}
void OAICreateClusterMessage::setClusterType(const QString &cluster_type) {
    m_cluster_type = cluster_type;
    m_cluster_type_isSet = true;
}

bool OAICreateClusterMessage::is_cluster_type_Set() const{
    return m_cluster_type_isSet;
}

bool OAICreateClusterMessage::is_cluster_type_Valid() const{
    return m_cluster_type_isValid;
}

QString OAICreateClusterMessage::getNodeType() const {
    return m_node_type;
}
void OAICreateClusterMessage::setNodeType(const QString &node_type) {
    m_node_type = node_type;
    m_node_type_isSet = true;
}

bool OAICreateClusterMessage::is_node_type_Set() const{
    return m_node_type_isSet;
}

bool OAICreateClusterMessage::is_node_type_Valid() const{
    return m_node_type_isValid;
}

QString OAICreateClusterMessage::getMasterUsername() const {
    return m_master_username;
}
void OAICreateClusterMessage::setMasterUsername(const QString &master_username) {
    m_master_username = master_username;
    m_master_username_isSet = true;
}

bool OAICreateClusterMessage::is_master_username_Set() const{
    return m_master_username_isSet;
}

bool OAICreateClusterMessage::is_master_username_Valid() const{
    return m_master_username_isValid;
}

QString OAICreateClusterMessage::getMasterUserPassword() const {
    return m_master_user_password;
}
void OAICreateClusterMessage::setMasterUserPassword(const QString &master_user_password) {
    m_master_user_password = master_user_password;
    m_master_user_password_isSet = true;
}

bool OAICreateClusterMessage::is_master_user_password_Set() const{
    return m_master_user_password_isSet;
}

bool OAICreateClusterMessage::is_master_user_password_Valid() const{
    return m_master_user_password_isValid;
}

QList OAICreateClusterMessage::getClusterSecurityGroups() const {
    return m_cluster_security_groups;
}
void OAICreateClusterMessage::setClusterSecurityGroups(const QList &cluster_security_groups) {
    m_cluster_security_groups = cluster_security_groups;
    m_cluster_security_groups_isSet = true;
}

bool OAICreateClusterMessage::is_cluster_security_groups_Set() const{
    return m_cluster_security_groups_isSet;
}

bool OAICreateClusterMessage::is_cluster_security_groups_Valid() const{
    return m_cluster_security_groups_isValid;
}

QList OAICreateClusterMessage::getVpcSecurityGroupIds() const {
    return m_vpc_security_group_ids;
}
void OAICreateClusterMessage::setVpcSecurityGroupIds(const QList &vpc_security_group_ids) {
    m_vpc_security_group_ids = vpc_security_group_ids;
    m_vpc_security_group_ids_isSet = true;
}

bool OAICreateClusterMessage::is_vpc_security_group_ids_Set() const{
    return m_vpc_security_group_ids_isSet;
}

bool OAICreateClusterMessage::is_vpc_security_group_ids_Valid() const{
    return m_vpc_security_group_ids_isValid;
}

QString OAICreateClusterMessage::getClusterSubnetGroupName() const {
    return m_cluster_subnet_group_name;
}
void OAICreateClusterMessage::setClusterSubnetGroupName(const QString &cluster_subnet_group_name) {
    m_cluster_subnet_group_name = cluster_subnet_group_name;
    m_cluster_subnet_group_name_isSet = true;
}

bool OAICreateClusterMessage::is_cluster_subnet_group_name_Set() const{
    return m_cluster_subnet_group_name_isSet;
}

bool OAICreateClusterMessage::is_cluster_subnet_group_name_Valid() const{
    return m_cluster_subnet_group_name_isValid;
}

QString OAICreateClusterMessage::getAvailabilityZone() const {
    return m_availability_zone;
}
void OAICreateClusterMessage::setAvailabilityZone(const QString &availability_zone) {
    m_availability_zone = availability_zone;
    m_availability_zone_isSet = true;
}

bool OAICreateClusterMessage::is_availability_zone_Set() const{
    return m_availability_zone_isSet;
}

bool OAICreateClusterMessage::is_availability_zone_Valid() const{
    return m_availability_zone_isValid;
}

QString OAICreateClusterMessage::getPreferredMaintenanceWindow() const {
    return m_preferred_maintenance_window;
}
void OAICreateClusterMessage::setPreferredMaintenanceWindow(const QString &preferred_maintenance_window) {
    m_preferred_maintenance_window = preferred_maintenance_window;
    m_preferred_maintenance_window_isSet = true;
}

bool OAICreateClusterMessage::is_preferred_maintenance_window_Set() const{
    return m_preferred_maintenance_window_isSet;
}

bool OAICreateClusterMessage::is_preferred_maintenance_window_Valid() const{
    return m_preferred_maintenance_window_isValid;
}

QString OAICreateClusterMessage::getClusterParameterGroupName() const {
    return m_cluster_parameter_group_name;
}
void OAICreateClusterMessage::setClusterParameterGroupName(const QString &cluster_parameter_group_name) {
    m_cluster_parameter_group_name = cluster_parameter_group_name;
    m_cluster_parameter_group_name_isSet = true;
}

bool OAICreateClusterMessage::is_cluster_parameter_group_name_Set() const{
    return m_cluster_parameter_group_name_isSet;
}

bool OAICreateClusterMessage::is_cluster_parameter_group_name_Valid() const{
    return m_cluster_parameter_group_name_isValid;
}

qint32 OAICreateClusterMessage::getAutomatedSnapshotRetentionPeriod() const {
    return m_automated_snapshot_retention_period;
}
void OAICreateClusterMessage::setAutomatedSnapshotRetentionPeriod(const qint32 &automated_snapshot_retention_period) {
    m_automated_snapshot_retention_period = automated_snapshot_retention_period;
    m_automated_snapshot_retention_period_isSet = true;
}

bool OAICreateClusterMessage::is_automated_snapshot_retention_period_Set() const{
    return m_automated_snapshot_retention_period_isSet;
}

bool OAICreateClusterMessage::is_automated_snapshot_retention_period_Valid() const{
    return m_automated_snapshot_retention_period_isValid;
}

qint32 OAICreateClusterMessage::getManualSnapshotRetentionPeriod() const {
    return m_manual_snapshot_retention_period;
}
void OAICreateClusterMessage::setManualSnapshotRetentionPeriod(const qint32 &manual_snapshot_retention_period) {
    m_manual_snapshot_retention_period = manual_snapshot_retention_period;
    m_manual_snapshot_retention_period_isSet = true;
}

bool OAICreateClusterMessage::is_manual_snapshot_retention_period_Set() const{
    return m_manual_snapshot_retention_period_isSet;
}

bool OAICreateClusterMessage::is_manual_snapshot_retention_period_Valid() const{
    return m_manual_snapshot_retention_period_isValid;
}

qint32 OAICreateClusterMessage::getPort() const {
    return m_port;
}
void OAICreateClusterMessage::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAICreateClusterMessage::is_port_Set() const{
    return m_port_isSet;
}

bool OAICreateClusterMessage::is_port_Valid() const{
    return m_port_isValid;
}

QString OAICreateClusterMessage::getClusterVersion() const {
    return m_cluster_version;
}
void OAICreateClusterMessage::setClusterVersion(const QString &cluster_version) {
    m_cluster_version = cluster_version;
    m_cluster_version_isSet = true;
}

bool OAICreateClusterMessage::is_cluster_version_Set() const{
    return m_cluster_version_isSet;
}

bool OAICreateClusterMessage::is_cluster_version_Valid() const{
    return m_cluster_version_isValid;
}

bool OAICreateClusterMessage::getAllowVersionUpgrade() const {
    return m_allow_version_upgrade;
}
void OAICreateClusterMessage::setAllowVersionUpgrade(const bool &allow_version_upgrade) {
    m_allow_version_upgrade = allow_version_upgrade;
    m_allow_version_upgrade_isSet = true;
}

bool OAICreateClusterMessage::is_allow_version_upgrade_Set() const{
    return m_allow_version_upgrade_isSet;
}

bool OAICreateClusterMessage::is_allow_version_upgrade_Valid() const{
    return m_allow_version_upgrade_isValid;
}

qint32 OAICreateClusterMessage::getNumberOfNodes() const {
    return m_number_of_nodes;
}
void OAICreateClusterMessage::setNumberOfNodes(const qint32 &number_of_nodes) {
    m_number_of_nodes = number_of_nodes;
    m_number_of_nodes_isSet = true;
}

bool OAICreateClusterMessage::is_number_of_nodes_Set() const{
    return m_number_of_nodes_isSet;
}

bool OAICreateClusterMessage::is_number_of_nodes_Valid() const{
    return m_number_of_nodes_isValid;
}

bool OAICreateClusterMessage::getPubliclyAccessible() const {
    return m_publicly_accessible;
}
void OAICreateClusterMessage::setPubliclyAccessible(const bool &publicly_accessible) {
    m_publicly_accessible = publicly_accessible;
    m_publicly_accessible_isSet = true;
}

bool OAICreateClusterMessage::is_publicly_accessible_Set() const{
    return m_publicly_accessible_isSet;
}

bool OAICreateClusterMessage::is_publicly_accessible_Valid() const{
    return m_publicly_accessible_isValid;
}

bool OAICreateClusterMessage::getEncrypted() const {
    return m_encrypted;
}
void OAICreateClusterMessage::setEncrypted(const bool &encrypted) {
    m_encrypted = encrypted;
    m_encrypted_isSet = true;
}

bool OAICreateClusterMessage::is_encrypted_Set() const{
    return m_encrypted_isSet;
}

bool OAICreateClusterMessage::is_encrypted_Valid() const{
    return m_encrypted_isValid;
}

QString OAICreateClusterMessage::getHsmClientCertificateIdentifier() const {
    return m_hsm_client_certificate_identifier;
}
void OAICreateClusterMessage::setHsmClientCertificateIdentifier(const QString &hsm_client_certificate_identifier) {
    m_hsm_client_certificate_identifier = hsm_client_certificate_identifier;
    m_hsm_client_certificate_identifier_isSet = true;
}

bool OAICreateClusterMessage::is_hsm_client_certificate_identifier_Set() const{
    return m_hsm_client_certificate_identifier_isSet;
}

bool OAICreateClusterMessage::is_hsm_client_certificate_identifier_Valid() const{
    return m_hsm_client_certificate_identifier_isValid;
}

QString OAICreateClusterMessage::getHsmConfigurationIdentifier() const {
    return m_hsm_configuration_identifier;
}
void OAICreateClusterMessage::setHsmConfigurationIdentifier(const QString &hsm_configuration_identifier) {
    m_hsm_configuration_identifier = hsm_configuration_identifier;
    m_hsm_configuration_identifier_isSet = true;
}

bool OAICreateClusterMessage::is_hsm_configuration_identifier_Set() const{
    return m_hsm_configuration_identifier_isSet;
}

bool OAICreateClusterMessage::is_hsm_configuration_identifier_Valid() const{
    return m_hsm_configuration_identifier_isValid;
}

QString OAICreateClusterMessage::getElasticIp() const {
    return m_elastic_ip;
}
void OAICreateClusterMessage::setElasticIp(const QString &elastic_ip) {
    m_elastic_ip = elastic_ip;
    m_elastic_ip_isSet = true;
}

bool OAICreateClusterMessage::is_elastic_ip_Set() const{
    return m_elastic_ip_isSet;
}

bool OAICreateClusterMessage::is_elastic_ip_Valid() const{
    return m_elastic_ip_isValid;
}

QList OAICreateClusterMessage::getTags() const {
    return m_tags;
}
void OAICreateClusterMessage::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateClusterMessage::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateClusterMessage::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateClusterMessage::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAICreateClusterMessage::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAICreateClusterMessage::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAICreateClusterMessage::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

bool OAICreateClusterMessage::getEnhancedVpcRouting() const {
    return m_enhanced_vpc_routing;
}
void OAICreateClusterMessage::setEnhancedVpcRouting(const bool &enhanced_vpc_routing) {
    m_enhanced_vpc_routing = enhanced_vpc_routing;
    m_enhanced_vpc_routing_isSet = true;
}

bool OAICreateClusterMessage::is_enhanced_vpc_routing_Set() const{
    return m_enhanced_vpc_routing_isSet;
}

bool OAICreateClusterMessage::is_enhanced_vpc_routing_Valid() const{
    return m_enhanced_vpc_routing_isValid;
}

QString OAICreateClusterMessage::getAdditionalInfo() const {
    return m_additional_info;
}
void OAICreateClusterMessage::setAdditionalInfo(const QString &additional_info) {
    m_additional_info = additional_info;
    m_additional_info_isSet = true;
}

bool OAICreateClusterMessage::is_additional_info_Set() const{
    return m_additional_info_isSet;
}

bool OAICreateClusterMessage::is_additional_info_Valid() const{
    return m_additional_info_isValid;
}

QList OAICreateClusterMessage::getIamRoles() const {
    return m_iam_roles;
}
void OAICreateClusterMessage::setIamRoles(const QList &iam_roles) {
    m_iam_roles = iam_roles;
    m_iam_roles_isSet = true;
}

bool OAICreateClusterMessage::is_iam_roles_Set() const{
    return m_iam_roles_isSet;
}

bool OAICreateClusterMessage::is_iam_roles_Valid() const{
    return m_iam_roles_isValid;
}

QString OAICreateClusterMessage::getMaintenanceTrackName() const {
    return m_maintenance_track_name;
}
void OAICreateClusterMessage::setMaintenanceTrackName(const QString &maintenance_track_name) {
    m_maintenance_track_name = maintenance_track_name;
    m_maintenance_track_name_isSet = true;
}

bool OAICreateClusterMessage::is_maintenance_track_name_Set() const{
    return m_maintenance_track_name_isSet;
}

bool OAICreateClusterMessage::is_maintenance_track_name_Valid() const{
    return m_maintenance_track_name_isValid;
}

QString OAICreateClusterMessage::getSnapshotScheduleIdentifier() const {
    return m_snapshot_schedule_identifier;
}
void OAICreateClusterMessage::setSnapshotScheduleIdentifier(const QString &snapshot_schedule_identifier) {
    m_snapshot_schedule_identifier = snapshot_schedule_identifier;
    m_snapshot_schedule_identifier_isSet = true;
}

bool OAICreateClusterMessage::is_snapshot_schedule_identifier_Set() const{
    return m_snapshot_schedule_identifier_isSet;
}

bool OAICreateClusterMessage::is_snapshot_schedule_identifier_Valid() const{
    return m_snapshot_schedule_identifier_isValid;
}

bool OAICreateClusterMessage::getAvailabilityZoneRelocation() const {
    return m_availability_zone_relocation;
}
void OAICreateClusterMessage::setAvailabilityZoneRelocation(const bool &availability_zone_relocation) {
    m_availability_zone_relocation = availability_zone_relocation;
    m_availability_zone_relocation_isSet = true;
}

bool OAICreateClusterMessage::is_availability_zone_relocation_Set() const{
    return m_availability_zone_relocation_isSet;
}

bool OAICreateClusterMessage::is_availability_zone_relocation_Valid() const{
    return m_availability_zone_relocation_isValid;
}

OAIAquaConfigurationStatus OAICreateClusterMessage::getAquaConfigurationStatus() const {
    return m_aqua_configuration_status;
}
void OAICreateClusterMessage::setAquaConfigurationStatus(const OAIAquaConfigurationStatus &aqua_configuration_status) {
    m_aqua_configuration_status = aqua_configuration_status;
    m_aqua_configuration_status_isSet = true;
}

bool OAICreateClusterMessage::is_aqua_configuration_status_Set() const{
    return m_aqua_configuration_status_isSet;
}

bool OAICreateClusterMessage::is_aqua_configuration_status_Valid() const{
    return m_aqua_configuration_status_isValid;
}

QString OAICreateClusterMessage::getDefaultIamRoleArn() const {
    return m_default_iam_role_arn;
}
void OAICreateClusterMessage::setDefaultIamRoleArn(const QString &default_iam_role_arn) {
    m_default_iam_role_arn = default_iam_role_arn;
    m_default_iam_role_arn_isSet = true;
}

bool OAICreateClusterMessage::is_default_iam_role_arn_Set() const{
    return m_default_iam_role_arn_isSet;
}

bool OAICreateClusterMessage::is_default_iam_role_arn_Valid() const{
    return m_default_iam_role_arn_isValid;
}

QString OAICreateClusterMessage::getLoadSampleData() const {
    return m_load_sample_data;
}
void OAICreateClusterMessage::setLoadSampleData(const QString &load_sample_data) {
    m_load_sample_data = load_sample_data;
    m_load_sample_data_isSet = true;
}

bool OAICreateClusterMessage::is_load_sample_data_Set() const{
    return m_load_sample_data_isSet;
}

bool OAICreateClusterMessage::is_load_sample_data_Valid() const{
    return m_load_sample_data_isValid;
}

bool OAICreateClusterMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_db_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_user_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_security_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_subnet_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_maintenance_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_parameter_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_automated_snapshot_retention_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_snapshot_retention_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_version_upgrade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publicly_accessible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hsm_client_certificate_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hsm_configuration_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elastic_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enhanced_vpc_routing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_roles.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance_track_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_schedule_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zone_relocation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aqua_configuration_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_iam_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_sample_data_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateClusterMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cluster_identifier_isValid && m_node_type_isValid && m_master_username_isValid && m_master_user_password_isValid && true;
}

} // namespace OpenAPI
