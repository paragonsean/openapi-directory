/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIResizeProgressMessage.h
 *
 * Describes the result of a cluster resize operation.
 */

#ifndef OAIResizeProgressMessage_H
#define OAIResizeProgressMessage_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIResizeProgressMessage : public OAIObject {
public:
    OAIResizeProgressMessage();
    OAIResizeProgressMessage(QString json);
    ~OAIResizeProgressMessage() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getTargetNodeType() const;
    void setTargetNodeType(const QString &target_node_type);
    bool is_target_node_type_Set() const;
    bool is_target_node_type_Valid() const;

    qint32 getTargetNumberOfNodes() const;
    void setTargetNumberOfNodes(const qint32 &target_number_of_nodes);
    bool is_target_number_of_nodes_Set() const;
    bool is_target_number_of_nodes_Valid() const;

    QString getTargetClusterType() const;
    void setTargetClusterType(const QString &target_cluster_type);
    bool is_target_cluster_type_Set() const;
    bool is_target_cluster_type_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QList getImportTablesCompleted() const;
    void setImportTablesCompleted(const QList &import_tables_completed);
    bool is_import_tables_completed_Set() const;
    bool is_import_tables_completed_Valid() const;

    QList getImportTablesInProgress() const;
    void setImportTablesInProgress(const QList &import_tables_in_progress);
    bool is_import_tables_in_progress_Set() const;
    bool is_import_tables_in_progress_Valid() const;

    QList getImportTablesNotStarted() const;
    void setImportTablesNotStarted(const QList &import_tables_not_started);
    bool is_import_tables_not_started_Set() const;
    bool is_import_tables_not_started_Valid() const;

    double getAvgResizeRateInMegaBytesPerSecond() const;
    void setAvgResizeRateInMegaBytesPerSecond(const double &avg_resize_rate_in_mega_bytes_per_second);
    bool is_avg_resize_rate_in_mega_bytes_per_second_Set() const;
    bool is_avg_resize_rate_in_mega_bytes_per_second_Valid() const;

    qint32 getTotalResizeDataInMegaBytes() const;
    void setTotalResizeDataInMegaBytes(const qint32 &total_resize_data_in_mega_bytes);
    bool is_total_resize_data_in_mega_bytes_Set() const;
    bool is_total_resize_data_in_mega_bytes_Valid() const;

    qint32 getProgressInMegaBytes() const;
    void setProgressInMegaBytes(const qint32 &progress_in_mega_bytes);
    bool is_progress_in_mega_bytes_Set() const;
    bool is_progress_in_mega_bytes_Valid() const;

    qint32 getElapsedTimeInSeconds() const;
    void setElapsedTimeInSeconds(const qint32 &elapsed_time_in_seconds);
    bool is_elapsed_time_in_seconds_Set() const;
    bool is_elapsed_time_in_seconds_Valid() const;

    qint32 getEstimatedTimeToCompletionInSeconds() const;
    void setEstimatedTimeToCompletionInSeconds(const qint32 &estimated_time_to_completion_in_seconds);
    bool is_estimated_time_to_completion_in_seconds_Set() const;
    bool is_estimated_time_to_completion_in_seconds_Valid() const;

    QString getResizeType() const;
    void setResizeType(const QString &resize_type);
    bool is_resize_type_Set() const;
    bool is_resize_type_Valid() const;

    QString getMessage() const;
    void setMessage(const QString &message);
    bool is_message_Set() const;
    bool is_message_Valid() const;

    QString getTargetEncryptionType() const;
    void setTargetEncryptionType(const QString &target_encryption_type);
    bool is_target_encryption_type_Set() const;
    bool is_target_encryption_type_Valid() const;

    double getDataTransferProgressPercent() const;
    void setDataTransferProgressPercent(const double &data_transfer_progress_percent);
    bool is_data_transfer_progress_percent_Set() const;
    bool is_data_transfer_progress_percent_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_target_node_type;
    bool m_target_node_type_isSet;
    bool m_target_node_type_isValid;

    qint32 m_target_number_of_nodes;
    bool m_target_number_of_nodes_isSet;
    bool m_target_number_of_nodes_isValid;

    QString m_target_cluster_type;
    bool m_target_cluster_type_isSet;
    bool m_target_cluster_type_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QList m_import_tables_completed;
    bool m_import_tables_completed_isSet;
    bool m_import_tables_completed_isValid;

    QList m_import_tables_in_progress;
    bool m_import_tables_in_progress_isSet;
    bool m_import_tables_in_progress_isValid;

    QList m_import_tables_not_started;
    bool m_import_tables_not_started_isSet;
    bool m_import_tables_not_started_isValid;

    double m_avg_resize_rate_in_mega_bytes_per_second;
    bool m_avg_resize_rate_in_mega_bytes_per_second_isSet;
    bool m_avg_resize_rate_in_mega_bytes_per_second_isValid;

    qint32 m_total_resize_data_in_mega_bytes;
    bool m_total_resize_data_in_mega_bytes_isSet;
    bool m_total_resize_data_in_mega_bytes_isValid;

    qint32 m_progress_in_mega_bytes;
    bool m_progress_in_mega_bytes_isSet;
    bool m_progress_in_mega_bytes_isValid;

    qint32 m_elapsed_time_in_seconds;
    bool m_elapsed_time_in_seconds_isSet;
    bool m_elapsed_time_in_seconds_isValid;

    qint32 m_estimated_time_to_completion_in_seconds;
    bool m_estimated_time_to_completion_in_seconds_isSet;
    bool m_estimated_time_to_completion_in_seconds_isValid;

    QString m_resize_type;
    bool m_resize_type_isSet;
    bool m_resize_type_isValid;

    QString m_message;
    bool m_message_isSet;
    bool m_message_isValid;

    QString m_target_encryption_type;
    bool m_target_encryption_type_isSet;
    bool m_target_encryption_type_isValid;

    double m_data_transfer_progress_percent;
    bool m_data_transfer_progress_percent_isSet;
    bool m_data_transfer_progress_percent_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIResizeProgressMessage)

#endif // OAIResizeProgressMessage_H
