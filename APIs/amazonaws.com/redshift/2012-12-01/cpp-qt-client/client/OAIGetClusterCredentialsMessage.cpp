/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetClusterCredentialsMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetClusterCredentialsMessage::OAIGetClusterCredentialsMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetClusterCredentialsMessage::OAIGetClusterCredentialsMessage() {
    this->initializeModel();
}

OAIGetClusterCredentialsMessage::~OAIGetClusterCredentialsMessage() {}

void OAIGetClusterCredentialsMessage::initializeModel() {

    m_db_user_isSet = false;
    m_db_user_isValid = false;

    m_db_name_isSet = false;
    m_db_name_isValid = false;

    m_cluster_identifier_isSet = false;
    m_cluster_identifier_isValid = false;

    m_duration_seconds_isSet = false;
    m_duration_seconds_isValid = false;

    m_auto_create_isSet = false;
    m_auto_create_isValid = false;

    m_db_groups_isSet = false;
    m_db_groups_isValid = false;

    m_custom_domain_name_isSet = false;
    m_custom_domain_name_isValid = false;
}

void OAIGetClusterCredentialsMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetClusterCredentialsMessage::fromJsonObject(QJsonObject json) {

    m_db_user_isValid = ::OpenAPI::fromJsonValue(m_db_user, json[QString("DbUser")]);
    m_db_user_isSet = !json[QString("DbUser")].isNull() && m_db_user_isValid;

    m_db_name_isValid = ::OpenAPI::fromJsonValue(m_db_name, json[QString("DbName")]);
    m_db_name_isSet = !json[QString("DbName")].isNull() && m_db_name_isValid;

    m_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_cluster_identifier, json[QString("ClusterIdentifier")]);
    m_cluster_identifier_isSet = !json[QString("ClusterIdentifier")].isNull() && m_cluster_identifier_isValid;

    m_duration_seconds_isValid = ::OpenAPI::fromJsonValue(m_duration_seconds, json[QString("DurationSeconds")]);
    m_duration_seconds_isSet = !json[QString("DurationSeconds")].isNull() && m_duration_seconds_isValid;

    m_auto_create_isValid = ::OpenAPI::fromJsonValue(m_auto_create, json[QString("AutoCreate")]);
    m_auto_create_isSet = !json[QString("AutoCreate")].isNull() && m_auto_create_isValid;

    m_db_groups_isValid = ::OpenAPI::fromJsonValue(m_db_groups, json[QString("DbGroups")]);
    m_db_groups_isSet = !json[QString("DbGroups")].isNull() && m_db_groups_isValid;

    m_custom_domain_name_isValid = ::OpenAPI::fromJsonValue(m_custom_domain_name, json[QString("CustomDomainName")]);
    m_custom_domain_name_isSet = !json[QString("CustomDomainName")].isNull() && m_custom_domain_name_isValid;
}

QString OAIGetClusterCredentialsMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetClusterCredentialsMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_db_user_isSet) {
        obj.insert(QString("DbUser"), ::OpenAPI::toJsonValue(m_db_user));
    }
    if (m_db_name_isSet) {
        obj.insert(QString("DbName"), ::OpenAPI::toJsonValue(m_db_name));
    }
    if (m_cluster_identifier_isSet) {
        obj.insert(QString("ClusterIdentifier"), ::OpenAPI::toJsonValue(m_cluster_identifier));
    }
    if (m_duration_seconds_isSet) {
        obj.insert(QString("DurationSeconds"), ::OpenAPI::toJsonValue(m_duration_seconds));
    }
    if (m_auto_create_isSet) {
        obj.insert(QString("AutoCreate"), ::OpenAPI::toJsonValue(m_auto_create));
    }
    if (m_db_groups.isSet()) {
        obj.insert(QString("DbGroups"), ::OpenAPI::toJsonValue(m_db_groups));
    }
    if (m_custom_domain_name_isSet) {
        obj.insert(QString("CustomDomainName"), ::OpenAPI::toJsonValue(m_custom_domain_name));
    }
    return obj;
}

QString OAIGetClusterCredentialsMessage::getDbUser() const {
    return m_db_user;
}
void OAIGetClusterCredentialsMessage::setDbUser(const QString &db_user) {
    m_db_user = db_user;
    m_db_user_isSet = true;
}

bool OAIGetClusterCredentialsMessage::is_db_user_Set() const{
    return m_db_user_isSet;
}

bool OAIGetClusterCredentialsMessage::is_db_user_Valid() const{
    return m_db_user_isValid;
}

QString OAIGetClusterCredentialsMessage::getDbName() const {
    return m_db_name;
}
void OAIGetClusterCredentialsMessage::setDbName(const QString &db_name) {
    m_db_name = db_name;
    m_db_name_isSet = true;
}

bool OAIGetClusterCredentialsMessage::is_db_name_Set() const{
    return m_db_name_isSet;
}

bool OAIGetClusterCredentialsMessage::is_db_name_Valid() const{
    return m_db_name_isValid;
}

QString OAIGetClusterCredentialsMessage::getClusterIdentifier() const {
    return m_cluster_identifier;
}
void OAIGetClusterCredentialsMessage::setClusterIdentifier(const QString &cluster_identifier) {
    m_cluster_identifier = cluster_identifier;
    m_cluster_identifier_isSet = true;
}

bool OAIGetClusterCredentialsMessage::is_cluster_identifier_Set() const{
    return m_cluster_identifier_isSet;
}

bool OAIGetClusterCredentialsMessage::is_cluster_identifier_Valid() const{
    return m_cluster_identifier_isValid;
}

qint32 OAIGetClusterCredentialsMessage::getDurationSeconds() const {
    return m_duration_seconds;
}
void OAIGetClusterCredentialsMessage::setDurationSeconds(const qint32 &duration_seconds) {
    m_duration_seconds = duration_seconds;
    m_duration_seconds_isSet = true;
}

bool OAIGetClusterCredentialsMessage::is_duration_seconds_Set() const{
    return m_duration_seconds_isSet;
}

bool OAIGetClusterCredentialsMessage::is_duration_seconds_Valid() const{
    return m_duration_seconds_isValid;
}

bool OAIGetClusterCredentialsMessage::getAutoCreate() const {
    return m_auto_create;
}
void OAIGetClusterCredentialsMessage::setAutoCreate(const bool &auto_create) {
    m_auto_create = auto_create;
    m_auto_create_isSet = true;
}

bool OAIGetClusterCredentialsMessage::is_auto_create_Set() const{
    return m_auto_create_isSet;
}

bool OAIGetClusterCredentialsMessage::is_auto_create_Valid() const{
    return m_auto_create_isValid;
}

QList OAIGetClusterCredentialsMessage::getDbGroups() const {
    return m_db_groups;
}
void OAIGetClusterCredentialsMessage::setDbGroups(const QList &db_groups) {
    m_db_groups = db_groups;
    m_db_groups_isSet = true;
}

bool OAIGetClusterCredentialsMessage::is_db_groups_Set() const{
    return m_db_groups_isSet;
}

bool OAIGetClusterCredentialsMessage::is_db_groups_Valid() const{
    return m_db_groups_isValid;
}

QString OAIGetClusterCredentialsMessage::getCustomDomainName() const {
    return m_custom_domain_name;
}
void OAIGetClusterCredentialsMessage::setCustomDomainName(const QString &custom_domain_name) {
    m_custom_domain_name = custom_domain_name;
    m_custom_domain_name_isSet = true;
}

bool OAIGetClusterCredentialsMessage::is_custom_domain_name_Set() const{
    return m_custom_domain_name_isSet;
}

bool OAIGetClusterCredentialsMessage::is_custom_domain_name_Valid() const{
    return m_custom_domain_name_isValid;
}

bool OAIGetClusterCredentialsMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_db_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_create_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetClusterCredentialsMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_db_user_isValid && true;
}

} // namespace OpenAPI
