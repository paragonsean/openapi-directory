/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModifyEventSubscriptionMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModifyEventSubscriptionMessage::OAIModifyEventSubscriptionMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModifyEventSubscriptionMessage::OAIModifyEventSubscriptionMessage() {
    this->initializeModel();
}

OAIModifyEventSubscriptionMessage::~OAIModifyEventSubscriptionMessage() {}

void OAIModifyEventSubscriptionMessage::initializeModel() {

    m_subscription_name_isSet = false;
    m_subscription_name_isValid = false;

    m_sns_topic_arn_isSet = false;
    m_sns_topic_arn_isValid = false;

    m_source_type_isSet = false;
    m_source_type_isValid = false;

    m_source_ids_isSet = false;
    m_source_ids_isValid = false;

    m_event_categories_isSet = false;
    m_event_categories_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;
}

void OAIModifyEventSubscriptionMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModifyEventSubscriptionMessage::fromJsonObject(QJsonObject json) {

    m_subscription_name_isValid = ::OpenAPI::fromJsonValue(m_subscription_name, json[QString("SubscriptionName")]);
    m_subscription_name_isSet = !json[QString("SubscriptionName")].isNull() && m_subscription_name_isValid;

    m_sns_topic_arn_isValid = ::OpenAPI::fromJsonValue(m_sns_topic_arn, json[QString("SnsTopicArn")]);
    m_sns_topic_arn_isSet = !json[QString("SnsTopicArn")].isNull() && m_sns_topic_arn_isValid;

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("SourceType")]);
    m_source_type_isSet = !json[QString("SourceType")].isNull() && m_source_type_isValid;

    m_source_ids_isValid = ::OpenAPI::fromJsonValue(m_source_ids, json[QString("SourceIds")]);
    m_source_ids_isSet = !json[QString("SourceIds")].isNull() && m_source_ids_isValid;

    m_event_categories_isValid = ::OpenAPI::fromJsonValue(m_event_categories, json[QString("EventCategories")]);
    m_event_categories_isSet = !json[QString("EventCategories")].isNull() && m_event_categories_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("Severity")]);
    m_severity_isSet = !json[QString("Severity")].isNull() && m_severity_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("Enabled")]);
    m_enabled_isSet = !json[QString("Enabled")].isNull() && m_enabled_isValid;
}

QString OAIModifyEventSubscriptionMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModifyEventSubscriptionMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_subscription_name_isSet) {
        obj.insert(QString("SubscriptionName"), ::OpenAPI::toJsonValue(m_subscription_name));
    }
    if (m_sns_topic_arn_isSet) {
        obj.insert(QString("SnsTopicArn"), ::OpenAPI::toJsonValue(m_sns_topic_arn));
    }
    if (m_source_type_isSet) {
        obj.insert(QString("SourceType"), ::OpenAPI::toJsonValue(m_source_type));
    }
    if (m_source_ids.isSet()) {
        obj.insert(QString("SourceIds"), ::OpenAPI::toJsonValue(m_source_ids));
    }
    if (m_event_categories.isSet()) {
        obj.insert(QString("EventCategories"), ::OpenAPI::toJsonValue(m_event_categories));
    }
    if (m_severity_isSet) {
        obj.insert(QString("Severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("Enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    return obj;
}

QString OAIModifyEventSubscriptionMessage::getSubscriptionName() const {
    return m_subscription_name;
}
void OAIModifyEventSubscriptionMessage::setSubscriptionName(const QString &subscription_name) {
    m_subscription_name = subscription_name;
    m_subscription_name_isSet = true;
}

bool OAIModifyEventSubscriptionMessage::is_subscription_name_Set() const{
    return m_subscription_name_isSet;
}

bool OAIModifyEventSubscriptionMessage::is_subscription_name_Valid() const{
    return m_subscription_name_isValid;
}

QString OAIModifyEventSubscriptionMessage::getSnsTopicArn() const {
    return m_sns_topic_arn;
}
void OAIModifyEventSubscriptionMessage::setSnsTopicArn(const QString &sns_topic_arn) {
    m_sns_topic_arn = sns_topic_arn;
    m_sns_topic_arn_isSet = true;
}

bool OAIModifyEventSubscriptionMessage::is_sns_topic_arn_Set() const{
    return m_sns_topic_arn_isSet;
}

bool OAIModifyEventSubscriptionMessage::is_sns_topic_arn_Valid() const{
    return m_sns_topic_arn_isValid;
}

QString OAIModifyEventSubscriptionMessage::getSourceType() const {
    return m_source_type;
}
void OAIModifyEventSubscriptionMessage::setSourceType(const QString &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAIModifyEventSubscriptionMessage::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAIModifyEventSubscriptionMessage::is_source_type_Valid() const{
    return m_source_type_isValid;
}

QList OAIModifyEventSubscriptionMessage::getSourceIds() const {
    return m_source_ids;
}
void OAIModifyEventSubscriptionMessage::setSourceIds(const QList &source_ids) {
    m_source_ids = source_ids;
    m_source_ids_isSet = true;
}

bool OAIModifyEventSubscriptionMessage::is_source_ids_Set() const{
    return m_source_ids_isSet;
}

bool OAIModifyEventSubscriptionMessage::is_source_ids_Valid() const{
    return m_source_ids_isValid;
}

QList OAIModifyEventSubscriptionMessage::getEventCategories() const {
    return m_event_categories;
}
void OAIModifyEventSubscriptionMessage::setEventCategories(const QList &event_categories) {
    m_event_categories = event_categories;
    m_event_categories_isSet = true;
}

bool OAIModifyEventSubscriptionMessage::is_event_categories_Set() const{
    return m_event_categories_isSet;
}

bool OAIModifyEventSubscriptionMessage::is_event_categories_Valid() const{
    return m_event_categories_isValid;
}

QString OAIModifyEventSubscriptionMessage::getSeverity() const {
    return m_severity;
}
void OAIModifyEventSubscriptionMessage::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIModifyEventSubscriptionMessage::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIModifyEventSubscriptionMessage::is_severity_Valid() const{
    return m_severity_isValid;
}

bool OAIModifyEventSubscriptionMessage::getEnabled() const {
    return m_enabled;
}
void OAIModifyEventSubscriptionMessage::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIModifyEventSubscriptionMessage::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIModifyEventSubscriptionMessage::is_enabled_Valid() const{
    return m_enabled_isValid;
}

bool OAIModifyEventSubscriptionMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_subscription_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sns_topic_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_categories.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModifyEventSubscriptionMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_subscription_name_isValid && true;
}

} // namespace OpenAPI
