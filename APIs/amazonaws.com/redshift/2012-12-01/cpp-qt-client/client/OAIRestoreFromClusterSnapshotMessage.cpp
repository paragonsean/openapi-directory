/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestoreFromClusterSnapshotMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestoreFromClusterSnapshotMessage::OAIRestoreFromClusterSnapshotMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestoreFromClusterSnapshotMessage::OAIRestoreFromClusterSnapshotMessage() {
    this->initializeModel();
}

OAIRestoreFromClusterSnapshotMessage::~OAIRestoreFromClusterSnapshotMessage() {}

void OAIRestoreFromClusterSnapshotMessage::initializeModel() {

    m_cluster_identifier_isSet = false;
    m_cluster_identifier_isValid = false;

    m_snapshot_identifier_isSet = false;
    m_snapshot_identifier_isValid = false;

    m_snapshot_arn_isSet = false;
    m_snapshot_arn_isValid = false;

    m_snapshot_cluster_identifier_isSet = false;
    m_snapshot_cluster_identifier_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_availability_zone_isSet = false;
    m_availability_zone_isValid = false;

    m_allow_version_upgrade_isSet = false;
    m_allow_version_upgrade_isValid = false;

    m_cluster_subnet_group_name_isSet = false;
    m_cluster_subnet_group_name_isValid = false;

    m_publicly_accessible_isSet = false;
    m_publicly_accessible_isValid = false;

    m_owner_account_isSet = false;
    m_owner_account_isValid = false;

    m_hsm_client_certificate_identifier_isSet = false;
    m_hsm_client_certificate_identifier_isValid = false;

    m_hsm_configuration_identifier_isSet = false;
    m_hsm_configuration_identifier_isValid = false;

    m_elastic_ip_isSet = false;
    m_elastic_ip_isValid = false;

    m_cluster_parameter_group_name_isSet = false;
    m_cluster_parameter_group_name_isValid = false;

    m_cluster_security_groups_isSet = false;
    m_cluster_security_groups_isValid = false;

    m_vpc_security_group_ids_isSet = false;
    m_vpc_security_group_ids_isValid = false;

    m_preferred_maintenance_window_isSet = false;
    m_preferred_maintenance_window_isValid = false;

    m_automated_snapshot_retention_period_isSet = false;
    m_automated_snapshot_retention_period_isValid = false;

    m_manual_snapshot_retention_period_isSet = false;
    m_manual_snapshot_retention_period_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_node_type_isSet = false;
    m_node_type_isValid = false;

    m_enhanced_vpc_routing_isSet = false;
    m_enhanced_vpc_routing_isValid = false;

    m_additional_info_isSet = false;
    m_additional_info_isValid = false;

    m_iam_roles_isSet = false;
    m_iam_roles_isValid = false;

    m_maintenance_track_name_isSet = false;
    m_maintenance_track_name_isValid = false;

    m_snapshot_schedule_identifier_isSet = false;
    m_snapshot_schedule_identifier_isValid = false;

    m_number_of_nodes_isSet = false;
    m_number_of_nodes_isValid = false;

    m_availability_zone_relocation_isSet = false;
    m_availability_zone_relocation_isValid = false;

    m_aqua_configuration_status_isSet = false;
    m_aqua_configuration_status_isValid = false;

    m_default_iam_role_arn_isSet = false;
    m_default_iam_role_arn_isValid = false;

    m_reserved_node_id_isSet = false;
    m_reserved_node_id_isValid = false;

    m_target_reserved_node_offering_id_isSet = false;
    m_target_reserved_node_offering_id_isValid = false;

    m_encrypted_isSet = false;
    m_encrypted_isValid = false;
}

void OAIRestoreFromClusterSnapshotMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestoreFromClusterSnapshotMessage::fromJsonObject(QJsonObject json) {

    m_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_cluster_identifier, json[QString("ClusterIdentifier")]);
    m_cluster_identifier_isSet = !json[QString("ClusterIdentifier")].isNull() && m_cluster_identifier_isValid;

    m_snapshot_identifier_isValid = ::OpenAPI::fromJsonValue(m_snapshot_identifier, json[QString("SnapshotIdentifier")]);
    m_snapshot_identifier_isSet = !json[QString("SnapshotIdentifier")].isNull() && m_snapshot_identifier_isValid;

    m_snapshot_arn_isValid = ::OpenAPI::fromJsonValue(m_snapshot_arn, json[QString("SnapshotArn")]);
    m_snapshot_arn_isSet = !json[QString("SnapshotArn")].isNull() && m_snapshot_arn_isValid;

    m_snapshot_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_snapshot_cluster_identifier, json[QString("SnapshotClusterIdentifier")]);
    m_snapshot_cluster_identifier_isSet = !json[QString("SnapshotClusterIdentifier")].isNull() && m_snapshot_cluster_identifier_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("Port")]);
    m_port_isSet = !json[QString("Port")].isNull() && m_port_isValid;

    m_availability_zone_isValid = ::OpenAPI::fromJsonValue(m_availability_zone, json[QString("AvailabilityZone")]);
    m_availability_zone_isSet = !json[QString("AvailabilityZone")].isNull() && m_availability_zone_isValid;

    m_allow_version_upgrade_isValid = ::OpenAPI::fromJsonValue(m_allow_version_upgrade, json[QString("AllowVersionUpgrade")]);
    m_allow_version_upgrade_isSet = !json[QString("AllowVersionUpgrade")].isNull() && m_allow_version_upgrade_isValid;

    m_cluster_subnet_group_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_subnet_group_name, json[QString("ClusterSubnetGroupName")]);
    m_cluster_subnet_group_name_isSet = !json[QString("ClusterSubnetGroupName")].isNull() && m_cluster_subnet_group_name_isValid;

    m_publicly_accessible_isValid = ::OpenAPI::fromJsonValue(m_publicly_accessible, json[QString("PubliclyAccessible")]);
    m_publicly_accessible_isSet = !json[QString("PubliclyAccessible")].isNull() && m_publicly_accessible_isValid;

    m_owner_account_isValid = ::OpenAPI::fromJsonValue(m_owner_account, json[QString("OwnerAccount")]);
    m_owner_account_isSet = !json[QString("OwnerAccount")].isNull() && m_owner_account_isValid;

    m_hsm_client_certificate_identifier_isValid = ::OpenAPI::fromJsonValue(m_hsm_client_certificate_identifier, json[QString("HsmClientCertificateIdentifier")]);
    m_hsm_client_certificate_identifier_isSet = !json[QString("HsmClientCertificateIdentifier")].isNull() && m_hsm_client_certificate_identifier_isValid;

    m_hsm_configuration_identifier_isValid = ::OpenAPI::fromJsonValue(m_hsm_configuration_identifier, json[QString("HsmConfigurationIdentifier")]);
    m_hsm_configuration_identifier_isSet = !json[QString("HsmConfigurationIdentifier")].isNull() && m_hsm_configuration_identifier_isValid;

    m_elastic_ip_isValid = ::OpenAPI::fromJsonValue(m_elastic_ip, json[QString("ElasticIp")]);
    m_elastic_ip_isSet = !json[QString("ElasticIp")].isNull() && m_elastic_ip_isValid;

    m_cluster_parameter_group_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_parameter_group_name, json[QString("ClusterParameterGroupName")]);
    m_cluster_parameter_group_name_isSet = !json[QString("ClusterParameterGroupName")].isNull() && m_cluster_parameter_group_name_isValid;

    m_cluster_security_groups_isValid = ::OpenAPI::fromJsonValue(m_cluster_security_groups, json[QString("ClusterSecurityGroups")]);
    m_cluster_security_groups_isSet = !json[QString("ClusterSecurityGroups")].isNull() && m_cluster_security_groups_isValid;

    m_vpc_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_vpc_security_group_ids, json[QString("VpcSecurityGroupIds")]);
    m_vpc_security_group_ids_isSet = !json[QString("VpcSecurityGroupIds")].isNull() && m_vpc_security_group_ids_isValid;

    m_preferred_maintenance_window_isValid = ::OpenAPI::fromJsonValue(m_preferred_maintenance_window, json[QString("PreferredMaintenanceWindow")]);
    m_preferred_maintenance_window_isSet = !json[QString("PreferredMaintenanceWindow")].isNull() && m_preferred_maintenance_window_isValid;

    m_automated_snapshot_retention_period_isValid = ::OpenAPI::fromJsonValue(m_automated_snapshot_retention_period, json[QString("AutomatedSnapshotRetentionPeriod")]);
    m_automated_snapshot_retention_period_isSet = !json[QString("AutomatedSnapshotRetentionPeriod")].isNull() && m_automated_snapshot_retention_period_isValid;

    m_manual_snapshot_retention_period_isValid = ::OpenAPI::fromJsonValue(m_manual_snapshot_retention_period, json[QString("ManualSnapshotRetentionPeriod")]);
    m_manual_snapshot_retention_period_isSet = !json[QString("ManualSnapshotRetentionPeriod")].isNull() && m_manual_snapshot_retention_period_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_node_type_isValid = ::OpenAPI::fromJsonValue(m_node_type, json[QString("NodeType")]);
    m_node_type_isSet = !json[QString("NodeType")].isNull() && m_node_type_isValid;

    m_enhanced_vpc_routing_isValid = ::OpenAPI::fromJsonValue(m_enhanced_vpc_routing, json[QString("EnhancedVpcRouting")]);
    m_enhanced_vpc_routing_isSet = !json[QString("EnhancedVpcRouting")].isNull() && m_enhanced_vpc_routing_isValid;

    m_additional_info_isValid = ::OpenAPI::fromJsonValue(m_additional_info, json[QString("AdditionalInfo")]);
    m_additional_info_isSet = !json[QString("AdditionalInfo")].isNull() && m_additional_info_isValid;

    m_iam_roles_isValid = ::OpenAPI::fromJsonValue(m_iam_roles, json[QString("IamRoles")]);
    m_iam_roles_isSet = !json[QString("IamRoles")].isNull() && m_iam_roles_isValid;

    m_maintenance_track_name_isValid = ::OpenAPI::fromJsonValue(m_maintenance_track_name, json[QString("MaintenanceTrackName")]);
    m_maintenance_track_name_isSet = !json[QString("MaintenanceTrackName")].isNull() && m_maintenance_track_name_isValid;

    m_snapshot_schedule_identifier_isValid = ::OpenAPI::fromJsonValue(m_snapshot_schedule_identifier, json[QString("SnapshotScheduleIdentifier")]);
    m_snapshot_schedule_identifier_isSet = !json[QString("SnapshotScheduleIdentifier")].isNull() && m_snapshot_schedule_identifier_isValid;

    m_number_of_nodes_isValid = ::OpenAPI::fromJsonValue(m_number_of_nodes, json[QString("NumberOfNodes")]);
    m_number_of_nodes_isSet = !json[QString("NumberOfNodes")].isNull() && m_number_of_nodes_isValid;

    m_availability_zone_relocation_isValid = ::OpenAPI::fromJsonValue(m_availability_zone_relocation, json[QString("AvailabilityZoneRelocation")]);
    m_availability_zone_relocation_isSet = !json[QString("AvailabilityZoneRelocation")].isNull() && m_availability_zone_relocation_isValid;

    m_aqua_configuration_status_isValid = ::OpenAPI::fromJsonValue(m_aqua_configuration_status, json[QString("AquaConfigurationStatus")]);
    m_aqua_configuration_status_isSet = !json[QString("AquaConfigurationStatus")].isNull() && m_aqua_configuration_status_isValid;

    m_default_iam_role_arn_isValid = ::OpenAPI::fromJsonValue(m_default_iam_role_arn, json[QString("DefaultIamRoleArn")]);
    m_default_iam_role_arn_isSet = !json[QString("DefaultIamRoleArn")].isNull() && m_default_iam_role_arn_isValid;

    m_reserved_node_id_isValid = ::OpenAPI::fromJsonValue(m_reserved_node_id, json[QString("ReservedNodeId")]);
    m_reserved_node_id_isSet = !json[QString("ReservedNodeId")].isNull() && m_reserved_node_id_isValid;

    m_target_reserved_node_offering_id_isValid = ::OpenAPI::fromJsonValue(m_target_reserved_node_offering_id, json[QString("TargetReservedNodeOfferingId")]);
    m_target_reserved_node_offering_id_isSet = !json[QString("TargetReservedNodeOfferingId")].isNull() && m_target_reserved_node_offering_id_isValid;

    m_encrypted_isValid = ::OpenAPI::fromJsonValue(m_encrypted, json[QString("Encrypted")]);
    m_encrypted_isSet = !json[QString("Encrypted")].isNull() && m_encrypted_isValid;
}

QString OAIRestoreFromClusterSnapshotMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestoreFromClusterSnapshotMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_identifier_isSet) {
        obj.insert(QString("ClusterIdentifier"), ::OpenAPI::toJsonValue(m_cluster_identifier));
    }
    if (m_snapshot_identifier_isSet) {
        obj.insert(QString("SnapshotIdentifier"), ::OpenAPI::toJsonValue(m_snapshot_identifier));
    }
    if (m_snapshot_arn_isSet) {
        obj.insert(QString("SnapshotArn"), ::OpenAPI::toJsonValue(m_snapshot_arn));
    }
    if (m_snapshot_cluster_identifier_isSet) {
        obj.insert(QString("SnapshotClusterIdentifier"), ::OpenAPI::toJsonValue(m_snapshot_cluster_identifier));
    }
    if (m_port_isSet) {
        obj.insert(QString("Port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_availability_zone_isSet) {
        obj.insert(QString("AvailabilityZone"), ::OpenAPI::toJsonValue(m_availability_zone));
    }
    if (m_allow_version_upgrade_isSet) {
        obj.insert(QString("AllowVersionUpgrade"), ::OpenAPI::toJsonValue(m_allow_version_upgrade));
    }
    if (m_cluster_subnet_group_name_isSet) {
        obj.insert(QString("ClusterSubnetGroupName"), ::OpenAPI::toJsonValue(m_cluster_subnet_group_name));
    }
    if (m_publicly_accessible_isSet) {
        obj.insert(QString("PubliclyAccessible"), ::OpenAPI::toJsonValue(m_publicly_accessible));
    }
    if (m_owner_account_isSet) {
        obj.insert(QString("OwnerAccount"), ::OpenAPI::toJsonValue(m_owner_account));
    }
    if (m_hsm_client_certificate_identifier_isSet) {
        obj.insert(QString("HsmClientCertificateIdentifier"), ::OpenAPI::toJsonValue(m_hsm_client_certificate_identifier));
    }
    if (m_hsm_configuration_identifier_isSet) {
        obj.insert(QString("HsmConfigurationIdentifier"), ::OpenAPI::toJsonValue(m_hsm_configuration_identifier));
    }
    if (m_elastic_ip_isSet) {
        obj.insert(QString("ElasticIp"), ::OpenAPI::toJsonValue(m_elastic_ip));
    }
    if (m_cluster_parameter_group_name_isSet) {
        obj.insert(QString("ClusterParameterGroupName"), ::OpenAPI::toJsonValue(m_cluster_parameter_group_name));
    }
    if (m_cluster_security_groups.isSet()) {
        obj.insert(QString("ClusterSecurityGroups"), ::OpenAPI::toJsonValue(m_cluster_security_groups));
    }
    if (m_vpc_security_group_ids.isSet()) {
        obj.insert(QString("VpcSecurityGroupIds"), ::OpenAPI::toJsonValue(m_vpc_security_group_ids));
    }
    if (m_preferred_maintenance_window_isSet) {
        obj.insert(QString("PreferredMaintenanceWindow"), ::OpenAPI::toJsonValue(m_preferred_maintenance_window));
    }
    if (m_automated_snapshot_retention_period_isSet) {
        obj.insert(QString("AutomatedSnapshotRetentionPeriod"), ::OpenAPI::toJsonValue(m_automated_snapshot_retention_period));
    }
    if (m_manual_snapshot_retention_period_isSet) {
        obj.insert(QString("ManualSnapshotRetentionPeriod"), ::OpenAPI::toJsonValue(m_manual_snapshot_retention_period));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_node_type_isSet) {
        obj.insert(QString("NodeType"), ::OpenAPI::toJsonValue(m_node_type));
    }
    if (m_enhanced_vpc_routing_isSet) {
        obj.insert(QString("EnhancedVpcRouting"), ::OpenAPI::toJsonValue(m_enhanced_vpc_routing));
    }
    if (m_additional_info_isSet) {
        obj.insert(QString("AdditionalInfo"), ::OpenAPI::toJsonValue(m_additional_info));
    }
    if (m_iam_roles.isSet()) {
        obj.insert(QString("IamRoles"), ::OpenAPI::toJsonValue(m_iam_roles));
    }
    if (m_maintenance_track_name_isSet) {
        obj.insert(QString("MaintenanceTrackName"), ::OpenAPI::toJsonValue(m_maintenance_track_name));
    }
    if (m_snapshot_schedule_identifier_isSet) {
        obj.insert(QString("SnapshotScheduleIdentifier"), ::OpenAPI::toJsonValue(m_snapshot_schedule_identifier));
    }
    if (m_number_of_nodes_isSet) {
        obj.insert(QString("NumberOfNodes"), ::OpenAPI::toJsonValue(m_number_of_nodes));
    }
    if (m_availability_zone_relocation_isSet) {
        obj.insert(QString("AvailabilityZoneRelocation"), ::OpenAPI::toJsonValue(m_availability_zone_relocation));
    }
    if (m_aqua_configuration_status.isSet()) {
        obj.insert(QString("AquaConfigurationStatus"), ::OpenAPI::toJsonValue(m_aqua_configuration_status));
    }
    if (m_default_iam_role_arn_isSet) {
        obj.insert(QString("DefaultIamRoleArn"), ::OpenAPI::toJsonValue(m_default_iam_role_arn));
    }
    if (m_reserved_node_id_isSet) {
        obj.insert(QString("ReservedNodeId"), ::OpenAPI::toJsonValue(m_reserved_node_id));
    }
    if (m_target_reserved_node_offering_id_isSet) {
        obj.insert(QString("TargetReservedNodeOfferingId"), ::OpenAPI::toJsonValue(m_target_reserved_node_offering_id));
    }
    if (m_encrypted_isSet) {
        obj.insert(QString("Encrypted"), ::OpenAPI::toJsonValue(m_encrypted));
    }
    return obj;
}

QString OAIRestoreFromClusterSnapshotMessage::getClusterIdentifier() const {
    return m_cluster_identifier;
}
void OAIRestoreFromClusterSnapshotMessage::setClusterIdentifier(const QString &cluster_identifier) {
    m_cluster_identifier = cluster_identifier;
    m_cluster_identifier_isSet = true;
}

bool OAIRestoreFromClusterSnapshotMessage::is_cluster_identifier_Set() const{
    return m_cluster_identifier_isSet;
}

bool OAIRestoreFromClusterSnapshotMessage::is_cluster_identifier_Valid() const{
    return m_cluster_identifier_isValid;
}

QString OAIRestoreFromClusterSnapshotMessage::getSnapshotIdentifier() const {
    return m_snapshot_identifier;
}
void OAIRestoreFromClusterSnapshotMessage::setSnapshotIdentifier(const QString &snapshot_identifier) {
    m_snapshot_identifier = snapshot_identifier;
    m_snapshot_identifier_isSet = true;
}

bool OAIRestoreFromClusterSnapshotMessage::is_snapshot_identifier_Set() const{
    return m_snapshot_identifier_isSet;
}

bool OAIRestoreFromClusterSnapshotMessage::is_snapshot_identifier_Valid() const{
    return m_snapshot_identifier_isValid;
}

QString OAIRestoreFromClusterSnapshotMessage::getSnapshotArn() const {
    return m_snapshot_arn;
}
void OAIRestoreFromClusterSnapshotMessage::setSnapshotArn(const QString &snapshot_arn) {
    m_snapshot_arn = snapshot_arn;
    m_snapshot_arn_isSet = true;
}

bool OAIRestoreFromClusterSnapshotMessage::is_snapshot_arn_Set() const{
    return m_snapshot_arn_isSet;
}

bool OAIRestoreFromClusterSnapshotMessage::is_snapshot_arn_Valid() const{
    return m_snapshot_arn_isValid;
}

QString OAIRestoreFromClusterSnapshotMessage::getSnapshotClusterIdentifier() const {
    return m_snapshot_cluster_identifier;
}
void OAIRestoreFromClusterSnapshotMessage::setSnapshotClusterIdentifier(const QString &snapshot_cluster_identifier) {
    m_snapshot_cluster_identifier = snapshot_cluster_identifier;
    m_snapshot_cluster_identifier_isSet = true;
}

bool OAIRestoreFromClusterSnapshotMessage::is_snapshot_cluster_identifier_Set() const{
    return m_snapshot_cluster_identifier_isSet;
}

bool OAIRestoreFromClusterSnapshotMessage::is_snapshot_cluster_identifier_Valid() const{
    return m_snapshot_cluster_identifier_isValid;
}

qint32 OAIRestoreFromClusterSnapshotMessage::getPort() const {
    return m_port;
}
void OAIRestoreFromClusterSnapshotMessage::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIRestoreFromClusterSnapshotMessage::is_port_Set() const{
    return m_port_isSet;
}

bool OAIRestoreFromClusterSnapshotMessage::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIRestoreFromClusterSnapshotMessage::getAvailabilityZone() const {
    return m_availability_zone;
}
void OAIRestoreFromClusterSnapshotMessage::setAvailabilityZone(const QString &availability_zone) {
    m_availability_zone = availability_zone;
    m_availability_zone_isSet = true;
}

bool OAIRestoreFromClusterSnapshotMessage::is_availability_zone_Set() const{
    return m_availability_zone_isSet;
}

bool OAIRestoreFromClusterSnapshotMessage::is_availability_zone_Valid() const{
    return m_availability_zone_isValid;
}

bool OAIRestoreFromClusterSnapshotMessage::getAllowVersionUpgrade() const {
    return m_allow_version_upgrade;
}
void OAIRestoreFromClusterSnapshotMessage::setAllowVersionUpgrade(const bool &allow_version_upgrade) {
    m_allow_version_upgrade = allow_version_upgrade;
    m_allow_version_upgrade_isSet = true;
}

bool OAIRestoreFromClusterSnapshotMessage::is_allow_version_upgrade_Set() const{
    return m_allow_version_upgrade_isSet;
}

bool OAIRestoreFromClusterSnapshotMessage::is_allow_version_upgrade_Valid() const{
    return m_allow_version_upgrade_isValid;
}

QString OAIRestoreFromClusterSnapshotMessage::getClusterSubnetGroupName() const {
    return m_cluster_subnet_group_name;
}
void OAIRestoreFromClusterSnapshotMessage::setClusterSubnetGroupName(const QString &cluster_subnet_group_name) {
    m_cluster_subnet_group_name = cluster_subnet_group_name;
    m_cluster_subnet_group_name_isSet = true;
}

bool OAIRestoreFromClusterSnapshotMessage::is_cluster_subnet_group_name_Set() const{
    return m_cluster_subnet_group_name_isSet;
}

bool OAIRestoreFromClusterSnapshotMessage::is_cluster_subnet_group_name_Valid() const{
    return m_cluster_subnet_group_name_isValid;
}

bool OAIRestoreFromClusterSnapshotMessage::getPubliclyAccessible() const {
    return m_publicly_accessible;
}
void OAIRestoreFromClusterSnapshotMessage::setPubliclyAccessible(const bool &publicly_accessible) {
    m_publicly_accessible = publicly_accessible;
    m_publicly_accessible_isSet = true;
}

bool OAIRestoreFromClusterSnapshotMessage::is_publicly_accessible_Set() const{
    return m_publicly_accessible_isSet;
}

bool OAIRestoreFromClusterSnapshotMessage::is_publicly_accessible_Valid() const{
    return m_publicly_accessible_isValid;
}

QString OAIRestoreFromClusterSnapshotMessage::getOwnerAccount() const {
    return m_owner_account;
}
void OAIRestoreFromClusterSnapshotMessage::setOwnerAccount(const QString &owner_account) {
    m_owner_account = owner_account;
    m_owner_account_isSet = true;
}

bool OAIRestoreFromClusterSnapshotMessage::is_owner_account_Set() const{
    return m_owner_account_isSet;
}

bool OAIRestoreFromClusterSnapshotMessage::is_owner_account_Valid() const{
    return m_owner_account_isValid;
}

QString OAIRestoreFromClusterSnapshotMessage::getHsmClientCertificateIdentifier() const {
    return m_hsm_client_certificate_identifier;
}
void OAIRestoreFromClusterSnapshotMessage::setHsmClientCertificateIdentifier(const QString &hsm_client_certificate_identifier) {
    m_hsm_client_certificate_identifier = hsm_client_certificate_identifier;
    m_hsm_client_certificate_identifier_isSet = true;
}

bool OAIRestoreFromClusterSnapshotMessage::is_hsm_client_certificate_identifier_Set() const{
    return m_hsm_client_certificate_identifier_isSet;
}

bool OAIRestoreFromClusterSnapshotMessage::is_hsm_client_certificate_identifier_Valid() const{
    return m_hsm_client_certificate_identifier_isValid;
}

QString OAIRestoreFromClusterSnapshotMessage::getHsmConfigurationIdentifier() const {
    return m_hsm_configuration_identifier;
}
void OAIRestoreFromClusterSnapshotMessage::setHsmConfigurationIdentifier(const QString &hsm_configuration_identifier) {
    m_hsm_configuration_identifier = hsm_configuration_identifier;
    m_hsm_configuration_identifier_isSet = true;
}

bool OAIRestoreFromClusterSnapshotMessage::is_hsm_configuration_identifier_Set() const{
    return m_hsm_configuration_identifier_isSet;
}

bool OAIRestoreFromClusterSnapshotMessage::is_hsm_configuration_identifier_Valid() const{
    return m_hsm_configuration_identifier_isValid;
}

QString OAIRestoreFromClusterSnapshotMessage::getElasticIp() const {
    return m_elastic_ip;
}
void OAIRestoreFromClusterSnapshotMessage::setElasticIp(const QString &elastic_ip) {
    m_elastic_ip = elastic_ip;
    m_elastic_ip_isSet = true;
}

bool OAIRestoreFromClusterSnapshotMessage::is_elastic_ip_Set() const{
    return m_elastic_ip_isSet;
}

bool OAIRestoreFromClusterSnapshotMessage::is_elastic_ip_Valid() const{
    return m_elastic_ip_isValid;
}

QString OAIRestoreFromClusterSnapshotMessage::getClusterParameterGroupName() const {
    return m_cluster_parameter_group_name;
}
void OAIRestoreFromClusterSnapshotMessage::setClusterParameterGroupName(const QString &cluster_parameter_group_name) {
    m_cluster_parameter_group_name = cluster_parameter_group_name;
    m_cluster_parameter_group_name_isSet = true;
}

bool OAIRestoreFromClusterSnapshotMessage::is_cluster_parameter_group_name_Set() const{
    return m_cluster_parameter_group_name_isSet;
}

bool OAIRestoreFromClusterSnapshotMessage::is_cluster_parameter_group_name_Valid() const{
    return m_cluster_parameter_group_name_isValid;
}

QList OAIRestoreFromClusterSnapshotMessage::getClusterSecurityGroups() const {
    return m_cluster_security_groups;
}
void OAIRestoreFromClusterSnapshotMessage::setClusterSecurityGroups(const QList &cluster_security_groups) {
    m_cluster_security_groups = cluster_security_groups;
    m_cluster_security_groups_isSet = true;
}

bool OAIRestoreFromClusterSnapshotMessage::is_cluster_security_groups_Set() const{
    return m_cluster_security_groups_isSet;
}

bool OAIRestoreFromClusterSnapshotMessage::is_cluster_security_groups_Valid() const{
    return m_cluster_security_groups_isValid;
}

QList OAIRestoreFromClusterSnapshotMessage::getVpcSecurityGroupIds() const {
    return m_vpc_security_group_ids;
}
void OAIRestoreFromClusterSnapshotMessage::setVpcSecurityGroupIds(const QList &vpc_security_group_ids) {
    m_vpc_security_group_ids = vpc_security_group_ids;
    m_vpc_security_group_ids_isSet = true;
}

bool OAIRestoreFromClusterSnapshotMessage::is_vpc_security_group_ids_Set() const{
    return m_vpc_security_group_ids_isSet;
}

bool OAIRestoreFromClusterSnapshotMessage::is_vpc_security_group_ids_Valid() const{
    return m_vpc_security_group_ids_isValid;
}

QString OAIRestoreFromClusterSnapshotMessage::getPreferredMaintenanceWindow() const {
    return m_preferred_maintenance_window;
}
void OAIRestoreFromClusterSnapshotMessage::setPreferredMaintenanceWindow(const QString &preferred_maintenance_window) {
    m_preferred_maintenance_window = preferred_maintenance_window;
    m_preferred_maintenance_window_isSet = true;
}

bool OAIRestoreFromClusterSnapshotMessage::is_preferred_maintenance_window_Set() const{
    return m_preferred_maintenance_window_isSet;
}

bool OAIRestoreFromClusterSnapshotMessage::is_preferred_maintenance_window_Valid() const{
    return m_preferred_maintenance_window_isValid;
}

qint32 OAIRestoreFromClusterSnapshotMessage::getAutomatedSnapshotRetentionPeriod() const {
    return m_automated_snapshot_retention_period;
}
void OAIRestoreFromClusterSnapshotMessage::setAutomatedSnapshotRetentionPeriod(const qint32 &automated_snapshot_retention_period) {
    m_automated_snapshot_retention_period = automated_snapshot_retention_period;
    m_automated_snapshot_retention_period_isSet = true;
}

bool OAIRestoreFromClusterSnapshotMessage::is_automated_snapshot_retention_period_Set() const{
    return m_automated_snapshot_retention_period_isSet;
}

bool OAIRestoreFromClusterSnapshotMessage::is_automated_snapshot_retention_period_Valid() const{
    return m_automated_snapshot_retention_period_isValid;
}

qint32 OAIRestoreFromClusterSnapshotMessage::getManualSnapshotRetentionPeriod() const {
    return m_manual_snapshot_retention_period;
}
void OAIRestoreFromClusterSnapshotMessage::setManualSnapshotRetentionPeriod(const qint32 &manual_snapshot_retention_period) {
    m_manual_snapshot_retention_period = manual_snapshot_retention_period;
    m_manual_snapshot_retention_period_isSet = true;
}

bool OAIRestoreFromClusterSnapshotMessage::is_manual_snapshot_retention_period_Set() const{
    return m_manual_snapshot_retention_period_isSet;
}

bool OAIRestoreFromClusterSnapshotMessage::is_manual_snapshot_retention_period_Valid() const{
    return m_manual_snapshot_retention_period_isValid;
}

QString OAIRestoreFromClusterSnapshotMessage::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAIRestoreFromClusterSnapshotMessage::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAIRestoreFromClusterSnapshotMessage::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAIRestoreFromClusterSnapshotMessage::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

QString OAIRestoreFromClusterSnapshotMessage::getNodeType() const {
    return m_node_type;
}
void OAIRestoreFromClusterSnapshotMessage::setNodeType(const QString &node_type) {
    m_node_type = node_type;
    m_node_type_isSet = true;
}

bool OAIRestoreFromClusterSnapshotMessage::is_node_type_Set() const{
    return m_node_type_isSet;
}

bool OAIRestoreFromClusterSnapshotMessage::is_node_type_Valid() const{
    return m_node_type_isValid;
}

bool OAIRestoreFromClusterSnapshotMessage::getEnhancedVpcRouting() const {
    return m_enhanced_vpc_routing;
}
void OAIRestoreFromClusterSnapshotMessage::setEnhancedVpcRouting(const bool &enhanced_vpc_routing) {
    m_enhanced_vpc_routing = enhanced_vpc_routing;
    m_enhanced_vpc_routing_isSet = true;
}

bool OAIRestoreFromClusterSnapshotMessage::is_enhanced_vpc_routing_Set() const{
    return m_enhanced_vpc_routing_isSet;
}

bool OAIRestoreFromClusterSnapshotMessage::is_enhanced_vpc_routing_Valid() const{
    return m_enhanced_vpc_routing_isValid;
}

QString OAIRestoreFromClusterSnapshotMessage::getAdditionalInfo() const {
    return m_additional_info;
}
void OAIRestoreFromClusterSnapshotMessage::setAdditionalInfo(const QString &additional_info) {
    m_additional_info = additional_info;
    m_additional_info_isSet = true;
}

bool OAIRestoreFromClusterSnapshotMessage::is_additional_info_Set() const{
    return m_additional_info_isSet;
}

bool OAIRestoreFromClusterSnapshotMessage::is_additional_info_Valid() const{
    return m_additional_info_isValid;
}

QList OAIRestoreFromClusterSnapshotMessage::getIamRoles() const {
    return m_iam_roles;
}
void OAIRestoreFromClusterSnapshotMessage::setIamRoles(const QList &iam_roles) {
    m_iam_roles = iam_roles;
    m_iam_roles_isSet = true;
}

bool OAIRestoreFromClusterSnapshotMessage::is_iam_roles_Set() const{
    return m_iam_roles_isSet;
}

bool OAIRestoreFromClusterSnapshotMessage::is_iam_roles_Valid() const{
    return m_iam_roles_isValid;
}

QString OAIRestoreFromClusterSnapshotMessage::getMaintenanceTrackName() const {
    return m_maintenance_track_name;
}
void OAIRestoreFromClusterSnapshotMessage::setMaintenanceTrackName(const QString &maintenance_track_name) {
    m_maintenance_track_name = maintenance_track_name;
    m_maintenance_track_name_isSet = true;
}

bool OAIRestoreFromClusterSnapshotMessage::is_maintenance_track_name_Set() const{
    return m_maintenance_track_name_isSet;
}

bool OAIRestoreFromClusterSnapshotMessage::is_maintenance_track_name_Valid() const{
    return m_maintenance_track_name_isValid;
}

QString OAIRestoreFromClusterSnapshotMessage::getSnapshotScheduleIdentifier() const {
    return m_snapshot_schedule_identifier;
}
void OAIRestoreFromClusterSnapshotMessage::setSnapshotScheduleIdentifier(const QString &snapshot_schedule_identifier) {
    m_snapshot_schedule_identifier = snapshot_schedule_identifier;
    m_snapshot_schedule_identifier_isSet = true;
}

bool OAIRestoreFromClusterSnapshotMessage::is_snapshot_schedule_identifier_Set() const{
    return m_snapshot_schedule_identifier_isSet;
}

bool OAIRestoreFromClusterSnapshotMessage::is_snapshot_schedule_identifier_Valid() const{
    return m_snapshot_schedule_identifier_isValid;
}

qint32 OAIRestoreFromClusterSnapshotMessage::getNumberOfNodes() const {
    return m_number_of_nodes;
}
void OAIRestoreFromClusterSnapshotMessage::setNumberOfNodes(const qint32 &number_of_nodes) {
    m_number_of_nodes = number_of_nodes;
    m_number_of_nodes_isSet = true;
}

bool OAIRestoreFromClusterSnapshotMessage::is_number_of_nodes_Set() const{
    return m_number_of_nodes_isSet;
}

bool OAIRestoreFromClusterSnapshotMessage::is_number_of_nodes_Valid() const{
    return m_number_of_nodes_isValid;
}

bool OAIRestoreFromClusterSnapshotMessage::getAvailabilityZoneRelocation() const {
    return m_availability_zone_relocation;
}
void OAIRestoreFromClusterSnapshotMessage::setAvailabilityZoneRelocation(const bool &availability_zone_relocation) {
    m_availability_zone_relocation = availability_zone_relocation;
    m_availability_zone_relocation_isSet = true;
}

bool OAIRestoreFromClusterSnapshotMessage::is_availability_zone_relocation_Set() const{
    return m_availability_zone_relocation_isSet;
}

bool OAIRestoreFromClusterSnapshotMessage::is_availability_zone_relocation_Valid() const{
    return m_availability_zone_relocation_isValid;
}

OAIAquaConfigurationStatus OAIRestoreFromClusterSnapshotMessage::getAquaConfigurationStatus() const {
    return m_aqua_configuration_status;
}
void OAIRestoreFromClusterSnapshotMessage::setAquaConfigurationStatus(const OAIAquaConfigurationStatus &aqua_configuration_status) {
    m_aqua_configuration_status = aqua_configuration_status;
    m_aqua_configuration_status_isSet = true;
}

bool OAIRestoreFromClusterSnapshotMessage::is_aqua_configuration_status_Set() const{
    return m_aqua_configuration_status_isSet;
}

bool OAIRestoreFromClusterSnapshotMessage::is_aqua_configuration_status_Valid() const{
    return m_aqua_configuration_status_isValid;
}

QString OAIRestoreFromClusterSnapshotMessage::getDefaultIamRoleArn() const {
    return m_default_iam_role_arn;
}
void OAIRestoreFromClusterSnapshotMessage::setDefaultIamRoleArn(const QString &default_iam_role_arn) {
    m_default_iam_role_arn = default_iam_role_arn;
    m_default_iam_role_arn_isSet = true;
}

bool OAIRestoreFromClusterSnapshotMessage::is_default_iam_role_arn_Set() const{
    return m_default_iam_role_arn_isSet;
}

bool OAIRestoreFromClusterSnapshotMessage::is_default_iam_role_arn_Valid() const{
    return m_default_iam_role_arn_isValid;
}

QString OAIRestoreFromClusterSnapshotMessage::getReservedNodeId() const {
    return m_reserved_node_id;
}
void OAIRestoreFromClusterSnapshotMessage::setReservedNodeId(const QString &reserved_node_id) {
    m_reserved_node_id = reserved_node_id;
    m_reserved_node_id_isSet = true;
}

bool OAIRestoreFromClusterSnapshotMessage::is_reserved_node_id_Set() const{
    return m_reserved_node_id_isSet;
}

bool OAIRestoreFromClusterSnapshotMessage::is_reserved_node_id_Valid() const{
    return m_reserved_node_id_isValid;
}

QString OAIRestoreFromClusterSnapshotMessage::getTargetReservedNodeOfferingId() const {
    return m_target_reserved_node_offering_id;
}
void OAIRestoreFromClusterSnapshotMessage::setTargetReservedNodeOfferingId(const QString &target_reserved_node_offering_id) {
    m_target_reserved_node_offering_id = target_reserved_node_offering_id;
    m_target_reserved_node_offering_id_isSet = true;
}

bool OAIRestoreFromClusterSnapshotMessage::is_target_reserved_node_offering_id_Set() const{
    return m_target_reserved_node_offering_id_isSet;
}

bool OAIRestoreFromClusterSnapshotMessage::is_target_reserved_node_offering_id_Valid() const{
    return m_target_reserved_node_offering_id_isValid;
}

bool OAIRestoreFromClusterSnapshotMessage::getEncrypted() const {
    return m_encrypted;
}
void OAIRestoreFromClusterSnapshotMessage::setEncrypted(const bool &encrypted) {
    m_encrypted = encrypted;
    m_encrypted_isSet = true;
}

bool OAIRestoreFromClusterSnapshotMessage::is_encrypted_Set() const{
    return m_encrypted_isSet;
}

bool OAIRestoreFromClusterSnapshotMessage::is_encrypted_Valid() const{
    return m_encrypted_isValid;
}

bool OAIRestoreFromClusterSnapshotMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_version_upgrade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_subnet_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publicly_accessible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hsm_client_certificate_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hsm_configuration_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elastic_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_parameter_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_security_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_maintenance_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_automated_snapshot_retention_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_snapshot_retention_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enhanced_vpc_routing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_roles.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance_track_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_schedule_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zone_relocation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aqua_configuration_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_iam_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_reserved_node_offering_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestoreFromClusterSnapshotMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cluster_identifier_isValid && true;
}

} // namespace OpenAPI
