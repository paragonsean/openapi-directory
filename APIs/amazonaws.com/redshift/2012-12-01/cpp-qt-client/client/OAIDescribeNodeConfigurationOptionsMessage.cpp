/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeNodeConfigurationOptionsMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeNodeConfigurationOptionsMessage::OAIDescribeNodeConfigurationOptionsMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeNodeConfigurationOptionsMessage::OAIDescribeNodeConfigurationOptionsMessage() {
    this->initializeModel();
}

OAIDescribeNodeConfigurationOptionsMessage::~OAIDescribeNodeConfigurationOptionsMessage() {}

void OAIDescribeNodeConfigurationOptionsMessage::initializeModel() {

    m_action_type_isSet = false;
    m_action_type_isValid = false;

    m_cluster_identifier_isSet = false;
    m_cluster_identifier_isValid = false;

    m_snapshot_identifier_isSet = false;
    m_snapshot_identifier_isValid = false;

    m_snapshot_arn_isSet = false;
    m_snapshot_arn_isValid = false;

    m_owner_account_isSet = false;
    m_owner_account_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_marker_isSet = false;
    m_marker_isValid = false;

    m_max_records_isSet = false;
    m_max_records_isValid = false;
}

void OAIDescribeNodeConfigurationOptionsMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeNodeConfigurationOptionsMessage::fromJsonObject(QJsonObject json) {

    m_action_type_isValid = ::OpenAPI::fromJsonValue(m_action_type, json[QString("ActionType")]);
    m_action_type_isSet = !json[QString("ActionType")].isNull() && m_action_type_isValid;

    m_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_cluster_identifier, json[QString("ClusterIdentifier")]);
    m_cluster_identifier_isSet = !json[QString("ClusterIdentifier")].isNull() && m_cluster_identifier_isValid;

    m_snapshot_identifier_isValid = ::OpenAPI::fromJsonValue(m_snapshot_identifier, json[QString("SnapshotIdentifier")]);
    m_snapshot_identifier_isSet = !json[QString("SnapshotIdentifier")].isNull() && m_snapshot_identifier_isValid;

    m_snapshot_arn_isValid = ::OpenAPI::fromJsonValue(m_snapshot_arn, json[QString("SnapshotArn")]);
    m_snapshot_arn_isSet = !json[QString("SnapshotArn")].isNull() && m_snapshot_arn_isValid;

    m_owner_account_isValid = ::OpenAPI::fromJsonValue(m_owner_account, json[QString("OwnerAccount")]);
    m_owner_account_isSet = !json[QString("OwnerAccount")].isNull() && m_owner_account_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("Filters")]);
    m_filters_isSet = !json[QString("Filters")].isNull() && m_filters_isValid;

    m_marker_isValid = ::OpenAPI::fromJsonValue(m_marker, json[QString("Marker")]);
    m_marker_isSet = !json[QString("Marker")].isNull() && m_marker_isValid;

    m_max_records_isValid = ::OpenAPI::fromJsonValue(m_max_records, json[QString("MaxRecords")]);
    m_max_records_isSet = !json[QString("MaxRecords")].isNull() && m_max_records_isValid;
}

QString OAIDescribeNodeConfigurationOptionsMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeNodeConfigurationOptionsMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_action_type.isSet()) {
        obj.insert(QString("ActionType"), ::OpenAPI::toJsonValue(m_action_type));
    }
    if (m_cluster_identifier_isSet) {
        obj.insert(QString("ClusterIdentifier"), ::OpenAPI::toJsonValue(m_cluster_identifier));
    }
    if (m_snapshot_identifier_isSet) {
        obj.insert(QString("SnapshotIdentifier"), ::OpenAPI::toJsonValue(m_snapshot_identifier));
    }
    if (m_snapshot_arn_isSet) {
        obj.insert(QString("SnapshotArn"), ::OpenAPI::toJsonValue(m_snapshot_arn));
    }
    if (m_owner_account_isSet) {
        obj.insert(QString("OwnerAccount"), ::OpenAPI::toJsonValue(m_owner_account));
    }
    if (m_filters.isSet()) {
        obj.insert(QString("Filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_marker_isSet) {
        obj.insert(QString("Marker"), ::OpenAPI::toJsonValue(m_marker));
    }
    if (m_max_records_isSet) {
        obj.insert(QString("MaxRecords"), ::OpenAPI::toJsonValue(m_max_records));
    }
    return obj;
}

OAIActionType OAIDescribeNodeConfigurationOptionsMessage::getActionType() const {
    return m_action_type;
}
void OAIDescribeNodeConfigurationOptionsMessage::setActionType(const OAIActionType &action_type) {
    m_action_type = action_type;
    m_action_type_isSet = true;
}

bool OAIDescribeNodeConfigurationOptionsMessage::is_action_type_Set() const{
    return m_action_type_isSet;
}

bool OAIDescribeNodeConfigurationOptionsMessage::is_action_type_Valid() const{
    return m_action_type_isValid;
}

QString OAIDescribeNodeConfigurationOptionsMessage::getClusterIdentifier() const {
    return m_cluster_identifier;
}
void OAIDescribeNodeConfigurationOptionsMessage::setClusterIdentifier(const QString &cluster_identifier) {
    m_cluster_identifier = cluster_identifier;
    m_cluster_identifier_isSet = true;
}

bool OAIDescribeNodeConfigurationOptionsMessage::is_cluster_identifier_Set() const{
    return m_cluster_identifier_isSet;
}

bool OAIDescribeNodeConfigurationOptionsMessage::is_cluster_identifier_Valid() const{
    return m_cluster_identifier_isValid;
}

QString OAIDescribeNodeConfigurationOptionsMessage::getSnapshotIdentifier() const {
    return m_snapshot_identifier;
}
void OAIDescribeNodeConfigurationOptionsMessage::setSnapshotIdentifier(const QString &snapshot_identifier) {
    m_snapshot_identifier = snapshot_identifier;
    m_snapshot_identifier_isSet = true;
}

bool OAIDescribeNodeConfigurationOptionsMessage::is_snapshot_identifier_Set() const{
    return m_snapshot_identifier_isSet;
}

bool OAIDescribeNodeConfigurationOptionsMessage::is_snapshot_identifier_Valid() const{
    return m_snapshot_identifier_isValid;
}

QString OAIDescribeNodeConfigurationOptionsMessage::getSnapshotArn() const {
    return m_snapshot_arn;
}
void OAIDescribeNodeConfigurationOptionsMessage::setSnapshotArn(const QString &snapshot_arn) {
    m_snapshot_arn = snapshot_arn;
    m_snapshot_arn_isSet = true;
}

bool OAIDescribeNodeConfigurationOptionsMessage::is_snapshot_arn_Set() const{
    return m_snapshot_arn_isSet;
}

bool OAIDescribeNodeConfigurationOptionsMessage::is_snapshot_arn_Valid() const{
    return m_snapshot_arn_isValid;
}

QString OAIDescribeNodeConfigurationOptionsMessage::getOwnerAccount() const {
    return m_owner_account;
}
void OAIDescribeNodeConfigurationOptionsMessage::setOwnerAccount(const QString &owner_account) {
    m_owner_account = owner_account;
    m_owner_account_isSet = true;
}

bool OAIDescribeNodeConfigurationOptionsMessage::is_owner_account_Set() const{
    return m_owner_account_isSet;
}

bool OAIDescribeNodeConfigurationOptionsMessage::is_owner_account_Valid() const{
    return m_owner_account_isValid;
}

QList OAIDescribeNodeConfigurationOptionsMessage::getFilters() const {
    return m_filters;
}
void OAIDescribeNodeConfigurationOptionsMessage::setFilters(const QList &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIDescribeNodeConfigurationOptionsMessage::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIDescribeNodeConfigurationOptionsMessage::is_filters_Valid() const{
    return m_filters_isValid;
}

QString OAIDescribeNodeConfigurationOptionsMessage::getMarker() const {
    return m_marker;
}
void OAIDescribeNodeConfigurationOptionsMessage::setMarker(const QString &marker) {
    m_marker = marker;
    m_marker_isSet = true;
}

bool OAIDescribeNodeConfigurationOptionsMessage::is_marker_Set() const{
    return m_marker_isSet;
}

bool OAIDescribeNodeConfigurationOptionsMessage::is_marker_Valid() const{
    return m_marker_isValid;
}

qint32 OAIDescribeNodeConfigurationOptionsMessage::getMaxRecords() const {
    return m_max_records;
}
void OAIDescribeNodeConfigurationOptionsMessage::setMaxRecords(const qint32 &max_records) {
    m_max_records = max_records;
    m_max_records_isSet = true;
}

bool OAIDescribeNodeConfigurationOptionsMessage::is_max_records_Set() const{
    return m_max_records_isSet;
}

bool OAIDescribeNodeConfigurationOptionsMessage::is_max_records_Valid() const{
    return m_max_records_isValid;
}

bool OAIDescribeNodeConfigurationOptionsMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_marker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_records_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeNodeConfigurationOptionsMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_type_isValid && true;
}

} // namespace OpenAPI
