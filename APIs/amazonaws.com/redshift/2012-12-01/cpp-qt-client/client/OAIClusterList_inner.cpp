/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusterList_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusterList_inner::OAIClusterList_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusterList_inner::OAIClusterList_inner() {
    this->initializeModel();
}

OAIClusterList_inner::~OAIClusterList_inner() {}

void OAIClusterList_inner::initializeModel() {

    m_cluster_identifier_isSet = false;
    m_cluster_identifier_isValid = false;

    m_node_type_isSet = false;
    m_node_type_isValid = false;

    m_cluster_status_isSet = false;
    m_cluster_status_isValid = false;

    m_cluster_availability_status_isSet = false;
    m_cluster_availability_status_isValid = false;

    m_modify_status_isSet = false;
    m_modify_status_isValid = false;

    m_master_username_isSet = false;
    m_master_username_isValid = false;

    m_db_name_isSet = false;
    m_db_name_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_cluster_create_time_isSet = false;
    m_cluster_create_time_isValid = false;

    m_automated_snapshot_retention_period_isSet = false;
    m_automated_snapshot_retention_period_isValid = false;

    m_manual_snapshot_retention_period_isSet = false;
    m_manual_snapshot_retention_period_isValid = false;

    m_cluster_security_groups_isSet = false;
    m_cluster_security_groups_isValid = false;

    m_vpc_security_groups_isSet = false;
    m_vpc_security_groups_isValid = false;

    m_cluster_parameter_groups_isSet = false;
    m_cluster_parameter_groups_isValid = false;

    m_cluster_subnet_group_name_isSet = false;
    m_cluster_subnet_group_name_isValid = false;

    m_vpc_id_isSet = false;
    m_vpc_id_isValid = false;

    m_availability_zone_isSet = false;
    m_availability_zone_isValid = false;

    m_preferred_maintenance_window_isSet = false;
    m_preferred_maintenance_window_isValid = false;

    m_pending_modified_values_isSet = false;
    m_pending_modified_values_isValid = false;

    m_cluster_version_isSet = false;
    m_cluster_version_isValid = false;

    m_allow_version_upgrade_isSet = false;
    m_allow_version_upgrade_isValid = false;

    m_number_of_nodes_isSet = false;
    m_number_of_nodes_isValid = false;

    m_publicly_accessible_isSet = false;
    m_publicly_accessible_isValid = false;

    m_encrypted_isSet = false;
    m_encrypted_isValid = false;

    m_restore_status_isSet = false;
    m_restore_status_isValid = false;

    m_data_transfer_progress_isSet = false;
    m_data_transfer_progress_isValid = false;

    m_hsm_status_isSet = false;
    m_hsm_status_isValid = false;

    m_cluster_snapshot_copy_status_isSet = false;
    m_cluster_snapshot_copy_status_isValid = false;

    m_cluster_public_key_isSet = false;
    m_cluster_public_key_isValid = false;

    m_cluster_nodes_isSet = false;
    m_cluster_nodes_isValid = false;

    m_elastic_ip_status_isSet = false;
    m_elastic_ip_status_isValid = false;

    m_cluster_revision_number_isSet = false;
    m_cluster_revision_number_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_enhanced_vpc_routing_isSet = false;
    m_enhanced_vpc_routing_isValid = false;

    m_iam_roles_isSet = false;
    m_iam_roles_isValid = false;

    m_pending_actions_isSet = false;
    m_pending_actions_isValid = false;

    m_maintenance_track_name_isSet = false;
    m_maintenance_track_name_isValid = false;

    m_elastic_resize_number_of_node_options_isSet = false;
    m_elastic_resize_number_of_node_options_isValid = false;

    m_deferred_maintenance_windows_isSet = false;
    m_deferred_maintenance_windows_isValid = false;

    m_snapshot_schedule_identifier_isSet = false;
    m_snapshot_schedule_identifier_isValid = false;

    m_snapshot_schedule_state_isSet = false;
    m_snapshot_schedule_state_isValid = false;

    m_expected_next_snapshot_schedule_time_isSet = false;
    m_expected_next_snapshot_schedule_time_isValid = false;

    m_expected_next_snapshot_schedule_time_status_isSet = false;
    m_expected_next_snapshot_schedule_time_status_isValid = false;

    m_next_maintenance_window_start_time_isSet = false;
    m_next_maintenance_window_start_time_isValid = false;

    m_resize_info_isSet = false;
    m_resize_info_isValid = false;

    m_availability_zone_relocation_status_isSet = false;
    m_availability_zone_relocation_status_isValid = false;

    m_cluster_namespace_arn_isSet = false;
    m_cluster_namespace_arn_isValid = false;

    m_total_storage_capacity_in_mega_bytes_isSet = false;
    m_total_storage_capacity_in_mega_bytes_isValid = false;

    m_aqua_configuration_isSet = false;
    m_aqua_configuration_isValid = false;

    m_default_iam_role_arn_isSet = false;
    m_default_iam_role_arn_isValid = false;

    m_reserved_node_exchange_status_isSet = false;
    m_reserved_node_exchange_status_isValid = false;

    m_custom_domain_name_isSet = false;
    m_custom_domain_name_isValid = false;

    m_custom_domain_certificate_arn_isSet = false;
    m_custom_domain_certificate_arn_isValid = false;

    m_custom_domain_certificate_expiry_date_isSet = false;
    m_custom_domain_certificate_expiry_date_isValid = false;
}

void OAIClusterList_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClusterList_inner::fromJsonObject(QJsonObject json) {

    m_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_cluster_identifier, json[QString("ClusterIdentifier")]);
    m_cluster_identifier_isSet = !json[QString("ClusterIdentifier")].isNull() && m_cluster_identifier_isValid;

    m_node_type_isValid = ::OpenAPI::fromJsonValue(m_node_type, json[QString("NodeType")]);
    m_node_type_isSet = !json[QString("NodeType")].isNull() && m_node_type_isValid;

    m_cluster_status_isValid = ::OpenAPI::fromJsonValue(m_cluster_status, json[QString("ClusterStatus")]);
    m_cluster_status_isSet = !json[QString("ClusterStatus")].isNull() && m_cluster_status_isValid;

    m_cluster_availability_status_isValid = ::OpenAPI::fromJsonValue(m_cluster_availability_status, json[QString("ClusterAvailabilityStatus")]);
    m_cluster_availability_status_isSet = !json[QString("ClusterAvailabilityStatus")].isNull() && m_cluster_availability_status_isValid;

    m_modify_status_isValid = ::OpenAPI::fromJsonValue(m_modify_status, json[QString("ModifyStatus")]);
    m_modify_status_isSet = !json[QString("ModifyStatus")].isNull() && m_modify_status_isValid;

    m_master_username_isValid = ::OpenAPI::fromJsonValue(m_master_username, json[QString("MasterUsername")]);
    m_master_username_isSet = !json[QString("MasterUsername")].isNull() && m_master_username_isValid;

    m_db_name_isValid = ::OpenAPI::fromJsonValue(m_db_name, json[QString("DBName")]);
    m_db_name_isSet = !json[QString("DBName")].isNull() && m_db_name_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("Endpoint")]);
    m_endpoint_isSet = !json[QString("Endpoint")].isNull() && m_endpoint_isValid;

    m_cluster_create_time_isValid = ::OpenAPI::fromJsonValue(m_cluster_create_time, json[QString("ClusterCreateTime")]);
    m_cluster_create_time_isSet = !json[QString("ClusterCreateTime")].isNull() && m_cluster_create_time_isValid;

    m_automated_snapshot_retention_period_isValid = ::OpenAPI::fromJsonValue(m_automated_snapshot_retention_period, json[QString("AutomatedSnapshotRetentionPeriod")]);
    m_automated_snapshot_retention_period_isSet = !json[QString("AutomatedSnapshotRetentionPeriod")].isNull() && m_automated_snapshot_retention_period_isValid;

    m_manual_snapshot_retention_period_isValid = ::OpenAPI::fromJsonValue(m_manual_snapshot_retention_period, json[QString("ManualSnapshotRetentionPeriod")]);
    m_manual_snapshot_retention_period_isSet = !json[QString("ManualSnapshotRetentionPeriod")].isNull() && m_manual_snapshot_retention_period_isValid;

    m_cluster_security_groups_isValid = ::OpenAPI::fromJsonValue(m_cluster_security_groups, json[QString("ClusterSecurityGroups")]);
    m_cluster_security_groups_isSet = !json[QString("ClusterSecurityGroups")].isNull() && m_cluster_security_groups_isValid;

    m_vpc_security_groups_isValid = ::OpenAPI::fromJsonValue(m_vpc_security_groups, json[QString("VpcSecurityGroups")]);
    m_vpc_security_groups_isSet = !json[QString("VpcSecurityGroups")].isNull() && m_vpc_security_groups_isValid;

    m_cluster_parameter_groups_isValid = ::OpenAPI::fromJsonValue(m_cluster_parameter_groups, json[QString("ClusterParameterGroups")]);
    m_cluster_parameter_groups_isSet = !json[QString("ClusterParameterGroups")].isNull() && m_cluster_parameter_groups_isValid;

    m_cluster_subnet_group_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_subnet_group_name, json[QString("ClusterSubnetGroupName")]);
    m_cluster_subnet_group_name_isSet = !json[QString("ClusterSubnetGroupName")].isNull() && m_cluster_subnet_group_name_isValid;

    m_vpc_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_id, json[QString("VpcId")]);
    m_vpc_id_isSet = !json[QString("VpcId")].isNull() && m_vpc_id_isValid;

    m_availability_zone_isValid = ::OpenAPI::fromJsonValue(m_availability_zone, json[QString("AvailabilityZone")]);
    m_availability_zone_isSet = !json[QString("AvailabilityZone")].isNull() && m_availability_zone_isValid;

    m_preferred_maintenance_window_isValid = ::OpenAPI::fromJsonValue(m_preferred_maintenance_window, json[QString("PreferredMaintenanceWindow")]);
    m_preferred_maintenance_window_isSet = !json[QString("PreferredMaintenanceWindow")].isNull() && m_preferred_maintenance_window_isValid;

    m_pending_modified_values_isValid = ::OpenAPI::fromJsonValue(m_pending_modified_values, json[QString("PendingModifiedValues")]);
    m_pending_modified_values_isSet = !json[QString("PendingModifiedValues")].isNull() && m_pending_modified_values_isValid;

    m_cluster_version_isValid = ::OpenAPI::fromJsonValue(m_cluster_version, json[QString("ClusterVersion")]);
    m_cluster_version_isSet = !json[QString("ClusterVersion")].isNull() && m_cluster_version_isValid;

    m_allow_version_upgrade_isValid = ::OpenAPI::fromJsonValue(m_allow_version_upgrade, json[QString("AllowVersionUpgrade")]);
    m_allow_version_upgrade_isSet = !json[QString("AllowVersionUpgrade")].isNull() && m_allow_version_upgrade_isValid;

    m_number_of_nodes_isValid = ::OpenAPI::fromJsonValue(m_number_of_nodes, json[QString("NumberOfNodes")]);
    m_number_of_nodes_isSet = !json[QString("NumberOfNodes")].isNull() && m_number_of_nodes_isValid;

    m_publicly_accessible_isValid = ::OpenAPI::fromJsonValue(m_publicly_accessible, json[QString("PubliclyAccessible")]);
    m_publicly_accessible_isSet = !json[QString("PubliclyAccessible")].isNull() && m_publicly_accessible_isValid;

    m_encrypted_isValid = ::OpenAPI::fromJsonValue(m_encrypted, json[QString("Encrypted")]);
    m_encrypted_isSet = !json[QString("Encrypted")].isNull() && m_encrypted_isValid;

    m_restore_status_isValid = ::OpenAPI::fromJsonValue(m_restore_status, json[QString("RestoreStatus")]);
    m_restore_status_isSet = !json[QString("RestoreStatus")].isNull() && m_restore_status_isValid;

    m_data_transfer_progress_isValid = ::OpenAPI::fromJsonValue(m_data_transfer_progress, json[QString("DataTransferProgress")]);
    m_data_transfer_progress_isSet = !json[QString("DataTransferProgress")].isNull() && m_data_transfer_progress_isValid;

    m_hsm_status_isValid = ::OpenAPI::fromJsonValue(m_hsm_status, json[QString("HsmStatus")]);
    m_hsm_status_isSet = !json[QString("HsmStatus")].isNull() && m_hsm_status_isValid;

    m_cluster_snapshot_copy_status_isValid = ::OpenAPI::fromJsonValue(m_cluster_snapshot_copy_status, json[QString("ClusterSnapshotCopyStatus")]);
    m_cluster_snapshot_copy_status_isSet = !json[QString("ClusterSnapshotCopyStatus")].isNull() && m_cluster_snapshot_copy_status_isValid;

    m_cluster_public_key_isValid = ::OpenAPI::fromJsonValue(m_cluster_public_key, json[QString("ClusterPublicKey")]);
    m_cluster_public_key_isSet = !json[QString("ClusterPublicKey")].isNull() && m_cluster_public_key_isValid;

    m_cluster_nodes_isValid = ::OpenAPI::fromJsonValue(m_cluster_nodes, json[QString("ClusterNodes")]);
    m_cluster_nodes_isSet = !json[QString("ClusterNodes")].isNull() && m_cluster_nodes_isValid;

    m_elastic_ip_status_isValid = ::OpenAPI::fromJsonValue(m_elastic_ip_status, json[QString("ElasticIpStatus")]);
    m_elastic_ip_status_isSet = !json[QString("ElasticIpStatus")].isNull() && m_elastic_ip_status_isValid;

    m_cluster_revision_number_isValid = ::OpenAPI::fromJsonValue(m_cluster_revision_number, json[QString("ClusterRevisionNumber")]);
    m_cluster_revision_number_isSet = !json[QString("ClusterRevisionNumber")].isNull() && m_cluster_revision_number_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_enhanced_vpc_routing_isValid = ::OpenAPI::fromJsonValue(m_enhanced_vpc_routing, json[QString("EnhancedVpcRouting")]);
    m_enhanced_vpc_routing_isSet = !json[QString("EnhancedVpcRouting")].isNull() && m_enhanced_vpc_routing_isValid;

    m_iam_roles_isValid = ::OpenAPI::fromJsonValue(m_iam_roles, json[QString("IamRoles")]);
    m_iam_roles_isSet = !json[QString("IamRoles")].isNull() && m_iam_roles_isValid;

    m_pending_actions_isValid = ::OpenAPI::fromJsonValue(m_pending_actions, json[QString("PendingActions")]);
    m_pending_actions_isSet = !json[QString("PendingActions")].isNull() && m_pending_actions_isValid;

    m_maintenance_track_name_isValid = ::OpenAPI::fromJsonValue(m_maintenance_track_name, json[QString("MaintenanceTrackName")]);
    m_maintenance_track_name_isSet = !json[QString("MaintenanceTrackName")].isNull() && m_maintenance_track_name_isValid;

    m_elastic_resize_number_of_node_options_isValid = ::OpenAPI::fromJsonValue(m_elastic_resize_number_of_node_options, json[QString("ElasticResizeNumberOfNodeOptions")]);
    m_elastic_resize_number_of_node_options_isSet = !json[QString("ElasticResizeNumberOfNodeOptions")].isNull() && m_elastic_resize_number_of_node_options_isValid;

    m_deferred_maintenance_windows_isValid = ::OpenAPI::fromJsonValue(m_deferred_maintenance_windows, json[QString("DeferredMaintenanceWindows")]);
    m_deferred_maintenance_windows_isSet = !json[QString("DeferredMaintenanceWindows")].isNull() && m_deferred_maintenance_windows_isValid;

    m_snapshot_schedule_identifier_isValid = ::OpenAPI::fromJsonValue(m_snapshot_schedule_identifier, json[QString("SnapshotScheduleIdentifier")]);
    m_snapshot_schedule_identifier_isSet = !json[QString("SnapshotScheduleIdentifier")].isNull() && m_snapshot_schedule_identifier_isValid;

    m_snapshot_schedule_state_isValid = ::OpenAPI::fromJsonValue(m_snapshot_schedule_state, json[QString("SnapshotScheduleState")]);
    m_snapshot_schedule_state_isSet = !json[QString("SnapshotScheduleState")].isNull() && m_snapshot_schedule_state_isValid;

    m_expected_next_snapshot_schedule_time_isValid = ::OpenAPI::fromJsonValue(m_expected_next_snapshot_schedule_time, json[QString("ExpectedNextSnapshotScheduleTime")]);
    m_expected_next_snapshot_schedule_time_isSet = !json[QString("ExpectedNextSnapshotScheduleTime")].isNull() && m_expected_next_snapshot_schedule_time_isValid;

    m_expected_next_snapshot_schedule_time_status_isValid = ::OpenAPI::fromJsonValue(m_expected_next_snapshot_schedule_time_status, json[QString("ExpectedNextSnapshotScheduleTimeStatus")]);
    m_expected_next_snapshot_schedule_time_status_isSet = !json[QString("ExpectedNextSnapshotScheduleTimeStatus")].isNull() && m_expected_next_snapshot_schedule_time_status_isValid;

    m_next_maintenance_window_start_time_isValid = ::OpenAPI::fromJsonValue(m_next_maintenance_window_start_time, json[QString("NextMaintenanceWindowStartTime")]);
    m_next_maintenance_window_start_time_isSet = !json[QString("NextMaintenanceWindowStartTime")].isNull() && m_next_maintenance_window_start_time_isValid;

    m_resize_info_isValid = ::OpenAPI::fromJsonValue(m_resize_info, json[QString("ResizeInfo")]);
    m_resize_info_isSet = !json[QString("ResizeInfo")].isNull() && m_resize_info_isValid;

    m_availability_zone_relocation_status_isValid = ::OpenAPI::fromJsonValue(m_availability_zone_relocation_status, json[QString("AvailabilityZoneRelocationStatus")]);
    m_availability_zone_relocation_status_isSet = !json[QString("AvailabilityZoneRelocationStatus")].isNull() && m_availability_zone_relocation_status_isValid;

    m_cluster_namespace_arn_isValid = ::OpenAPI::fromJsonValue(m_cluster_namespace_arn, json[QString("ClusterNamespaceArn")]);
    m_cluster_namespace_arn_isSet = !json[QString("ClusterNamespaceArn")].isNull() && m_cluster_namespace_arn_isValid;

    m_total_storage_capacity_in_mega_bytes_isValid = ::OpenAPI::fromJsonValue(m_total_storage_capacity_in_mega_bytes, json[QString("TotalStorageCapacityInMegaBytes")]);
    m_total_storage_capacity_in_mega_bytes_isSet = !json[QString("TotalStorageCapacityInMegaBytes")].isNull() && m_total_storage_capacity_in_mega_bytes_isValid;

    m_aqua_configuration_isValid = ::OpenAPI::fromJsonValue(m_aqua_configuration, json[QString("AquaConfiguration")]);
    m_aqua_configuration_isSet = !json[QString("AquaConfiguration")].isNull() && m_aqua_configuration_isValid;

    m_default_iam_role_arn_isValid = ::OpenAPI::fromJsonValue(m_default_iam_role_arn, json[QString("DefaultIamRoleArn")]);
    m_default_iam_role_arn_isSet = !json[QString("DefaultIamRoleArn")].isNull() && m_default_iam_role_arn_isValid;

    m_reserved_node_exchange_status_isValid = ::OpenAPI::fromJsonValue(m_reserved_node_exchange_status, json[QString("ReservedNodeExchangeStatus")]);
    m_reserved_node_exchange_status_isSet = !json[QString("ReservedNodeExchangeStatus")].isNull() && m_reserved_node_exchange_status_isValid;

    m_custom_domain_name_isValid = ::OpenAPI::fromJsonValue(m_custom_domain_name, json[QString("CustomDomainName")]);
    m_custom_domain_name_isSet = !json[QString("CustomDomainName")].isNull() && m_custom_domain_name_isValid;

    m_custom_domain_certificate_arn_isValid = ::OpenAPI::fromJsonValue(m_custom_domain_certificate_arn, json[QString("CustomDomainCertificateArn")]);
    m_custom_domain_certificate_arn_isSet = !json[QString("CustomDomainCertificateArn")].isNull() && m_custom_domain_certificate_arn_isValid;

    m_custom_domain_certificate_expiry_date_isValid = ::OpenAPI::fromJsonValue(m_custom_domain_certificate_expiry_date, json[QString("CustomDomainCertificateExpiryDate")]);
    m_custom_domain_certificate_expiry_date_isSet = !json[QString("CustomDomainCertificateExpiryDate")].isNull() && m_custom_domain_certificate_expiry_date_isValid;
}

QString OAIClusterList_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClusterList_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_identifier_isSet) {
        obj.insert(QString("ClusterIdentifier"), ::OpenAPI::toJsonValue(m_cluster_identifier));
    }
    if (m_node_type_isSet) {
        obj.insert(QString("NodeType"), ::OpenAPI::toJsonValue(m_node_type));
    }
    if (m_cluster_status_isSet) {
        obj.insert(QString("ClusterStatus"), ::OpenAPI::toJsonValue(m_cluster_status));
    }
    if (m_cluster_availability_status_isSet) {
        obj.insert(QString("ClusterAvailabilityStatus"), ::OpenAPI::toJsonValue(m_cluster_availability_status));
    }
    if (m_modify_status_isSet) {
        obj.insert(QString("ModifyStatus"), ::OpenAPI::toJsonValue(m_modify_status));
    }
    if (m_master_username_isSet) {
        obj.insert(QString("MasterUsername"), ::OpenAPI::toJsonValue(m_master_username));
    }
    if (m_db_name_isSet) {
        obj.insert(QString("DBName"), ::OpenAPI::toJsonValue(m_db_name));
    }
    if (m_endpoint.isSet()) {
        obj.insert(QString("Endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_cluster_create_time_isSet) {
        obj.insert(QString("ClusterCreateTime"), ::OpenAPI::toJsonValue(m_cluster_create_time));
    }
    if (m_automated_snapshot_retention_period_isSet) {
        obj.insert(QString("AutomatedSnapshotRetentionPeriod"), ::OpenAPI::toJsonValue(m_automated_snapshot_retention_period));
    }
    if (m_manual_snapshot_retention_period_isSet) {
        obj.insert(QString("ManualSnapshotRetentionPeriod"), ::OpenAPI::toJsonValue(m_manual_snapshot_retention_period));
    }
    if (m_cluster_security_groups.isSet()) {
        obj.insert(QString("ClusterSecurityGroups"), ::OpenAPI::toJsonValue(m_cluster_security_groups));
    }
    if (m_vpc_security_groups.isSet()) {
        obj.insert(QString("VpcSecurityGroups"), ::OpenAPI::toJsonValue(m_vpc_security_groups));
    }
    if (m_cluster_parameter_groups.isSet()) {
        obj.insert(QString("ClusterParameterGroups"), ::OpenAPI::toJsonValue(m_cluster_parameter_groups));
    }
    if (m_cluster_subnet_group_name_isSet) {
        obj.insert(QString("ClusterSubnetGroupName"), ::OpenAPI::toJsonValue(m_cluster_subnet_group_name));
    }
    if (m_vpc_id_isSet) {
        obj.insert(QString("VpcId"), ::OpenAPI::toJsonValue(m_vpc_id));
    }
    if (m_availability_zone_isSet) {
        obj.insert(QString("AvailabilityZone"), ::OpenAPI::toJsonValue(m_availability_zone));
    }
    if (m_preferred_maintenance_window_isSet) {
        obj.insert(QString("PreferredMaintenanceWindow"), ::OpenAPI::toJsonValue(m_preferred_maintenance_window));
    }
    if (m_pending_modified_values.isSet()) {
        obj.insert(QString("PendingModifiedValues"), ::OpenAPI::toJsonValue(m_pending_modified_values));
    }
    if (m_cluster_version_isSet) {
        obj.insert(QString("ClusterVersion"), ::OpenAPI::toJsonValue(m_cluster_version));
    }
    if (m_allow_version_upgrade_isSet) {
        obj.insert(QString("AllowVersionUpgrade"), ::OpenAPI::toJsonValue(m_allow_version_upgrade));
    }
    if (m_number_of_nodes_isSet) {
        obj.insert(QString("NumberOfNodes"), ::OpenAPI::toJsonValue(m_number_of_nodes));
    }
    if (m_publicly_accessible_isSet) {
        obj.insert(QString("PubliclyAccessible"), ::OpenAPI::toJsonValue(m_publicly_accessible));
    }
    if (m_encrypted_isSet) {
        obj.insert(QString("Encrypted"), ::OpenAPI::toJsonValue(m_encrypted));
    }
    if (m_restore_status.isSet()) {
        obj.insert(QString("RestoreStatus"), ::OpenAPI::toJsonValue(m_restore_status));
    }
    if (m_data_transfer_progress.isSet()) {
        obj.insert(QString("DataTransferProgress"), ::OpenAPI::toJsonValue(m_data_transfer_progress));
    }
    if (m_hsm_status.isSet()) {
        obj.insert(QString("HsmStatus"), ::OpenAPI::toJsonValue(m_hsm_status));
    }
    if (m_cluster_snapshot_copy_status.isSet()) {
        obj.insert(QString("ClusterSnapshotCopyStatus"), ::OpenAPI::toJsonValue(m_cluster_snapshot_copy_status));
    }
    if (m_cluster_public_key_isSet) {
        obj.insert(QString("ClusterPublicKey"), ::OpenAPI::toJsonValue(m_cluster_public_key));
    }
    if (m_cluster_nodes.isSet()) {
        obj.insert(QString("ClusterNodes"), ::OpenAPI::toJsonValue(m_cluster_nodes));
    }
    if (m_elastic_ip_status.isSet()) {
        obj.insert(QString("ElasticIpStatus"), ::OpenAPI::toJsonValue(m_elastic_ip_status));
    }
    if (m_cluster_revision_number_isSet) {
        obj.insert(QString("ClusterRevisionNumber"), ::OpenAPI::toJsonValue(m_cluster_revision_number));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_enhanced_vpc_routing_isSet) {
        obj.insert(QString("EnhancedVpcRouting"), ::OpenAPI::toJsonValue(m_enhanced_vpc_routing));
    }
    if (m_iam_roles.isSet()) {
        obj.insert(QString("IamRoles"), ::OpenAPI::toJsonValue(m_iam_roles));
    }
    if (m_pending_actions.isSet()) {
        obj.insert(QString("PendingActions"), ::OpenAPI::toJsonValue(m_pending_actions));
    }
    if (m_maintenance_track_name_isSet) {
        obj.insert(QString("MaintenanceTrackName"), ::OpenAPI::toJsonValue(m_maintenance_track_name));
    }
    if (m_elastic_resize_number_of_node_options_isSet) {
        obj.insert(QString("ElasticResizeNumberOfNodeOptions"), ::OpenAPI::toJsonValue(m_elastic_resize_number_of_node_options));
    }
    if (m_deferred_maintenance_windows.isSet()) {
        obj.insert(QString("DeferredMaintenanceWindows"), ::OpenAPI::toJsonValue(m_deferred_maintenance_windows));
    }
    if (m_snapshot_schedule_identifier_isSet) {
        obj.insert(QString("SnapshotScheduleIdentifier"), ::OpenAPI::toJsonValue(m_snapshot_schedule_identifier));
    }
    if (m_snapshot_schedule_state.isSet()) {
        obj.insert(QString("SnapshotScheduleState"), ::OpenAPI::toJsonValue(m_snapshot_schedule_state));
    }
    if (m_expected_next_snapshot_schedule_time_isSet) {
        obj.insert(QString("ExpectedNextSnapshotScheduleTime"), ::OpenAPI::toJsonValue(m_expected_next_snapshot_schedule_time));
    }
    if (m_expected_next_snapshot_schedule_time_status_isSet) {
        obj.insert(QString("ExpectedNextSnapshotScheduleTimeStatus"), ::OpenAPI::toJsonValue(m_expected_next_snapshot_schedule_time_status));
    }
    if (m_next_maintenance_window_start_time_isSet) {
        obj.insert(QString("NextMaintenanceWindowStartTime"), ::OpenAPI::toJsonValue(m_next_maintenance_window_start_time));
    }
    if (m_resize_info.isSet()) {
        obj.insert(QString("ResizeInfo"), ::OpenAPI::toJsonValue(m_resize_info));
    }
    if (m_availability_zone_relocation_status_isSet) {
        obj.insert(QString("AvailabilityZoneRelocationStatus"), ::OpenAPI::toJsonValue(m_availability_zone_relocation_status));
    }
    if (m_cluster_namespace_arn_isSet) {
        obj.insert(QString("ClusterNamespaceArn"), ::OpenAPI::toJsonValue(m_cluster_namespace_arn));
    }
    if (m_total_storage_capacity_in_mega_bytes_isSet) {
        obj.insert(QString("TotalStorageCapacityInMegaBytes"), ::OpenAPI::toJsonValue(m_total_storage_capacity_in_mega_bytes));
    }
    if (m_aqua_configuration.isSet()) {
        obj.insert(QString("AquaConfiguration"), ::OpenAPI::toJsonValue(m_aqua_configuration));
    }
    if (m_default_iam_role_arn_isSet) {
        obj.insert(QString("DefaultIamRoleArn"), ::OpenAPI::toJsonValue(m_default_iam_role_arn));
    }
    if (m_reserved_node_exchange_status.isSet()) {
        obj.insert(QString("ReservedNodeExchangeStatus"), ::OpenAPI::toJsonValue(m_reserved_node_exchange_status));
    }
    if (m_custom_domain_name_isSet) {
        obj.insert(QString("CustomDomainName"), ::OpenAPI::toJsonValue(m_custom_domain_name));
    }
    if (m_custom_domain_certificate_arn_isSet) {
        obj.insert(QString("CustomDomainCertificateArn"), ::OpenAPI::toJsonValue(m_custom_domain_certificate_arn));
    }
    if (m_custom_domain_certificate_expiry_date_isSet) {
        obj.insert(QString("CustomDomainCertificateExpiryDate"), ::OpenAPI::toJsonValue(m_custom_domain_certificate_expiry_date));
    }
    return obj;
}

QString OAIClusterList_inner::getClusterIdentifier() const {
    return m_cluster_identifier;
}
void OAIClusterList_inner::setClusterIdentifier(const QString &cluster_identifier) {
    m_cluster_identifier = cluster_identifier;
    m_cluster_identifier_isSet = true;
}

bool OAIClusterList_inner::is_cluster_identifier_Set() const{
    return m_cluster_identifier_isSet;
}

bool OAIClusterList_inner::is_cluster_identifier_Valid() const{
    return m_cluster_identifier_isValid;
}

QString OAIClusterList_inner::getNodeType() const {
    return m_node_type;
}
void OAIClusterList_inner::setNodeType(const QString &node_type) {
    m_node_type = node_type;
    m_node_type_isSet = true;
}

bool OAIClusterList_inner::is_node_type_Set() const{
    return m_node_type_isSet;
}

bool OAIClusterList_inner::is_node_type_Valid() const{
    return m_node_type_isValid;
}

QString OAIClusterList_inner::getClusterStatus() const {
    return m_cluster_status;
}
void OAIClusterList_inner::setClusterStatus(const QString &cluster_status) {
    m_cluster_status = cluster_status;
    m_cluster_status_isSet = true;
}

bool OAIClusterList_inner::is_cluster_status_Set() const{
    return m_cluster_status_isSet;
}

bool OAIClusterList_inner::is_cluster_status_Valid() const{
    return m_cluster_status_isValid;
}

QString OAIClusterList_inner::getClusterAvailabilityStatus() const {
    return m_cluster_availability_status;
}
void OAIClusterList_inner::setClusterAvailabilityStatus(const QString &cluster_availability_status) {
    m_cluster_availability_status = cluster_availability_status;
    m_cluster_availability_status_isSet = true;
}

bool OAIClusterList_inner::is_cluster_availability_status_Set() const{
    return m_cluster_availability_status_isSet;
}

bool OAIClusterList_inner::is_cluster_availability_status_Valid() const{
    return m_cluster_availability_status_isValid;
}

QString OAIClusterList_inner::getModifyStatus() const {
    return m_modify_status;
}
void OAIClusterList_inner::setModifyStatus(const QString &modify_status) {
    m_modify_status = modify_status;
    m_modify_status_isSet = true;
}

bool OAIClusterList_inner::is_modify_status_Set() const{
    return m_modify_status_isSet;
}

bool OAIClusterList_inner::is_modify_status_Valid() const{
    return m_modify_status_isValid;
}

QString OAIClusterList_inner::getMasterUsername() const {
    return m_master_username;
}
void OAIClusterList_inner::setMasterUsername(const QString &master_username) {
    m_master_username = master_username;
    m_master_username_isSet = true;
}

bool OAIClusterList_inner::is_master_username_Set() const{
    return m_master_username_isSet;
}

bool OAIClusterList_inner::is_master_username_Valid() const{
    return m_master_username_isValid;
}

QString OAIClusterList_inner::getDbName() const {
    return m_db_name;
}
void OAIClusterList_inner::setDbName(const QString &db_name) {
    m_db_name = db_name;
    m_db_name_isSet = true;
}

bool OAIClusterList_inner::is_db_name_Set() const{
    return m_db_name_isSet;
}

bool OAIClusterList_inner::is_db_name_Valid() const{
    return m_db_name_isValid;
}

OAICluster_Endpoint OAIClusterList_inner::getEndpoint() const {
    return m_endpoint;
}
void OAIClusterList_inner::setEndpoint(const OAICluster_Endpoint &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIClusterList_inner::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIClusterList_inner::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QDateTime OAIClusterList_inner::getClusterCreateTime() const {
    return m_cluster_create_time;
}
void OAIClusterList_inner::setClusterCreateTime(const QDateTime &cluster_create_time) {
    m_cluster_create_time = cluster_create_time;
    m_cluster_create_time_isSet = true;
}

bool OAIClusterList_inner::is_cluster_create_time_Set() const{
    return m_cluster_create_time_isSet;
}

bool OAIClusterList_inner::is_cluster_create_time_Valid() const{
    return m_cluster_create_time_isValid;
}

qint32 OAIClusterList_inner::getAutomatedSnapshotRetentionPeriod() const {
    return m_automated_snapshot_retention_period;
}
void OAIClusterList_inner::setAutomatedSnapshotRetentionPeriod(const qint32 &automated_snapshot_retention_period) {
    m_automated_snapshot_retention_period = automated_snapshot_retention_period;
    m_automated_snapshot_retention_period_isSet = true;
}

bool OAIClusterList_inner::is_automated_snapshot_retention_period_Set() const{
    return m_automated_snapshot_retention_period_isSet;
}

bool OAIClusterList_inner::is_automated_snapshot_retention_period_Valid() const{
    return m_automated_snapshot_retention_period_isValid;
}

qint32 OAIClusterList_inner::getManualSnapshotRetentionPeriod() const {
    return m_manual_snapshot_retention_period;
}
void OAIClusterList_inner::setManualSnapshotRetentionPeriod(const qint32 &manual_snapshot_retention_period) {
    m_manual_snapshot_retention_period = manual_snapshot_retention_period;
    m_manual_snapshot_retention_period_isSet = true;
}

bool OAIClusterList_inner::is_manual_snapshot_retention_period_Set() const{
    return m_manual_snapshot_retention_period_isSet;
}

bool OAIClusterList_inner::is_manual_snapshot_retention_period_Valid() const{
    return m_manual_snapshot_retention_period_isValid;
}

QList OAIClusterList_inner::getClusterSecurityGroups() const {
    return m_cluster_security_groups;
}
void OAIClusterList_inner::setClusterSecurityGroups(const QList &cluster_security_groups) {
    m_cluster_security_groups = cluster_security_groups;
    m_cluster_security_groups_isSet = true;
}

bool OAIClusterList_inner::is_cluster_security_groups_Set() const{
    return m_cluster_security_groups_isSet;
}

bool OAIClusterList_inner::is_cluster_security_groups_Valid() const{
    return m_cluster_security_groups_isValid;
}

QList OAIClusterList_inner::getVpcSecurityGroups() const {
    return m_vpc_security_groups;
}
void OAIClusterList_inner::setVpcSecurityGroups(const QList &vpc_security_groups) {
    m_vpc_security_groups = vpc_security_groups;
    m_vpc_security_groups_isSet = true;
}

bool OAIClusterList_inner::is_vpc_security_groups_Set() const{
    return m_vpc_security_groups_isSet;
}

bool OAIClusterList_inner::is_vpc_security_groups_Valid() const{
    return m_vpc_security_groups_isValid;
}

QList OAIClusterList_inner::getClusterParameterGroups() const {
    return m_cluster_parameter_groups;
}
void OAIClusterList_inner::setClusterParameterGroups(const QList &cluster_parameter_groups) {
    m_cluster_parameter_groups = cluster_parameter_groups;
    m_cluster_parameter_groups_isSet = true;
}

bool OAIClusterList_inner::is_cluster_parameter_groups_Set() const{
    return m_cluster_parameter_groups_isSet;
}

bool OAIClusterList_inner::is_cluster_parameter_groups_Valid() const{
    return m_cluster_parameter_groups_isValid;
}

QString OAIClusterList_inner::getClusterSubnetGroupName() const {
    return m_cluster_subnet_group_name;
}
void OAIClusterList_inner::setClusterSubnetGroupName(const QString &cluster_subnet_group_name) {
    m_cluster_subnet_group_name = cluster_subnet_group_name;
    m_cluster_subnet_group_name_isSet = true;
}

bool OAIClusterList_inner::is_cluster_subnet_group_name_Set() const{
    return m_cluster_subnet_group_name_isSet;
}

bool OAIClusterList_inner::is_cluster_subnet_group_name_Valid() const{
    return m_cluster_subnet_group_name_isValid;
}

QString OAIClusterList_inner::getVpcId() const {
    return m_vpc_id;
}
void OAIClusterList_inner::setVpcId(const QString &vpc_id) {
    m_vpc_id = vpc_id;
    m_vpc_id_isSet = true;
}

bool OAIClusterList_inner::is_vpc_id_Set() const{
    return m_vpc_id_isSet;
}

bool OAIClusterList_inner::is_vpc_id_Valid() const{
    return m_vpc_id_isValid;
}

QString OAIClusterList_inner::getAvailabilityZone() const {
    return m_availability_zone;
}
void OAIClusterList_inner::setAvailabilityZone(const QString &availability_zone) {
    m_availability_zone = availability_zone;
    m_availability_zone_isSet = true;
}

bool OAIClusterList_inner::is_availability_zone_Set() const{
    return m_availability_zone_isSet;
}

bool OAIClusterList_inner::is_availability_zone_Valid() const{
    return m_availability_zone_isValid;
}

QString OAIClusterList_inner::getPreferredMaintenanceWindow() const {
    return m_preferred_maintenance_window;
}
void OAIClusterList_inner::setPreferredMaintenanceWindow(const QString &preferred_maintenance_window) {
    m_preferred_maintenance_window = preferred_maintenance_window;
    m_preferred_maintenance_window_isSet = true;
}

bool OAIClusterList_inner::is_preferred_maintenance_window_Set() const{
    return m_preferred_maintenance_window_isSet;
}

bool OAIClusterList_inner::is_preferred_maintenance_window_Valid() const{
    return m_preferred_maintenance_window_isValid;
}

OAICluster_PendingModifiedValues OAIClusterList_inner::getPendingModifiedValues() const {
    return m_pending_modified_values;
}
void OAIClusterList_inner::setPendingModifiedValues(const OAICluster_PendingModifiedValues &pending_modified_values) {
    m_pending_modified_values = pending_modified_values;
    m_pending_modified_values_isSet = true;
}

bool OAIClusterList_inner::is_pending_modified_values_Set() const{
    return m_pending_modified_values_isSet;
}

bool OAIClusterList_inner::is_pending_modified_values_Valid() const{
    return m_pending_modified_values_isValid;
}

QString OAIClusterList_inner::getClusterVersion() const {
    return m_cluster_version;
}
void OAIClusterList_inner::setClusterVersion(const QString &cluster_version) {
    m_cluster_version = cluster_version;
    m_cluster_version_isSet = true;
}

bool OAIClusterList_inner::is_cluster_version_Set() const{
    return m_cluster_version_isSet;
}

bool OAIClusterList_inner::is_cluster_version_Valid() const{
    return m_cluster_version_isValid;
}

bool OAIClusterList_inner::getAllowVersionUpgrade() const {
    return m_allow_version_upgrade;
}
void OAIClusterList_inner::setAllowVersionUpgrade(const bool &allow_version_upgrade) {
    m_allow_version_upgrade = allow_version_upgrade;
    m_allow_version_upgrade_isSet = true;
}

bool OAIClusterList_inner::is_allow_version_upgrade_Set() const{
    return m_allow_version_upgrade_isSet;
}

bool OAIClusterList_inner::is_allow_version_upgrade_Valid() const{
    return m_allow_version_upgrade_isValid;
}

qint32 OAIClusterList_inner::getNumberOfNodes() const {
    return m_number_of_nodes;
}
void OAIClusterList_inner::setNumberOfNodes(const qint32 &number_of_nodes) {
    m_number_of_nodes = number_of_nodes;
    m_number_of_nodes_isSet = true;
}

bool OAIClusterList_inner::is_number_of_nodes_Set() const{
    return m_number_of_nodes_isSet;
}

bool OAIClusterList_inner::is_number_of_nodes_Valid() const{
    return m_number_of_nodes_isValid;
}

bool OAIClusterList_inner::getPubliclyAccessible() const {
    return m_publicly_accessible;
}
void OAIClusterList_inner::setPubliclyAccessible(const bool &publicly_accessible) {
    m_publicly_accessible = publicly_accessible;
    m_publicly_accessible_isSet = true;
}

bool OAIClusterList_inner::is_publicly_accessible_Set() const{
    return m_publicly_accessible_isSet;
}

bool OAIClusterList_inner::is_publicly_accessible_Valid() const{
    return m_publicly_accessible_isValid;
}

bool OAIClusterList_inner::getEncrypted() const {
    return m_encrypted;
}
void OAIClusterList_inner::setEncrypted(const bool &encrypted) {
    m_encrypted = encrypted;
    m_encrypted_isSet = true;
}

bool OAIClusterList_inner::is_encrypted_Set() const{
    return m_encrypted_isSet;
}

bool OAIClusterList_inner::is_encrypted_Valid() const{
    return m_encrypted_isValid;
}

OAICluster_RestoreStatus OAIClusterList_inner::getRestoreStatus() const {
    return m_restore_status;
}
void OAIClusterList_inner::setRestoreStatus(const OAICluster_RestoreStatus &restore_status) {
    m_restore_status = restore_status;
    m_restore_status_isSet = true;
}

bool OAIClusterList_inner::is_restore_status_Set() const{
    return m_restore_status_isSet;
}

bool OAIClusterList_inner::is_restore_status_Valid() const{
    return m_restore_status_isValid;
}

OAICluster_DataTransferProgress OAIClusterList_inner::getDataTransferProgress() const {
    return m_data_transfer_progress;
}
void OAIClusterList_inner::setDataTransferProgress(const OAICluster_DataTransferProgress &data_transfer_progress) {
    m_data_transfer_progress = data_transfer_progress;
    m_data_transfer_progress_isSet = true;
}

bool OAIClusterList_inner::is_data_transfer_progress_Set() const{
    return m_data_transfer_progress_isSet;
}

bool OAIClusterList_inner::is_data_transfer_progress_Valid() const{
    return m_data_transfer_progress_isValid;
}

OAICluster_HsmStatus OAIClusterList_inner::getHsmStatus() const {
    return m_hsm_status;
}
void OAIClusterList_inner::setHsmStatus(const OAICluster_HsmStatus &hsm_status) {
    m_hsm_status = hsm_status;
    m_hsm_status_isSet = true;
}

bool OAIClusterList_inner::is_hsm_status_Set() const{
    return m_hsm_status_isSet;
}

bool OAIClusterList_inner::is_hsm_status_Valid() const{
    return m_hsm_status_isValid;
}

OAICluster_ClusterSnapshotCopyStatus OAIClusterList_inner::getClusterSnapshotCopyStatus() const {
    return m_cluster_snapshot_copy_status;
}
void OAIClusterList_inner::setClusterSnapshotCopyStatus(const OAICluster_ClusterSnapshotCopyStatus &cluster_snapshot_copy_status) {
    m_cluster_snapshot_copy_status = cluster_snapshot_copy_status;
    m_cluster_snapshot_copy_status_isSet = true;
}

bool OAIClusterList_inner::is_cluster_snapshot_copy_status_Set() const{
    return m_cluster_snapshot_copy_status_isSet;
}

bool OAIClusterList_inner::is_cluster_snapshot_copy_status_Valid() const{
    return m_cluster_snapshot_copy_status_isValid;
}

QString OAIClusterList_inner::getClusterPublicKey() const {
    return m_cluster_public_key;
}
void OAIClusterList_inner::setClusterPublicKey(const QString &cluster_public_key) {
    m_cluster_public_key = cluster_public_key;
    m_cluster_public_key_isSet = true;
}

bool OAIClusterList_inner::is_cluster_public_key_Set() const{
    return m_cluster_public_key_isSet;
}

bool OAIClusterList_inner::is_cluster_public_key_Valid() const{
    return m_cluster_public_key_isValid;
}

QList OAIClusterList_inner::getClusterNodes() const {
    return m_cluster_nodes;
}
void OAIClusterList_inner::setClusterNodes(const QList &cluster_nodes) {
    m_cluster_nodes = cluster_nodes;
    m_cluster_nodes_isSet = true;
}

bool OAIClusterList_inner::is_cluster_nodes_Set() const{
    return m_cluster_nodes_isSet;
}

bool OAIClusterList_inner::is_cluster_nodes_Valid() const{
    return m_cluster_nodes_isValid;
}

OAICluster_ElasticIpStatus OAIClusterList_inner::getElasticIpStatus() const {
    return m_elastic_ip_status;
}
void OAIClusterList_inner::setElasticIpStatus(const OAICluster_ElasticIpStatus &elastic_ip_status) {
    m_elastic_ip_status = elastic_ip_status;
    m_elastic_ip_status_isSet = true;
}

bool OAIClusterList_inner::is_elastic_ip_status_Set() const{
    return m_elastic_ip_status_isSet;
}

bool OAIClusterList_inner::is_elastic_ip_status_Valid() const{
    return m_elastic_ip_status_isValid;
}

QString OAIClusterList_inner::getClusterRevisionNumber() const {
    return m_cluster_revision_number;
}
void OAIClusterList_inner::setClusterRevisionNumber(const QString &cluster_revision_number) {
    m_cluster_revision_number = cluster_revision_number;
    m_cluster_revision_number_isSet = true;
}

bool OAIClusterList_inner::is_cluster_revision_number_Set() const{
    return m_cluster_revision_number_isSet;
}

bool OAIClusterList_inner::is_cluster_revision_number_Valid() const{
    return m_cluster_revision_number_isValid;
}

QList OAIClusterList_inner::getTags() const {
    return m_tags;
}
void OAIClusterList_inner::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIClusterList_inner::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIClusterList_inner::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIClusterList_inner::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAIClusterList_inner::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAIClusterList_inner::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAIClusterList_inner::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

bool OAIClusterList_inner::getEnhancedVpcRouting() const {
    return m_enhanced_vpc_routing;
}
void OAIClusterList_inner::setEnhancedVpcRouting(const bool &enhanced_vpc_routing) {
    m_enhanced_vpc_routing = enhanced_vpc_routing;
    m_enhanced_vpc_routing_isSet = true;
}

bool OAIClusterList_inner::is_enhanced_vpc_routing_Set() const{
    return m_enhanced_vpc_routing_isSet;
}

bool OAIClusterList_inner::is_enhanced_vpc_routing_Valid() const{
    return m_enhanced_vpc_routing_isValid;
}

QList OAIClusterList_inner::getIamRoles() const {
    return m_iam_roles;
}
void OAIClusterList_inner::setIamRoles(const QList &iam_roles) {
    m_iam_roles = iam_roles;
    m_iam_roles_isSet = true;
}

bool OAIClusterList_inner::is_iam_roles_Set() const{
    return m_iam_roles_isSet;
}

bool OAIClusterList_inner::is_iam_roles_Valid() const{
    return m_iam_roles_isValid;
}

QList OAIClusterList_inner::getPendingActions() const {
    return m_pending_actions;
}
void OAIClusterList_inner::setPendingActions(const QList &pending_actions) {
    m_pending_actions = pending_actions;
    m_pending_actions_isSet = true;
}

bool OAIClusterList_inner::is_pending_actions_Set() const{
    return m_pending_actions_isSet;
}

bool OAIClusterList_inner::is_pending_actions_Valid() const{
    return m_pending_actions_isValid;
}

QString OAIClusterList_inner::getMaintenanceTrackName() const {
    return m_maintenance_track_name;
}
void OAIClusterList_inner::setMaintenanceTrackName(const QString &maintenance_track_name) {
    m_maintenance_track_name = maintenance_track_name;
    m_maintenance_track_name_isSet = true;
}

bool OAIClusterList_inner::is_maintenance_track_name_Set() const{
    return m_maintenance_track_name_isSet;
}

bool OAIClusterList_inner::is_maintenance_track_name_Valid() const{
    return m_maintenance_track_name_isValid;
}

QString OAIClusterList_inner::getElasticResizeNumberOfNodeOptions() const {
    return m_elastic_resize_number_of_node_options;
}
void OAIClusterList_inner::setElasticResizeNumberOfNodeOptions(const QString &elastic_resize_number_of_node_options) {
    m_elastic_resize_number_of_node_options = elastic_resize_number_of_node_options;
    m_elastic_resize_number_of_node_options_isSet = true;
}

bool OAIClusterList_inner::is_elastic_resize_number_of_node_options_Set() const{
    return m_elastic_resize_number_of_node_options_isSet;
}

bool OAIClusterList_inner::is_elastic_resize_number_of_node_options_Valid() const{
    return m_elastic_resize_number_of_node_options_isValid;
}

QList OAIClusterList_inner::getDeferredMaintenanceWindows() const {
    return m_deferred_maintenance_windows;
}
void OAIClusterList_inner::setDeferredMaintenanceWindows(const QList &deferred_maintenance_windows) {
    m_deferred_maintenance_windows = deferred_maintenance_windows;
    m_deferred_maintenance_windows_isSet = true;
}

bool OAIClusterList_inner::is_deferred_maintenance_windows_Set() const{
    return m_deferred_maintenance_windows_isSet;
}

bool OAIClusterList_inner::is_deferred_maintenance_windows_Valid() const{
    return m_deferred_maintenance_windows_isValid;
}

QString OAIClusterList_inner::getSnapshotScheduleIdentifier() const {
    return m_snapshot_schedule_identifier;
}
void OAIClusterList_inner::setSnapshotScheduleIdentifier(const QString &snapshot_schedule_identifier) {
    m_snapshot_schedule_identifier = snapshot_schedule_identifier;
    m_snapshot_schedule_identifier_isSet = true;
}

bool OAIClusterList_inner::is_snapshot_schedule_identifier_Set() const{
    return m_snapshot_schedule_identifier_isSet;
}

bool OAIClusterList_inner::is_snapshot_schedule_identifier_Valid() const{
    return m_snapshot_schedule_identifier_isValid;
}

OAIScheduleState OAIClusterList_inner::getSnapshotScheduleState() const {
    return m_snapshot_schedule_state;
}
void OAIClusterList_inner::setSnapshotScheduleState(const OAIScheduleState &snapshot_schedule_state) {
    m_snapshot_schedule_state = snapshot_schedule_state;
    m_snapshot_schedule_state_isSet = true;
}

bool OAIClusterList_inner::is_snapshot_schedule_state_Set() const{
    return m_snapshot_schedule_state_isSet;
}

bool OAIClusterList_inner::is_snapshot_schedule_state_Valid() const{
    return m_snapshot_schedule_state_isValid;
}

QDateTime OAIClusterList_inner::getExpectedNextSnapshotScheduleTime() const {
    return m_expected_next_snapshot_schedule_time;
}
void OAIClusterList_inner::setExpectedNextSnapshotScheduleTime(const QDateTime &expected_next_snapshot_schedule_time) {
    m_expected_next_snapshot_schedule_time = expected_next_snapshot_schedule_time;
    m_expected_next_snapshot_schedule_time_isSet = true;
}

bool OAIClusterList_inner::is_expected_next_snapshot_schedule_time_Set() const{
    return m_expected_next_snapshot_schedule_time_isSet;
}

bool OAIClusterList_inner::is_expected_next_snapshot_schedule_time_Valid() const{
    return m_expected_next_snapshot_schedule_time_isValid;
}

QString OAIClusterList_inner::getExpectedNextSnapshotScheduleTimeStatus() const {
    return m_expected_next_snapshot_schedule_time_status;
}
void OAIClusterList_inner::setExpectedNextSnapshotScheduleTimeStatus(const QString &expected_next_snapshot_schedule_time_status) {
    m_expected_next_snapshot_schedule_time_status = expected_next_snapshot_schedule_time_status;
    m_expected_next_snapshot_schedule_time_status_isSet = true;
}

bool OAIClusterList_inner::is_expected_next_snapshot_schedule_time_status_Set() const{
    return m_expected_next_snapshot_schedule_time_status_isSet;
}

bool OAIClusterList_inner::is_expected_next_snapshot_schedule_time_status_Valid() const{
    return m_expected_next_snapshot_schedule_time_status_isValid;
}

QDateTime OAIClusterList_inner::getNextMaintenanceWindowStartTime() const {
    return m_next_maintenance_window_start_time;
}
void OAIClusterList_inner::setNextMaintenanceWindowStartTime(const QDateTime &next_maintenance_window_start_time) {
    m_next_maintenance_window_start_time = next_maintenance_window_start_time;
    m_next_maintenance_window_start_time_isSet = true;
}

bool OAIClusterList_inner::is_next_maintenance_window_start_time_Set() const{
    return m_next_maintenance_window_start_time_isSet;
}

bool OAIClusterList_inner::is_next_maintenance_window_start_time_Valid() const{
    return m_next_maintenance_window_start_time_isValid;
}

OAICluster_ResizeInfo OAIClusterList_inner::getResizeInfo() const {
    return m_resize_info;
}
void OAIClusterList_inner::setResizeInfo(const OAICluster_ResizeInfo &resize_info) {
    m_resize_info = resize_info;
    m_resize_info_isSet = true;
}

bool OAIClusterList_inner::is_resize_info_Set() const{
    return m_resize_info_isSet;
}

bool OAIClusterList_inner::is_resize_info_Valid() const{
    return m_resize_info_isValid;
}

QString OAIClusterList_inner::getAvailabilityZoneRelocationStatus() const {
    return m_availability_zone_relocation_status;
}
void OAIClusterList_inner::setAvailabilityZoneRelocationStatus(const QString &availability_zone_relocation_status) {
    m_availability_zone_relocation_status = availability_zone_relocation_status;
    m_availability_zone_relocation_status_isSet = true;
}

bool OAIClusterList_inner::is_availability_zone_relocation_status_Set() const{
    return m_availability_zone_relocation_status_isSet;
}

bool OAIClusterList_inner::is_availability_zone_relocation_status_Valid() const{
    return m_availability_zone_relocation_status_isValid;
}

QString OAIClusterList_inner::getClusterNamespaceArn() const {
    return m_cluster_namespace_arn;
}
void OAIClusterList_inner::setClusterNamespaceArn(const QString &cluster_namespace_arn) {
    m_cluster_namespace_arn = cluster_namespace_arn;
    m_cluster_namespace_arn_isSet = true;
}

bool OAIClusterList_inner::is_cluster_namespace_arn_Set() const{
    return m_cluster_namespace_arn_isSet;
}

bool OAIClusterList_inner::is_cluster_namespace_arn_Valid() const{
    return m_cluster_namespace_arn_isValid;
}

qint32 OAIClusterList_inner::getTotalStorageCapacityInMegaBytes() const {
    return m_total_storage_capacity_in_mega_bytes;
}
void OAIClusterList_inner::setTotalStorageCapacityInMegaBytes(const qint32 &total_storage_capacity_in_mega_bytes) {
    m_total_storage_capacity_in_mega_bytes = total_storage_capacity_in_mega_bytes;
    m_total_storage_capacity_in_mega_bytes_isSet = true;
}

bool OAIClusterList_inner::is_total_storage_capacity_in_mega_bytes_Set() const{
    return m_total_storage_capacity_in_mega_bytes_isSet;
}

bool OAIClusterList_inner::is_total_storage_capacity_in_mega_bytes_Valid() const{
    return m_total_storage_capacity_in_mega_bytes_isValid;
}

OAICluster_AquaConfiguration OAIClusterList_inner::getAquaConfiguration() const {
    return m_aqua_configuration;
}
void OAIClusterList_inner::setAquaConfiguration(const OAICluster_AquaConfiguration &aqua_configuration) {
    m_aqua_configuration = aqua_configuration;
    m_aqua_configuration_isSet = true;
}

bool OAIClusterList_inner::is_aqua_configuration_Set() const{
    return m_aqua_configuration_isSet;
}

bool OAIClusterList_inner::is_aqua_configuration_Valid() const{
    return m_aqua_configuration_isValid;
}

QString OAIClusterList_inner::getDefaultIamRoleArn() const {
    return m_default_iam_role_arn;
}
void OAIClusterList_inner::setDefaultIamRoleArn(const QString &default_iam_role_arn) {
    m_default_iam_role_arn = default_iam_role_arn;
    m_default_iam_role_arn_isSet = true;
}

bool OAIClusterList_inner::is_default_iam_role_arn_Set() const{
    return m_default_iam_role_arn_isSet;
}

bool OAIClusterList_inner::is_default_iam_role_arn_Valid() const{
    return m_default_iam_role_arn_isValid;
}

OAICluster_ReservedNodeExchangeStatus OAIClusterList_inner::getReservedNodeExchangeStatus() const {
    return m_reserved_node_exchange_status;
}
void OAIClusterList_inner::setReservedNodeExchangeStatus(const OAICluster_ReservedNodeExchangeStatus &reserved_node_exchange_status) {
    m_reserved_node_exchange_status = reserved_node_exchange_status;
    m_reserved_node_exchange_status_isSet = true;
}

bool OAIClusterList_inner::is_reserved_node_exchange_status_Set() const{
    return m_reserved_node_exchange_status_isSet;
}

bool OAIClusterList_inner::is_reserved_node_exchange_status_Valid() const{
    return m_reserved_node_exchange_status_isValid;
}

QString OAIClusterList_inner::getCustomDomainName() const {
    return m_custom_domain_name;
}
void OAIClusterList_inner::setCustomDomainName(const QString &custom_domain_name) {
    m_custom_domain_name = custom_domain_name;
    m_custom_domain_name_isSet = true;
}

bool OAIClusterList_inner::is_custom_domain_name_Set() const{
    return m_custom_domain_name_isSet;
}

bool OAIClusterList_inner::is_custom_domain_name_Valid() const{
    return m_custom_domain_name_isValid;
}

QString OAIClusterList_inner::getCustomDomainCertificateArn() const {
    return m_custom_domain_certificate_arn;
}
void OAIClusterList_inner::setCustomDomainCertificateArn(const QString &custom_domain_certificate_arn) {
    m_custom_domain_certificate_arn = custom_domain_certificate_arn;
    m_custom_domain_certificate_arn_isSet = true;
}

bool OAIClusterList_inner::is_custom_domain_certificate_arn_Set() const{
    return m_custom_domain_certificate_arn_isSet;
}

bool OAIClusterList_inner::is_custom_domain_certificate_arn_Valid() const{
    return m_custom_domain_certificate_arn_isValid;
}

QDateTime OAIClusterList_inner::getCustomDomainCertificateExpiryDate() const {
    return m_custom_domain_certificate_expiry_date;
}
void OAIClusterList_inner::setCustomDomainCertificateExpiryDate(const QDateTime &custom_domain_certificate_expiry_date) {
    m_custom_domain_certificate_expiry_date = custom_domain_certificate_expiry_date;
    m_custom_domain_certificate_expiry_date_isSet = true;
}

bool OAIClusterList_inner::is_custom_domain_certificate_expiry_date_Set() const{
    return m_custom_domain_certificate_expiry_date_isSet;
}

bool OAIClusterList_inner::is_custom_domain_certificate_expiry_date_Valid() const{
    return m_custom_domain_certificate_expiry_date_isValid;
}

bool OAIClusterList_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_availability_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modify_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_automated_snapshot_retention_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_snapshot_retention_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_security_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_security_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_parameter_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_subnet_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_maintenance_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_modified_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_version_upgrade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publicly_accessible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restore_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_transfer_progress.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hsm_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_snapshot_copy_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_public_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_nodes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_elastic_ip_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_revision_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enhanced_vpc_routing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_roles.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance_track_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elastic_resize_number_of_node_options_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deferred_maintenance_windows.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_schedule_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_schedule_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_next_snapshot_schedule_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_next_snapshot_schedule_time_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_maintenance_window_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resize_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zone_relocation_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_namespace_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_storage_capacity_in_mega_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aqua_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_iam_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_node_exchange_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_domain_certificate_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_domain_certificate_expiry_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClusterList_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
