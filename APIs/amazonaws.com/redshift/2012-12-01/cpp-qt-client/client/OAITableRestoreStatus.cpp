/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableRestoreStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableRestoreStatus::OAITableRestoreStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableRestoreStatus::OAITableRestoreStatus() {
    this->initializeModel();
}

OAITableRestoreStatus::~OAITableRestoreStatus() {}

void OAITableRestoreStatus::initializeModel() {

    m_table_restore_request_id_isSet = false;
    m_table_restore_request_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_request_time_isSet = false;
    m_request_time_isValid = false;

    m_progress_in_mega_bytes_isSet = false;
    m_progress_in_mega_bytes_isValid = false;

    m_total_data_in_mega_bytes_isSet = false;
    m_total_data_in_mega_bytes_isValid = false;

    m_cluster_identifier_isSet = false;
    m_cluster_identifier_isValid = false;

    m_snapshot_identifier_isSet = false;
    m_snapshot_identifier_isValid = false;

    m_source_database_name_isSet = false;
    m_source_database_name_isValid = false;

    m_source_schema_name_isSet = false;
    m_source_schema_name_isValid = false;

    m_source_table_name_isSet = false;
    m_source_table_name_isValid = false;

    m_target_database_name_isSet = false;
    m_target_database_name_isValid = false;

    m_target_schema_name_isSet = false;
    m_target_schema_name_isValid = false;

    m_new_table_name_isSet = false;
    m_new_table_name_isValid = false;
}

void OAITableRestoreStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableRestoreStatus::fromJsonObject(QJsonObject json) {

    m_table_restore_request_id_isValid = ::OpenAPI::fromJsonValue(m_table_restore_request_id, json[QString("TableRestoreRequestId")]);
    m_table_restore_request_id_isSet = !json[QString("TableRestoreRequestId")].isNull() && m_table_restore_request_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_request_time_isValid = ::OpenAPI::fromJsonValue(m_request_time, json[QString("RequestTime")]);
    m_request_time_isSet = !json[QString("RequestTime")].isNull() && m_request_time_isValid;

    m_progress_in_mega_bytes_isValid = ::OpenAPI::fromJsonValue(m_progress_in_mega_bytes, json[QString("ProgressInMegaBytes")]);
    m_progress_in_mega_bytes_isSet = !json[QString("ProgressInMegaBytes")].isNull() && m_progress_in_mega_bytes_isValid;

    m_total_data_in_mega_bytes_isValid = ::OpenAPI::fromJsonValue(m_total_data_in_mega_bytes, json[QString("TotalDataInMegaBytes")]);
    m_total_data_in_mega_bytes_isSet = !json[QString("TotalDataInMegaBytes")].isNull() && m_total_data_in_mega_bytes_isValid;

    m_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_cluster_identifier, json[QString("ClusterIdentifier")]);
    m_cluster_identifier_isSet = !json[QString("ClusterIdentifier")].isNull() && m_cluster_identifier_isValid;

    m_snapshot_identifier_isValid = ::OpenAPI::fromJsonValue(m_snapshot_identifier, json[QString("SnapshotIdentifier")]);
    m_snapshot_identifier_isSet = !json[QString("SnapshotIdentifier")].isNull() && m_snapshot_identifier_isValid;

    m_source_database_name_isValid = ::OpenAPI::fromJsonValue(m_source_database_name, json[QString("SourceDatabaseName")]);
    m_source_database_name_isSet = !json[QString("SourceDatabaseName")].isNull() && m_source_database_name_isValid;

    m_source_schema_name_isValid = ::OpenAPI::fromJsonValue(m_source_schema_name, json[QString("SourceSchemaName")]);
    m_source_schema_name_isSet = !json[QString("SourceSchemaName")].isNull() && m_source_schema_name_isValid;

    m_source_table_name_isValid = ::OpenAPI::fromJsonValue(m_source_table_name, json[QString("SourceTableName")]);
    m_source_table_name_isSet = !json[QString("SourceTableName")].isNull() && m_source_table_name_isValid;

    m_target_database_name_isValid = ::OpenAPI::fromJsonValue(m_target_database_name, json[QString("TargetDatabaseName")]);
    m_target_database_name_isSet = !json[QString("TargetDatabaseName")].isNull() && m_target_database_name_isValid;

    m_target_schema_name_isValid = ::OpenAPI::fromJsonValue(m_target_schema_name, json[QString("TargetSchemaName")]);
    m_target_schema_name_isSet = !json[QString("TargetSchemaName")].isNull() && m_target_schema_name_isValid;

    m_new_table_name_isValid = ::OpenAPI::fromJsonValue(m_new_table_name, json[QString("NewTableName")]);
    m_new_table_name_isSet = !json[QString("NewTableName")].isNull() && m_new_table_name_isValid;
}

QString OAITableRestoreStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableRestoreStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_table_restore_request_id_isSet) {
        obj.insert(QString("TableRestoreRequestId"), ::OpenAPI::toJsonValue(m_table_restore_request_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_request_time_isSet) {
        obj.insert(QString("RequestTime"), ::OpenAPI::toJsonValue(m_request_time));
    }
    if (m_progress_in_mega_bytes_isSet) {
        obj.insert(QString("ProgressInMegaBytes"), ::OpenAPI::toJsonValue(m_progress_in_mega_bytes));
    }
    if (m_total_data_in_mega_bytes_isSet) {
        obj.insert(QString("TotalDataInMegaBytes"), ::OpenAPI::toJsonValue(m_total_data_in_mega_bytes));
    }
    if (m_cluster_identifier_isSet) {
        obj.insert(QString("ClusterIdentifier"), ::OpenAPI::toJsonValue(m_cluster_identifier));
    }
    if (m_snapshot_identifier_isSet) {
        obj.insert(QString("SnapshotIdentifier"), ::OpenAPI::toJsonValue(m_snapshot_identifier));
    }
    if (m_source_database_name_isSet) {
        obj.insert(QString("SourceDatabaseName"), ::OpenAPI::toJsonValue(m_source_database_name));
    }
    if (m_source_schema_name_isSet) {
        obj.insert(QString("SourceSchemaName"), ::OpenAPI::toJsonValue(m_source_schema_name));
    }
    if (m_source_table_name_isSet) {
        obj.insert(QString("SourceTableName"), ::OpenAPI::toJsonValue(m_source_table_name));
    }
    if (m_target_database_name_isSet) {
        obj.insert(QString("TargetDatabaseName"), ::OpenAPI::toJsonValue(m_target_database_name));
    }
    if (m_target_schema_name_isSet) {
        obj.insert(QString("TargetSchemaName"), ::OpenAPI::toJsonValue(m_target_schema_name));
    }
    if (m_new_table_name_isSet) {
        obj.insert(QString("NewTableName"), ::OpenAPI::toJsonValue(m_new_table_name));
    }
    return obj;
}

QString OAITableRestoreStatus::getTableRestoreRequestId() const {
    return m_table_restore_request_id;
}
void OAITableRestoreStatus::setTableRestoreRequestId(const QString &table_restore_request_id) {
    m_table_restore_request_id = table_restore_request_id;
    m_table_restore_request_id_isSet = true;
}

bool OAITableRestoreStatus::is_table_restore_request_id_Set() const{
    return m_table_restore_request_id_isSet;
}

bool OAITableRestoreStatus::is_table_restore_request_id_Valid() const{
    return m_table_restore_request_id_isValid;
}

OAITableRestoreStatusType OAITableRestoreStatus::getStatus() const {
    return m_status;
}
void OAITableRestoreStatus::setStatus(const OAITableRestoreStatusType &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITableRestoreStatus::is_status_Set() const{
    return m_status_isSet;
}

bool OAITableRestoreStatus::is_status_Valid() const{
    return m_status_isValid;
}

QString OAITableRestoreStatus::getMessage() const {
    return m_message;
}
void OAITableRestoreStatus::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAITableRestoreStatus::is_message_Set() const{
    return m_message_isSet;
}

bool OAITableRestoreStatus::is_message_Valid() const{
    return m_message_isValid;
}

QDateTime OAITableRestoreStatus::getRequestTime() const {
    return m_request_time;
}
void OAITableRestoreStatus::setRequestTime(const QDateTime &request_time) {
    m_request_time = request_time;
    m_request_time_isSet = true;
}

bool OAITableRestoreStatus::is_request_time_Set() const{
    return m_request_time_isSet;
}

bool OAITableRestoreStatus::is_request_time_Valid() const{
    return m_request_time_isValid;
}

qint32 OAITableRestoreStatus::getProgressInMegaBytes() const {
    return m_progress_in_mega_bytes;
}
void OAITableRestoreStatus::setProgressInMegaBytes(const qint32 &progress_in_mega_bytes) {
    m_progress_in_mega_bytes = progress_in_mega_bytes;
    m_progress_in_mega_bytes_isSet = true;
}

bool OAITableRestoreStatus::is_progress_in_mega_bytes_Set() const{
    return m_progress_in_mega_bytes_isSet;
}

bool OAITableRestoreStatus::is_progress_in_mega_bytes_Valid() const{
    return m_progress_in_mega_bytes_isValid;
}

qint32 OAITableRestoreStatus::getTotalDataInMegaBytes() const {
    return m_total_data_in_mega_bytes;
}
void OAITableRestoreStatus::setTotalDataInMegaBytes(const qint32 &total_data_in_mega_bytes) {
    m_total_data_in_mega_bytes = total_data_in_mega_bytes;
    m_total_data_in_mega_bytes_isSet = true;
}

bool OAITableRestoreStatus::is_total_data_in_mega_bytes_Set() const{
    return m_total_data_in_mega_bytes_isSet;
}

bool OAITableRestoreStatus::is_total_data_in_mega_bytes_Valid() const{
    return m_total_data_in_mega_bytes_isValid;
}

QString OAITableRestoreStatus::getClusterIdentifier() const {
    return m_cluster_identifier;
}
void OAITableRestoreStatus::setClusterIdentifier(const QString &cluster_identifier) {
    m_cluster_identifier = cluster_identifier;
    m_cluster_identifier_isSet = true;
}

bool OAITableRestoreStatus::is_cluster_identifier_Set() const{
    return m_cluster_identifier_isSet;
}

bool OAITableRestoreStatus::is_cluster_identifier_Valid() const{
    return m_cluster_identifier_isValid;
}

QString OAITableRestoreStatus::getSnapshotIdentifier() const {
    return m_snapshot_identifier;
}
void OAITableRestoreStatus::setSnapshotIdentifier(const QString &snapshot_identifier) {
    m_snapshot_identifier = snapshot_identifier;
    m_snapshot_identifier_isSet = true;
}

bool OAITableRestoreStatus::is_snapshot_identifier_Set() const{
    return m_snapshot_identifier_isSet;
}

bool OAITableRestoreStatus::is_snapshot_identifier_Valid() const{
    return m_snapshot_identifier_isValid;
}

QString OAITableRestoreStatus::getSourceDatabaseName() const {
    return m_source_database_name;
}
void OAITableRestoreStatus::setSourceDatabaseName(const QString &source_database_name) {
    m_source_database_name = source_database_name;
    m_source_database_name_isSet = true;
}

bool OAITableRestoreStatus::is_source_database_name_Set() const{
    return m_source_database_name_isSet;
}

bool OAITableRestoreStatus::is_source_database_name_Valid() const{
    return m_source_database_name_isValid;
}

QString OAITableRestoreStatus::getSourceSchemaName() const {
    return m_source_schema_name;
}
void OAITableRestoreStatus::setSourceSchemaName(const QString &source_schema_name) {
    m_source_schema_name = source_schema_name;
    m_source_schema_name_isSet = true;
}

bool OAITableRestoreStatus::is_source_schema_name_Set() const{
    return m_source_schema_name_isSet;
}

bool OAITableRestoreStatus::is_source_schema_name_Valid() const{
    return m_source_schema_name_isValid;
}

QString OAITableRestoreStatus::getSourceTableName() const {
    return m_source_table_name;
}
void OAITableRestoreStatus::setSourceTableName(const QString &source_table_name) {
    m_source_table_name = source_table_name;
    m_source_table_name_isSet = true;
}

bool OAITableRestoreStatus::is_source_table_name_Set() const{
    return m_source_table_name_isSet;
}

bool OAITableRestoreStatus::is_source_table_name_Valid() const{
    return m_source_table_name_isValid;
}

QString OAITableRestoreStatus::getTargetDatabaseName() const {
    return m_target_database_name;
}
void OAITableRestoreStatus::setTargetDatabaseName(const QString &target_database_name) {
    m_target_database_name = target_database_name;
    m_target_database_name_isSet = true;
}

bool OAITableRestoreStatus::is_target_database_name_Set() const{
    return m_target_database_name_isSet;
}

bool OAITableRestoreStatus::is_target_database_name_Valid() const{
    return m_target_database_name_isValid;
}

QString OAITableRestoreStatus::getTargetSchemaName() const {
    return m_target_schema_name;
}
void OAITableRestoreStatus::setTargetSchemaName(const QString &target_schema_name) {
    m_target_schema_name = target_schema_name;
    m_target_schema_name_isSet = true;
}

bool OAITableRestoreStatus::is_target_schema_name_Set() const{
    return m_target_schema_name_isSet;
}

bool OAITableRestoreStatus::is_target_schema_name_Valid() const{
    return m_target_schema_name_isValid;
}

QString OAITableRestoreStatus::getNewTableName() const {
    return m_new_table_name;
}
void OAITableRestoreStatus::setNewTableName(const QString &new_table_name) {
    m_new_table_name = new_table_name;
    m_new_table_name_isSet = true;
}

bool OAITableRestoreStatus::is_new_table_name_Set() const{
    return m_new_table_name_isSet;
}

bool OAITableRestoreStatus::is_new_table_name_Valid() const{
    return m_new_table_name_isValid;
}

bool OAITableRestoreStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_table_restore_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_in_mega_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_data_in_mega_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_schema_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_schema_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableRestoreStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
