/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeEventsMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeEventsMessage::OAIDescribeEventsMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeEventsMessage::OAIDescribeEventsMessage() {
    this->initializeModel();
}

OAIDescribeEventsMessage::~OAIDescribeEventsMessage() {}

void OAIDescribeEventsMessage::initializeModel() {

    m_source_identifier_isSet = false;
    m_source_identifier_isValid = false;

    m_source_type_isSet = false;
    m_source_type_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_max_records_isSet = false;
    m_max_records_isValid = false;

    m_marker_isSet = false;
    m_marker_isValid = false;
}

void OAIDescribeEventsMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeEventsMessage::fromJsonObject(QJsonObject json) {

    m_source_identifier_isValid = ::OpenAPI::fromJsonValue(m_source_identifier, json[QString("SourceIdentifier")]);
    m_source_identifier_isSet = !json[QString("SourceIdentifier")].isNull() && m_source_identifier_isValid;

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("SourceType")]);
    m_source_type_isSet = !json[QString("SourceType")].isNull() && m_source_type_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("Duration")]);
    m_duration_isSet = !json[QString("Duration")].isNull() && m_duration_isValid;

    m_max_records_isValid = ::OpenAPI::fromJsonValue(m_max_records, json[QString("MaxRecords")]);
    m_max_records_isSet = !json[QString("MaxRecords")].isNull() && m_max_records_isValid;

    m_marker_isValid = ::OpenAPI::fromJsonValue(m_marker, json[QString("Marker")]);
    m_marker_isSet = !json[QString("Marker")].isNull() && m_marker_isValid;
}

QString OAIDescribeEventsMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeEventsMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_source_identifier_isSet) {
        obj.insert(QString("SourceIdentifier"), ::OpenAPI::toJsonValue(m_source_identifier));
    }
    if (m_source_type.isSet()) {
        obj.insert(QString("SourceType"), ::OpenAPI::toJsonValue(m_source_type));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_duration_isSet) {
        obj.insert(QString("Duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_max_records_isSet) {
        obj.insert(QString("MaxRecords"), ::OpenAPI::toJsonValue(m_max_records));
    }
    if (m_marker_isSet) {
        obj.insert(QString("Marker"), ::OpenAPI::toJsonValue(m_marker));
    }
    return obj;
}

QString OAIDescribeEventsMessage::getSourceIdentifier() const {
    return m_source_identifier;
}
void OAIDescribeEventsMessage::setSourceIdentifier(const QString &source_identifier) {
    m_source_identifier = source_identifier;
    m_source_identifier_isSet = true;
}

bool OAIDescribeEventsMessage::is_source_identifier_Set() const{
    return m_source_identifier_isSet;
}

bool OAIDescribeEventsMessage::is_source_identifier_Valid() const{
    return m_source_identifier_isValid;
}

OAISourceType OAIDescribeEventsMessage::getSourceType() const {
    return m_source_type;
}
void OAIDescribeEventsMessage::setSourceType(const OAISourceType &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAIDescribeEventsMessage::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAIDescribeEventsMessage::is_source_type_Valid() const{
    return m_source_type_isValid;
}

QDateTime OAIDescribeEventsMessage::getStartTime() const {
    return m_start_time;
}
void OAIDescribeEventsMessage::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIDescribeEventsMessage::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIDescribeEventsMessage::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIDescribeEventsMessage::getEndTime() const {
    return m_end_time;
}
void OAIDescribeEventsMessage::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIDescribeEventsMessage::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIDescribeEventsMessage::is_end_time_Valid() const{
    return m_end_time_isValid;
}

qint32 OAIDescribeEventsMessage::getDuration() const {
    return m_duration;
}
void OAIDescribeEventsMessage::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIDescribeEventsMessage::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIDescribeEventsMessage::is_duration_Valid() const{
    return m_duration_isValid;
}

qint32 OAIDescribeEventsMessage::getMaxRecords() const {
    return m_max_records;
}
void OAIDescribeEventsMessage::setMaxRecords(const qint32 &max_records) {
    m_max_records = max_records;
    m_max_records_isSet = true;
}

bool OAIDescribeEventsMessage::is_max_records_Set() const{
    return m_max_records_isSet;
}

bool OAIDescribeEventsMessage::is_max_records_Valid() const{
    return m_max_records_isValid;
}

QString OAIDescribeEventsMessage::getMarker() const {
    return m_marker;
}
void OAIDescribeEventsMessage::setMarker(const QString &marker) {
    m_marker = marker;
    m_marker_isSet = true;
}

bool OAIDescribeEventsMessage::is_marker_Set() const{
    return m_marker_isSet;
}

bool OAIDescribeEventsMessage::is_marker_Valid() const{
    return m_marker_isValid;
}

bool OAIDescribeEventsMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_records_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marker_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeEventsMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
