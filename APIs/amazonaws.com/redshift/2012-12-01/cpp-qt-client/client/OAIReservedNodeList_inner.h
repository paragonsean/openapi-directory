/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIReservedNodeList_inner.h
 *
 * 
 */

#ifndef OAIReservedNodeList_inner_H
#define OAIReservedNodeList_inner_H

#include <QJsonObject>

#include "OAIReservedNodeOfferingType.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIReservedNodeList_inner : public OAIObject {
public:
    OAIReservedNodeList_inner();
    OAIReservedNodeList_inner(QString json);
    ~OAIReservedNodeList_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getReservedNodeId() const;
    void setReservedNodeId(const QString &reserved_node_id);
    bool is_reserved_node_id_Set() const;
    bool is_reserved_node_id_Valid() const;

    QString getReservedNodeOfferingId() const;
    void setReservedNodeOfferingId(const QString &reserved_node_offering_id);
    bool is_reserved_node_offering_id_Set() const;
    bool is_reserved_node_offering_id_Valid() const;

    QString getNodeType() const;
    void setNodeType(const QString &node_type);
    bool is_node_type_Set() const;
    bool is_node_type_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    qint32 getDuration() const;
    void setDuration(const qint32 &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    double getFixedPrice() const;
    void setFixedPrice(const double &fixed_price);
    bool is_fixed_price_Set() const;
    bool is_fixed_price_Valid() const;

    double getUsagePrice() const;
    void setUsagePrice(const double &usage_price);
    bool is_usage_price_Set() const;
    bool is_usage_price_Valid() const;

    QString getCurrencyCode() const;
    void setCurrencyCode(const QString &currency_code);
    bool is_currency_code_Set() const;
    bool is_currency_code_Valid() const;

    qint32 getNodeCount() const;
    void setNodeCount(const qint32 &node_count);
    bool is_node_count_Set() const;
    bool is_node_count_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getOfferingType() const;
    void setOfferingType(const QString &offering_type);
    bool is_offering_type_Set() const;
    bool is_offering_type_Valid() const;

    QList getRecurringCharges() const;
    void setRecurringCharges(const QList &recurring_charges);
    bool is_recurring_charges_Set() const;
    bool is_recurring_charges_Valid() const;

    OAIReservedNodeOfferingType getReservedNodeOfferingType() const;
    void setReservedNodeOfferingType(const OAIReservedNodeOfferingType &reserved_node_offering_type);
    bool is_reserved_node_offering_type_Set() const;
    bool is_reserved_node_offering_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_reserved_node_id;
    bool m_reserved_node_id_isSet;
    bool m_reserved_node_id_isValid;

    QString m_reserved_node_offering_id;
    bool m_reserved_node_offering_id_isSet;
    bool m_reserved_node_offering_id_isValid;

    QString m_node_type;
    bool m_node_type_isSet;
    bool m_node_type_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    qint32 m_duration;
    bool m_duration_isSet;
    bool m_duration_isValid;

    double m_fixed_price;
    bool m_fixed_price_isSet;
    bool m_fixed_price_isValid;

    double m_usage_price;
    bool m_usage_price_isSet;
    bool m_usage_price_isValid;

    QString m_currency_code;
    bool m_currency_code_isSet;
    bool m_currency_code_isValid;

    qint32 m_node_count;
    bool m_node_count_isSet;
    bool m_node_count_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_offering_type;
    bool m_offering_type_isSet;
    bool m_offering_type_isValid;

    QList m_recurring_charges;
    bool m_recurring_charges_isSet;
    bool m_recurring_charges_isValid;

    OAIReservedNodeOfferingType m_reserved_node_offering_type;
    bool m_reserved_node_offering_type_isSet;
    bool m_reserved_node_offering_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIReservedNodeList_inner)

#endif // OAIReservedNodeList_inner_H
