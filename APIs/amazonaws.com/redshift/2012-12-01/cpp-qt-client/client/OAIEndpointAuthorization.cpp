/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndpointAuthorization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndpointAuthorization::OAIEndpointAuthorization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndpointAuthorization::OAIEndpointAuthorization() {
    this->initializeModel();
}

OAIEndpointAuthorization::~OAIEndpointAuthorization() {}

void OAIEndpointAuthorization::initializeModel() {

    m_grantor_isSet = false;
    m_grantor_isValid = false;

    m_grantee_isSet = false;
    m_grantee_isValid = false;

    m_cluster_identifier_isSet = false;
    m_cluster_identifier_isValid = false;

    m_authorize_time_isSet = false;
    m_authorize_time_isValid = false;

    m_cluster_status_isSet = false;
    m_cluster_status_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_allowed_all_vpcs_isSet = false;
    m_allowed_all_vpcs_isValid = false;

    m_allowed_vpcs_isSet = false;
    m_allowed_vpcs_isValid = false;

    m_endpoint_count_isSet = false;
    m_endpoint_count_isValid = false;
}

void OAIEndpointAuthorization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndpointAuthorization::fromJsonObject(QJsonObject json) {

    m_grantor_isValid = ::OpenAPI::fromJsonValue(m_grantor, json[QString("Grantor")]);
    m_grantor_isSet = !json[QString("Grantor")].isNull() && m_grantor_isValid;

    m_grantee_isValid = ::OpenAPI::fromJsonValue(m_grantee, json[QString("Grantee")]);
    m_grantee_isSet = !json[QString("Grantee")].isNull() && m_grantee_isValid;

    m_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_cluster_identifier, json[QString("ClusterIdentifier")]);
    m_cluster_identifier_isSet = !json[QString("ClusterIdentifier")].isNull() && m_cluster_identifier_isValid;

    m_authorize_time_isValid = ::OpenAPI::fromJsonValue(m_authorize_time, json[QString("AuthorizeTime")]);
    m_authorize_time_isSet = !json[QString("AuthorizeTime")].isNull() && m_authorize_time_isValid;

    m_cluster_status_isValid = ::OpenAPI::fromJsonValue(m_cluster_status, json[QString("ClusterStatus")]);
    m_cluster_status_isSet = !json[QString("ClusterStatus")].isNull() && m_cluster_status_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_allowed_all_vpcs_isValid = ::OpenAPI::fromJsonValue(m_allowed_all_vpcs, json[QString("AllowedAllVPCs")]);
    m_allowed_all_vpcs_isSet = !json[QString("AllowedAllVPCs")].isNull() && m_allowed_all_vpcs_isValid;

    m_allowed_vpcs_isValid = ::OpenAPI::fromJsonValue(m_allowed_vpcs, json[QString("AllowedVPCs")]);
    m_allowed_vpcs_isSet = !json[QString("AllowedVPCs")].isNull() && m_allowed_vpcs_isValid;

    m_endpoint_count_isValid = ::OpenAPI::fromJsonValue(m_endpoint_count, json[QString("EndpointCount")]);
    m_endpoint_count_isSet = !json[QString("EndpointCount")].isNull() && m_endpoint_count_isValid;
}

QString OAIEndpointAuthorization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndpointAuthorization::asJsonObject() const {
    QJsonObject obj;
    if (m_grantor_isSet) {
        obj.insert(QString("Grantor"), ::OpenAPI::toJsonValue(m_grantor));
    }
    if (m_grantee_isSet) {
        obj.insert(QString("Grantee"), ::OpenAPI::toJsonValue(m_grantee));
    }
    if (m_cluster_identifier_isSet) {
        obj.insert(QString("ClusterIdentifier"), ::OpenAPI::toJsonValue(m_cluster_identifier));
    }
    if (m_authorize_time_isSet) {
        obj.insert(QString("AuthorizeTime"), ::OpenAPI::toJsonValue(m_authorize_time));
    }
    if (m_cluster_status_isSet) {
        obj.insert(QString("ClusterStatus"), ::OpenAPI::toJsonValue(m_cluster_status));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_allowed_all_vpcs_isSet) {
        obj.insert(QString("AllowedAllVPCs"), ::OpenAPI::toJsonValue(m_allowed_all_vpcs));
    }
    if (m_allowed_vpcs.isSet()) {
        obj.insert(QString("AllowedVPCs"), ::OpenAPI::toJsonValue(m_allowed_vpcs));
    }
    if (m_endpoint_count_isSet) {
        obj.insert(QString("EndpointCount"), ::OpenAPI::toJsonValue(m_endpoint_count));
    }
    return obj;
}

QString OAIEndpointAuthorization::getGrantor() const {
    return m_grantor;
}
void OAIEndpointAuthorization::setGrantor(const QString &grantor) {
    m_grantor = grantor;
    m_grantor_isSet = true;
}

bool OAIEndpointAuthorization::is_grantor_Set() const{
    return m_grantor_isSet;
}

bool OAIEndpointAuthorization::is_grantor_Valid() const{
    return m_grantor_isValid;
}

QString OAIEndpointAuthorization::getGrantee() const {
    return m_grantee;
}
void OAIEndpointAuthorization::setGrantee(const QString &grantee) {
    m_grantee = grantee;
    m_grantee_isSet = true;
}

bool OAIEndpointAuthorization::is_grantee_Set() const{
    return m_grantee_isSet;
}

bool OAIEndpointAuthorization::is_grantee_Valid() const{
    return m_grantee_isValid;
}

QString OAIEndpointAuthorization::getClusterIdentifier() const {
    return m_cluster_identifier;
}
void OAIEndpointAuthorization::setClusterIdentifier(const QString &cluster_identifier) {
    m_cluster_identifier = cluster_identifier;
    m_cluster_identifier_isSet = true;
}

bool OAIEndpointAuthorization::is_cluster_identifier_Set() const{
    return m_cluster_identifier_isSet;
}

bool OAIEndpointAuthorization::is_cluster_identifier_Valid() const{
    return m_cluster_identifier_isValid;
}

QDateTime OAIEndpointAuthorization::getAuthorizeTime() const {
    return m_authorize_time;
}
void OAIEndpointAuthorization::setAuthorizeTime(const QDateTime &authorize_time) {
    m_authorize_time = authorize_time;
    m_authorize_time_isSet = true;
}

bool OAIEndpointAuthorization::is_authorize_time_Set() const{
    return m_authorize_time_isSet;
}

bool OAIEndpointAuthorization::is_authorize_time_Valid() const{
    return m_authorize_time_isValid;
}

QString OAIEndpointAuthorization::getClusterStatus() const {
    return m_cluster_status;
}
void OAIEndpointAuthorization::setClusterStatus(const QString &cluster_status) {
    m_cluster_status = cluster_status;
    m_cluster_status_isSet = true;
}

bool OAIEndpointAuthorization::is_cluster_status_Set() const{
    return m_cluster_status_isSet;
}

bool OAIEndpointAuthorization::is_cluster_status_Valid() const{
    return m_cluster_status_isValid;
}

OAIAuthorizationStatus OAIEndpointAuthorization::getStatus() const {
    return m_status;
}
void OAIEndpointAuthorization::setStatus(const OAIAuthorizationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIEndpointAuthorization::is_status_Set() const{
    return m_status_isSet;
}

bool OAIEndpointAuthorization::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIEndpointAuthorization::getAllowedAllVpcs() const {
    return m_allowed_all_vpcs;
}
void OAIEndpointAuthorization::setAllowedAllVpcs(const bool &allowed_all_vpcs) {
    m_allowed_all_vpcs = allowed_all_vpcs;
    m_allowed_all_vpcs_isSet = true;
}

bool OAIEndpointAuthorization::is_allowed_all_vpcs_Set() const{
    return m_allowed_all_vpcs_isSet;
}

bool OAIEndpointAuthorization::is_allowed_all_vpcs_Valid() const{
    return m_allowed_all_vpcs_isValid;
}

QList OAIEndpointAuthorization::getAllowedVpcs() const {
    return m_allowed_vpcs;
}
void OAIEndpointAuthorization::setAllowedVpcs(const QList &allowed_vpcs) {
    m_allowed_vpcs = allowed_vpcs;
    m_allowed_vpcs_isSet = true;
}

bool OAIEndpointAuthorization::is_allowed_vpcs_Set() const{
    return m_allowed_vpcs_isSet;
}

bool OAIEndpointAuthorization::is_allowed_vpcs_Valid() const{
    return m_allowed_vpcs_isValid;
}

qint32 OAIEndpointAuthorization::getEndpointCount() const {
    return m_endpoint_count;
}
void OAIEndpointAuthorization::setEndpointCount(const qint32 &endpoint_count) {
    m_endpoint_count = endpoint_count;
    m_endpoint_count_isSet = true;
}

bool OAIEndpointAuthorization::is_endpoint_count_Set() const{
    return m_endpoint_count_isSet;
}

bool OAIEndpointAuthorization::is_endpoint_count_Valid() const{
    return m_endpoint_count_isValid;
}

bool OAIEndpointAuthorization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_grantor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grantee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorize_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_all_vpcs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_vpcs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndpointAuthorization::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
