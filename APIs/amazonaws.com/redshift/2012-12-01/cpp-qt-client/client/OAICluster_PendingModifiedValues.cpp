/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICluster_PendingModifiedValues.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICluster_PendingModifiedValues::OAICluster_PendingModifiedValues(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICluster_PendingModifiedValues::OAICluster_PendingModifiedValues() {
    this->initializeModel();
}

OAICluster_PendingModifiedValues::~OAICluster_PendingModifiedValues() {}

void OAICluster_PendingModifiedValues::initializeModel() {

    m_master_user_password_isSet = false;
    m_master_user_password_isValid = false;

    m_node_type_isSet = false;
    m_node_type_isValid = false;

    m_number_of_nodes_isSet = false;
    m_number_of_nodes_isValid = false;

    m_cluster_type_isSet = false;
    m_cluster_type_isValid = false;

    m_cluster_version_isSet = false;
    m_cluster_version_isValid = false;

    m_automated_snapshot_retention_period_isSet = false;
    m_automated_snapshot_retention_period_isValid = false;

    m_cluster_identifier_isSet = false;
    m_cluster_identifier_isValid = false;

    m_publicly_accessible_isSet = false;
    m_publicly_accessible_isValid = false;

    m_enhanced_vpc_routing_isSet = false;
    m_enhanced_vpc_routing_isValid = false;

    m_maintenance_track_name_isSet = false;
    m_maintenance_track_name_isValid = false;

    m_encryption_type_isSet = false;
    m_encryption_type_isValid = false;
}

void OAICluster_PendingModifiedValues::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICluster_PendingModifiedValues::fromJsonObject(QJsonObject json) {

    m_master_user_password_isValid = ::OpenAPI::fromJsonValue(m_master_user_password, json[QString("MasterUserPassword")]);
    m_master_user_password_isSet = !json[QString("MasterUserPassword")].isNull() && m_master_user_password_isValid;

    m_node_type_isValid = ::OpenAPI::fromJsonValue(m_node_type, json[QString("NodeType")]);
    m_node_type_isSet = !json[QString("NodeType")].isNull() && m_node_type_isValid;

    m_number_of_nodes_isValid = ::OpenAPI::fromJsonValue(m_number_of_nodes, json[QString("NumberOfNodes")]);
    m_number_of_nodes_isSet = !json[QString("NumberOfNodes")].isNull() && m_number_of_nodes_isValid;

    m_cluster_type_isValid = ::OpenAPI::fromJsonValue(m_cluster_type, json[QString("ClusterType")]);
    m_cluster_type_isSet = !json[QString("ClusterType")].isNull() && m_cluster_type_isValid;

    m_cluster_version_isValid = ::OpenAPI::fromJsonValue(m_cluster_version, json[QString("ClusterVersion")]);
    m_cluster_version_isSet = !json[QString("ClusterVersion")].isNull() && m_cluster_version_isValid;

    m_automated_snapshot_retention_period_isValid = ::OpenAPI::fromJsonValue(m_automated_snapshot_retention_period, json[QString("AutomatedSnapshotRetentionPeriod")]);
    m_automated_snapshot_retention_period_isSet = !json[QString("AutomatedSnapshotRetentionPeriod")].isNull() && m_automated_snapshot_retention_period_isValid;

    m_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_cluster_identifier, json[QString("ClusterIdentifier")]);
    m_cluster_identifier_isSet = !json[QString("ClusterIdentifier")].isNull() && m_cluster_identifier_isValid;

    m_publicly_accessible_isValid = ::OpenAPI::fromJsonValue(m_publicly_accessible, json[QString("PubliclyAccessible")]);
    m_publicly_accessible_isSet = !json[QString("PubliclyAccessible")].isNull() && m_publicly_accessible_isValid;

    m_enhanced_vpc_routing_isValid = ::OpenAPI::fromJsonValue(m_enhanced_vpc_routing, json[QString("EnhancedVpcRouting")]);
    m_enhanced_vpc_routing_isSet = !json[QString("EnhancedVpcRouting")].isNull() && m_enhanced_vpc_routing_isValid;

    m_maintenance_track_name_isValid = ::OpenAPI::fromJsonValue(m_maintenance_track_name, json[QString("MaintenanceTrackName")]);
    m_maintenance_track_name_isSet = !json[QString("MaintenanceTrackName")].isNull() && m_maintenance_track_name_isValid;

    m_encryption_type_isValid = ::OpenAPI::fromJsonValue(m_encryption_type, json[QString("EncryptionType")]);
    m_encryption_type_isSet = !json[QString("EncryptionType")].isNull() && m_encryption_type_isValid;
}

QString OAICluster_PendingModifiedValues::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICluster_PendingModifiedValues::asJsonObject() const {
    QJsonObject obj;
    if (m_master_user_password_isSet) {
        obj.insert(QString("MasterUserPassword"), ::OpenAPI::toJsonValue(m_master_user_password));
    }
    if (m_node_type_isSet) {
        obj.insert(QString("NodeType"), ::OpenAPI::toJsonValue(m_node_type));
    }
    if (m_number_of_nodes_isSet) {
        obj.insert(QString("NumberOfNodes"), ::OpenAPI::toJsonValue(m_number_of_nodes));
    }
    if (m_cluster_type_isSet) {
        obj.insert(QString("ClusterType"), ::OpenAPI::toJsonValue(m_cluster_type));
    }
    if (m_cluster_version_isSet) {
        obj.insert(QString("ClusterVersion"), ::OpenAPI::toJsonValue(m_cluster_version));
    }
    if (m_automated_snapshot_retention_period_isSet) {
        obj.insert(QString("AutomatedSnapshotRetentionPeriod"), ::OpenAPI::toJsonValue(m_automated_snapshot_retention_period));
    }
    if (m_cluster_identifier_isSet) {
        obj.insert(QString("ClusterIdentifier"), ::OpenAPI::toJsonValue(m_cluster_identifier));
    }
    if (m_publicly_accessible_isSet) {
        obj.insert(QString("PubliclyAccessible"), ::OpenAPI::toJsonValue(m_publicly_accessible));
    }
    if (m_enhanced_vpc_routing_isSet) {
        obj.insert(QString("EnhancedVpcRouting"), ::OpenAPI::toJsonValue(m_enhanced_vpc_routing));
    }
    if (m_maintenance_track_name_isSet) {
        obj.insert(QString("MaintenanceTrackName"), ::OpenAPI::toJsonValue(m_maintenance_track_name));
    }
    if (m_encryption_type_isSet) {
        obj.insert(QString("EncryptionType"), ::OpenAPI::toJsonValue(m_encryption_type));
    }
    return obj;
}

QString OAICluster_PendingModifiedValues::getMasterUserPassword() const {
    return m_master_user_password;
}
void OAICluster_PendingModifiedValues::setMasterUserPassword(const QString &master_user_password) {
    m_master_user_password = master_user_password;
    m_master_user_password_isSet = true;
}

bool OAICluster_PendingModifiedValues::is_master_user_password_Set() const{
    return m_master_user_password_isSet;
}

bool OAICluster_PendingModifiedValues::is_master_user_password_Valid() const{
    return m_master_user_password_isValid;
}

QString OAICluster_PendingModifiedValues::getNodeType() const {
    return m_node_type;
}
void OAICluster_PendingModifiedValues::setNodeType(const QString &node_type) {
    m_node_type = node_type;
    m_node_type_isSet = true;
}

bool OAICluster_PendingModifiedValues::is_node_type_Set() const{
    return m_node_type_isSet;
}

bool OAICluster_PendingModifiedValues::is_node_type_Valid() const{
    return m_node_type_isValid;
}

qint32 OAICluster_PendingModifiedValues::getNumberOfNodes() const {
    return m_number_of_nodes;
}
void OAICluster_PendingModifiedValues::setNumberOfNodes(const qint32 &number_of_nodes) {
    m_number_of_nodes = number_of_nodes;
    m_number_of_nodes_isSet = true;
}

bool OAICluster_PendingModifiedValues::is_number_of_nodes_Set() const{
    return m_number_of_nodes_isSet;
}

bool OAICluster_PendingModifiedValues::is_number_of_nodes_Valid() const{
    return m_number_of_nodes_isValid;
}

QString OAICluster_PendingModifiedValues::getClusterType() const {
    return m_cluster_type;
}
void OAICluster_PendingModifiedValues::setClusterType(const QString &cluster_type) {
    m_cluster_type = cluster_type;
    m_cluster_type_isSet = true;
}

bool OAICluster_PendingModifiedValues::is_cluster_type_Set() const{
    return m_cluster_type_isSet;
}

bool OAICluster_PendingModifiedValues::is_cluster_type_Valid() const{
    return m_cluster_type_isValid;
}

QString OAICluster_PendingModifiedValues::getClusterVersion() const {
    return m_cluster_version;
}
void OAICluster_PendingModifiedValues::setClusterVersion(const QString &cluster_version) {
    m_cluster_version = cluster_version;
    m_cluster_version_isSet = true;
}

bool OAICluster_PendingModifiedValues::is_cluster_version_Set() const{
    return m_cluster_version_isSet;
}

bool OAICluster_PendingModifiedValues::is_cluster_version_Valid() const{
    return m_cluster_version_isValid;
}

qint32 OAICluster_PendingModifiedValues::getAutomatedSnapshotRetentionPeriod() const {
    return m_automated_snapshot_retention_period;
}
void OAICluster_PendingModifiedValues::setAutomatedSnapshotRetentionPeriod(const qint32 &automated_snapshot_retention_period) {
    m_automated_snapshot_retention_period = automated_snapshot_retention_period;
    m_automated_snapshot_retention_period_isSet = true;
}

bool OAICluster_PendingModifiedValues::is_automated_snapshot_retention_period_Set() const{
    return m_automated_snapshot_retention_period_isSet;
}

bool OAICluster_PendingModifiedValues::is_automated_snapshot_retention_period_Valid() const{
    return m_automated_snapshot_retention_period_isValid;
}

QString OAICluster_PendingModifiedValues::getClusterIdentifier() const {
    return m_cluster_identifier;
}
void OAICluster_PendingModifiedValues::setClusterIdentifier(const QString &cluster_identifier) {
    m_cluster_identifier = cluster_identifier;
    m_cluster_identifier_isSet = true;
}

bool OAICluster_PendingModifiedValues::is_cluster_identifier_Set() const{
    return m_cluster_identifier_isSet;
}

bool OAICluster_PendingModifiedValues::is_cluster_identifier_Valid() const{
    return m_cluster_identifier_isValid;
}

bool OAICluster_PendingModifiedValues::getPubliclyAccessible() const {
    return m_publicly_accessible;
}
void OAICluster_PendingModifiedValues::setPubliclyAccessible(const bool &publicly_accessible) {
    m_publicly_accessible = publicly_accessible;
    m_publicly_accessible_isSet = true;
}

bool OAICluster_PendingModifiedValues::is_publicly_accessible_Set() const{
    return m_publicly_accessible_isSet;
}

bool OAICluster_PendingModifiedValues::is_publicly_accessible_Valid() const{
    return m_publicly_accessible_isValid;
}

bool OAICluster_PendingModifiedValues::getEnhancedVpcRouting() const {
    return m_enhanced_vpc_routing;
}
void OAICluster_PendingModifiedValues::setEnhancedVpcRouting(const bool &enhanced_vpc_routing) {
    m_enhanced_vpc_routing = enhanced_vpc_routing;
    m_enhanced_vpc_routing_isSet = true;
}

bool OAICluster_PendingModifiedValues::is_enhanced_vpc_routing_Set() const{
    return m_enhanced_vpc_routing_isSet;
}

bool OAICluster_PendingModifiedValues::is_enhanced_vpc_routing_Valid() const{
    return m_enhanced_vpc_routing_isValid;
}

QString OAICluster_PendingModifiedValues::getMaintenanceTrackName() const {
    return m_maintenance_track_name;
}
void OAICluster_PendingModifiedValues::setMaintenanceTrackName(const QString &maintenance_track_name) {
    m_maintenance_track_name = maintenance_track_name;
    m_maintenance_track_name_isSet = true;
}

bool OAICluster_PendingModifiedValues::is_maintenance_track_name_Set() const{
    return m_maintenance_track_name_isSet;
}

bool OAICluster_PendingModifiedValues::is_maintenance_track_name_Valid() const{
    return m_maintenance_track_name_isValid;
}

QString OAICluster_PendingModifiedValues::getEncryptionType() const {
    return m_encryption_type;
}
void OAICluster_PendingModifiedValues::setEncryptionType(const QString &encryption_type) {
    m_encryption_type = encryption_type;
    m_encryption_type_isSet = true;
}

bool OAICluster_PendingModifiedValues::is_encryption_type_Set() const{
    return m_encryption_type_isSet;
}

bool OAICluster_PendingModifiedValues::is_encryption_type_Valid() const{
    return m_encryption_type_isValid;
}

bool OAICluster_PendingModifiedValues::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_master_user_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_automated_snapshot_retention_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publicly_accessible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enhanced_vpc_routing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance_track_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICluster_PendingModifiedValues::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
