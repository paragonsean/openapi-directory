/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISnapshot.h
 *
 * Describes a snapshot.
 */

#ifndef OAISnapshot_H
#define OAISnapshot_H

#include <QJsonObject>

#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISnapshot : public OAIObject {
public:
    OAISnapshot();
    OAISnapshot(QString json);
    ~OAISnapshot() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getSnapshotIdentifier() const;
    void setSnapshotIdentifier(const QString &snapshot_identifier);
    bool is_snapshot_identifier_Set() const;
    bool is_snapshot_identifier_Valid() const;

    QString getClusterIdentifier() const;
    void setClusterIdentifier(const QString &cluster_identifier);
    bool is_cluster_identifier_Set() const;
    bool is_cluster_identifier_Valid() const;

    QDateTime getSnapshotCreateTime() const;
    void setSnapshotCreateTime(const QDateTime &snapshot_create_time);
    bool is_snapshot_create_time_Set() const;
    bool is_snapshot_create_time_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    QString getAvailabilityZone() const;
    void setAvailabilityZone(const QString &availability_zone);
    bool is_availability_zone_Set() const;
    bool is_availability_zone_Valid() const;

    QDateTime getClusterCreateTime() const;
    void setClusterCreateTime(const QDateTime &cluster_create_time);
    bool is_cluster_create_time_Set() const;
    bool is_cluster_create_time_Valid() const;

    QString getMasterUsername() const;
    void setMasterUsername(const QString &master_username);
    bool is_master_username_Set() const;
    bool is_master_username_Valid() const;

    QString getClusterVersion() const;
    void setClusterVersion(const QString &cluster_version);
    bool is_cluster_version_Set() const;
    bool is_cluster_version_Valid() const;

    QString getEngineFullVersion() const;
    void setEngineFullVersion(const QString &engine_full_version);
    bool is_engine_full_version_Set() const;
    bool is_engine_full_version_Valid() const;

    QString getSnapshotType() const;
    void setSnapshotType(const QString &snapshot_type);
    bool is_snapshot_type_Set() const;
    bool is_snapshot_type_Valid() const;

    QString getNodeType() const;
    void setNodeType(const QString &node_type);
    bool is_node_type_Set() const;
    bool is_node_type_Valid() const;

    qint32 getNumberOfNodes() const;
    void setNumberOfNodes(const qint32 &number_of_nodes);
    bool is_number_of_nodes_Set() const;
    bool is_number_of_nodes_Valid() const;

    QString getDbName() const;
    void setDbName(const QString &db_name);
    bool is_db_name_Set() const;
    bool is_db_name_Valid() const;

    QString getVpcId() const;
    void setVpcId(const QString &vpc_id);
    bool is_vpc_id_Set() const;
    bool is_vpc_id_Valid() const;

    bool getEncrypted() const;
    void setEncrypted(const bool &encrypted);
    bool is_encrypted_Set() const;
    bool is_encrypted_Valid() const;

    QString getKmsKeyId() const;
    void setKmsKeyId(const QString &kms_key_id);
    bool is_kms_key_id_Set() const;
    bool is_kms_key_id_Valid() const;

    bool getEncryptedWithHsm() const;
    void setEncryptedWithHsm(const bool &encrypted_with_hsm);
    bool is_encrypted_with_hsm_Set() const;
    bool is_encrypted_with_hsm_Valid() const;

    QList getAccountsWithRestoreAccess() const;
    void setAccountsWithRestoreAccess(const QList &accounts_with_restore_access);
    bool is_accounts_with_restore_access_Set() const;
    bool is_accounts_with_restore_access_Valid() const;

    QString getOwnerAccount() const;
    void setOwnerAccount(const QString &owner_account);
    bool is_owner_account_Set() const;
    bool is_owner_account_Valid() const;

    double getTotalBackupSizeInMegaBytes() const;
    void setTotalBackupSizeInMegaBytes(const double &total_backup_size_in_mega_bytes);
    bool is_total_backup_size_in_mega_bytes_Set() const;
    bool is_total_backup_size_in_mega_bytes_Valid() const;

    double getActualIncrementalBackupSizeInMegaBytes() const;
    void setActualIncrementalBackupSizeInMegaBytes(const double &actual_incremental_backup_size_in_mega_bytes);
    bool is_actual_incremental_backup_size_in_mega_bytes_Set() const;
    bool is_actual_incremental_backup_size_in_mega_bytes_Valid() const;

    double getBackupProgressInMegaBytes() const;
    void setBackupProgressInMegaBytes(const double &backup_progress_in_mega_bytes);
    bool is_backup_progress_in_mega_bytes_Set() const;
    bool is_backup_progress_in_mega_bytes_Valid() const;

    double getCurrentBackupRateInMegaBytesPerSecond() const;
    void setCurrentBackupRateInMegaBytesPerSecond(const double &current_backup_rate_in_mega_bytes_per_second);
    bool is_current_backup_rate_in_mega_bytes_per_second_Set() const;
    bool is_current_backup_rate_in_mega_bytes_per_second_Valid() const;

    qint32 getEstimatedSecondsToCompletion() const;
    void setEstimatedSecondsToCompletion(const qint32 &estimated_seconds_to_completion);
    bool is_estimated_seconds_to_completion_Set() const;
    bool is_estimated_seconds_to_completion_Valid() const;

    qint32 getElapsedTimeInSeconds() const;
    void setElapsedTimeInSeconds(const qint32 &elapsed_time_in_seconds);
    bool is_elapsed_time_in_seconds_Set() const;
    bool is_elapsed_time_in_seconds_Valid() const;

    QString getSourceRegion() const;
    void setSourceRegion(const QString &source_region);
    bool is_source_region_Set() const;
    bool is_source_region_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QList getRestorableNodeTypes() const;
    void setRestorableNodeTypes(const QList &restorable_node_types);
    bool is_restorable_node_types_Set() const;
    bool is_restorable_node_types_Valid() const;

    bool getEnhancedVpcRouting() const;
    void setEnhancedVpcRouting(const bool &enhanced_vpc_routing);
    bool is_enhanced_vpc_routing_Set() const;
    bool is_enhanced_vpc_routing_Valid() const;

    QString getMaintenanceTrackName() const;
    void setMaintenanceTrackName(const QString &maintenance_track_name);
    bool is_maintenance_track_name_Set() const;
    bool is_maintenance_track_name_Valid() const;

    qint32 getManualSnapshotRetentionPeriod() const;
    void setManualSnapshotRetentionPeriod(const qint32 &manual_snapshot_retention_period);
    bool is_manual_snapshot_retention_period_Set() const;
    bool is_manual_snapshot_retention_period_Valid() const;

    qint32 getManualSnapshotRemainingDays() const;
    void setManualSnapshotRemainingDays(const qint32 &manual_snapshot_remaining_days);
    bool is_manual_snapshot_remaining_days_Set() const;
    bool is_manual_snapshot_remaining_days_Valid() const;

    QDateTime getSnapshotRetentionStartTime() const;
    void setSnapshotRetentionStartTime(const QDateTime &snapshot_retention_start_time);
    bool is_snapshot_retention_start_time_Set() const;
    bool is_snapshot_retention_start_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_snapshot_identifier;
    bool m_snapshot_identifier_isSet;
    bool m_snapshot_identifier_isValid;

    QString m_cluster_identifier;
    bool m_cluster_identifier_isSet;
    bool m_cluster_identifier_isValid;

    QDateTime m_snapshot_create_time;
    bool m_snapshot_create_time_isSet;
    bool m_snapshot_create_time_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    QString m_availability_zone;
    bool m_availability_zone_isSet;
    bool m_availability_zone_isValid;

    QDateTime m_cluster_create_time;
    bool m_cluster_create_time_isSet;
    bool m_cluster_create_time_isValid;

    QString m_master_username;
    bool m_master_username_isSet;
    bool m_master_username_isValid;

    QString m_cluster_version;
    bool m_cluster_version_isSet;
    bool m_cluster_version_isValid;

    QString m_engine_full_version;
    bool m_engine_full_version_isSet;
    bool m_engine_full_version_isValid;

    QString m_snapshot_type;
    bool m_snapshot_type_isSet;
    bool m_snapshot_type_isValid;

    QString m_node_type;
    bool m_node_type_isSet;
    bool m_node_type_isValid;

    qint32 m_number_of_nodes;
    bool m_number_of_nodes_isSet;
    bool m_number_of_nodes_isValid;

    QString m_db_name;
    bool m_db_name_isSet;
    bool m_db_name_isValid;

    QString m_vpc_id;
    bool m_vpc_id_isSet;
    bool m_vpc_id_isValid;

    bool m_encrypted;
    bool m_encrypted_isSet;
    bool m_encrypted_isValid;

    QString m_kms_key_id;
    bool m_kms_key_id_isSet;
    bool m_kms_key_id_isValid;

    bool m_encrypted_with_hsm;
    bool m_encrypted_with_hsm_isSet;
    bool m_encrypted_with_hsm_isValid;

    QList m_accounts_with_restore_access;
    bool m_accounts_with_restore_access_isSet;
    bool m_accounts_with_restore_access_isValid;

    QString m_owner_account;
    bool m_owner_account_isSet;
    bool m_owner_account_isValid;

    double m_total_backup_size_in_mega_bytes;
    bool m_total_backup_size_in_mega_bytes_isSet;
    bool m_total_backup_size_in_mega_bytes_isValid;

    double m_actual_incremental_backup_size_in_mega_bytes;
    bool m_actual_incremental_backup_size_in_mega_bytes_isSet;
    bool m_actual_incremental_backup_size_in_mega_bytes_isValid;

    double m_backup_progress_in_mega_bytes;
    bool m_backup_progress_in_mega_bytes_isSet;
    bool m_backup_progress_in_mega_bytes_isValid;

    double m_current_backup_rate_in_mega_bytes_per_second;
    bool m_current_backup_rate_in_mega_bytes_per_second_isSet;
    bool m_current_backup_rate_in_mega_bytes_per_second_isValid;

    qint32 m_estimated_seconds_to_completion;
    bool m_estimated_seconds_to_completion_isSet;
    bool m_estimated_seconds_to_completion_isValid;

    qint32 m_elapsed_time_in_seconds;
    bool m_elapsed_time_in_seconds_isSet;
    bool m_elapsed_time_in_seconds_isValid;

    QString m_source_region;
    bool m_source_region_isSet;
    bool m_source_region_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QList m_restorable_node_types;
    bool m_restorable_node_types_isSet;
    bool m_restorable_node_types_isValid;

    bool m_enhanced_vpc_routing;
    bool m_enhanced_vpc_routing_isSet;
    bool m_enhanced_vpc_routing_isValid;

    QString m_maintenance_track_name;
    bool m_maintenance_track_name_isSet;
    bool m_maintenance_track_name_isValid;

    qint32 m_manual_snapshot_retention_period;
    bool m_manual_snapshot_retention_period_isSet;
    bool m_manual_snapshot_retention_period_isValid;

    qint32 m_manual_snapshot_remaining_days;
    bool m_manual_snapshot_remaining_days_isSet;
    bool m_manual_snapshot_remaining_days_isValid;

    QDateTime m_snapshot_retention_start_time;
    bool m_snapshot_retention_start_time_isSet;
    bool m_snapshot_retention_start_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISnapshot)

#endif // OAISnapshot_H
