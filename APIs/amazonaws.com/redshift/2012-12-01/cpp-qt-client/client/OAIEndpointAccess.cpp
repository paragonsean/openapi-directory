/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndpointAccess.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndpointAccess::OAIEndpointAccess(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndpointAccess::OAIEndpointAccess() {
    this->initializeModel();
}

OAIEndpointAccess::~OAIEndpointAccess() {}

void OAIEndpointAccess::initializeModel() {

    m_cluster_identifier_isSet = false;
    m_cluster_identifier_isValid = false;

    m_resource_owner_isSet = false;
    m_resource_owner_isValid = false;

    m_subnet_group_name_isSet = false;
    m_subnet_group_name_isValid = false;

    m_endpoint_status_isSet = false;
    m_endpoint_status_isValid = false;

    m_endpoint_name_isSet = false;
    m_endpoint_name_isValid = false;

    m_endpoint_create_time_isSet = false;
    m_endpoint_create_time_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_vpc_security_groups_isSet = false;
    m_vpc_security_groups_isValid = false;

    m_vpc_endpoint_isSet = false;
    m_vpc_endpoint_isValid = false;
}

void OAIEndpointAccess::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndpointAccess::fromJsonObject(QJsonObject json) {

    m_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_cluster_identifier, json[QString("ClusterIdentifier")]);
    m_cluster_identifier_isSet = !json[QString("ClusterIdentifier")].isNull() && m_cluster_identifier_isValid;

    m_resource_owner_isValid = ::OpenAPI::fromJsonValue(m_resource_owner, json[QString("ResourceOwner")]);
    m_resource_owner_isSet = !json[QString("ResourceOwner")].isNull() && m_resource_owner_isValid;

    m_subnet_group_name_isValid = ::OpenAPI::fromJsonValue(m_subnet_group_name, json[QString("SubnetGroupName")]);
    m_subnet_group_name_isSet = !json[QString("SubnetGroupName")].isNull() && m_subnet_group_name_isValid;

    m_endpoint_status_isValid = ::OpenAPI::fromJsonValue(m_endpoint_status, json[QString("EndpointStatus")]);
    m_endpoint_status_isSet = !json[QString("EndpointStatus")].isNull() && m_endpoint_status_isValid;

    m_endpoint_name_isValid = ::OpenAPI::fromJsonValue(m_endpoint_name, json[QString("EndpointName")]);
    m_endpoint_name_isSet = !json[QString("EndpointName")].isNull() && m_endpoint_name_isValid;

    m_endpoint_create_time_isValid = ::OpenAPI::fromJsonValue(m_endpoint_create_time, json[QString("EndpointCreateTime")]);
    m_endpoint_create_time_isSet = !json[QString("EndpointCreateTime")].isNull() && m_endpoint_create_time_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("Port")]);
    m_port_isSet = !json[QString("Port")].isNull() && m_port_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("Address")]);
    m_address_isSet = !json[QString("Address")].isNull() && m_address_isValid;

    m_vpc_security_groups_isValid = ::OpenAPI::fromJsonValue(m_vpc_security_groups, json[QString("VpcSecurityGroups")]);
    m_vpc_security_groups_isSet = !json[QString("VpcSecurityGroups")].isNull() && m_vpc_security_groups_isValid;

    m_vpc_endpoint_isValid = ::OpenAPI::fromJsonValue(m_vpc_endpoint, json[QString("VpcEndpoint")]);
    m_vpc_endpoint_isSet = !json[QString("VpcEndpoint")].isNull() && m_vpc_endpoint_isValid;
}

QString OAIEndpointAccess::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndpointAccess::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_identifier_isSet) {
        obj.insert(QString("ClusterIdentifier"), ::OpenAPI::toJsonValue(m_cluster_identifier));
    }
    if (m_resource_owner_isSet) {
        obj.insert(QString("ResourceOwner"), ::OpenAPI::toJsonValue(m_resource_owner));
    }
    if (m_subnet_group_name_isSet) {
        obj.insert(QString("SubnetGroupName"), ::OpenAPI::toJsonValue(m_subnet_group_name));
    }
    if (m_endpoint_status_isSet) {
        obj.insert(QString("EndpointStatus"), ::OpenAPI::toJsonValue(m_endpoint_status));
    }
    if (m_endpoint_name_isSet) {
        obj.insert(QString("EndpointName"), ::OpenAPI::toJsonValue(m_endpoint_name));
    }
    if (m_endpoint_create_time_isSet) {
        obj.insert(QString("EndpointCreateTime"), ::OpenAPI::toJsonValue(m_endpoint_create_time));
    }
    if (m_port_isSet) {
        obj.insert(QString("Port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_address_isSet) {
        obj.insert(QString("Address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_vpc_security_groups.isSet()) {
        obj.insert(QString("VpcSecurityGroups"), ::OpenAPI::toJsonValue(m_vpc_security_groups));
    }
    if (m_vpc_endpoint.isSet()) {
        obj.insert(QString("VpcEndpoint"), ::OpenAPI::toJsonValue(m_vpc_endpoint));
    }
    return obj;
}

QString OAIEndpointAccess::getClusterIdentifier() const {
    return m_cluster_identifier;
}
void OAIEndpointAccess::setClusterIdentifier(const QString &cluster_identifier) {
    m_cluster_identifier = cluster_identifier;
    m_cluster_identifier_isSet = true;
}

bool OAIEndpointAccess::is_cluster_identifier_Set() const{
    return m_cluster_identifier_isSet;
}

bool OAIEndpointAccess::is_cluster_identifier_Valid() const{
    return m_cluster_identifier_isValid;
}

QString OAIEndpointAccess::getResourceOwner() const {
    return m_resource_owner;
}
void OAIEndpointAccess::setResourceOwner(const QString &resource_owner) {
    m_resource_owner = resource_owner;
    m_resource_owner_isSet = true;
}

bool OAIEndpointAccess::is_resource_owner_Set() const{
    return m_resource_owner_isSet;
}

bool OAIEndpointAccess::is_resource_owner_Valid() const{
    return m_resource_owner_isValid;
}

QString OAIEndpointAccess::getSubnetGroupName() const {
    return m_subnet_group_name;
}
void OAIEndpointAccess::setSubnetGroupName(const QString &subnet_group_name) {
    m_subnet_group_name = subnet_group_name;
    m_subnet_group_name_isSet = true;
}

bool OAIEndpointAccess::is_subnet_group_name_Set() const{
    return m_subnet_group_name_isSet;
}

bool OAIEndpointAccess::is_subnet_group_name_Valid() const{
    return m_subnet_group_name_isValid;
}

QString OAIEndpointAccess::getEndpointStatus() const {
    return m_endpoint_status;
}
void OAIEndpointAccess::setEndpointStatus(const QString &endpoint_status) {
    m_endpoint_status = endpoint_status;
    m_endpoint_status_isSet = true;
}

bool OAIEndpointAccess::is_endpoint_status_Set() const{
    return m_endpoint_status_isSet;
}

bool OAIEndpointAccess::is_endpoint_status_Valid() const{
    return m_endpoint_status_isValid;
}

QString OAIEndpointAccess::getEndpointName() const {
    return m_endpoint_name;
}
void OAIEndpointAccess::setEndpointName(const QString &endpoint_name) {
    m_endpoint_name = endpoint_name;
    m_endpoint_name_isSet = true;
}

bool OAIEndpointAccess::is_endpoint_name_Set() const{
    return m_endpoint_name_isSet;
}

bool OAIEndpointAccess::is_endpoint_name_Valid() const{
    return m_endpoint_name_isValid;
}

QDateTime OAIEndpointAccess::getEndpointCreateTime() const {
    return m_endpoint_create_time;
}
void OAIEndpointAccess::setEndpointCreateTime(const QDateTime &endpoint_create_time) {
    m_endpoint_create_time = endpoint_create_time;
    m_endpoint_create_time_isSet = true;
}

bool OAIEndpointAccess::is_endpoint_create_time_Set() const{
    return m_endpoint_create_time_isSet;
}

bool OAIEndpointAccess::is_endpoint_create_time_Valid() const{
    return m_endpoint_create_time_isValid;
}

qint32 OAIEndpointAccess::getPort() const {
    return m_port;
}
void OAIEndpointAccess::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIEndpointAccess::is_port_Set() const{
    return m_port_isSet;
}

bool OAIEndpointAccess::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIEndpointAccess::getAddress() const {
    return m_address;
}
void OAIEndpointAccess::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIEndpointAccess::is_address_Set() const{
    return m_address_isSet;
}

bool OAIEndpointAccess::is_address_Valid() const{
    return m_address_isValid;
}

QList OAIEndpointAccess::getVpcSecurityGroups() const {
    return m_vpc_security_groups;
}
void OAIEndpointAccess::setVpcSecurityGroups(const QList &vpc_security_groups) {
    m_vpc_security_groups = vpc_security_groups;
    m_vpc_security_groups_isSet = true;
}

bool OAIEndpointAccess::is_vpc_security_groups_Set() const{
    return m_vpc_security_groups_isSet;
}

bool OAIEndpointAccess::is_vpc_security_groups_Valid() const{
    return m_vpc_security_groups_isValid;
}

OAIVpcEndpoint OAIEndpointAccess::getVpcEndpoint() const {
    return m_vpc_endpoint;
}
void OAIEndpointAccess::setVpcEndpoint(const OAIVpcEndpoint &vpc_endpoint) {
    m_vpc_endpoint = vpc_endpoint;
    m_vpc_endpoint_isSet = true;
}

bool OAIEndpointAccess::is_vpc_endpoint_Set() const{
    return m_vpc_endpoint_isSet;
}

bool OAIEndpointAccess::is_vpc_endpoint_Valid() const{
    return m_vpc_endpoint_isValid;
}

bool OAIEndpointAccess::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_security_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_endpoint.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndpointAccess::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
