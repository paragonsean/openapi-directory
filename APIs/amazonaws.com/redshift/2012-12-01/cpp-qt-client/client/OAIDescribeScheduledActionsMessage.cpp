/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeScheduledActionsMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeScheduledActionsMessage::OAIDescribeScheduledActionsMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeScheduledActionsMessage::OAIDescribeScheduledActionsMessage() {
    this->initializeModel();
}

OAIDescribeScheduledActionsMessage::~OAIDescribeScheduledActionsMessage() {}

void OAIDescribeScheduledActionsMessage::initializeModel() {

    m_scheduled_action_name_isSet = false;
    m_scheduled_action_name_isValid = false;

    m_target_action_type_isSet = false;
    m_target_action_type_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_active_isSet = false;
    m_active_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_marker_isSet = false;
    m_marker_isValid = false;

    m_max_records_isSet = false;
    m_max_records_isValid = false;
}

void OAIDescribeScheduledActionsMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeScheduledActionsMessage::fromJsonObject(QJsonObject json) {

    m_scheduled_action_name_isValid = ::OpenAPI::fromJsonValue(m_scheduled_action_name, json[QString("ScheduledActionName")]);
    m_scheduled_action_name_isSet = !json[QString("ScheduledActionName")].isNull() && m_scheduled_action_name_isValid;

    m_target_action_type_isValid = ::OpenAPI::fromJsonValue(m_target_action_type, json[QString("TargetActionType")]);
    m_target_action_type_isSet = !json[QString("TargetActionType")].isNull() && m_target_action_type_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("Active")]);
    m_active_isSet = !json[QString("Active")].isNull() && m_active_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("Filters")]);
    m_filters_isSet = !json[QString("Filters")].isNull() && m_filters_isValid;

    m_marker_isValid = ::OpenAPI::fromJsonValue(m_marker, json[QString("Marker")]);
    m_marker_isSet = !json[QString("Marker")].isNull() && m_marker_isValid;

    m_max_records_isValid = ::OpenAPI::fromJsonValue(m_max_records, json[QString("MaxRecords")]);
    m_max_records_isSet = !json[QString("MaxRecords")].isNull() && m_max_records_isValid;
}

QString OAIDescribeScheduledActionsMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeScheduledActionsMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_scheduled_action_name_isSet) {
        obj.insert(QString("ScheduledActionName"), ::OpenAPI::toJsonValue(m_scheduled_action_name));
    }
    if (m_target_action_type.isSet()) {
        obj.insert(QString("TargetActionType"), ::OpenAPI::toJsonValue(m_target_action_type));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_active_isSet) {
        obj.insert(QString("Active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_filters.isSet()) {
        obj.insert(QString("Filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_marker_isSet) {
        obj.insert(QString("Marker"), ::OpenAPI::toJsonValue(m_marker));
    }
    if (m_max_records_isSet) {
        obj.insert(QString("MaxRecords"), ::OpenAPI::toJsonValue(m_max_records));
    }
    return obj;
}

QString OAIDescribeScheduledActionsMessage::getScheduledActionName() const {
    return m_scheduled_action_name;
}
void OAIDescribeScheduledActionsMessage::setScheduledActionName(const QString &scheduled_action_name) {
    m_scheduled_action_name = scheduled_action_name;
    m_scheduled_action_name_isSet = true;
}

bool OAIDescribeScheduledActionsMessage::is_scheduled_action_name_Set() const{
    return m_scheduled_action_name_isSet;
}

bool OAIDescribeScheduledActionsMessage::is_scheduled_action_name_Valid() const{
    return m_scheduled_action_name_isValid;
}

OAIScheduledActionTypeValues OAIDescribeScheduledActionsMessage::getTargetActionType() const {
    return m_target_action_type;
}
void OAIDescribeScheduledActionsMessage::setTargetActionType(const OAIScheduledActionTypeValues &target_action_type) {
    m_target_action_type = target_action_type;
    m_target_action_type_isSet = true;
}

bool OAIDescribeScheduledActionsMessage::is_target_action_type_Set() const{
    return m_target_action_type_isSet;
}

bool OAIDescribeScheduledActionsMessage::is_target_action_type_Valid() const{
    return m_target_action_type_isValid;
}

QDateTime OAIDescribeScheduledActionsMessage::getStartTime() const {
    return m_start_time;
}
void OAIDescribeScheduledActionsMessage::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIDescribeScheduledActionsMessage::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIDescribeScheduledActionsMessage::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIDescribeScheduledActionsMessage::getEndTime() const {
    return m_end_time;
}
void OAIDescribeScheduledActionsMessage::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIDescribeScheduledActionsMessage::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIDescribeScheduledActionsMessage::is_end_time_Valid() const{
    return m_end_time_isValid;
}

bool OAIDescribeScheduledActionsMessage::getActive() const {
    return m_active;
}
void OAIDescribeScheduledActionsMessage::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIDescribeScheduledActionsMessage::is_active_Set() const{
    return m_active_isSet;
}

bool OAIDescribeScheduledActionsMessage::is_active_Valid() const{
    return m_active_isValid;
}

QList OAIDescribeScheduledActionsMessage::getFilters() const {
    return m_filters;
}
void OAIDescribeScheduledActionsMessage::setFilters(const QList &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIDescribeScheduledActionsMessage::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIDescribeScheduledActionsMessage::is_filters_Valid() const{
    return m_filters_isValid;
}

QString OAIDescribeScheduledActionsMessage::getMarker() const {
    return m_marker;
}
void OAIDescribeScheduledActionsMessage::setMarker(const QString &marker) {
    m_marker = marker;
    m_marker_isSet = true;
}

bool OAIDescribeScheduledActionsMessage::is_marker_Set() const{
    return m_marker_isSet;
}

bool OAIDescribeScheduledActionsMessage::is_marker_Valid() const{
    return m_marker_isValid;
}

qint32 OAIDescribeScheduledActionsMessage::getMaxRecords() const {
    return m_max_records;
}
void OAIDescribeScheduledActionsMessage::setMaxRecords(const qint32 &max_records) {
    m_max_records = max_records;
    m_max_records_isSet = true;
}

bool OAIDescribeScheduledActionsMessage::is_max_records_Set() const{
    return m_max_records_isSet;
}

bool OAIDescribeScheduledActionsMessage::is_max_records_Valid() const{
    return m_max_records_isValid;
}

bool OAIDescribeScheduledActionsMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_scheduled_action_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_action_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_marker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_records_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeScheduledActionsMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
