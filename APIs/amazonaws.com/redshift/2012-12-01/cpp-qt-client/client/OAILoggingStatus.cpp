/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoggingStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoggingStatus::OAILoggingStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoggingStatus::OAILoggingStatus() {
    this->initializeModel();
}

OAILoggingStatus::~OAILoggingStatus() {}

void OAILoggingStatus::initializeModel() {

    m_logging_enabled_isSet = false;
    m_logging_enabled_isValid = false;

    m_bucket_name_isSet = false;
    m_bucket_name_isValid = false;

    m_s3_key_prefix_isSet = false;
    m_s3_key_prefix_isValid = false;

    m_last_successful_delivery_time_isSet = false;
    m_last_successful_delivery_time_isValid = false;

    m_last_failure_time_isSet = false;
    m_last_failure_time_isValid = false;

    m_last_failure_message_isSet = false;
    m_last_failure_message_isValid = false;

    m_log_destination_type_isSet = false;
    m_log_destination_type_isValid = false;

    m_log_exports_isSet = false;
    m_log_exports_isValid = false;
}

void OAILoggingStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoggingStatus::fromJsonObject(QJsonObject json) {

    m_logging_enabled_isValid = ::OpenAPI::fromJsonValue(m_logging_enabled, json[QString("LoggingEnabled")]);
    m_logging_enabled_isSet = !json[QString("LoggingEnabled")].isNull() && m_logging_enabled_isValid;

    m_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_bucket_name, json[QString("BucketName")]);
    m_bucket_name_isSet = !json[QString("BucketName")].isNull() && m_bucket_name_isValid;

    m_s3_key_prefix_isValid = ::OpenAPI::fromJsonValue(m_s3_key_prefix, json[QString("S3KeyPrefix")]);
    m_s3_key_prefix_isSet = !json[QString("S3KeyPrefix")].isNull() && m_s3_key_prefix_isValid;

    m_last_successful_delivery_time_isValid = ::OpenAPI::fromJsonValue(m_last_successful_delivery_time, json[QString("LastSuccessfulDeliveryTime")]);
    m_last_successful_delivery_time_isSet = !json[QString("LastSuccessfulDeliveryTime")].isNull() && m_last_successful_delivery_time_isValid;

    m_last_failure_time_isValid = ::OpenAPI::fromJsonValue(m_last_failure_time, json[QString("LastFailureTime")]);
    m_last_failure_time_isSet = !json[QString("LastFailureTime")].isNull() && m_last_failure_time_isValid;

    m_last_failure_message_isValid = ::OpenAPI::fromJsonValue(m_last_failure_message, json[QString("LastFailureMessage")]);
    m_last_failure_message_isSet = !json[QString("LastFailureMessage")].isNull() && m_last_failure_message_isValid;

    m_log_destination_type_isValid = ::OpenAPI::fromJsonValue(m_log_destination_type, json[QString("LogDestinationType")]);
    m_log_destination_type_isSet = !json[QString("LogDestinationType")].isNull() && m_log_destination_type_isValid;

    m_log_exports_isValid = ::OpenAPI::fromJsonValue(m_log_exports, json[QString("LogExports")]);
    m_log_exports_isSet = !json[QString("LogExports")].isNull() && m_log_exports_isValid;
}

QString OAILoggingStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoggingStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_logging_enabled_isSet) {
        obj.insert(QString("LoggingEnabled"), ::OpenAPI::toJsonValue(m_logging_enabled));
    }
    if (m_bucket_name_isSet) {
        obj.insert(QString("BucketName"), ::OpenAPI::toJsonValue(m_bucket_name));
    }
    if (m_s3_key_prefix_isSet) {
        obj.insert(QString("S3KeyPrefix"), ::OpenAPI::toJsonValue(m_s3_key_prefix));
    }
    if (m_last_successful_delivery_time_isSet) {
        obj.insert(QString("LastSuccessfulDeliveryTime"), ::OpenAPI::toJsonValue(m_last_successful_delivery_time));
    }
    if (m_last_failure_time_isSet) {
        obj.insert(QString("LastFailureTime"), ::OpenAPI::toJsonValue(m_last_failure_time));
    }
    if (m_last_failure_message_isSet) {
        obj.insert(QString("LastFailureMessage"), ::OpenAPI::toJsonValue(m_last_failure_message));
    }
    if (m_log_destination_type.isSet()) {
        obj.insert(QString("LogDestinationType"), ::OpenAPI::toJsonValue(m_log_destination_type));
    }
    if (m_log_exports.isSet()) {
        obj.insert(QString("LogExports"), ::OpenAPI::toJsonValue(m_log_exports));
    }
    return obj;
}

bool OAILoggingStatus::getLoggingEnabled() const {
    return m_logging_enabled;
}
void OAILoggingStatus::setLoggingEnabled(const bool &logging_enabled) {
    m_logging_enabled = logging_enabled;
    m_logging_enabled_isSet = true;
}

bool OAILoggingStatus::is_logging_enabled_Set() const{
    return m_logging_enabled_isSet;
}

bool OAILoggingStatus::is_logging_enabled_Valid() const{
    return m_logging_enabled_isValid;
}

QString OAILoggingStatus::getBucketName() const {
    return m_bucket_name;
}
void OAILoggingStatus::setBucketName(const QString &bucket_name) {
    m_bucket_name = bucket_name;
    m_bucket_name_isSet = true;
}

bool OAILoggingStatus::is_bucket_name_Set() const{
    return m_bucket_name_isSet;
}

bool OAILoggingStatus::is_bucket_name_Valid() const{
    return m_bucket_name_isValid;
}

QString OAILoggingStatus::getS3KeyPrefix() const {
    return m_s3_key_prefix;
}
void OAILoggingStatus::setS3KeyPrefix(const QString &s3_key_prefix) {
    m_s3_key_prefix = s3_key_prefix;
    m_s3_key_prefix_isSet = true;
}

bool OAILoggingStatus::is_s3_key_prefix_Set() const{
    return m_s3_key_prefix_isSet;
}

bool OAILoggingStatus::is_s3_key_prefix_Valid() const{
    return m_s3_key_prefix_isValid;
}

QDateTime OAILoggingStatus::getLastSuccessfulDeliveryTime() const {
    return m_last_successful_delivery_time;
}
void OAILoggingStatus::setLastSuccessfulDeliveryTime(const QDateTime &last_successful_delivery_time) {
    m_last_successful_delivery_time = last_successful_delivery_time;
    m_last_successful_delivery_time_isSet = true;
}

bool OAILoggingStatus::is_last_successful_delivery_time_Set() const{
    return m_last_successful_delivery_time_isSet;
}

bool OAILoggingStatus::is_last_successful_delivery_time_Valid() const{
    return m_last_successful_delivery_time_isValid;
}

QDateTime OAILoggingStatus::getLastFailureTime() const {
    return m_last_failure_time;
}
void OAILoggingStatus::setLastFailureTime(const QDateTime &last_failure_time) {
    m_last_failure_time = last_failure_time;
    m_last_failure_time_isSet = true;
}

bool OAILoggingStatus::is_last_failure_time_Set() const{
    return m_last_failure_time_isSet;
}

bool OAILoggingStatus::is_last_failure_time_Valid() const{
    return m_last_failure_time_isValid;
}

QString OAILoggingStatus::getLastFailureMessage() const {
    return m_last_failure_message;
}
void OAILoggingStatus::setLastFailureMessage(const QString &last_failure_message) {
    m_last_failure_message = last_failure_message;
    m_last_failure_message_isSet = true;
}

bool OAILoggingStatus::is_last_failure_message_Set() const{
    return m_last_failure_message_isSet;
}

bool OAILoggingStatus::is_last_failure_message_Valid() const{
    return m_last_failure_message_isValid;
}

OAILogDestinationType OAILoggingStatus::getLogDestinationType() const {
    return m_log_destination_type;
}
void OAILoggingStatus::setLogDestinationType(const OAILogDestinationType &log_destination_type) {
    m_log_destination_type = log_destination_type;
    m_log_destination_type_isSet = true;
}

bool OAILoggingStatus::is_log_destination_type_Set() const{
    return m_log_destination_type_isSet;
}

bool OAILoggingStatus::is_log_destination_type_Valid() const{
    return m_log_destination_type_isValid;
}

QList OAILoggingStatus::getLogExports() const {
    return m_log_exports;
}
void OAILoggingStatus::setLogExports(const QList &log_exports) {
    m_log_exports = log_exports;
    m_log_exports_isSet = true;
}

bool OAILoggingStatus::is_log_exports_Set() const{
    return m_log_exports_isSet;
}

bool OAILoggingStatus::is_log_exports_Valid() const{
    return m_log_exports_isValid;
}

bool OAILoggingStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_logging_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_key_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_successful_delivery_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_failure_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_failure_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_destination_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_exports.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoggingStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
