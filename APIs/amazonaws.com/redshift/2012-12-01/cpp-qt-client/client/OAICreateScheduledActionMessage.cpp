/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateScheduledActionMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateScheduledActionMessage::OAICreateScheduledActionMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateScheduledActionMessage::OAICreateScheduledActionMessage() {
    this->initializeModel();
}

OAICreateScheduledActionMessage::~OAICreateScheduledActionMessage() {}

void OAICreateScheduledActionMessage::initializeModel() {

    m_scheduled_action_name_isSet = false;
    m_scheduled_action_name_isValid = false;

    m_target_action_isSet = false;
    m_target_action_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_iam_role_isSet = false;
    m_iam_role_isValid = false;

    m_scheduled_action_description_isSet = false;
    m_scheduled_action_description_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_enable_isSet = false;
    m_enable_isValid = false;
}

void OAICreateScheduledActionMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateScheduledActionMessage::fromJsonObject(QJsonObject json) {

    m_scheduled_action_name_isValid = ::OpenAPI::fromJsonValue(m_scheduled_action_name, json[QString("ScheduledActionName")]);
    m_scheduled_action_name_isSet = !json[QString("ScheduledActionName")].isNull() && m_scheduled_action_name_isValid;

    m_target_action_isValid = ::OpenAPI::fromJsonValue(m_target_action, json[QString("TargetAction")]);
    m_target_action_isSet = !json[QString("TargetAction")].isNull() && m_target_action_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("Schedule")]);
    m_schedule_isSet = !json[QString("Schedule")].isNull() && m_schedule_isValid;

    m_iam_role_isValid = ::OpenAPI::fromJsonValue(m_iam_role, json[QString("IamRole")]);
    m_iam_role_isSet = !json[QString("IamRole")].isNull() && m_iam_role_isValid;

    m_scheduled_action_description_isValid = ::OpenAPI::fromJsonValue(m_scheduled_action_description, json[QString("ScheduledActionDescription")]);
    m_scheduled_action_description_isSet = !json[QString("ScheduledActionDescription")].isNull() && m_scheduled_action_description_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_enable_isValid = ::OpenAPI::fromJsonValue(m_enable, json[QString("Enable")]);
    m_enable_isSet = !json[QString("Enable")].isNull() && m_enable_isValid;
}

QString OAICreateScheduledActionMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateScheduledActionMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_scheduled_action_name_isSet) {
        obj.insert(QString("ScheduledActionName"), ::OpenAPI::toJsonValue(m_scheduled_action_name));
    }
    if (m_target_action.isSet()) {
        obj.insert(QString("TargetAction"), ::OpenAPI::toJsonValue(m_target_action));
    }
    if (m_schedule_isSet) {
        obj.insert(QString("Schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_iam_role_isSet) {
        obj.insert(QString("IamRole"), ::OpenAPI::toJsonValue(m_iam_role));
    }
    if (m_scheduled_action_description_isSet) {
        obj.insert(QString("ScheduledActionDescription"), ::OpenAPI::toJsonValue(m_scheduled_action_description));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_enable_isSet) {
        obj.insert(QString("Enable"), ::OpenAPI::toJsonValue(m_enable));
    }
    return obj;
}

QString OAICreateScheduledActionMessage::getScheduledActionName() const {
    return m_scheduled_action_name;
}
void OAICreateScheduledActionMessage::setScheduledActionName(const QString &scheduled_action_name) {
    m_scheduled_action_name = scheduled_action_name;
    m_scheduled_action_name_isSet = true;
}

bool OAICreateScheduledActionMessage::is_scheduled_action_name_Set() const{
    return m_scheduled_action_name_isSet;
}

bool OAICreateScheduledActionMessage::is_scheduled_action_name_Valid() const{
    return m_scheduled_action_name_isValid;
}

OAICreateScheduledActionMessage_TargetAction OAICreateScheduledActionMessage::getTargetAction() const {
    return m_target_action;
}
void OAICreateScheduledActionMessage::setTargetAction(const OAICreateScheduledActionMessage_TargetAction &target_action) {
    m_target_action = target_action;
    m_target_action_isSet = true;
}

bool OAICreateScheduledActionMessage::is_target_action_Set() const{
    return m_target_action_isSet;
}

bool OAICreateScheduledActionMessage::is_target_action_Valid() const{
    return m_target_action_isValid;
}

QString OAICreateScheduledActionMessage::getSchedule() const {
    return m_schedule;
}
void OAICreateScheduledActionMessage::setSchedule(const QString &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAICreateScheduledActionMessage::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAICreateScheduledActionMessage::is_schedule_Valid() const{
    return m_schedule_isValid;
}

QString OAICreateScheduledActionMessage::getIamRole() const {
    return m_iam_role;
}
void OAICreateScheduledActionMessage::setIamRole(const QString &iam_role) {
    m_iam_role = iam_role;
    m_iam_role_isSet = true;
}

bool OAICreateScheduledActionMessage::is_iam_role_Set() const{
    return m_iam_role_isSet;
}

bool OAICreateScheduledActionMessage::is_iam_role_Valid() const{
    return m_iam_role_isValid;
}

QString OAICreateScheduledActionMessage::getScheduledActionDescription() const {
    return m_scheduled_action_description;
}
void OAICreateScheduledActionMessage::setScheduledActionDescription(const QString &scheduled_action_description) {
    m_scheduled_action_description = scheduled_action_description;
    m_scheduled_action_description_isSet = true;
}

bool OAICreateScheduledActionMessage::is_scheduled_action_description_Set() const{
    return m_scheduled_action_description_isSet;
}

bool OAICreateScheduledActionMessage::is_scheduled_action_description_Valid() const{
    return m_scheduled_action_description_isValid;
}

QDateTime OAICreateScheduledActionMessage::getStartTime() const {
    return m_start_time;
}
void OAICreateScheduledActionMessage::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAICreateScheduledActionMessage::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAICreateScheduledActionMessage::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAICreateScheduledActionMessage::getEndTime() const {
    return m_end_time;
}
void OAICreateScheduledActionMessage::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAICreateScheduledActionMessage::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAICreateScheduledActionMessage::is_end_time_Valid() const{
    return m_end_time_isValid;
}

bool OAICreateScheduledActionMessage::getEnable() const {
    return m_enable;
}
void OAICreateScheduledActionMessage::setEnable(const bool &enable) {
    m_enable = enable;
    m_enable_isSet = true;
}

bool OAICreateScheduledActionMessage::is_enable_Set() const{
    return m_enable_isSet;
}

bool OAICreateScheduledActionMessage::is_enable_Valid() const{
    return m_enable_isValid;
}

bool OAICreateScheduledActionMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_scheduled_action_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_action_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateScheduledActionMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_scheduled_action_name_isValid && m_target_action_isValid && m_schedule_isValid && m_iam_role_isValid && true;
}

} // namespace OpenAPI
