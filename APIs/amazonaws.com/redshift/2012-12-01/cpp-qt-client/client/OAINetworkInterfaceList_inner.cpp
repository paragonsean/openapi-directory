/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkInterfaceList_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkInterfaceList_inner::OAINetworkInterfaceList_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkInterfaceList_inner::OAINetworkInterfaceList_inner() {
    this->initializeModel();
}

OAINetworkInterfaceList_inner::~OAINetworkInterfaceList_inner() {}

void OAINetworkInterfaceList_inner::initializeModel() {

    m_network_interface_id_isSet = false;
    m_network_interface_id_isValid = false;

    m_subnet_id_isSet = false;
    m_subnet_id_isValid = false;

    m_private_ip_address_isSet = false;
    m_private_ip_address_isValid = false;

    m_availability_zone_isSet = false;
    m_availability_zone_isValid = false;
}

void OAINetworkInterfaceList_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkInterfaceList_inner::fromJsonObject(QJsonObject json) {

    m_network_interface_id_isValid = ::OpenAPI::fromJsonValue(m_network_interface_id, json[QString("NetworkInterfaceId")]);
    m_network_interface_id_isSet = !json[QString("NetworkInterfaceId")].isNull() && m_network_interface_id_isValid;

    m_subnet_id_isValid = ::OpenAPI::fromJsonValue(m_subnet_id, json[QString("SubnetId")]);
    m_subnet_id_isSet = !json[QString("SubnetId")].isNull() && m_subnet_id_isValid;

    m_private_ip_address_isValid = ::OpenAPI::fromJsonValue(m_private_ip_address, json[QString("PrivateIpAddress")]);
    m_private_ip_address_isSet = !json[QString("PrivateIpAddress")].isNull() && m_private_ip_address_isValid;

    m_availability_zone_isValid = ::OpenAPI::fromJsonValue(m_availability_zone, json[QString("AvailabilityZone")]);
    m_availability_zone_isSet = !json[QString("AvailabilityZone")].isNull() && m_availability_zone_isValid;
}

QString OAINetworkInterfaceList_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkInterfaceList_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_network_interface_id_isSet) {
        obj.insert(QString("NetworkInterfaceId"), ::OpenAPI::toJsonValue(m_network_interface_id));
    }
    if (m_subnet_id_isSet) {
        obj.insert(QString("SubnetId"), ::OpenAPI::toJsonValue(m_subnet_id));
    }
    if (m_private_ip_address_isSet) {
        obj.insert(QString("PrivateIpAddress"), ::OpenAPI::toJsonValue(m_private_ip_address));
    }
    if (m_availability_zone_isSet) {
        obj.insert(QString("AvailabilityZone"), ::OpenAPI::toJsonValue(m_availability_zone));
    }
    return obj;
}

QString OAINetworkInterfaceList_inner::getNetworkInterfaceId() const {
    return m_network_interface_id;
}
void OAINetworkInterfaceList_inner::setNetworkInterfaceId(const QString &network_interface_id) {
    m_network_interface_id = network_interface_id;
    m_network_interface_id_isSet = true;
}

bool OAINetworkInterfaceList_inner::is_network_interface_id_Set() const{
    return m_network_interface_id_isSet;
}

bool OAINetworkInterfaceList_inner::is_network_interface_id_Valid() const{
    return m_network_interface_id_isValid;
}

QString OAINetworkInterfaceList_inner::getSubnetId() const {
    return m_subnet_id;
}
void OAINetworkInterfaceList_inner::setSubnetId(const QString &subnet_id) {
    m_subnet_id = subnet_id;
    m_subnet_id_isSet = true;
}

bool OAINetworkInterfaceList_inner::is_subnet_id_Set() const{
    return m_subnet_id_isSet;
}

bool OAINetworkInterfaceList_inner::is_subnet_id_Valid() const{
    return m_subnet_id_isValid;
}

QString OAINetworkInterfaceList_inner::getPrivateIpAddress() const {
    return m_private_ip_address;
}
void OAINetworkInterfaceList_inner::setPrivateIpAddress(const QString &private_ip_address) {
    m_private_ip_address = private_ip_address;
    m_private_ip_address_isSet = true;
}

bool OAINetworkInterfaceList_inner::is_private_ip_address_Set() const{
    return m_private_ip_address_isSet;
}

bool OAINetworkInterfaceList_inner::is_private_ip_address_Valid() const{
    return m_private_ip_address_isValid;
}

QString OAINetworkInterfaceList_inner::getAvailabilityZone() const {
    return m_availability_zone;
}
void OAINetworkInterfaceList_inner::setAvailabilityZone(const QString &availability_zone) {
    m_availability_zone = availability_zone;
    m_availability_zone_isSet = true;
}

bool OAINetworkInterfaceList_inner::is_availability_zone_Set() const{
    return m_availability_zone_isSet;
}

bool OAINetworkInterfaceList_inner::is_availability_zone_Valid() const{
    return m_availability_zone_isValid;
}

bool OAINetworkInterfaceList_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_network_interface_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkInterfaceList_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
