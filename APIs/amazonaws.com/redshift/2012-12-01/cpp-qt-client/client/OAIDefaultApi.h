/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAcceptReservedNodeExchangeInputMessage.h"
#include "OAIAcceptReservedNodeExchangeOutputMessage.h"
#include "OAIAccountAttributeList.h"
#include "OAIAssociateDataShareConsumerMessage.h"
#include "OAIAuthorizeClusterSecurityGroupIngressMessage.h"
#include "OAIAuthorizeClusterSecurityGroupIngressResult.h"
#include "OAIAuthorizeDataShareMessage.h"
#include "OAIAuthorizeEndpointAccessMessage.h"
#include "OAIAuthorizeSnapshotAccessMessage.h"
#include "OAIAuthorizeSnapshotAccessResult.h"
#include "OAIBatchDeleteClusterSnapshotsRequest.h"
#include "OAIBatchDeleteClusterSnapshotsResult.h"
#include "OAIBatchModifyClusterSnapshotsMessage.h"
#include "OAIBatchModifyClusterSnapshotsOutputMessage.h"
#include "OAICancelResizeMessage.h"
#include "OAIClusterCredentials.h"
#include "OAIClusterDbRevisionsMessage.h"
#include "OAIClusterExtendedCredentials.h"
#include "OAIClusterParameterGroupDetails.h"
#include "OAIClusterParameterGroupNameMessage.h"
#include "OAIClusterParameterGroupsMessage.h"
#include "OAIClusterSecurityGroupMessage.h"
#include "OAIClusterSubnetGroupMessage.h"
#include "OAIClusterVersionsMessage.h"
#include "OAIClustersMessage.h"
#include "OAICopyClusterSnapshotMessage.h"
#include "OAICopyClusterSnapshotResult.h"
#include "OAICreateAuthenticationProfileMessage.h"
#include "OAICreateAuthenticationProfileResult.h"
#include "OAICreateClusterMessage.h"
#include "OAICreateClusterParameterGroupMessage.h"
#include "OAICreateClusterParameterGroupResult.h"
#include "OAICreateClusterResult.h"
#include "OAICreateClusterSecurityGroupMessage.h"
#include "OAICreateClusterSecurityGroupResult.h"
#include "OAICreateClusterSnapshotMessage.h"
#include "OAICreateClusterSnapshotResult.h"
#include "OAICreateClusterSubnetGroupMessage.h"
#include "OAICreateClusterSubnetGroupResult.h"
#include "OAICreateCustomDomainAssociationMessage.h"
#include "OAICreateCustomDomainAssociationResult.h"
#include "OAICreateEndpointAccessMessage.h"
#include "OAICreateEventSubscriptionMessage.h"
#include "OAICreateEventSubscriptionResult.h"
#include "OAICreateHsmClientCertificateMessage.h"
#include "OAICreateHsmClientCertificateResult.h"
#include "OAICreateHsmConfigurationMessage.h"
#include "OAICreateHsmConfigurationResult.h"
#include "OAICreateScheduledActionMessage.h"
#include "OAICreateSnapshotCopyGrantMessage.h"
#include "OAICreateSnapshotCopyGrantResult.h"
#include "OAICreateSnapshotScheduleMessage.h"
#include "OAICreateTagsMessage.h"
#include "OAICreateUsageLimitMessage.h"
#include "OAICustomDomainAssociationsMessage.h"
#include "OAICustomerStorageMessage.h"
#include "OAIDataShare.h"
#include "OAIDeauthorizeDataShareMessage.h"
#include "OAIDeleteAuthenticationProfileMessage.h"
#include "OAIDeleteAuthenticationProfileResult.h"
#include "OAIDeleteClusterMessage.h"
#include "OAIDeleteClusterParameterGroupMessage.h"
#include "OAIDeleteClusterResult.h"
#include "OAIDeleteClusterSecurityGroupMessage.h"
#include "OAIDeleteClusterSnapshotMessage.h"
#include "OAIDeleteClusterSnapshotResult.h"
#include "OAIDeleteClusterSubnetGroupMessage.h"
#include "OAIDeleteCustomDomainAssociationMessage.h"
#include "OAIDeleteEndpointAccessMessage.h"
#include "OAIDeleteEventSubscriptionMessage.h"
#include "OAIDeleteHsmClientCertificateMessage.h"
#include "OAIDeleteHsmConfigurationMessage.h"
#include "OAIDeleteScheduledActionMessage.h"
#include "OAIDeleteSnapshotCopyGrantMessage.h"
#include "OAIDeleteSnapshotScheduleMessage.h"
#include "OAIDeleteTagsMessage.h"
#include "OAIDeleteUsageLimitMessage.h"
#include "OAIDescribeAccountAttributesMessage.h"
#include "OAIDescribeAuthenticationProfilesMessage.h"
#include "OAIDescribeAuthenticationProfilesResult.h"
#include "OAIDescribeClusterDbRevisionsMessage.h"
#include "OAIDescribeClusterParameterGroupsMessage.h"
#include "OAIDescribeClusterParametersMessage.h"
#include "OAIDescribeClusterSecurityGroupsMessage.h"
#include "OAIDescribeClusterSnapshotsMessage.h"
#include "OAIDescribeClusterSubnetGroupsMessage.h"
#include "OAIDescribeClusterTracksMessage.h"
#include "OAIDescribeClusterVersionsMessage.h"
#include "OAIDescribeClustersMessage.h"
#include "OAIDescribeCustomDomainAssociationsMessage.h"
#include "OAIDescribeDataSharesForConsumerMessage.h"
#include "OAIDescribeDataSharesForConsumerResult.h"
#include "OAIDescribeDataSharesForProducerMessage.h"
#include "OAIDescribeDataSharesForProducerResult.h"
#include "OAIDescribeDataSharesMessage.h"
#include "OAIDescribeDataSharesResult.h"
#include "OAIDescribeDefaultClusterParametersMessage.h"
#include "OAIDescribeDefaultClusterParametersResult.h"
#include "OAIDescribeEndpointAccessMessage.h"
#include "OAIDescribeEndpointAuthorizationMessage.h"
#include "OAIDescribeEventCategoriesMessage.h"
#include "OAIDescribeEventSubscriptionsMessage.h"
#include "OAIDescribeEventsMessage.h"
#include "OAIDescribeHsmClientCertificatesMessage.h"
#include "OAIDescribeHsmConfigurationsMessage.h"
#include "OAIDescribeLoggingStatusMessage.h"
#include "OAIDescribeNodeConfigurationOptionsMessage.h"
#include "OAIDescribeOrderableClusterOptionsMessage.h"
#include "OAIDescribePartnersInputMessage.h"
#include "OAIDescribePartnersOutputMessage.h"
#include "OAIDescribeReservedNodeExchangeStatusInputMessage.h"
#include "OAIDescribeReservedNodeExchangeStatusOutputMessage.h"
#include "OAIDescribeReservedNodeOfferingsMessage.h"
#include "OAIDescribeReservedNodesMessage.h"
#include "OAIDescribeResizeMessage.h"
#include "OAIDescribeScheduledActionsMessage.h"
#include "OAIDescribeSnapshotCopyGrantsMessage.h"
#include "OAIDescribeSnapshotSchedulesMessage.h"
#include "OAIDescribeSnapshotSchedulesOutputMessage.h"
#include "OAIDescribeTableRestoreStatusMessage.h"
#include "OAIDescribeTagsMessage.h"
#include "OAIDescribeUsageLimitsMessage.h"
#include "OAIDisableLoggingMessage.h"
#include "OAIDisableSnapshotCopyMessage.h"
#include "OAIDisableSnapshotCopyResult.h"
#include "OAIDisassociateDataShareConsumerMessage.h"
#include "OAIEnableLoggingMessage.h"
#include "OAIEnableSnapshotCopyMessage.h"
#include "OAIEnableSnapshotCopyResult.h"
#include "OAIEndpointAccess.h"
#include "OAIEndpointAccessList.h"
#include "OAIEndpointAuthorization.h"
#include "OAIEndpointAuthorizationList.h"
#include "OAIEventCategoriesMessage.h"
#include "OAIEventSubscriptionsMessage.h"
#include "OAIEventsMessage.h"
#include "OAIGET_BatchDeleteClusterSnapshots_Identifiers_parameter_inner.h"
#include "OAIGET_CreateCluster_Tags_parameter_inner.h"
#include "OAIGET_CreateScheduledAction_TargetAction_parameter.h"
#include "OAIGET_DescribeClusterSnapshots_SortingEntities_parameter_inner.h"
#include "OAIGET_DescribeNodeConfigurationOptions_Filter_parameter_inner.h"
#include "OAIGET_DescribeScheduledActions_Filters_parameter_inner.h"
#include "OAIGET_ModifyClusterParameterGroup_Parameters_parameter_inner.h"
#include "OAIGetClusterCredentialsMessage.h"
#include "OAIGetClusterCredentialsWithIAMMessage.h"
#include "OAIGetReservedNodeExchangeConfigurationOptionsInputMessage.h"
#include "OAIGetReservedNodeExchangeConfigurationOptionsOutputMessage.h"
#include "OAIGetReservedNodeExchangeOfferingsInputMessage.h"
#include "OAIGetReservedNodeExchangeOfferingsOutputMessage.h"
#include "OAIHsmClientCertificateMessage.h"
#include "OAIHsmConfigurationMessage.h"
#include "OAILoggingStatus.h"
#include "OAIModifyAquaInputMessage.h"
#include "OAIModifyAquaOutputMessage.h"
#include "OAIModifyAuthenticationProfileMessage.h"
#include "OAIModifyAuthenticationProfileResult.h"
#include "OAIModifyClusterDbRevisionMessage.h"
#include "OAIModifyClusterDbRevisionResult.h"
#include "OAIModifyClusterIamRolesMessage.h"
#include "OAIModifyClusterIamRolesResult.h"
#include "OAIModifyClusterMaintenanceMessage.h"
#include "OAIModifyClusterMaintenanceResult.h"
#include "OAIModifyClusterMessage.h"
#include "OAIModifyClusterParameterGroupMessage.h"
#include "OAIModifyClusterResult.h"
#include "OAIModifyClusterSnapshotMessage.h"
#include "OAIModifyClusterSnapshotResult.h"
#include "OAIModifyClusterSnapshotScheduleMessage.h"
#include "OAIModifyClusterSubnetGroupMessage.h"
#include "OAIModifyClusterSubnetGroupResult.h"
#include "OAIModifyCustomDomainAssociationMessage.h"
#include "OAIModifyCustomDomainAssociationResult.h"
#include "OAIModifyEndpointAccessMessage.h"
#include "OAIModifyEventSubscriptionMessage.h"
#include "OAIModifyEventSubscriptionResult.h"
#include "OAIModifyScheduledActionMessage.h"
#include "OAIModifySnapshotCopyRetentionPeriodMessage.h"
#include "OAIModifySnapshotCopyRetentionPeriodResult.h"
#include "OAIModifySnapshotScheduleMessage.h"
#include "OAIModifyUsageLimitMessage.h"
#include "OAINodeConfigurationOptionsMessage.h"
#include "OAIOrderableClusterOptionsMessage.h"
#include "OAIPartnerIntegrationInputMessage.h"
#include "OAIPartnerIntegrationOutputMessage.h"
#include "OAIPauseClusterMessage.h"
#include "OAIPauseClusterResult.h"
#include "OAIPurchaseReservedNodeOfferingMessage.h"
#include "OAIPurchaseReservedNodeOfferingResult.h"
#include "OAIRebootClusterMessage.h"
#include "OAIRebootClusterResult.h"
#include "OAIRejectDataShareMessage.h"
#include "OAIReservedNodeOfferingsMessage.h"
#include "OAIReservedNodesMessage.h"
#include "OAIResetClusterParameterGroupMessage.h"
#include "OAIResizeClusterMessage.h"
#include "OAIResizeClusterResult.h"
#include "OAIResizeProgressMessage.h"
#include "OAIRestoreFromClusterSnapshotMessage.h"
#include "OAIRestoreFromClusterSnapshotResult.h"
#include "OAIRestoreTableFromClusterSnapshotMessage.h"
#include "OAIRestoreTableFromClusterSnapshotResult.h"
#include "OAIResumeClusterMessage.h"
#include "OAIResumeClusterResult.h"
#include "OAIRevokeClusterSecurityGroupIngressMessage.h"
#include "OAIRevokeClusterSecurityGroupIngressResult.h"
#include "OAIRevokeEndpointAccessMessage.h"
#include "OAIRevokeSnapshotAccessMessage.h"
#include "OAIRevokeSnapshotAccessResult.h"
#include "OAIRotateEncryptionKeyMessage.h"
#include "OAIRotateEncryptionKeyResult.h"
#include "OAIScheduledAction.h"
#include "OAIScheduledActionsMessage.h"
#include "OAISnapshotCopyGrantMessage.h"
#include "OAISnapshotMessage.h"
#include "OAISnapshotSchedule.h"
#include "OAITableRestoreStatusMessage.h"
#include "OAITaggedResourceListMessage.h"
#include "OAITrackListMessage.h"
#include "OAIUpdatePartnerStatusInputMessage.h"
#include "OAIUsageLimit.h"
#include "OAIUsageLimitList.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  reserved_node_id QString [required]
    * @param[in]  target_reserved_node_offering_id QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETAcceptReservedNodeExchange(const QString &reserved_node_id, const QString &target_reserved_node_offering_id, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  cluster_identifier QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  partner_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETAddPartner(const QString &account_id, const QString &cluster_identifier, const QString &database_name, const QString &partner_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  data_share_arn QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  associate_entire_account bool [optional]
    * @param[in]  consumer_arn QString [optional]
    * @param[in]  consumer_region QString [optional]
    */
    virtual void gETAssociateDataShareConsumer(const QString &data_share_arn, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &associate_entire_account = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &consumer_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &consumer_region = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cluster_security_group_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  cidrip QString [optional]
    * @param[in]  ec2_security_group_name QString [optional]
    * @param[in]  ec2_security_group_owner_id QString [optional]
    */
    virtual void gETAuthorizeClusterSecurityGroupIngress(const QString &cluster_security_group_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cidrip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ec2_security_group_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ec2_security_group_owner_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  data_share_arn QString [required]
    * @param[in]  consumer_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETAuthorizeDataShare(const QString &data_share_arn, const QString &consumer_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  cluster_identifier QString [optional]
    * @param[in]  vpc_ids QList<QString> [optional]
    */
    virtual void gETAuthorizeEndpointAccess(const QString &account, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &vpc_ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  account_with_restore_access QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  snapshot_identifier QString [optional]
    * @param[in]  snapshot_arn QString [optional]
    * @param[in]  snapshot_cluster_identifier QString [optional]
    */
    virtual void gETAuthorizeSnapshotAccess(const QString &account_with_restore_access, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &snapshot_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &snapshot_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &snapshot_cluster_identifier = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  identifiers QList<OAIGET_BatchDeleteClusterSnapshots_Identifiers_parameter_inner> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETBatchDeleteClusterSnapshots(const QList<OAIGET_BatchDeleteClusterSnapshots_Identifiers_parameter_inner> &identifiers, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  snapshot_identifier_list QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  manual_snapshot_retention_period qint32 [optional]
    * @param[in]  force bool [optional]
    */
    virtual void gETBatchModifyClusterSnapshots(const QList<QString> &snapshot_identifier_list, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &manual_snapshot_retention_period = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  cluster_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETCancelResize(const QString &cluster_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source_snapshot_identifier QString [required]
    * @param[in]  target_snapshot_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  source_snapshot_cluster_identifier QString [optional]
    * @param[in]  manual_snapshot_retention_period qint32 [optional]
    */
    virtual void gETCopyClusterSnapshot(const QString &source_snapshot_identifier, const QString &target_snapshot_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source_snapshot_cluster_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &manual_snapshot_retention_period = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  authentication_profile_name QString [required]
    * @param[in]  authentication_profile_content QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETCreateAuthenticationProfile(const QString &authentication_profile_name, const QString &authentication_profile_content, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cluster_identifier QString [required]
    * @param[in]  node_type QString [required]
    * @param[in]  master_username QString [required]
    * @param[in]  master_user_password QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  db_name QString [optional]
    * @param[in]  cluster_type QString [optional]
    * @param[in]  cluster_security_groups QList<QString> [optional]
    * @param[in]  vpc_security_group_ids QList<QString> [optional]
    * @param[in]  cluster_subnet_group_name QString [optional]
    * @param[in]  availability_zone QString [optional]
    * @param[in]  preferred_maintenance_window QString [optional]
    * @param[in]  cluster_parameter_group_name QString [optional]
    * @param[in]  automated_snapshot_retention_period qint32 [optional]
    * @param[in]  manual_snapshot_retention_period qint32 [optional]
    * @param[in]  port qint32 [optional]
    * @param[in]  cluster_version QString [optional]
    * @param[in]  allow_version_upgrade bool [optional]
    * @param[in]  number_of_nodes qint32 [optional]
    * @param[in]  publicly_accessible bool [optional]
    * @param[in]  encrypted bool [optional]
    * @param[in]  hsm_client_certificate_identifier QString [optional]
    * @param[in]  hsm_configuration_identifier QString [optional]
    * @param[in]  elastic_ip QString [optional]
    * @param[in]  tags QList<OAIGET_CreateCluster_Tags_parameter_inner> [optional]
    * @param[in]  kms_key_id QString [optional]
    * @param[in]  enhanced_vpc_routing bool [optional]
    * @param[in]  additional_info QString [optional]
    * @param[in]  iam_roles QList<QString> [optional]
    * @param[in]  maintenance_track_name QString [optional]
    * @param[in]  snapshot_schedule_identifier QString [optional]
    * @param[in]  availability_zone_relocation bool [optional]
    * @param[in]  aqua_configuration_status QString [optional]
    * @param[in]  default_iam_role_arn QString [optional]
    * @param[in]  load_sample_data QString [optional]
    */
    virtual void gETCreateCluster(const QString &cluster_identifier, const QString &node_type, const QString &master_username, const QString &master_user_password, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &db_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &cluster_security_groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &vpc_security_group_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &cluster_subnet_group_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &availability_zone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &preferred_maintenance_window = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_parameter_group_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &automated_snapshot_retention_period = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &manual_snapshot_retention_period = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &port = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cluster_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &allow_version_upgrade = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &number_of_nodes = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &publicly_accessible = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &encrypted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &hsm_client_certificate_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hsm_configuration_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &elastic_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIGET_CreateCluster_Tags_parameter_inner>> &tags = ::OpenAPI::OptionalParam<QList<OAIGET_CreateCluster_Tags_parameter_inner>>(), const ::OpenAPI::OptionalParam<QString> &kms_key_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enhanced_vpc_routing = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &additional_info = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &iam_roles = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &maintenance_track_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &snapshot_schedule_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &availability_zone_relocation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &aqua_configuration_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &default_iam_role_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &load_sample_data = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parameter_group_name QString [required]
    * @param[in]  parameter_group_family QString [required]
    * @param[in]  description QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  tags QList<OAIGET_CreateCluster_Tags_parameter_inner> [optional]
    */
    virtual void gETCreateClusterParameterGroup(const QString &parameter_group_name, const QString &parameter_group_family, const QString &description, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIGET_CreateCluster_Tags_parameter_inner>> &tags = ::OpenAPI::OptionalParam<QList<OAIGET_CreateCluster_Tags_parameter_inner>>());

    /**
    * @param[in]  cluster_security_group_name QString [required]
    * @param[in]  description QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  tags QList<OAIGET_CreateCluster_Tags_parameter_inner> [optional]
    */
    virtual void gETCreateClusterSecurityGroup(const QString &cluster_security_group_name, const QString &description, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIGET_CreateCluster_Tags_parameter_inner>> &tags = ::OpenAPI::OptionalParam<QList<OAIGET_CreateCluster_Tags_parameter_inner>>());

    /**
    * @param[in]  snapshot_identifier QString [required]
    * @param[in]  cluster_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  manual_snapshot_retention_period qint32 [optional]
    * @param[in]  tags QList<OAIGET_CreateCluster_Tags_parameter_inner> [optional]
    */
    virtual void gETCreateClusterSnapshot(const QString &snapshot_identifier, const QString &cluster_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &manual_snapshot_retention_period = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIGET_CreateCluster_Tags_parameter_inner>> &tags = ::OpenAPI::OptionalParam<QList<OAIGET_CreateCluster_Tags_parameter_inner>>());

    /**
    * @param[in]  cluster_subnet_group_name QString [required]
    * @param[in]  description QString [required]
    * @param[in]  subnet_ids QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  tags QList<OAIGET_CreateCluster_Tags_parameter_inner> [optional]
    */
    virtual void gETCreateClusterSubnetGroup(const QString &cluster_subnet_group_name, const QString &description, const QList<QString> &subnet_ids, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIGET_CreateCluster_Tags_parameter_inner>> &tags = ::OpenAPI::OptionalParam<QList<OAIGET_CreateCluster_Tags_parameter_inner>>());

    /**
    * @param[in]  custom_domain_name QString [required]
    * @param[in]  custom_domain_certificate_arn QString [required]
    * @param[in]  cluster_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETCreateCustomDomainAssociation(const QString &custom_domain_name, const QString &custom_domain_certificate_arn, const QString &cluster_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  endpoint_name QString [required]
    * @param[in]  subnet_group_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  cluster_identifier QString [optional]
    * @param[in]  resource_owner QString [optional]
    * @param[in]  vpc_security_group_ids QList<QString> [optional]
    */
    virtual void gETCreateEndpointAccess(const QString &endpoint_name, const QString &subnet_group_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &resource_owner = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &vpc_security_group_ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  subscription_name QString [required]
    * @param[in]  sns_topic_arn QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  source_type QString [optional]
    * @param[in]  source_ids QList<QString> [optional]
    * @param[in]  event_categories QList<QString> [optional]
    * @param[in]  severity QString [optional]
    * @param[in]  enabled bool [optional]
    * @param[in]  tags QList<OAIGET_CreateCluster_Tags_parameter_inner> [optional]
    */
    virtual void gETCreateEventSubscription(const QString &subscription_name, const QString &sns_topic_arn, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &source_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &event_categories = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &severity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIGET_CreateCluster_Tags_parameter_inner>> &tags = ::OpenAPI::OptionalParam<QList<OAIGET_CreateCluster_Tags_parameter_inner>>());

    /**
    * @param[in]  hsm_client_certificate_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  tags QList<OAIGET_CreateCluster_Tags_parameter_inner> [optional]
    */
    virtual void gETCreateHsmClientCertificate(const QString &hsm_client_certificate_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIGET_CreateCluster_Tags_parameter_inner>> &tags = ::OpenAPI::OptionalParam<QList<OAIGET_CreateCluster_Tags_parameter_inner>>());

    /**
    * @param[in]  hsm_configuration_identifier QString [required]
    * @param[in]  description QString [required]
    * @param[in]  hsm_ip_address QString [required]
    * @param[in]  hsm_partition_name QString [required]
    * @param[in]  hsm_partition_password QString [required]
    * @param[in]  hsm_server_public_certificate QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  tags QList<OAIGET_CreateCluster_Tags_parameter_inner> [optional]
    */
    virtual void gETCreateHsmConfiguration(const QString &hsm_configuration_identifier, const QString &description, const QString &hsm_ip_address, const QString &hsm_partition_name, const QString &hsm_partition_password, const QString &hsm_server_public_certificate, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIGET_CreateCluster_Tags_parameter_inner>> &tags = ::OpenAPI::OptionalParam<QList<OAIGET_CreateCluster_Tags_parameter_inner>>());

    /**
    * @param[in]  scheduled_action_name QString [required]
    * @param[in]  target_action OAIGET_CreateScheduledAction_TargetAction_parameter [required]
    * @param[in]  schedule QString [required]
    * @param[in]  iam_role QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  scheduled_action_description QString [optional]
    * @param[in]  start_time QDateTime [optional]
    * @param[in]  end_time QDateTime [optional]
    * @param[in]  enable bool [optional]
    */
    virtual void gETCreateScheduledAction(const QString &scheduled_action_name, const OAIGET_CreateScheduledAction_TargetAction_parameter &target_action, const QString &schedule, const QString &iam_role, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &scheduled_action_description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &enable = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  snapshot_copy_grant_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  kms_key_id QString [optional]
    * @param[in]  tags QList<OAIGET_CreateCluster_Tags_parameter_inner> [optional]
    */
    virtual void gETCreateSnapshotCopyGrant(const QString &snapshot_copy_grant_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &kms_key_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIGET_CreateCluster_Tags_parameter_inner>> &tags = ::OpenAPI::OptionalParam<QList<OAIGET_CreateCluster_Tags_parameter_inner>>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  schedule_definitions QList<QString> [optional]
    * @param[in]  schedule_identifier QString [optional]
    * @param[in]  schedule_description QString [optional]
    * @param[in]  tags QList<OAIGET_CreateCluster_Tags_parameter_inner> [optional]
    * @param[in]  dry_run bool [optional]
    * @param[in]  next_invocations qint32 [optional]
    */
    virtual void gETCreateSnapshotSchedule(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &schedule_definitions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &schedule_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &schedule_description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIGET_CreateCluster_Tags_parameter_inner>> &tags = ::OpenAPI::OptionalParam<QList<OAIGET_CreateCluster_Tags_parameter_inner>>(), const ::OpenAPI::OptionalParam<bool> &dry_run = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &next_invocations = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  resource_name QString [required]
    * @param[in]  tags QList<OAIGET_CreateCluster_Tags_parameter_inner> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETCreateTags(const QString &resource_name, const QList<OAIGET_CreateCluster_Tags_parameter_inner> &tags, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cluster_identifier QString [required]
    * @param[in]  feature_type QString [required]
    * @param[in]  limit_type QString [required]
    * @param[in]  amount qint32 [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  period QString [optional]
    * @param[in]  breach_action QString [optional]
    * @param[in]  tags QList<OAIGET_CreateCluster_Tags_parameter_inner> [optional]
    */
    virtual void gETCreateUsageLimit(const QString &cluster_identifier, const QString &feature_type, const QString &limit_type, const qint32 &amount, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &period = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &breach_action = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIGET_CreateCluster_Tags_parameter_inner>> &tags = ::OpenAPI::OptionalParam<QList<OAIGET_CreateCluster_Tags_parameter_inner>>());

    /**
    * @param[in]  data_share_arn QString [required]
    * @param[in]  consumer_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeauthorizeDataShare(const QString &data_share_arn, const QString &consumer_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authentication_profile_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteAuthenticationProfile(const QString &authentication_profile_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cluster_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  skip_final_cluster_snapshot bool [optional]
    * @param[in]  final_cluster_snapshot_identifier QString [optional]
    * @param[in]  final_cluster_snapshot_retention_period qint32 [optional]
    */
    virtual void gETDeleteCluster(const QString &cluster_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &skip_final_cluster_snapshot = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &final_cluster_snapshot_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &final_cluster_snapshot_retention_period = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  parameter_group_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteClusterParameterGroup(const QString &parameter_group_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cluster_security_group_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteClusterSecurityGroup(const QString &cluster_security_group_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  snapshot_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  snapshot_cluster_identifier QString [optional]
    */
    virtual void gETDeleteClusterSnapshot(const QString &snapshot_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &snapshot_cluster_identifier = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cluster_subnet_group_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteClusterSubnetGroup(const QString &cluster_subnet_group_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cluster_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteCustomDomainAssociation(const QString &cluster_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  endpoint_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteEndpointAccess(const QString &endpoint_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteEventSubscription(const QString &subscription_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  hsm_client_certificate_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteHsmClientCertificate(const QString &hsm_client_certificate_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  hsm_configuration_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteHsmConfiguration(const QString &hsm_configuration_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  cluster_identifier QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  partner_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeletePartner(const QString &account_id, const QString &cluster_identifier, const QString &database_name, const QString &partner_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  scheduled_action_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteScheduledAction(const QString &scheduled_action_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  snapshot_copy_grant_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteSnapshotCopyGrant(const QString &snapshot_copy_grant_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  schedule_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteSnapshotSchedule(const QString &schedule_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_name QString [required]
    * @param[in]  tag_keys QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteTags(const QString &resource_name, const QList<QString> &tag_keys, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  usage_limit_id QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteUsageLimit(const QString &usage_limit_id, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  attribute_names QList<QString> [optional]
    */
    virtual void gETDescribeAccountAttributes(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &attribute_names = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  authentication_profile_name QString [optional]
    */
    virtual void gETDescribeAuthenticationProfiles(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authentication_profile_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  cluster_identifier QString [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void gETDescribeClusterDbRevisions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  parameter_group_name QString [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  tag_keys QList<QString> [optional]
    * @param[in]  tag_values QList<QString> [optional]
    */
    virtual void gETDescribeClusterParameterGroups(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parameter_group_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &tag_keys = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tag_values = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  parameter_group_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  source QString [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void gETDescribeClusterParameters(const QString &parameter_group_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  cluster_security_group_name QString [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  tag_keys QList<QString> [optional]
    * @param[in]  tag_values QList<QString> [optional]
    */
    virtual void gETDescribeClusterSecurityGroups(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_security_group_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &tag_keys = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tag_values = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  cluster_identifier QString [optional]
    * @param[in]  snapshot_identifier QString [optional]
    * @param[in]  snapshot_arn QString [optional]
    * @param[in]  snapshot_type QString [optional]
    * @param[in]  start_time QDateTime [optional]
    * @param[in]  end_time QDateTime [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  owner_account QString [optional]
    * @param[in]  tag_keys QList<QString> [optional]
    * @param[in]  tag_values QList<QString> [optional]
    * @param[in]  cluster_exists bool [optional]
    * @param[in]  sorting_entities QList<OAIGET_DescribeClusterSnapshots_SortingEntities_parameter_inner> [optional]
    */
    virtual void gETDescribeClusterSnapshots(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &snapshot_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &snapshot_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &snapshot_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &owner_account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &tag_keys = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tag_values = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &cluster_exists = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIGET_DescribeClusterSnapshots_SortingEntities_parameter_inner>> &sorting_entities = ::OpenAPI::OptionalParam<QList<OAIGET_DescribeClusterSnapshots_SortingEntities_parameter_inner>>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  cluster_subnet_group_name QString [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  tag_keys QList<QString> [optional]
    * @param[in]  tag_values QList<QString> [optional]
    */
    virtual void gETDescribeClusterSubnetGroups(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_subnet_group_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &tag_keys = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tag_values = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  maintenance_track_name QString [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void gETDescribeClusterTracks(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maintenance_track_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  cluster_version QString [optional]
    * @param[in]  cluster_parameter_group_family QString [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void gETDescribeClusterVersions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_parameter_group_family = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  cluster_identifier QString [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  tag_keys QList<QString> [optional]
    * @param[in]  tag_values QList<QString> [optional]
    */
    virtual void gETDescribeClusters(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &tag_keys = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tag_values = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  custom_domain_name QString [optional]
    * @param[in]  custom_domain_certificate_arn QString [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void gETDescribeCustomDomainAssociations(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &custom_domain_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &custom_domain_certificate_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  data_share_arn QString [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void gETDescribeDataShares(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &data_share_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  consumer_arn QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void gETDescribeDataSharesForConsumer(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &consumer_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  producer_arn QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void gETDescribeDataSharesForProducer(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &producer_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parameter_group_family QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void gETDescribeDefaultClusterParameters(const QString &parameter_group_family, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  cluster_identifier QString [optional]
    * @param[in]  resource_owner QString [optional]
    * @param[in]  endpoint_name QString [optional]
    * @param[in]  vpc_id QString [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void gETDescribeEndpointAccess(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &resource_owner = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &endpoint_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vpc_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  cluster_identifier QString [optional]
    * @param[in]  account QString [optional]
    * @param[in]  grantee bool [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void gETDescribeEndpointAuthorization(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &grantee = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  source_type QString [optional]
    */
    virtual void gETDescribeEventCategories(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  subscription_name QString [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  tag_keys QList<QString> [optional]
    * @param[in]  tag_values QList<QString> [optional]
    */
    virtual void gETDescribeEventSubscriptions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &subscription_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &tag_keys = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tag_values = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  source_identifier QString [optional]
    * @param[in]  source_type QString [optional]
    * @param[in]  start_time QDateTime [optional]
    * @param[in]  end_time QDateTime [optional]
    * @param[in]  duration qint32 [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void gETDescribeEvents(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &duration = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  hsm_client_certificate_identifier QString [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  tag_keys QList<QString> [optional]
    * @param[in]  tag_values QList<QString> [optional]
    */
    virtual void gETDescribeHsmClientCertificates(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hsm_client_certificate_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &tag_keys = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tag_values = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  hsm_configuration_identifier QString [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  tag_keys QList<QString> [optional]
    * @param[in]  tag_values QList<QString> [optional]
    */
    virtual void gETDescribeHsmConfigurations(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hsm_configuration_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &tag_keys = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tag_values = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  cluster_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDescribeLoggingStatus(const QString &cluster_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action_type QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  cluster_identifier QString [optional]
    * @param[in]  snapshot_identifier QString [optional]
    * @param[in]  snapshot_arn QString [optional]
    * @param[in]  owner_account QString [optional]
    * @param[in]  filter QList<OAIGET_DescribeNodeConfigurationOptions_Filter_parameter_inner> [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_records qint32 [optional]
    */
    virtual void gETDescribeNodeConfigurationOptions(const QString &action_type, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &snapshot_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &snapshot_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &owner_account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIGET_DescribeNodeConfigurationOptions_Filter_parameter_inner>> &filter = ::OpenAPI::OptionalParam<QList<OAIGET_DescribeNodeConfigurationOptions_Filter_parameter_inner>>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  cluster_version QString [optional]
    * @param[in]  node_type QString [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void gETDescribeOrderableClusterOptions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &node_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  cluster_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  database_name QString [optional]
    * @param[in]  partner_name QString [optional]
    */
    virtual void gETDescribePartners(const QString &account_id, const QString &cluster_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &database_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &partner_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  reserved_node_id QString [optional]
    * @param[in]  reserved_node_exchange_request_id QString [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void gETDescribeReservedNodeExchangeStatus(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &reserved_node_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &reserved_node_exchange_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  reserved_node_offering_id QString [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void gETDescribeReservedNodeOfferings(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &reserved_node_offering_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  reserved_node_id QString [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void gETDescribeReservedNodes(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &reserved_node_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cluster_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDescribeResize(const QString &cluster_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  scheduled_action_name QString [optional]
    * @param[in]  target_action_type QString [optional]
    * @param[in]  start_time QDateTime [optional]
    * @param[in]  end_time QDateTime [optional]
    * @param[in]  active bool [optional]
    * @param[in]  filters QList<OAIGET_DescribeScheduledActions_Filters_parameter_inner> [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_records qint32 [optional]
    */
    virtual void gETDescribeScheduledActions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &scheduled_action_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &target_action_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIGET_DescribeScheduledActions_Filters_parameter_inner>> &filters = ::OpenAPI::OptionalParam<QList<OAIGET_DescribeScheduledActions_Filters_parameter_inner>>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  snapshot_copy_grant_name QString [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  tag_keys QList<QString> [optional]
    * @param[in]  tag_values QList<QString> [optional]
    */
    virtual void gETDescribeSnapshotCopyGrants(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &snapshot_copy_grant_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &tag_keys = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tag_values = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  cluster_identifier QString [optional]
    * @param[in]  schedule_identifier QString [optional]
    * @param[in]  tag_keys QList<QString> [optional]
    * @param[in]  tag_values QList<QString> [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_records qint32 [optional]
    */
    virtual void gETDescribeSnapshotSchedules(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &schedule_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &tag_keys = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tag_values = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDescribeStorage(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  cluster_identifier QString [optional]
    * @param[in]  table_restore_request_id QString [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void gETDescribeTableRestoreStatus(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &table_restore_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  resource_name QString [optional]
    * @param[in]  resource_type QString [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  tag_keys QList<QString> [optional]
    * @param[in]  tag_values QList<QString> [optional]
    */
    virtual void gETDescribeTags(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &resource_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &resource_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &tag_keys = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tag_values = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  usage_limit_id QString [optional]
    * @param[in]  cluster_identifier QString [optional]
    * @param[in]  feature_type QString [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  tag_keys QList<QString> [optional]
    * @param[in]  tag_values QList<QString> [optional]
    */
    virtual void gETDescribeUsageLimits(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usage_limit_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &feature_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &tag_keys = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tag_values = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  cluster_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDisableLogging(const QString &cluster_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cluster_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDisableSnapshotCopy(const QString &cluster_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  data_share_arn QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  disassociate_entire_account bool [optional]
    * @param[in]  consumer_arn QString [optional]
    * @param[in]  consumer_region QString [optional]
    */
    virtual void gETDisassociateDataShareConsumer(const QString &data_share_arn, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &disassociate_entire_account = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &consumer_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &consumer_region = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cluster_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  bucket_name QString [optional]
    * @param[in]  s3_key_prefix QString [optional]
    * @param[in]  log_destination_type QString [optional]
    * @param[in]  log_exports QList<QString> [optional]
    */
    virtual void gETEnableLogging(const QString &cluster_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bucket_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &s3_key_prefix = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &log_destination_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &log_exports = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  cluster_identifier QString [required]
    * @param[in]  destination_region QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  retention_period qint32 [optional]
    * @param[in]  snapshot_copy_grant_name QString [optional]
    * @param[in]  manual_snapshot_retention_period qint32 [optional]
    */
    virtual void gETEnableSnapshotCopy(const QString &cluster_identifier, const QString &destination_region, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &retention_period = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &snapshot_copy_grant_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &manual_snapshot_retention_period = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  db_user QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  db_name QString [optional]
    * @param[in]  cluster_identifier QString [optional]
    * @param[in]  duration_seconds qint32 [optional]
    * @param[in]  auto_create bool [optional]
    * @param[in]  db_groups QList<QString> [optional]
    * @param[in]  custom_domain_name QString [optional]
    */
    virtual void gETGetClusterCredentials(const QString &db_user, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &db_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &duration_seconds = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &auto_create = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &db_groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &custom_domain_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  db_name QString [optional]
    * @param[in]  cluster_identifier QString [optional]
    * @param[in]  duration_seconds qint32 [optional]
    * @param[in]  custom_domain_name QString [optional]
    */
    virtual void gETGetClusterCredentialsWithIAM(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &db_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &duration_seconds = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &custom_domain_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action_type QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  cluster_identifier QString [optional]
    * @param[in]  snapshot_identifier QString [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void gETGetReservedNodeExchangeConfigurationOptions(const QString &action_type, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &snapshot_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  reserved_node_id QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void gETGetReservedNodeExchangeOfferings(const QString &reserved_node_id, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cluster_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  aqua_configuration_status QString [optional]
    */
    virtual void gETModifyAquaConfiguration(const QString &cluster_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &aqua_configuration_status = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authentication_profile_name QString [required]
    * @param[in]  authentication_profile_content QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETModifyAuthenticationProfile(const QString &authentication_profile_name, const QString &authentication_profile_content, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cluster_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  cluster_type QString [optional]
    * @param[in]  node_type QString [optional]
    * @param[in]  number_of_nodes qint32 [optional]
    * @param[in]  cluster_security_groups QList<QString> [optional]
    * @param[in]  vpc_security_group_ids QList<QString> [optional]
    * @param[in]  master_user_password QString [optional]
    * @param[in]  cluster_parameter_group_name QString [optional]
    * @param[in]  automated_snapshot_retention_period qint32 [optional]
    * @param[in]  manual_snapshot_retention_period qint32 [optional]
    * @param[in]  preferred_maintenance_window QString [optional]
    * @param[in]  cluster_version QString [optional]
    * @param[in]  allow_version_upgrade bool [optional]
    * @param[in]  hsm_client_certificate_identifier QString [optional]
    * @param[in]  hsm_configuration_identifier QString [optional]
    * @param[in]  new_cluster_identifier QString [optional]
    * @param[in]  publicly_accessible bool [optional]
    * @param[in]  elastic_ip QString [optional]
    * @param[in]  enhanced_vpc_routing bool [optional]
    * @param[in]  maintenance_track_name QString [optional]
    * @param[in]  encrypted bool [optional]
    * @param[in]  kms_key_id QString [optional]
    * @param[in]  availability_zone_relocation bool [optional]
    * @param[in]  availability_zone QString [optional]
    * @param[in]  port qint32 [optional]
    */
    virtual void gETModifyCluster(const QString &cluster_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &node_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &number_of_nodes = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &cluster_security_groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &vpc_security_group_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &master_user_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_parameter_group_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &automated_snapshot_retention_period = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &manual_snapshot_retention_period = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &preferred_maintenance_window = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &allow_version_upgrade = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &hsm_client_certificate_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hsm_configuration_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &new_cluster_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &publicly_accessible = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &elastic_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enhanced_vpc_routing = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &maintenance_track_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &encrypted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &kms_key_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &availability_zone_relocation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &availability_zone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &port = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  cluster_identifier QString [required]
    * @param[in]  revision_target QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETModifyClusterDbRevision(const QString &cluster_identifier, const QString &revision_target, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cluster_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  add_iam_roles QList<QString> [optional]
    * @param[in]  remove_iam_roles QList<QString> [optional]
    * @param[in]  default_iam_role_arn QString [optional]
    */
    virtual void gETModifyClusterIamRoles(const QString &cluster_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &add_iam_roles = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &remove_iam_roles = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &default_iam_role_arn = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cluster_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  defer_maintenance bool [optional]
    * @param[in]  defer_maintenance_identifier QString [optional]
    * @param[in]  defer_maintenance_start_time QDateTime [optional]
    * @param[in]  defer_maintenance_end_time QDateTime [optional]
    * @param[in]  defer_maintenance_duration qint32 [optional]
    */
    virtual void gETModifyClusterMaintenance(const QString &cluster_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &defer_maintenance = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &defer_maintenance_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &defer_maintenance_start_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &defer_maintenance_end_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &defer_maintenance_duration = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  parameter_group_name QString [required]
    * @param[in]  parameters QList<OAIGET_ModifyClusterParameterGroup_Parameters_parameter_inner> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETModifyClusterParameterGroup(const QString &parameter_group_name, const QList<OAIGET_ModifyClusterParameterGroup_Parameters_parameter_inner> &parameters, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  snapshot_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  manual_snapshot_retention_period qint32 [optional]
    * @param[in]  force bool [optional]
    */
    virtual void gETModifyClusterSnapshot(const QString &snapshot_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &manual_snapshot_retention_period = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  cluster_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  schedule_identifier QString [optional]
    * @param[in]  disassociate_schedule bool [optional]
    */
    virtual void gETModifyClusterSnapshotSchedule(const QString &cluster_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &schedule_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &disassociate_schedule = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  cluster_subnet_group_name QString [required]
    * @param[in]  subnet_ids QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  description QString [optional]
    */
    virtual void gETModifyClusterSubnetGroup(const QString &cluster_subnet_group_name, const QList<QString> &subnet_ids, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cluster_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  custom_domain_name QString [optional]
    * @param[in]  custom_domain_certificate_arn QString [optional]
    */
    virtual void gETModifyCustomDomainAssociation(const QString &cluster_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &custom_domain_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &custom_domain_certificate_arn = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  endpoint_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  vpc_security_group_ids QList<QString> [optional]
    */
    virtual void gETModifyEndpointAccess(const QString &endpoint_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &vpc_security_group_ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  subscription_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  sns_topic_arn QString [optional]
    * @param[in]  source_type QString [optional]
    * @param[in]  source_ids QList<QString> [optional]
    * @param[in]  event_categories QList<QString> [optional]
    * @param[in]  severity QString [optional]
    * @param[in]  enabled bool [optional]
    */
    virtual void gETModifyEventSubscription(const QString &subscription_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sns_topic_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &source_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &event_categories = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &severity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enabled = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  scheduled_action_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  target_action OAIGET_CreateScheduledAction_TargetAction_parameter [optional]
    * @param[in]  schedule QString [optional]
    * @param[in]  iam_role QString [optional]
    * @param[in]  scheduled_action_description QString [optional]
    * @param[in]  start_time QDateTime [optional]
    * @param[in]  end_time QDateTime [optional]
    * @param[in]  enable bool [optional]
    */
    virtual void gETModifyScheduledAction(const QString &scheduled_action_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGET_CreateScheduledAction_TargetAction_parameter> &target_action = ::OpenAPI::OptionalParam<OAIGET_CreateScheduledAction_TargetAction_parameter>(), const ::OpenAPI::OptionalParam<QString> &schedule = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &iam_role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &scheduled_action_description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &enable = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  cluster_identifier QString [required]
    * @param[in]  retention_period qint32 [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  manual bool [optional]
    */
    virtual void gETModifySnapshotCopyRetentionPeriod(const QString &cluster_identifier, const qint32 &retention_period, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &manual = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  schedule_identifier QString [required]
    * @param[in]  schedule_definitions QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETModifySnapshotSchedule(const QString &schedule_identifier, const QList<QString> &schedule_definitions, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  usage_limit_id QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  amount qint32 [optional]
    * @param[in]  breach_action QString [optional]
    */
    virtual void gETModifyUsageLimit(const QString &usage_limit_id, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &amount = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &breach_action = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cluster_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETPauseCluster(const QString &cluster_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  reserved_node_offering_id QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  node_count qint32 [optional]
    */
    virtual void gETPurchaseReservedNodeOffering(const QString &reserved_node_offering_id, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &node_count = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  cluster_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETRebootCluster(const QString &cluster_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  data_share_arn QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETRejectDataShare(const QString &data_share_arn, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parameter_group_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  reset_all_parameters bool [optional]
    * @param[in]  parameters QList<OAIGET_ModifyClusterParameterGroup_Parameters_parameter_inner> [optional]
    */
    virtual void gETResetClusterParameterGroup(const QString &parameter_group_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &reset_all_parameters = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIGET_ModifyClusterParameterGroup_Parameters_parameter_inner>> &parameters = ::OpenAPI::OptionalParam<QList<OAIGET_ModifyClusterParameterGroup_Parameters_parameter_inner>>());

    /**
    * @param[in]  cluster_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  cluster_type QString [optional]
    * @param[in]  node_type QString [optional]
    * @param[in]  number_of_nodes qint32 [optional]
    * @param[in]  classic bool [optional]
    * @param[in]  reserved_node_id QString [optional]
    * @param[in]  target_reserved_node_offering_id QString [optional]
    */
    virtual void gETResizeCluster(const QString &cluster_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &node_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &number_of_nodes = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &classic = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &reserved_node_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &target_reserved_node_offering_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cluster_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  snapshot_identifier QString [optional]
    * @param[in]  snapshot_arn QString [optional]
    * @param[in]  snapshot_cluster_identifier QString [optional]
    * @param[in]  port qint32 [optional]
    * @param[in]  availability_zone QString [optional]
    * @param[in]  allow_version_upgrade bool [optional]
    * @param[in]  cluster_subnet_group_name QString [optional]
    * @param[in]  publicly_accessible bool [optional]
    * @param[in]  owner_account QString [optional]
    * @param[in]  hsm_client_certificate_identifier QString [optional]
    * @param[in]  hsm_configuration_identifier QString [optional]
    * @param[in]  elastic_ip QString [optional]
    * @param[in]  cluster_parameter_group_name QString [optional]
    * @param[in]  cluster_security_groups QList<QString> [optional]
    * @param[in]  vpc_security_group_ids QList<QString> [optional]
    * @param[in]  preferred_maintenance_window QString [optional]
    * @param[in]  automated_snapshot_retention_period qint32 [optional]
    * @param[in]  manual_snapshot_retention_period qint32 [optional]
    * @param[in]  kms_key_id QString [optional]
    * @param[in]  node_type QString [optional]
    * @param[in]  enhanced_vpc_routing bool [optional]
    * @param[in]  additional_info QString [optional]
    * @param[in]  iam_roles QList<QString> [optional]
    * @param[in]  maintenance_track_name QString [optional]
    * @param[in]  snapshot_schedule_identifier QString [optional]
    * @param[in]  number_of_nodes qint32 [optional]
    * @param[in]  availability_zone_relocation bool [optional]
    * @param[in]  aqua_configuration_status QString [optional]
    * @param[in]  default_iam_role_arn QString [optional]
    * @param[in]  reserved_node_id QString [optional]
    * @param[in]  target_reserved_node_offering_id QString [optional]
    * @param[in]  encrypted bool [optional]
    */
    virtual void gETRestoreFromClusterSnapshot(const QString &cluster_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &snapshot_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &snapshot_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &snapshot_cluster_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &port = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &availability_zone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &allow_version_upgrade = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &cluster_subnet_group_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &publicly_accessible = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &owner_account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hsm_client_certificate_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hsm_configuration_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &elastic_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_parameter_group_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &cluster_security_groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &vpc_security_group_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &preferred_maintenance_window = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &automated_snapshot_retention_period = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &manual_snapshot_retention_period = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &kms_key_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &node_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enhanced_vpc_routing = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &additional_info = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &iam_roles = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &maintenance_track_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &snapshot_schedule_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &number_of_nodes = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &availability_zone_relocation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &aqua_configuration_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &default_iam_role_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &reserved_node_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &target_reserved_node_offering_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &encrypted = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  cluster_identifier QString [required]
    * @param[in]  snapshot_identifier QString [required]
    * @param[in]  source_database_name QString [required]
    * @param[in]  source_table_name QString [required]
    * @param[in]  new_table_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  source_schema_name QString [optional]
    * @param[in]  target_database_name QString [optional]
    * @param[in]  target_schema_name QString [optional]
    * @param[in]  enable_case_sensitive_identifier bool [optional]
    */
    virtual void gETRestoreTableFromClusterSnapshot(const QString &cluster_identifier, const QString &snapshot_identifier, const QString &source_database_name, const QString &source_table_name, const QString &new_table_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source_schema_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &target_database_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &target_schema_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_case_sensitive_identifier = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  cluster_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETResumeCluster(const QString &cluster_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cluster_security_group_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  cidrip QString [optional]
    * @param[in]  ec2_security_group_name QString [optional]
    * @param[in]  ec2_security_group_owner_id QString [optional]
    */
    virtual void gETRevokeClusterSecurityGroupIngress(const QString &cluster_security_group_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cidrip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ec2_security_group_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ec2_security_group_owner_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  cluster_identifier QString [optional]
    * @param[in]  account QString [optional]
    * @param[in]  vpc_ids QList<QString> [optional]
    * @param[in]  force bool [optional]
    */
    virtual void gETRevokeEndpointAccess(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &vpc_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  account_with_restore_access QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  snapshot_identifier QString [optional]
    * @param[in]  snapshot_arn QString [optional]
    * @param[in]  snapshot_cluster_identifier QString [optional]
    */
    virtual void gETRevokeSnapshotAccess(const QString &account_with_restore_access, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &snapshot_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &snapshot_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &snapshot_cluster_identifier = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cluster_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETRotateEncryptionKey(const QString &cluster_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  cluster_identifier QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  partner_name QString [required]
    * @param[in]  status QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  status_message QString [optional]
    */
    virtual void gETUpdatePartnerStatus(const QString &account_id, const QString &cluster_identifier, const QString &database_name, const QString &partner_name, const QString &status, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status_message = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_accept_reserved_node_exchange_input_message OAIAcceptReservedNodeExchangeInputMessage [optional]
    */
    virtual void pOSTAcceptReservedNodeExchange(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAcceptReservedNodeExchangeInputMessage> &oai_accept_reserved_node_exchange_input_message = ::OpenAPI::OptionalParam<OAIAcceptReservedNodeExchangeInputMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_partner_integration_input_message OAIPartnerIntegrationInputMessage [optional]
    */
    virtual void pOSTAddPartner(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPartnerIntegrationInputMessage> &oai_partner_integration_input_message = ::OpenAPI::OptionalParam<OAIPartnerIntegrationInputMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_associate_data_share_consumer_message OAIAssociateDataShareConsumerMessage [optional]
    */
    virtual void pOSTAssociateDataShareConsumer(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAssociateDataShareConsumerMessage> &oai_associate_data_share_consumer_message = ::OpenAPI::OptionalParam<OAIAssociateDataShareConsumerMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_authorize_cluster_security_group_ingress_message OAIAuthorizeClusterSecurityGroupIngressMessage [optional]
    */
    virtual void pOSTAuthorizeClusterSecurityGroupIngress(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAuthorizeClusterSecurityGroupIngressMessage> &oai_authorize_cluster_security_group_ingress_message = ::OpenAPI::OptionalParam<OAIAuthorizeClusterSecurityGroupIngressMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_authorize_data_share_message OAIAuthorizeDataShareMessage [optional]
    */
    virtual void pOSTAuthorizeDataShare(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAuthorizeDataShareMessage> &oai_authorize_data_share_message = ::OpenAPI::OptionalParam<OAIAuthorizeDataShareMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_authorize_endpoint_access_message OAIAuthorizeEndpointAccessMessage [optional]
    */
    virtual void pOSTAuthorizeEndpointAccess(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAuthorizeEndpointAccessMessage> &oai_authorize_endpoint_access_message = ::OpenAPI::OptionalParam<OAIAuthorizeEndpointAccessMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_authorize_snapshot_access_message OAIAuthorizeSnapshotAccessMessage [optional]
    */
    virtual void pOSTAuthorizeSnapshotAccess(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAuthorizeSnapshotAccessMessage> &oai_authorize_snapshot_access_message = ::OpenAPI::OptionalParam<OAIAuthorizeSnapshotAccessMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_batch_delete_cluster_snapshots_request OAIBatchDeleteClusterSnapshotsRequest [optional]
    */
    virtual void pOSTBatchDeleteClusterSnapshots(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBatchDeleteClusterSnapshotsRequest> &oai_batch_delete_cluster_snapshots_request = ::OpenAPI::OptionalParam<OAIBatchDeleteClusterSnapshotsRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_batch_modify_cluster_snapshots_message OAIBatchModifyClusterSnapshotsMessage [optional]
    */
    virtual void pOSTBatchModifyClusterSnapshots(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBatchModifyClusterSnapshotsMessage> &oai_batch_modify_cluster_snapshots_message = ::OpenAPI::OptionalParam<OAIBatchModifyClusterSnapshotsMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_cancel_resize_message OAICancelResizeMessage [optional]
    */
    virtual void pOSTCancelResize(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICancelResizeMessage> &oai_cancel_resize_message = ::OpenAPI::OptionalParam<OAICancelResizeMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_copy_cluster_snapshot_message OAICopyClusterSnapshotMessage [optional]
    */
    virtual void pOSTCopyClusterSnapshot(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICopyClusterSnapshotMessage> &oai_copy_cluster_snapshot_message = ::OpenAPI::OptionalParam<OAICopyClusterSnapshotMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_authentication_profile_message OAICreateAuthenticationProfileMessage [optional]
    */
    virtual void pOSTCreateAuthenticationProfile(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateAuthenticationProfileMessage> &oai_create_authentication_profile_message = ::OpenAPI::OptionalParam<OAICreateAuthenticationProfileMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_cluster_message OAICreateClusterMessage [optional]
    */
    virtual void pOSTCreateCluster(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateClusterMessage> &oai_create_cluster_message = ::OpenAPI::OptionalParam<OAICreateClusterMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_cluster_parameter_group_message OAICreateClusterParameterGroupMessage [optional]
    */
    virtual void pOSTCreateClusterParameterGroup(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateClusterParameterGroupMessage> &oai_create_cluster_parameter_group_message = ::OpenAPI::OptionalParam<OAICreateClusterParameterGroupMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_cluster_security_group_message OAICreateClusterSecurityGroupMessage [optional]
    */
    virtual void pOSTCreateClusterSecurityGroup(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateClusterSecurityGroupMessage> &oai_create_cluster_security_group_message = ::OpenAPI::OptionalParam<OAICreateClusterSecurityGroupMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_cluster_snapshot_message OAICreateClusterSnapshotMessage [optional]
    */
    virtual void pOSTCreateClusterSnapshot(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateClusterSnapshotMessage> &oai_create_cluster_snapshot_message = ::OpenAPI::OptionalParam<OAICreateClusterSnapshotMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_cluster_subnet_group_message OAICreateClusterSubnetGroupMessage [optional]
    */
    virtual void pOSTCreateClusterSubnetGroup(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateClusterSubnetGroupMessage> &oai_create_cluster_subnet_group_message = ::OpenAPI::OptionalParam<OAICreateClusterSubnetGroupMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_custom_domain_association_message OAICreateCustomDomainAssociationMessage [optional]
    */
    virtual void pOSTCreateCustomDomainAssociation(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateCustomDomainAssociationMessage> &oai_create_custom_domain_association_message = ::OpenAPI::OptionalParam<OAICreateCustomDomainAssociationMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_endpoint_access_message OAICreateEndpointAccessMessage [optional]
    */
    virtual void pOSTCreateEndpointAccess(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateEndpointAccessMessage> &oai_create_endpoint_access_message = ::OpenAPI::OptionalParam<OAICreateEndpointAccessMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_event_subscription_message OAICreateEventSubscriptionMessage [optional]
    */
    virtual void pOSTCreateEventSubscription(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateEventSubscriptionMessage> &oai_create_event_subscription_message = ::OpenAPI::OptionalParam<OAICreateEventSubscriptionMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_hsm_client_certificate_message OAICreateHsmClientCertificateMessage [optional]
    */
    virtual void pOSTCreateHsmClientCertificate(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateHsmClientCertificateMessage> &oai_create_hsm_client_certificate_message = ::OpenAPI::OptionalParam<OAICreateHsmClientCertificateMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_hsm_configuration_message OAICreateHsmConfigurationMessage [optional]
    */
    virtual void pOSTCreateHsmConfiguration(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateHsmConfigurationMessage> &oai_create_hsm_configuration_message = ::OpenAPI::OptionalParam<OAICreateHsmConfigurationMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_scheduled_action_message OAICreateScheduledActionMessage [optional]
    */
    virtual void pOSTCreateScheduledAction(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateScheduledActionMessage> &oai_create_scheduled_action_message = ::OpenAPI::OptionalParam<OAICreateScheduledActionMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_snapshot_copy_grant_message OAICreateSnapshotCopyGrantMessage [optional]
    */
    virtual void pOSTCreateSnapshotCopyGrant(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateSnapshotCopyGrantMessage> &oai_create_snapshot_copy_grant_message = ::OpenAPI::OptionalParam<OAICreateSnapshotCopyGrantMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_snapshot_schedule_message OAICreateSnapshotScheduleMessage [optional]
    */
    virtual void pOSTCreateSnapshotSchedule(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateSnapshotScheduleMessage> &oai_create_snapshot_schedule_message = ::OpenAPI::OptionalParam<OAICreateSnapshotScheduleMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_tags_message OAICreateTagsMessage [optional]
    */
    virtual void pOSTCreateTags(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateTagsMessage> &oai_create_tags_message = ::OpenAPI::OptionalParam<OAICreateTagsMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_usage_limit_message OAICreateUsageLimitMessage [optional]
    */
    virtual void pOSTCreateUsageLimit(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateUsageLimitMessage> &oai_create_usage_limit_message = ::OpenAPI::OptionalParam<OAICreateUsageLimitMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_deauthorize_data_share_message OAIDeauthorizeDataShareMessage [optional]
    */
    virtual void pOSTDeauthorizeDataShare(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeauthorizeDataShareMessage> &oai_deauthorize_data_share_message = ::OpenAPI::OptionalParam<OAIDeauthorizeDataShareMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_authentication_profile_message OAIDeleteAuthenticationProfileMessage [optional]
    */
    virtual void pOSTDeleteAuthenticationProfile(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteAuthenticationProfileMessage> &oai_delete_authentication_profile_message = ::OpenAPI::OptionalParam<OAIDeleteAuthenticationProfileMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_cluster_message OAIDeleteClusterMessage [optional]
    */
    virtual void pOSTDeleteCluster(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteClusterMessage> &oai_delete_cluster_message = ::OpenAPI::OptionalParam<OAIDeleteClusterMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_cluster_parameter_group_message OAIDeleteClusterParameterGroupMessage [optional]
    */
    virtual void pOSTDeleteClusterParameterGroup(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteClusterParameterGroupMessage> &oai_delete_cluster_parameter_group_message = ::OpenAPI::OptionalParam<OAIDeleteClusterParameterGroupMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_cluster_security_group_message OAIDeleteClusterSecurityGroupMessage [optional]
    */
    virtual void pOSTDeleteClusterSecurityGroup(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteClusterSecurityGroupMessage> &oai_delete_cluster_security_group_message = ::OpenAPI::OptionalParam<OAIDeleteClusterSecurityGroupMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_cluster_snapshot_message OAIDeleteClusterSnapshotMessage [optional]
    */
    virtual void pOSTDeleteClusterSnapshot(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteClusterSnapshotMessage> &oai_delete_cluster_snapshot_message = ::OpenAPI::OptionalParam<OAIDeleteClusterSnapshotMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_cluster_subnet_group_message OAIDeleteClusterSubnetGroupMessage [optional]
    */
    virtual void pOSTDeleteClusterSubnetGroup(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteClusterSubnetGroupMessage> &oai_delete_cluster_subnet_group_message = ::OpenAPI::OptionalParam<OAIDeleteClusterSubnetGroupMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_custom_domain_association_message OAIDeleteCustomDomainAssociationMessage [optional]
    */
    virtual void pOSTDeleteCustomDomainAssociation(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteCustomDomainAssociationMessage> &oai_delete_custom_domain_association_message = ::OpenAPI::OptionalParam<OAIDeleteCustomDomainAssociationMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_endpoint_access_message OAIDeleteEndpointAccessMessage [optional]
    */
    virtual void pOSTDeleteEndpointAccess(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteEndpointAccessMessage> &oai_delete_endpoint_access_message = ::OpenAPI::OptionalParam<OAIDeleteEndpointAccessMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_event_subscription_message OAIDeleteEventSubscriptionMessage [optional]
    */
    virtual void pOSTDeleteEventSubscription(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteEventSubscriptionMessage> &oai_delete_event_subscription_message = ::OpenAPI::OptionalParam<OAIDeleteEventSubscriptionMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_hsm_client_certificate_message OAIDeleteHsmClientCertificateMessage [optional]
    */
    virtual void pOSTDeleteHsmClientCertificate(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteHsmClientCertificateMessage> &oai_delete_hsm_client_certificate_message = ::OpenAPI::OptionalParam<OAIDeleteHsmClientCertificateMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_hsm_configuration_message OAIDeleteHsmConfigurationMessage [optional]
    */
    virtual void pOSTDeleteHsmConfiguration(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteHsmConfigurationMessage> &oai_delete_hsm_configuration_message = ::OpenAPI::OptionalParam<OAIDeleteHsmConfigurationMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_partner_integration_input_message OAIPartnerIntegrationInputMessage [optional]
    */
    virtual void pOSTDeletePartner(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPartnerIntegrationInputMessage> &oai_partner_integration_input_message = ::OpenAPI::OptionalParam<OAIPartnerIntegrationInputMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_scheduled_action_message OAIDeleteScheduledActionMessage [optional]
    */
    virtual void pOSTDeleteScheduledAction(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteScheduledActionMessage> &oai_delete_scheduled_action_message = ::OpenAPI::OptionalParam<OAIDeleteScheduledActionMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_snapshot_copy_grant_message OAIDeleteSnapshotCopyGrantMessage [optional]
    */
    virtual void pOSTDeleteSnapshotCopyGrant(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteSnapshotCopyGrantMessage> &oai_delete_snapshot_copy_grant_message = ::OpenAPI::OptionalParam<OAIDeleteSnapshotCopyGrantMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_snapshot_schedule_message OAIDeleteSnapshotScheduleMessage [optional]
    */
    virtual void pOSTDeleteSnapshotSchedule(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteSnapshotScheduleMessage> &oai_delete_snapshot_schedule_message = ::OpenAPI::OptionalParam<OAIDeleteSnapshotScheduleMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_tags_message OAIDeleteTagsMessage [optional]
    */
    virtual void pOSTDeleteTags(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteTagsMessage> &oai_delete_tags_message = ::OpenAPI::OptionalParam<OAIDeleteTagsMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_usage_limit_message OAIDeleteUsageLimitMessage [optional]
    */
    virtual void pOSTDeleteUsageLimit(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteUsageLimitMessage> &oai_delete_usage_limit_message = ::OpenAPI::OptionalParam<OAIDeleteUsageLimitMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_account_attributes_message OAIDescribeAccountAttributesMessage [optional]
    */
    virtual void pOSTDescribeAccountAttributes(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeAccountAttributesMessage> &oai_describe_account_attributes_message = ::OpenAPI::OptionalParam<OAIDescribeAccountAttributesMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_authentication_profiles_message OAIDescribeAuthenticationProfilesMessage [optional]
    */
    virtual void pOSTDescribeAuthenticationProfiles(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeAuthenticationProfilesMessage> &oai_describe_authentication_profiles_message = ::OpenAPI::OptionalParam<OAIDescribeAuthenticationProfilesMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_cluster_db_revisions_message OAIDescribeClusterDbRevisionsMessage [optional]
    */
    virtual void pOSTDescribeClusterDbRevisions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeClusterDbRevisionsMessage> &oai_describe_cluster_db_revisions_message = ::OpenAPI::OptionalParam<OAIDescribeClusterDbRevisionsMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_cluster_parameter_groups_message OAIDescribeClusterParameterGroupsMessage [optional]
    */
    virtual void pOSTDescribeClusterParameterGroups(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeClusterParameterGroupsMessage> &oai_describe_cluster_parameter_groups_message = ::OpenAPI::OptionalParam<OAIDescribeClusterParameterGroupsMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_cluster_parameters_message OAIDescribeClusterParametersMessage [optional]
    */
    virtual void pOSTDescribeClusterParameters(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeClusterParametersMessage> &oai_describe_cluster_parameters_message = ::OpenAPI::OptionalParam<OAIDescribeClusterParametersMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_cluster_security_groups_message OAIDescribeClusterSecurityGroupsMessage [optional]
    */
    virtual void pOSTDescribeClusterSecurityGroups(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeClusterSecurityGroupsMessage> &oai_describe_cluster_security_groups_message = ::OpenAPI::OptionalParam<OAIDescribeClusterSecurityGroupsMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_cluster_snapshots_message OAIDescribeClusterSnapshotsMessage [optional]
    */
    virtual void pOSTDescribeClusterSnapshots(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeClusterSnapshotsMessage> &oai_describe_cluster_snapshots_message = ::OpenAPI::OptionalParam<OAIDescribeClusterSnapshotsMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_cluster_subnet_groups_message OAIDescribeClusterSubnetGroupsMessage [optional]
    */
    virtual void pOSTDescribeClusterSubnetGroups(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeClusterSubnetGroupsMessage> &oai_describe_cluster_subnet_groups_message = ::OpenAPI::OptionalParam<OAIDescribeClusterSubnetGroupsMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_cluster_tracks_message OAIDescribeClusterTracksMessage [optional]
    */
    virtual void pOSTDescribeClusterTracks(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeClusterTracksMessage> &oai_describe_cluster_tracks_message = ::OpenAPI::OptionalParam<OAIDescribeClusterTracksMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_cluster_versions_message OAIDescribeClusterVersionsMessage [optional]
    */
    virtual void pOSTDescribeClusterVersions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeClusterVersionsMessage> &oai_describe_cluster_versions_message = ::OpenAPI::OptionalParam<OAIDescribeClusterVersionsMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_clusters_message OAIDescribeClustersMessage [optional]
    */
    virtual void pOSTDescribeClusters(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeClustersMessage> &oai_describe_clusters_message = ::OpenAPI::OptionalParam<OAIDescribeClustersMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_custom_domain_associations_message OAIDescribeCustomDomainAssociationsMessage [optional]
    */
    virtual void pOSTDescribeCustomDomainAssociations(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeCustomDomainAssociationsMessage> &oai_describe_custom_domain_associations_message = ::OpenAPI::OptionalParam<OAIDescribeCustomDomainAssociationsMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_data_shares_message OAIDescribeDataSharesMessage [optional]
    */
    virtual void pOSTDescribeDataShares(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeDataSharesMessage> &oai_describe_data_shares_message = ::OpenAPI::OptionalParam<OAIDescribeDataSharesMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_data_shares_for_consumer_message OAIDescribeDataSharesForConsumerMessage [optional]
    */
    virtual void pOSTDescribeDataSharesForConsumer(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeDataSharesForConsumerMessage> &oai_describe_data_shares_for_consumer_message = ::OpenAPI::OptionalParam<OAIDescribeDataSharesForConsumerMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_data_shares_for_producer_message OAIDescribeDataSharesForProducerMessage [optional]
    */
    virtual void pOSTDescribeDataSharesForProducer(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeDataSharesForProducerMessage> &oai_describe_data_shares_for_producer_message = ::OpenAPI::OptionalParam<OAIDescribeDataSharesForProducerMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_default_cluster_parameters_message OAIDescribeDefaultClusterParametersMessage [optional]
    */
    virtual void pOSTDescribeDefaultClusterParameters(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeDefaultClusterParametersMessage> &oai_describe_default_cluster_parameters_message = ::OpenAPI::OptionalParam<OAIDescribeDefaultClusterParametersMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_endpoint_access_message OAIDescribeEndpointAccessMessage [optional]
    */
    virtual void pOSTDescribeEndpointAccess(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeEndpointAccessMessage> &oai_describe_endpoint_access_message = ::OpenAPI::OptionalParam<OAIDescribeEndpointAccessMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_endpoint_authorization_message OAIDescribeEndpointAuthorizationMessage [optional]
    */
    virtual void pOSTDescribeEndpointAuthorization(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeEndpointAuthorizationMessage> &oai_describe_endpoint_authorization_message = ::OpenAPI::OptionalParam<OAIDescribeEndpointAuthorizationMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_event_categories_message OAIDescribeEventCategoriesMessage [optional]
    */
    virtual void pOSTDescribeEventCategories(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeEventCategoriesMessage> &oai_describe_event_categories_message = ::OpenAPI::OptionalParam<OAIDescribeEventCategoriesMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_event_subscriptions_message OAIDescribeEventSubscriptionsMessage [optional]
    */
    virtual void pOSTDescribeEventSubscriptions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeEventSubscriptionsMessage> &oai_describe_event_subscriptions_message = ::OpenAPI::OptionalParam<OAIDescribeEventSubscriptionsMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_events_message OAIDescribeEventsMessage [optional]
    */
    virtual void pOSTDescribeEvents(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeEventsMessage> &oai_describe_events_message = ::OpenAPI::OptionalParam<OAIDescribeEventsMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_hsm_client_certificates_message OAIDescribeHsmClientCertificatesMessage [optional]
    */
    virtual void pOSTDescribeHsmClientCertificates(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeHsmClientCertificatesMessage> &oai_describe_hsm_client_certificates_message = ::OpenAPI::OptionalParam<OAIDescribeHsmClientCertificatesMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_hsm_configurations_message OAIDescribeHsmConfigurationsMessage [optional]
    */
    virtual void pOSTDescribeHsmConfigurations(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeHsmConfigurationsMessage> &oai_describe_hsm_configurations_message = ::OpenAPI::OptionalParam<OAIDescribeHsmConfigurationsMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_logging_status_message OAIDescribeLoggingStatusMessage [optional]
    */
    virtual void pOSTDescribeLoggingStatus(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeLoggingStatusMessage> &oai_describe_logging_status_message = ::OpenAPI::OptionalParam<OAIDescribeLoggingStatusMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_node_configuration_options_message OAIDescribeNodeConfigurationOptionsMessage [optional]
    */
    virtual void pOSTDescribeNodeConfigurationOptions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeNodeConfigurationOptionsMessage> &oai_describe_node_configuration_options_message = ::OpenAPI::OptionalParam<OAIDescribeNodeConfigurationOptionsMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_orderable_cluster_options_message OAIDescribeOrderableClusterOptionsMessage [optional]
    */
    virtual void pOSTDescribeOrderableClusterOptions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeOrderableClusterOptionsMessage> &oai_describe_orderable_cluster_options_message = ::OpenAPI::OptionalParam<OAIDescribeOrderableClusterOptionsMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_partners_input_message OAIDescribePartnersInputMessage [optional]
    */
    virtual void pOSTDescribePartners(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribePartnersInputMessage> &oai_describe_partners_input_message = ::OpenAPI::OptionalParam<OAIDescribePartnersInputMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_reserved_node_exchange_status_input_message OAIDescribeReservedNodeExchangeStatusInputMessage [optional]
    */
    virtual void pOSTDescribeReservedNodeExchangeStatus(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeReservedNodeExchangeStatusInputMessage> &oai_describe_reserved_node_exchange_status_input_message = ::OpenAPI::OptionalParam<OAIDescribeReservedNodeExchangeStatusInputMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_reserved_node_offerings_message OAIDescribeReservedNodeOfferingsMessage [optional]
    */
    virtual void pOSTDescribeReservedNodeOfferings(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeReservedNodeOfferingsMessage> &oai_describe_reserved_node_offerings_message = ::OpenAPI::OptionalParam<OAIDescribeReservedNodeOfferingsMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_reserved_nodes_message OAIDescribeReservedNodesMessage [optional]
    */
    virtual void pOSTDescribeReservedNodes(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeReservedNodesMessage> &oai_describe_reserved_nodes_message = ::OpenAPI::OptionalParam<OAIDescribeReservedNodesMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_resize_message OAIDescribeResizeMessage [optional]
    */
    virtual void pOSTDescribeResize(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeResizeMessage> &oai_describe_resize_message = ::OpenAPI::OptionalParam<OAIDescribeResizeMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_scheduled_actions_message OAIDescribeScheduledActionsMessage [optional]
    */
    virtual void pOSTDescribeScheduledActions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeScheduledActionsMessage> &oai_describe_scheduled_actions_message = ::OpenAPI::OptionalParam<OAIDescribeScheduledActionsMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_snapshot_copy_grants_message OAIDescribeSnapshotCopyGrantsMessage [optional]
    */
    virtual void pOSTDescribeSnapshotCopyGrants(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeSnapshotCopyGrantsMessage> &oai_describe_snapshot_copy_grants_message = ::OpenAPI::OptionalParam<OAIDescribeSnapshotCopyGrantsMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_snapshot_schedules_message OAIDescribeSnapshotSchedulesMessage [optional]
    */
    virtual void pOSTDescribeSnapshotSchedules(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeSnapshotSchedulesMessage> &oai_describe_snapshot_schedules_message = ::OpenAPI::OptionalParam<OAIDescribeSnapshotSchedulesMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void pOSTDescribeStorage(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_table_restore_status_message OAIDescribeTableRestoreStatusMessage [optional]
    */
    virtual void pOSTDescribeTableRestoreStatus(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeTableRestoreStatusMessage> &oai_describe_table_restore_status_message = ::OpenAPI::OptionalParam<OAIDescribeTableRestoreStatusMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_tags_message OAIDescribeTagsMessage [optional]
    */
    virtual void pOSTDescribeTags(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeTagsMessage> &oai_describe_tags_message = ::OpenAPI::OptionalParam<OAIDescribeTagsMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_usage_limits_message OAIDescribeUsageLimitsMessage [optional]
    */
    virtual void pOSTDescribeUsageLimits(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeUsageLimitsMessage> &oai_describe_usage_limits_message = ::OpenAPI::OptionalParam<OAIDescribeUsageLimitsMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_disable_logging_message OAIDisableLoggingMessage [optional]
    */
    virtual void pOSTDisableLogging(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDisableLoggingMessage> &oai_disable_logging_message = ::OpenAPI::OptionalParam<OAIDisableLoggingMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_disable_snapshot_copy_message OAIDisableSnapshotCopyMessage [optional]
    */
    virtual void pOSTDisableSnapshotCopy(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDisableSnapshotCopyMessage> &oai_disable_snapshot_copy_message = ::OpenAPI::OptionalParam<OAIDisableSnapshotCopyMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_disassociate_data_share_consumer_message OAIDisassociateDataShareConsumerMessage [optional]
    */
    virtual void pOSTDisassociateDataShareConsumer(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDisassociateDataShareConsumerMessage> &oai_disassociate_data_share_consumer_message = ::OpenAPI::OptionalParam<OAIDisassociateDataShareConsumerMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_enable_logging_message OAIEnableLoggingMessage [optional]
    */
    virtual void pOSTEnableLogging(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIEnableLoggingMessage> &oai_enable_logging_message = ::OpenAPI::OptionalParam<OAIEnableLoggingMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_enable_snapshot_copy_message OAIEnableSnapshotCopyMessage [optional]
    */
    virtual void pOSTEnableSnapshotCopy(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIEnableSnapshotCopyMessage> &oai_enable_snapshot_copy_message = ::OpenAPI::OptionalParam<OAIEnableSnapshotCopyMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_get_cluster_credentials_message OAIGetClusterCredentialsMessage [optional]
    */
    virtual void pOSTGetClusterCredentials(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGetClusterCredentialsMessage> &oai_get_cluster_credentials_message = ::OpenAPI::OptionalParam<OAIGetClusterCredentialsMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_get_cluster_credentials_with_iam_message OAIGetClusterCredentialsWithIAMMessage [optional]
    */
    virtual void pOSTGetClusterCredentialsWithIAM(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGetClusterCredentialsWithIAMMessage> &oai_get_cluster_credentials_with_iam_message = ::OpenAPI::OptionalParam<OAIGetClusterCredentialsWithIAMMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_get_reserved_node_exchange_configuration_options_input_message OAIGetReservedNodeExchangeConfigurationOptionsInputMessage [optional]
    */
    virtual void pOSTGetReservedNodeExchangeConfigurationOptions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGetReservedNodeExchangeConfigurationOptionsInputMessage> &oai_get_reserved_node_exchange_configuration_options_input_message = ::OpenAPI::OptionalParam<OAIGetReservedNodeExchangeConfigurationOptionsInputMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_get_reserved_node_exchange_offerings_input_message OAIGetReservedNodeExchangeOfferingsInputMessage [optional]
    */
    virtual void pOSTGetReservedNodeExchangeOfferings(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGetReservedNodeExchangeOfferingsInputMessage> &oai_get_reserved_node_exchange_offerings_input_message = ::OpenAPI::OptionalParam<OAIGetReservedNodeExchangeOfferingsInputMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_modify_aqua_input_message OAIModifyAquaInputMessage [optional]
    */
    virtual void pOSTModifyAquaConfiguration(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIModifyAquaInputMessage> &oai_modify_aqua_input_message = ::OpenAPI::OptionalParam<OAIModifyAquaInputMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_modify_authentication_profile_message OAIModifyAuthenticationProfileMessage [optional]
    */
    virtual void pOSTModifyAuthenticationProfile(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIModifyAuthenticationProfileMessage> &oai_modify_authentication_profile_message = ::OpenAPI::OptionalParam<OAIModifyAuthenticationProfileMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_modify_cluster_message OAIModifyClusterMessage [optional]
    */
    virtual void pOSTModifyCluster(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIModifyClusterMessage> &oai_modify_cluster_message = ::OpenAPI::OptionalParam<OAIModifyClusterMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_modify_cluster_db_revision_message OAIModifyClusterDbRevisionMessage [optional]
    */
    virtual void pOSTModifyClusterDbRevision(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIModifyClusterDbRevisionMessage> &oai_modify_cluster_db_revision_message = ::OpenAPI::OptionalParam<OAIModifyClusterDbRevisionMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_modify_cluster_iam_roles_message OAIModifyClusterIamRolesMessage [optional]
    */
    virtual void pOSTModifyClusterIamRoles(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIModifyClusterIamRolesMessage> &oai_modify_cluster_iam_roles_message = ::OpenAPI::OptionalParam<OAIModifyClusterIamRolesMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_modify_cluster_maintenance_message OAIModifyClusterMaintenanceMessage [optional]
    */
    virtual void pOSTModifyClusterMaintenance(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIModifyClusterMaintenanceMessage> &oai_modify_cluster_maintenance_message = ::OpenAPI::OptionalParam<OAIModifyClusterMaintenanceMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_modify_cluster_parameter_group_message OAIModifyClusterParameterGroupMessage [optional]
    */
    virtual void pOSTModifyClusterParameterGroup(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIModifyClusterParameterGroupMessage> &oai_modify_cluster_parameter_group_message = ::OpenAPI::OptionalParam<OAIModifyClusterParameterGroupMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_modify_cluster_snapshot_message OAIModifyClusterSnapshotMessage [optional]
    */
    virtual void pOSTModifyClusterSnapshot(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIModifyClusterSnapshotMessage> &oai_modify_cluster_snapshot_message = ::OpenAPI::OptionalParam<OAIModifyClusterSnapshotMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_modify_cluster_snapshot_schedule_message OAIModifyClusterSnapshotScheduleMessage [optional]
    */
    virtual void pOSTModifyClusterSnapshotSchedule(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIModifyClusterSnapshotScheduleMessage> &oai_modify_cluster_snapshot_schedule_message = ::OpenAPI::OptionalParam<OAIModifyClusterSnapshotScheduleMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_modify_cluster_subnet_group_message OAIModifyClusterSubnetGroupMessage [optional]
    */
    virtual void pOSTModifyClusterSubnetGroup(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIModifyClusterSubnetGroupMessage> &oai_modify_cluster_subnet_group_message = ::OpenAPI::OptionalParam<OAIModifyClusterSubnetGroupMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_modify_custom_domain_association_message OAIModifyCustomDomainAssociationMessage [optional]
    */
    virtual void pOSTModifyCustomDomainAssociation(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIModifyCustomDomainAssociationMessage> &oai_modify_custom_domain_association_message = ::OpenAPI::OptionalParam<OAIModifyCustomDomainAssociationMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_modify_endpoint_access_message OAIModifyEndpointAccessMessage [optional]
    */
    virtual void pOSTModifyEndpointAccess(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIModifyEndpointAccessMessage> &oai_modify_endpoint_access_message = ::OpenAPI::OptionalParam<OAIModifyEndpointAccessMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_modify_event_subscription_message OAIModifyEventSubscriptionMessage [optional]
    */
    virtual void pOSTModifyEventSubscription(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIModifyEventSubscriptionMessage> &oai_modify_event_subscription_message = ::OpenAPI::OptionalParam<OAIModifyEventSubscriptionMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_modify_scheduled_action_message OAIModifyScheduledActionMessage [optional]
    */
    virtual void pOSTModifyScheduledAction(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIModifyScheduledActionMessage> &oai_modify_scheduled_action_message = ::OpenAPI::OptionalParam<OAIModifyScheduledActionMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_modify_snapshot_copy_retention_period_message OAIModifySnapshotCopyRetentionPeriodMessage [optional]
    */
    virtual void pOSTModifySnapshotCopyRetentionPeriod(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIModifySnapshotCopyRetentionPeriodMessage> &oai_modify_snapshot_copy_retention_period_message = ::OpenAPI::OptionalParam<OAIModifySnapshotCopyRetentionPeriodMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_modify_snapshot_schedule_message OAIModifySnapshotScheduleMessage [optional]
    */
    virtual void pOSTModifySnapshotSchedule(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIModifySnapshotScheduleMessage> &oai_modify_snapshot_schedule_message = ::OpenAPI::OptionalParam<OAIModifySnapshotScheduleMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_modify_usage_limit_message OAIModifyUsageLimitMessage [optional]
    */
    virtual void pOSTModifyUsageLimit(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIModifyUsageLimitMessage> &oai_modify_usage_limit_message = ::OpenAPI::OptionalParam<OAIModifyUsageLimitMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_pause_cluster_message OAIPauseClusterMessage [optional]
    */
    virtual void pOSTPauseCluster(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPauseClusterMessage> &oai_pause_cluster_message = ::OpenAPI::OptionalParam<OAIPauseClusterMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_purchase_reserved_node_offering_message OAIPurchaseReservedNodeOfferingMessage [optional]
    */
    virtual void pOSTPurchaseReservedNodeOffering(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPurchaseReservedNodeOfferingMessage> &oai_purchase_reserved_node_offering_message = ::OpenAPI::OptionalParam<OAIPurchaseReservedNodeOfferingMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_reboot_cluster_message OAIRebootClusterMessage [optional]
    */
    virtual void pOSTRebootCluster(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRebootClusterMessage> &oai_reboot_cluster_message = ::OpenAPI::OptionalParam<OAIRebootClusterMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_reject_data_share_message OAIRejectDataShareMessage [optional]
    */
    virtual void pOSTRejectDataShare(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRejectDataShareMessage> &oai_reject_data_share_message = ::OpenAPI::OptionalParam<OAIRejectDataShareMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_reset_cluster_parameter_group_message OAIResetClusterParameterGroupMessage [optional]
    */
    virtual void pOSTResetClusterParameterGroup(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIResetClusterParameterGroupMessage> &oai_reset_cluster_parameter_group_message = ::OpenAPI::OptionalParam<OAIResetClusterParameterGroupMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_resize_cluster_message OAIResizeClusterMessage [optional]
    */
    virtual void pOSTResizeCluster(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIResizeClusterMessage> &oai_resize_cluster_message = ::OpenAPI::OptionalParam<OAIResizeClusterMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_restore_from_cluster_snapshot_message OAIRestoreFromClusterSnapshotMessage [optional]
    */
    virtual void pOSTRestoreFromClusterSnapshot(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRestoreFromClusterSnapshotMessage> &oai_restore_from_cluster_snapshot_message = ::OpenAPI::OptionalParam<OAIRestoreFromClusterSnapshotMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_restore_table_from_cluster_snapshot_message OAIRestoreTableFromClusterSnapshotMessage [optional]
    */
    virtual void pOSTRestoreTableFromClusterSnapshot(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRestoreTableFromClusterSnapshotMessage> &oai_restore_table_from_cluster_snapshot_message = ::OpenAPI::OptionalParam<OAIRestoreTableFromClusterSnapshotMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_resume_cluster_message OAIResumeClusterMessage [optional]
    */
    virtual void pOSTResumeCluster(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIResumeClusterMessage> &oai_resume_cluster_message = ::OpenAPI::OptionalParam<OAIResumeClusterMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_revoke_cluster_security_group_ingress_message OAIRevokeClusterSecurityGroupIngressMessage [optional]
    */
    virtual void pOSTRevokeClusterSecurityGroupIngress(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRevokeClusterSecurityGroupIngressMessage> &oai_revoke_cluster_security_group_ingress_message = ::OpenAPI::OptionalParam<OAIRevokeClusterSecurityGroupIngressMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_revoke_endpoint_access_message OAIRevokeEndpointAccessMessage [optional]
    */
    virtual void pOSTRevokeEndpointAccess(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRevokeEndpointAccessMessage> &oai_revoke_endpoint_access_message = ::OpenAPI::OptionalParam<OAIRevokeEndpointAccessMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_revoke_snapshot_access_message OAIRevokeSnapshotAccessMessage [optional]
    */
    virtual void pOSTRevokeSnapshotAccess(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRevokeSnapshotAccessMessage> &oai_revoke_snapshot_access_message = ::OpenAPI::OptionalParam<OAIRevokeSnapshotAccessMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_rotate_encryption_key_message OAIRotateEncryptionKeyMessage [optional]
    */
    virtual void pOSTRotateEncryptionKey(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRotateEncryptionKeyMessage> &oai_rotate_encryption_key_message = ::OpenAPI::OptionalParam<OAIRotateEncryptionKeyMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_update_partner_status_input_message OAIUpdatePartnerStatusInputMessage [optional]
    */
    virtual void pOSTUpdatePartnerStatus(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdatePartnerStatusInputMessage> &oai_update_partner_status_input_message = ::OpenAPI::OptionalParam<OAIUpdatePartnerStatusInputMessage>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void gETAcceptReservedNodeExchangeCallback(OAIHttpRequestWorker *worker);
    void gETAddPartnerCallback(OAIHttpRequestWorker *worker);
    void gETAssociateDataShareConsumerCallback(OAIHttpRequestWorker *worker);
    void gETAuthorizeClusterSecurityGroupIngressCallback(OAIHttpRequestWorker *worker);
    void gETAuthorizeDataShareCallback(OAIHttpRequestWorker *worker);
    void gETAuthorizeEndpointAccessCallback(OAIHttpRequestWorker *worker);
    void gETAuthorizeSnapshotAccessCallback(OAIHttpRequestWorker *worker);
    void gETBatchDeleteClusterSnapshotsCallback(OAIHttpRequestWorker *worker);
    void gETBatchModifyClusterSnapshotsCallback(OAIHttpRequestWorker *worker);
    void gETCancelResizeCallback(OAIHttpRequestWorker *worker);
    void gETCopyClusterSnapshotCallback(OAIHttpRequestWorker *worker);
    void gETCreateAuthenticationProfileCallback(OAIHttpRequestWorker *worker);
    void gETCreateClusterCallback(OAIHttpRequestWorker *worker);
    void gETCreateClusterParameterGroupCallback(OAIHttpRequestWorker *worker);
    void gETCreateClusterSecurityGroupCallback(OAIHttpRequestWorker *worker);
    void gETCreateClusterSnapshotCallback(OAIHttpRequestWorker *worker);
    void gETCreateClusterSubnetGroupCallback(OAIHttpRequestWorker *worker);
    void gETCreateCustomDomainAssociationCallback(OAIHttpRequestWorker *worker);
    void gETCreateEndpointAccessCallback(OAIHttpRequestWorker *worker);
    void gETCreateEventSubscriptionCallback(OAIHttpRequestWorker *worker);
    void gETCreateHsmClientCertificateCallback(OAIHttpRequestWorker *worker);
    void gETCreateHsmConfigurationCallback(OAIHttpRequestWorker *worker);
    void gETCreateScheduledActionCallback(OAIHttpRequestWorker *worker);
    void gETCreateSnapshotCopyGrantCallback(OAIHttpRequestWorker *worker);
    void gETCreateSnapshotScheduleCallback(OAIHttpRequestWorker *worker);
    void gETCreateTagsCallback(OAIHttpRequestWorker *worker);
    void gETCreateUsageLimitCallback(OAIHttpRequestWorker *worker);
    void gETDeauthorizeDataShareCallback(OAIHttpRequestWorker *worker);
    void gETDeleteAuthenticationProfileCallback(OAIHttpRequestWorker *worker);
    void gETDeleteClusterCallback(OAIHttpRequestWorker *worker);
    void gETDeleteClusterParameterGroupCallback(OAIHttpRequestWorker *worker);
    void gETDeleteClusterSecurityGroupCallback(OAIHttpRequestWorker *worker);
    void gETDeleteClusterSnapshotCallback(OAIHttpRequestWorker *worker);
    void gETDeleteClusterSubnetGroupCallback(OAIHttpRequestWorker *worker);
    void gETDeleteCustomDomainAssociationCallback(OAIHttpRequestWorker *worker);
    void gETDeleteEndpointAccessCallback(OAIHttpRequestWorker *worker);
    void gETDeleteEventSubscriptionCallback(OAIHttpRequestWorker *worker);
    void gETDeleteHsmClientCertificateCallback(OAIHttpRequestWorker *worker);
    void gETDeleteHsmConfigurationCallback(OAIHttpRequestWorker *worker);
    void gETDeletePartnerCallback(OAIHttpRequestWorker *worker);
    void gETDeleteScheduledActionCallback(OAIHttpRequestWorker *worker);
    void gETDeleteSnapshotCopyGrantCallback(OAIHttpRequestWorker *worker);
    void gETDeleteSnapshotScheduleCallback(OAIHttpRequestWorker *worker);
    void gETDeleteTagsCallback(OAIHttpRequestWorker *worker);
    void gETDeleteUsageLimitCallback(OAIHttpRequestWorker *worker);
    void gETDescribeAccountAttributesCallback(OAIHttpRequestWorker *worker);
    void gETDescribeAuthenticationProfilesCallback(OAIHttpRequestWorker *worker);
    void gETDescribeClusterDbRevisionsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeClusterParameterGroupsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeClusterParametersCallback(OAIHttpRequestWorker *worker);
    void gETDescribeClusterSecurityGroupsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeClusterSnapshotsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeClusterSubnetGroupsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeClusterTracksCallback(OAIHttpRequestWorker *worker);
    void gETDescribeClusterVersionsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeClustersCallback(OAIHttpRequestWorker *worker);
    void gETDescribeCustomDomainAssociationsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeDataSharesCallback(OAIHttpRequestWorker *worker);
    void gETDescribeDataSharesForConsumerCallback(OAIHttpRequestWorker *worker);
    void gETDescribeDataSharesForProducerCallback(OAIHttpRequestWorker *worker);
    void gETDescribeDefaultClusterParametersCallback(OAIHttpRequestWorker *worker);
    void gETDescribeEndpointAccessCallback(OAIHttpRequestWorker *worker);
    void gETDescribeEndpointAuthorizationCallback(OAIHttpRequestWorker *worker);
    void gETDescribeEventCategoriesCallback(OAIHttpRequestWorker *worker);
    void gETDescribeEventSubscriptionsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeEventsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeHsmClientCertificatesCallback(OAIHttpRequestWorker *worker);
    void gETDescribeHsmConfigurationsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeLoggingStatusCallback(OAIHttpRequestWorker *worker);
    void gETDescribeNodeConfigurationOptionsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeOrderableClusterOptionsCallback(OAIHttpRequestWorker *worker);
    void gETDescribePartnersCallback(OAIHttpRequestWorker *worker);
    void gETDescribeReservedNodeExchangeStatusCallback(OAIHttpRequestWorker *worker);
    void gETDescribeReservedNodeOfferingsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeReservedNodesCallback(OAIHttpRequestWorker *worker);
    void gETDescribeResizeCallback(OAIHttpRequestWorker *worker);
    void gETDescribeScheduledActionsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeSnapshotCopyGrantsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeSnapshotSchedulesCallback(OAIHttpRequestWorker *worker);
    void gETDescribeStorageCallback(OAIHttpRequestWorker *worker);
    void gETDescribeTableRestoreStatusCallback(OAIHttpRequestWorker *worker);
    void gETDescribeTagsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeUsageLimitsCallback(OAIHttpRequestWorker *worker);
    void gETDisableLoggingCallback(OAIHttpRequestWorker *worker);
    void gETDisableSnapshotCopyCallback(OAIHttpRequestWorker *worker);
    void gETDisassociateDataShareConsumerCallback(OAIHttpRequestWorker *worker);
    void gETEnableLoggingCallback(OAIHttpRequestWorker *worker);
    void gETEnableSnapshotCopyCallback(OAIHttpRequestWorker *worker);
    void gETGetClusterCredentialsCallback(OAIHttpRequestWorker *worker);
    void gETGetClusterCredentialsWithIAMCallback(OAIHttpRequestWorker *worker);
    void gETGetReservedNodeExchangeConfigurationOptionsCallback(OAIHttpRequestWorker *worker);
    void gETGetReservedNodeExchangeOfferingsCallback(OAIHttpRequestWorker *worker);
    void gETModifyAquaConfigurationCallback(OAIHttpRequestWorker *worker);
    void gETModifyAuthenticationProfileCallback(OAIHttpRequestWorker *worker);
    void gETModifyClusterCallback(OAIHttpRequestWorker *worker);
    void gETModifyClusterDbRevisionCallback(OAIHttpRequestWorker *worker);
    void gETModifyClusterIamRolesCallback(OAIHttpRequestWorker *worker);
    void gETModifyClusterMaintenanceCallback(OAIHttpRequestWorker *worker);
    void gETModifyClusterParameterGroupCallback(OAIHttpRequestWorker *worker);
    void gETModifyClusterSnapshotCallback(OAIHttpRequestWorker *worker);
    void gETModifyClusterSnapshotScheduleCallback(OAIHttpRequestWorker *worker);
    void gETModifyClusterSubnetGroupCallback(OAIHttpRequestWorker *worker);
    void gETModifyCustomDomainAssociationCallback(OAIHttpRequestWorker *worker);
    void gETModifyEndpointAccessCallback(OAIHttpRequestWorker *worker);
    void gETModifyEventSubscriptionCallback(OAIHttpRequestWorker *worker);
    void gETModifyScheduledActionCallback(OAIHttpRequestWorker *worker);
    void gETModifySnapshotCopyRetentionPeriodCallback(OAIHttpRequestWorker *worker);
    void gETModifySnapshotScheduleCallback(OAIHttpRequestWorker *worker);
    void gETModifyUsageLimitCallback(OAIHttpRequestWorker *worker);
    void gETPauseClusterCallback(OAIHttpRequestWorker *worker);
    void gETPurchaseReservedNodeOfferingCallback(OAIHttpRequestWorker *worker);
    void gETRebootClusterCallback(OAIHttpRequestWorker *worker);
    void gETRejectDataShareCallback(OAIHttpRequestWorker *worker);
    void gETResetClusterParameterGroupCallback(OAIHttpRequestWorker *worker);
    void gETResizeClusterCallback(OAIHttpRequestWorker *worker);
    void gETRestoreFromClusterSnapshotCallback(OAIHttpRequestWorker *worker);
    void gETRestoreTableFromClusterSnapshotCallback(OAIHttpRequestWorker *worker);
    void gETResumeClusterCallback(OAIHttpRequestWorker *worker);
    void gETRevokeClusterSecurityGroupIngressCallback(OAIHttpRequestWorker *worker);
    void gETRevokeEndpointAccessCallback(OAIHttpRequestWorker *worker);
    void gETRevokeSnapshotAccessCallback(OAIHttpRequestWorker *worker);
    void gETRotateEncryptionKeyCallback(OAIHttpRequestWorker *worker);
    void gETUpdatePartnerStatusCallback(OAIHttpRequestWorker *worker);
    void pOSTAcceptReservedNodeExchangeCallback(OAIHttpRequestWorker *worker);
    void pOSTAddPartnerCallback(OAIHttpRequestWorker *worker);
    void pOSTAssociateDataShareConsumerCallback(OAIHttpRequestWorker *worker);
    void pOSTAuthorizeClusterSecurityGroupIngressCallback(OAIHttpRequestWorker *worker);
    void pOSTAuthorizeDataShareCallback(OAIHttpRequestWorker *worker);
    void pOSTAuthorizeEndpointAccessCallback(OAIHttpRequestWorker *worker);
    void pOSTAuthorizeSnapshotAccessCallback(OAIHttpRequestWorker *worker);
    void pOSTBatchDeleteClusterSnapshotsCallback(OAIHttpRequestWorker *worker);
    void pOSTBatchModifyClusterSnapshotsCallback(OAIHttpRequestWorker *worker);
    void pOSTCancelResizeCallback(OAIHttpRequestWorker *worker);
    void pOSTCopyClusterSnapshotCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateAuthenticationProfileCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateClusterCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateClusterParameterGroupCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateClusterSecurityGroupCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateClusterSnapshotCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateClusterSubnetGroupCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateCustomDomainAssociationCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateEndpointAccessCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateEventSubscriptionCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateHsmClientCertificateCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateHsmConfigurationCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateScheduledActionCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateSnapshotCopyGrantCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateSnapshotScheduleCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateTagsCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateUsageLimitCallback(OAIHttpRequestWorker *worker);
    void pOSTDeauthorizeDataShareCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteAuthenticationProfileCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteClusterCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteClusterParameterGroupCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteClusterSecurityGroupCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteClusterSnapshotCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteClusterSubnetGroupCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteCustomDomainAssociationCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteEndpointAccessCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteEventSubscriptionCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteHsmClientCertificateCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteHsmConfigurationCallback(OAIHttpRequestWorker *worker);
    void pOSTDeletePartnerCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteScheduledActionCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteSnapshotCopyGrantCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteSnapshotScheduleCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteTagsCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteUsageLimitCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeAccountAttributesCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeAuthenticationProfilesCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeClusterDbRevisionsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeClusterParameterGroupsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeClusterParametersCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeClusterSecurityGroupsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeClusterSnapshotsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeClusterSubnetGroupsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeClusterTracksCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeClusterVersionsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeClustersCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeCustomDomainAssociationsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeDataSharesCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeDataSharesForConsumerCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeDataSharesForProducerCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeDefaultClusterParametersCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeEndpointAccessCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeEndpointAuthorizationCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeEventCategoriesCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeEventSubscriptionsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeEventsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeHsmClientCertificatesCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeHsmConfigurationsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeLoggingStatusCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeNodeConfigurationOptionsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeOrderableClusterOptionsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribePartnersCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeReservedNodeExchangeStatusCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeReservedNodeOfferingsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeReservedNodesCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeResizeCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeScheduledActionsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeSnapshotCopyGrantsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeSnapshotSchedulesCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeStorageCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeTableRestoreStatusCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeTagsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeUsageLimitsCallback(OAIHttpRequestWorker *worker);
    void pOSTDisableLoggingCallback(OAIHttpRequestWorker *worker);
    void pOSTDisableSnapshotCopyCallback(OAIHttpRequestWorker *worker);
    void pOSTDisassociateDataShareConsumerCallback(OAIHttpRequestWorker *worker);
    void pOSTEnableLoggingCallback(OAIHttpRequestWorker *worker);
    void pOSTEnableSnapshotCopyCallback(OAIHttpRequestWorker *worker);
    void pOSTGetClusterCredentialsCallback(OAIHttpRequestWorker *worker);
    void pOSTGetClusterCredentialsWithIAMCallback(OAIHttpRequestWorker *worker);
    void pOSTGetReservedNodeExchangeConfigurationOptionsCallback(OAIHttpRequestWorker *worker);
    void pOSTGetReservedNodeExchangeOfferingsCallback(OAIHttpRequestWorker *worker);
    void pOSTModifyAquaConfigurationCallback(OAIHttpRequestWorker *worker);
    void pOSTModifyAuthenticationProfileCallback(OAIHttpRequestWorker *worker);
    void pOSTModifyClusterCallback(OAIHttpRequestWorker *worker);
    void pOSTModifyClusterDbRevisionCallback(OAIHttpRequestWorker *worker);
    void pOSTModifyClusterIamRolesCallback(OAIHttpRequestWorker *worker);
    void pOSTModifyClusterMaintenanceCallback(OAIHttpRequestWorker *worker);
    void pOSTModifyClusterParameterGroupCallback(OAIHttpRequestWorker *worker);
    void pOSTModifyClusterSnapshotCallback(OAIHttpRequestWorker *worker);
    void pOSTModifyClusterSnapshotScheduleCallback(OAIHttpRequestWorker *worker);
    void pOSTModifyClusterSubnetGroupCallback(OAIHttpRequestWorker *worker);
    void pOSTModifyCustomDomainAssociationCallback(OAIHttpRequestWorker *worker);
    void pOSTModifyEndpointAccessCallback(OAIHttpRequestWorker *worker);
    void pOSTModifyEventSubscriptionCallback(OAIHttpRequestWorker *worker);
    void pOSTModifyScheduledActionCallback(OAIHttpRequestWorker *worker);
    void pOSTModifySnapshotCopyRetentionPeriodCallback(OAIHttpRequestWorker *worker);
    void pOSTModifySnapshotScheduleCallback(OAIHttpRequestWorker *worker);
    void pOSTModifyUsageLimitCallback(OAIHttpRequestWorker *worker);
    void pOSTPauseClusterCallback(OAIHttpRequestWorker *worker);
    void pOSTPurchaseReservedNodeOfferingCallback(OAIHttpRequestWorker *worker);
    void pOSTRebootClusterCallback(OAIHttpRequestWorker *worker);
    void pOSTRejectDataShareCallback(OAIHttpRequestWorker *worker);
    void pOSTResetClusterParameterGroupCallback(OAIHttpRequestWorker *worker);
    void pOSTResizeClusterCallback(OAIHttpRequestWorker *worker);
    void pOSTRestoreFromClusterSnapshotCallback(OAIHttpRequestWorker *worker);
    void pOSTRestoreTableFromClusterSnapshotCallback(OAIHttpRequestWorker *worker);
    void pOSTResumeClusterCallback(OAIHttpRequestWorker *worker);
    void pOSTRevokeClusterSecurityGroupIngressCallback(OAIHttpRequestWorker *worker);
    void pOSTRevokeEndpointAccessCallback(OAIHttpRequestWorker *worker);
    void pOSTRevokeSnapshotAccessCallback(OAIHttpRequestWorker *worker);
    void pOSTRotateEncryptionKeyCallback(OAIHttpRequestWorker *worker);
    void pOSTUpdatePartnerStatusCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void gETAcceptReservedNodeExchangeSignal(OAIAcceptReservedNodeExchangeOutputMessage summary);
    void gETAddPartnerSignal(OAIPartnerIntegrationOutputMessage summary);
    void gETAssociateDataShareConsumerSignal(OAIDataShare summary);
    void gETAuthorizeClusterSecurityGroupIngressSignal(OAIAuthorizeClusterSecurityGroupIngressResult summary);
    void gETAuthorizeDataShareSignal(OAIDataShare summary);
    void gETAuthorizeEndpointAccessSignal(OAIEndpointAuthorization summary);
    void gETAuthorizeSnapshotAccessSignal(OAIAuthorizeSnapshotAccessResult summary);
    void gETBatchDeleteClusterSnapshotsSignal(OAIBatchDeleteClusterSnapshotsResult summary);
    void gETBatchModifyClusterSnapshotsSignal(OAIBatchModifyClusterSnapshotsOutputMessage summary);
    void gETCancelResizeSignal(OAIResizeProgressMessage summary);
    void gETCopyClusterSnapshotSignal(OAICopyClusterSnapshotResult summary);
    void gETCreateAuthenticationProfileSignal(OAICreateAuthenticationProfileResult summary);
    void gETCreateClusterSignal(OAICreateClusterResult summary);
    void gETCreateClusterParameterGroupSignal(OAICreateClusterParameterGroupResult summary);
    void gETCreateClusterSecurityGroupSignal(OAICreateClusterSecurityGroupResult summary);
    void gETCreateClusterSnapshotSignal(OAICreateClusterSnapshotResult summary);
    void gETCreateClusterSubnetGroupSignal(OAICreateClusterSubnetGroupResult summary);
    void gETCreateCustomDomainAssociationSignal(OAICreateCustomDomainAssociationResult summary);
    void gETCreateEndpointAccessSignal(OAIEndpointAccess summary);
    void gETCreateEventSubscriptionSignal(OAICreateEventSubscriptionResult summary);
    void gETCreateHsmClientCertificateSignal(OAICreateHsmClientCertificateResult summary);
    void gETCreateHsmConfigurationSignal(OAICreateHsmConfigurationResult summary);
    void gETCreateScheduledActionSignal(OAIScheduledAction summary);
    void gETCreateSnapshotCopyGrantSignal(OAICreateSnapshotCopyGrantResult summary);
    void gETCreateSnapshotScheduleSignal(OAISnapshotSchedule summary);
    void gETCreateTagsSignal();
    void gETCreateUsageLimitSignal(OAIUsageLimit summary);
    void gETDeauthorizeDataShareSignal(OAIDataShare summary);
    void gETDeleteAuthenticationProfileSignal(OAIDeleteAuthenticationProfileResult summary);
    void gETDeleteClusterSignal(OAIDeleteClusterResult summary);
    void gETDeleteClusterParameterGroupSignal();
    void gETDeleteClusterSecurityGroupSignal();
    void gETDeleteClusterSnapshotSignal(OAIDeleteClusterSnapshotResult summary);
    void gETDeleteClusterSubnetGroupSignal();
    void gETDeleteCustomDomainAssociationSignal();
    void gETDeleteEndpointAccessSignal(OAIEndpointAccess summary);
    void gETDeleteEventSubscriptionSignal();
    void gETDeleteHsmClientCertificateSignal();
    void gETDeleteHsmConfigurationSignal();
    void gETDeletePartnerSignal(OAIPartnerIntegrationOutputMessage summary);
    void gETDeleteScheduledActionSignal();
    void gETDeleteSnapshotCopyGrantSignal();
    void gETDeleteSnapshotScheduleSignal();
    void gETDeleteTagsSignal();
    void gETDeleteUsageLimitSignal();
    void gETDescribeAccountAttributesSignal(OAIAccountAttributeList summary);
    void gETDescribeAuthenticationProfilesSignal(OAIDescribeAuthenticationProfilesResult summary);
    void gETDescribeClusterDbRevisionsSignal(OAIClusterDbRevisionsMessage summary);
    void gETDescribeClusterParameterGroupsSignal(OAIClusterParameterGroupsMessage summary);
    void gETDescribeClusterParametersSignal(OAIClusterParameterGroupDetails summary);
    void gETDescribeClusterSecurityGroupsSignal(OAIClusterSecurityGroupMessage summary);
    void gETDescribeClusterSnapshotsSignal(OAISnapshotMessage summary);
    void gETDescribeClusterSubnetGroupsSignal(OAIClusterSubnetGroupMessage summary);
    void gETDescribeClusterTracksSignal(OAITrackListMessage summary);
    void gETDescribeClusterVersionsSignal(OAIClusterVersionsMessage summary);
    void gETDescribeClustersSignal(OAIClustersMessage summary);
    void gETDescribeCustomDomainAssociationsSignal(OAICustomDomainAssociationsMessage summary);
    void gETDescribeDataSharesSignal(OAIDescribeDataSharesResult summary);
    void gETDescribeDataSharesForConsumerSignal(OAIDescribeDataSharesForConsumerResult summary);
    void gETDescribeDataSharesForProducerSignal(OAIDescribeDataSharesForProducerResult summary);
    void gETDescribeDefaultClusterParametersSignal(OAIDescribeDefaultClusterParametersResult summary);
    void gETDescribeEndpointAccessSignal(OAIEndpointAccessList summary);
    void gETDescribeEndpointAuthorizationSignal(OAIEndpointAuthorizationList summary);
    void gETDescribeEventCategoriesSignal(OAIEventCategoriesMessage summary);
    void gETDescribeEventSubscriptionsSignal(OAIEventSubscriptionsMessage summary);
    void gETDescribeEventsSignal(OAIEventsMessage summary);
    void gETDescribeHsmClientCertificatesSignal(OAIHsmClientCertificateMessage summary);
    void gETDescribeHsmConfigurationsSignal(OAIHsmConfigurationMessage summary);
    void gETDescribeLoggingStatusSignal(OAILoggingStatus summary);
    void gETDescribeNodeConfigurationOptionsSignal(OAINodeConfigurationOptionsMessage summary);
    void gETDescribeOrderableClusterOptionsSignal(OAIOrderableClusterOptionsMessage summary);
    void gETDescribePartnersSignal(OAIDescribePartnersOutputMessage summary);
    void gETDescribeReservedNodeExchangeStatusSignal(OAIDescribeReservedNodeExchangeStatusOutputMessage summary);
    void gETDescribeReservedNodeOfferingsSignal(OAIReservedNodeOfferingsMessage summary);
    void gETDescribeReservedNodesSignal(OAIReservedNodesMessage summary);
    void gETDescribeResizeSignal(OAIResizeProgressMessage summary);
    void gETDescribeScheduledActionsSignal(OAIScheduledActionsMessage summary);
    void gETDescribeSnapshotCopyGrantsSignal(OAISnapshotCopyGrantMessage summary);
    void gETDescribeSnapshotSchedulesSignal(OAIDescribeSnapshotSchedulesOutputMessage summary);
    void gETDescribeStorageSignal(OAICustomerStorageMessage summary);
    void gETDescribeTableRestoreStatusSignal(OAITableRestoreStatusMessage summary);
    void gETDescribeTagsSignal(OAITaggedResourceListMessage summary);
    void gETDescribeUsageLimitsSignal(OAIUsageLimitList summary);
    void gETDisableLoggingSignal(OAILoggingStatus summary);
    void gETDisableSnapshotCopySignal(OAIDisableSnapshotCopyResult summary);
    void gETDisassociateDataShareConsumerSignal(OAIDataShare summary);
    void gETEnableLoggingSignal(OAILoggingStatus summary);
    void gETEnableSnapshotCopySignal(OAIEnableSnapshotCopyResult summary);
    void gETGetClusterCredentialsSignal(OAIClusterCredentials summary);
    void gETGetClusterCredentialsWithIAMSignal(OAIClusterExtendedCredentials summary);
    void gETGetReservedNodeExchangeConfigurationOptionsSignal(OAIGetReservedNodeExchangeConfigurationOptionsOutputMessage summary);
    void gETGetReservedNodeExchangeOfferingsSignal(OAIGetReservedNodeExchangeOfferingsOutputMessage summary);
    void gETModifyAquaConfigurationSignal(OAIModifyAquaOutputMessage summary);
    void gETModifyAuthenticationProfileSignal(OAIModifyAuthenticationProfileResult summary);
    void gETModifyClusterSignal(OAIModifyClusterResult summary);
    void gETModifyClusterDbRevisionSignal(OAIModifyClusterDbRevisionResult summary);
    void gETModifyClusterIamRolesSignal(OAIModifyClusterIamRolesResult summary);
    void gETModifyClusterMaintenanceSignal(OAIModifyClusterMaintenanceResult summary);
    void gETModifyClusterParameterGroupSignal(OAIClusterParameterGroupNameMessage summary);
    void gETModifyClusterSnapshotSignal(OAIModifyClusterSnapshotResult summary);
    void gETModifyClusterSnapshotScheduleSignal();
    void gETModifyClusterSubnetGroupSignal(OAIModifyClusterSubnetGroupResult summary);
    void gETModifyCustomDomainAssociationSignal(OAIModifyCustomDomainAssociationResult summary);
    void gETModifyEndpointAccessSignal(OAIEndpointAccess summary);
    void gETModifyEventSubscriptionSignal(OAIModifyEventSubscriptionResult summary);
    void gETModifyScheduledActionSignal(OAIScheduledAction summary);
    void gETModifySnapshotCopyRetentionPeriodSignal(OAIModifySnapshotCopyRetentionPeriodResult summary);
    void gETModifySnapshotScheduleSignal(OAISnapshotSchedule summary);
    void gETModifyUsageLimitSignal(OAIUsageLimit summary);
    void gETPauseClusterSignal(OAIPauseClusterResult summary);
    void gETPurchaseReservedNodeOfferingSignal(OAIPurchaseReservedNodeOfferingResult summary);
    void gETRebootClusterSignal(OAIRebootClusterResult summary);
    void gETRejectDataShareSignal(OAIDataShare summary);
    void gETResetClusterParameterGroupSignal(OAIClusterParameterGroupNameMessage summary);
    void gETResizeClusterSignal(OAIResizeClusterResult summary);
    void gETRestoreFromClusterSnapshotSignal(OAIRestoreFromClusterSnapshotResult summary);
    void gETRestoreTableFromClusterSnapshotSignal(OAIRestoreTableFromClusterSnapshotResult summary);
    void gETResumeClusterSignal(OAIResumeClusterResult summary);
    void gETRevokeClusterSecurityGroupIngressSignal(OAIRevokeClusterSecurityGroupIngressResult summary);
    void gETRevokeEndpointAccessSignal(OAIEndpointAuthorization summary);
    void gETRevokeSnapshotAccessSignal(OAIRevokeSnapshotAccessResult summary);
    void gETRotateEncryptionKeySignal(OAIRotateEncryptionKeyResult summary);
    void gETUpdatePartnerStatusSignal(OAIPartnerIntegrationOutputMessage summary);
    void pOSTAcceptReservedNodeExchangeSignal(OAIAcceptReservedNodeExchangeOutputMessage summary);
    void pOSTAddPartnerSignal(OAIPartnerIntegrationOutputMessage summary);
    void pOSTAssociateDataShareConsumerSignal(OAIDataShare summary);
    void pOSTAuthorizeClusterSecurityGroupIngressSignal(OAIAuthorizeClusterSecurityGroupIngressResult summary);
    void pOSTAuthorizeDataShareSignal(OAIDataShare summary);
    void pOSTAuthorizeEndpointAccessSignal(OAIEndpointAuthorization summary);
    void pOSTAuthorizeSnapshotAccessSignal(OAIAuthorizeSnapshotAccessResult summary);
    void pOSTBatchDeleteClusterSnapshotsSignal(OAIBatchDeleteClusterSnapshotsResult summary);
    void pOSTBatchModifyClusterSnapshotsSignal(OAIBatchModifyClusterSnapshotsOutputMessage summary);
    void pOSTCancelResizeSignal(OAIResizeProgressMessage summary);
    void pOSTCopyClusterSnapshotSignal(OAICopyClusterSnapshotResult summary);
    void pOSTCreateAuthenticationProfileSignal(OAICreateAuthenticationProfileResult summary);
    void pOSTCreateClusterSignal(OAICreateClusterResult summary);
    void pOSTCreateClusterParameterGroupSignal(OAICreateClusterParameterGroupResult summary);
    void pOSTCreateClusterSecurityGroupSignal(OAICreateClusterSecurityGroupResult summary);
    void pOSTCreateClusterSnapshotSignal(OAICreateClusterSnapshotResult summary);
    void pOSTCreateClusterSubnetGroupSignal(OAICreateClusterSubnetGroupResult summary);
    void pOSTCreateCustomDomainAssociationSignal(OAICreateCustomDomainAssociationResult summary);
    void pOSTCreateEndpointAccessSignal(OAIEndpointAccess summary);
    void pOSTCreateEventSubscriptionSignal(OAICreateEventSubscriptionResult summary);
    void pOSTCreateHsmClientCertificateSignal(OAICreateHsmClientCertificateResult summary);
    void pOSTCreateHsmConfigurationSignal(OAICreateHsmConfigurationResult summary);
    void pOSTCreateScheduledActionSignal(OAIScheduledAction summary);
    void pOSTCreateSnapshotCopyGrantSignal(OAICreateSnapshotCopyGrantResult summary);
    void pOSTCreateSnapshotScheduleSignal(OAISnapshotSchedule summary);
    void pOSTCreateTagsSignal();
    void pOSTCreateUsageLimitSignal(OAIUsageLimit summary);
    void pOSTDeauthorizeDataShareSignal(OAIDataShare summary);
    void pOSTDeleteAuthenticationProfileSignal(OAIDeleteAuthenticationProfileResult summary);
    void pOSTDeleteClusterSignal(OAIDeleteClusterResult summary);
    void pOSTDeleteClusterParameterGroupSignal();
    void pOSTDeleteClusterSecurityGroupSignal();
    void pOSTDeleteClusterSnapshotSignal(OAIDeleteClusterSnapshotResult summary);
    void pOSTDeleteClusterSubnetGroupSignal();
    void pOSTDeleteCustomDomainAssociationSignal();
    void pOSTDeleteEndpointAccessSignal(OAIEndpointAccess summary);
    void pOSTDeleteEventSubscriptionSignal();
    void pOSTDeleteHsmClientCertificateSignal();
    void pOSTDeleteHsmConfigurationSignal();
    void pOSTDeletePartnerSignal(OAIPartnerIntegrationOutputMessage summary);
    void pOSTDeleteScheduledActionSignal();
    void pOSTDeleteSnapshotCopyGrantSignal();
    void pOSTDeleteSnapshotScheduleSignal();
    void pOSTDeleteTagsSignal();
    void pOSTDeleteUsageLimitSignal();
    void pOSTDescribeAccountAttributesSignal(OAIAccountAttributeList summary);
    void pOSTDescribeAuthenticationProfilesSignal(OAIDescribeAuthenticationProfilesResult summary);
    void pOSTDescribeClusterDbRevisionsSignal(OAIClusterDbRevisionsMessage summary);
    void pOSTDescribeClusterParameterGroupsSignal(OAIClusterParameterGroupsMessage summary);
    void pOSTDescribeClusterParametersSignal(OAIClusterParameterGroupDetails summary);
    void pOSTDescribeClusterSecurityGroupsSignal(OAIClusterSecurityGroupMessage summary);
    void pOSTDescribeClusterSnapshotsSignal(OAISnapshotMessage summary);
    void pOSTDescribeClusterSubnetGroupsSignal(OAIClusterSubnetGroupMessage summary);
    void pOSTDescribeClusterTracksSignal(OAITrackListMessage summary);
    void pOSTDescribeClusterVersionsSignal(OAIClusterVersionsMessage summary);
    void pOSTDescribeClustersSignal(OAIClustersMessage summary);
    void pOSTDescribeCustomDomainAssociationsSignal(OAICustomDomainAssociationsMessage summary);
    void pOSTDescribeDataSharesSignal(OAIDescribeDataSharesResult summary);
    void pOSTDescribeDataSharesForConsumerSignal(OAIDescribeDataSharesForConsumerResult summary);
    void pOSTDescribeDataSharesForProducerSignal(OAIDescribeDataSharesForProducerResult summary);
    void pOSTDescribeDefaultClusterParametersSignal(OAIDescribeDefaultClusterParametersResult summary);
    void pOSTDescribeEndpointAccessSignal(OAIEndpointAccessList summary);
    void pOSTDescribeEndpointAuthorizationSignal(OAIEndpointAuthorizationList summary);
    void pOSTDescribeEventCategoriesSignal(OAIEventCategoriesMessage summary);
    void pOSTDescribeEventSubscriptionsSignal(OAIEventSubscriptionsMessage summary);
    void pOSTDescribeEventsSignal(OAIEventsMessage summary);
    void pOSTDescribeHsmClientCertificatesSignal(OAIHsmClientCertificateMessage summary);
    void pOSTDescribeHsmConfigurationsSignal(OAIHsmConfigurationMessage summary);
    void pOSTDescribeLoggingStatusSignal(OAILoggingStatus summary);
    void pOSTDescribeNodeConfigurationOptionsSignal(OAINodeConfigurationOptionsMessage summary);
    void pOSTDescribeOrderableClusterOptionsSignal(OAIOrderableClusterOptionsMessage summary);
    void pOSTDescribePartnersSignal(OAIDescribePartnersOutputMessage summary);
    void pOSTDescribeReservedNodeExchangeStatusSignal(OAIDescribeReservedNodeExchangeStatusOutputMessage summary);
    void pOSTDescribeReservedNodeOfferingsSignal(OAIReservedNodeOfferingsMessage summary);
    void pOSTDescribeReservedNodesSignal(OAIReservedNodesMessage summary);
    void pOSTDescribeResizeSignal(OAIResizeProgressMessage summary);
    void pOSTDescribeScheduledActionsSignal(OAIScheduledActionsMessage summary);
    void pOSTDescribeSnapshotCopyGrantsSignal(OAISnapshotCopyGrantMessage summary);
    void pOSTDescribeSnapshotSchedulesSignal(OAIDescribeSnapshotSchedulesOutputMessage summary);
    void pOSTDescribeStorageSignal(OAICustomerStorageMessage summary);
    void pOSTDescribeTableRestoreStatusSignal(OAITableRestoreStatusMessage summary);
    void pOSTDescribeTagsSignal(OAITaggedResourceListMessage summary);
    void pOSTDescribeUsageLimitsSignal(OAIUsageLimitList summary);
    void pOSTDisableLoggingSignal(OAILoggingStatus summary);
    void pOSTDisableSnapshotCopySignal(OAIDisableSnapshotCopyResult summary);
    void pOSTDisassociateDataShareConsumerSignal(OAIDataShare summary);
    void pOSTEnableLoggingSignal(OAILoggingStatus summary);
    void pOSTEnableSnapshotCopySignal(OAIEnableSnapshotCopyResult summary);
    void pOSTGetClusterCredentialsSignal(OAIClusterCredentials summary);
    void pOSTGetClusterCredentialsWithIAMSignal(OAIClusterExtendedCredentials summary);
    void pOSTGetReservedNodeExchangeConfigurationOptionsSignal(OAIGetReservedNodeExchangeConfigurationOptionsOutputMessage summary);
    void pOSTGetReservedNodeExchangeOfferingsSignal(OAIGetReservedNodeExchangeOfferingsOutputMessage summary);
    void pOSTModifyAquaConfigurationSignal(OAIModifyAquaOutputMessage summary);
    void pOSTModifyAuthenticationProfileSignal(OAIModifyAuthenticationProfileResult summary);
    void pOSTModifyClusterSignal(OAIModifyClusterResult summary);
    void pOSTModifyClusterDbRevisionSignal(OAIModifyClusterDbRevisionResult summary);
    void pOSTModifyClusterIamRolesSignal(OAIModifyClusterIamRolesResult summary);
    void pOSTModifyClusterMaintenanceSignal(OAIModifyClusterMaintenanceResult summary);
    void pOSTModifyClusterParameterGroupSignal(OAIClusterParameterGroupNameMessage summary);
    void pOSTModifyClusterSnapshotSignal(OAIModifyClusterSnapshotResult summary);
    void pOSTModifyClusterSnapshotScheduleSignal();
    void pOSTModifyClusterSubnetGroupSignal(OAIModifyClusterSubnetGroupResult summary);
    void pOSTModifyCustomDomainAssociationSignal(OAIModifyCustomDomainAssociationResult summary);
    void pOSTModifyEndpointAccessSignal(OAIEndpointAccess summary);
    void pOSTModifyEventSubscriptionSignal(OAIModifyEventSubscriptionResult summary);
    void pOSTModifyScheduledActionSignal(OAIScheduledAction summary);
    void pOSTModifySnapshotCopyRetentionPeriodSignal(OAIModifySnapshotCopyRetentionPeriodResult summary);
    void pOSTModifySnapshotScheduleSignal(OAISnapshotSchedule summary);
    void pOSTModifyUsageLimitSignal(OAIUsageLimit summary);
    void pOSTPauseClusterSignal(OAIPauseClusterResult summary);
    void pOSTPurchaseReservedNodeOfferingSignal(OAIPurchaseReservedNodeOfferingResult summary);
    void pOSTRebootClusterSignal(OAIRebootClusterResult summary);
    void pOSTRejectDataShareSignal(OAIDataShare summary);
    void pOSTResetClusterParameterGroupSignal(OAIClusterParameterGroupNameMessage summary);
    void pOSTResizeClusterSignal(OAIResizeClusterResult summary);
    void pOSTRestoreFromClusterSnapshotSignal(OAIRestoreFromClusterSnapshotResult summary);
    void pOSTRestoreTableFromClusterSnapshotSignal(OAIRestoreTableFromClusterSnapshotResult summary);
    void pOSTResumeClusterSignal(OAIResumeClusterResult summary);
    void pOSTRevokeClusterSecurityGroupIngressSignal(OAIRevokeClusterSecurityGroupIngressResult summary);
    void pOSTRevokeEndpointAccessSignal(OAIEndpointAuthorization summary);
    void pOSTRevokeSnapshotAccessSignal(OAIRevokeSnapshotAccessResult summary);
    void pOSTRotateEncryptionKeySignal(OAIRotateEncryptionKeyResult summary);
    void pOSTUpdatePartnerStatusSignal(OAIPartnerIntegrationOutputMessage summary);


    void gETAcceptReservedNodeExchangeSignalFull(OAIHttpRequestWorker *worker, OAIAcceptReservedNodeExchangeOutputMessage summary);
    void gETAddPartnerSignalFull(OAIHttpRequestWorker *worker, OAIPartnerIntegrationOutputMessage summary);
    void gETAssociateDataShareConsumerSignalFull(OAIHttpRequestWorker *worker, OAIDataShare summary);
    void gETAuthorizeClusterSecurityGroupIngressSignalFull(OAIHttpRequestWorker *worker, OAIAuthorizeClusterSecurityGroupIngressResult summary);
    void gETAuthorizeDataShareSignalFull(OAIHttpRequestWorker *worker, OAIDataShare summary);
    void gETAuthorizeEndpointAccessSignalFull(OAIHttpRequestWorker *worker, OAIEndpointAuthorization summary);
    void gETAuthorizeSnapshotAccessSignalFull(OAIHttpRequestWorker *worker, OAIAuthorizeSnapshotAccessResult summary);
    void gETBatchDeleteClusterSnapshotsSignalFull(OAIHttpRequestWorker *worker, OAIBatchDeleteClusterSnapshotsResult summary);
    void gETBatchModifyClusterSnapshotsSignalFull(OAIHttpRequestWorker *worker, OAIBatchModifyClusterSnapshotsOutputMessage summary);
    void gETCancelResizeSignalFull(OAIHttpRequestWorker *worker, OAIResizeProgressMessage summary);
    void gETCopyClusterSnapshotSignalFull(OAIHttpRequestWorker *worker, OAICopyClusterSnapshotResult summary);
    void gETCreateAuthenticationProfileSignalFull(OAIHttpRequestWorker *worker, OAICreateAuthenticationProfileResult summary);
    void gETCreateClusterSignalFull(OAIHttpRequestWorker *worker, OAICreateClusterResult summary);
    void gETCreateClusterParameterGroupSignalFull(OAIHttpRequestWorker *worker, OAICreateClusterParameterGroupResult summary);
    void gETCreateClusterSecurityGroupSignalFull(OAIHttpRequestWorker *worker, OAICreateClusterSecurityGroupResult summary);
    void gETCreateClusterSnapshotSignalFull(OAIHttpRequestWorker *worker, OAICreateClusterSnapshotResult summary);
    void gETCreateClusterSubnetGroupSignalFull(OAIHttpRequestWorker *worker, OAICreateClusterSubnetGroupResult summary);
    void gETCreateCustomDomainAssociationSignalFull(OAIHttpRequestWorker *worker, OAICreateCustomDomainAssociationResult summary);
    void gETCreateEndpointAccessSignalFull(OAIHttpRequestWorker *worker, OAIEndpointAccess summary);
    void gETCreateEventSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAICreateEventSubscriptionResult summary);
    void gETCreateHsmClientCertificateSignalFull(OAIHttpRequestWorker *worker, OAICreateHsmClientCertificateResult summary);
    void gETCreateHsmConfigurationSignalFull(OAIHttpRequestWorker *worker, OAICreateHsmConfigurationResult summary);
    void gETCreateScheduledActionSignalFull(OAIHttpRequestWorker *worker, OAIScheduledAction summary);
    void gETCreateSnapshotCopyGrantSignalFull(OAIHttpRequestWorker *worker, OAICreateSnapshotCopyGrantResult summary);
    void gETCreateSnapshotScheduleSignalFull(OAIHttpRequestWorker *worker, OAISnapshotSchedule summary);
    void gETCreateTagsSignalFull(OAIHttpRequestWorker *worker);
    void gETCreateUsageLimitSignalFull(OAIHttpRequestWorker *worker, OAIUsageLimit summary);
    void gETDeauthorizeDataShareSignalFull(OAIHttpRequestWorker *worker, OAIDataShare summary);
    void gETDeleteAuthenticationProfileSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAuthenticationProfileResult summary);
    void gETDeleteClusterSignalFull(OAIHttpRequestWorker *worker, OAIDeleteClusterResult summary);
    void gETDeleteClusterParameterGroupSignalFull(OAIHttpRequestWorker *worker);
    void gETDeleteClusterSecurityGroupSignalFull(OAIHttpRequestWorker *worker);
    void gETDeleteClusterSnapshotSignalFull(OAIHttpRequestWorker *worker, OAIDeleteClusterSnapshotResult summary);
    void gETDeleteClusterSubnetGroupSignalFull(OAIHttpRequestWorker *worker);
    void gETDeleteCustomDomainAssociationSignalFull(OAIHttpRequestWorker *worker);
    void gETDeleteEndpointAccessSignalFull(OAIHttpRequestWorker *worker, OAIEndpointAccess summary);
    void gETDeleteEventSubscriptionSignalFull(OAIHttpRequestWorker *worker);
    void gETDeleteHsmClientCertificateSignalFull(OAIHttpRequestWorker *worker);
    void gETDeleteHsmConfigurationSignalFull(OAIHttpRequestWorker *worker);
    void gETDeletePartnerSignalFull(OAIHttpRequestWorker *worker, OAIPartnerIntegrationOutputMessage summary);
    void gETDeleteScheduledActionSignalFull(OAIHttpRequestWorker *worker);
    void gETDeleteSnapshotCopyGrantSignalFull(OAIHttpRequestWorker *worker);
    void gETDeleteSnapshotScheduleSignalFull(OAIHttpRequestWorker *worker);
    void gETDeleteTagsSignalFull(OAIHttpRequestWorker *worker);
    void gETDeleteUsageLimitSignalFull(OAIHttpRequestWorker *worker);
    void gETDescribeAccountAttributesSignalFull(OAIHttpRequestWorker *worker, OAIAccountAttributeList summary);
    void gETDescribeAuthenticationProfilesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAuthenticationProfilesResult summary);
    void gETDescribeClusterDbRevisionsSignalFull(OAIHttpRequestWorker *worker, OAIClusterDbRevisionsMessage summary);
    void gETDescribeClusterParameterGroupsSignalFull(OAIHttpRequestWorker *worker, OAIClusterParameterGroupsMessage summary);
    void gETDescribeClusterParametersSignalFull(OAIHttpRequestWorker *worker, OAIClusterParameterGroupDetails summary);
    void gETDescribeClusterSecurityGroupsSignalFull(OAIHttpRequestWorker *worker, OAIClusterSecurityGroupMessage summary);
    void gETDescribeClusterSnapshotsSignalFull(OAIHttpRequestWorker *worker, OAISnapshotMessage summary);
    void gETDescribeClusterSubnetGroupsSignalFull(OAIHttpRequestWorker *worker, OAIClusterSubnetGroupMessage summary);
    void gETDescribeClusterTracksSignalFull(OAIHttpRequestWorker *worker, OAITrackListMessage summary);
    void gETDescribeClusterVersionsSignalFull(OAIHttpRequestWorker *worker, OAIClusterVersionsMessage summary);
    void gETDescribeClustersSignalFull(OAIHttpRequestWorker *worker, OAIClustersMessage summary);
    void gETDescribeCustomDomainAssociationsSignalFull(OAIHttpRequestWorker *worker, OAICustomDomainAssociationsMessage summary);
    void gETDescribeDataSharesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeDataSharesResult summary);
    void gETDescribeDataSharesForConsumerSignalFull(OAIHttpRequestWorker *worker, OAIDescribeDataSharesForConsumerResult summary);
    void gETDescribeDataSharesForProducerSignalFull(OAIHttpRequestWorker *worker, OAIDescribeDataSharesForProducerResult summary);
    void gETDescribeDefaultClusterParametersSignalFull(OAIHttpRequestWorker *worker, OAIDescribeDefaultClusterParametersResult summary);
    void gETDescribeEndpointAccessSignalFull(OAIHttpRequestWorker *worker, OAIEndpointAccessList summary);
    void gETDescribeEndpointAuthorizationSignalFull(OAIHttpRequestWorker *worker, OAIEndpointAuthorizationList summary);
    void gETDescribeEventCategoriesSignalFull(OAIHttpRequestWorker *worker, OAIEventCategoriesMessage summary);
    void gETDescribeEventSubscriptionsSignalFull(OAIHttpRequestWorker *worker, OAIEventSubscriptionsMessage summary);
    void gETDescribeEventsSignalFull(OAIHttpRequestWorker *worker, OAIEventsMessage summary);
    void gETDescribeHsmClientCertificatesSignalFull(OAIHttpRequestWorker *worker, OAIHsmClientCertificateMessage summary);
    void gETDescribeHsmConfigurationsSignalFull(OAIHttpRequestWorker *worker, OAIHsmConfigurationMessage summary);
    void gETDescribeLoggingStatusSignalFull(OAIHttpRequestWorker *worker, OAILoggingStatus summary);
    void gETDescribeNodeConfigurationOptionsSignalFull(OAIHttpRequestWorker *worker, OAINodeConfigurationOptionsMessage summary);
    void gETDescribeOrderableClusterOptionsSignalFull(OAIHttpRequestWorker *worker, OAIOrderableClusterOptionsMessage summary);
    void gETDescribePartnersSignalFull(OAIHttpRequestWorker *worker, OAIDescribePartnersOutputMessage summary);
    void gETDescribeReservedNodeExchangeStatusSignalFull(OAIHttpRequestWorker *worker, OAIDescribeReservedNodeExchangeStatusOutputMessage summary);
    void gETDescribeReservedNodeOfferingsSignalFull(OAIHttpRequestWorker *worker, OAIReservedNodeOfferingsMessage summary);
    void gETDescribeReservedNodesSignalFull(OAIHttpRequestWorker *worker, OAIReservedNodesMessage summary);
    void gETDescribeResizeSignalFull(OAIHttpRequestWorker *worker, OAIResizeProgressMessage summary);
    void gETDescribeScheduledActionsSignalFull(OAIHttpRequestWorker *worker, OAIScheduledActionsMessage summary);
    void gETDescribeSnapshotCopyGrantsSignalFull(OAIHttpRequestWorker *worker, OAISnapshotCopyGrantMessage summary);
    void gETDescribeSnapshotSchedulesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeSnapshotSchedulesOutputMessage summary);
    void gETDescribeStorageSignalFull(OAIHttpRequestWorker *worker, OAICustomerStorageMessage summary);
    void gETDescribeTableRestoreStatusSignalFull(OAIHttpRequestWorker *worker, OAITableRestoreStatusMessage summary);
    void gETDescribeTagsSignalFull(OAIHttpRequestWorker *worker, OAITaggedResourceListMessage summary);
    void gETDescribeUsageLimitsSignalFull(OAIHttpRequestWorker *worker, OAIUsageLimitList summary);
    void gETDisableLoggingSignalFull(OAIHttpRequestWorker *worker, OAILoggingStatus summary);
    void gETDisableSnapshotCopySignalFull(OAIHttpRequestWorker *worker, OAIDisableSnapshotCopyResult summary);
    void gETDisassociateDataShareConsumerSignalFull(OAIHttpRequestWorker *worker, OAIDataShare summary);
    void gETEnableLoggingSignalFull(OAIHttpRequestWorker *worker, OAILoggingStatus summary);
    void gETEnableSnapshotCopySignalFull(OAIHttpRequestWorker *worker, OAIEnableSnapshotCopyResult summary);
    void gETGetClusterCredentialsSignalFull(OAIHttpRequestWorker *worker, OAIClusterCredentials summary);
    void gETGetClusterCredentialsWithIAMSignalFull(OAIHttpRequestWorker *worker, OAIClusterExtendedCredentials summary);
    void gETGetReservedNodeExchangeConfigurationOptionsSignalFull(OAIHttpRequestWorker *worker, OAIGetReservedNodeExchangeConfigurationOptionsOutputMessage summary);
    void gETGetReservedNodeExchangeOfferingsSignalFull(OAIHttpRequestWorker *worker, OAIGetReservedNodeExchangeOfferingsOutputMessage summary);
    void gETModifyAquaConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIModifyAquaOutputMessage summary);
    void gETModifyAuthenticationProfileSignalFull(OAIHttpRequestWorker *worker, OAIModifyAuthenticationProfileResult summary);
    void gETModifyClusterSignalFull(OAIHttpRequestWorker *worker, OAIModifyClusterResult summary);
    void gETModifyClusterDbRevisionSignalFull(OAIHttpRequestWorker *worker, OAIModifyClusterDbRevisionResult summary);
    void gETModifyClusterIamRolesSignalFull(OAIHttpRequestWorker *worker, OAIModifyClusterIamRolesResult summary);
    void gETModifyClusterMaintenanceSignalFull(OAIHttpRequestWorker *worker, OAIModifyClusterMaintenanceResult summary);
    void gETModifyClusterParameterGroupSignalFull(OAIHttpRequestWorker *worker, OAIClusterParameterGroupNameMessage summary);
    void gETModifyClusterSnapshotSignalFull(OAIHttpRequestWorker *worker, OAIModifyClusterSnapshotResult summary);
    void gETModifyClusterSnapshotScheduleSignalFull(OAIHttpRequestWorker *worker);
    void gETModifyClusterSubnetGroupSignalFull(OAIHttpRequestWorker *worker, OAIModifyClusterSubnetGroupResult summary);
    void gETModifyCustomDomainAssociationSignalFull(OAIHttpRequestWorker *worker, OAIModifyCustomDomainAssociationResult summary);
    void gETModifyEndpointAccessSignalFull(OAIHttpRequestWorker *worker, OAIEndpointAccess summary);
    void gETModifyEventSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIModifyEventSubscriptionResult summary);
    void gETModifyScheduledActionSignalFull(OAIHttpRequestWorker *worker, OAIScheduledAction summary);
    void gETModifySnapshotCopyRetentionPeriodSignalFull(OAIHttpRequestWorker *worker, OAIModifySnapshotCopyRetentionPeriodResult summary);
    void gETModifySnapshotScheduleSignalFull(OAIHttpRequestWorker *worker, OAISnapshotSchedule summary);
    void gETModifyUsageLimitSignalFull(OAIHttpRequestWorker *worker, OAIUsageLimit summary);
    void gETPauseClusterSignalFull(OAIHttpRequestWorker *worker, OAIPauseClusterResult summary);
    void gETPurchaseReservedNodeOfferingSignalFull(OAIHttpRequestWorker *worker, OAIPurchaseReservedNodeOfferingResult summary);
    void gETRebootClusterSignalFull(OAIHttpRequestWorker *worker, OAIRebootClusterResult summary);
    void gETRejectDataShareSignalFull(OAIHttpRequestWorker *worker, OAIDataShare summary);
    void gETResetClusterParameterGroupSignalFull(OAIHttpRequestWorker *worker, OAIClusterParameterGroupNameMessage summary);
    void gETResizeClusterSignalFull(OAIHttpRequestWorker *worker, OAIResizeClusterResult summary);
    void gETRestoreFromClusterSnapshotSignalFull(OAIHttpRequestWorker *worker, OAIRestoreFromClusterSnapshotResult summary);
    void gETRestoreTableFromClusterSnapshotSignalFull(OAIHttpRequestWorker *worker, OAIRestoreTableFromClusterSnapshotResult summary);
    void gETResumeClusterSignalFull(OAIHttpRequestWorker *worker, OAIResumeClusterResult summary);
    void gETRevokeClusterSecurityGroupIngressSignalFull(OAIHttpRequestWorker *worker, OAIRevokeClusterSecurityGroupIngressResult summary);
    void gETRevokeEndpointAccessSignalFull(OAIHttpRequestWorker *worker, OAIEndpointAuthorization summary);
    void gETRevokeSnapshotAccessSignalFull(OAIHttpRequestWorker *worker, OAIRevokeSnapshotAccessResult summary);
    void gETRotateEncryptionKeySignalFull(OAIHttpRequestWorker *worker, OAIRotateEncryptionKeyResult summary);
    void gETUpdatePartnerStatusSignalFull(OAIHttpRequestWorker *worker, OAIPartnerIntegrationOutputMessage summary);
    void pOSTAcceptReservedNodeExchangeSignalFull(OAIHttpRequestWorker *worker, OAIAcceptReservedNodeExchangeOutputMessage summary);
    void pOSTAddPartnerSignalFull(OAIHttpRequestWorker *worker, OAIPartnerIntegrationOutputMessage summary);
    void pOSTAssociateDataShareConsumerSignalFull(OAIHttpRequestWorker *worker, OAIDataShare summary);
    void pOSTAuthorizeClusterSecurityGroupIngressSignalFull(OAIHttpRequestWorker *worker, OAIAuthorizeClusterSecurityGroupIngressResult summary);
    void pOSTAuthorizeDataShareSignalFull(OAIHttpRequestWorker *worker, OAIDataShare summary);
    void pOSTAuthorizeEndpointAccessSignalFull(OAIHttpRequestWorker *worker, OAIEndpointAuthorization summary);
    void pOSTAuthorizeSnapshotAccessSignalFull(OAIHttpRequestWorker *worker, OAIAuthorizeSnapshotAccessResult summary);
    void pOSTBatchDeleteClusterSnapshotsSignalFull(OAIHttpRequestWorker *worker, OAIBatchDeleteClusterSnapshotsResult summary);
    void pOSTBatchModifyClusterSnapshotsSignalFull(OAIHttpRequestWorker *worker, OAIBatchModifyClusterSnapshotsOutputMessage summary);
    void pOSTCancelResizeSignalFull(OAIHttpRequestWorker *worker, OAIResizeProgressMessage summary);
    void pOSTCopyClusterSnapshotSignalFull(OAIHttpRequestWorker *worker, OAICopyClusterSnapshotResult summary);
    void pOSTCreateAuthenticationProfileSignalFull(OAIHttpRequestWorker *worker, OAICreateAuthenticationProfileResult summary);
    void pOSTCreateClusterSignalFull(OAIHttpRequestWorker *worker, OAICreateClusterResult summary);
    void pOSTCreateClusterParameterGroupSignalFull(OAIHttpRequestWorker *worker, OAICreateClusterParameterGroupResult summary);
    void pOSTCreateClusterSecurityGroupSignalFull(OAIHttpRequestWorker *worker, OAICreateClusterSecurityGroupResult summary);
    void pOSTCreateClusterSnapshotSignalFull(OAIHttpRequestWorker *worker, OAICreateClusterSnapshotResult summary);
    void pOSTCreateClusterSubnetGroupSignalFull(OAIHttpRequestWorker *worker, OAICreateClusterSubnetGroupResult summary);
    void pOSTCreateCustomDomainAssociationSignalFull(OAIHttpRequestWorker *worker, OAICreateCustomDomainAssociationResult summary);
    void pOSTCreateEndpointAccessSignalFull(OAIHttpRequestWorker *worker, OAIEndpointAccess summary);
    void pOSTCreateEventSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAICreateEventSubscriptionResult summary);
    void pOSTCreateHsmClientCertificateSignalFull(OAIHttpRequestWorker *worker, OAICreateHsmClientCertificateResult summary);
    void pOSTCreateHsmConfigurationSignalFull(OAIHttpRequestWorker *worker, OAICreateHsmConfigurationResult summary);
    void pOSTCreateScheduledActionSignalFull(OAIHttpRequestWorker *worker, OAIScheduledAction summary);
    void pOSTCreateSnapshotCopyGrantSignalFull(OAIHttpRequestWorker *worker, OAICreateSnapshotCopyGrantResult summary);
    void pOSTCreateSnapshotScheduleSignalFull(OAIHttpRequestWorker *worker, OAISnapshotSchedule summary);
    void pOSTCreateTagsSignalFull(OAIHttpRequestWorker *worker);
    void pOSTCreateUsageLimitSignalFull(OAIHttpRequestWorker *worker, OAIUsageLimit summary);
    void pOSTDeauthorizeDataShareSignalFull(OAIHttpRequestWorker *worker, OAIDataShare summary);
    void pOSTDeleteAuthenticationProfileSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAuthenticationProfileResult summary);
    void pOSTDeleteClusterSignalFull(OAIHttpRequestWorker *worker, OAIDeleteClusterResult summary);
    void pOSTDeleteClusterParameterGroupSignalFull(OAIHttpRequestWorker *worker);
    void pOSTDeleteClusterSecurityGroupSignalFull(OAIHttpRequestWorker *worker);
    void pOSTDeleteClusterSnapshotSignalFull(OAIHttpRequestWorker *worker, OAIDeleteClusterSnapshotResult summary);
    void pOSTDeleteClusterSubnetGroupSignalFull(OAIHttpRequestWorker *worker);
    void pOSTDeleteCustomDomainAssociationSignalFull(OAIHttpRequestWorker *worker);
    void pOSTDeleteEndpointAccessSignalFull(OAIHttpRequestWorker *worker, OAIEndpointAccess summary);
    void pOSTDeleteEventSubscriptionSignalFull(OAIHttpRequestWorker *worker);
    void pOSTDeleteHsmClientCertificateSignalFull(OAIHttpRequestWorker *worker);
    void pOSTDeleteHsmConfigurationSignalFull(OAIHttpRequestWorker *worker);
    void pOSTDeletePartnerSignalFull(OAIHttpRequestWorker *worker, OAIPartnerIntegrationOutputMessage summary);
    void pOSTDeleteScheduledActionSignalFull(OAIHttpRequestWorker *worker);
    void pOSTDeleteSnapshotCopyGrantSignalFull(OAIHttpRequestWorker *worker);
    void pOSTDeleteSnapshotScheduleSignalFull(OAIHttpRequestWorker *worker);
    void pOSTDeleteTagsSignalFull(OAIHttpRequestWorker *worker);
    void pOSTDeleteUsageLimitSignalFull(OAIHttpRequestWorker *worker);
    void pOSTDescribeAccountAttributesSignalFull(OAIHttpRequestWorker *worker, OAIAccountAttributeList summary);
    void pOSTDescribeAuthenticationProfilesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAuthenticationProfilesResult summary);
    void pOSTDescribeClusterDbRevisionsSignalFull(OAIHttpRequestWorker *worker, OAIClusterDbRevisionsMessage summary);
    void pOSTDescribeClusterParameterGroupsSignalFull(OAIHttpRequestWorker *worker, OAIClusterParameterGroupsMessage summary);
    void pOSTDescribeClusterParametersSignalFull(OAIHttpRequestWorker *worker, OAIClusterParameterGroupDetails summary);
    void pOSTDescribeClusterSecurityGroupsSignalFull(OAIHttpRequestWorker *worker, OAIClusterSecurityGroupMessage summary);
    void pOSTDescribeClusterSnapshotsSignalFull(OAIHttpRequestWorker *worker, OAISnapshotMessage summary);
    void pOSTDescribeClusterSubnetGroupsSignalFull(OAIHttpRequestWorker *worker, OAIClusterSubnetGroupMessage summary);
    void pOSTDescribeClusterTracksSignalFull(OAIHttpRequestWorker *worker, OAITrackListMessage summary);
    void pOSTDescribeClusterVersionsSignalFull(OAIHttpRequestWorker *worker, OAIClusterVersionsMessage summary);
    void pOSTDescribeClustersSignalFull(OAIHttpRequestWorker *worker, OAIClustersMessage summary);
    void pOSTDescribeCustomDomainAssociationsSignalFull(OAIHttpRequestWorker *worker, OAICustomDomainAssociationsMessage summary);
    void pOSTDescribeDataSharesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeDataSharesResult summary);
    void pOSTDescribeDataSharesForConsumerSignalFull(OAIHttpRequestWorker *worker, OAIDescribeDataSharesForConsumerResult summary);
    void pOSTDescribeDataSharesForProducerSignalFull(OAIHttpRequestWorker *worker, OAIDescribeDataSharesForProducerResult summary);
    void pOSTDescribeDefaultClusterParametersSignalFull(OAIHttpRequestWorker *worker, OAIDescribeDefaultClusterParametersResult summary);
    void pOSTDescribeEndpointAccessSignalFull(OAIHttpRequestWorker *worker, OAIEndpointAccessList summary);
    void pOSTDescribeEndpointAuthorizationSignalFull(OAIHttpRequestWorker *worker, OAIEndpointAuthorizationList summary);
    void pOSTDescribeEventCategoriesSignalFull(OAIHttpRequestWorker *worker, OAIEventCategoriesMessage summary);
    void pOSTDescribeEventSubscriptionsSignalFull(OAIHttpRequestWorker *worker, OAIEventSubscriptionsMessage summary);
    void pOSTDescribeEventsSignalFull(OAIHttpRequestWorker *worker, OAIEventsMessage summary);
    void pOSTDescribeHsmClientCertificatesSignalFull(OAIHttpRequestWorker *worker, OAIHsmClientCertificateMessage summary);
    void pOSTDescribeHsmConfigurationsSignalFull(OAIHttpRequestWorker *worker, OAIHsmConfigurationMessage summary);
    void pOSTDescribeLoggingStatusSignalFull(OAIHttpRequestWorker *worker, OAILoggingStatus summary);
    void pOSTDescribeNodeConfigurationOptionsSignalFull(OAIHttpRequestWorker *worker, OAINodeConfigurationOptionsMessage summary);
    void pOSTDescribeOrderableClusterOptionsSignalFull(OAIHttpRequestWorker *worker, OAIOrderableClusterOptionsMessage summary);
    void pOSTDescribePartnersSignalFull(OAIHttpRequestWorker *worker, OAIDescribePartnersOutputMessage summary);
    void pOSTDescribeReservedNodeExchangeStatusSignalFull(OAIHttpRequestWorker *worker, OAIDescribeReservedNodeExchangeStatusOutputMessage summary);
    void pOSTDescribeReservedNodeOfferingsSignalFull(OAIHttpRequestWorker *worker, OAIReservedNodeOfferingsMessage summary);
    void pOSTDescribeReservedNodesSignalFull(OAIHttpRequestWorker *worker, OAIReservedNodesMessage summary);
    void pOSTDescribeResizeSignalFull(OAIHttpRequestWorker *worker, OAIResizeProgressMessage summary);
    void pOSTDescribeScheduledActionsSignalFull(OAIHttpRequestWorker *worker, OAIScheduledActionsMessage summary);
    void pOSTDescribeSnapshotCopyGrantsSignalFull(OAIHttpRequestWorker *worker, OAISnapshotCopyGrantMessage summary);
    void pOSTDescribeSnapshotSchedulesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeSnapshotSchedulesOutputMessage summary);
    void pOSTDescribeStorageSignalFull(OAIHttpRequestWorker *worker, OAICustomerStorageMessage summary);
    void pOSTDescribeTableRestoreStatusSignalFull(OAIHttpRequestWorker *worker, OAITableRestoreStatusMessage summary);
    void pOSTDescribeTagsSignalFull(OAIHttpRequestWorker *worker, OAITaggedResourceListMessage summary);
    void pOSTDescribeUsageLimitsSignalFull(OAIHttpRequestWorker *worker, OAIUsageLimitList summary);
    void pOSTDisableLoggingSignalFull(OAIHttpRequestWorker *worker, OAILoggingStatus summary);
    void pOSTDisableSnapshotCopySignalFull(OAIHttpRequestWorker *worker, OAIDisableSnapshotCopyResult summary);
    void pOSTDisassociateDataShareConsumerSignalFull(OAIHttpRequestWorker *worker, OAIDataShare summary);
    void pOSTEnableLoggingSignalFull(OAIHttpRequestWorker *worker, OAILoggingStatus summary);
    void pOSTEnableSnapshotCopySignalFull(OAIHttpRequestWorker *worker, OAIEnableSnapshotCopyResult summary);
    void pOSTGetClusterCredentialsSignalFull(OAIHttpRequestWorker *worker, OAIClusterCredentials summary);
    void pOSTGetClusterCredentialsWithIAMSignalFull(OAIHttpRequestWorker *worker, OAIClusterExtendedCredentials summary);
    void pOSTGetReservedNodeExchangeConfigurationOptionsSignalFull(OAIHttpRequestWorker *worker, OAIGetReservedNodeExchangeConfigurationOptionsOutputMessage summary);
    void pOSTGetReservedNodeExchangeOfferingsSignalFull(OAIHttpRequestWorker *worker, OAIGetReservedNodeExchangeOfferingsOutputMessage summary);
    void pOSTModifyAquaConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIModifyAquaOutputMessage summary);
    void pOSTModifyAuthenticationProfileSignalFull(OAIHttpRequestWorker *worker, OAIModifyAuthenticationProfileResult summary);
    void pOSTModifyClusterSignalFull(OAIHttpRequestWorker *worker, OAIModifyClusterResult summary);
    void pOSTModifyClusterDbRevisionSignalFull(OAIHttpRequestWorker *worker, OAIModifyClusterDbRevisionResult summary);
    void pOSTModifyClusterIamRolesSignalFull(OAIHttpRequestWorker *worker, OAIModifyClusterIamRolesResult summary);
    void pOSTModifyClusterMaintenanceSignalFull(OAIHttpRequestWorker *worker, OAIModifyClusterMaintenanceResult summary);
    void pOSTModifyClusterParameterGroupSignalFull(OAIHttpRequestWorker *worker, OAIClusterParameterGroupNameMessage summary);
    void pOSTModifyClusterSnapshotSignalFull(OAIHttpRequestWorker *worker, OAIModifyClusterSnapshotResult summary);
    void pOSTModifyClusterSnapshotScheduleSignalFull(OAIHttpRequestWorker *worker);
    void pOSTModifyClusterSubnetGroupSignalFull(OAIHttpRequestWorker *worker, OAIModifyClusterSubnetGroupResult summary);
    void pOSTModifyCustomDomainAssociationSignalFull(OAIHttpRequestWorker *worker, OAIModifyCustomDomainAssociationResult summary);
    void pOSTModifyEndpointAccessSignalFull(OAIHttpRequestWorker *worker, OAIEndpointAccess summary);
    void pOSTModifyEventSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIModifyEventSubscriptionResult summary);
    void pOSTModifyScheduledActionSignalFull(OAIHttpRequestWorker *worker, OAIScheduledAction summary);
    void pOSTModifySnapshotCopyRetentionPeriodSignalFull(OAIHttpRequestWorker *worker, OAIModifySnapshotCopyRetentionPeriodResult summary);
    void pOSTModifySnapshotScheduleSignalFull(OAIHttpRequestWorker *worker, OAISnapshotSchedule summary);
    void pOSTModifyUsageLimitSignalFull(OAIHttpRequestWorker *worker, OAIUsageLimit summary);
    void pOSTPauseClusterSignalFull(OAIHttpRequestWorker *worker, OAIPauseClusterResult summary);
    void pOSTPurchaseReservedNodeOfferingSignalFull(OAIHttpRequestWorker *worker, OAIPurchaseReservedNodeOfferingResult summary);
    void pOSTRebootClusterSignalFull(OAIHttpRequestWorker *worker, OAIRebootClusterResult summary);
    void pOSTRejectDataShareSignalFull(OAIHttpRequestWorker *worker, OAIDataShare summary);
    void pOSTResetClusterParameterGroupSignalFull(OAIHttpRequestWorker *worker, OAIClusterParameterGroupNameMessage summary);
    void pOSTResizeClusterSignalFull(OAIHttpRequestWorker *worker, OAIResizeClusterResult summary);
    void pOSTRestoreFromClusterSnapshotSignalFull(OAIHttpRequestWorker *worker, OAIRestoreFromClusterSnapshotResult summary);
    void pOSTRestoreTableFromClusterSnapshotSignalFull(OAIHttpRequestWorker *worker, OAIRestoreTableFromClusterSnapshotResult summary);
    void pOSTResumeClusterSignalFull(OAIHttpRequestWorker *worker, OAIResumeClusterResult summary);
    void pOSTRevokeClusterSecurityGroupIngressSignalFull(OAIHttpRequestWorker *worker, OAIRevokeClusterSecurityGroupIngressResult summary);
    void pOSTRevokeEndpointAccessSignalFull(OAIHttpRequestWorker *worker, OAIEndpointAuthorization summary);
    void pOSTRevokeSnapshotAccessSignalFull(OAIHttpRequestWorker *worker, OAIRevokeSnapshotAccessResult summary);
    void pOSTRotateEncryptionKeySignalFull(OAIHttpRequestWorker *worker, OAIRotateEncryptionKeyResult summary);
    void pOSTUpdatePartnerStatusSignalFull(OAIHttpRequestWorker *worker, OAIPartnerIntegrationOutputMessage summary);

    Q_DECL_DEPRECATED_X("Use gETAcceptReservedNodeExchangeSignalError() instead")
    void gETAcceptReservedNodeExchangeSignalE(OAIAcceptReservedNodeExchangeOutputMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAcceptReservedNodeExchangeSignalError(OAIAcceptReservedNodeExchangeOutputMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETAddPartnerSignalError() instead")
    void gETAddPartnerSignalE(OAIPartnerIntegrationOutputMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAddPartnerSignalError(OAIPartnerIntegrationOutputMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETAssociateDataShareConsumerSignalError() instead")
    void gETAssociateDataShareConsumerSignalE(OAIDataShare summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAssociateDataShareConsumerSignalError(OAIDataShare summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETAuthorizeClusterSecurityGroupIngressSignalError() instead")
    void gETAuthorizeClusterSecurityGroupIngressSignalE(OAIAuthorizeClusterSecurityGroupIngressResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAuthorizeClusterSecurityGroupIngressSignalError(OAIAuthorizeClusterSecurityGroupIngressResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETAuthorizeDataShareSignalError() instead")
    void gETAuthorizeDataShareSignalE(OAIDataShare summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAuthorizeDataShareSignalError(OAIDataShare summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETAuthorizeEndpointAccessSignalError() instead")
    void gETAuthorizeEndpointAccessSignalE(OAIEndpointAuthorization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAuthorizeEndpointAccessSignalError(OAIEndpointAuthorization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETAuthorizeSnapshotAccessSignalError() instead")
    void gETAuthorizeSnapshotAccessSignalE(OAIAuthorizeSnapshotAccessResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAuthorizeSnapshotAccessSignalError(OAIAuthorizeSnapshotAccessResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETBatchDeleteClusterSnapshotsSignalError() instead")
    void gETBatchDeleteClusterSnapshotsSignalE(OAIBatchDeleteClusterSnapshotsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETBatchDeleteClusterSnapshotsSignalError(OAIBatchDeleteClusterSnapshotsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETBatchModifyClusterSnapshotsSignalError() instead")
    void gETBatchModifyClusterSnapshotsSignalE(OAIBatchModifyClusterSnapshotsOutputMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETBatchModifyClusterSnapshotsSignalError(OAIBatchModifyClusterSnapshotsOutputMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCancelResizeSignalError() instead")
    void gETCancelResizeSignalE(OAIResizeProgressMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCancelResizeSignalError(OAIResizeProgressMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCopyClusterSnapshotSignalError() instead")
    void gETCopyClusterSnapshotSignalE(OAICopyClusterSnapshotResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCopyClusterSnapshotSignalError(OAICopyClusterSnapshotResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateAuthenticationProfileSignalError() instead")
    void gETCreateAuthenticationProfileSignalE(OAICreateAuthenticationProfileResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateAuthenticationProfileSignalError(OAICreateAuthenticationProfileResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateClusterSignalError() instead")
    void gETCreateClusterSignalE(OAICreateClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateClusterSignalError(OAICreateClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateClusterParameterGroupSignalError() instead")
    void gETCreateClusterParameterGroupSignalE(OAICreateClusterParameterGroupResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateClusterParameterGroupSignalError(OAICreateClusterParameterGroupResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateClusterSecurityGroupSignalError() instead")
    void gETCreateClusterSecurityGroupSignalE(OAICreateClusterSecurityGroupResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateClusterSecurityGroupSignalError(OAICreateClusterSecurityGroupResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateClusterSnapshotSignalError() instead")
    void gETCreateClusterSnapshotSignalE(OAICreateClusterSnapshotResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateClusterSnapshotSignalError(OAICreateClusterSnapshotResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateClusterSubnetGroupSignalError() instead")
    void gETCreateClusterSubnetGroupSignalE(OAICreateClusterSubnetGroupResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateClusterSubnetGroupSignalError(OAICreateClusterSubnetGroupResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateCustomDomainAssociationSignalError() instead")
    void gETCreateCustomDomainAssociationSignalE(OAICreateCustomDomainAssociationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateCustomDomainAssociationSignalError(OAICreateCustomDomainAssociationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateEndpointAccessSignalError() instead")
    void gETCreateEndpointAccessSignalE(OAIEndpointAccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateEndpointAccessSignalError(OAIEndpointAccess summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateEventSubscriptionSignalError() instead")
    void gETCreateEventSubscriptionSignalE(OAICreateEventSubscriptionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateEventSubscriptionSignalError(OAICreateEventSubscriptionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateHsmClientCertificateSignalError() instead")
    void gETCreateHsmClientCertificateSignalE(OAICreateHsmClientCertificateResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateHsmClientCertificateSignalError(OAICreateHsmClientCertificateResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateHsmConfigurationSignalError() instead")
    void gETCreateHsmConfigurationSignalE(OAICreateHsmConfigurationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateHsmConfigurationSignalError(OAICreateHsmConfigurationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateScheduledActionSignalError() instead")
    void gETCreateScheduledActionSignalE(OAIScheduledAction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateScheduledActionSignalError(OAIScheduledAction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateSnapshotCopyGrantSignalError() instead")
    void gETCreateSnapshotCopyGrantSignalE(OAICreateSnapshotCopyGrantResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateSnapshotCopyGrantSignalError(OAICreateSnapshotCopyGrantResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateSnapshotScheduleSignalError() instead")
    void gETCreateSnapshotScheduleSignalE(OAISnapshotSchedule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateSnapshotScheduleSignalError(OAISnapshotSchedule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateTagsSignalError() instead")
    void gETCreateTagsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateTagsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateUsageLimitSignalError() instead")
    void gETCreateUsageLimitSignalE(OAIUsageLimit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateUsageLimitSignalError(OAIUsageLimit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeauthorizeDataShareSignalError() instead")
    void gETDeauthorizeDataShareSignalE(OAIDataShare summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeauthorizeDataShareSignalError(OAIDataShare summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteAuthenticationProfileSignalError() instead")
    void gETDeleteAuthenticationProfileSignalE(OAIDeleteAuthenticationProfileResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteAuthenticationProfileSignalError(OAIDeleteAuthenticationProfileResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteClusterSignalError() instead")
    void gETDeleteClusterSignalE(OAIDeleteClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteClusterSignalError(OAIDeleteClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteClusterParameterGroupSignalError() instead")
    void gETDeleteClusterParameterGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteClusterParameterGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteClusterSecurityGroupSignalError() instead")
    void gETDeleteClusterSecurityGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteClusterSecurityGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteClusterSnapshotSignalError() instead")
    void gETDeleteClusterSnapshotSignalE(OAIDeleteClusterSnapshotResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteClusterSnapshotSignalError(OAIDeleteClusterSnapshotResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteClusterSubnetGroupSignalError() instead")
    void gETDeleteClusterSubnetGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteClusterSubnetGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteCustomDomainAssociationSignalError() instead")
    void gETDeleteCustomDomainAssociationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteCustomDomainAssociationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteEndpointAccessSignalError() instead")
    void gETDeleteEndpointAccessSignalE(OAIEndpointAccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteEndpointAccessSignalError(OAIEndpointAccess summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteEventSubscriptionSignalError() instead")
    void gETDeleteEventSubscriptionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteEventSubscriptionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteHsmClientCertificateSignalError() instead")
    void gETDeleteHsmClientCertificateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteHsmClientCertificateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteHsmConfigurationSignalError() instead")
    void gETDeleteHsmConfigurationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteHsmConfigurationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeletePartnerSignalError() instead")
    void gETDeletePartnerSignalE(OAIPartnerIntegrationOutputMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeletePartnerSignalError(OAIPartnerIntegrationOutputMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteScheduledActionSignalError() instead")
    void gETDeleteScheduledActionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteScheduledActionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteSnapshotCopyGrantSignalError() instead")
    void gETDeleteSnapshotCopyGrantSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteSnapshotCopyGrantSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteSnapshotScheduleSignalError() instead")
    void gETDeleteSnapshotScheduleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteSnapshotScheduleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteTagsSignalError() instead")
    void gETDeleteTagsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteTagsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteUsageLimitSignalError() instead")
    void gETDeleteUsageLimitSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteUsageLimitSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeAccountAttributesSignalError() instead")
    void gETDescribeAccountAttributesSignalE(OAIAccountAttributeList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeAccountAttributesSignalError(OAIAccountAttributeList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeAuthenticationProfilesSignalError() instead")
    void gETDescribeAuthenticationProfilesSignalE(OAIDescribeAuthenticationProfilesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeAuthenticationProfilesSignalError(OAIDescribeAuthenticationProfilesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeClusterDbRevisionsSignalError() instead")
    void gETDescribeClusterDbRevisionsSignalE(OAIClusterDbRevisionsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeClusterDbRevisionsSignalError(OAIClusterDbRevisionsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeClusterParameterGroupsSignalError() instead")
    void gETDescribeClusterParameterGroupsSignalE(OAIClusterParameterGroupsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeClusterParameterGroupsSignalError(OAIClusterParameterGroupsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeClusterParametersSignalError() instead")
    void gETDescribeClusterParametersSignalE(OAIClusterParameterGroupDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeClusterParametersSignalError(OAIClusterParameterGroupDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeClusterSecurityGroupsSignalError() instead")
    void gETDescribeClusterSecurityGroupsSignalE(OAIClusterSecurityGroupMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeClusterSecurityGroupsSignalError(OAIClusterSecurityGroupMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeClusterSnapshotsSignalError() instead")
    void gETDescribeClusterSnapshotsSignalE(OAISnapshotMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeClusterSnapshotsSignalError(OAISnapshotMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeClusterSubnetGroupsSignalError() instead")
    void gETDescribeClusterSubnetGroupsSignalE(OAIClusterSubnetGroupMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeClusterSubnetGroupsSignalError(OAIClusterSubnetGroupMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeClusterTracksSignalError() instead")
    void gETDescribeClusterTracksSignalE(OAITrackListMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeClusterTracksSignalError(OAITrackListMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeClusterVersionsSignalError() instead")
    void gETDescribeClusterVersionsSignalE(OAIClusterVersionsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeClusterVersionsSignalError(OAIClusterVersionsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeClustersSignalError() instead")
    void gETDescribeClustersSignalE(OAIClustersMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeClustersSignalError(OAIClustersMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeCustomDomainAssociationsSignalError() instead")
    void gETDescribeCustomDomainAssociationsSignalE(OAICustomDomainAssociationsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeCustomDomainAssociationsSignalError(OAICustomDomainAssociationsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeDataSharesSignalError() instead")
    void gETDescribeDataSharesSignalE(OAIDescribeDataSharesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeDataSharesSignalError(OAIDescribeDataSharesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeDataSharesForConsumerSignalError() instead")
    void gETDescribeDataSharesForConsumerSignalE(OAIDescribeDataSharesForConsumerResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeDataSharesForConsumerSignalError(OAIDescribeDataSharesForConsumerResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeDataSharesForProducerSignalError() instead")
    void gETDescribeDataSharesForProducerSignalE(OAIDescribeDataSharesForProducerResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeDataSharesForProducerSignalError(OAIDescribeDataSharesForProducerResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeDefaultClusterParametersSignalError() instead")
    void gETDescribeDefaultClusterParametersSignalE(OAIDescribeDefaultClusterParametersResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeDefaultClusterParametersSignalError(OAIDescribeDefaultClusterParametersResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeEndpointAccessSignalError() instead")
    void gETDescribeEndpointAccessSignalE(OAIEndpointAccessList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeEndpointAccessSignalError(OAIEndpointAccessList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeEndpointAuthorizationSignalError() instead")
    void gETDescribeEndpointAuthorizationSignalE(OAIEndpointAuthorizationList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeEndpointAuthorizationSignalError(OAIEndpointAuthorizationList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeEventCategoriesSignalError() instead")
    void gETDescribeEventCategoriesSignalE(OAIEventCategoriesMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeEventCategoriesSignalError(OAIEventCategoriesMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeEventSubscriptionsSignalError() instead")
    void gETDescribeEventSubscriptionsSignalE(OAIEventSubscriptionsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeEventSubscriptionsSignalError(OAIEventSubscriptionsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeEventsSignalError() instead")
    void gETDescribeEventsSignalE(OAIEventsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeEventsSignalError(OAIEventsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeHsmClientCertificatesSignalError() instead")
    void gETDescribeHsmClientCertificatesSignalE(OAIHsmClientCertificateMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeHsmClientCertificatesSignalError(OAIHsmClientCertificateMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeHsmConfigurationsSignalError() instead")
    void gETDescribeHsmConfigurationsSignalE(OAIHsmConfigurationMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeHsmConfigurationsSignalError(OAIHsmConfigurationMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeLoggingStatusSignalError() instead")
    void gETDescribeLoggingStatusSignalE(OAILoggingStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeLoggingStatusSignalError(OAILoggingStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeNodeConfigurationOptionsSignalError() instead")
    void gETDescribeNodeConfigurationOptionsSignalE(OAINodeConfigurationOptionsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeNodeConfigurationOptionsSignalError(OAINodeConfigurationOptionsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeOrderableClusterOptionsSignalError() instead")
    void gETDescribeOrderableClusterOptionsSignalE(OAIOrderableClusterOptionsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeOrderableClusterOptionsSignalError(OAIOrderableClusterOptionsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribePartnersSignalError() instead")
    void gETDescribePartnersSignalE(OAIDescribePartnersOutputMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribePartnersSignalError(OAIDescribePartnersOutputMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeReservedNodeExchangeStatusSignalError() instead")
    void gETDescribeReservedNodeExchangeStatusSignalE(OAIDescribeReservedNodeExchangeStatusOutputMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeReservedNodeExchangeStatusSignalError(OAIDescribeReservedNodeExchangeStatusOutputMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeReservedNodeOfferingsSignalError() instead")
    void gETDescribeReservedNodeOfferingsSignalE(OAIReservedNodeOfferingsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeReservedNodeOfferingsSignalError(OAIReservedNodeOfferingsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeReservedNodesSignalError() instead")
    void gETDescribeReservedNodesSignalE(OAIReservedNodesMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeReservedNodesSignalError(OAIReservedNodesMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeResizeSignalError() instead")
    void gETDescribeResizeSignalE(OAIResizeProgressMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeResizeSignalError(OAIResizeProgressMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeScheduledActionsSignalError() instead")
    void gETDescribeScheduledActionsSignalE(OAIScheduledActionsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeScheduledActionsSignalError(OAIScheduledActionsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeSnapshotCopyGrantsSignalError() instead")
    void gETDescribeSnapshotCopyGrantsSignalE(OAISnapshotCopyGrantMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeSnapshotCopyGrantsSignalError(OAISnapshotCopyGrantMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeSnapshotSchedulesSignalError() instead")
    void gETDescribeSnapshotSchedulesSignalE(OAIDescribeSnapshotSchedulesOutputMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeSnapshotSchedulesSignalError(OAIDescribeSnapshotSchedulesOutputMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeStorageSignalError() instead")
    void gETDescribeStorageSignalE(OAICustomerStorageMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeStorageSignalError(OAICustomerStorageMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeTableRestoreStatusSignalError() instead")
    void gETDescribeTableRestoreStatusSignalE(OAITableRestoreStatusMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeTableRestoreStatusSignalError(OAITableRestoreStatusMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeTagsSignalError() instead")
    void gETDescribeTagsSignalE(OAITaggedResourceListMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeTagsSignalError(OAITaggedResourceListMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeUsageLimitsSignalError() instead")
    void gETDescribeUsageLimitsSignalE(OAIUsageLimitList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeUsageLimitsSignalError(OAIUsageLimitList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDisableLoggingSignalError() instead")
    void gETDisableLoggingSignalE(OAILoggingStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDisableLoggingSignalError(OAILoggingStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDisableSnapshotCopySignalError() instead")
    void gETDisableSnapshotCopySignalE(OAIDisableSnapshotCopyResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDisableSnapshotCopySignalError(OAIDisableSnapshotCopyResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDisassociateDataShareConsumerSignalError() instead")
    void gETDisassociateDataShareConsumerSignalE(OAIDataShare summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDisassociateDataShareConsumerSignalError(OAIDataShare summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETEnableLoggingSignalError() instead")
    void gETEnableLoggingSignalE(OAILoggingStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETEnableLoggingSignalError(OAILoggingStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETEnableSnapshotCopySignalError() instead")
    void gETEnableSnapshotCopySignalE(OAIEnableSnapshotCopyResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETEnableSnapshotCopySignalError(OAIEnableSnapshotCopyResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetClusterCredentialsSignalError() instead")
    void gETGetClusterCredentialsSignalE(OAIClusterCredentials summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetClusterCredentialsSignalError(OAIClusterCredentials summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetClusterCredentialsWithIAMSignalError() instead")
    void gETGetClusterCredentialsWithIAMSignalE(OAIClusterExtendedCredentials summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetClusterCredentialsWithIAMSignalError(OAIClusterExtendedCredentials summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetReservedNodeExchangeConfigurationOptionsSignalError() instead")
    void gETGetReservedNodeExchangeConfigurationOptionsSignalE(OAIGetReservedNodeExchangeConfigurationOptionsOutputMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetReservedNodeExchangeConfigurationOptionsSignalError(OAIGetReservedNodeExchangeConfigurationOptionsOutputMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetReservedNodeExchangeOfferingsSignalError() instead")
    void gETGetReservedNodeExchangeOfferingsSignalE(OAIGetReservedNodeExchangeOfferingsOutputMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetReservedNodeExchangeOfferingsSignalError(OAIGetReservedNodeExchangeOfferingsOutputMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyAquaConfigurationSignalError() instead")
    void gETModifyAquaConfigurationSignalE(OAIModifyAquaOutputMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyAquaConfigurationSignalError(OAIModifyAquaOutputMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyAuthenticationProfileSignalError() instead")
    void gETModifyAuthenticationProfileSignalE(OAIModifyAuthenticationProfileResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyAuthenticationProfileSignalError(OAIModifyAuthenticationProfileResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyClusterSignalError() instead")
    void gETModifyClusterSignalE(OAIModifyClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyClusterSignalError(OAIModifyClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyClusterDbRevisionSignalError() instead")
    void gETModifyClusterDbRevisionSignalE(OAIModifyClusterDbRevisionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyClusterDbRevisionSignalError(OAIModifyClusterDbRevisionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyClusterIamRolesSignalError() instead")
    void gETModifyClusterIamRolesSignalE(OAIModifyClusterIamRolesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyClusterIamRolesSignalError(OAIModifyClusterIamRolesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyClusterMaintenanceSignalError() instead")
    void gETModifyClusterMaintenanceSignalE(OAIModifyClusterMaintenanceResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyClusterMaintenanceSignalError(OAIModifyClusterMaintenanceResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyClusterParameterGroupSignalError() instead")
    void gETModifyClusterParameterGroupSignalE(OAIClusterParameterGroupNameMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyClusterParameterGroupSignalError(OAIClusterParameterGroupNameMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyClusterSnapshotSignalError() instead")
    void gETModifyClusterSnapshotSignalE(OAIModifyClusterSnapshotResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyClusterSnapshotSignalError(OAIModifyClusterSnapshotResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyClusterSnapshotScheduleSignalError() instead")
    void gETModifyClusterSnapshotScheduleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyClusterSnapshotScheduleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyClusterSubnetGroupSignalError() instead")
    void gETModifyClusterSubnetGroupSignalE(OAIModifyClusterSubnetGroupResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyClusterSubnetGroupSignalError(OAIModifyClusterSubnetGroupResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyCustomDomainAssociationSignalError() instead")
    void gETModifyCustomDomainAssociationSignalE(OAIModifyCustomDomainAssociationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyCustomDomainAssociationSignalError(OAIModifyCustomDomainAssociationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyEndpointAccessSignalError() instead")
    void gETModifyEndpointAccessSignalE(OAIEndpointAccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyEndpointAccessSignalError(OAIEndpointAccess summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyEventSubscriptionSignalError() instead")
    void gETModifyEventSubscriptionSignalE(OAIModifyEventSubscriptionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyEventSubscriptionSignalError(OAIModifyEventSubscriptionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyScheduledActionSignalError() instead")
    void gETModifyScheduledActionSignalE(OAIScheduledAction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyScheduledActionSignalError(OAIScheduledAction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifySnapshotCopyRetentionPeriodSignalError() instead")
    void gETModifySnapshotCopyRetentionPeriodSignalE(OAIModifySnapshotCopyRetentionPeriodResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifySnapshotCopyRetentionPeriodSignalError(OAIModifySnapshotCopyRetentionPeriodResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifySnapshotScheduleSignalError() instead")
    void gETModifySnapshotScheduleSignalE(OAISnapshotSchedule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifySnapshotScheduleSignalError(OAISnapshotSchedule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyUsageLimitSignalError() instead")
    void gETModifyUsageLimitSignalE(OAIUsageLimit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyUsageLimitSignalError(OAIUsageLimit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPauseClusterSignalError() instead")
    void gETPauseClusterSignalE(OAIPauseClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETPauseClusterSignalError(OAIPauseClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPurchaseReservedNodeOfferingSignalError() instead")
    void gETPurchaseReservedNodeOfferingSignalE(OAIPurchaseReservedNodeOfferingResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETPurchaseReservedNodeOfferingSignalError(OAIPurchaseReservedNodeOfferingResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRebootClusterSignalError() instead")
    void gETRebootClusterSignalE(OAIRebootClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRebootClusterSignalError(OAIRebootClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRejectDataShareSignalError() instead")
    void gETRejectDataShareSignalE(OAIDataShare summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRejectDataShareSignalError(OAIDataShare summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETResetClusterParameterGroupSignalError() instead")
    void gETResetClusterParameterGroupSignalE(OAIClusterParameterGroupNameMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETResetClusterParameterGroupSignalError(OAIClusterParameterGroupNameMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETResizeClusterSignalError() instead")
    void gETResizeClusterSignalE(OAIResizeClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETResizeClusterSignalError(OAIResizeClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRestoreFromClusterSnapshotSignalError() instead")
    void gETRestoreFromClusterSnapshotSignalE(OAIRestoreFromClusterSnapshotResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRestoreFromClusterSnapshotSignalError(OAIRestoreFromClusterSnapshotResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRestoreTableFromClusterSnapshotSignalError() instead")
    void gETRestoreTableFromClusterSnapshotSignalE(OAIRestoreTableFromClusterSnapshotResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRestoreTableFromClusterSnapshotSignalError(OAIRestoreTableFromClusterSnapshotResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETResumeClusterSignalError() instead")
    void gETResumeClusterSignalE(OAIResumeClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETResumeClusterSignalError(OAIResumeClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRevokeClusterSecurityGroupIngressSignalError() instead")
    void gETRevokeClusterSecurityGroupIngressSignalE(OAIRevokeClusterSecurityGroupIngressResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRevokeClusterSecurityGroupIngressSignalError(OAIRevokeClusterSecurityGroupIngressResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRevokeEndpointAccessSignalError() instead")
    void gETRevokeEndpointAccessSignalE(OAIEndpointAuthorization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRevokeEndpointAccessSignalError(OAIEndpointAuthorization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRevokeSnapshotAccessSignalError() instead")
    void gETRevokeSnapshotAccessSignalE(OAIRevokeSnapshotAccessResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRevokeSnapshotAccessSignalError(OAIRevokeSnapshotAccessResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRotateEncryptionKeySignalError() instead")
    void gETRotateEncryptionKeySignalE(OAIRotateEncryptionKeyResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRotateEncryptionKeySignalError(OAIRotateEncryptionKeyResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdatePartnerStatusSignalError() instead")
    void gETUpdatePartnerStatusSignalE(OAIPartnerIntegrationOutputMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdatePartnerStatusSignalError(OAIPartnerIntegrationOutputMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAcceptReservedNodeExchangeSignalError() instead")
    void pOSTAcceptReservedNodeExchangeSignalE(OAIAcceptReservedNodeExchangeOutputMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAcceptReservedNodeExchangeSignalError(OAIAcceptReservedNodeExchangeOutputMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAddPartnerSignalError() instead")
    void pOSTAddPartnerSignalE(OAIPartnerIntegrationOutputMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAddPartnerSignalError(OAIPartnerIntegrationOutputMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAssociateDataShareConsumerSignalError() instead")
    void pOSTAssociateDataShareConsumerSignalE(OAIDataShare summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAssociateDataShareConsumerSignalError(OAIDataShare summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAuthorizeClusterSecurityGroupIngressSignalError() instead")
    void pOSTAuthorizeClusterSecurityGroupIngressSignalE(OAIAuthorizeClusterSecurityGroupIngressResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAuthorizeClusterSecurityGroupIngressSignalError(OAIAuthorizeClusterSecurityGroupIngressResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAuthorizeDataShareSignalError() instead")
    void pOSTAuthorizeDataShareSignalE(OAIDataShare summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAuthorizeDataShareSignalError(OAIDataShare summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAuthorizeEndpointAccessSignalError() instead")
    void pOSTAuthorizeEndpointAccessSignalE(OAIEndpointAuthorization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAuthorizeEndpointAccessSignalError(OAIEndpointAuthorization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAuthorizeSnapshotAccessSignalError() instead")
    void pOSTAuthorizeSnapshotAccessSignalE(OAIAuthorizeSnapshotAccessResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAuthorizeSnapshotAccessSignalError(OAIAuthorizeSnapshotAccessResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTBatchDeleteClusterSnapshotsSignalError() instead")
    void pOSTBatchDeleteClusterSnapshotsSignalE(OAIBatchDeleteClusterSnapshotsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTBatchDeleteClusterSnapshotsSignalError(OAIBatchDeleteClusterSnapshotsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTBatchModifyClusterSnapshotsSignalError() instead")
    void pOSTBatchModifyClusterSnapshotsSignalE(OAIBatchModifyClusterSnapshotsOutputMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTBatchModifyClusterSnapshotsSignalError(OAIBatchModifyClusterSnapshotsOutputMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCancelResizeSignalError() instead")
    void pOSTCancelResizeSignalE(OAIResizeProgressMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCancelResizeSignalError(OAIResizeProgressMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCopyClusterSnapshotSignalError() instead")
    void pOSTCopyClusterSnapshotSignalE(OAICopyClusterSnapshotResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCopyClusterSnapshotSignalError(OAICopyClusterSnapshotResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateAuthenticationProfileSignalError() instead")
    void pOSTCreateAuthenticationProfileSignalE(OAICreateAuthenticationProfileResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateAuthenticationProfileSignalError(OAICreateAuthenticationProfileResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateClusterSignalError() instead")
    void pOSTCreateClusterSignalE(OAICreateClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateClusterSignalError(OAICreateClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateClusterParameterGroupSignalError() instead")
    void pOSTCreateClusterParameterGroupSignalE(OAICreateClusterParameterGroupResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateClusterParameterGroupSignalError(OAICreateClusterParameterGroupResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateClusterSecurityGroupSignalError() instead")
    void pOSTCreateClusterSecurityGroupSignalE(OAICreateClusterSecurityGroupResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateClusterSecurityGroupSignalError(OAICreateClusterSecurityGroupResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateClusterSnapshotSignalError() instead")
    void pOSTCreateClusterSnapshotSignalE(OAICreateClusterSnapshotResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateClusterSnapshotSignalError(OAICreateClusterSnapshotResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateClusterSubnetGroupSignalError() instead")
    void pOSTCreateClusterSubnetGroupSignalE(OAICreateClusterSubnetGroupResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateClusterSubnetGroupSignalError(OAICreateClusterSubnetGroupResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateCustomDomainAssociationSignalError() instead")
    void pOSTCreateCustomDomainAssociationSignalE(OAICreateCustomDomainAssociationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateCustomDomainAssociationSignalError(OAICreateCustomDomainAssociationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateEndpointAccessSignalError() instead")
    void pOSTCreateEndpointAccessSignalE(OAIEndpointAccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateEndpointAccessSignalError(OAIEndpointAccess summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateEventSubscriptionSignalError() instead")
    void pOSTCreateEventSubscriptionSignalE(OAICreateEventSubscriptionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateEventSubscriptionSignalError(OAICreateEventSubscriptionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateHsmClientCertificateSignalError() instead")
    void pOSTCreateHsmClientCertificateSignalE(OAICreateHsmClientCertificateResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateHsmClientCertificateSignalError(OAICreateHsmClientCertificateResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateHsmConfigurationSignalError() instead")
    void pOSTCreateHsmConfigurationSignalE(OAICreateHsmConfigurationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateHsmConfigurationSignalError(OAICreateHsmConfigurationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateScheduledActionSignalError() instead")
    void pOSTCreateScheduledActionSignalE(OAIScheduledAction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateScheduledActionSignalError(OAIScheduledAction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateSnapshotCopyGrantSignalError() instead")
    void pOSTCreateSnapshotCopyGrantSignalE(OAICreateSnapshotCopyGrantResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateSnapshotCopyGrantSignalError(OAICreateSnapshotCopyGrantResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateSnapshotScheduleSignalError() instead")
    void pOSTCreateSnapshotScheduleSignalE(OAISnapshotSchedule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateSnapshotScheduleSignalError(OAISnapshotSchedule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateTagsSignalError() instead")
    void pOSTCreateTagsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateTagsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateUsageLimitSignalError() instead")
    void pOSTCreateUsageLimitSignalE(OAIUsageLimit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateUsageLimitSignalError(OAIUsageLimit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeauthorizeDataShareSignalError() instead")
    void pOSTDeauthorizeDataShareSignalE(OAIDataShare summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeauthorizeDataShareSignalError(OAIDataShare summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteAuthenticationProfileSignalError() instead")
    void pOSTDeleteAuthenticationProfileSignalE(OAIDeleteAuthenticationProfileResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteAuthenticationProfileSignalError(OAIDeleteAuthenticationProfileResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteClusterSignalError() instead")
    void pOSTDeleteClusterSignalE(OAIDeleteClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteClusterSignalError(OAIDeleteClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteClusterParameterGroupSignalError() instead")
    void pOSTDeleteClusterParameterGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteClusterParameterGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteClusterSecurityGroupSignalError() instead")
    void pOSTDeleteClusterSecurityGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteClusterSecurityGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteClusterSnapshotSignalError() instead")
    void pOSTDeleteClusterSnapshotSignalE(OAIDeleteClusterSnapshotResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteClusterSnapshotSignalError(OAIDeleteClusterSnapshotResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteClusterSubnetGroupSignalError() instead")
    void pOSTDeleteClusterSubnetGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteClusterSubnetGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteCustomDomainAssociationSignalError() instead")
    void pOSTDeleteCustomDomainAssociationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteCustomDomainAssociationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteEndpointAccessSignalError() instead")
    void pOSTDeleteEndpointAccessSignalE(OAIEndpointAccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteEndpointAccessSignalError(OAIEndpointAccess summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteEventSubscriptionSignalError() instead")
    void pOSTDeleteEventSubscriptionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteEventSubscriptionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteHsmClientCertificateSignalError() instead")
    void pOSTDeleteHsmClientCertificateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteHsmClientCertificateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteHsmConfigurationSignalError() instead")
    void pOSTDeleteHsmConfigurationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteHsmConfigurationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeletePartnerSignalError() instead")
    void pOSTDeletePartnerSignalE(OAIPartnerIntegrationOutputMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeletePartnerSignalError(OAIPartnerIntegrationOutputMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteScheduledActionSignalError() instead")
    void pOSTDeleteScheduledActionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteScheduledActionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteSnapshotCopyGrantSignalError() instead")
    void pOSTDeleteSnapshotCopyGrantSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteSnapshotCopyGrantSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteSnapshotScheduleSignalError() instead")
    void pOSTDeleteSnapshotScheduleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteSnapshotScheduleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteTagsSignalError() instead")
    void pOSTDeleteTagsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteTagsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteUsageLimitSignalError() instead")
    void pOSTDeleteUsageLimitSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteUsageLimitSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeAccountAttributesSignalError() instead")
    void pOSTDescribeAccountAttributesSignalE(OAIAccountAttributeList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeAccountAttributesSignalError(OAIAccountAttributeList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeAuthenticationProfilesSignalError() instead")
    void pOSTDescribeAuthenticationProfilesSignalE(OAIDescribeAuthenticationProfilesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeAuthenticationProfilesSignalError(OAIDescribeAuthenticationProfilesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeClusterDbRevisionsSignalError() instead")
    void pOSTDescribeClusterDbRevisionsSignalE(OAIClusterDbRevisionsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeClusterDbRevisionsSignalError(OAIClusterDbRevisionsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeClusterParameterGroupsSignalError() instead")
    void pOSTDescribeClusterParameterGroupsSignalE(OAIClusterParameterGroupsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeClusterParameterGroupsSignalError(OAIClusterParameterGroupsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeClusterParametersSignalError() instead")
    void pOSTDescribeClusterParametersSignalE(OAIClusterParameterGroupDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeClusterParametersSignalError(OAIClusterParameterGroupDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeClusterSecurityGroupsSignalError() instead")
    void pOSTDescribeClusterSecurityGroupsSignalE(OAIClusterSecurityGroupMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeClusterSecurityGroupsSignalError(OAIClusterSecurityGroupMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeClusterSnapshotsSignalError() instead")
    void pOSTDescribeClusterSnapshotsSignalE(OAISnapshotMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeClusterSnapshotsSignalError(OAISnapshotMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeClusterSubnetGroupsSignalError() instead")
    void pOSTDescribeClusterSubnetGroupsSignalE(OAIClusterSubnetGroupMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeClusterSubnetGroupsSignalError(OAIClusterSubnetGroupMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeClusterTracksSignalError() instead")
    void pOSTDescribeClusterTracksSignalE(OAITrackListMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeClusterTracksSignalError(OAITrackListMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeClusterVersionsSignalError() instead")
    void pOSTDescribeClusterVersionsSignalE(OAIClusterVersionsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeClusterVersionsSignalError(OAIClusterVersionsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeClustersSignalError() instead")
    void pOSTDescribeClustersSignalE(OAIClustersMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeClustersSignalError(OAIClustersMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeCustomDomainAssociationsSignalError() instead")
    void pOSTDescribeCustomDomainAssociationsSignalE(OAICustomDomainAssociationsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeCustomDomainAssociationsSignalError(OAICustomDomainAssociationsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeDataSharesSignalError() instead")
    void pOSTDescribeDataSharesSignalE(OAIDescribeDataSharesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeDataSharesSignalError(OAIDescribeDataSharesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeDataSharesForConsumerSignalError() instead")
    void pOSTDescribeDataSharesForConsumerSignalE(OAIDescribeDataSharesForConsumerResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeDataSharesForConsumerSignalError(OAIDescribeDataSharesForConsumerResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeDataSharesForProducerSignalError() instead")
    void pOSTDescribeDataSharesForProducerSignalE(OAIDescribeDataSharesForProducerResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeDataSharesForProducerSignalError(OAIDescribeDataSharesForProducerResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeDefaultClusterParametersSignalError() instead")
    void pOSTDescribeDefaultClusterParametersSignalE(OAIDescribeDefaultClusterParametersResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeDefaultClusterParametersSignalError(OAIDescribeDefaultClusterParametersResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeEndpointAccessSignalError() instead")
    void pOSTDescribeEndpointAccessSignalE(OAIEndpointAccessList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeEndpointAccessSignalError(OAIEndpointAccessList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeEndpointAuthorizationSignalError() instead")
    void pOSTDescribeEndpointAuthorizationSignalE(OAIEndpointAuthorizationList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeEndpointAuthorizationSignalError(OAIEndpointAuthorizationList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeEventCategoriesSignalError() instead")
    void pOSTDescribeEventCategoriesSignalE(OAIEventCategoriesMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeEventCategoriesSignalError(OAIEventCategoriesMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeEventSubscriptionsSignalError() instead")
    void pOSTDescribeEventSubscriptionsSignalE(OAIEventSubscriptionsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeEventSubscriptionsSignalError(OAIEventSubscriptionsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeEventsSignalError() instead")
    void pOSTDescribeEventsSignalE(OAIEventsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeEventsSignalError(OAIEventsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeHsmClientCertificatesSignalError() instead")
    void pOSTDescribeHsmClientCertificatesSignalE(OAIHsmClientCertificateMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeHsmClientCertificatesSignalError(OAIHsmClientCertificateMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeHsmConfigurationsSignalError() instead")
    void pOSTDescribeHsmConfigurationsSignalE(OAIHsmConfigurationMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeHsmConfigurationsSignalError(OAIHsmConfigurationMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeLoggingStatusSignalError() instead")
    void pOSTDescribeLoggingStatusSignalE(OAILoggingStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeLoggingStatusSignalError(OAILoggingStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeNodeConfigurationOptionsSignalError() instead")
    void pOSTDescribeNodeConfigurationOptionsSignalE(OAINodeConfigurationOptionsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeNodeConfigurationOptionsSignalError(OAINodeConfigurationOptionsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeOrderableClusterOptionsSignalError() instead")
    void pOSTDescribeOrderableClusterOptionsSignalE(OAIOrderableClusterOptionsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeOrderableClusterOptionsSignalError(OAIOrderableClusterOptionsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribePartnersSignalError() instead")
    void pOSTDescribePartnersSignalE(OAIDescribePartnersOutputMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribePartnersSignalError(OAIDescribePartnersOutputMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeReservedNodeExchangeStatusSignalError() instead")
    void pOSTDescribeReservedNodeExchangeStatusSignalE(OAIDescribeReservedNodeExchangeStatusOutputMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeReservedNodeExchangeStatusSignalError(OAIDescribeReservedNodeExchangeStatusOutputMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeReservedNodeOfferingsSignalError() instead")
    void pOSTDescribeReservedNodeOfferingsSignalE(OAIReservedNodeOfferingsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeReservedNodeOfferingsSignalError(OAIReservedNodeOfferingsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeReservedNodesSignalError() instead")
    void pOSTDescribeReservedNodesSignalE(OAIReservedNodesMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeReservedNodesSignalError(OAIReservedNodesMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeResizeSignalError() instead")
    void pOSTDescribeResizeSignalE(OAIResizeProgressMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeResizeSignalError(OAIResizeProgressMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeScheduledActionsSignalError() instead")
    void pOSTDescribeScheduledActionsSignalE(OAIScheduledActionsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeScheduledActionsSignalError(OAIScheduledActionsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeSnapshotCopyGrantsSignalError() instead")
    void pOSTDescribeSnapshotCopyGrantsSignalE(OAISnapshotCopyGrantMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeSnapshotCopyGrantsSignalError(OAISnapshotCopyGrantMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeSnapshotSchedulesSignalError() instead")
    void pOSTDescribeSnapshotSchedulesSignalE(OAIDescribeSnapshotSchedulesOutputMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeSnapshotSchedulesSignalError(OAIDescribeSnapshotSchedulesOutputMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeStorageSignalError() instead")
    void pOSTDescribeStorageSignalE(OAICustomerStorageMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeStorageSignalError(OAICustomerStorageMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeTableRestoreStatusSignalError() instead")
    void pOSTDescribeTableRestoreStatusSignalE(OAITableRestoreStatusMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeTableRestoreStatusSignalError(OAITableRestoreStatusMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeTagsSignalError() instead")
    void pOSTDescribeTagsSignalE(OAITaggedResourceListMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeTagsSignalError(OAITaggedResourceListMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeUsageLimitsSignalError() instead")
    void pOSTDescribeUsageLimitsSignalE(OAIUsageLimitList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeUsageLimitsSignalError(OAIUsageLimitList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDisableLoggingSignalError() instead")
    void pOSTDisableLoggingSignalE(OAILoggingStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDisableLoggingSignalError(OAILoggingStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDisableSnapshotCopySignalError() instead")
    void pOSTDisableSnapshotCopySignalE(OAIDisableSnapshotCopyResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDisableSnapshotCopySignalError(OAIDisableSnapshotCopyResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDisassociateDataShareConsumerSignalError() instead")
    void pOSTDisassociateDataShareConsumerSignalE(OAIDataShare summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDisassociateDataShareConsumerSignalError(OAIDataShare summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTEnableLoggingSignalError() instead")
    void pOSTEnableLoggingSignalE(OAILoggingStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTEnableLoggingSignalError(OAILoggingStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTEnableSnapshotCopySignalError() instead")
    void pOSTEnableSnapshotCopySignalE(OAIEnableSnapshotCopyResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTEnableSnapshotCopySignalError(OAIEnableSnapshotCopyResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetClusterCredentialsSignalError() instead")
    void pOSTGetClusterCredentialsSignalE(OAIClusterCredentials summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetClusterCredentialsSignalError(OAIClusterCredentials summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetClusterCredentialsWithIAMSignalError() instead")
    void pOSTGetClusterCredentialsWithIAMSignalE(OAIClusterExtendedCredentials summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetClusterCredentialsWithIAMSignalError(OAIClusterExtendedCredentials summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetReservedNodeExchangeConfigurationOptionsSignalError() instead")
    void pOSTGetReservedNodeExchangeConfigurationOptionsSignalE(OAIGetReservedNodeExchangeConfigurationOptionsOutputMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetReservedNodeExchangeConfigurationOptionsSignalError(OAIGetReservedNodeExchangeConfigurationOptionsOutputMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetReservedNodeExchangeOfferingsSignalError() instead")
    void pOSTGetReservedNodeExchangeOfferingsSignalE(OAIGetReservedNodeExchangeOfferingsOutputMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetReservedNodeExchangeOfferingsSignalError(OAIGetReservedNodeExchangeOfferingsOutputMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyAquaConfigurationSignalError() instead")
    void pOSTModifyAquaConfigurationSignalE(OAIModifyAquaOutputMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyAquaConfigurationSignalError(OAIModifyAquaOutputMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyAuthenticationProfileSignalError() instead")
    void pOSTModifyAuthenticationProfileSignalE(OAIModifyAuthenticationProfileResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyAuthenticationProfileSignalError(OAIModifyAuthenticationProfileResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyClusterSignalError() instead")
    void pOSTModifyClusterSignalE(OAIModifyClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyClusterSignalError(OAIModifyClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyClusterDbRevisionSignalError() instead")
    void pOSTModifyClusterDbRevisionSignalE(OAIModifyClusterDbRevisionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyClusterDbRevisionSignalError(OAIModifyClusterDbRevisionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyClusterIamRolesSignalError() instead")
    void pOSTModifyClusterIamRolesSignalE(OAIModifyClusterIamRolesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyClusterIamRolesSignalError(OAIModifyClusterIamRolesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyClusterMaintenanceSignalError() instead")
    void pOSTModifyClusterMaintenanceSignalE(OAIModifyClusterMaintenanceResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyClusterMaintenanceSignalError(OAIModifyClusterMaintenanceResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyClusterParameterGroupSignalError() instead")
    void pOSTModifyClusterParameterGroupSignalE(OAIClusterParameterGroupNameMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyClusterParameterGroupSignalError(OAIClusterParameterGroupNameMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyClusterSnapshotSignalError() instead")
    void pOSTModifyClusterSnapshotSignalE(OAIModifyClusterSnapshotResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyClusterSnapshotSignalError(OAIModifyClusterSnapshotResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyClusterSnapshotScheduleSignalError() instead")
    void pOSTModifyClusterSnapshotScheduleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyClusterSnapshotScheduleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyClusterSubnetGroupSignalError() instead")
    void pOSTModifyClusterSubnetGroupSignalE(OAIModifyClusterSubnetGroupResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyClusterSubnetGroupSignalError(OAIModifyClusterSubnetGroupResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyCustomDomainAssociationSignalError() instead")
    void pOSTModifyCustomDomainAssociationSignalE(OAIModifyCustomDomainAssociationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyCustomDomainAssociationSignalError(OAIModifyCustomDomainAssociationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyEndpointAccessSignalError() instead")
    void pOSTModifyEndpointAccessSignalE(OAIEndpointAccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyEndpointAccessSignalError(OAIEndpointAccess summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyEventSubscriptionSignalError() instead")
    void pOSTModifyEventSubscriptionSignalE(OAIModifyEventSubscriptionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyEventSubscriptionSignalError(OAIModifyEventSubscriptionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyScheduledActionSignalError() instead")
    void pOSTModifyScheduledActionSignalE(OAIScheduledAction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyScheduledActionSignalError(OAIScheduledAction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifySnapshotCopyRetentionPeriodSignalError() instead")
    void pOSTModifySnapshotCopyRetentionPeriodSignalE(OAIModifySnapshotCopyRetentionPeriodResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifySnapshotCopyRetentionPeriodSignalError(OAIModifySnapshotCopyRetentionPeriodResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifySnapshotScheduleSignalError() instead")
    void pOSTModifySnapshotScheduleSignalE(OAISnapshotSchedule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifySnapshotScheduleSignalError(OAISnapshotSchedule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyUsageLimitSignalError() instead")
    void pOSTModifyUsageLimitSignalE(OAIUsageLimit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyUsageLimitSignalError(OAIUsageLimit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPauseClusterSignalError() instead")
    void pOSTPauseClusterSignalE(OAIPauseClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPauseClusterSignalError(OAIPauseClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPurchaseReservedNodeOfferingSignalError() instead")
    void pOSTPurchaseReservedNodeOfferingSignalE(OAIPurchaseReservedNodeOfferingResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPurchaseReservedNodeOfferingSignalError(OAIPurchaseReservedNodeOfferingResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRebootClusterSignalError() instead")
    void pOSTRebootClusterSignalE(OAIRebootClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRebootClusterSignalError(OAIRebootClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRejectDataShareSignalError() instead")
    void pOSTRejectDataShareSignalE(OAIDataShare summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRejectDataShareSignalError(OAIDataShare summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTResetClusterParameterGroupSignalError() instead")
    void pOSTResetClusterParameterGroupSignalE(OAIClusterParameterGroupNameMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTResetClusterParameterGroupSignalError(OAIClusterParameterGroupNameMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTResizeClusterSignalError() instead")
    void pOSTResizeClusterSignalE(OAIResizeClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTResizeClusterSignalError(OAIResizeClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRestoreFromClusterSnapshotSignalError() instead")
    void pOSTRestoreFromClusterSnapshotSignalE(OAIRestoreFromClusterSnapshotResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRestoreFromClusterSnapshotSignalError(OAIRestoreFromClusterSnapshotResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRestoreTableFromClusterSnapshotSignalError() instead")
    void pOSTRestoreTableFromClusterSnapshotSignalE(OAIRestoreTableFromClusterSnapshotResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRestoreTableFromClusterSnapshotSignalError(OAIRestoreTableFromClusterSnapshotResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTResumeClusterSignalError() instead")
    void pOSTResumeClusterSignalE(OAIResumeClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTResumeClusterSignalError(OAIResumeClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRevokeClusterSecurityGroupIngressSignalError() instead")
    void pOSTRevokeClusterSecurityGroupIngressSignalE(OAIRevokeClusterSecurityGroupIngressResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRevokeClusterSecurityGroupIngressSignalError(OAIRevokeClusterSecurityGroupIngressResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRevokeEndpointAccessSignalError() instead")
    void pOSTRevokeEndpointAccessSignalE(OAIEndpointAuthorization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRevokeEndpointAccessSignalError(OAIEndpointAuthorization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRevokeSnapshotAccessSignalError() instead")
    void pOSTRevokeSnapshotAccessSignalE(OAIRevokeSnapshotAccessResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRevokeSnapshotAccessSignalError(OAIRevokeSnapshotAccessResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRotateEncryptionKeySignalError() instead")
    void pOSTRotateEncryptionKeySignalE(OAIRotateEncryptionKeyResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRotateEncryptionKeySignalError(OAIRotateEncryptionKeyResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdatePartnerStatusSignalError() instead")
    void pOSTUpdatePartnerStatusSignalE(OAIPartnerIntegrationOutputMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdatePartnerStatusSignalError(OAIPartnerIntegrationOutputMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use gETAcceptReservedNodeExchangeSignalErrorFull() instead")
    void gETAcceptReservedNodeExchangeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAcceptReservedNodeExchangeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETAddPartnerSignalErrorFull() instead")
    void gETAddPartnerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAddPartnerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETAssociateDataShareConsumerSignalErrorFull() instead")
    void gETAssociateDataShareConsumerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAssociateDataShareConsumerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETAuthorizeClusterSecurityGroupIngressSignalErrorFull() instead")
    void gETAuthorizeClusterSecurityGroupIngressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAuthorizeClusterSecurityGroupIngressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETAuthorizeDataShareSignalErrorFull() instead")
    void gETAuthorizeDataShareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAuthorizeDataShareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETAuthorizeEndpointAccessSignalErrorFull() instead")
    void gETAuthorizeEndpointAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAuthorizeEndpointAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETAuthorizeSnapshotAccessSignalErrorFull() instead")
    void gETAuthorizeSnapshotAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAuthorizeSnapshotAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETBatchDeleteClusterSnapshotsSignalErrorFull() instead")
    void gETBatchDeleteClusterSnapshotsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETBatchDeleteClusterSnapshotsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETBatchModifyClusterSnapshotsSignalErrorFull() instead")
    void gETBatchModifyClusterSnapshotsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETBatchModifyClusterSnapshotsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCancelResizeSignalErrorFull() instead")
    void gETCancelResizeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCancelResizeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCopyClusterSnapshotSignalErrorFull() instead")
    void gETCopyClusterSnapshotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCopyClusterSnapshotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateAuthenticationProfileSignalErrorFull() instead")
    void gETCreateAuthenticationProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateAuthenticationProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateClusterSignalErrorFull() instead")
    void gETCreateClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateClusterParameterGroupSignalErrorFull() instead")
    void gETCreateClusterParameterGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateClusterParameterGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateClusterSecurityGroupSignalErrorFull() instead")
    void gETCreateClusterSecurityGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateClusterSecurityGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateClusterSnapshotSignalErrorFull() instead")
    void gETCreateClusterSnapshotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateClusterSnapshotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateClusterSubnetGroupSignalErrorFull() instead")
    void gETCreateClusterSubnetGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateClusterSubnetGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateCustomDomainAssociationSignalErrorFull() instead")
    void gETCreateCustomDomainAssociationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateCustomDomainAssociationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateEndpointAccessSignalErrorFull() instead")
    void gETCreateEndpointAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateEndpointAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateEventSubscriptionSignalErrorFull() instead")
    void gETCreateEventSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateEventSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateHsmClientCertificateSignalErrorFull() instead")
    void gETCreateHsmClientCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateHsmClientCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateHsmConfigurationSignalErrorFull() instead")
    void gETCreateHsmConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateHsmConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateScheduledActionSignalErrorFull() instead")
    void gETCreateScheduledActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateScheduledActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateSnapshotCopyGrantSignalErrorFull() instead")
    void gETCreateSnapshotCopyGrantSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateSnapshotCopyGrantSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateSnapshotScheduleSignalErrorFull() instead")
    void gETCreateSnapshotScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateSnapshotScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateTagsSignalErrorFull() instead")
    void gETCreateTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateUsageLimitSignalErrorFull() instead")
    void gETCreateUsageLimitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateUsageLimitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeauthorizeDataShareSignalErrorFull() instead")
    void gETDeauthorizeDataShareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeauthorizeDataShareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteAuthenticationProfileSignalErrorFull() instead")
    void gETDeleteAuthenticationProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteAuthenticationProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteClusterSignalErrorFull() instead")
    void gETDeleteClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteClusterParameterGroupSignalErrorFull() instead")
    void gETDeleteClusterParameterGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteClusterParameterGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteClusterSecurityGroupSignalErrorFull() instead")
    void gETDeleteClusterSecurityGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteClusterSecurityGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteClusterSnapshotSignalErrorFull() instead")
    void gETDeleteClusterSnapshotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteClusterSnapshotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteClusterSubnetGroupSignalErrorFull() instead")
    void gETDeleteClusterSubnetGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteClusterSubnetGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteCustomDomainAssociationSignalErrorFull() instead")
    void gETDeleteCustomDomainAssociationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteCustomDomainAssociationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteEndpointAccessSignalErrorFull() instead")
    void gETDeleteEndpointAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteEndpointAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteEventSubscriptionSignalErrorFull() instead")
    void gETDeleteEventSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteEventSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteHsmClientCertificateSignalErrorFull() instead")
    void gETDeleteHsmClientCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteHsmClientCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteHsmConfigurationSignalErrorFull() instead")
    void gETDeleteHsmConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteHsmConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeletePartnerSignalErrorFull() instead")
    void gETDeletePartnerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeletePartnerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteScheduledActionSignalErrorFull() instead")
    void gETDeleteScheduledActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteScheduledActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteSnapshotCopyGrantSignalErrorFull() instead")
    void gETDeleteSnapshotCopyGrantSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteSnapshotCopyGrantSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteSnapshotScheduleSignalErrorFull() instead")
    void gETDeleteSnapshotScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteSnapshotScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteTagsSignalErrorFull() instead")
    void gETDeleteTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteUsageLimitSignalErrorFull() instead")
    void gETDeleteUsageLimitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteUsageLimitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeAccountAttributesSignalErrorFull() instead")
    void gETDescribeAccountAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeAccountAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeAuthenticationProfilesSignalErrorFull() instead")
    void gETDescribeAuthenticationProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeAuthenticationProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeClusterDbRevisionsSignalErrorFull() instead")
    void gETDescribeClusterDbRevisionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeClusterDbRevisionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeClusterParameterGroupsSignalErrorFull() instead")
    void gETDescribeClusterParameterGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeClusterParameterGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeClusterParametersSignalErrorFull() instead")
    void gETDescribeClusterParametersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeClusterParametersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeClusterSecurityGroupsSignalErrorFull() instead")
    void gETDescribeClusterSecurityGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeClusterSecurityGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeClusterSnapshotsSignalErrorFull() instead")
    void gETDescribeClusterSnapshotsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeClusterSnapshotsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeClusterSubnetGroupsSignalErrorFull() instead")
    void gETDescribeClusterSubnetGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeClusterSubnetGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeClusterTracksSignalErrorFull() instead")
    void gETDescribeClusterTracksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeClusterTracksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeClusterVersionsSignalErrorFull() instead")
    void gETDescribeClusterVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeClusterVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeClustersSignalErrorFull() instead")
    void gETDescribeClustersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeClustersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeCustomDomainAssociationsSignalErrorFull() instead")
    void gETDescribeCustomDomainAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeCustomDomainAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeDataSharesSignalErrorFull() instead")
    void gETDescribeDataSharesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeDataSharesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeDataSharesForConsumerSignalErrorFull() instead")
    void gETDescribeDataSharesForConsumerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeDataSharesForConsumerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeDataSharesForProducerSignalErrorFull() instead")
    void gETDescribeDataSharesForProducerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeDataSharesForProducerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeDefaultClusterParametersSignalErrorFull() instead")
    void gETDescribeDefaultClusterParametersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeDefaultClusterParametersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeEndpointAccessSignalErrorFull() instead")
    void gETDescribeEndpointAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeEndpointAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeEndpointAuthorizationSignalErrorFull() instead")
    void gETDescribeEndpointAuthorizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeEndpointAuthorizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeEventCategoriesSignalErrorFull() instead")
    void gETDescribeEventCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeEventCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeEventSubscriptionsSignalErrorFull() instead")
    void gETDescribeEventSubscriptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeEventSubscriptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeEventsSignalErrorFull() instead")
    void gETDescribeEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeHsmClientCertificatesSignalErrorFull() instead")
    void gETDescribeHsmClientCertificatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeHsmClientCertificatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeHsmConfigurationsSignalErrorFull() instead")
    void gETDescribeHsmConfigurationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeHsmConfigurationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeLoggingStatusSignalErrorFull() instead")
    void gETDescribeLoggingStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeLoggingStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeNodeConfigurationOptionsSignalErrorFull() instead")
    void gETDescribeNodeConfigurationOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeNodeConfigurationOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeOrderableClusterOptionsSignalErrorFull() instead")
    void gETDescribeOrderableClusterOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeOrderableClusterOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribePartnersSignalErrorFull() instead")
    void gETDescribePartnersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribePartnersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeReservedNodeExchangeStatusSignalErrorFull() instead")
    void gETDescribeReservedNodeExchangeStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeReservedNodeExchangeStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeReservedNodeOfferingsSignalErrorFull() instead")
    void gETDescribeReservedNodeOfferingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeReservedNodeOfferingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeReservedNodesSignalErrorFull() instead")
    void gETDescribeReservedNodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeReservedNodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeResizeSignalErrorFull() instead")
    void gETDescribeResizeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeResizeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeScheduledActionsSignalErrorFull() instead")
    void gETDescribeScheduledActionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeScheduledActionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeSnapshotCopyGrantsSignalErrorFull() instead")
    void gETDescribeSnapshotCopyGrantsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeSnapshotCopyGrantsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeSnapshotSchedulesSignalErrorFull() instead")
    void gETDescribeSnapshotSchedulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeSnapshotSchedulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeStorageSignalErrorFull() instead")
    void gETDescribeStorageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeStorageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeTableRestoreStatusSignalErrorFull() instead")
    void gETDescribeTableRestoreStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeTableRestoreStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeTagsSignalErrorFull() instead")
    void gETDescribeTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeUsageLimitsSignalErrorFull() instead")
    void gETDescribeUsageLimitsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeUsageLimitsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDisableLoggingSignalErrorFull() instead")
    void gETDisableLoggingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDisableLoggingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDisableSnapshotCopySignalErrorFull() instead")
    void gETDisableSnapshotCopySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDisableSnapshotCopySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDisassociateDataShareConsumerSignalErrorFull() instead")
    void gETDisassociateDataShareConsumerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDisassociateDataShareConsumerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETEnableLoggingSignalErrorFull() instead")
    void gETEnableLoggingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETEnableLoggingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETEnableSnapshotCopySignalErrorFull() instead")
    void gETEnableSnapshotCopySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETEnableSnapshotCopySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetClusterCredentialsSignalErrorFull() instead")
    void gETGetClusterCredentialsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetClusterCredentialsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetClusterCredentialsWithIAMSignalErrorFull() instead")
    void gETGetClusterCredentialsWithIAMSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetClusterCredentialsWithIAMSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetReservedNodeExchangeConfigurationOptionsSignalErrorFull() instead")
    void gETGetReservedNodeExchangeConfigurationOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetReservedNodeExchangeConfigurationOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetReservedNodeExchangeOfferingsSignalErrorFull() instead")
    void gETGetReservedNodeExchangeOfferingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetReservedNodeExchangeOfferingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyAquaConfigurationSignalErrorFull() instead")
    void gETModifyAquaConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyAquaConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyAuthenticationProfileSignalErrorFull() instead")
    void gETModifyAuthenticationProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyAuthenticationProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyClusterSignalErrorFull() instead")
    void gETModifyClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyClusterDbRevisionSignalErrorFull() instead")
    void gETModifyClusterDbRevisionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyClusterDbRevisionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyClusterIamRolesSignalErrorFull() instead")
    void gETModifyClusterIamRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyClusterIamRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyClusterMaintenanceSignalErrorFull() instead")
    void gETModifyClusterMaintenanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyClusterMaintenanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyClusterParameterGroupSignalErrorFull() instead")
    void gETModifyClusterParameterGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyClusterParameterGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyClusterSnapshotSignalErrorFull() instead")
    void gETModifyClusterSnapshotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyClusterSnapshotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyClusterSnapshotScheduleSignalErrorFull() instead")
    void gETModifyClusterSnapshotScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyClusterSnapshotScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyClusterSubnetGroupSignalErrorFull() instead")
    void gETModifyClusterSubnetGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyClusterSubnetGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyCustomDomainAssociationSignalErrorFull() instead")
    void gETModifyCustomDomainAssociationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyCustomDomainAssociationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyEndpointAccessSignalErrorFull() instead")
    void gETModifyEndpointAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyEndpointAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyEventSubscriptionSignalErrorFull() instead")
    void gETModifyEventSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyEventSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyScheduledActionSignalErrorFull() instead")
    void gETModifyScheduledActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyScheduledActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifySnapshotCopyRetentionPeriodSignalErrorFull() instead")
    void gETModifySnapshotCopyRetentionPeriodSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifySnapshotCopyRetentionPeriodSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifySnapshotScheduleSignalErrorFull() instead")
    void gETModifySnapshotScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifySnapshotScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyUsageLimitSignalErrorFull() instead")
    void gETModifyUsageLimitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyUsageLimitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPauseClusterSignalErrorFull() instead")
    void gETPauseClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETPauseClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPurchaseReservedNodeOfferingSignalErrorFull() instead")
    void gETPurchaseReservedNodeOfferingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETPurchaseReservedNodeOfferingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRebootClusterSignalErrorFull() instead")
    void gETRebootClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRebootClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRejectDataShareSignalErrorFull() instead")
    void gETRejectDataShareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRejectDataShareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETResetClusterParameterGroupSignalErrorFull() instead")
    void gETResetClusterParameterGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETResetClusterParameterGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETResizeClusterSignalErrorFull() instead")
    void gETResizeClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETResizeClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRestoreFromClusterSnapshotSignalErrorFull() instead")
    void gETRestoreFromClusterSnapshotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRestoreFromClusterSnapshotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRestoreTableFromClusterSnapshotSignalErrorFull() instead")
    void gETRestoreTableFromClusterSnapshotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRestoreTableFromClusterSnapshotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETResumeClusterSignalErrorFull() instead")
    void gETResumeClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETResumeClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRevokeClusterSecurityGroupIngressSignalErrorFull() instead")
    void gETRevokeClusterSecurityGroupIngressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRevokeClusterSecurityGroupIngressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRevokeEndpointAccessSignalErrorFull() instead")
    void gETRevokeEndpointAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRevokeEndpointAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRevokeSnapshotAccessSignalErrorFull() instead")
    void gETRevokeSnapshotAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRevokeSnapshotAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRotateEncryptionKeySignalErrorFull() instead")
    void gETRotateEncryptionKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRotateEncryptionKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdatePartnerStatusSignalErrorFull() instead")
    void gETUpdatePartnerStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdatePartnerStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAcceptReservedNodeExchangeSignalErrorFull() instead")
    void pOSTAcceptReservedNodeExchangeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAcceptReservedNodeExchangeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAddPartnerSignalErrorFull() instead")
    void pOSTAddPartnerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAddPartnerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAssociateDataShareConsumerSignalErrorFull() instead")
    void pOSTAssociateDataShareConsumerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAssociateDataShareConsumerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAuthorizeClusterSecurityGroupIngressSignalErrorFull() instead")
    void pOSTAuthorizeClusterSecurityGroupIngressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAuthorizeClusterSecurityGroupIngressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAuthorizeDataShareSignalErrorFull() instead")
    void pOSTAuthorizeDataShareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAuthorizeDataShareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAuthorizeEndpointAccessSignalErrorFull() instead")
    void pOSTAuthorizeEndpointAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAuthorizeEndpointAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAuthorizeSnapshotAccessSignalErrorFull() instead")
    void pOSTAuthorizeSnapshotAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAuthorizeSnapshotAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTBatchDeleteClusterSnapshotsSignalErrorFull() instead")
    void pOSTBatchDeleteClusterSnapshotsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTBatchDeleteClusterSnapshotsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTBatchModifyClusterSnapshotsSignalErrorFull() instead")
    void pOSTBatchModifyClusterSnapshotsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTBatchModifyClusterSnapshotsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCancelResizeSignalErrorFull() instead")
    void pOSTCancelResizeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCancelResizeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCopyClusterSnapshotSignalErrorFull() instead")
    void pOSTCopyClusterSnapshotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCopyClusterSnapshotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateAuthenticationProfileSignalErrorFull() instead")
    void pOSTCreateAuthenticationProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateAuthenticationProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateClusterSignalErrorFull() instead")
    void pOSTCreateClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateClusterParameterGroupSignalErrorFull() instead")
    void pOSTCreateClusterParameterGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateClusterParameterGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateClusterSecurityGroupSignalErrorFull() instead")
    void pOSTCreateClusterSecurityGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateClusterSecurityGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateClusterSnapshotSignalErrorFull() instead")
    void pOSTCreateClusterSnapshotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateClusterSnapshotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateClusterSubnetGroupSignalErrorFull() instead")
    void pOSTCreateClusterSubnetGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateClusterSubnetGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateCustomDomainAssociationSignalErrorFull() instead")
    void pOSTCreateCustomDomainAssociationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateCustomDomainAssociationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateEndpointAccessSignalErrorFull() instead")
    void pOSTCreateEndpointAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateEndpointAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateEventSubscriptionSignalErrorFull() instead")
    void pOSTCreateEventSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateEventSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateHsmClientCertificateSignalErrorFull() instead")
    void pOSTCreateHsmClientCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateHsmClientCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateHsmConfigurationSignalErrorFull() instead")
    void pOSTCreateHsmConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateHsmConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateScheduledActionSignalErrorFull() instead")
    void pOSTCreateScheduledActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateScheduledActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateSnapshotCopyGrantSignalErrorFull() instead")
    void pOSTCreateSnapshotCopyGrantSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateSnapshotCopyGrantSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateSnapshotScheduleSignalErrorFull() instead")
    void pOSTCreateSnapshotScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateSnapshotScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateTagsSignalErrorFull() instead")
    void pOSTCreateTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateUsageLimitSignalErrorFull() instead")
    void pOSTCreateUsageLimitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateUsageLimitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeauthorizeDataShareSignalErrorFull() instead")
    void pOSTDeauthorizeDataShareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeauthorizeDataShareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteAuthenticationProfileSignalErrorFull() instead")
    void pOSTDeleteAuthenticationProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteAuthenticationProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteClusterSignalErrorFull() instead")
    void pOSTDeleteClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteClusterParameterGroupSignalErrorFull() instead")
    void pOSTDeleteClusterParameterGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteClusterParameterGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteClusterSecurityGroupSignalErrorFull() instead")
    void pOSTDeleteClusterSecurityGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteClusterSecurityGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteClusterSnapshotSignalErrorFull() instead")
    void pOSTDeleteClusterSnapshotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteClusterSnapshotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteClusterSubnetGroupSignalErrorFull() instead")
    void pOSTDeleteClusterSubnetGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteClusterSubnetGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteCustomDomainAssociationSignalErrorFull() instead")
    void pOSTDeleteCustomDomainAssociationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteCustomDomainAssociationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteEndpointAccessSignalErrorFull() instead")
    void pOSTDeleteEndpointAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteEndpointAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteEventSubscriptionSignalErrorFull() instead")
    void pOSTDeleteEventSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteEventSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteHsmClientCertificateSignalErrorFull() instead")
    void pOSTDeleteHsmClientCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteHsmClientCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteHsmConfigurationSignalErrorFull() instead")
    void pOSTDeleteHsmConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteHsmConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeletePartnerSignalErrorFull() instead")
    void pOSTDeletePartnerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeletePartnerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteScheduledActionSignalErrorFull() instead")
    void pOSTDeleteScheduledActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteScheduledActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteSnapshotCopyGrantSignalErrorFull() instead")
    void pOSTDeleteSnapshotCopyGrantSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteSnapshotCopyGrantSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteSnapshotScheduleSignalErrorFull() instead")
    void pOSTDeleteSnapshotScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteSnapshotScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteTagsSignalErrorFull() instead")
    void pOSTDeleteTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteUsageLimitSignalErrorFull() instead")
    void pOSTDeleteUsageLimitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteUsageLimitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeAccountAttributesSignalErrorFull() instead")
    void pOSTDescribeAccountAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeAccountAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeAuthenticationProfilesSignalErrorFull() instead")
    void pOSTDescribeAuthenticationProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeAuthenticationProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeClusterDbRevisionsSignalErrorFull() instead")
    void pOSTDescribeClusterDbRevisionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeClusterDbRevisionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeClusterParameterGroupsSignalErrorFull() instead")
    void pOSTDescribeClusterParameterGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeClusterParameterGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeClusterParametersSignalErrorFull() instead")
    void pOSTDescribeClusterParametersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeClusterParametersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeClusterSecurityGroupsSignalErrorFull() instead")
    void pOSTDescribeClusterSecurityGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeClusterSecurityGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeClusterSnapshotsSignalErrorFull() instead")
    void pOSTDescribeClusterSnapshotsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeClusterSnapshotsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeClusterSubnetGroupsSignalErrorFull() instead")
    void pOSTDescribeClusterSubnetGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeClusterSubnetGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeClusterTracksSignalErrorFull() instead")
    void pOSTDescribeClusterTracksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeClusterTracksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeClusterVersionsSignalErrorFull() instead")
    void pOSTDescribeClusterVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeClusterVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeClustersSignalErrorFull() instead")
    void pOSTDescribeClustersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeClustersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeCustomDomainAssociationsSignalErrorFull() instead")
    void pOSTDescribeCustomDomainAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeCustomDomainAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeDataSharesSignalErrorFull() instead")
    void pOSTDescribeDataSharesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeDataSharesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeDataSharesForConsumerSignalErrorFull() instead")
    void pOSTDescribeDataSharesForConsumerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeDataSharesForConsumerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeDataSharesForProducerSignalErrorFull() instead")
    void pOSTDescribeDataSharesForProducerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeDataSharesForProducerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeDefaultClusterParametersSignalErrorFull() instead")
    void pOSTDescribeDefaultClusterParametersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeDefaultClusterParametersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeEndpointAccessSignalErrorFull() instead")
    void pOSTDescribeEndpointAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeEndpointAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeEndpointAuthorizationSignalErrorFull() instead")
    void pOSTDescribeEndpointAuthorizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeEndpointAuthorizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeEventCategoriesSignalErrorFull() instead")
    void pOSTDescribeEventCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeEventCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeEventSubscriptionsSignalErrorFull() instead")
    void pOSTDescribeEventSubscriptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeEventSubscriptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeEventsSignalErrorFull() instead")
    void pOSTDescribeEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeHsmClientCertificatesSignalErrorFull() instead")
    void pOSTDescribeHsmClientCertificatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeHsmClientCertificatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeHsmConfigurationsSignalErrorFull() instead")
    void pOSTDescribeHsmConfigurationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeHsmConfigurationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeLoggingStatusSignalErrorFull() instead")
    void pOSTDescribeLoggingStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeLoggingStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeNodeConfigurationOptionsSignalErrorFull() instead")
    void pOSTDescribeNodeConfigurationOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeNodeConfigurationOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeOrderableClusterOptionsSignalErrorFull() instead")
    void pOSTDescribeOrderableClusterOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeOrderableClusterOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribePartnersSignalErrorFull() instead")
    void pOSTDescribePartnersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribePartnersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeReservedNodeExchangeStatusSignalErrorFull() instead")
    void pOSTDescribeReservedNodeExchangeStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeReservedNodeExchangeStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeReservedNodeOfferingsSignalErrorFull() instead")
    void pOSTDescribeReservedNodeOfferingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeReservedNodeOfferingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeReservedNodesSignalErrorFull() instead")
    void pOSTDescribeReservedNodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeReservedNodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeResizeSignalErrorFull() instead")
    void pOSTDescribeResizeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeResizeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeScheduledActionsSignalErrorFull() instead")
    void pOSTDescribeScheduledActionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeScheduledActionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeSnapshotCopyGrantsSignalErrorFull() instead")
    void pOSTDescribeSnapshotCopyGrantsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeSnapshotCopyGrantsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeSnapshotSchedulesSignalErrorFull() instead")
    void pOSTDescribeSnapshotSchedulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeSnapshotSchedulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeStorageSignalErrorFull() instead")
    void pOSTDescribeStorageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeStorageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeTableRestoreStatusSignalErrorFull() instead")
    void pOSTDescribeTableRestoreStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeTableRestoreStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeTagsSignalErrorFull() instead")
    void pOSTDescribeTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeUsageLimitsSignalErrorFull() instead")
    void pOSTDescribeUsageLimitsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeUsageLimitsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDisableLoggingSignalErrorFull() instead")
    void pOSTDisableLoggingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDisableLoggingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDisableSnapshotCopySignalErrorFull() instead")
    void pOSTDisableSnapshotCopySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDisableSnapshotCopySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDisassociateDataShareConsumerSignalErrorFull() instead")
    void pOSTDisassociateDataShareConsumerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDisassociateDataShareConsumerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTEnableLoggingSignalErrorFull() instead")
    void pOSTEnableLoggingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTEnableLoggingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTEnableSnapshotCopySignalErrorFull() instead")
    void pOSTEnableSnapshotCopySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTEnableSnapshotCopySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetClusterCredentialsSignalErrorFull() instead")
    void pOSTGetClusterCredentialsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetClusterCredentialsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetClusterCredentialsWithIAMSignalErrorFull() instead")
    void pOSTGetClusterCredentialsWithIAMSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetClusterCredentialsWithIAMSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetReservedNodeExchangeConfigurationOptionsSignalErrorFull() instead")
    void pOSTGetReservedNodeExchangeConfigurationOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetReservedNodeExchangeConfigurationOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetReservedNodeExchangeOfferingsSignalErrorFull() instead")
    void pOSTGetReservedNodeExchangeOfferingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetReservedNodeExchangeOfferingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyAquaConfigurationSignalErrorFull() instead")
    void pOSTModifyAquaConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyAquaConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyAuthenticationProfileSignalErrorFull() instead")
    void pOSTModifyAuthenticationProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyAuthenticationProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyClusterSignalErrorFull() instead")
    void pOSTModifyClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyClusterDbRevisionSignalErrorFull() instead")
    void pOSTModifyClusterDbRevisionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyClusterDbRevisionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyClusterIamRolesSignalErrorFull() instead")
    void pOSTModifyClusterIamRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyClusterIamRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyClusterMaintenanceSignalErrorFull() instead")
    void pOSTModifyClusterMaintenanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyClusterMaintenanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyClusterParameterGroupSignalErrorFull() instead")
    void pOSTModifyClusterParameterGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyClusterParameterGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyClusterSnapshotSignalErrorFull() instead")
    void pOSTModifyClusterSnapshotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyClusterSnapshotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyClusterSnapshotScheduleSignalErrorFull() instead")
    void pOSTModifyClusterSnapshotScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyClusterSnapshotScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyClusterSubnetGroupSignalErrorFull() instead")
    void pOSTModifyClusterSubnetGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyClusterSubnetGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyCustomDomainAssociationSignalErrorFull() instead")
    void pOSTModifyCustomDomainAssociationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyCustomDomainAssociationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyEndpointAccessSignalErrorFull() instead")
    void pOSTModifyEndpointAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyEndpointAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyEventSubscriptionSignalErrorFull() instead")
    void pOSTModifyEventSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyEventSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyScheduledActionSignalErrorFull() instead")
    void pOSTModifyScheduledActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyScheduledActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifySnapshotCopyRetentionPeriodSignalErrorFull() instead")
    void pOSTModifySnapshotCopyRetentionPeriodSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifySnapshotCopyRetentionPeriodSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifySnapshotScheduleSignalErrorFull() instead")
    void pOSTModifySnapshotScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifySnapshotScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyUsageLimitSignalErrorFull() instead")
    void pOSTModifyUsageLimitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyUsageLimitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPauseClusterSignalErrorFull() instead")
    void pOSTPauseClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPauseClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPurchaseReservedNodeOfferingSignalErrorFull() instead")
    void pOSTPurchaseReservedNodeOfferingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPurchaseReservedNodeOfferingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRebootClusterSignalErrorFull() instead")
    void pOSTRebootClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRebootClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRejectDataShareSignalErrorFull() instead")
    void pOSTRejectDataShareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRejectDataShareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTResetClusterParameterGroupSignalErrorFull() instead")
    void pOSTResetClusterParameterGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTResetClusterParameterGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTResizeClusterSignalErrorFull() instead")
    void pOSTResizeClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTResizeClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRestoreFromClusterSnapshotSignalErrorFull() instead")
    void pOSTRestoreFromClusterSnapshotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRestoreFromClusterSnapshotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRestoreTableFromClusterSnapshotSignalErrorFull() instead")
    void pOSTRestoreTableFromClusterSnapshotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRestoreTableFromClusterSnapshotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTResumeClusterSignalErrorFull() instead")
    void pOSTResumeClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTResumeClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRevokeClusterSecurityGroupIngressSignalErrorFull() instead")
    void pOSTRevokeClusterSecurityGroupIngressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRevokeClusterSecurityGroupIngressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRevokeEndpointAccessSignalErrorFull() instead")
    void pOSTRevokeEndpointAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRevokeEndpointAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRevokeSnapshotAccessSignalErrorFull() instead")
    void pOSTRevokeSnapshotAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRevokeSnapshotAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRotateEncryptionKeySignalErrorFull() instead")
    void pOSTRotateEncryptionKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRotateEncryptionKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdatePartnerStatusSignalErrorFull() instead")
    void pOSTUpdatePartnerStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdatePartnerStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
