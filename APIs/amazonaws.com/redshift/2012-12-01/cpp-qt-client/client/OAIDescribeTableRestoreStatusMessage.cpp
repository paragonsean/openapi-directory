/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeTableRestoreStatusMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeTableRestoreStatusMessage::OAIDescribeTableRestoreStatusMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeTableRestoreStatusMessage::OAIDescribeTableRestoreStatusMessage() {
    this->initializeModel();
}

OAIDescribeTableRestoreStatusMessage::~OAIDescribeTableRestoreStatusMessage() {}

void OAIDescribeTableRestoreStatusMessage::initializeModel() {

    m_cluster_identifier_isSet = false;
    m_cluster_identifier_isValid = false;

    m_table_restore_request_id_isSet = false;
    m_table_restore_request_id_isValid = false;

    m_max_records_isSet = false;
    m_max_records_isValid = false;

    m_marker_isSet = false;
    m_marker_isValid = false;
}

void OAIDescribeTableRestoreStatusMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeTableRestoreStatusMessage::fromJsonObject(QJsonObject json) {

    m_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_cluster_identifier, json[QString("ClusterIdentifier")]);
    m_cluster_identifier_isSet = !json[QString("ClusterIdentifier")].isNull() && m_cluster_identifier_isValid;

    m_table_restore_request_id_isValid = ::OpenAPI::fromJsonValue(m_table_restore_request_id, json[QString("TableRestoreRequestId")]);
    m_table_restore_request_id_isSet = !json[QString("TableRestoreRequestId")].isNull() && m_table_restore_request_id_isValid;

    m_max_records_isValid = ::OpenAPI::fromJsonValue(m_max_records, json[QString("MaxRecords")]);
    m_max_records_isSet = !json[QString("MaxRecords")].isNull() && m_max_records_isValid;

    m_marker_isValid = ::OpenAPI::fromJsonValue(m_marker, json[QString("Marker")]);
    m_marker_isSet = !json[QString("Marker")].isNull() && m_marker_isValid;
}

QString OAIDescribeTableRestoreStatusMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeTableRestoreStatusMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_identifier_isSet) {
        obj.insert(QString("ClusterIdentifier"), ::OpenAPI::toJsonValue(m_cluster_identifier));
    }
    if (m_table_restore_request_id_isSet) {
        obj.insert(QString("TableRestoreRequestId"), ::OpenAPI::toJsonValue(m_table_restore_request_id));
    }
    if (m_max_records_isSet) {
        obj.insert(QString("MaxRecords"), ::OpenAPI::toJsonValue(m_max_records));
    }
    if (m_marker_isSet) {
        obj.insert(QString("Marker"), ::OpenAPI::toJsonValue(m_marker));
    }
    return obj;
}

QString OAIDescribeTableRestoreStatusMessage::getClusterIdentifier() const {
    return m_cluster_identifier;
}
void OAIDescribeTableRestoreStatusMessage::setClusterIdentifier(const QString &cluster_identifier) {
    m_cluster_identifier = cluster_identifier;
    m_cluster_identifier_isSet = true;
}

bool OAIDescribeTableRestoreStatusMessage::is_cluster_identifier_Set() const{
    return m_cluster_identifier_isSet;
}

bool OAIDescribeTableRestoreStatusMessage::is_cluster_identifier_Valid() const{
    return m_cluster_identifier_isValid;
}

QString OAIDescribeTableRestoreStatusMessage::getTableRestoreRequestId() const {
    return m_table_restore_request_id;
}
void OAIDescribeTableRestoreStatusMessage::setTableRestoreRequestId(const QString &table_restore_request_id) {
    m_table_restore_request_id = table_restore_request_id;
    m_table_restore_request_id_isSet = true;
}

bool OAIDescribeTableRestoreStatusMessage::is_table_restore_request_id_Set() const{
    return m_table_restore_request_id_isSet;
}

bool OAIDescribeTableRestoreStatusMessage::is_table_restore_request_id_Valid() const{
    return m_table_restore_request_id_isValid;
}

qint32 OAIDescribeTableRestoreStatusMessage::getMaxRecords() const {
    return m_max_records;
}
void OAIDescribeTableRestoreStatusMessage::setMaxRecords(const qint32 &max_records) {
    m_max_records = max_records;
    m_max_records_isSet = true;
}

bool OAIDescribeTableRestoreStatusMessage::is_max_records_Set() const{
    return m_max_records_isSet;
}

bool OAIDescribeTableRestoreStatusMessage::is_max_records_Valid() const{
    return m_max_records_isValid;
}

QString OAIDescribeTableRestoreStatusMessage::getMarker() const {
    return m_marker;
}
void OAIDescribeTableRestoreStatusMessage::setMarker(const QString &marker) {
    m_marker = marker;
    m_marker_isSet = true;
}

bool OAIDescribeTableRestoreStatusMessage::is_marker_Set() const{
    return m_marker_isSet;
}

bool OAIDescribeTableRestoreStatusMessage::is_marker_Valid() const{
    return m_marker_isValid;
}

bool OAIDescribeTableRestoreStatusMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_restore_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_records_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marker_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeTableRestoreStatusMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
