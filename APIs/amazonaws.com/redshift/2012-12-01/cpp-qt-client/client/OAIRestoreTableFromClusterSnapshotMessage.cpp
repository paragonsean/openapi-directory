/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestoreTableFromClusterSnapshotMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestoreTableFromClusterSnapshotMessage::OAIRestoreTableFromClusterSnapshotMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestoreTableFromClusterSnapshotMessage::OAIRestoreTableFromClusterSnapshotMessage() {
    this->initializeModel();
}

OAIRestoreTableFromClusterSnapshotMessage::~OAIRestoreTableFromClusterSnapshotMessage() {}

void OAIRestoreTableFromClusterSnapshotMessage::initializeModel() {

    m_cluster_identifier_isSet = false;
    m_cluster_identifier_isValid = false;

    m_snapshot_identifier_isSet = false;
    m_snapshot_identifier_isValid = false;

    m_source_database_name_isSet = false;
    m_source_database_name_isValid = false;

    m_source_schema_name_isSet = false;
    m_source_schema_name_isValid = false;

    m_source_table_name_isSet = false;
    m_source_table_name_isValid = false;

    m_target_database_name_isSet = false;
    m_target_database_name_isValid = false;

    m_target_schema_name_isSet = false;
    m_target_schema_name_isValid = false;

    m_new_table_name_isSet = false;
    m_new_table_name_isValid = false;

    m_enable_case_sensitive_identifier_isSet = false;
    m_enable_case_sensitive_identifier_isValid = false;
}

void OAIRestoreTableFromClusterSnapshotMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestoreTableFromClusterSnapshotMessage::fromJsonObject(QJsonObject json) {

    m_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_cluster_identifier, json[QString("ClusterIdentifier")]);
    m_cluster_identifier_isSet = !json[QString("ClusterIdentifier")].isNull() && m_cluster_identifier_isValid;

    m_snapshot_identifier_isValid = ::OpenAPI::fromJsonValue(m_snapshot_identifier, json[QString("SnapshotIdentifier")]);
    m_snapshot_identifier_isSet = !json[QString("SnapshotIdentifier")].isNull() && m_snapshot_identifier_isValid;

    m_source_database_name_isValid = ::OpenAPI::fromJsonValue(m_source_database_name, json[QString("SourceDatabaseName")]);
    m_source_database_name_isSet = !json[QString("SourceDatabaseName")].isNull() && m_source_database_name_isValid;

    m_source_schema_name_isValid = ::OpenAPI::fromJsonValue(m_source_schema_name, json[QString("SourceSchemaName")]);
    m_source_schema_name_isSet = !json[QString("SourceSchemaName")].isNull() && m_source_schema_name_isValid;

    m_source_table_name_isValid = ::OpenAPI::fromJsonValue(m_source_table_name, json[QString("SourceTableName")]);
    m_source_table_name_isSet = !json[QString("SourceTableName")].isNull() && m_source_table_name_isValid;

    m_target_database_name_isValid = ::OpenAPI::fromJsonValue(m_target_database_name, json[QString("TargetDatabaseName")]);
    m_target_database_name_isSet = !json[QString("TargetDatabaseName")].isNull() && m_target_database_name_isValid;

    m_target_schema_name_isValid = ::OpenAPI::fromJsonValue(m_target_schema_name, json[QString("TargetSchemaName")]);
    m_target_schema_name_isSet = !json[QString("TargetSchemaName")].isNull() && m_target_schema_name_isValid;

    m_new_table_name_isValid = ::OpenAPI::fromJsonValue(m_new_table_name, json[QString("NewTableName")]);
    m_new_table_name_isSet = !json[QString("NewTableName")].isNull() && m_new_table_name_isValid;

    m_enable_case_sensitive_identifier_isValid = ::OpenAPI::fromJsonValue(m_enable_case_sensitive_identifier, json[QString("EnableCaseSensitiveIdentifier")]);
    m_enable_case_sensitive_identifier_isSet = !json[QString("EnableCaseSensitiveIdentifier")].isNull() && m_enable_case_sensitive_identifier_isValid;
}

QString OAIRestoreTableFromClusterSnapshotMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestoreTableFromClusterSnapshotMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_identifier_isSet) {
        obj.insert(QString("ClusterIdentifier"), ::OpenAPI::toJsonValue(m_cluster_identifier));
    }
    if (m_snapshot_identifier_isSet) {
        obj.insert(QString("SnapshotIdentifier"), ::OpenAPI::toJsonValue(m_snapshot_identifier));
    }
    if (m_source_database_name_isSet) {
        obj.insert(QString("SourceDatabaseName"), ::OpenAPI::toJsonValue(m_source_database_name));
    }
    if (m_source_schema_name_isSet) {
        obj.insert(QString("SourceSchemaName"), ::OpenAPI::toJsonValue(m_source_schema_name));
    }
    if (m_source_table_name_isSet) {
        obj.insert(QString("SourceTableName"), ::OpenAPI::toJsonValue(m_source_table_name));
    }
    if (m_target_database_name_isSet) {
        obj.insert(QString("TargetDatabaseName"), ::OpenAPI::toJsonValue(m_target_database_name));
    }
    if (m_target_schema_name_isSet) {
        obj.insert(QString("TargetSchemaName"), ::OpenAPI::toJsonValue(m_target_schema_name));
    }
    if (m_new_table_name_isSet) {
        obj.insert(QString("NewTableName"), ::OpenAPI::toJsonValue(m_new_table_name));
    }
    if (m_enable_case_sensitive_identifier_isSet) {
        obj.insert(QString("EnableCaseSensitiveIdentifier"), ::OpenAPI::toJsonValue(m_enable_case_sensitive_identifier));
    }
    return obj;
}

QString OAIRestoreTableFromClusterSnapshotMessage::getClusterIdentifier() const {
    return m_cluster_identifier;
}
void OAIRestoreTableFromClusterSnapshotMessage::setClusterIdentifier(const QString &cluster_identifier) {
    m_cluster_identifier = cluster_identifier;
    m_cluster_identifier_isSet = true;
}

bool OAIRestoreTableFromClusterSnapshotMessage::is_cluster_identifier_Set() const{
    return m_cluster_identifier_isSet;
}

bool OAIRestoreTableFromClusterSnapshotMessage::is_cluster_identifier_Valid() const{
    return m_cluster_identifier_isValid;
}

QString OAIRestoreTableFromClusterSnapshotMessage::getSnapshotIdentifier() const {
    return m_snapshot_identifier;
}
void OAIRestoreTableFromClusterSnapshotMessage::setSnapshotIdentifier(const QString &snapshot_identifier) {
    m_snapshot_identifier = snapshot_identifier;
    m_snapshot_identifier_isSet = true;
}

bool OAIRestoreTableFromClusterSnapshotMessage::is_snapshot_identifier_Set() const{
    return m_snapshot_identifier_isSet;
}

bool OAIRestoreTableFromClusterSnapshotMessage::is_snapshot_identifier_Valid() const{
    return m_snapshot_identifier_isValid;
}

QString OAIRestoreTableFromClusterSnapshotMessage::getSourceDatabaseName() const {
    return m_source_database_name;
}
void OAIRestoreTableFromClusterSnapshotMessage::setSourceDatabaseName(const QString &source_database_name) {
    m_source_database_name = source_database_name;
    m_source_database_name_isSet = true;
}

bool OAIRestoreTableFromClusterSnapshotMessage::is_source_database_name_Set() const{
    return m_source_database_name_isSet;
}

bool OAIRestoreTableFromClusterSnapshotMessage::is_source_database_name_Valid() const{
    return m_source_database_name_isValid;
}

QString OAIRestoreTableFromClusterSnapshotMessage::getSourceSchemaName() const {
    return m_source_schema_name;
}
void OAIRestoreTableFromClusterSnapshotMessage::setSourceSchemaName(const QString &source_schema_name) {
    m_source_schema_name = source_schema_name;
    m_source_schema_name_isSet = true;
}

bool OAIRestoreTableFromClusterSnapshotMessage::is_source_schema_name_Set() const{
    return m_source_schema_name_isSet;
}

bool OAIRestoreTableFromClusterSnapshotMessage::is_source_schema_name_Valid() const{
    return m_source_schema_name_isValid;
}

QString OAIRestoreTableFromClusterSnapshotMessage::getSourceTableName() const {
    return m_source_table_name;
}
void OAIRestoreTableFromClusterSnapshotMessage::setSourceTableName(const QString &source_table_name) {
    m_source_table_name = source_table_name;
    m_source_table_name_isSet = true;
}

bool OAIRestoreTableFromClusterSnapshotMessage::is_source_table_name_Set() const{
    return m_source_table_name_isSet;
}

bool OAIRestoreTableFromClusterSnapshotMessage::is_source_table_name_Valid() const{
    return m_source_table_name_isValid;
}

QString OAIRestoreTableFromClusterSnapshotMessage::getTargetDatabaseName() const {
    return m_target_database_name;
}
void OAIRestoreTableFromClusterSnapshotMessage::setTargetDatabaseName(const QString &target_database_name) {
    m_target_database_name = target_database_name;
    m_target_database_name_isSet = true;
}

bool OAIRestoreTableFromClusterSnapshotMessage::is_target_database_name_Set() const{
    return m_target_database_name_isSet;
}

bool OAIRestoreTableFromClusterSnapshotMessage::is_target_database_name_Valid() const{
    return m_target_database_name_isValid;
}

QString OAIRestoreTableFromClusterSnapshotMessage::getTargetSchemaName() const {
    return m_target_schema_name;
}
void OAIRestoreTableFromClusterSnapshotMessage::setTargetSchemaName(const QString &target_schema_name) {
    m_target_schema_name = target_schema_name;
    m_target_schema_name_isSet = true;
}

bool OAIRestoreTableFromClusterSnapshotMessage::is_target_schema_name_Set() const{
    return m_target_schema_name_isSet;
}

bool OAIRestoreTableFromClusterSnapshotMessage::is_target_schema_name_Valid() const{
    return m_target_schema_name_isValid;
}

QString OAIRestoreTableFromClusterSnapshotMessage::getNewTableName() const {
    return m_new_table_name;
}
void OAIRestoreTableFromClusterSnapshotMessage::setNewTableName(const QString &new_table_name) {
    m_new_table_name = new_table_name;
    m_new_table_name_isSet = true;
}

bool OAIRestoreTableFromClusterSnapshotMessage::is_new_table_name_Set() const{
    return m_new_table_name_isSet;
}

bool OAIRestoreTableFromClusterSnapshotMessage::is_new_table_name_Valid() const{
    return m_new_table_name_isValid;
}

bool OAIRestoreTableFromClusterSnapshotMessage::getEnableCaseSensitiveIdentifier() const {
    return m_enable_case_sensitive_identifier;
}
void OAIRestoreTableFromClusterSnapshotMessage::setEnableCaseSensitiveIdentifier(const bool &enable_case_sensitive_identifier) {
    m_enable_case_sensitive_identifier = enable_case_sensitive_identifier;
    m_enable_case_sensitive_identifier_isSet = true;
}

bool OAIRestoreTableFromClusterSnapshotMessage::is_enable_case_sensitive_identifier_Set() const{
    return m_enable_case_sensitive_identifier_isSet;
}

bool OAIRestoreTableFromClusterSnapshotMessage::is_enable_case_sensitive_identifier_Valid() const{
    return m_enable_case_sensitive_identifier_isValid;
}

bool OAIRestoreTableFromClusterSnapshotMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_schema_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_schema_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_case_sensitive_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestoreTableFromClusterSnapshotMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cluster_identifier_isValid && m_snapshot_identifier_isValid && m_source_database_name_isValid && m_source_table_name_isValid && m_new_table_name_isValid && true;
}

} // namespace OpenAPI
