/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateUsageLimitMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateUsageLimitMessage::OAICreateUsageLimitMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateUsageLimitMessage::OAICreateUsageLimitMessage() {
    this->initializeModel();
}

OAICreateUsageLimitMessage::~OAICreateUsageLimitMessage() {}

void OAICreateUsageLimitMessage::initializeModel() {

    m_cluster_identifier_isSet = false;
    m_cluster_identifier_isValid = false;

    m_feature_type_isSet = false;
    m_feature_type_isValid = false;

    m_limit_type_isSet = false;
    m_limit_type_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_breach_action_isSet = false;
    m_breach_action_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateUsageLimitMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateUsageLimitMessage::fromJsonObject(QJsonObject json) {

    m_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_cluster_identifier, json[QString("ClusterIdentifier")]);
    m_cluster_identifier_isSet = !json[QString("ClusterIdentifier")].isNull() && m_cluster_identifier_isValid;

    m_feature_type_isValid = ::OpenAPI::fromJsonValue(m_feature_type, json[QString("FeatureType")]);
    m_feature_type_isSet = !json[QString("FeatureType")].isNull() && m_feature_type_isValid;

    m_limit_type_isValid = ::OpenAPI::fromJsonValue(m_limit_type, json[QString("LimitType")]);
    m_limit_type_isSet = !json[QString("LimitType")].isNull() && m_limit_type_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("Amount")]);
    m_amount_isSet = !json[QString("Amount")].isNull() && m_amount_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("Period")]);
    m_period_isSet = !json[QString("Period")].isNull() && m_period_isValid;

    m_breach_action_isValid = ::OpenAPI::fromJsonValue(m_breach_action, json[QString("BreachAction")]);
    m_breach_action_isSet = !json[QString("BreachAction")].isNull() && m_breach_action_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateUsageLimitMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateUsageLimitMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_identifier_isSet) {
        obj.insert(QString("ClusterIdentifier"), ::OpenAPI::toJsonValue(m_cluster_identifier));
    }
    if (m_feature_type.isSet()) {
        obj.insert(QString("FeatureType"), ::OpenAPI::toJsonValue(m_feature_type));
    }
    if (m_limit_type.isSet()) {
        obj.insert(QString("LimitType"), ::OpenAPI::toJsonValue(m_limit_type));
    }
    if (m_amount_isSet) {
        obj.insert(QString("Amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_period.isSet()) {
        obj.insert(QString("Period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_breach_action.isSet()) {
        obj.insert(QString("BreachAction"), ::OpenAPI::toJsonValue(m_breach_action));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateUsageLimitMessage::getClusterIdentifier() const {
    return m_cluster_identifier;
}
void OAICreateUsageLimitMessage::setClusterIdentifier(const QString &cluster_identifier) {
    m_cluster_identifier = cluster_identifier;
    m_cluster_identifier_isSet = true;
}

bool OAICreateUsageLimitMessage::is_cluster_identifier_Set() const{
    return m_cluster_identifier_isSet;
}

bool OAICreateUsageLimitMessage::is_cluster_identifier_Valid() const{
    return m_cluster_identifier_isValid;
}

OAIUsageLimitFeatureType OAICreateUsageLimitMessage::getFeatureType() const {
    return m_feature_type;
}
void OAICreateUsageLimitMessage::setFeatureType(const OAIUsageLimitFeatureType &feature_type) {
    m_feature_type = feature_type;
    m_feature_type_isSet = true;
}

bool OAICreateUsageLimitMessage::is_feature_type_Set() const{
    return m_feature_type_isSet;
}

bool OAICreateUsageLimitMessage::is_feature_type_Valid() const{
    return m_feature_type_isValid;
}

OAIUsageLimitLimitType OAICreateUsageLimitMessage::getLimitType() const {
    return m_limit_type;
}
void OAICreateUsageLimitMessage::setLimitType(const OAIUsageLimitLimitType &limit_type) {
    m_limit_type = limit_type;
    m_limit_type_isSet = true;
}

bool OAICreateUsageLimitMessage::is_limit_type_Set() const{
    return m_limit_type_isSet;
}

bool OAICreateUsageLimitMessage::is_limit_type_Valid() const{
    return m_limit_type_isValid;
}

qint32 OAICreateUsageLimitMessage::getAmount() const {
    return m_amount;
}
void OAICreateUsageLimitMessage::setAmount(const qint32 &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAICreateUsageLimitMessage::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAICreateUsageLimitMessage::is_amount_Valid() const{
    return m_amount_isValid;
}

OAIUsageLimitPeriod OAICreateUsageLimitMessage::getPeriod() const {
    return m_period;
}
void OAICreateUsageLimitMessage::setPeriod(const OAIUsageLimitPeriod &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAICreateUsageLimitMessage::is_period_Set() const{
    return m_period_isSet;
}

bool OAICreateUsageLimitMessage::is_period_Valid() const{
    return m_period_isValid;
}

OAIUsageLimitBreachAction OAICreateUsageLimitMessage::getBreachAction() const {
    return m_breach_action;
}
void OAICreateUsageLimitMessage::setBreachAction(const OAIUsageLimitBreachAction &breach_action) {
    m_breach_action = breach_action;
    m_breach_action_isSet = true;
}

bool OAICreateUsageLimitMessage::is_breach_action_Set() const{
    return m_breach_action_isSet;
}

bool OAICreateUsageLimitMessage::is_breach_action_Valid() const{
    return m_breach_action_isValid;
}

QList OAICreateUsageLimitMessage::getTags() const {
    return m_tags;
}
void OAICreateUsageLimitMessage::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateUsageLimitMessage::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateUsageLimitMessage::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateUsageLimitMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_breach_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateUsageLimitMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cluster_identifier_isValid && m_feature_type_isValid && m_limit_type_isValid && m_amount_isValid && true;
}

} // namespace OpenAPI
