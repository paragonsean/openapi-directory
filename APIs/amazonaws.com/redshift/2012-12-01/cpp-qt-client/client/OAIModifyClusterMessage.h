/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIModifyClusterMessage.h
 *
 * &lt;p/&gt;
 */

#ifndef OAIModifyClusterMessage_H
#define OAIModifyClusterMessage_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIModifyClusterMessage : public OAIObject {
public:
    OAIModifyClusterMessage();
    OAIModifyClusterMessage(QString json);
    ~OAIModifyClusterMessage() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getClusterIdentifier() const;
    void setClusterIdentifier(const QString &cluster_identifier);
    bool is_cluster_identifier_Set() const;
    bool is_cluster_identifier_Valid() const;

    QString getClusterType() const;
    void setClusterType(const QString &cluster_type);
    bool is_cluster_type_Set() const;
    bool is_cluster_type_Valid() const;

    QString getNodeType() const;
    void setNodeType(const QString &node_type);
    bool is_node_type_Set() const;
    bool is_node_type_Valid() const;

    qint32 getNumberOfNodes() const;
    void setNumberOfNodes(const qint32 &number_of_nodes);
    bool is_number_of_nodes_Set() const;
    bool is_number_of_nodes_Valid() const;

    QList getClusterSecurityGroups() const;
    void setClusterSecurityGroups(const QList &cluster_security_groups);
    bool is_cluster_security_groups_Set() const;
    bool is_cluster_security_groups_Valid() const;

    QList getVpcSecurityGroupIds() const;
    void setVpcSecurityGroupIds(const QList &vpc_security_group_ids);
    bool is_vpc_security_group_ids_Set() const;
    bool is_vpc_security_group_ids_Valid() const;

    QString getMasterUserPassword() const;
    void setMasterUserPassword(const QString &master_user_password);
    bool is_master_user_password_Set() const;
    bool is_master_user_password_Valid() const;

    QString getClusterParameterGroupName() const;
    void setClusterParameterGroupName(const QString &cluster_parameter_group_name);
    bool is_cluster_parameter_group_name_Set() const;
    bool is_cluster_parameter_group_name_Valid() const;

    qint32 getAutomatedSnapshotRetentionPeriod() const;
    void setAutomatedSnapshotRetentionPeriod(const qint32 &automated_snapshot_retention_period);
    bool is_automated_snapshot_retention_period_Set() const;
    bool is_automated_snapshot_retention_period_Valid() const;

    qint32 getManualSnapshotRetentionPeriod() const;
    void setManualSnapshotRetentionPeriod(const qint32 &manual_snapshot_retention_period);
    bool is_manual_snapshot_retention_period_Set() const;
    bool is_manual_snapshot_retention_period_Valid() const;

    QString getPreferredMaintenanceWindow() const;
    void setPreferredMaintenanceWindow(const QString &preferred_maintenance_window);
    bool is_preferred_maintenance_window_Set() const;
    bool is_preferred_maintenance_window_Valid() const;

    QString getClusterVersion() const;
    void setClusterVersion(const QString &cluster_version);
    bool is_cluster_version_Set() const;
    bool is_cluster_version_Valid() const;

    bool getAllowVersionUpgrade() const;
    void setAllowVersionUpgrade(const bool &allow_version_upgrade);
    bool is_allow_version_upgrade_Set() const;
    bool is_allow_version_upgrade_Valid() const;

    QString getHsmClientCertificateIdentifier() const;
    void setHsmClientCertificateIdentifier(const QString &hsm_client_certificate_identifier);
    bool is_hsm_client_certificate_identifier_Set() const;
    bool is_hsm_client_certificate_identifier_Valid() const;

    QString getHsmConfigurationIdentifier() const;
    void setHsmConfigurationIdentifier(const QString &hsm_configuration_identifier);
    bool is_hsm_configuration_identifier_Set() const;
    bool is_hsm_configuration_identifier_Valid() const;

    QString getNewClusterIdentifier() const;
    void setNewClusterIdentifier(const QString &new_cluster_identifier);
    bool is_new_cluster_identifier_Set() const;
    bool is_new_cluster_identifier_Valid() const;

    bool getPubliclyAccessible() const;
    void setPubliclyAccessible(const bool &publicly_accessible);
    bool is_publicly_accessible_Set() const;
    bool is_publicly_accessible_Valid() const;

    QString getElasticIp() const;
    void setElasticIp(const QString &elastic_ip);
    bool is_elastic_ip_Set() const;
    bool is_elastic_ip_Valid() const;

    bool getEnhancedVpcRouting() const;
    void setEnhancedVpcRouting(const bool &enhanced_vpc_routing);
    bool is_enhanced_vpc_routing_Set() const;
    bool is_enhanced_vpc_routing_Valid() const;

    QString getMaintenanceTrackName() const;
    void setMaintenanceTrackName(const QString &maintenance_track_name);
    bool is_maintenance_track_name_Set() const;
    bool is_maintenance_track_name_Valid() const;

    bool getEncrypted() const;
    void setEncrypted(const bool &encrypted);
    bool is_encrypted_Set() const;
    bool is_encrypted_Valid() const;

    QString getKmsKeyId() const;
    void setKmsKeyId(const QString &kms_key_id);
    bool is_kms_key_id_Set() const;
    bool is_kms_key_id_Valid() const;

    bool getAvailabilityZoneRelocation() const;
    void setAvailabilityZoneRelocation(const bool &availability_zone_relocation);
    bool is_availability_zone_relocation_Set() const;
    bool is_availability_zone_relocation_Valid() const;

    QString getAvailabilityZone() const;
    void setAvailabilityZone(const QString &availability_zone);
    bool is_availability_zone_Set() const;
    bool is_availability_zone_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_cluster_identifier;
    bool m_cluster_identifier_isSet;
    bool m_cluster_identifier_isValid;

    QString m_cluster_type;
    bool m_cluster_type_isSet;
    bool m_cluster_type_isValid;

    QString m_node_type;
    bool m_node_type_isSet;
    bool m_node_type_isValid;

    qint32 m_number_of_nodes;
    bool m_number_of_nodes_isSet;
    bool m_number_of_nodes_isValid;

    QList m_cluster_security_groups;
    bool m_cluster_security_groups_isSet;
    bool m_cluster_security_groups_isValid;

    QList m_vpc_security_group_ids;
    bool m_vpc_security_group_ids_isSet;
    bool m_vpc_security_group_ids_isValid;

    QString m_master_user_password;
    bool m_master_user_password_isSet;
    bool m_master_user_password_isValid;

    QString m_cluster_parameter_group_name;
    bool m_cluster_parameter_group_name_isSet;
    bool m_cluster_parameter_group_name_isValid;

    qint32 m_automated_snapshot_retention_period;
    bool m_automated_snapshot_retention_period_isSet;
    bool m_automated_snapshot_retention_period_isValid;

    qint32 m_manual_snapshot_retention_period;
    bool m_manual_snapshot_retention_period_isSet;
    bool m_manual_snapshot_retention_period_isValid;

    QString m_preferred_maintenance_window;
    bool m_preferred_maintenance_window_isSet;
    bool m_preferred_maintenance_window_isValid;

    QString m_cluster_version;
    bool m_cluster_version_isSet;
    bool m_cluster_version_isValid;

    bool m_allow_version_upgrade;
    bool m_allow_version_upgrade_isSet;
    bool m_allow_version_upgrade_isValid;

    QString m_hsm_client_certificate_identifier;
    bool m_hsm_client_certificate_identifier_isSet;
    bool m_hsm_client_certificate_identifier_isValid;

    QString m_hsm_configuration_identifier;
    bool m_hsm_configuration_identifier_isSet;
    bool m_hsm_configuration_identifier_isValid;

    QString m_new_cluster_identifier;
    bool m_new_cluster_identifier_isSet;
    bool m_new_cluster_identifier_isValid;

    bool m_publicly_accessible;
    bool m_publicly_accessible_isSet;
    bool m_publicly_accessible_isValid;

    QString m_elastic_ip;
    bool m_elastic_ip_isSet;
    bool m_elastic_ip_isValid;

    bool m_enhanced_vpc_routing;
    bool m_enhanced_vpc_routing_isSet;
    bool m_enhanced_vpc_routing_isValid;

    QString m_maintenance_track_name;
    bool m_maintenance_track_name_isSet;
    bool m_maintenance_track_name_isValid;

    bool m_encrypted;
    bool m_encrypted_isSet;
    bool m_encrypted_isValid;

    QString m_kms_key_id;
    bool m_kms_key_id_isSet;
    bool m_kms_key_id_isValid;

    bool m_availability_zone_relocation;
    bool m_availability_zone_relocation_isSet;
    bool m_availability_zone_relocation_isValid;

    QString m_availability_zone;
    bool m_availability_zone_isSet;
    bool m_availability_zone_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIModifyClusterMessage)

#endif // OAIModifyClusterMessage_H
