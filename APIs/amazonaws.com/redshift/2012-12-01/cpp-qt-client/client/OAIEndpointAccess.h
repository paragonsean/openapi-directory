/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEndpointAccess.h
 *
 * Describes a Redshift-managed VPC endpoint.
 */

#ifndef OAIEndpointAccess_H
#define OAIEndpointAccess_H

#include <QJsonObject>

#include "OAIVpcEndpoint.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIVpcEndpoint;

class OAIEndpointAccess : public OAIObject {
public:
    OAIEndpointAccess();
    OAIEndpointAccess(QString json);
    ~OAIEndpointAccess() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getClusterIdentifier() const;
    void setClusterIdentifier(const QString &cluster_identifier);
    bool is_cluster_identifier_Set() const;
    bool is_cluster_identifier_Valid() const;

    QString getResourceOwner() const;
    void setResourceOwner(const QString &resource_owner);
    bool is_resource_owner_Set() const;
    bool is_resource_owner_Valid() const;

    QString getSubnetGroupName() const;
    void setSubnetGroupName(const QString &subnet_group_name);
    bool is_subnet_group_name_Set() const;
    bool is_subnet_group_name_Valid() const;

    QString getEndpointStatus() const;
    void setEndpointStatus(const QString &endpoint_status);
    bool is_endpoint_status_Set() const;
    bool is_endpoint_status_Valid() const;

    QString getEndpointName() const;
    void setEndpointName(const QString &endpoint_name);
    bool is_endpoint_name_Set() const;
    bool is_endpoint_name_Valid() const;

    QDateTime getEndpointCreateTime() const;
    void setEndpointCreateTime(const QDateTime &endpoint_create_time);
    bool is_endpoint_create_time_Set() const;
    bool is_endpoint_create_time_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    QString getAddress() const;
    void setAddress(const QString &address);
    bool is_address_Set() const;
    bool is_address_Valid() const;

    QList getVpcSecurityGroups() const;
    void setVpcSecurityGroups(const QList &vpc_security_groups);
    bool is_vpc_security_groups_Set() const;
    bool is_vpc_security_groups_Valid() const;

    OAIVpcEndpoint getVpcEndpoint() const;
    void setVpcEndpoint(const OAIVpcEndpoint &vpc_endpoint);
    bool is_vpc_endpoint_Set() const;
    bool is_vpc_endpoint_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_cluster_identifier;
    bool m_cluster_identifier_isSet;
    bool m_cluster_identifier_isValid;

    QString m_resource_owner;
    bool m_resource_owner_isSet;
    bool m_resource_owner_isValid;

    QString m_subnet_group_name;
    bool m_subnet_group_name_isSet;
    bool m_subnet_group_name_isValid;

    QString m_endpoint_status;
    bool m_endpoint_status_isSet;
    bool m_endpoint_status_isValid;

    QString m_endpoint_name;
    bool m_endpoint_name_isSet;
    bool m_endpoint_name_isValid;

    QDateTime m_endpoint_create_time;
    bool m_endpoint_create_time_isSet;
    bool m_endpoint_create_time_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    QString m_address;
    bool m_address_isSet;
    bool m_address_isValid;

    QList m_vpc_security_groups;
    bool m_vpc_security_groups_isSet;
    bool m_vpc_security_groups_isValid;

    OAIVpcEndpoint m_vpc_endpoint;
    bool m_vpc_endpoint_isSet;
    bool m_vpc_endpoint_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEndpointAccess)

#endif // OAIEndpointAccess_H
