/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRevokeEndpointAccessMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRevokeEndpointAccessMessage::OAIRevokeEndpointAccessMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRevokeEndpointAccessMessage::OAIRevokeEndpointAccessMessage() {
    this->initializeModel();
}

OAIRevokeEndpointAccessMessage::~OAIRevokeEndpointAccessMessage() {}

void OAIRevokeEndpointAccessMessage::initializeModel() {

    m_cluster_identifier_isSet = false;
    m_cluster_identifier_isValid = false;

    m_account_isSet = false;
    m_account_isValid = false;

    m_vpc_ids_isSet = false;
    m_vpc_ids_isValid = false;

    m_force_isSet = false;
    m_force_isValid = false;
}

void OAIRevokeEndpointAccessMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRevokeEndpointAccessMessage::fromJsonObject(QJsonObject json) {

    m_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_cluster_identifier, json[QString("ClusterIdentifier")]);
    m_cluster_identifier_isSet = !json[QString("ClusterIdentifier")].isNull() && m_cluster_identifier_isValid;

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("Account")]);
    m_account_isSet = !json[QString("Account")].isNull() && m_account_isValid;

    m_vpc_ids_isValid = ::OpenAPI::fromJsonValue(m_vpc_ids, json[QString("VpcIds")]);
    m_vpc_ids_isSet = !json[QString("VpcIds")].isNull() && m_vpc_ids_isValid;

    m_force_isValid = ::OpenAPI::fromJsonValue(m_force, json[QString("Force")]);
    m_force_isSet = !json[QString("Force")].isNull() && m_force_isValid;
}

QString OAIRevokeEndpointAccessMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRevokeEndpointAccessMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_identifier_isSet) {
        obj.insert(QString("ClusterIdentifier"), ::OpenAPI::toJsonValue(m_cluster_identifier));
    }
    if (m_account_isSet) {
        obj.insert(QString("Account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_vpc_ids.isSet()) {
        obj.insert(QString("VpcIds"), ::OpenAPI::toJsonValue(m_vpc_ids));
    }
    if (m_force_isSet) {
        obj.insert(QString("Force"), ::OpenAPI::toJsonValue(m_force));
    }
    return obj;
}

QString OAIRevokeEndpointAccessMessage::getClusterIdentifier() const {
    return m_cluster_identifier;
}
void OAIRevokeEndpointAccessMessage::setClusterIdentifier(const QString &cluster_identifier) {
    m_cluster_identifier = cluster_identifier;
    m_cluster_identifier_isSet = true;
}

bool OAIRevokeEndpointAccessMessage::is_cluster_identifier_Set() const{
    return m_cluster_identifier_isSet;
}

bool OAIRevokeEndpointAccessMessage::is_cluster_identifier_Valid() const{
    return m_cluster_identifier_isValid;
}

QString OAIRevokeEndpointAccessMessage::getAccount() const {
    return m_account;
}
void OAIRevokeEndpointAccessMessage::setAccount(const QString &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIRevokeEndpointAccessMessage::is_account_Set() const{
    return m_account_isSet;
}

bool OAIRevokeEndpointAccessMessage::is_account_Valid() const{
    return m_account_isValid;
}

QList OAIRevokeEndpointAccessMessage::getVpcIds() const {
    return m_vpc_ids;
}
void OAIRevokeEndpointAccessMessage::setVpcIds(const QList &vpc_ids) {
    m_vpc_ids = vpc_ids;
    m_vpc_ids_isSet = true;
}

bool OAIRevokeEndpointAccessMessage::is_vpc_ids_Set() const{
    return m_vpc_ids_isSet;
}

bool OAIRevokeEndpointAccessMessage::is_vpc_ids_Valid() const{
    return m_vpc_ids_isValid;
}

bool OAIRevokeEndpointAccessMessage::getForce() const {
    return m_force;
}
void OAIRevokeEndpointAccessMessage::setForce(const bool &force) {
    m_force = force;
    m_force_isSet = true;
}

bool OAIRevokeEndpointAccessMessage::is_force_Set() const{
    return m_force_isSet;
}

bool OAIRevokeEndpointAccessMessage::is_force_Valid() const{
    return m_force_isValid;
}

bool OAIRevokeEndpointAccessMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRevokeEndpointAccessMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
