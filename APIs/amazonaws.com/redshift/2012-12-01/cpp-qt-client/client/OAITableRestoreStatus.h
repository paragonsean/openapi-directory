/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITableRestoreStatus.h
 *
 * Describes the status of a &lt;a&gt;RestoreTableFromClusterSnapshot&lt;/a&gt; operation.
 */

#ifndef OAITableRestoreStatus_H
#define OAITableRestoreStatus_H

#include <QJsonObject>

#include "OAITableRestoreStatusType.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITableRestoreStatus : public OAIObject {
public:
    OAITableRestoreStatus();
    OAITableRestoreStatus(QString json);
    ~OAITableRestoreStatus() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getTableRestoreRequestId() const;
    void setTableRestoreRequestId(const QString &table_restore_request_id);
    bool is_table_restore_request_id_Set() const;
    bool is_table_restore_request_id_Valid() const;

    OAITableRestoreStatusType getStatus() const;
    void setStatus(const OAITableRestoreStatusType &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getMessage() const;
    void setMessage(const QString &message);
    bool is_message_Set() const;
    bool is_message_Valid() const;

    QDateTime getRequestTime() const;
    void setRequestTime(const QDateTime &request_time);
    bool is_request_time_Set() const;
    bool is_request_time_Valid() const;

    qint32 getProgressInMegaBytes() const;
    void setProgressInMegaBytes(const qint32 &progress_in_mega_bytes);
    bool is_progress_in_mega_bytes_Set() const;
    bool is_progress_in_mega_bytes_Valid() const;

    qint32 getTotalDataInMegaBytes() const;
    void setTotalDataInMegaBytes(const qint32 &total_data_in_mega_bytes);
    bool is_total_data_in_mega_bytes_Set() const;
    bool is_total_data_in_mega_bytes_Valid() const;

    QString getClusterIdentifier() const;
    void setClusterIdentifier(const QString &cluster_identifier);
    bool is_cluster_identifier_Set() const;
    bool is_cluster_identifier_Valid() const;

    QString getSnapshotIdentifier() const;
    void setSnapshotIdentifier(const QString &snapshot_identifier);
    bool is_snapshot_identifier_Set() const;
    bool is_snapshot_identifier_Valid() const;

    QString getSourceDatabaseName() const;
    void setSourceDatabaseName(const QString &source_database_name);
    bool is_source_database_name_Set() const;
    bool is_source_database_name_Valid() const;

    QString getSourceSchemaName() const;
    void setSourceSchemaName(const QString &source_schema_name);
    bool is_source_schema_name_Set() const;
    bool is_source_schema_name_Valid() const;

    QString getSourceTableName() const;
    void setSourceTableName(const QString &source_table_name);
    bool is_source_table_name_Set() const;
    bool is_source_table_name_Valid() const;

    QString getTargetDatabaseName() const;
    void setTargetDatabaseName(const QString &target_database_name);
    bool is_target_database_name_Set() const;
    bool is_target_database_name_Valid() const;

    QString getTargetSchemaName() const;
    void setTargetSchemaName(const QString &target_schema_name);
    bool is_target_schema_name_Set() const;
    bool is_target_schema_name_Valid() const;

    QString getNewTableName() const;
    void setNewTableName(const QString &new_table_name);
    bool is_new_table_name_Set() const;
    bool is_new_table_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_table_restore_request_id;
    bool m_table_restore_request_id_isSet;
    bool m_table_restore_request_id_isValid;

    OAITableRestoreStatusType m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_message;
    bool m_message_isSet;
    bool m_message_isValid;

    QDateTime m_request_time;
    bool m_request_time_isSet;
    bool m_request_time_isValid;

    qint32 m_progress_in_mega_bytes;
    bool m_progress_in_mega_bytes_isSet;
    bool m_progress_in_mega_bytes_isValid;

    qint32 m_total_data_in_mega_bytes;
    bool m_total_data_in_mega_bytes_isSet;
    bool m_total_data_in_mega_bytes_isValid;

    QString m_cluster_identifier;
    bool m_cluster_identifier_isSet;
    bool m_cluster_identifier_isValid;

    QString m_snapshot_identifier;
    bool m_snapshot_identifier_isSet;
    bool m_snapshot_identifier_isValid;

    QString m_source_database_name;
    bool m_source_database_name_isSet;
    bool m_source_database_name_isValid;

    QString m_source_schema_name;
    bool m_source_schema_name_isSet;
    bool m_source_schema_name_isValid;

    QString m_source_table_name;
    bool m_source_table_name_isSet;
    bool m_source_table_name_isValid;

    QString m_target_database_name;
    bool m_target_database_name_isSet;
    bool m_target_database_name_isValid;

    QString m_target_schema_name;
    bool m_target_schema_name_isSet;
    bool m_target_schema_name_isValid;

    QString m_new_table_name;
    bool m_new_table_name_isSet;
    bool m_new_table_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITableRestoreStatus)

#endif // OAITableRestoreStatus_H
