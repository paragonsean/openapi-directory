/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssociateDataShareConsumerMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssociateDataShareConsumerMessage::OAIAssociateDataShareConsumerMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssociateDataShareConsumerMessage::OAIAssociateDataShareConsumerMessage() {
    this->initializeModel();
}

OAIAssociateDataShareConsumerMessage::~OAIAssociateDataShareConsumerMessage() {}

void OAIAssociateDataShareConsumerMessage::initializeModel() {

    m_data_share_arn_isSet = false;
    m_data_share_arn_isValid = false;

    m_associate_entire_account_isSet = false;
    m_associate_entire_account_isValid = false;

    m_consumer_arn_isSet = false;
    m_consumer_arn_isValid = false;

    m_consumer_region_isSet = false;
    m_consumer_region_isValid = false;
}

void OAIAssociateDataShareConsumerMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssociateDataShareConsumerMessage::fromJsonObject(QJsonObject json) {

    m_data_share_arn_isValid = ::OpenAPI::fromJsonValue(m_data_share_arn, json[QString("DataShareArn")]);
    m_data_share_arn_isSet = !json[QString("DataShareArn")].isNull() && m_data_share_arn_isValid;

    m_associate_entire_account_isValid = ::OpenAPI::fromJsonValue(m_associate_entire_account, json[QString("AssociateEntireAccount")]);
    m_associate_entire_account_isSet = !json[QString("AssociateEntireAccount")].isNull() && m_associate_entire_account_isValid;

    m_consumer_arn_isValid = ::OpenAPI::fromJsonValue(m_consumer_arn, json[QString("ConsumerArn")]);
    m_consumer_arn_isSet = !json[QString("ConsumerArn")].isNull() && m_consumer_arn_isValid;

    m_consumer_region_isValid = ::OpenAPI::fromJsonValue(m_consumer_region, json[QString("ConsumerRegion")]);
    m_consumer_region_isSet = !json[QString("ConsumerRegion")].isNull() && m_consumer_region_isValid;
}

QString OAIAssociateDataShareConsumerMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssociateDataShareConsumerMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_data_share_arn_isSet) {
        obj.insert(QString("DataShareArn"), ::OpenAPI::toJsonValue(m_data_share_arn));
    }
    if (m_associate_entire_account_isSet) {
        obj.insert(QString("AssociateEntireAccount"), ::OpenAPI::toJsonValue(m_associate_entire_account));
    }
    if (m_consumer_arn_isSet) {
        obj.insert(QString("ConsumerArn"), ::OpenAPI::toJsonValue(m_consumer_arn));
    }
    if (m_consumer_region_isSet) {
        obj.insert(QString("ConsumerRegion"), ::OpenAPI::toJsonValue(m_consumer_region));
    }
    return obj;
}

QString OAIAssociateDataShareConsumerMessage::getDataShareArn() const {
    return m_data_share_arn;
}
void OAIAssociateDataShareConsumerMessage::setDataShareArn(const QString &data_share_arn) {
    m_data_share_arn = data_share_arn;
    m_data_share_arn_isSet = true;
}

bool OAIAssociateDataShareConsumerMessage::is_data_share_arn_Set() const{
    return m_data_share_arn_isSet;
}

bool OAIAssociateDataShareConsumerMessage::is_data_share_arn_Valid() const{
    return m_data_share_arn_isValid;
}

bool OAIAssociateDataShareConsumerMessage::getAssociateEntireAccount() const {
    return m_associate_entire_account;
}
void OAIAssociateDataShareConsumerMessage::setAssociateEntireAccount(const bool &associate_entire_account) {
    m_associate_entire_account = associate_entire_account;
    m_associate_entire_account_isSet = true;
}

bool OAIAssociateDataShareConsumerMessage::is_associate_entire_account_Set() const{
    return m_associate_entire_account_isSet;
}

bool OAIAssociateDataShareConsumerMessage::is_associate_entire_account_Valid() const{
    return m_associate_entire_account_isValid;
}

QString OAIAssociateDataShareConsumerMessage::getConsumerArn() const {
    return m_consumer_arn;
}
void OAIAssociateDataShareConsumerMessage::setConsumerArn(const QString &consumer_arn) {
    m_consumer_arn = consumer_arn;
    m_consumer_arn_isSet = true;
}

bool OAIAssociateDataShareConsumerMessage::is_consumer_arn_Set() const{
    return m_consumer_arn_isSet;
}

bool OAIAssociateDataShareConsumerMessage::is_consumer_arn_Valid() const{
    return m_consumer_arn_isValid;
}

QString OAIAssociateDataShareConsumerMessage::getConsumerRegion() const {
    return m_consumer_region;
}
void OAIAssociateDataShareConsumerMessage::setConsumerRegion(const QString &consumer_region) {
    m_consumer_region = consumer_region;
    m_consumer_region_isSet = true;
}

bool OAIAssociateDataShareConsumerMessage::is_consumer_region_Set() const{
    return m_consumer_region_isSet;
}

bool OAIAssociateDataShareConsumerMessage::is_consumer_region_Valid() const{
    return m_consumer_region_isValid;
}

bool OAIAssociateDataShareConsumerMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_share_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_associate_entire_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumer_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumer_region_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssociateDataShareConsumerMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_share_arn_isValid && true;
}

} // namespace OpenAPI
