/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventList_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventList_inner::OAIEventList_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventList_inner::OAIEventList_inner() {
    this->initializeModel();
}

OAIEventList_inner::~OAIEventList_inner() {}

void OAIEventList_inner::initializeModel() {

    m_source_identifier_isSet = false;
    m_source_identifier_isValid = false;

    m_source_type_isSet = false;
    m_source_type_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_event_categories_isSet = false;
    m_event_categories_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_event_id_isSet = false;
    m_event_id_isValid = false;
}

void OAIEventList_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventList_inner::fromJsonObject(QJsonObject json) {

    m_source_identifier_isValid = ::OpenAPI::fromJsonValue(m_source_identifier, json[QString("SourceIdentifier")]);
    m_source_identifier_isSet = !json[QString("SourceIdentifier")].isNull() && m_source_identifier_isValid;

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("SourceType")]);
    m_source_type_isSet = !json[QString("SourceType")].isNull() && m_source_type_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_event_categories_isValid = ::OpenAPI::fromJsonValue(m_event_categories, json[QString("EventCategories")]);
    m_event_categories_isSet = !json[QString("EventCategories")].isNull() && m_event_categories_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("Severity")]);
    m_severity_isSet = !json[QString("Severity")].isNull() && m_severity_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("Date")]);
    m_date_isSet = !json[QString("Date")].isNull() && m_date_isValid;

    m_event_id_isValid = ::OpenAPI::fromJsonValue(m_event_id, json[QString("EventId")]);
    m_event_id_isSet = !json[QString("EventId")].isNull() && m_event_id_isValid;
}

QString OAIEventList_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventList_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_source_identifier_isSet) {
        obj.insert(QString("SourceIdentifier"), ::OpenAPI::toJsonValue(m_source_identifier));
    }
    if (m_source_type.isSet()) {
        obj.insert(QString("SourceType"), ::OpenAPI::toJsonValue(m_source_type));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_event_categories.isSet()) {
        obj.insert(QString("EventCategories"), ::OpenAPI::toJsonValue(m_event_categories));
    }
    if (m_severity_isSet) {
        obj.insert(QString("Severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_date_isSet) {
        obj.insert(QString("Date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_event_id_isSet) {
        obj.insert(QString("EventId"), ::OpenAPI::toJsonValue(m_event_id));
    }
    return obj;
}

QString OAIEventList_inner::getSourceIdentifier() const {
    return m_source_identifier;
}
void OAIEventList_inner::setSourceIdentifier(const QString &source_identifier) {
    m_source_identifier = source_identifier;
    m_source_identifier_isSet = true;
}

bool OAIEventList_inner::is_source_identifier_Set() const{
    return m_source_identifier_isSet;
}

bool OAIEventList_inner::is_source_identifier_Valid() const{
    return m_source_identifier_isValid;
}

OAISourceType OAIEventList_inner::getSourceType() const {
    return m_source_type;
}
void OAIEventList_inner::setSourceType(const OAISourceType &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAIEventList_inner::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAIEventList_inner::is_source_type_Valid() const{
    return m_source_type_isValid;
}

QString OAIEventList_inner::getMessage() const {
    return m_message;
}
void OAIEventList_inner::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIEventList_inner::is_message_Set() const{
    return m_message_isSet;
}

bool OAIEventList_inner::is_message_Valid() const{
    return m_message_isValid;
}

QList OAIEventList_inner::getEventCategories() const {
    return m_event_categories;
}
void OAIEventList_inner::setEventCategories(const QList &event_categories) {
    m_event_categories = event_categories;
    m_event_categories_isSet = true;
}

bool OAIEventList_inner::is_event_categories_Set() const{
    return m_event_categories_isSet;
}

bool OAIEventList_inner::is_event_categories_Valid() const{
    return m_event_categories_isValid;
}

QString OAIEventList_inner::getSeverity() const {
    return m_severity;
}
void OAIEventList_inner::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIEventList_inner::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIEventList_inner::is_severity_Valid() const{
    return m_severity_isValid;
}

QDateTime OAIEventList_inner::getDate() const {
    return m_date;
}
void OAIEventList_inner::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIEventList_inner::is_date_Set() const{
    return m_date_isSet;
}

bool OAIEventList_inner::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIEventList_inner::getEventId() const {
    return m_event_id;
}
void OAIEventList_inner::setEventId(const QString &event_id) {
    m_event_id = event_id;
    m_event_id_isSet = true;
}

bool OAIEventList_inner::is_event_id_Set() const{
    return m_event_id_isSet;
}

bool OAIEventList_inner::is_event_id_Valid() const{
    return m_event_id_isValid;
}

bool OAIEventList_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_categories.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventList_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
