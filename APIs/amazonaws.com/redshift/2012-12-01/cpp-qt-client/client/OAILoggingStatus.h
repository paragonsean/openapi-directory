/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILoggingStatus.h
 *
 * Describes the status of logging for a cluster.
 */

#ifndef OAILoggingStatus_H
#define OAILoggingStatus_H

#include <QJsonObject>

#include "OAILogDestinationType.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAILoggingStatus : public OAIObject {
public:
    OAILoggingStatus();
    OAILoggingStatus(QString json);
    ~OAILoggingStatus() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool getLoggingEnabled() const;
    void setLoggingEnabled(const bool &logging_enabled);
    bool is_logging_enabled_Set() const;
    bool is_logging_enabled_Valid() const;

    QString getBucketName() const;
    void setBucketName(const QString &bucket_name);
    bool is_bucket_name_Set() const;
    bool is_bucket_name_Valid() const;

    QString getS3KeyPrefix() const;
    void setS3KeyPrefix(const QString &s3_key_prefix);
    bool is_s3_key_prefix_Set() const;
    bool is_s3_key_prefix_Valid() const;

    QDateTime getLastSuccessfulDeliveryTime() const;
    void setLastSuccessfulDeliveryTime(const QDateTime &last_successful_delivery_time);
    bool is_last_successful_delivery_time_Set() const;
    bool is_last_successful_delivery_time_Valid() const;

    QDateTime getLastFailureTime() const;
    void setLastFailureTime(const QDateTime &last_failure_time);
    bool is_last_failure_time_Set() const;
    bool is_last_failure_time_Valid() const;

    QString getLastFailureMessage() const;
    void setLastFailureMessage(const QString &last_failure_message);
    bool is_last_failure_message_Set() const;
    bool is_last_failure_message_Valid() const;

    OAILogDestinationType getLogDestinationType() const;
    void setLogDestinationType(const OAILogDestinationType &log_destination_type);
    bool is_log_destination_type_Set() const;
    bool is_log_destination_type_Valid() const;

    QList getLogExports() const;
    void setLogExports(const QList &log_exports);
    bool is_log_exports_Set() const;
    bool is_log_exports_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_logging_enabled;
    bool m_logging_enabled_isSet;
    bool m_logging_enabled_isValid;

    QString m_bucket_name;
    bool m_bucket_name_isSet;
    bool m_bucket_name_isValid;

    QString m_s3_key_prefix;
    bool m_s3_key_prefix_isSet;
    bool m_s3_key_prefix_isValid;

    QDateTime m_last_successful_delivery_time;
    bool m_last_successful_delivery_time_isSet;
    bool m_last_successful_delivery_time_isValid;

    QDateTime m_last_failure_time;
    bool m_last_failure_time_isSet;
    bool m_last_failure_time_isValid;

    QString m_last_failure_message;
    bool m_last_failure_message_isSet;
    bool m_last_failure_message_isValid;

    OAILogDestinationType m_log_destination_type;
    bool m_log_destination_type_isSet;
    bool m_log_destination_type_isValid;

    QList m_log_exports;
    bool m_log_exports_isSet;
    bool m_log_exports_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILoggingStatus)

#endif // OAILoggingStatus_H
